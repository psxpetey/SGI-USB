cscope 15 $HOME/USB_driver_IRIX/usb_irix -q 0000029937 0001741521
	@X11display.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~"X11di•œy.h
"

28 
	$X11_di•œy_öô
–
X11_di•œy_t
 *
di•œy
){

32 
di•œy
->
dpy
 = 
	`XO≥nDi•œy
(
NULL
);

33 i‡(!
di•œy
->
dpy
) {

34 
	`Ârötf
(
°dîr
, "unableÅo connectÅo display ");

42 
di•œy
->
s¸ìn_num
 = 
	`DeÁu…S¸ìn
(di•œy->
dpy
);

43 
di•œy
->
width
 = 
	`Di•œyWidth
–di•œy->
dpy
, 
	`DeÁu…S¸ìn
( display->dpy));

44 
di•œy
->
height
 = 
	`Di•œyHeight
–di•œy->
dpy
, 
	`DeÁu…S¸ìn
( display->dpy));

45 
di•œy
->
˛_b‹dî
 = 
	`WhôePixñ
–di•œy->
dpy
, di•œy->
s¸ìn_num
);

46 
di•œy
->
˛_background
 = 
	`BœckPixñ
–di•œy->
dpy
, di•œy->
s¸ìn_num
);

49 
	}
}

51 
	$X11_di•œy_˛o£
–
X11_di•œy_t
 *
di•œy
){

52 
	`XClo£Di•œy
(
di•œy
->
dpy
);

54 
	}
}

	@X11display.h

22 #i‚de‡
_X11DISPLAY_H_


23 
	#_X11DISPLAY_H_


	)

27 
	~<X11/Xlib.h
>

28 
	~<X11/Xutû.h
>

29 
	~<X11/Xªsour˚.h
>

30 
	~<X11/keysymdef.h
>

31 
	~<X11/curs‹f⁄t.h
>

33 
	#MOUSE_ALL_EVENTS_MASK
 ( 
Buâ⁄PªssMask
 | 
Buâ⁄Rñó£Mask
 | 
PoöãrMŸi⁄Mask
 | 
E¡îWödowMask
 | 
LóveWödowMask
)

	)

34 
	#WINDOW_ALL_EVENTS_MASK
 ( 
Såu˘uªNŸifyMask
 | 
ExposuªMask
 | 
Sub°ru˘uªNŸifyMask
)

	)

35 
	#KEYBOARD_ALL_EVENTS_MASK
 ( 
KeyPªssMask
 | 
KeyRñó£Mask
 )

	)

38 
Di•œy
 *
	mdpy
;

39 
	mwidth
, 
	mheight
;

40 
	ms¸ìn_num
;

41 
	m˛_background
, 
	m˛_b‹dî
;

42 }
	tX11_di•œy_t
;

44 
X11_di•œy_öô
–
X11_di•œy_t
 *
di•œy
);

45 
X11_di•œy_˛o£
–
X11_di•œy_t
 *
di•œy
);

	@X11window.c

23 
	~"X11wödow.h
"

24 
	~<°rög.h
>

26 
	$X11_wödow_öô
–
X11_di•œy_t
 *
di•œy
, 
X11_wödow_t
 *
wödow
){

27 
	`mem£t
–(*Ë
wödow
, 0, –
X11_wödow_t
));

29 
wödow
->
di•œy
 = display;

30 
wödow
->
˛_b‹dî
 = 
di•œy
->cl_border;

31 
wödow
->
˛_background
 = 
di•œy
->cl_background;

33 
	}
}

37 
	$X11_wödow_£t_geomëry
–
X11_wödow_t
 *
wödow
, 
width
, 
height
, 
posx
, 
posy
, 
b‹dî_width
){

38 
wödow
->
posx
 =Öosx;

39 
wödow
->
posy
 =Öosy;

40 
wödow
->
width
 = width;

41 
wödow
->
height
 = height;

42 
wödow
->
sz_b‹dî
 = 
b‹dî_width
;

44 
	}
}

46 
	$X11_wödow_£t_cﬁ‹s
–
X11_wödow_t
 *
wödow
, 
˛_b‹dî
, 
˛_background
){

47 
wödow
->
˛_b‹dî
 = cl_border;

48 
wödow
->
˛_background
 = cl_background;

50 
	}
}

52 
	$X11_wödow_£t_mask
–
X11_wödow_t
 *
wödow
, 
mask
){

53 
wödow
->
evít_mask
 = 
mask
;

55 
	}
}

57 
	$X11_wödow_di•œy
–
X11_wödow_t
 *
wödow
){

58 
wödow
->
wö
 = 
	`XCª©eSim∂eWödow
–wödow->
di•œy
->
dpy
, 
	`DeÁu…RoŸWödow
( window->display->dpy),

59 
wödow
->
posx
, wödow->
posy
,

60 
wödow
->
width
, wödow->
height
,

61 
wödow
->
sz_b‹dî
, wödow->
˛_b‹dî
,

62 
wödow
->
˛_background
);

65 
	`XSñe˘I≈ut
–
wödow
->
di•œy
->
dpy
, wödow->
wö
, wödow->
evít_mask
 );

68 
	`XM≠Wödow
–
wödow
->
di•œy
->
dpy
, wödow->
wö
);

69 
	`XMoveWödow
–
wödow
->
di•œy
->
dpy
, wödow->
wö
, wödow->
posx
, wödow->
posy
);

71 
	`XFlush
–
wödow
->
di•œy
->
dpy
);

74 
	}
}

76 
	$X11_wödow_˛o£
–
X11_wödow_t
 *
wödow
){

77 
	`XUnm≠Wödow
–
wödow
->
di•œy
->
dpy
 , wödow->
wö
);

79 
	}
}

81 
	$X11_wödow_de°roy
–
X11_wödow_t
 *
wödow
){

82 
	`XDe°royWödow
–
wödow
->
di•œy
->
dpy
 , wödow->
wö
);

84 
	}
}

86 
	$X11_wödow_gë_√xt_evít
–
X11_wödow_t
 *
wödow
){

87 
	`XNextEvít
–
wödow
->
di•œy
->
dpy
, &wödow->
ev
);

88 –
wödow
->
ev
.
ty≥
);

89 
	}
}

92 
	$X11_wödow_£t_wm_«me
–
X11_wödow_t
 *
wödow
, *
wödow_tôÀ
){

93 
XSizeHöts
 
xsh
;

95 
xsh
.
Êags
 = (
PPosôi⁄
|
PSize
);

96 
xsh
.
height
 = 
wödow
->height;

97 
xsh
.
width
 = 
wödow
->width;

98 
xsh
.
x
 = 
wödow
->
posx
;

99 
xsh
.
y
 = 
wödow
->
posy
;

101 
	`XSëSènd¨dPr›îtõs
(
wödow
->
di•œy
->
dpy
, wödow->
wö
, 
wödow_tôÀ
, wödow_tôÀ, 
N⁄e
, 
NULL
, 0, &
xsh
);

104 
	}
}

	@X11window.h

22 #i‚de‡
_X11WINDOW_H_


23 
	#_X11WINDOW_H_


	)

25 
	~"X11di•œy.h
"

30 
X11_di•œy_t
 *
	mdi•œy
;

31 
Wödow
 
	mwö
;

32 
	mposx
, 
	mposy
, 
	mwidth
, 
	mheight
;

33 
	msz_b‹dî
;

34 
	m˛_background
, 
	m˛_b‹dî
;

35 
	mevít_mask
;

36 
XEvít
 
	mev
;

37 }
	tX11_wödow_t
;

40 
X11_wödow_öô
–
X11_di•œy_t
 *
di•œy
, 
X11_wödow_t
 *
wödow
);

41 
X11_wödow_£t_geomëry
–
X11_wödow_t
 *
wödow
, 
width
, 
height
, 
posx
, 
posy
, 
b‹dî_width
);

42 
X11_wödow_£t_cﬁ‹s
–
X11_wödow_t
 *
wödow
, 
˛_b‹dî
, 
˛_background
);

43 
X11_wödow_£t_mask
–
X11_wödow_t
 *
wödow
, 
mask
);

44 
X11_wödow_di•œy
–
X11_wödow_t
 *
wödow
);

45 
X11_wödow_˛o£
–
X11_wödow_t
 *
wödow
);

46 
X11_wödow_de°roy
–
X11_wödow_t
 *
wödow
);

47 
X11_wödow_gë_√xt_evít
–
X11_wödow_t
 *
wödow
);

48 
X11_wödow_£t_wm_«me
–
X11_wödow_t
 *
wödow
, *
wödow_tôÀ
);

	@arrstr.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~"¨r°r.h
"

27 
	$¨r°r_öô
–
¨r°r_t
 *
¨r
, 
max
){

28 
	`mem£t
–(*Ë
¨r
, 0, –
¨r°r_t
));

29 if–
max
 >
MAX_STRINGS
)

30 
max
 = 
MAX_STRINGS
;

32 
¨r
->
max
 = max;

33 
	}
}

35 
	$¨r°r_de°roy
–
¨r°r_t
 *
¨r
){

36 
i
;

38  
i
 = 0; i < 
¨r
->
max
; i++){

39 if–
¨r
->
°r
[
i
] !
NULL
)

40 
	`‰ì
–
¨r
->
°r
[
i
]);

43 
	`¨r°r_öô
–
¨r
, 
MAX_STRINGS
);

45 
	}
}

48 
	$¨r°r_add
–
¨r°r_t
 *
¨r
, *
°r
){

49 
i
;

51 if–
¨r
->
°r
[0] !
NULL
)

52 
	`‰ì
–
¨r
->
°r
[0]);

55  
i
 = 0; i < ( 
¨r
->
max
 - 1); i++){

56 
¨r
->
°r
[
i
] =árr->str[i + 1];

59 
¨r
->
°r
[
i
] = 
	`°rdup
( str);

60 
	}
}

62 
	$¨r°r_dump
–
¨r°r_t
 *
¨r
){

63 
i
;

64 
	`¥ötf
("DUMP\n");

65  
i
 = 0; i < 
¨r
->
max
; i++){

66 if–
¨r
->
°r
[
i
] =
NULL
)

67 
	`¥ötf
("%d : NULL\n", 
i
);

69 
	`¥ötf
("%d : %s\n", 
i
, 
¨r
->
°r
[i]);

73 
	}
}

	@arrstr.h

23 #i‚de‡
_ARRSTR_H_


24 
	#_ARRSTR_H_


	)

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

29 
	#MAX_STRINGS
 8

	)

32 
	mmax
;

33 *
	m°r
[
MAX_STRINGS
];

34 }
	t¨r°r_t
;

36 
¨r°r_öô
–
¨r°r_t
 *
¨r
, 
max
);

37 
¨r°r_de°roy
–
¨r°r_t
 *
¨r
);

38 
¨r°r_add
–
¨r°r_t
 *
¨r
, *
°r
);

39 
¨r°r_dump
–
¨r°r_t
 *
¨r
);

	@config.h

32 
	#USBCORE_DRV_SHORT_NAME
 "USBCORE"

	)

33 
	#USBCORE_DRV_LONG_NAME
 "USB sèckánd ho° c⁄åﬁÀ∏drivî f‹ SGI IRIX 6.5 <bsdîÿ© gmaû dŸ org>"

	)

34 
	#USBCORE_DRV_VERSION
 "0.0.1.5"

	)

35 
	#USBCORE_DRV_SHORT_VERSION
 "0015"

	)

36 
	#USBCORE_DRV_SEQ
 "01081706142013"

	)

37 
	#USBCORE_DRV_BUILD_DATE
 "FròJu¿14 01:08:17 2013"

	)

	@dma.c

37 
uöt64_t
 
	tpcüddr_t
;

40 
	#dma_li°_öô
(
±r
Ë
	`gc_li°_öô
’å)

	)

41 
	#dma_li°_em±y
(
l
Ë
	`gc_li°_em±y
÷)

	)

42 
	#dma_node_gë_d©a_addr
(
node
Ë“odê+ (
dma_node_t
))

	)

43 
	#off£t_of
(
°
, 
m
Ë((
size_t
Ë–(*)&((° *)(0))->m - (*)0 ))

	)

44 
	#kaddr_2_daddr
–
daddr
,
kaddr
,
ofs
Ë(
uöt32_t
Ë(dadd∏+ ((
uöt64_t
)of†- (uöt64_t)kaddr))

	)

47 
gc_li°_t
 
	tdma_li°_t
;

52 
i›addr_t
 
	m∑ddr
;

53 
ˇddr_t
 
	mkaddr
;

54 
pciio_dmam≠_t
 
	mm≠
;

55 
pcüddr_t
 
	mdaddr
;

56 
size_t
 
	mbyãs
;

57 
uch¨_t
 *
	mmem
;

58 
	m•a˚s
[12];

59 }
	tdma_node_t
;

61 
pci_u£r_dma_max_∑ges
;

64 
dma_node_t
 *
dma_Æloc
–
vîãx_hdl_t
 
vhdl
, 
dma_li°_t
 *
dma_li°
, 
size_t
 
size
);

65 
dma_døö
–
dma_node_t
 *
dma_node
);

66 
dma_d⁄e
–
dma_node_t
 *
dma_node
);

67 
dma_m¨k
–
dma_node_t
 *
dma_node
);

68 
dma_‰ì
–
dma_node_t
 *
dma_node
);

69 
dma_li°_swìp
–
dma_li°_t
 *
dma_li°
);

70 
dma_li°_de°roy
–
dma_li°_t
 *
dma_li°
);

71 
dma_li°_dump
–
dma_li°_t
 *
dma_li°
);

72 
dma_node_dump
–
dma_node_t
 *
dma_node
);

76 
dma_node_t
 *
	$dma_Æloc
–
vîãx_hdl_t
 
vhdl
, 
dma_li°_t
 *
dma_li°
, 
size_t
 
size
){

77 
dma_node_t
 *
dma_node
;

78 *
kaddr
 = 0;

79 
i›addr_t
 
∑ddr
;

80 
pciio_dmam≠_t
 
dmam≠
 = 0;

81 
size_t
 
byãs
 = 
size
;

82 
pcüddr_t
 
daddr
;

83 
îr
 = 0;

84 
uch¨_t
 *
mem
;

85 
Êags
 = 0;

87 
	`TRACE
–
TRC_GC_DMA
, 12, "íãr", 
NULL
);

91 
	`TRACE
–
TRC_GC_DMA
, 12, "user wants 0x%x bytes of DMA, flags 0x%x, sizeof(dma_node_t)=%d",

92 
byãs
, 
Êags
, –
dma_node_t
));

93 
	`TRACE
–
TRC_GC_DMA
, 12, "allocating descriptor", "");

94 
dma_node
 = (
dma_node_t
 *Ë
	`gc_mÆloc
–
dma_li°
, (dma_node_t));

95 if–
dma_node
 =
NULL
){

96 
	`TRACE
–
TRC_GC_DMA
, 12, "dm®des¸ùt‹ÇŸáŒoˇãd,Ñëu∫ NULL", 
NULL
);

97 
	`TRACE
–
TRC_GC_DMA
, 12, "exô dma_node=0x%x", 
dma_node
);

99 –
NULL
);

102 
	`bzîo
–(*Ë
dma_node
, –
dma_node_t
));

105 
mem
 = ( 
uch¨_t
 *Ë
	`kmem_zÆloc
–
size
, 
KM_CACHEALIGN
 | 
KM_PHYSCONTIG
 | 
KM_SLEEP
);

106 if–
mem
 =
NULL
){

107 
dma_Æloc_exô
;

109 
kaddr
 = (*Ë
mem
;

110 
	`TRACE
–
TRC_GC_DMA
, 12, "kadd∏0x%x, mem = 0x%x", 
kaddr
, 
mem
);

113 
∑ddr
 = 
	`kvt›hys
–
kaddr
);

116 
daddr
 = 
	`pciio_dm©øns_addr
–
vhdl
, 0, 
∑ddr
, 
size
, 
PCIIO_WORD_VALUES
);

119 i‡(
daddr
 == 0) {

120 
	`TRACE
–
TRC_GC_DMA
, 12, "dm©øn†Áûed,Åryög dmam≠", 
NULL
);

122 
dmam≠
 = 
	`pciio_dmam≠_Æloc
–
vhdl
, 0, 
size
, 
PCIIO_WORD_VALUES
);

123 i‡(
dmam≠
 == 0) {

124 
	`TRACE
–
TRC_GC_DMA
, 12, "u«bÀÅÿÆloˇã dmam≠", 
NULL
);

125 
	`kmem_‰ì
–(*Ë
mem
, 
size
);

126 
îr
 = 1;

127 
dma_Æloc_exô
;

130 
daddr
 = 
	`pciio_dmam≠_addr
(
dmam≠
, 
∑ddr
, 
size
);

131 i‡(
daddr
 == 0) {

132 
	`TRACE
–
TRC_GC_DMA
, 12, "dmam≠_add∏Áûed", 
NULL
);

133 
	`kmem_‰ì
–(*Ë
mem
, 
size
);

134 
îr
 = 1;

135 
dma_Æloc_exô
;

138 
	`TRACE
–
TRC_GC_DMA
, 12, "dadd∏i†0x%08x", 
daddr
);

141 
dma_node
->
byãs
 = 
size
;

142 
dma_node
->
∑ddr
 =Öaddr;

143 
dma_node
->
kaddr
 = kaddr;

144 
dma_node
->
m≠
 = 
dmam≠
;

145 
dma_node
->
daddr
 = daddr;

146 
dma_node
->
mem
 = mem;

148 
	`TRACE
–
TRC_GC_DMA
, 12, "dmap=0x%x kaddr=0x%x bytes=0x%xÖaddr=0x%x daddr=0x%x",

149 
dmam≠
, 
kaddr
, 
byãs
, 
∑ddr
, 
daddr
);

151 
dma_Æloc_exô
:

152 if–
îr
 == 1){

153 
	`gc_m¨k
–(*Ë
dma_node
);

154 
dma_node
 = 
NULL
;

157 
	`TRACE
–
TRC_GC_DMA
, 12, "exô dma_node=0x%x", 
dma_node
);

158 –
dma_node
);

159 
	}
}

162 
	$dma_døö
–
dma_node_t
 *
dma_node
){

166 
	`pciio_dmam≠_døö
–&
dma_node
->
m≠
);

169 
	}
}

171 
	$dma_d⁄e
–
dma_node_t
 *
dma_node
){

173 
	`TRACE
–
TRC_GC_DMA
, 12, "íãr", 
NULL
);

174 
	`pciio_dmam≠_d⁄e
–
dma_node
->
m≠
);

175 
	`TRACE
–
TRC_GC_DMA
, 12, "exô ", 
NULL
);

176 
	}
}

178 
	$dma_m¨k
–
dma_node_t
 *
dma_node
){

179 
	`TRACE
–
TRC_GC_DMA
, 12, "íã∏", 
NULL
);

180 
	`dma_døö
–
dma_node
);

181 
	`dma_d⁄e
–
dma_node
);

182 
	`gc_m¨k
–(*Ë
dma_node
);

183 
	`TRACE
–
TRC_GC_DMA
, 12, "exô ", 
NULL
);

184 
	}
}

186 
	$dma_node_dump
–
dma_node_t
 *
dma_node
){

187 
	`TRACE
–
TRC_GC_DMA
, 07, "íãr", 
NULL
);

189 
	`TRACE
–
TRC_GC_DMA
, 7, "dma_node=0x%x", 
dma_node
);

190 
	`TRACE
–
TRC_GC_DMA
, 7, "Öadd∏0x%x", 
dma_node
->
∑ddr
);

191 
	`TRACE
–
TRC_GC_DMA
, 7, " kadd∏0x%x", 
dma_node
->
kaddr
);

192 
	`TRACE
–
TRC_GC_DMA
, 7, " mem = 0x%x", 
dma_node
->
mem
);

193 
	`TRACE
–
TRC_GC_DMA
, 7, " m≠ = 0x%x", 
dma_node
->
m≠
);

194 
	`TRACE
–
TRC_GC_DMA
, 7, " dadd∏0x%x", 
dma_node
->
daddr
);

195 
	`TRACE
–
TRC_GC_DMA
, 7, " byã†0x%x", 
dma_node
->
byãs
 );

196 
	`TRACE
–
TRC_GC_DMA
, 7, "exô ", 
NULL
);

197 
	}
}

199 
	$dma_‰ì
–
dma_node_t
 *
dma_node
){

201 
	`TRACE
–
TRC_GC_DMA
, 12, "íãr", 
NULL
);

203 if–
dma_node
->
m≠
 !
NULL
){

204 
	`pciio_dmam≠_‰ì
–
dma_node
->
m≠
);

206 
	`kmem_‰ì
–(*Ë
dma_node
->
mem
, dma_node->
byãs
);

207 
	`gc_‰ì
–(*Ë
dma_node
);

208 
	`TRACE
–
TRC_GC_DMA
, 12, "exô ", 
NULL
);

210 
	}
}

212 
	$dma_li°_swìp
–
dma_li°_t
 *
dma_li°
){

213 
li°_t
 *
l
, *
i
, *
tmp
;

215 
	`TRACE
–
TRC_GC_DMA
, 12, "íã∏", 
NULL
);

216 
l
 = (
li°_t
 *Ë
dma_li°
;

218 
	`li°_f‹_óch_ß„
–
i
, 
tmp
, 
l
){

219 if––(
gc_node_t
 *Ë
i
)->
m¨k
 == 1)

220 
	`dma_‰ì
–(*Ë
	`gc_gë_d©a_±r
–(*)
i
) );

223 
	`TRACE
–
TRC_GC_DMA
, 12, "exô ", 
NULL
);

224 
	}
}

226 
	$dma_li°_dump
–
dma_li°_t
 *
dma_li°
){

227 
li°_t
 *
l
, *
i
, *
tmp
;

228 
dma_node_t
 *
dma_node
;

229 
	`TRACE
–
TRC_GC_DMA
, 12, "íã∏", 
NULL
);

232 
l
 = (
li°_t
 *Ë
dma_li°
;

234 
	`li°_f‹_óch_ß„
–
i
, 
tmp
, 
l
){

235 
dma_node
 = 
	`gc_gë_d©a_±r
–(*)
i
);

236 
	`TRACE
–
TRC_GC_DMA
, 7, "dma_nodê0x%x", 
dma_node
);

237 
	`dma_node_dump
–
dma_node
);

240 
	`TRACE
–
TRC_GC_DMA
, 12, "exô ", 
NULL
);

242 
	}
}

244 
	$dma_li°_de°roy
–
dma_li°_t
 *
dma_li°
){

245 
li°_t
 *
l
, *
i
, *
tmp
;

246 
dma_node_t
 *
dma_node
;

247 
	`TRACE
–
TRC_GC_DMA
, 12, "íãr", 
NULL
);

250 
l
 = (
li°_t
 *Ë
dma_li°
;

252 
	`li°_f‹_óch_ß„
–
i
, 
tmp
, 
l
){

253 
dma_node
 = 
	`gc_gë_d©a_±r
–(*)
i
);

254 
	`TRACE
–
TRC_GC_DMA
, 12, "dma_nodê0x%x", 
dma_node
);

256 
	`dma_‰ì
–
dma_node
);

259 
	`dma_li°_öô
–
dma_li°
);

260 
	`TRACE
–
TRC_GC_DMA
, 12, "exô ", 
NULL
);

261 
	}
}

	@dumphex.c

32 
dumphex
–
uöt64_t
 
˛ass
, 
uch¨_t
 
Àvñ
, *
s
, 
size_t
 
Àn
);

33 
dump_uöt32
–
uöt64_t
 
˛ass
, 
uch¨_t
 
Àvñ
, 
uöt32_t
 *
u32
, 
size_t
 
size
);

35 
	$dump_uöt32
–
uöt64_t
 
˛ass
, 
uch¨_t
 
Àvñ
, 
uöt32_t
 *
u32
, 
size_t
 
size
){

36 
i
, 
j
;

37 *
p
;

38 
s1
[128], 
s2
[128];

40 if–
globÆ_åa˚_˛ass
.
Àvñ
 <Üevel)

43 if((
˛ass
 & 
globÆ_åa˚_˛ass
.class) == 0)

46 
size
 /= 4;

47 
	`¥ötf
("-------- ------------ ----\n");

48  
i
 = 0; i < 
size
; i++){

49 
	`INT2HEX16X
–
s1
, 
i
);

50 
	`INT2HEX32X
–
s2
, 
u32
[
i
]);

51 
	`¥ötf
("[%s] [%s] ", 
s1
, 
s2
);

52 
p
 = (*Ë&
u32
[
i
];

53  
j
 = 0; j < 4; j++ ){

54 if–
	`i•röt
–*
p
)){

55 
	`¥ötf
("%c", *
p
);

57 
	`¥ötf
(".");

59 
p
++;

62 
	`¥ötf
("\n");

64 
	}
}

66 
	$dumphex
–
uöt64_t
 
˛ass
, 
uch¨_t
 
Àvñ
, *
p
, 
size_t
 
size
){

67 
i
, 
l
, 
m
;

68 
s
[128];

70 if–
globÆ_åa˚_˛ass
.
Àvñ
 <Üevel)

73 if((
˛ass
 & 
globÆ_åa˚_˛ass
.class) == 0)

76 
	`¥ötf
(" _0 _1 _2 _3 _4 _5 _6 _7 _8 _9 _A _B _C _D _E _F 01234567 89ABCDEF\n");

77 
	`¥ötf
(" ----------------------- ----------------------- -------- --------\n");

79 
m
 = 
l
 = 0;

81 
	`INT2HEX16X
–
s
, 
l
);

82 
	`¥ötf
("%† ", 
s
);

83  
i
 = 0; i < 8; i++, 
l
++){

84 if–
l
 < 
size
){

85 
	`INT2HEX8
–
s
, 
p
[
i
] );

86 
	`¥ötf
("%†", 
s
);

88 
	`¥ötf
(" ");

92 
	`¥ötf
(" ");

93  ; 
i
 < 16; i++, 
l
++){

94 if–
l
 < 
size
){

95 
	`INT2HEX8
–
s
, 
p
[
i
] );

96 
	`¥ötf
("%†", 
s
);

98 
	`¥ötf
(" ");

102 
	`¥ötf
(" ");

103  
i
 = 0; i < 8; i++, 
m
++){

104 if–
m
 < 
size
)

105 if–
	`i•röt
–
p
[
i
] ))

106 
	`¥ötf
("%c", 
p
[
i
]);

108 
	`¥ötf
(".");

110 
	`¥ötf
(" ");

113 
	`¥ötf
(" ");

114  ; 
i
 < 16; i++, 
m
++){

115 if–
m
 < 
size
)

116 if–
	`i•röt
–
p
[
i
] ))

117 
	`¥ötf
("%c", 
p
[
i
]);

119 
	`¥ötf
(".");

121 
	`¥ötf
(" ");

124 
p
 =Ö + 16;

125 
	`¥ötf
("\n");

128 } 
l
 < 
size
);

129 
	`¥ötf
("\n");

132 
	}
}

	@ehcireg.h

54 #i‚de‡
_EHCIREG_H_


55 
	#_EHCIREG_H_


	)

58 
	#PCI_CBMEM
 0x10

	)

59 
	#PCI_INTERFACE_EHCI
 0x20

	)

60 
	#PCI_USBREV
 0x60

	)

61 
	#PCI_USB_REV_MASK
 0xff

	)

62 
	#PCI_USB_REV_PRE_1_0
 0x00

	)

63 
	#PCI_USB_REV_1_0
 0x10

	)

64 
	#PCI_USB_REV_1_1
 0x11

	)

65 
	#PCI_USB_REV_2_0
 0x20

	)

66 
	#PCI_EHCI_FLADJ
 0x61

	)

67 
	#PCI_EHCI_PORTWAKECAP
 0x62

	)

70 
	#EHCI_EC_LEGSUP
 0x01

	)

71 
	#EHCI_EECP_NEXT
(
x
Ë(((xË>> 8Ë& 0xff)

	)

72 
	#EHCI_EECP_ID
(
x
Ë((xË& 0xff)

	)

75 
	#EHCI_LEGSUP_BIOS_SEM
 0x02

	)

76 
	#EHCI_LEGSUP_OS_SEM
 0x03

	)

77 
	#EHCI_LEGSUP_USBLEGCTLSTS
 0x04

	)

80 
	#EHCI_CAPLEN_HCIVERSION
 0x00

	)

85 
	#EHCI_CAPLENGTH
(
x
Ë((xË& 0xff)

	)

86 
	#EHCI_HCIVERSION
(
x
Ë(((xË>> 16Ë& 0xffff)

	)

87 
	#EHCI_HCSPARAMS
 0x04

	)

88 
	#EHCI_HCS_DEBUGPORT
(
x
Ë(((xË>> 20Ë& 0xf)

	)

89 
	#EHCI_HCS_P_INDICATOR
(
x
Ë((xË& 0x10000)

	)

90 
	#EHCI_HCS_N_CC
(
x
Ë(((xË>> 12Ë& 0xfË

	)

91 
	#EHCI_HCS_N_PCC
(
x
Ë(((xË>> 8Ë& 0xfË

	)

92 
	#EHCI_HCS_PPC
(
x
Ë((xË& 0x10Ë

	)

93 
	#EHCI_HCS_N_PORTS
(
x
Ë((xË& 0xfË

	)

94 
	#EHCI_HCCPARAMS
 0x08

	)

95 
	#EHCI_HCC_EECP
(
x
Ë(((xË>> 8Ë& 0xffË

	)

96 
	#EHCI_HCC_IST
(
x
Ë(((xË>> 4Ë& 0xfË

	)

97 
	#EHCI_HCC_ASPC
(
x
Ë((xË& 0x4Ë

	)

98 
	#EHCI_HCC_PFLF
(
x
Ë((xË& 0x2Ë

	)

99 
	#EHCI_HCC_64BIT
(
x
Ë((xË& 0x1Ë

	)

100 
	#EHCI_HCSP_PORTROUTE
 0x0¯

	)

103 
	#EHCI_USBCMD
 0x00

	)

104 
	#EHCI_CMD_ITC_M
 0x00ff0000

	)

105 
	#EHCI_CMD_ITC_1
 0x00010000

	)

106 
	#EHCI_CMD_ITC_2
 0x00020000

	)

107 
	#EHCI_CMD_ITC_4
 0x00040000

	)

108 
	#EHCI_CMD_ITC_8
 0x00080000

	)

109 
	#EHCI_CMD_ITC_16
 0x00100000

	)

110 
	#EHCI_CMD_ITC_32
 0x00200000

	)

111 
	#EHCI_CMD_ITC_64
 0x00400000

	)

112 
	#EHCI_CMD_ASPME
 0x00000800

	)

113 
	#EHCI_CMD_ASPMC
 0x00000300

	)

114 
	#EHCI_CMD_LHCR
 0x00000080

	)

115 
	#EHCI_CMD_IAAD
 0x00000040

	)

116 
	#EHCI_CMD_ASE
 0x00000020

	)

117 
	#EHCI_CMD_PSE
 0x00000010

	)

118 
	#EHCI_CMD_FLS_M
 0x0000000¯

	)

119 
	#EHCI_CMD_FLS
(
x
Ë(((xË>> 2Ë& 3Ë

	)

120 
	#EHCI_CMD_HCRESET
 0x00000002

	)

121 
	#EHCI_CMD_RS
 0x00000001

	)

123 
	#EHCI_USBSTS
 0x04

	)

124 
	#EHCI_STS_ASS
 0x00008000

	)

125 
	#EHCI_STS_PSS
 0x00004000

	)

126 
	#EHCI_STS_REC
 0x00002000

	)

127 
	#EHCI_STS_HCH
 0x00001000

	)

128 
	#EHCI_STS_IAA
 0x00000020

	)

129 
	#EHCI_STS_HSE
 0x00000010

	)

130 
	#EHCI_STS_FLR
 0x00000008

	)

131 
	#EHCI_STS_PCD
 0x00000004

	)

132 
	#EHCI_STS_ERRINT
 0x00000002

	)

133 
	#EHCI_STS_INT
 0x00000001

	)

134 
	#EHCI_STS_INTRS
(
x
Ë((xË& 0x3f)

	)

140 
	#EHCI_NORMAL_INTRS
 (
EHCI_STS_IAA
 | 
EHCI_STS_HSE
 | \

141 
EHCI_STS_PCD
 | 
EHCI_STS_ERRINT
 | 
EHCI_STS_INT
)

	)

143 
	#EHCI_USBINTR
 0x08

	)

144 
	#EHCI_INTR_IAAE
 0x00000020

	)

146 
	#EHCI_INTR_HSEE
 0x00000010

	)

147 
	#EHCI_INTR_FLRE
 0x00000008

	)

148 
	#EHCI_INTR_PCIE
 0x00000004

	)

149 
	#EHCI_INTR_UEIE
 0x00000002

	)

150 
	#EHCI_INTR_UIE
 0x00000001

	)

152 
	#EHCI_FRINDEX
 0x0¯

	)

154 
	#EHCI_CTRLDSSEGMENT
 0x10

	)

156 
	#EHCI_PERIODICLISTBASE
 0x14

	)

157 
	#EHCI_ASYNCLISTADDR
 0x18

	)

159 
	#EHCI_CONFIGFLAG
 0x40

	)

160 
	#EHCI_CONF_CF
 0x00000001

	)

162 
	#EHCI_PORTSC
(
n
Ë(0x40+(4*“))Ë

	)

163 
	#EHCI_PS_WKOC_E
 0x00400000

	)

164 
	#EHCI_PS_WKDSCNNT_E
 0x00200000

	)

165 
	#EHCI_PS_WKCNNT_E
 0x00100000

	)

166 
	#EHCI_PS_PTC
 0x000f0000

	)

167 
	#EHCI_PS_PIC
 0x0000c000

	)

168 
	#EHCI_PS_PO
 0x00002000

	)

169 
	#EHCI_PS_PP
 0x00001000

	)

170 
	#EHCI_PS_LS
 0x00000c00

	)

171 
	#EHCI_PS_IS_LOWSPEED
(
x
Ë(((xË& 
EHCI_PS_LS
Ë=0x00000400)

	)

172 
	#EHCI_PS_PR
 0x00000100

	)

173 
	#EHCI_PS_SUSP
 0x00000080

	)

174 
	#EHCI_PS_FPR
 0x00000040

	)

175 
	#EHCI_PS_OCC
 0x00000020

	)

176 
	#EHCI_PS_OCA
 0x00000010

	)

177 
	#EHCI_PS_PEC
 0x00000008

	)

178 
	#EHCI_PS_PE
 0x00000004

	)

179 
	#EHCI_PS_CSC
 0x00000002

	)

180 
	#EHCI_PS_CS
 0x00000001

	)

181 
	#EHCI_PS_CLEAR
 (
EHCI_PS_OCC
 | 
EHCI_PS_PEC
 | 
EHCI_PS_CSC
)

	)

183 
	#EHCI_USBMODE
 0x68

	)

184 
	#EHCI_UM_CM
 0x00000003

	)

185 
	#EHCI_UM_CM_IDLE
 0x0

	)

186 
	#EHCI_UM_CM_HOST
 0x3

	)

187 
	#EHCI_UM_ES
 0x00000004

	)

188 
	#EHCI_UM_ES_LE
 0x0

	)

189 
	#EHCI_UM_ES_BE
 0x4

	)

190 
	#EHCI_UM_SDIS
 0x00000010

	)

192 
	#EHCI_PORT_RESET_COMPLETE
 2

	)

	@fixme.c

1 
UHCI_QHCTL


3 
uhci_å™s„r_queues_t
 *
	gtq
;

5 
	gso·
->
	gtq
 = 
tq
;

6 
	gso·
->
	g‰amñi°
 = 
Ê
;

9 
	gtq
->
	gqueue_hóds
[
UHCI_QH1
].
	gñemít
 = 
UHCI_PTR_TERM
;

10 
	gtq
->
	gqueue_hóds
[
UHCI_QH1
].
	glök
 = 
kaddr_2_daddr
–
dma_node_tq
->
daddr
,

11 
dma_node_tq
->
kaddr
, &
tq
->
ãrm_qh
Ë| 
	gUHCI_PTR_QH
;

13 
	$uhci_ö£π_queue
–
dma_node_t
 *
q
, 
usbuhci_ö°™˚_t
 *
so·
, 
numtq
){

14 
uhci_å™s„r_queues_t
 *
tq
 = 
so·
->tq;

15 
uhci_c⁄åﬁ_chaö_t
 *
chaö
 = (uhci_c⁄åﬁ_chaö_à*Ë
q
->
mem
;

18 
chaö
->
qh
.
lök
 = 
tq
->
queue_hóds
[
numtq
].
ñemít
;

19 
chaö
->
qh
.
klök
 = 
tq
->
queue_hóds
[
numtq
].
kñemít
;

20 
chaö
->
qh
.
k¥i‹_lök
 = &
tq
->
queue_hóds
[
numtq
];

22 
tq
->
queue_hóds
[
numtq
].
ñemít
 = 
q
->
daddr
 | 
UHCI_PTR_QH
;

23 
tq
->
queue_hóds
[
numtq
].
kñemít
 = 
q
->
mem
;

25 
	}
}

28 
	$uhci_ªmove_queue
–
dma_node_t
 *
q
, 
usbuhci_ö°™˚_t
 *
so·
, 
numqt
){

29 
uhci_å™s„r_queues_t
 *
tq
 = 
so·
->tq;

30 
uhci_c⁄åﬁ_chaö_t
 *
chaö
 = (uhci_c⁄åﬁ_chaö_à*Ë
q
->
mem
;

31 
uhci_qh_t
 *
ídqh
 = 
so·
->
tq
->
ãrm_qh
;

32 
uöt32_t
 
aux
;

34 
tq
->
queue_hóds
[
numtq
].
ñemít
 = 
chaö
->
qh
.
lök
;

35 
tq
->
queue_hóds
[
numtq
].
kñemít
 = 
chaö
->
qh
.
klök
;

40 
	}
}

	@gc.c

31 
	#DMALLOC
(
b
Ë
	`kmem_zÆloc
–b, 
KM_SLEEP
)

	)

32 
	#DFREE
(
p
,
b
Ë
	`kmem_‰ì
’, b)

	)

33 
	#INIT_GC_LIST
(
m
Ë
	`INIT_LIST_HEAD
(m)

	)

34 
	#gc_li°_öô
(
l
Ë
	`INIT_GC_LIST
÷)

	)

35 
	#gc_li°_em±y
(
l
Ë
	`li°_em±y
÷)

	)

37 
li°_t
 
	mli°
;

38 
	mm¨k
;

39 
size_t
 
	msize
;

40 }
	tgc_node_t
;

42 
li°_t
 
	tgc_li°_t
;

45 
gc_node_t
 *
gc_gë_node_±r
–*
d©a
);

46 *
gc_gë_d©a_±r
–
gc_node_t
 *
node
);

47 *
gc_mÆloc
–
gc_li°_t
 *
li°
, 
size_t
 
size
);

48 
gc_‰ì
–*
±r
);

49 
gc_m¨k
–*
d©a
);

50 
gc_li°_swìp
–
gc_li°_t
 *
gc_li°
);

51 
gc_li°_de°roy
–
gc_li°_t
 *
gc_li°
);

52 
gc_li°_dump
–
gc_li°_t
 *
gc_li°
);

53 *
gc_°rdup
–
gc_li°_t
 *
gc_li°
, *
p
);

54 
gc_dump
–*
d©a
);

57 
gc_node_t
 *
	$gc_gë_node_±r
–*
d©a
){

58 *
±r
 = 
d©a
;

59 
±r
 -–
gc_node_t
);

60 –(
gc_node_t
 *Ë
±r
);

61 
	}
}

63 *
	$gc_gë_d©a_±r
–
gc_node_t
 *
node
){

64 *
p
 = (*)
node
;

65 –
p
 + (
gc_node_t
));

66 
	}
}

68 *
	$gc_mÆloc
–
gc_li°_t
 *
li°
, 
size_t
 
size
){

69 *
±r
;

70 *
ªt_±r
;

71 
gc_node_t
 *
node
;

73 
±r
 = 
	`DMALLOC
–
size
 + (
gc_node_t
));

74 if–
±r
 =
NULL
)

75 –
NULL
);

78 
node
 = (
gc_node_t
 *Ë
±r
;

79 
	`li°_add
–(
li°_t
 *Ë
node
, 
li°
);

80 
node
->
m¨k
 = 0;

81 
node
->
size
 = size;

83 
ªt_±r
 = ((*Ë
node
Ë+ –
gc_node_t
);

84 –(*Ë
ªt_±r
);

85 
	}
}

88 
	$gc_‰ì
–*
±r
){

89 
gc_node_t
 *
node
;

90 
size_t
 
size
;

91 
node
 = 
	`gc_gë_node_±r
–
±r
);

92 
	`li°_dñ
–(
li°_t
 *Ë
node
);

94 
size
 = 
node
->size;

95 
	`DFREE
–
node
, 
size
);

97 
	}
}

102 
	$gc_m¨k
–*
d©a
){

103 
gc_node_t
 *
node
;

104 
node
 = 
	`gc_gë_node_±r
–
d©a
);

105 
node
->
m¨k
 = 1;

106 
	}
}

109 
	$gc_li°_swìp
–
gc_li°_t
 *
gc_li°
){

110 
li°_t
 *
l
, *
i
, *
tmp
;

112 
l
 = (
li°_t
 *Ë
gc_li°
;

114 
	`li°_f‹_óch_ß„
–
i
, 
tmp
, 
l
){

115 if––(
gc_node_t
 *Ë
i
)->
m¨k
 == 1)

116 
	`gc_‰ì
–(*Ë
	`gc_gë_d©a_±r
–(*)
i
) );

118 
	}
}

121 
	$gc_li°_de°roy
–
gc_li°_t
 *
gc_li°
){

122 
li°_t
 *
l
, *
i
, *
tmp
;

124 
l
 = (
li°_t
 *Ë
gc_li°
;

126 
	`li°_f‹_óch_ß„
–
i
, 
tmp
, 
l
){

127 
	`gc_‰ì
–(*Ë
	`gc_gë_d©a_±r
–(*)
i
) );

130 
	`gc_li°_öô
–
gc_li°
);

131 
	}
}

133 
	$gc_li°_dump
–
gc_li°_t
 *
gc_li°
){

134 
li°_t
 *
l
, *
i
, *
tmp
;

135 
gc_node_t
 *
node
;

137 
l
 = (
li°_t
 *Ë
gc_li°
;

139 
	`¥ötf
("li°->√xt=0x%x,Üi°->¥ev=0x%x\n", 
l
->
√xt
,Ü->
¥ev
);

140 
	`li°_f‹_óch_ß„
–
i
, 
tmp
, 
l
){

141 
node
 = (
gc_node_t
 *Ë
i
;

142 
	`gc_dump
–(*Ë
	`gc_gë_d©a_±r
–
node
));

144 
	}
}

147 
	$gc_dump
–*
d©a
){

148 
gc_node_t
 *
node
;

149 
node
 = 
	`gc_gë_node_±r
–
d©a
);

150 
	`TRACE
–
TRC_GC_DMA
, 7, "nodê0x%08x", 
node
);

151 
	`TRACE
–
TRC_GC_DMA
, 7, "node->√xà0x%08x", 
node
->
li°
.
√xt
);

152 
	`TRACE
–
TRC_GC_DMA
, 7, "node->¥ev = 0x%08x", 
node
->
li°
.
¥ev
);

153 
	`TRACE
–
TRC_GC_DMA
, 7, "node->m¨k = 0x%08x", 
node
->
m¨k
);

154 
	`TRACE
–
TRC_GC_DMA
, 7, "node->sizê0x%08x", 
node
->
size
);

155 
	`TRACE
–
TRC_GC_DMA
, 7, "nodêd©a: ", 
NULL
);

156 
	`dumphex
–
TRC_GC_DMA
, 7, (*Ë
	`gc_gë_d©a_±r
–
node
),Çode->
size
);

157 
	}
}

159 *
	$gc_°rdup
–
gc_li°_t
 *
gc_li°
, *
p
){

160 *
s
;

161 
n
 = 
	`°æí
–
p
) + 1;

163 
s
 = 
	`gc_mÆloc
–
gc_li°
, 
n
);

164 if–
s
 =
NULL
)

165 –
NULL
);

167 
	`°∫˝y
–
s
, 
p
, 
n
);

168 
s
[
n
] = '\0';

169 –
s
);

170 
	}
}

	@kmaddr.c

26 
	$moduÀ_addªss
(){

28 
	}
}

	@kutils.c

25 
	#INT2HEX8
–
s
, 
num
Ë
	`f‹m©_hex
–s,Çum, 2, 0, 1, '0')

	)

26 
	#INT2HEX16
–
s
, 
num
Ë
	`f‹m©_hex
–s,Çum, 4, 0, 1, '0')

	)

27 
	#INT2HEX32
–
s
, 
num
Ë
	`f‹m©_hex
–s,Çum, 8, 0, 1, '0')

	)

28 
	#INT2HEX64
–
s
, 
num
Ë
	`f‹m©_hex
–s,Çum, 16, 0, 1, '0')

	)

29 
	#INT2HEX8X
–
s
, 
num
Ë
	`f‹m©_hex
–s,Çum, 2, 1, 1, '0')

	)

30 
	#INT2HEX16X
–
s
, 
num
Ë
	`f‹m©_hex
–s,Çum, 4, 1, 1, '0')

	)

31 
	#INT2HEX32X
–
s
, 
num
Ë
	`f‹m©_hex
–s,Çum, 8, 1, 1, '0')

	)

32 
	#INT2HEX64X
–
s
, 
num
Ë
	`f‹m©_hex
–s,Çum, 16, 1, 1, '0')

	)

35 
ªvî£
(*
s
);

36 
f‹m©_hex
–*
°r
, 
uöt64_t
 
num
, 
•a˚s
, 
hexnŸ©i⁄
, 
lowî
, 
c
);

37 
kønd
–
£ed
, 
max
);

38 
ôob
(
n
, *
s
, 
bôs
);

39 
°r2hex
–*
s
, 
uöt64_t
 *
v
);

48 
	$ªvî£
(*
s
){

49 
i
, 
j
, 
ãmp
;

50 
i
=0, 
j
=
	`°æí
(
s
)-1; i<j; i++, j--) {

51 
ãmp
 = 
s
[
j
];

52 
s
[
j
] = s[
i
];

53 
s
[
i
] = 
ãmp
;

55 
	}
}

70 
	$f‹m©_hex
–*
°r
, 
uöt64_t
 
num
, 
•a˚s
, 
hexnŸ©i⁄
, 
lowî
, 
c
){

71 
s
[128], *
p
, *
a
, *
hex_begö
;

72 
lowîhex
[] = "0123456789abcdef";

73 
uµîhex
[] = "0123456789ABCDEF";

74 
uöt64_t
 
masked
;

75 
num_•ac
 = 0;

78 
	`mem£t
–(*Ë
s
, 0, 128);

81 
p
 = 
s
;

82 if–
lowî
)

83 
a
 = 
lowîhex
;

85 
a
 = 
uµîhex
;

87 if–
hexnŸ©i⁄
 == 1){

88 
	`°r˝y
–
s
, "0x");

89 
p
 =Ö + 2;

92 
hex_begö
 = 
p
;

95 
	`mem£t
–(*Ë
p
, 
c
, 
•a˚s
 );

97  
num
 > 0){

98 
masked
 = 
num
 & 0x0f;

99 *
p
++ = 
a
[
masked
];

100 
num
 =Çum >> 4;

101 
num_•ac
++;

104 
hex_begö
[
•a˚s
] = '\0';

106 
	`ªvî£
–
hex_begö
);

107 
	`°r˝y
–
°r
, 
s
);

108 
	}
}

113 
	$kønd
–
£ed
, 
max
){

114 
a
, 
b
, 
c
;

115 
ac
, 
£ed0
, 
£ed1
, 
£ed2
;

116 
rc
;

118 
a
 = 0x0005;

119 
b
 = 0xdeec;

120 
c
 = 0xe66d;

122 
ac
 = 0x0b;

124 
£ed0
 = 
£ed
 - 0xc2af;

125 
£ed1
 = 
£ed
;

126 
£ed2
 = 
£ed
 + 0xd4a0c5;

128 
£ed0
 = ( (–
£ed1
 * 
c
Ë>> 16Ë+ (–
£ed2
 * 
b
Ë>> 16Ë+ (£ed0 * cË+ (£ed1 *bË+ (£ed2 * 
a
));

129 
£ed1
 = ( (–
£ed2
 * 
c
Ë>> 16Ë+ ( sìd1 * cË+ ( sìd2 * 
b
));

130 
£ed2
 = ( sìd2 * 
c
Ë+ 
ac
;

132 
£ed1
 +
£ed2
 >> 16;

133 
£ed0
 +
£ed1
 >> 16;

135 
£ed0
 &= 0xffff;

136 
£ed1
 &= 0xffff;

138 
rc
 = (
£ed0
 << 16Ë| 
£ed1
;

140 if–
max
 > 0)

141 
rc
 =Ñ¯% 
max
;

143 –
rc
);

144 
	}
}

148 
	$ôob
(
n
, *
s
, 
bôs
){

149 
i
=0;

151 
s
[
i
++] = 'b';

153 
s
[
i
++] = 
n
 % 2 + '0';

154 } (
n
 /= 2) != 0);

156  ; 
i
<
bôs
; i++)

157 
s
[
i
] = '0';

159 
s
[
i
] = '\0';

160 
	`ªvî£
(
s
);

161 
	}
}

163 
	$°r2hex
–*
s
, 
uöt64_t
 *
v
){

164 
°r
[256];

165 *
p
;

166 
uöt64_t
 
i
;

167 
uöt64_t
 
t
 = 0;

168 *
v
 = 0;

171 if–
s
 =
NULL
)

174 if–
	`°æí
–
s
) == 0)

179 
	`°r˝y
–
°r
, 
s
);

180 
p
 = 
°r
;

183 if–
°r
[0] == '0' && ( str[1] == 'x' || str[1] == 'X' )){

184 
p
 = &
°r
[2];

187 if–
	`°æí
–
p
) > 16)

190 
	`ªvî£
–
p
);

193  
i
 = 0; i < 
	`°æí
–
p
); i++){

194 if–
p
[
i
] >= '0' &&Ö[i] <= '9' ){

195 
t
 =Å | (
uöt64_t
)((uöt64_t)–(uöt64_t)
p
[
i
] - 48) << (i * 4));

196 }if––
p
[
i
] >= 'a' ) && (Ö[i] <= 'f' )){

197 
t
 =Å | (
uöt64_t
)((uöt64_t)–(uöt64_t)
p
[
i
] - 87) << (i * 4));

198 }if––
p
[
i
] >= 'A' ) && (Ö[i] <= 'F' )){

199 
t
 =Å | (
uöt64_t
)((uöt64_t)–(uöt64_t)
p
[
i
] - 55) << (i * 4));

205 *
v
 = 
t
;

208 
	}
}

	@kvarr.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~"kv¨r.h
"

28 
	$kv¨r_öô
–
kv¨r_t
 *
kv¨r
){

29 
kv¨r
->
√Àm
 = 0;

30 
	`mem£t
–(*Ë
kv¨r
, 0, –
kv¨r_t
) );

32 
	}
}

36 
	$kv¨r_de°roy
–
kv¨r_t
 *
kv¨r
){

37 
i
;

39  
i
 = 0; i < 
kv¨r
->
√Àm
; i++){

40 if–
kv¨r
->
key
[
i
] !
NULL
)

41 
	`‰ì
–
kv¨r
->
key
[
i
]);

43 if–
kv¨r
->
vÆ
[
i
] !
NULL
)

44 
	`‰ì
–
kv¨r
->
vÆ
[
i
]);

47 
kv¨r
->
√Àm
 = 0;

48 
	}
}

52 
	$kv¨r_add
–
kv¨r_t
 *
kv¨r
, *
key
, *
vÆ
){

53 
kv¨r
->
key
[kv¨r->
√Àm
] = 
	`°rdup
( key);

54 
kv¨r
->
vÆ
[kv¨r->
√Àm
] = 
	`°rdup
( val);

55 
kv¨r
->
√Àm
++;

56 
	}
}

60 
	$kv¨r_dump
–
kv¨r_t
 *
kv¨r
){

61 
i
;

63  
i
 = 0; i < 
kv¨r
->
√Àm
; i++){

64 
	`¥ötf
("%d: %s: %s\n", 
i
, 
kv¨r
->
key
[i], kv¨r->
vÆ
[i]);

66 
	}
}

70 
	$kv¨r_di•œy_vÆ
–
kv¨r_t
 *
kv¨r
, *
tôÀ
){

71 
i
;

73 
	`¥ötf
("-------- %s\n", 
tôÀ
);

74  
i
 = 0; i < 
kv¨r
->
√Àm
; i++){

75 
	`¥ötf
("%s:%s\n", 
kv¨r
->
key
[
i
], kv¨r->
vÆ
[i]);

77 
	}
}

81 
	$kv¨r_di•œy_xml
–
kv¨r_t
 *
kv¨r
, *
docdes¸
){

82 
i
;

84 
	`¥ötf
("<?xml version=\"1.0\"?>\n");

85 
	`¥ötf
("<%s>\n", 
docdes¸
);

86  
i
 = 0; i < 
kv¨r
->
√Àm
; i++){

87 
	`¥ötf
(" <%s>%s</%s>\n", 
kv¨r
->
key
[
i
], kv¨r->
vÆ
[i], kvarr->key[i]);

90 
	`¥ötf
("</%s>\n", 
docdes¸
);

91 
	}
}

	@kvarr.h

23 #i‚de‡
_KVARR_H_


24 
	#_KVARR_H_


	)

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

30 
	#KVARR_MAX
 64

	)

34 *
	mkey
[
KVARR_MAX
];

35 *
	mvÆ
[
KVARR_MAX
];

36 
	m√Àm
;

37 }
	tkv¨r_t
;

39 
kv¨r_öô
–
kv¨r_t
 *
kv¨r
);

40 
kv¨r_de°roy
–
kv¨r_t
 *
kv¨r
);

41 
kv¨r_add
–
kv¨r_t
 *
kv¨r
, *
key
, *
vÆ
);

42 
kv¨r_dump
–
kv¨r_t
 *
kv¨r
);

43 
kv¨r_di•œy_vÆ
–
kv¨r_t
 *
kv¨r
, *
tôÀ
);

44 
kv¨r_di•œy_xml
–
kv¨r_t
 *
kv¨r
, *
docdes¸
);

	@list.c

25 
	#LIST
(
l
Ë((
li°_t
 *)÷))

	)

26 
	#INIT_LIST_HEAD
(
±r
Ë’å)->
√xt
 = (±r); (±r)->
¥ev
 = (±r)

	)

27 
	#LIST_HEAD_INIT
(
±r
Ë{ &’å), &’åË}

	)

28 
	#li°_öô
–
±r
Ë
	`INIT_LIST_HEAD
’å)

	)

30 
	#li°_f‹_óch
(
pos
, 
hód
) \

31 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

33 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

34 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->√xt;Öo†!(hód);Öo†n,Ç =Öos->√xt)

	)

37 
	sli°_íåy
 {

38 
li°_íåy
 *
	m√xt
;

39 
li°_íåy
 *
	m¥ev
;

42 
li°_íåy
 
	tli°_t
;

43 
li°_íåy
 
	tli°_íåy_t
;

46 
li°_em±y
 (
li°_t
 *
li°
);

47 
li°_add
 (
li°_t
 *
√w_íåy
,Üi°_à*
hód
);

48 
li°_add_èû
 (
li°_t
 *
√w_íåy
,Üi°_à*
hód
);

49 
li°_dñ
 (
li°_t
 *
íåy
);

56 
	$li°_em±y
 (
li°_t
 *
li°
){

57  (
li°
->
√xt
 ==Üist);

58 
	}
}

60 
	$li°_add
 (
li°_t
 *
√w_íåy
,Üi°_à*
hód
){

61 
√w_íåy
->
√xt
 = 
hód
->next;

62 
√w_íåy
->
¥ev
 = 
hód
;

63 
hód
->
√xt
->
¥ev
 = 
√w_íåy
;

64 
hód
->
√xt
 = 
√w_íåy
;

65 
	}
}

67 
	$li°_add_èû
 (
li°_t
 *
√w_íåy
,Üi°_à*
hód
){

68 
√w_íåy
->
√xt
 = 
hód
;

69 
√w_íåy
->
¥ev
 = 
hód
->prev;

70 
hód
->
¥ev
->
√xt
 = 
√w_íåy
;

71 
hód
->
¥ev
 = 
√w_íåy
;

72 
	}
}

74 
	$li°_dñ
 (
li°_t
 *
íåy
){

75 
íåy
->
√xt
->
¥ev
 =Éntry->prev;

76 
íåy
->
¥ev
->
√xt
 =Éntry->next;

77 
	}
}

	@queue.c

24 
	#QUEUE_MAX_SIZE
 128

	)

27 
	mmsg_id
;

28 
devi˚_hódî_t
 *
	mdevi˚
;

29 *
	m¨g0
;

30 *
	m¨g1
;

31 *
	m¨g2
;

32 }
	tmsg_t
;

35 
	m°¨t
, 
	míd
, 
	m√Àms
;

36 
msg_t
 
	mq
[
QUEUE_MAX_SIZE
];

37 }
	tqueue_t
;

40 
	$queue_öô
–
queue_t
 *
q
){

41 
q
->
°¨t
 = 0;

42 
q
->
íd
 = 0;

43 
q
->
√Àms
 = 0;

44 
	}
}

47 
	$queue_put
–
queue_t
 *
q
, 
msg_t
 *
v
){

48 if–
q
->
√Àms
 >
QUEUE_MAX_SIZE
){

49 
	`TRACE
–
TRC_HELPER
, 12, "Queue is full!", "");

54 
	`bc›y
–(*Ë
v
, (*Ë&
q
->q[q->
íd
], –
msg_t
) );

55 
q
->
íd
 = (q->íd + 1Ë% 
QUEUE_MAX_SIZE
;

56 
q
->
√Àms
++;

58 
	}
}

61 
	$queue_gë
–
queue_t
 *
q
, 
msg_t
 *
v
){

62 if–
q
->
√Àms
 <= 0){

63 
	`TRACE
–
TRC_HELPER
, 12, "Queue isÉmpty!", "");

67 
	`bc›y
–(*Ë&
q
->q[q->
°¨t
], (*Ë
v
, –
msg_t
) );

68 
q
->
°¨t
 = ( q->°¨à+ 1Ë% 
QUEUE_MAX_SIZE
;

69 
q
->
√Àms
--;

71 
	}
}

75 
	$queue_¥öt
–
queue_t
 *
q
){

76 
i
, 
j
;

80 
	`TRACE
–
TRC_HELPER
, 12, "QUEUE:", "");

81 if–
q
->
√Àms
 == 0){

82 
	`TRACE
–
TRC_HELPER
, 12, "Queue isÉmpty!", "");

86  
i
 = 
q
->
°¨t
, 
j
 = 0; j < q->
√Àms
; j++, i = (i+1Ë% 
QUEUE_MAX_SIZE
 ){

87 
	`TRACE
–
TRC_HELPER
, 12, "Queuêñemít[%d] = %d", 
j
, 
q
->q[
i
].
msg_id
);

89 
	}
}

	@trace.c

35 
	#__FUNCTION__
 
__func__


	)

36 
	#TRACE_LEVEL_DELAY
 120

	)

38 
	#TRACE
–
åc_˛ass
, 
åc_Àvñ
, 
fmt
, ...) \

39 if(–
globÆ_åa˚_˛ass
.
Àvñ
 >
åc_Àvñ
Ë&& ( (
åc_˛ass
 & globÆ_åa˚_˛ass.
˛ass
) != 0)){ \

40 if–
globÆ_åa˚_˛ass
.
Àvñ
 > 
TRACE_LEVEL_DELAY
) \

41 
	`USECDELAY
( 1000000); \

42 
	`¥ötf
–"USB:%s,%s,%d:"
fmt
"\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
); \

43 }

	)

45 
	#TRACERR
–
åc_˛ass
, 
fmt
, ...) \

46 if(((
åc_˛ass
 | 
TRC_ERROR
Ë& 
globÆ_åa˚_˛ass
.
˛ass
) != 0){ \

47 if–
globÆ_åa˚_˛ass
.
Àvñ
 > 
TRACE_LEVEL_DELAY
) \

48 
	`USECDELAY
( 500000); \

49 
	`cmn_îr
–
CE_ALERT
, "%s,%s,%d:"
fmt
"\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
); \

50 }

	)

52 
	#TRACEWAR
–
åc_˛ass
, 
fmt
, ...) \

53 if(((
åc_˛ass
 | 
TRC_WARNING
Ë& 
globÆ_åa˚_˛ass
.
˛ass
) != 0){ \

54 if–
globÆ_åa˚_˛ass
.
Àvñ
 > 
TRACE_LEVEL_DELAY
) \

55 
	`USECDELAY
( 1000000); \

56 
	`cmn_îr
–
CE_WARN
, "%s,%s,%d:"
fmt
"\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
); \

57 }

	)

	@uhcireg.h

62 #i‚de‡
_UHCIREG_H_


63 
	#_UHCIREG_H_


	)

65 
	#PCI_UHCI_BASE_REG
 0x20

	)

68 
	#PCI_USBREV
 0x60

	)

69 
	#PCI_USB_REV_MASK
 0xff

	)

70 
	#PCI_USB_REV_PRE_1_0
 0x00

	)

71 
	#PCI_USB_REV_1_0
 0x10

	)

72 
	#PCI_USB_REV_1_1
 0x11

	)

73 
	#PCI_LEGSUP
 0xc0

	)

74 
	#PCI_LEGSUP_USBPIRQDEN
 0x2000

	)

75 
	#PCI_CBIO
 0x20

	)

76 
	#PCI_INTERFACE_UHCI
 0x00

	)

79 
	#UHCI_CMD
 0x00

	)

80 
	#UHCI_CMD_RS
 0x0001

	)

81 
	#UHCI_CMD_HCRESET
 0x0002

	)

82 
	#UHCI_CMD_GRESET
 0x0004

	)

83 
	#UHCI_CMD_EGSM
 0x0008

	)

84 
	#UHCI_CMD_FGR
 0x0010

	)

85 
	#UHCI_CMD_SWDBG
 0x0020

	)

86 
	#UHCI_CMD_CF
 0x0040

	)

87 
	#UHCI_CMD_MAXP
 0x0080

	)

88 
	#UHCI_STS
 0x02

	)

89 
	#UHCI_STS_USBINT
 0x0001

	)

90 
	#UHCI_STS_USBEI
 0x0002

	)

91 
	#UHCI_STS_RD
 0x0004

	)

92 
	#UHCI_STS_HSE
 0x0008

	)

93 
	#UHCI_STS_HCPE
 0x0010

	)

94 
	#UHCI_STS_HCH
 0x0020

	)

95 
	#UHCI_STS_ALLINTRS
 0x003f

	)

96 
	#UHCI_INTR
 0x04

	)

97 
	#UHCI_INTR_TOCRCIE
 0x0001

	)

98 
	#UHCI_INTR_RIE
 0x0002

	)

99 
	#UHCI_INTR_IOCE
 0x0004

	)

100 
	#UHCI_INTR_SPIE
 0x0008

	)

101 
	#UHCI_FRNUM
 0x06

	)

102 
	#UHCI_FRNUM_MASK
 0x03ff

	)

103 
	#UHCI_FLBASEADDR
 0x08

	)

104 
	#UHCI_SOF
 0x0c

	)

105 
	#UHCI_SOF_MASK
 0x7f

	)

106 
	#UHCI_PORTSC1
 0x010

	)

107 
	#UHCI_PORTSC2
 0x012

	)

108 
	#UHCI_PORTSC_CCS
 0x0001

	)

109 
	#UHCI_PORTSC_CSC
 0x0002

	)

110 
	#UHCI_PORTSC_PE
 0x0004

	)

111 
	#UHCI_PORTSC_POEDC
 0x0008

	)

112 
	#UHCI_PORTSC_LS
 0x0030

	)

113 
	#UHCI_PORTSC_LS_SHIFT
 4

	)

114 
	#UHCI_PORTSC_RD
 0x0040

	)

115 
	#UHCI_PORTSC_LSDA
 0x0100

	)

116 
	#UHCI_PORTSC_PR
 0x0200

	)

117 
	#UHCI_PORTSC_OCI
 0x0400

	)

118 
	#UHCI_PORTSC_OCIC
 0x0800

	)

119 
	#UHCI_PORTSC_SUSP
 0x1000

	)

121 
	#URWMASK
(
x
Ë((xË& (
UHCI_PORTSC_SUSP
 | \

122 
UHCI_PORTSC_PR
 | 
UHCI_PORTSC_RD
 | \

123 
UHCI_PORTSC_PE
))

	)

	@usb.h

24 #i‚de‡
_USB_H_


25 
	#_USB_H_


	)

27 
	~<sys/ty≥s.h
>

44 
	#USB_FULLSPEED
 0

	)

45 
	#USB_LOWSPEED
 1

	)

46 
	#USB_HIGHSPEED
 2

	)

48 
	#USB_MAXADDR
 127

	)

56 
	#USB_TIME_SIGATT
 100

	)

57 
	#USB_TIME_ATTDB
 100

	)

58 
	#USB_TIME_DRST
 10

	)

59 
	#USB_TIME_DRSTR
 50

	)

60 
	#USB_TIME_RSTRCY
 10

	)

62 
	#USB_TIME_SETADDR_RECOVERY
 2

	)

64 
	#USB_PID_OUT
 0xe1

	)

65 
	#USB_PID_IN
 0x69

	)

66 
	#USB_PID_SETUP
 0x2d

	)

68 
	#USB_DIR_OUT
 0

	)

69 
	#USB_DIR_IN
 0x80

	)

71 
	#USB_TYPE_MASK
 (0x03 << 5)

	)

72 
	#USB_TYPE_STANDARD
 (0x00 << 5)

	)

73 
	#USB_TYPE_CLASS
 (0x01 << 5)

	)

74 
	#USB_TYPE_VENDOR
 (0x02 << 5)

	)

75 
	#USB_TYPE_RESERVED
 (0x03 << 5)

	)

77 
	#USB_RECIP_MASK
 0x1f

	)

78 
	#USB_RECIP_DEVICE
 0x00

	)

79 
	#USB_RECIP_INTERFACE
 0x01

	)

80 
	#USB_RECIP_ENDPOINT
 0x02

	)

81 
	#USB_RECIP_OTHER
 0x03

	)

83 
	#USB_REQ_GET_STATUS
 0x00

	)

84 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

85 
	#USB_REQ_SET_FEATURE
 0x03

	)

86 
	#USB_REQ_SET_ADDRESS
 0x05

	)

87 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

88 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

89 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

90 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

91 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

92 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

93 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

95 
	susb_˘æªque°
 {

96 
uöt8_t
 
	mbReque°Ty≥
;

97 
uöt8_t
 
	mbReque°
;

98 
uöt16_t
 
	mwVÆue
;

99 
uöt16_t
 
	mwIndex
;

100 
uöt16_t
 
	mwLígth
;

102 
usb_˘æªque°
 
	tusb_˘æªque°_t
;

105 
	#USB_DT_DEVICE
 0x01

	)

106 
	#USB_DT_CONFIG
 0x02

	)

107 
	#USB_DT_STRING
 0x03

	)

108 
	#USB_DT_INTERFACE
 0x04

	)

109 
	#USB_DT_ENDPOINT
 0x05

	)

110 
	#USB_DT_DEVICE_QUALIFIER
 0x06

	)

111 
	#USB_DT_OTHER_SPEED_CONFIG
 0x07

	)

113 
	susb_devi˚_des¸ùt‹
 {

114 
uöt8_t
 
	mbLígth
;

115 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

117 
uöt16_t
 
	mbcdUSB
;

118 
uöt8_t
 
	mbDevi˚Cœss
;

119 
uöt8_t
 
	mbDevi˚SubCœss
;

120 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

121 
uöt8_t
 
	mbMaxPackëSize0
;

122 
uöt16_t
 
	midVíd‹
;

123 
uöt16_t
 
	midProdu˘
;

124 
uöt16_t
 
	mbcdDevi˚
;

125 
uöt8_t
 
	miM™uÁ˘uªr
;

126 
uöt8_t
 
	miProdu˘
;

127 
uöt8_t
 
	miSîülNumbî
;

128 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

130 
usb_devi˚_des¸ùt‹
 
	tusb_devi˚_des¸ùt‹_t
;

133 
	#USB_CLASS_PER_INTERFACE
 0

	)

134 
	#USB_CLASS_AUDIO
 1

	)

135 
	#USB_CLASS_COMM
 2

	)

136 
	#USB_CLASS_HID
 3

	)

137 
	#USB_CLASS_PHYSICAL
 5

	)

138 
	#USB_CLASS_STILL_IMAGE
 6

	)

139 
	#USB_CLASS_PRINTER
 7

	)

140 
	#USB_CLASS_MASS_STORAGE
 8

	)

141 
	#USB_CLASS_HUB
 9

	)

143 
	susb_c⁄fig_des¸ùt‹
 {

144 
uöt8_t
 
	mbLígth
;

145 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

147 
uöt16_t
 
	mwTŸÆLígth
;

148 
uöt8_t
 
	mbNumI¡îÁ˚s
;

149 
uöt8_t
 
	mbC⁄figuøti⁄VÆue
;

150 
uöt8_t
 
	miC⁄figuøti⁄
;

151 
uöt8_t
 
	mbmAâribuãs
;

152 
uöt8_t
 
	mbMaxPowî
;

154 
usb_c⁄fig_des¸ùt‹
 
	tusb_c⁄fig_des¸ùt‹_t
;

156 
	susb_öãrÁ˚_des¸ùt‹
 {

157 
uöt8_t
 
	mbLígth
;

158 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

160 
uöt8_t
 
	mbI¡îÁ˚Numbî
;

161 
uöt8_t
 
	mbA…î«ãSëtög
;

162 
uöt8_t
 
	mbNumEndpoöts
;

163 
uöt8_t
 
	mbI¡îÁ˚Cœss
;

164 
uöt8_t
 
	mbI¡îÁ˚SubCœss
;

165 
uöt8_t
 
	mbI¡îÁ˚PrŸocﬁ
;

166 
uöt8_t
 
	miI¡îÁ˚
;

168 
usb_öãrÁ˚_des¸ùt‹
 
	tusb_öãrÁ˚_des¸ùt‹_t
;

170 
	susb_ídpoöt_des¸ùt‹
 {

171 
uöt8_t
 
	mbLígth
;

172 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

174 
uöt8_t
 
	mbEndpoötAddªss
;

175 
uöt8_t
 
	mbmAâribuãs
;

176 
uöt16_t
 
	mwMaxPackëSize
;

177 
uöt8_t
 
	mbI¡îvÆ
;

179 
usb_ídpoöt_des¸ùt‹
 
	tusb_ídpoöt_des¸ùt‹_t
;

181 
	#USB_ENDPOINT_NUMBER_MASK
 0x0‡

	)

182 
	#USB_ENDPOINT_DIR_MASK
 0x80

	)

184 
	#USB_ENDPOINT_XFERTYPE_MASK
 0x03

	)

185 
	#USB_ENDPOINT_XFER_CONTROL
 0

	)

186 
	#USB_ENDPOINT_XFER_ISOC
 1

	)

187 
	#USB_ENDPOINT_XFER_BULK
 2

	)

188 
	#USB_ENDPOINT_XFER_INT
 3

	)

189 
	#USB_ENDPOINT_MAX_ADJUSTABLE
 0x80

	)

191 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@usbcore.c

77 
	~<sys/ty≥s.h
>

78 
	~<sys/˝u.h
>

79 
	~<sys/sy°m.h
>

80 
	~<sys/cmn_îr.h
>

81 
	~<sys/î∫o.h
>

82 
	~<sys/buf.h
>

83 
	~<sys/io˘l.h
>

84 
	~<sys/¸ed.h
>

85 
	~<ksys/ddm≠.h
>

86 
	~<sys/pﬁl.h
>

87 
	~<sys/övít.h
>

88 
	~<sys/debug.h
>

89 
	~<sys/sbd.h
>

90 
	~<sys/kmem.h
>

91 
	~<sys/edt.h
>

92 
	~<sys/dmam≠.h
>

93 
	~<sys/hwgøph.h
>

94 
	~<sys/iobus.h
>

95 
	~<sys/iogøph.h
>

96 
	~<sys/∑øm.h
>

97 
	~<sys/pio.h
>

98 
	~<sys/£ma.h
>

99 
	~<sys/ddi.h
>

100 
	~<sys/î∫o.h
>

101 
	~<sys/ksynch.h
>

102 
	~<sys/©omic_›s.h
>

103 
	~<sys/PCI/PCI_defs.h
>

104 
	~<sys/PCI/pciio.h
>

105 
	~<sys/cmn_îr.h
>

106 
	~<sys/mlﬂd.h
>

107 
	~<°rög.h
>

108 
	~<˘y≥.h
>

118 
	~"c⁄fig.h
"

119 
	~"usbio˘l.h
"

120 
	~"usb.h
"

121 
	~"usbhc.h
"

130 
USB_åa˚_˛ass_t
 
	gglobÆ_åa˚_˛ass
 = { 12, 
TRC_ALL
};

138 
	~"kmaddr.c
"

139 
	~"åa˚.c
"

140 
	~"kutûs.c
"

141 
	~"dumphex.c
"

142 
	~"li°.c
"

143 
	~"gc.c
"

144 
	~"dma.c
"

145 
	~"queue.c
"

153 
	mcmd
;

154 *
	m°r
;

155 
USB_io˘l_func_t
 
	mfunc
;

156 } 
	tio˘l_ôem_t
;

164 
usbc‹e_maö_thªad
–*
¨g0
, *
¨g1
, *
¨g2
, *
¨g3
);

166 
io˘l_no_func
–*
hcd
, *
¨g
);

167 
usbc‹e_ªgi°î_moduÀ
–*
¨g
);

168 
usbc‹e_uƒegi°î_moduÀ
–*
¨g
);

169 
usbc‹e_ªgi°î_devi˚
–*
¨g
);

170 
usbc‹e_uƒegi°î_devi˚
–*
¨g
);

173 
dump_io˘l
–
n
);

174 
run_evít
–
usbc‹e_ö°™˚_t
 *
usbc‹e
, 
evít
, 
devi˚_hódî_t
 *
devi˚
, *
¨g0
, *
¨g1
, *
¨g2
);

175 
¥o˚ss_evít_‰om_hcd
–*
p_usbc‹e
, *
p_hcd
, 
evít
, *
¨g0
, *
¨g1
, *
¨g2
);

176 
¥o˚ss_evít_‰om_devi˚
–*
p_usbc‹e
, *
p_devi˚
, 
evít
, *
¨g0
, *
¨g1
, *
¨g2
);

177 
usb_íumî©e
–
devi˚_hódî_t
 *
devi˚
, 
uöt32_t
 
p‹t_num
);

179 
io˘l_usb_gë_drivî_öfo
–*
hcd
, *
¨g
);

180 
io˘l_usb_gë_num_moduÀs
–*
hcd
, *
¨g
);

181 
io˘l_usb_nŸ_im∂emíãd
–*
hcd
, *
¨g
);

182 
io˘l_usb_gë_roŸ_hub_öfo
–*
hcd
, *
¨g
);

183 
io˘l_usb_£t_debug_Àvñ
–*
hcd
, *
¨g
);

184 
io˘l_usb_gë_debug_Àvñ
–*
hcd
, *
¨g
);

185 
io˘l_usb_gë_moduÀ_öfo
–*
hcd
, *
¨g
);

186 
io˘l_usb_gë_roŸ_hub_°©us
–*
hcd
, *
¨g
);

187 
io˘l_usb_gë_devi˚s_num
–*
hcd
, *
¨g
);

188 
io˘l_usb_gë_devi˚
–*
hcd
, *
¨g
);

189 
io˘l_usb_£t_debug_vÆues
–*
hcd
, *
¨g
);

190 
io˘l_usb_run_debug_›
–*
hcd
, *
¨g
);

192 
io˘l_ôem_t
 
	gusbc‹e_io˘ls
[]={

193 
IOCTL_USB_GET_DRIVER_INFO
, "IOCTL_USB_GET_DRIVER_INFO", 
io˘l_usb_gë_drivî_öfo
,

194 
IOCTL_USB_GET_NUM_MODULES
, "IOCTL_USB_GET_NUM_MODULES", 
io˘l_usb_gë_num_moduÀs
,

195 
IOCTL_USB_GET_MODULE_INFO
, "IOCTL_USB_GET_MODULE_INFO", 
io˘l_usb_gë_moduÀ_öfo
,

196 
IOCTL_USB_GET_ROOT_HUB_INFO
, "IOCTL_USB_GET_ROOT_HUB_INFO", 
io˘l_usb_gë_roŸ_hub_öfo
,

197 
IOCTL_USB_SET_DEBUG_LEVEL
, "IOCTL_USB_SET_DEBUG_LEVEL", 
io˘l_usb_£t_debug_Àvñ
,

198 
IOCTL_USB_GET_DEBUG_LEVEL
, "IOCTL_USB_GET_DEBUG_LEVEL", 
io˘l_usb_gë_debug_Àvñ
,

199 
IOCTL_USB_GET_ROOT_HUB_STATUS
, "IOCTL_USB_GET_ROOT_HUB_STATUS", 
io˘l_usb_gë_roŸ_hub_°©us
,

200 
IOCTL_USB_GET_DEVICE
, "IOCTL_USB_GET_DEVICE", 
io˘l_usb_gë_devi˚
,

201 
IOCTL_USB_GET_DEVICES_NUM
, "IOCTL_USB_GET_DEVICES_NUM", 
io˘l_usb_gë_devi˚s_num
,

202 
IOCTL_USB_CONTROL
, "IOCTL_USB_CONTROL", 
io˘l_usb_nŸ_im∂emíãd
,

203 
IOCTL_USB_BULK
, "IOCTL_USB_BULK", 
io˘l_usb_nŸ_im∂emíãd
,

204 
IOCTL_USB_RESETEP
, "IOCTL_USB_RESETEP", 
io˘l_usb_nŸ_im∂emíãd
,

205 
IOCTL_USB_SETINTF
, "IOCTL_USB_SETINTF", 
io˘l_usb_nŸ_im∂emíãd
,

206 
IOCTL_USB_SETCONFIG
, "IOCTL_USB_SETCONFIG", 
io˘l_usb_nŸ_im∂emíãd
,

207 
IOCTL_USB_GETDRIVER
, "IOCTL_USB_GETDRIVER", 
io˘l_usb_nŸ_im∂emíãd
,

208 
IOCTL_USB_SUBMITURB
, "IOCTL_USB_SUBMITURB", 
io˘l_usb_nŸ_im∂emíãd
,

209 
IOCTL_USB_DISCARDURB
, "IOCTL_USB_DISCARDURB", 
io˘l_usb_nŸ_im∂emíãd
,

210 
IOCTL_USB_REAPURB
, "IOCTL_USB_REAPURB", 
io˘l_usb_nŸ_im∂emíãd
,

211 
IOCTL_USB_REAPURBNDELAY
, "IOCTL_USB_REAPURBNDELAY", 
io˘l_usb_nŸ_im∂emíãd
,

212 
IOCTL_USB_CLAIMINTF
, "IOCTL_USB_CLAIMINTF", 
io˘l_usb_nŸ_im∂emíãd
,

213 
IOCTL_USB_RELEASEINTF
, "IOCTL_USB_RELEASEINTF", 
io˘l_usb_nŸ_im∂emíãd
,

214 
IOCTL_USB_CONNECTINFO
, "IOCTL_USB_CONNECTINFO", 
io˘l_usb_nŸ_im∂emíãd
,

215 
IOCTL_USB_IOCTL
, "IOCTL_USB_IOCTL", 
io˘l_usb_nŸ_im∂emíãd
,

216 
IOCTL_USB_HUB_PORTINFO
, "IOCTL_USB_HUB_PORTINFO", 
io˘l_usb_nŸ_im∂emíãd
,

217 
IOCTL_USB_RESET
, "IOCTL_USB_RESET", 
io˘l_usb_nŸ_im∂emíãd
,

218 
IOCTL_USB_CLEAR_HALT
, "IOCTL_USB_CLEAR_HALT", 
io˘l_usb_nŸ_im∂emíãd
,

219 
IOCTL_USB_DISCONNECT
, "IOCTL_USB_DISCONNECT", 
io˘l_usb_nŸ_im∂emíãd
,

220 
IOCTL_USB_CONNECT
, "IOCTL_USB_CONNECT", 
io˘l_usb_nŸ_im∂emíãd
,

221 
IOCTL_USB_SET_DEBUG_VALUES
, "IOCTL_USB_SET_DEBUG_VALUES", 
io˘l_usb_£t_debug_vÆues
,

222 
IOCTL_USB_RUN_DEBUG_OP
, "IOCTL_USB_RUN_DEBUG_OP", 
io˘l_usb_run_debug_›
,

223 -1, "UNKNOWN IOCTL", 
io˘l_no_func
,

224 0, 
NULL
, NULL

227 
moduÀ_hódî_t
 
	gusbc‹e_moduÀ_hódî
={

228 
USB_MOD_CORE
,

232 
USB_DRIVER_IS_CORE


243 *
	gusbc‹e_mvîsi⁄
 = 
M_VERSION
;

244 
	gusbc‹e_devÊag
 = 
D_MP
;

245 
	gusbc‹e_busy
 = 0;

246 
gc_li°_t
 
	ggc_li°
;

247 
usbc‹e_ö°™˚_t
 *
	gglobÆ_so·
 = 
NULL
;

248 
	#MAX_HCD
 8

	)

249 
moduÀ_hódî_t
 *
	ghcd_ö°™˚s
[
MAX_HCD
];

250 
	ghcd_ö°™˚s_num
 = 0;

251 
	gÆl_moduÀs_num
 = 0;

252 
	#MAX_MODULES
 32

	)

253 
moduÀ_hódî_t
 *
	gmoduÀs
[
MAX_MODULES
];

255 
	#MAX_USB_DEVICES
 32

	)

256 
devi˚_hódî_t
 *
	gusb_devi˚s
[
MAX_USB_DEVICES
];

257 
	gusb_devi˚s_num
 = 0;

259 
queue_t
 
	gmsg_queue
;

265 
usbc‹e_öô
();

266 
usbc‹e_u∆ﬂd
();

267 
usbc‹e_ªg
();

268 
usbc‹e_uƒeg
();

269 
usbc‹e_©èch
(
vîãx_hdl_t
 
c⁄n
);

270 
usbc‹e_dëach
(
vîãx_hdl_t
 
c⁄n
);

271 
usbc‹e_›í
(
dev_t
 *
devp
, 
Êag
, 
Ÿyp
, 
¸ed
 *
¸p
);

272 
usbc‹e_˛o£
(
dev_t
 
dev
);

273 
usbc‹e_ªad
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
);

274 
usbc‹e_wrôe
();

275 
usbc‹e_io˘l
(
dev_t
 
dev
, 
cmd
, *
u¨g
, 
mode
, 
¸ed_t
 *
¸p
, *
rvÆp
);

276 
usbc‹e_m≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
, 
off_t
 
off
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
);

277 
usbc‹e_unm≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
);

287 
	$io˘l_usb_gë_drivî_öfo
–*
hcd
, *
¨g
){

288 
USB_drivî_öfo_t
 *
öfo
 = ( USB_drivî_öfo_à*Ë
¨g
;

289 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
 | 
TRC_START_END
;

291 
	`TRACE
–
˛ass
, 10, "start", "");

292 
	`°r˝y
–
öfo
->
l⁄g_«me
, 
USBCORE_DRV_LONG_NAME
);

293 
	`°r˝y
–
öfo
->
sh‹t_«me
, 
USBCORE_DRV_SHORT_NAME
);

294 
	`°r˝y
–
öfo
->
vîsi⁄
, 
USBCORE_DRV_VERSION
);

295 
	`°r˝y
–
öfo
->
sh‹t_vîsi⁄
, 
USBCORE_DRV_SHORT_VERSION
);

296 
	`°r˝y
–
öfo
->
£qn
, 
USBCORE_DRV_SEQ
);

297 
	`°r˝y
–
öfo
->
buûd_d©e
, 
USBCORE_DRV_BUILD_DATE
);

299 
	`TRACE
–
˛ass
, 10, "end", "");

301 
	}
}

305 
	$io˘l_usb_nŸ_im∂emíãd
–*
hcd
, *
¨g
){

306 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

308 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

309 
	`TRACE
–
˛ass
, 6, "Not implemented", "");

310 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

312 
	}
}

316 
	$io˘l_no_func
–*
hcd
, *
¨g
){

317 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

319 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

320 
	`TRACE
–
˛ass
 , 6, "ioctlÇotÉxist", "");

321 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

324 
	}
}

328 
	$io˘l_usb_£t_debug_Àvñ
–*
hcd
, *
¨g
){

329 
usbc‹e_ö°™˚_t
 *
so·
 = (usbc‹e_ö°™˚_à*Ë
hcd
;

330 
usb_gíîic_mëhods_t
 *
mëhods
;

331 
USB_åa˚_˛ass_t
 *
åa˚_˛ass
 = (USB_åa˚_˛ass_à*Ë
¨g
;

332 
i
;

333 
°r
[256];

334 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

336 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

339 
globÆ_åa˚_˛ass
.
˛ass
 = 
åa˚_˛ass
->class;

340 
globÆ_åa˚_˛ass
.
Àvñ
 = 
åa˚_˛ass
->level;

342 if–
Æl_moduÀs_num
 > 1){

344  
i
 = 1 ; i < 
Æl_moduÀs_num
; i++){

345 
mëhods
 = ( 
usb_gíîic_mëhods_t
 *Ë&
moduÀs
[
i
]->methods;

346 
mëhods
->
	`£t_åa˚_Àvñ
–
NULL
, (*Ë&
globÆ_åa˚_˛ass
);

350 
	`TRACE
–
˛ass
, 12, "trace class settled; class=0x%x,Üevel=%d",

351 
globÆ_åa˚_˛ass
.
˛ass
, globÆ_åa˚_˛ass.
Àvñ
);

352 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

354 
	}
}

358 
	$io˘l_usb_gë_debug_Àvñ
–*
hcd
, *
¨g
){

359 
USB_åa˚_˛ass_t
 *
åa˚_˛ass
 = (USB_åa˚_˛ass_à*Ë
¨g
;

360 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

362 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

363 
	`TRACE
–
˛ass
, 12, "trace class settled; class=0x%x,Üevel=%d",

364 
globÆ_åa˚_˛ass
.
˛ass
, globÆ_åa˚_˛ass.
Àvñ
);

366 
åa˚_˛ass
->
˛ass
 = 
globÆ_åa˚_˛ass
.class;

367 
åa˚_˛ass
->
Àvñ
 = 
globÆ_åa˚_˛ass
.level;

369 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

371 
	}
}

375 
	$io˘l_usb_gë_num_moduÀs
–*
hcd
, *
¨g
){

376 *
num_moduÀs
 = (*Ë
¨g
;

377 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

379 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

381 *
num_moduÀs
 = 
Æl_moduÀs_num
;

383 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

385 
	}
}

389 
	$io˘l_usb_gë_moduÀ_öfo
–*
ö°™˚
, *
¨g
){

390 
USB_drivî_moduÀ_öfo_t
 *
öfo
 = (USB_drivî_moduÀ_öfo_à*Ë
¨g
;

391 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

393 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

395 
	`TRACE
–
˛ass
, 6, "info->num_module=%d,áll_modules_num=%d",

396 
öfo
->
num_moduÀ
, 
Æl_moduÀs_num
);

398 if–
öfo
->
num_moduÀ
 < 0){

399 –
EINVAL
);

402 if–
öfo
->
num_moduÀ
 >
Æl_moduÀs_num
){

403 –
EINVAL
);

406 
öfo
->
moduÀ_id
 = 
moduÀs
[öfo->
num_moduÀ
]->module_id;

407 
öfo
->
ty≥
 = 
moduÀs
[öfo->
num_moduÀ
]->type;

408 
	`bc›y
–
moduÀs
[
öfo
->
num_moduÀ
]->
sh‹t_des¸ùti⁄
, info->short_description, 12 );

409 
	`bc›y
–
moduÀs
[
öfo
->
num_moduÀ
]->
l⁄g_des¸ùti⁄
, info->long_description, 80 );

410 
	`bc›y
–
moduÀs
[
öfo
->
num_moduÀ
]->
moduÀ_«me
, info->module_name, 32 );

412 
	`TRACE
–
˛ass
, 6, "moduÀ_id=%d", 
öfo
->
moduÀ_id
 );

413 
	`TRACE
–
˛ass
, 6, "ty≥=%d", 
öfo
->
ty≥
 );

414 
	`TRACE
–
˛ass
, 6, "sh‹t_des¸ùti⁄='%s'", 
öfo
->
sh‹t_des¸ùti⁄
);

415 
	`TRACE
–
˛ass
, 6, "l⁄g_des¸ùti⁄='%s'", 
öfo
->
l⁄g_des¸ùti⁄
);

416 
	`TRACE
–
˛ass
, 6, "moduÀ_«me='%s'", 
öfo
->
moduÀ_«me
);

417 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

419 
	}
}

422 
	$io˘l_usb_gë_roŸ_hub_öfo
–*
hcd
, *
¨g
){

423 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

424 
USB_roŸ_hub_öfo_t
 *
öfo
 = (USB_roŸ_hub_öfo_à*Ë
¨g
;

425 
usbhub_ö°™˚_t
 *
hub
;

426 
rc
;

427 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

429 if–
usb_devi˚s
[0] =
NULL
){

431 
rc
 = 
EUNATCH
;

433 
hub
 = (
usbhub_ö°™˚_t
 *Ë
usb_devi˚s
[0];

434 
öfo
->
hub_ty≥
 = 
hub
->hub_type;

435 
öfo
->
hub_ödex
 = 
hub
->hub_index;

436 
öfo
->
hub_∑ª¡
 = 
hub
->hub_parent;

437 
öfo
->
hcd_drivîs
 = 
hub
->hcd_drivers;

438 
öfo
->
pci_bus
 = 
hub
->pci_bus;

439 
öfo
->
pci_fun˘i⁄
 = 
hub
->pci_function;

440 
öfo
->
pci_¶Ÿ
 = 
hub
->pci_slot;

441 
öfo
->
¥odu˘_id
 = 
hub
->
devi˚_hódî
.
devi˚_id
;

442 
öfo
->
víd‹_id
 = 
hub
->
devi˚_hódî
.vendor_id;

443 
öfo
->
p‹ts_numbî
 = 
hub
->ports_number;

444 
öfo
->
addªss
 = 
hub
->address;

446 
	`°r˝y
–(*Ë
öfo
->
fs_devi˚
, (*Ë
hub
->
devi˚_hódî
.fs_device);

447 
	`°r˝y
–(*Ë
öfo
->
h¨dw¨e_des¸ùti⁄
,

448 (*Ë
hub
->
devi˚_hódî
.
h¨dw¨e_des¸ùti⁄
);

449 
rc
 = 0;

451 
	`TRACE
–
˛ass
, 6, "ídÑc=%d", 
rc
);

452 (
rc
);

453 
	}
}

456 
	$io˘l_usb_gë_roŸ_hub_°©us
–*
hcd
, *
¨g
){

457 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

458 
USB_roŸ_hub_°©us_t
 *
°©us
 = (USB_roŸ_hub_°©us_à*Ë
¨g
;

459 
usbhub_ö°™˚_t
 *
hub
;

460 
moduÀ_hódî_t
 *
hódî
;

461 
i
;

462 
rc
;

463 if–
usb_devi˚s
[0] =
NULL
){

465 
rc
 = 
EUNATCH
;

467 
hub
 = (
usbhub_ö°™˚_t
 *Ë
usb_devi˚s
[0];

468 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

469 
hub
, 
USB_HUB_DEVICE_GET_STATUS
, (*Ë
°©us
, 
NULL
, NULL);

470  
i
 = 0; i < 
hub
->
p‹ts_numbî
; i++)

471 
°©us
->
p‹ts_°©us
[
i
] = 
hub
->ports_status[i];

472 
rc
 = 0;

474 
	`TRACE
–
˛ass
, 6, "ídÑc=%d", 
rc
);

475 (
rc
);

476 
	}
}

479 
	$io˘l_usb_gë_devi˚s_num
–*
hcd
, *
¨g
){

480 *
num_devi˚s
 = (*Ë
¨g
;

481 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

483 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

485 *
num_devi˚s
 = 
usb_devi˚s_num
;

487 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

489 
	}
}

492 
	$io˘l_usb_gë_devi˚
–*
hcd
, *
¨g
){

493 
USB_devi˚_t
 *
devi˚
 = (*Ë
¨g
;

494 
uöt16_t
 
i
;

495 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

496 
buf„r
[1024];

498 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

499 
i
 = 
devi˚
->
devi˚_ödex
;

501 
	`TRACE
–
˛ass
, 10, "devi˚ index=%d", 
i
);

502 if(–
i
 < 0 ) || ( i >
usb_devi˚s_num
)){

503 –
EINVAL
);

506 
	`°r˝y
–
devi˚
->
h¨dw¨e_des¸ùti⁄
, 
usb_devi˚s
[
i
]->hardware_description);

507 
	`°r˝y
–
devi˚
->
moduÀ_«me
, 
usb_devi˚s
[
i
]->
moduÀ_hódî
->module_name);

508 
	`°r˝y
–
devi˚
->
fs_devi˚
, 
usb_devi˚s
[
i
]->fs_device);

509 
devi˚
->
devi˚_id
 = 
usb_devi˚s
[
i
]->device_id;

510 
devi˚
->
víd‹_id
 = 
usb_devi˚s
[
i
]->vendor_id;

511 
devi˚
->
˛ass_id
 = 
usb_devi˚s
[
i
]->class_id;

512 
devi˚
->
öãrÁ˚_id
 = 
usb_devi˚s
[
i
]->interface_id;

513 
devi˚
->
ö°™˚_id
 = 
usb_devi˚s
[
i
]->instance_id;

514 
devi˚
->
moduÀ_id
 = 
usb_devi˚s
[
i
]->
moduÀ_hódî
->module_id;

515 
devi˚
->
hub_ödex
 = 
usb_devi˚s
[
i
]->hub_index;

516 
devi˚
->
p‹t_ödex
 = 
usb_devi˚s
[
i
]->port_index;

517 
devi˚
->
°©us
 = 
usb_devi˚s
[
i
]->
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

518 
usb_devi˚s
[
i
], 
USB_HUB_DEVICE_GET_STATUS
, (*Ë&
buf„r
, 
NULL
, NULL);

520 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

524 
	}
}

527 
	$io˘l_usb_£t_debug_vÆues
–*
hcd
, *
¨g
){

528 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

529 
usb_debug_vÆues_t
 *
v
 = (usb_debug_vÆues_à*Ë
¨g
;

530 
usbc‹e_ö°™˚_t
 *
so·
 = (usbc‹e_ö°™˚_à*Ë
hcd
;

531 
usb_gíîic_mëhods_t
 *
mëhods
;

532 
usbhub_ö°™˚_t
 *
hub
;

533 
rc
;

535 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

537 if–
usb_devi˚s
[0] =
NULL
){

539 
rc
 = 
EUNATCH
;

541 
hub
 = (
usbhub_ö°™˚_t
 *Ë
usb_devi˚s
[0];

542 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

543 
hub
, 
USB_SET_DEBUG_VALUES
, (*Ë
v
, 
NULL
, NULL);

545 
rc
 = 0;

548 
so·
->
debug_p‹t
 = 
v
->
vÆues
[2];

550 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "ídÑ¯%d", 
rc
);

553 
	}
}

556 
	$io˘l_usb_run_debug_›
–*
hcd
, *
¨g
){

557 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

558 
uöt32_t
 *
v
 = (uöt32_à*Ë
¨g
;

559 
usbc‹e_ö°™˚_t
 *
so·
 = (usbc‹e_ö°™˚_à*Ë
hcd
;

560 
USB_roŸ_hub_°©us_t
 
°©us
;

561 
usbhub_ö°™˚_t
 *
hub
;

562 
moduÀ_hódî_t
 *
hódî
;

563 
i
, 
rc
;

565 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

567 if–
usb_devi˚s
[0] =
NULL
){

569 
rc
 = 
EUNATCH
;

572 
hub
 = (
usbhub_ö°™˚_t
 *Ë
usb_devi˚s
[0];

575 
i
 = (Ë
so·
->
debug_p‹t
;

576 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

577 
hub
, 
USB_HUB_DEVICE_GET_STATUS
, (*Ë&
°©us
, 
NULL
, NULL);

579 if––
hub
->
p‹ts_°©us
[
i
] & 
USB_PORT_IN_USE
) == 0){

580 
rc
 = 1;

581 
exô_usb_run_debug_›
;

593 
exô_usb_run_debug_›
:

594 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "ídÑ¯%d", 
rc
);

595 –
rc
);

596 
	}
}

610 
io˘l_ôem_t
 *
	$gë_io˘l_ôem
–
cmd
){

611 
i
;

614  
i
 = 0; 
usbc‹e_io˘ls
[i].
°r
 !
NULL
; i++){

615 if–
cmd
 =
usbc‹e_io˘ls
[
i
].cmd)

616 –&
usbc‹e_io˘ls
[
i
] );

619 –&
usbc‹e_io˘ls
[
i
 - 1]);

620 
	}
}

627 
	$usbc‹e_öô
(){

628 
vîãx_hdl_t
 
ma°îv
 = 
GRAPH_VERTEX_NONE
;

629 
vîãx_hdl_t
 
usbc‹e_devi˚_vtx
 = 
GRAPH_VERTEX_NONE
;

630 
vîãx_hdl_t
 
usbd´m⁄_devi˚_vtx
 = 
GRAPH_VERTEX_NONE
;

631 
vîãx_hdl_t
 
c⁄nv
 = 
GRAPH_VERTEX_NONE
;

632 
gøph_îr‹_t
 
ªt
 = (graph_error_t) 0;

633 
usbc‹e_ö°™˚_t
 *
so·
, *
so·_usbc‹e_devi˚
, *
so·_usbd´m⁄_devi˚
;

634 
so·
 = 
so·_usbc‹e_devi˚
 = 
so·_usbd´m⁄_devi˚
 = 
NULL
;

635 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_INIT
;

636 
rc
;

638 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

639 
	`¥ötf
( "**********************************************************\n");

640 
	`¥ötf
( "* USBCORE Driveránd stack for Silicon Graphics Irix 6.5 *\n");

641 
	`¥ötf
( "* By bsderoát gmail dot org, 2011 *\n");

642 
	`¥ötf
–"* Vîsi⁄ %† *\n", 
USBCORE_DRV_VERSION
);

643 
	`¥ötf
–"* Sequí˚ %† *\n", 
USBCORE_DRV_SEQ
);

644 
	`¥ötf
( "**********************************************************\n");

645 
	`¥ötf
( "usbcore kernel moduleÜoaded! \n");

646 
	`¥ötf
–"_dügöfo_: Kî√»usbc‹êmoduÀ ba£áddªs†:0x%x\n", 
moduÀ_addªss
);

651 
	`gc_li°_öô
–&
gc_li°
);

654 
so·
 = ( 
usbc‹e_ö°™˚_t
 *Ë
	`gc_mÆloc
–&
gc_li°
, ( usbcore_instance_t));

655 if–
so·
 =
NULL
){

656 
	`TRACERR
–
˛ass
, "gc_malloc()Ñeturned NULL, quitting", "");

657 
ªt
 = ( 
gøph_îr‹_t
Ë
ENOMEM
;

658 
d⁄e
;

661 
	`bzîo
–
so·
, –
usbc‹e_ö°™˚_t
));

665 
ªt
 = 
	`hwgøph_∑th_add
(

666 
GRAPH_VERTEX_NONE
,

668 &
ma°îv
);

669 
	`TRACE
–
˛ass
, 12, "r¯o‡hwgøph_∑th_add(Ë%d, ma°î vîãx", 
ªt
);

672 i‡(
ªt
 !
GRAPH_SUCCESS
)

673 
d⁄e
;

676 
ªt
 = 
	`hwgøph_edge_gë
–
ma°îv
, "usbc‹e", &
usbc‹e_devi˚_vtx
);

677 
	`TRACE
–
˛ass
, 12, "r¯o‡hwgøph_edge_gë(Ë%d,ádded usbc‹êedge", 
ªt
);

678 
ªt
 = 
	`hwgøph_ch¨_devi˚_add
–
ma°îv
, "usbc‹e", "usbc‹e_", &
usbc‹e_devi˚_vtx
);

679 
	`TRACE
–
˛ass
, 12, "r¯o‡hwgøph_ch¨_devi˚_add(Ë%d,ádded usbc‹êedgê(ch¨ devi˚)", 
ªt
);

682 
ªt
 = 
	`hwgøph_edge_gë
–
ma°îv
, "usbd´m⁄", &
usbd´m⁄_devi˚_vtx
);

683 
	`TRACE
–
˛ass
, 12, "r¯o‡hwgøph_edge_gë(Ë%d,ádded usbd´m⁄Édge", 
ªt
);

684 
ªt
 = 
	`hwgøph_ch¨_devi˚_add
–
ma°îv
, "usbd´m⁄", "usbc‹e_", &
usbd´m⁄_devi˚_vtx
);

685 
	`TRACE
–
˛ass
, 12, "r¯o‡hwgøph_ch¨_devi˚_add(Ë%d,ádded usbd´m⁄Édgê(ch¨ devi˚)", 
ªt
);

688 
so·
->
devi˚_hódî
.
moduÀ_hódî
 = &
usbc‹e_moduÀ_hódî
;

689 
so·
->
ma°îv
 = masterv;

690 
so·
->
c⁄n
 = 
c⁄nv
;

691 
so·
->
usbd´m⁄
 = 
usbd´m⁄_devi˚_vtx
;

692 
so·
->
usbc‹e
 = 
usbc‹e_devi˚_vtx
;

693 
so·
->
ªgi°î_moduÀ
 = 
usbc‹e_ªgi°î_moduÀ
;

694 
so·
->
uƒegi°î_moduÀ
 = 
usbc‹e_uƒegi°î_moduÀ
;

695 
so·
->
ªgi°î_devi˚
 = 
usbc‹e_ªgi°î_devi˚
;

696 
so·
->
uƒegi°î_devi˚
 = 
usbc‹e_uƒegi°î_devi˚
;

697 
so·
->
¥o˚ss_evít_‰om_hcd
 =Örocess_event_from_hcd;

699 
so·
->
¥o˚ss_evít_‰om_devi˚
 =Örocess_event_from_device;

700 
so·
->
mode
 = 0xff;

701 
	`MUTEX_INIT
–&
so·
->
muãx
, 
MUTEX_DEFAULT
, "usbcore");

702 
	`MUTEX_INIT
–&
so·
->
uhci_muãx
, 
MUTEX_DEFAULT
, "usbcore");

703 
	`MUTEX_INIT
–&
so·
->
ehci_muãx
, 
MUTEX_DEFAULT
, "usbcore");

705 
	`devi˚_öfo_£t
–
ma°îv
, 
so·
);

708 
so·_usbc‹e_devi˚
 = ( 
usbc‹e_ö°™˚_t
 *Ë
	`gc_mÆloc
–&
gc_li°
, ( usbcore_instance_t));

709 if–
so·_usbc‹e_devi˚
 =
NULL
){

710 
ªt
 = ( 
gøph_îr‹_t
Ë
ENOMEM
;

711 
d⁄e
;

714 
	`bc›y
–
so·
, 
so·_usbc‹e_devi˚
, –
usbc‹e_ö°™˚_t
));

715 
so·_usbc‹e_devi˚
->
mode
 = 0x00;

716 
	`devi˚_öfo_£t
–
usbc‹e_devi˚_vtx
, 
so·_usbc‹e_devi˚
);

720 
so·_usbd´m⁄_devi˚
 = ( 
usbc‹e_ö°™˚_t
 *Ë
	`gc_mÆloc
–&
gc_li°
, ( usbcore_instance_t));

721 if–
so·_usbd´m⁄_devi˚
 =
NULL
){

722 
ªt
 = ( 
gøph_îr‹_t
Ë
ENOMEM
;

723 
d⁄e
;

725 
	`bc›y
–
so·
, 
so·_usbd´m⁄_devi˚
, –
usbc‹e_ö°™˚_t
));

726 
so·_usbd´m⁄_devi˚
->
mode
 = 0x01;

727 
	`devi˚_öfo_£t
–
usbd´m⁄_devi˚_vtx
, 
so·_usbd´m⁄_devi˚
);

730 
	`bzîo
–(*Ë
hcd_ö°™˚s
, –
hcd_mëhods_t
 *Ë* 
MAX_HCD
);

731 
hcd_ö°™˚s_num
 = 0;

734 
	`bzîo
–(*Ë
usb_devi˚s
, –*Ë* 
MAX_USB_DEVICES
);

737 
	`bzîo
–(*Ë
moduÀs
, –
moduÀ_hódî_t
 *Ë* 
MAX_MODULES
);

740 
moduÀs
[0] = ( 
usbc‹e_ö°™˚_t
 *Ë
	`gc_mÆloc
–&
gc_li°
, ( usbcore_instance_t));

741 
	`bc›y
–(*Ë&
usbc‹e_moduÀ_hódî
, (*Ë
moduÀs
[0],

742 –
moduÀ_hódî_t
));

743 
Æl_moduÀs_num
 = 1;

746 
	`queue_öô
–&
msg_queue
);

749 
rc
 = 
	`drv_thªad_¸óã
("usbc‹e_maö_thªad", 0, 0, 0, 
usbc‹e_maö_thªad
,

750 (*Ë
so·
, 
NULL
, NULL, NULL);

752 i‡(
rc
 ) {

753 
	`cmn_îr
(
CE_WARN
, "Creation of usbcore_main_thread() failed\n");

756 
d⁄e
:

757 i‡(
ªt
 != 0) {

758 i‡–
usbd´m⁄_devi˚_vtx
 !
GRAPH_VERTEX_NONE
)

759 
	`hwgøph_vîãx_de°roy
–
usbd´m⁄_devi˚_vtx
);

761 i‡–
usbc‹e_devi˚_vtx
 !
GRAPH_VERTEX_NONE
)

762 
	`hwgøph_vîãx_de°roy
–
usbc‹e_devi˚_vtx
);

764 i‡–
so·
){

765 
	`gc_li°_de°roy
–&
gc_li°
);

770 
globÆ_so·
 = 
so·
;

773 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

775 
	}
}

777 
	$usbc‹e_u∆ﬂd
(){

778 
vîãx_hdl_t
 
c⁄n
 = 
GRAPH_VERTEX_NONE
;

779 
vîãx_hdl_t
 
ma°îv
 = 
GRAPH_VERTEX_NONE
;

780 
vîãx_hdl_t
 
usbc‹e_devi˚_vtx
 = 
GRAPH_VERTEX_NONE
;

781 
vîãx_hdl_t
 
usbd´m⁄_devi˚_vtx
 = 
GRAPH_VERTEX_NONE
;

782 
usbc‹e_ö°™˚_t
 *
so·
;

783 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_UNLOAD
;

784 
msg_t
 
mesßge
;

786 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

787 
so·
 = 
globÆ_so·
;

789 
mesßge
.
msg_id
 = 
USB_EVENT_EXIT_MAIN_THREAD
;

792 
	`MUTEX_LOCK
–&
so·
->
muãx
, -1);

793 
	`queue_put
–&
msg_queue
, &
mesßge
);

794 
	`MUTEX_UNLOCK
–&
so·
->
muãx
);

796 
	`queue_¥öt
–&
msg_queue
);

798 
	`wakeup
–(
ˇddr_t
Ë
so·
);

800 
	`USECDELAY
(100000);

802 
	`MUTEX_DESTROY
–&
so·
->
muãx
);

803 
	`MUTEX_DESTROY
–&
so·
->
uhci_muãx
);

804 
	`MUTEX_DESTROY
–&
so·
->
ehci_muãx
);

805 
ma°îv
 = 
so·
->masterv;

806 
usbc‹e_devi˚_vtx
 = 
so·
->
usbc‹e
;

807 
usbd´m⁄_devi˚_vtx
 = 
so·
->
usbd´m⁄
;

809 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
c⁄n
, "/usb", &
ma°îv
))

812 
	`hwgøph_edge_ªmove
(
ma°îv
, "usbc‹e", &
usbc‹e_devi˚_vtx
);

813 
	`hwgøph_edge_ªmove
(
ma°îv
, "usbd´m⁄", &
usbd´m⁄_devi˚_vtx
);

815 
	`hwgøph_vîãx_de°roy
–
usbc‹e_devi˚_vtx
);

816 
	`hwgøph_vîãx_de°roy
–
usbd´m⁄_devi˚_vtx
);

818 
	`hwgøph_edge_ªmove
(
c⁄n
, "/usb", &
ma°îv
);

819 
	`hwgøph_vîãx_de°roy
–
ma°îv
);

822 
	`gc_li°_de°roy
–&
gc_li°
);

823 
	`TRACE
–
˛ass
, 0, "USBCORE Driver unloaded!", "");

824 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

827 
	}
}

830 
	$usbc‹e_ªg
(){

832 
	}
}

834 
	$usbc‹e_uƒeg
(){

835 i‡(
usbc‹e_busy
)

839 
	}
}

841 
	$usbc‹e_©èch
(
vîãx_hdl_t
 
c⁄n
){

843 
	}
}

845 
	$usbc‹e_dëach
(
vîãx_hdl_t
 
c⁄n
){

848 
	}
}

851 
	$usbc‹e_›í
(
dev_t
 *
devp
, 
Êag
, 
Ÿyp
, 
¸ed
 *
¸p
){

852 
vîãx_hdl_t
 
vhdl
;

853 
usbc‹e_ö°™˚_t
 *
so·
;

854 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_OPEN
;

856 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

858 
vhdl
 = 
	`dev_to_vhdl
(*
devp
);

859 
so·
 = (
usbc‹e_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
(
vhdl
);

860 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

863 
	}
}

866 
	$usbc‹e_˛o£
(
dev_t
 
dev
){

867 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_CLOSE
;

868 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

870 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

872 
	}
}

875 
	$usbc‹e_ªad
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
){

876  
EOPNOTSUPP
;

877 
	}
}

880 
	$usbc‹e_wrôe
(){

881  
EOPNOTSUPP
;

882 
	}
}

885 
	$dump_io˘l
–
n
){

886 
i
 = 
n
;

887 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_HELPER
;

889 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

890 
	`TRACE
–
˛ass
, 6, "io˘»vÆuê%x", 
i
);

892 if(–
i
 & 
_IOCTL_RMASK
) != 0)

893 
	`TRACE
–
˛ass
, 6, " -read", "");

894 if(–
i
 & 
_IOCTL_WMASK
) != 0)

895 
	`TRACE
–
˛ass
, 6, " -write", "");

898 
	`TRACE
–
˛ass
, 6, " -ch¨ = %c\n", 
	`_IOCTL_GETC
(
i
));

899 
	`TRACE
–
˛ass
, 6, " -num = %d\n", 
	`_IOCTL_GETN
–
i
));

900 
	`TRACE
–
˛ass
, 6, " -sizê%d\n", 
	`_IOCTL_GETS
–
i
));

902 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

904 
	}
}

909 
	$usbc‹e_io˘l
(
dev_t
 
dev
, 
cmd
, *
u¨g
, 
mode
, 
¸ed_t
 *
¸p
, *
rvÆp
){

910 
vîãx_hdl_t
 
vhdl
;

911 
usbc‹e_ö°™˚_t
 *
so·
;

912 *
ubuf
;

913 
size_t
 
size
;

914 
rc
;

915 
io˘l_ôem_t
 *
ôem
;

916 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_IOCTL
;

918 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

920 
vhdl
 = 
	`dev_to_vhdl
(
dev
);

922 
so·
 = (
usbc‹e_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
(
vhdl
);

926 
ôem
 = 
	`gë_io˘l_ôem
–
cmd
);

927 
	`TRACE
–
˛ass
, 12, "cmd = %x, '%s', cmd_èbÀ=%d", 
cmd
, 
ôem
->
°r
, item->cmd);

929 if–
ôem
->
cmd
 <= 0){

930 
rc
 = 
EINVAL
;

931 
d⁄e
;

935 
size
 = 
	`_IOCTL_GETS
–
cmd
);

936 if–
size
 > 0){

937 if–
u¨g
 =
NULL
){

938 
rc
 = 
EINVAL
;

939 
d⁄e
;

943 
ubuf
 = 
	`gc_mÆloc
–&
gc_li°
, 
size
);

944 if–
ubuf
 =
NULL
){

945 
	`TRACERR
–
˛ass
 | 
TRC_ERROR
, "Error in gc_malloc(),Éxit..", "");

946 
rc
 = 
ENOMEM
;

947 
d⁄e
;

951 if–(
cmd
 & 
_IOCTL_WMASK
) != 0){

952 
	`c›yö
–
u¨g
, 
ubuf
, 
size
);

957 
rc
 = 
ôem
->
	`func
–(*Ë
so·
, 
ubuf
);

959 if–
size
 > 0){

960 if–(
cmd
 & 
_IOCTL_RMASK
) != 0){

961 
	`c›yout
–
ubuf
, 
u¨g
, 
size
);

963 
	`gc_m¨k
–
ubuf
);

969 
d⁄e
:

970 
	`TRACE
–
˛ass
, 12, "exôög io˘l(ËíåyÖoöt,Ñc=%d", 
rc
);

971 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

973  *
rvÆp
 = 
rc
;

975 
	}
}

978 
	$usbc‹e_m≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
, 
off_t
 
off
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
){

980 
	}
}

983 
	$usbc‹e_unm≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
){

985 
	}
}

990 
	$¥o˚ss_evít_‰om_devi˚
–*
p_usbc‹e
, *
p_devi˚
, 
evít
, *
¨g0
, *
¨g1
, *
¨g2
){

991 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_POLL
;

992 
usbc‹e_ö°™˚_t
 *
usbc‹e
 = (usbc‹e_ö°™˚_à*Ë
p_usbc‹e
;

993 
devi˚_hódî_t
 *
devi˚
 = ( devi˚_hódî_à*Ë
p_devi˚
;

994 
msg_t
 
mesßge
;

995 
uöt32_t
 
p‹t_num
 = (uöt32_tË
¨g0
;

997 
mesßge
.
msg_id
 = 
evít
;

998 
mesßge
.
devi˚
 = device;

999 
mesßge
.
¨g0
 =árg0;

1000 
mesßge
.
¨g1
 =árg1;

1001 
mesßge
.
¨g2
 =árg2;

1003 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1004 
	`TRACE
–
˛ass
, 12, "devi˚ = '%s'", 
devi˚
->
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

1006 
	`MUTEX_LOCK
–&
usbc‹e
->
muãx
, -1);

1007 
	`queue_put
–&
msg_queue
, &
mesßge
);

1008 
	`MUTEX_UNLOCK
–&
usbc‹e
->
muãx
);

1011 
	`wakeup
–(
ˇddr_t
Ë
globÆ_so·
);

1013 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1016 
	}
}

1020 
	$¥o˚ss_evít_‰om_hcd
–*
p_usbc‹e
, *
p_hcd
, 
evít
, *
¨g0
, *
¨g1
, *
¨g2
){

1021 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_POLL
;

1022 
usbc‹e_ö°™˚_t
 *
usbc‹e
 = (usbc‹e_ö°™˚_à*Ë
p_usbc‹e
;

1023 
devi˚_hódî_t
 *
hcd
 = (devi˚_hódî_à*Ë
p_hcd
;

1024 
rc
;

1025 
r_¨g
, 
i
;

1026 
moduÀ_hódî_t
 *
usbhub
;

1029 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1030 
	`TRACE
–
˛ass
, 12, "hcd_«mê'%s'", 
hcd
->
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

1032  
i
 = 0; i < 
Æl_moduÀs_num
; i++){

1033 if–
moduÀs
[
i
]->
moduÀ_id
 =
USB_MOD_HUB
)

1034 
usbhub
 = 
moduÀs
[
i
];

1037  
evít
){

1040 
USB_HCD_GET_INSTANCE_ID
:

1041 
rc
 = 
usbhub
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
–
NULL
, 
USB_HCD_GET_INSTANCE_ID
, 
¨g0
, (*Ë&
r_¨g
, NULL);

1043 –
r_¨g
);

1047 
USB_HCD_ATTACHED_EVENT
:

1048 
rc
 = 
usbhub
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
–
NULL
, 
USB_HCD_ATTACHED_EVENT
, 
¨g0
, (*Ë&
r_¨g
, NULL);

1052 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1054 
	}
}

1056 
	$usbc‹e_ªgi°î_moduÀ
–*
¨g
){

1057 
moduÀ_hódî_t
 *
hódî
 = (moduÀ_hódî_à*Ë
¨g
;

1058 
i
, 
Æªady_⁄_li°
 = 0, 
rc
;

1059 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_HELPER
;

1061 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1062 
	`TRACE
–
˛ass
, 12, "Registering HCD module '%s' with ID='0x%x'",

1063 
hódî
->
sh‹t_des¸ùti⁄
, hódî->
moduÀ_id
);

1066 
Æªady_⁄_li°
 = 0;

1067  
i
 = 0; i < 
Æl_moduÀs_num
; i++){

1068 if–
moduÀs
[
i
]->
moduÀ_id
 =
hódî
->module_id){

1069 
Æªady_⁄_li°
 = 1;

1076 if–
Æªady_⁄_li°
 =0 && 
Æl_moduÀs_num
 < 
MAX_MODULES
){

1077 
	`TRACE
–
˛ass
, 12, "module infoÇot onÜist,ádding..", "");

1078 
moduÀs
[
Æl_moduÀs_num
] = (
moduÀ_hódî_t
 *Ë
	`gc_mÆloc
(

1079 &
gc_li°
, –
moduÀ_hódî_t
));

1080 
	`bc›y
–(*Ë
¨g
, 
moduÀs
[
Æl_moduÀs_num
],

1081 –
moduÀ_hódî_t
));

1082 
Æl_moduÀs_num
++;

1084 
	`TRACE
–
˛ass
, 12, "module infoálready onÜist,Öassing out..", "");

1087  
i
 = 0; i < 
Æl_moduÀs_num
; i++)

1088 
	`TRACE
–
˛ass
, 12, "moduÀÜi° %d = %x, %s", 
i
, 
moduÀs
[i]->
moduÀ_id
,

1089 
moduÀs
[
i
]->
sh‹t_des¸ùti⁄
);

1091 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1094 
	}
}

1099 
	$usbc‹e_uƒegi°î_moduÀ
–*
hcd_¨g
){

1100 
moduÀ_hódî_t
 *
hódî
 = (moduÀ_hódî_à*Ë
hcd_¨g
;

1101 
i
, 
j
, 
Æªady_⁄_li°
 = 0;

1102 
dñëe_ödex
, 
n
;

1103 
rc
;

1104 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_HELPER
;

1106 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1107 
	`TRACE
–
˛ass
, 12, "Unregistering HCD module '%s' with ID='0x%x'",

1108 
hódî
->
sh‹t_des¸ùti⁄
, hódî->
moduÀ_id
);

1112 
Æªady_⁄_li°
 = 0;

1113  
i
 = 0; i < 
Æl_moduÀs_num
; i++){

1114 if–
moduÀs
[
i
]->
moduÀ_id
 =
hódî
->module_id){

1115 
Æªady_⁄_li°
 = 1;

1116 
dñëe_ödex
 = 
i
;

1122 if–
Æªady_⁄_li°
 == 0 ){

1123 
rc
 = 0;

1124 
exô
;

1127 if–
Æl_moduÀs_num
 == 1)

1128 
dñëe_ödex
 = 0;

1131 
	`gc_m¨k
–(*Ë
moduÀs
[
dñëe_ödex
]);

1132  
i
 = 
dñëe_ödex
; i < (
Æl_moduÀs_num
-1); i++)

1133 
moduÀs
[
i
] = modules[i+1];

1135 
moduÀs
[
i
] = 
NULL
;

1136 if–
Æl_moduÀs_num
 > 0)

1137 
Æl_moduÀs_num
--;

1140 
rc
 = 0;

1142 
n
 = 0;

1143  
i
 = 0; i < 
usb_devi˚s_num
; i++){

1144 if–
usb_devi˚s
[
i
]->
moduÀ_hódî
->
moduÀ_id
 =
hódî
->module_id){

1145 
usb_devi˚s
[
i
] = 
NULL
;

1146 
n
++;

1150  
i
 = 0; i < 
usb_devi˚s_num
; i++){

1151 if–
usb_devi˚s
[
i
] =
NULL
){

1152  
j
 = 
i
; j < 
usb_devi˚s_num
; j++){

1153 if–
usb_devi˚s
[
j
] !
NULL
){

1154 
usb_devi˚s
[
i
] = usb_devi˚s[
j
];

1155 
usb_devi˚s
[
j
] = 
NULL
;

1161 
usb_devi˚s_num
 = usb_devi˚s_num - 
n
;

1163 
exô
:

1165  
i
 = 0; i < 
Æl_moduÀs_num
; i++)

1166 
	`TRACE
–
˛ass
, 12, "moduÀÜi° %d = %x, %s", 
i
, 
moduÀs
[i]->
moduÀ_id
,

1167 
moduÀs
[
i
]->
sh‹t_des¸ùti⁄
);

1169  
i
 = 0; i < 
usb_devi˚s_num
; i++)

1170 
	`TRACE
–
˛ass
, 12, "devi˚Üi° %d = %s", 
i
, 
usb_devi˚s
[i]->
h¨dw¨e_des¸ùti⁄
);

1172 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1173 –
rc
);

1175 
	}
}

1179 
	$usbc‹e_ªgi°î_devi˚
–*
¨g
){

1180 
devi˚_hódî_t
 *
hódî
 = (
moduÀ_hódî_t
 *Ë
¨g
;

1181 
i
, 
Æªady_⁄_li°
 = 0, 
rc
, 
œ°
;

1182 
ul⁄g_t
 
ktime
;

1185 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_HELPER
;

1187 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1188 
	`TRACE
–
˛ass
, 12, "Regi°îög devi˚ '%s'", 
hódî
->
h¨dw¨e_des¸ùti⁄
);

1190 if–
usb_devi˚s_num
 < 
MAX_USB_DEVICES
){

1191 
	`TRACE
–
˛ass
, 12, "Adding device..", "");

1192 
usb_devi˚s
[
usb_devi˚s_num
] = 
hódî
;

1193 
	`drv_gë∑rm
–
TIME
, &
ktime
);

1194 
hódî
->
ö°™˚_id
 = (
uöt32_t
Ë
	`kønd
–
ktime
, 65536);

1195 
hódî
->
moduÀ_hódî
->
mëhods
.
	`£t_åa˚_Àvñ
–(*Ëhódî->
so·
, (*Ë&
globÆ_åa˚_˛ass
);

1197 
usb_devi˚s_num
++;

1200  
i
 = 0; i < 
usb_devi˚s_num
; i++)

1201 
	`TRACE
–
˛ass
, 12, "devi˚Üi° %d = %s", 
i
, 
usb_devi˚s
[i]->
h¨dw¨e_des¸ùti⁄
);

1203 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1206 
	}
}

1211 
	$usbc‹e_uƒegi°î_devi˚
–*
¨g
){

1212 
devi˚_hódî_t
 *
hódî
 = (
moduÀ_hódî_t
 *Ë
¨g
;

1213 
i
, 
Æªady_⁄_li°
 = 0;

1214 
dñëe_ödex
;

1215 
rc
;

1216 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_HELPER
;

1218 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1219 
	`TRACE
–
˛ass
, 12, "Uƒegi°îög devi˚ '%s'", 
hódî
->
h¨dw¨e_des¸ùti⁄
);

1222  
i
 = 0; i < 
usb_devi˚s_num
; i++){

1223 if–
usb_devi˚s
[
i
]->
ö°™˚_id
 =
hódî
->instance_id){

1224 
dñëe_ödex
 = 
i
;

1230 if–
Æªady_⁄_li°
 == 0 ){

1231 
rc
 = 0;

1232 
exô
;

1235 if–
usb_devi˚s_num
 == 1)

1236 
dñëe_ödex
 = 0;

1239 
	`gc_m¨k
–(*Ë
usb_devi˚s
[
dñëe_ödex
]);

1240  
i
 = 
dñëe_ödex
; i < (
usb_devi˚s_num
-1); i++)

1241 
usb_devi˚s
[
i
] = usb_devices[i+1];

1243 
usb_devi˚s
[
i
] = 
NULL
;

1244 if–
usb_devi˚s_num
 > 0)

1245 
usb_devi˚s_num
--;

1247 
rc
 = 0;

1248 
exô
:

1250  
i
 = 0; i < 
usb_devi˚s_num
; i++)

1251 
	`TRACE
–
˛ass
, 12, "devi˚Üi° %d = %s", 
i
, 
usb_devi˚s
[i]->
h¨dw¨e_des¸ùti⁄
);

1253 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1254 –
rc
);

1256 
	}
}

1259 
	$usb_íumî©e
–
devi˚_hódî_t
 *
devi˚
, 
uöt32_t
 
p‹t_num
){

1260 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_HELPER
;

1261 
rc
 = 0;

1262 
usbhub_ö°™˚_t
 *
hub
 = ( usbhub_ö°™˚_à*Ë
devi˚
;

1263 
usb_pùe_t
 *
pùe
;

1264 
td_addr_t
 
tds
[
TD_ADDR_SIZE_VEC
];

1265 
usb_devi˚_des¸ùt‹_t
 
döfo
;

1268 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

1269 
hub
, 
USB_HUB_PORT_RESET
, (*Ë&
p‹t_num
, 
NULL
, NULL);

1273 
	`bzîo
–(*Ë&
tds
, –
td_addr_t
));

1276 
tds
[0].
d©a_size
 = 256;

1277 
tds
[1].
d©a_size
 = 256;

1278 
tds
[2].
d©a_size
 = -1;

1281 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

1282 
hub
, 
USB_HUB_ALLOC_PIPE
, (*Ë&
p‹t_num
, (*Ë&
pùe
, (*Ë&
tds
);

1284 if–
rc
 != 0){

1285 
	`TRACE
–
˛ass
, 10, "AllocPipe failed", "");

1286 
dr›_pùe_quô
;

1291 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

1292 
hub
, 
USB_GET_DEVICE_INFO8
, (*Ë
pùe
, (*Ë&
döfo
, 
NULL
);

1293 if–
rc
 != 0){

1294 
	`TRACE
–
˛ass
, 10, "GetDeviceInfo8 failed", "");

1295 
dr›_pùe_quô
;

1301 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

1302 
hub
, 
USB_HUB_SET_ADDRESS
, (*Ë&
p‹t_num
, (*Ë
pùe
, 
NULL
);

1303 if–
rc
 != 0){

1304 
	`TRACE
–
˛ass
, 10, "SetAddress failed", "");

1305 
dr›_pùe_quô
;

1309 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

1310 
hub
, 
USB_GET_DESCRIPTOR
, (*Ë
pùe
, (*Ë&
döfo
, 
NULL
);

1311 if–
rc
 != 0){

1312 
	`TRACE
–
˛ass
, 10, "GetDescriptor failed", "");

1313 
dr›_pùe_quô
;

1318 
	`TRACE
–
˛ass
, 10, "deviceÑev=%04x cls=%02x sub=%02xÖroto=%02x size=%02x\n"

1319 , 
döfo
.
bcdUSB
, döfo.
bDevi˚Cœss
, döfo.
bDevi˚SubCœss


1320 , 
döfo
.
bDevi˚PrŸocﬁ
, döfo.
bMaxPackëSize0
);

1322 i‡(
döfo
.
bMaxPackëSize0
 < 8 || dinfo.bMaxPacketSize0 > 64){

1323 
	`TRACE
–
˛ass
, 10, "weird shit!!", "");

1326 
dr›_pùe_quô
:

1327 
rc
 = 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
mëhods
.
	`¥o˚ss_evít_‰om_usbc‹e
(

1328 
hub
, 
USB_HUB_DESTROY_PIPE
, (*Ë
pùe
, 
NULL
, NULL);

1331 
	`TRACE
–
˛ass
, 10, "goood!!Öipes created withÇo crashes!!", "");

1332 –
rc
);

1333 
	}
}

1335 
	$run_evít
–
usbc‹e_ö°™˚_t
 *
usbc‹e
, 
evít
, 
devi˚_hódî_t
 *
devi˚
, *
¨g0
, *
¨g1
, *
¨g2
){

1336 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_HELPER
;

1337 
rc
 = 0;

1338 
uöt32_t
 
p‹äum
 = (uöt32_tË
¨g0
;

1339 
usbhub_ö°™˚_t
 *
hub
;

1340 
usb_pùe_t
 *
pùe
;

1341 
td_addr_t
 
tds
[
TD_ADDR_SIZE_VEC
];

1342 
usb_devi˚_des¸ùt‹_t
 
döfo
;

1345 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1346 
	`TRACE
–
˛ass
, 12, "devi˚ = '%s'", 
devi˚
->
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

1348  
evít
){

1349 
USB_EVENT_PORT_CONNECT
:

1350 
p‹äum
 = (
uöt32_t
 ) 
¨g0
;

1351 
	`TRACE
–
˛ass
, 12, "event = USB_EVENT_PORT_CONNECT from '%s',Öortnum=%d",

1352 
devi˚
->
moduÀ_hódî
->
sh‹t_des¸ùti⁄
, 
p‹äum
);

1358 
USB_EVENT_PORT_DISCONNECT
:

1359 
p‹äum
 = (
uöt32_t
 ) 
¨g0
;

1360 
	`TRACE
–
˛ass
, 12, "event = USB_EVENT_PORT_DISCONNECT from '%s',Öortnum=%d",

1361 
devi˚
->
moduÀ_hódî
->
sh‹t_des¸ùti⁄
, 
p‹äum
);

1364 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1365 –
rc
);

1366 
	}
}

1368 
	$usbc‹e_maö_thªad
–*
¨g0
, *
¨g1
, *
¨g2
, *
¨g3
){

1369 
uöt64_t
 
˛ass
 = 
TRC_MOD_CORE
 | 
TRC_HELPER
;

1370 
usbc‹e_ö°™˚_t
 *
usbc‹e
 = ( usbc‹e_ö°™˚_à*Ë
¨g0
;

1371 
i
, 
rc
;

1372 
msg_t
 
mesßge
;

1373 
exô
 = 0;

1375 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1384 
	`TRACE
–
˛ass
, 12, "waiting forÉvent", "");

1385 
	`¶ìp
–(
ˇddr_t
Ë
¨g0
, 
PZERO
);

1386 
	`TRACE
–
˛ass
, 12, "waking up, checking queue", "");

1390 
	`MUTEX_LOCK
–&
usbc‹e
->
muãx
, -1);

1391 
rc
 = 
	`queue_gë
–&
msg_queue
, &
mesßge
);

1392 
	`MUTEX_UNLOCK
–&
usbc‹e
->
muãx
);

1394 
	`TRACE
–
˛ass
, 12, "evít_id = %d", 
mesßge
.
msg_id
);

1395 if–
rc
 == 0){

1396 if–
mesßge
.
msg_id
 =
USB_EVENT_EXIT_MAIN_THREAD
){

1397 
	`TRACE
–
˛ass
, 12, "event = USB_EVENT_EXIT_MAIN_THREAD,Énd", "");

1398 
	`drv_thªad_exô
();

1399 
usbc‹e_maö_thªad_exô
;

1401 if–
mesßge
.
msg_id
 =
USB_EVENT_PORT_CONNECT
 || mesßge.msg_id =
USB_EVENT_PORT_DISCONNECT
){

1402 
	`TRACE
–
˛ass
, 12, "p‹à%d", (
uöt32_t
)(
mesßge
.
¨g0
) );

1404 
rc
 = 
	`run_evít
–
usbc‹e
, 
mesßge
.
msg_id
, mesßge.
devi˚
, mesßge.
¨g0
, mesßge.
¨g1
, mesßge.
¨g2
);

1408 } 
msg_queue
.
√Àms
 > 0);

1419 
usbc‹e_maö_thªad_exô
:

1420 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1421 
	`drv_thªad_exô
();

1422 
	}
}

	@usbd.c

26 #i‚de‡
_IRIX_


27 
	tuch¨_t
;

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

32 
	~<î∫o.h
>

33 
	~<f˙é.h
>

34 
	~<time.h
>

35 
	~<˘y≥.h
>

36 
	~<°rög.h
>

37 
	~<sys/io˘l.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<sys/time.h
>

41 
	~"usbio˘l.h
"

42 
	~"kutûs.c
"

43 
	~"kv¨r.h
"

45 
	gdevi˚_fd
 = -1;

46 
	gvîbo£_Êag
 = 0;

47 
FILE
 *
	gÊog
;

49 
	#USBLOG
 "/v¨/adm/usblogs"

	)

50 #ifde‡
_EMUIOCTL_


51 
	gÊag
 = 0;

55 
›í_devi˚
–*
p
);

56 
˛o£_devi˚
–*
p
);

58 
	$›í_devi˚
–*
p
){

60 #ifde‡
_EMUIOCTL_


61 
devi˚_fd
 = 999;

63 
devi˚_fd
 = 
	`›í
–(*Ë
p
, 
O_RDWR
);

64 if–
devi˚_fd
 < 0){

65 
	`≥º‹
("error opening device");

66 
	`exô
( 1);

70 if–
vîbo£_Êag
 != 0)

71 
	`¥ötf
("Device opened successfully\n");

72 –
devi˚_fd
);

73 
	}
}

76 
	$˛o£_devi˚
(*
p
){

77 #ifde‡
_EMUIOCTL_


78 
devi˚_fd
 = -1;

80 if–
devi˚_fd
 < 0){

84 
	`˛o£
–
devi˚_fd
);

85 
devi˚_fd
 = -1;

87 if–
vîbo£_Êag
 != 0)

88 
	`¥ötf
("Device closed successfully\n");

90 
	}
}

92 
	$usb_sus¸ibe_evíts
(){

93 
uöt32_t
 
evíts
 = (uöt32_tË
USB_EVENT_PORT_CONNECT
 | 
USB_EVENT_PORT_DISCONNECT
;

94 
rc
 = 0;

96 #i‚de‡
_EMUIOCTL_


97 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_SUSCRIBE_EVENTS
, &
evíts
);

99 
rc
 = 0;

102 if–
vîbo£_Êag
 != 0)

103 
	`¥ötf
("r¯%d, io˘»IOCTL_USB_SUSCRIBE_EVENTSÉxecuãd.\n", 
rc
);

104 if–
rc
 != 0){

105 
	`exô
(-1);

108 –
rc
);

109 
	}
}

111 
	$usb_pﬁl_°¨t
(){

112 
rc
;

113 #i‚de‡
_EMUIOCTL_


114 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_POLL_START
, 
NULL
);

116 
rc
 = 0;

118 if–
vîbo£_Êag
 != 0)

119 
	`¥ötf
("r¯%d, io˘»IOCTL_USB_POLL_STARTÉxecuãd.\n", 
rc
);

121 if–
rc
 != 0){

122 
	`exô
(-1);

125 –
rc
);

126 
	}
}

129 
	$usb_pﬁl_íd
(){

130 
rc
;

131 #i‚de‡
_EMUIOCTL_


132 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_POLL_END
, 
NULL
);

134 
rc
 = 0;

136 if–
vîbo£_Êag
 != 0)

137 
	`¥ötf
("r¯%d, io˘»IOCTL_USB_POLL_ENDÉxecuãd.\n", 
rc
);

138 if–
rc
 != 0){

139 
	`exô
(-1);

142 –
rc
);

143 
	}
}

145 
	$usb_gë_≥ndög_evíts_num
(){

146 
n
, 
rc
;

147 #i‚de‡
_EMUIOCTL_


148 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_POLL_GET_EVENTS_NUM
, &
n
 );

150 
rc
 = 0;

151 
n
 = 2;

153 if–
vîbo£_Êag
 != 0)

154 
	`¥ötf
("r¯%d, io˘»IOCTL_USB_POLL_GET_EVENTS_NUMÉxecuãd,Çum o‡evít†%d.\n", 
rc
, 
n
);

155 if–
rc
 != 0){

156 
	`exô
(-1);

159 –
n
);

160 
	}
}

164 
	$usb_gë_√xt_evít
(){

165 
rc
;

166 
usb_evít_t
 
usb_evít
;

168 #i‚de‡
_EMUIOCTL_


169 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_POLL_GET_NEXT_EVENT
, &
usb_evít
 );

171 
rc
 = 0;

172 
Êag
 = !flag;

174 if–
Êag
 == 0){

175 
usb_evít
.
evít_id
 = 
USB_EVENT_PORT_CONNECT
;

176 
usb_evít
.
∑øm
 = 1;

178 
usb_evít
.
evít_id
 = 
USB_EVENT_PORT_DISCONNECT
;

179 
usb_evít
.
∑øm
 = 2;

182 if–
vîbo£_Êag
 != 0)

183 
	`¥ötf
("r¯%d, io˘»IOCTL_USB_POLL_GET_NEXT_EVENTÉxecuãd,Évíàid = %d.\n", 
rc
, 
usb_evít
.
evít_id
);

185 if–
rc
 != 0){

186 
	`exô
(-1);

190 if–
usb_evít
.
evít_id
 =
USB_EVENT_PORT_CONNECT
)

191 
	`Ârötf
–
Êog
, "I:P‹à%d c⁄√˘ed\n", 
usb_evít
.
∑øm
);

192 i‡–
usb_evít
.
evít_id
 =
USB_EVENT_PORT_DISCONNECT
)

193 
	`Ârötf
–
Êog
, "W:P‹à%d disc⁄√˘ed\n", 
usb_evít
.
∑øm
);

195 
	`fÊush
–
Êog
);

197 –
rc
);

198 
	}
}

201 
	$maö
–
¨gc
, **
¨gv
){

202 
i
, 
evít_fd
;

203 
num_evíts
;

204 
quô
 = 0;

205 
°dö_fd
 = 
	`fûío
–
°dö
);

206 
fd_£t
 
ö_fds
;

207 
timevÆ
 
tv
;

208 
îr‹
 = 1;

211 if–
¨gc
 == 1)

212 
îr‹
 = 0;

214 if–
¨gc
 == 2){

215 if–
	`°rcmp
–
¨gv
[1], "-v") == 0){

216 
vîbo£_Êag
 = 1;

217 
îr‹
 = 0;

221 if–
îr‹
 != 0){

222 
	`¥ötf
("Usage: usbd [-v]\n");

223 
	`exô
( -1);

226 
	`›í_devi˚
( "/hw/usb/usbdaemon");

227 
Êog
 = 
	`f›í
–
USBLOG
, "a");

229 if–
Êog
 =
NULL
){

230 
	`≥º‹
("CouldÇot open file:");

231 
	`exô
( -1);

234 
	`usb_sus¸ibe_evíts
();

235 
	`usb_pﬁl_°¨t
();

238 
num_evíts
 = 
	`usb_gë_≥ndög_evíts_num
();

239  
i
 = 0; i < 
num_evíts
; i++){

240 
	`usb_gë_√xt_evít
();

243 
	`FD_ZERO
–&
ö_fds
);

244 
	`FD_SET
–
°dö_fd
, &
ö_fds
);

245 
	`FD_SET
–
devi˚_fd
, &
ö_fds
);

246 
tv
.
tv_u£c
 = 0;

247 
tv
.
tv_£c
 = 1;

249 #i‚de‡
_EMUIOCTL_


251 
evít_fd
 = 
	`£À˘
–
devi˚_fd
 + 1, &
ö_fds
, 0, 0, &
tv
);

252 if–
	`FD_ISSET
–
°dö_fd
, &
ö_fds
) ){

253 
quô
 = 1;

255 }if–
	`FD_ISSET
–
devi˚_fd
, &
ö_fds
) ){

257 }if–
evít_fd
 == 0){

258 if–
vîbo£_Êag
 != 0)

259 
	`¥ötf
("Åimeout\n");

262 
	`¶ìp
(2);

264 } 
quô
 == 0);

266 
	`usb_pﬁl_íd
();

268 
	`˛o£_devi˚
–
NULL
);

269 
	`f˛o£
–
Êog
);

271 
	}
}

	@usbehci.c

52 
	~<sys/ty≥s.h
>

53 
	~<sys/˝u.h
>

54 
	~<sys/sy°m.h
>

55 
	~<sys/cmn_îr.h
>

56 
	~<sys/î∫o.h
>

57 
	~<sys/buf.h
>

58 
	~<sys/io˘l.h
>

59 
	~<sys/¸ed.h
>

60 
	~<ksys/ddm≠.h
>

61 
	~<sys/pﬁl.h
>

62 
	~<sys/övít.h
>

63 
	~<sys/debug.h
>

64 
	~<sys/sbd.h
>

65 
	~<sys/kmem.h
>

66 
	~<sys/edt.h
>

67 
	~<sys/dmam≠.h
>

68 
	~<sys/hwgøph.h
>

69 
	~<sys/iobus.h
>

70 
	~<sys/iogøph.h
>

71 
	~<sys/∑øm.h
>

72 
	~<sys/pio.h
>

73 
	~<sys/£ma.h
>

74 
	~<sys/ddi.h
>

75 
	~<sys/î∫o.h
>

76 
	~<sys/ksynch.h
>

77 
	~<sys/©omic_›s.h
>

78 
	~<sys/PCI/PCI_defs.h
>

79 
	~<sys/PCI/pciio.h
>

80 
	~<sys/cmn_îr.h
>

81 
	~<sys/mlﬂd.h
>

82 
	~<°rög.h
>

83 
	~<˘y≥.h
>

90 
	~"c⁄fig.h
"

91 
	~"usbio˘l.h
"

92 
	~"usb.h
"

93 
	~"usbhc.h
"

100 
USB_åa˚_˛ass_t
 
	gglobÆ_åa˚_˛ass
 = { 12, 
TRC_ALL
};

108 
	~"kmaddr.c
"

109 
	~"åa˚.c
"

110 
	~"kutûs.c
"

111 
	~"dumphex.c
"

112 
	~"li°.c
"

113 
	~"gc.c
"

114 
	~"dma.c
"

115 
	~"queue.c
"

117 
	~"ehcúeg.h
"

125 
uöt32_t
 
	mdevi˚_id
;

126 
uch¨_t
 *
	mc⁄åﬁÀr_des¸ùti⁄
;

127 }
	gehci_des¸ùti⁄s
[]={

160 0 ,
NULL


163 
	#EHCI_CF_VENDOR_ID
 0x00

	)

164 
	#EHCI_CF_DEVICE_ID
 0x02

	)

165 
	#EHCI_CF_COMMAND
 0x04

	)

166 
	#EHCI_CF_STATUS
 0x06

	)

167 
	#EHCI_CF_REVISION_ID
 0x08

	)

168 
	#EHCI_CF_CLASS_CODE
 0x09

	)

169 
	#EHCI_CF_CACHE_LINE_SIZE
 0x0c

	)

170 
	#EHCI_CF_LATENCY_TIME
 0x0d

	)

171 
	#EHCI_CF_HEADER_TYPE
 0x0e

	)

172 
	#EHCI_CF_BIST
 0x0f

	)

173 
	#EHCI_CF_MMAP_IO_BASE_ADDR
 0x10

	)

174 
	#EHCI_CF_CIS_BASE_ADDR
 0x14

	)

175 
	#EHCI_CF_CARDBUS_CIS_PTR
 0x28

	)

176 
	#EHCI_CF_SSID
 0x2c

	)

177 
	#EHCI_CF_PWR_MGMT_CAPS
 0x34

	)

178 
	#EHCI_CF_INTERRUPT_LINE
 0x3c

	)

179 
	#EHCI_CF_INTERRUPT_PIN
 0x3d

	)

180 
	#EHCI_NUM_CONF_REGISTERS
 0x85

	)

181 
	#EHCI_NUM_IO_REGISTERS
 0x64

	)

190 
uöt32_t
 
	m√xt
;

191 
uöt32_t
 
	möfo1
;

192 
uöt32_t
 
	möfo2
;

193 
uöt32_t
 
	mcuºít
;

195 
uöt32_t
 
	mqtd_√xt
;

196 
uöt32_t
 
	mÆt_√xt
;

197 
uöt32_t
 
	mtokí
;

198 
uöt32_t
 
	mbuf
[5];

199 } 
	tehci_qh_t
;

201 
	#QH_CONTROL
 (1 << 27)

	)

202 
	#QH_MAXPACKET_SHIFT
 16

	)

203 
	#QH_MAXPACKET_MASK
 (0x7f‡<< 
QH_MAXPACKET_SHIFT
)

	)

204 
	#QH_HEAD
 (1 << 15)

	)

205 
	#QH_TOGGLECONTROL
 (1 << 14)

	)

206 
	#QH_SPEED_SHIFT
 12

	)

207 
	#QH_SPEED_MASK
 (0x3 << 
QH_SPEED_SHIFT
)

	)

208 
	#QH_EP_SHIFT
 8

	)

209 
	#QH_EP_MASK
 (0x‡<< 
QH_EP_SHIFT
)

	)

210 
	#QH_DEVADDR_SHIFT
 0

	)

211 
	#QH_DEVADDR_MASK
 (0x7‡<< 
QH_DEVADDR_SHIFT
)

	)

213 
	#QH_SMASK_SHIFT
 0

	)

214 
	#QH_SMASK_MASK
 (0xf‡<< 
QH_SMASK_SHIFT
)

	)

215 
	#QH_CMASK_SHIFT
 8

	)

216 
	#QH_CMASK_MASK
 (0xf‡<< 
QH_CMASK_SHIFT
)

	)

217 
	#QH_HUBADDR_SHIFT
 16

	)

218 
	#QH_HUBADDR_MASK
 (0x7‡<< 
QH_HUBADDR_SHIFT
)

	)

219 
	#QH_HUBPORT_SHIFT
 23

	)

220 
	#QH_HUBPORT_MASK
 (0x7‡<< 
QH_HUBPORT_SHIFT
)

	)

221 
	#QH_MULT_SHIFT
 30

	)

222 
	#QH_MULT_MASK
 (0x3 << 
QH_MULT_SHIFT
)

	)

224 
	#EHCI_PTR_BITS
 0x001F

	)

225 
	#EHCI_PTR_TERM
 0x0001

	)

226 
	#EHCI_PTR_QH
 0x0002

	)

229 
	#EHCI_QTD_ALIGN
 32

	)

232 
uöt32_t
 
	mqtd_√xt
;

233 
uöt32_t
 
	mÆt_√xt
;

234 
uöt32_t
 
	mtokí
;

235 
uöt32_t
 
	mbuf
[5];

237 }
	tehci_qtd_t
;

239 
	#QTD_TOGGLE
 (1 << 31)

	)

240 
	#QTD_LENGTH_SHIFT
 16

	)

241 
	#QTD_LENGTH_MASK
 (0x7ff‡<< 
QTD_LENGTH_SHIFT
)

	)

242 
	#QTD_CERR_SHIFT
 10

	)

243 
	#QTD_CERR_MASK
 (0x3 << 
QTD_CERR_SHIFT
)

	)

244 
	#QTD_IOC
 (1 << 15)

	)

245 
	#QTD_PID_OUT
 (0x0 << 8)

	)

246 
	#QTD_PID_IN
 (0x1 << 8)

	)

247 
	#QTD_PID_SETUP
 (0x2 << 8)

	)

248 
	#QTD_STS_ACTIVE
 (1 << 7)

	)

249 
	#QTD_STS_HALT
 (1 << 6)

	)

250 
	#QTD_STS_DBE
 (1 << 5)

	)

251 
	#QTD_STS_BABBLE
 (1 << 4)

	)

252 
	#QTD_STS_XACT
 (1 << 3)

	)

253 
	#QTD_STS_MMF
 (1 << 2)

	)

254 
	#QTD_STS_STS
 (1 << 1)

	)

255 
	#QTD_STS_PING
 (1 << 0)

	)

257 
	#ehci_ex∂í
(
Àn
Ë((÷íË<< 
QTD_LENGTH_SHIFT
Ë& 
QTD_LENGTH_MASK
)

	)

259 
	#ehci_maxîr
(
îr
Ë((”ºË<< 
QTD_CERR_SHIFT
Ë& 
QTD_CERR_MASK
)

	)

263 
uöt32_t
 
	mlöks
[1024];

264 } 
	tehci_‰amñi°_t
;

273 
devi˚_hódî_t
 
	mdevi˚_hódî
;

274 
vîãx_hdl_t
 
	mps_c⁄n
;

275 
vîãx_hdl_t
 
	mps_vhdl
;

276 
vîãx_hdl_t
 
	mps_ch¨v
;

277 
USB_func_t
 
	mps_evít_func
;

278 
uch¨_t
 *
	mps_cfg
;

279 
uch¨_t
 *
	mps_ªgs
;

280 
uch¨_t
 *
	mpci_io_ˇps
;

281 
pciio_piom≠_t
 
	mps_cm≠
;

282 
pciio_piom≠_t
 
	mps_rm≠
;

283 
	mps_s°
;

284 
	#usbehci_SST_RX_READY
 (0x0001)

	)

285 
	#usbehci_SST_TX_READY
 (0x0002)

	)

286 
	#usbehci_SST_ERROR
 (0x0004)

	)

287 
	#usbehci_SST_INUSE
 (0x8000)

	)

288 
pciio_öå_t
 
	mps_öå
;

289 
pciio_dmam≠_t
 
	mps_˘l_dmam≠
;

290 
pciio_dmam≠_t
 
	mps_°r_dmam≠
;

291 
pﬁlhód
 *
	mps_pﬁlhód
;

292 
uöt16_t
 
	msc_offs
;

293 
	mps_blocks
;

294 
uöt32_t
 
	mps_evít
;

295 
uöt8_t
 
	mps_n›‹t
;

296 
uöt32_t
 
	mps_eöås
;

297 
pciio_öfo_t
 
	mps_pciio_öfo_devi˚
;

298 
usbc‹e_ö°™˚_t
 *
	musbc‹e
;

299 
usbhub_ö°™˚_t
 *
	mroŸhub
;

300 
ehci_qh_t
 *
	masync_li°_addr
;

301 
ehci_‰amñi°_t
 *
	m≥riodic_li°_ba£
;

302 }
	tusbehci_ö°™˚_t
;

309 
	gusbehci_devÊag
 = 
D_MP
;

310 *
	gusbehci_mvîsi⁄
 = 
M_VERSION
;

311 
	gusbehci_öu£
 = 0;

312 
gc_li°_t
 
	ggc_li°
;

313 
usbehci_ö°™˚_t
 *
	gglobÆ_so·
 = 
NULL
;

314 
dma_li°_t
 
	gdma_li°
;

321 
usbc‹e_ö°™˚_t
 *
gë_usbc‹e
();

328 
ehci_ª£t
–*
hcd
);

329 
ehci_°¨t
–*
hcd
);

330 
ehci_öô
–*
hcd
);

331 
ehci_°›
–*
hcd
);

332 
ehci_shutdown
–*
hcd
);

333 
ehci_su•íd
–*
hcd
);

334 
ehci_ªsume
–*
hcd
);

335 
ehci_°©us
–*
hcd
);

336 
ehci_‰ì_pùe
–*
hcd
, 
usb_pùe
 *
pùe
);

337 
usb_pùe_t
 *
ehci_Æloc_c⁄åﬁ_pùe
–*
hcd
, 
tdnum
, 
td_addr_t
 *
td_addr
);

338 
usb_pùe_t
 *
ehci_Æloc_bulk_pùe
–*
hcd
, usb_pùe_à*
pùe
, 
usb_ídpoöt_des¸ùt‹
 *
des¸ùt‹
);

339 
ehci_£nd_c⁄åﬁ
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
cmd
, 
cmdsize
, *
d©a
, 
d©asize
);

340 
ehci_£t_addªss
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
cmd
, 
cmdsize
, *
d©a
, 
d©asize
);

341 
ehci_usb_£nd_bulk
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
d©a
, 
d©asize
);

342 
ehci_Æloc_öå_pùe
–*
hcd
, 
usb_pùe
 *
pùe
, 
usb_ídpoöt_des¸ùt‹
 *
des¸ùt‹
);

343 
ehci_usb_pﬁl_öå
–*
hcd
, 
usb_pùe
 *
pùe
, *
d©a
);

344 
ehci_io˘l
–*
hcd
, 
cmd
, *
u¨g
);

345 
ehci_£t_åa˚_Àvñ
–*
hcd
, *
åa˚_Àvñ
);

346 
ehci_hub_öfo
–*
hcd
, *
öfo
);

347 
ehci_p‹t_a˘i⁄
–*
hcd
, 
p‹t
, 
a˘i⁄
);

348 
uöt32_t
 
ehci_gë_p‹t
–*
hcd
, 
p‹t
);

349 
ehci_£t_roŸhub
(*
hcd
, *
roŸhub
);

350 
ehci_p‹t_ª£t
–
usbehci_ö°™˚_t
 *
so·
, 
p‹t
);

351 
ehci_£t_debug_vÆues
–*
hcd
, *
pv
);

359 
hcd_mëhods_t
 
	gehci_mëhods
={

360 
ehci_ª£t
,

361 
ehci_°¨t
,

362 
ehci_öô
,

363 
ehci_°›
,

364 
ehci_shutdown
,

365 
ehci_su•íd
,

366 
ehci_ªsume
,

367 
ehci_°©us
,

368 
ehci_‰ì_pùe
,

369 
ehci_Æloc_c⁄åﬁ_pùe
,

370 
ehci_Æloc_bulk_pùe
,

371 
ehci_£nd_c⁄åﬁ
,

372 
ehci_£t_addªss
,

373 
ehci_usb_£nd_bulk
,

374 
ehci_Æloc_öå_pùe
,

375 
ehci_usb_pﬁl_öå
,

376 
ehci_io˘l
,

377 
ehci_£t_åa˚_Àvñ
,

378 
ehci_hub_öfo
,

379 
ehci_p‹t_a˘i⁄
,

380 
ehci_gë_p‹t
,

381 
ehci_£t_roŸhub
,

382 
ehci_£t_debug_vÆues
,

387 
ehci_¥o˚ss_evít
–*
‹igö
, *
de°
, 
evít_id
, *
¨g
);

388 
ehci_¥o˚ss_evít_‰om_usbc‹e
–*
de°
, 
evít_id
, *
¨g0
, *
¨g1
, *
¨g2
);

390 
moduÀ_hódî_t
 
	gehci_hódî
={

391 
USB_MOD_EHCI
,

395 
USB_DRIVER_IS_HCD
,

397 
ehci_£t_åa˚_Àvñ
,

398 
ehci_¥o˚ss_evít
,

399 
ehci_¥o˚ss_evít_‰om_usbc‹e
,

411 
usbehci_öô
();

412 
usbehci_u∆ﬂd
();

413 
usbehci_ªg
();

414 
usbehci_uƒeg
();

415 
usbehci_©èch
(
vîãx_hdl_t
 
c⁄n
);

416 
usbehci_dëach
(
vîãx_hdl_t
 
c⁄n
);

417 
pciio_ôî_f
 
	gusbehci_ªlﬂdme
;

418 
pciio_ôî_f
 
	gusbehci_u∆ﬂdme
;

419 
usbehci_›í
(
dev_t
 *
devp
, 
oÊag
, 
Ÿyp
, 
¸ed_t
 *
¸p
);

420 
usbehci_˛o£
(
dev_t
 
dev
, 
oÊag
, 
Ÿyp
, 
¸ed_t
 *
¸p
);

421 
usbehci_io˘l
(
dev_t
 
dev
, 
cmd
, *
¨g
, 
mode
, 
¸ed_t
 *
¸p
, *
rvÆp
);

422 
usbehci_ªad
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
);

423 
usbehci_wrôe
(
dev_t
 
dev
, 
uio_t
 * 
ui›
,
¸ed_t
 *
¸p
);

424 
usbehci_°øãgy
(
buf
 *
bp
);

425 
usbehci_pﬁl
(
dev_t
 
dev
, 
evíts
, 
™yyë
,

426 *
ªvít•
, 
pﬁlhód
 **
phµ
, *
gíp
);

427 
usbehci_m≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
, 
off_t
 
off
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
);

428 
usbehci_unm≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
);

429 
usbehci_dma_öå
(
öå_¨g_t
 
¨g
);

430 
îr‹_h™dÀr_f
 
	gusbehci_îr‹_h™dÀr
;

431 
usbehci_hÆt
();

432 
usbehci_size
(
dev_t
 
dev
);

433 
usbehci_¥öt
(
dev_t
 
dev
, *
°r
);

451 
usbc‹e_ö°™˚_t
 *
	$gë_usbc‹e
(){

452 
vîãx_hdl_t
 
vhdl
;

453 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

454 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

456 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

459 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
GRAPH_VERTEX_NONE
, "/usb/usbc‹e", &
vhdl
)){

460 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
,

462 (
NULL
);

465 
usbc‹e
 = (
usbc‹e_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
–
vhdl
);

466 if–
usbc‹e
 =
NULL
){

467 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
,

472 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

474 –
usbc‹e
);

475 
	}
}

477 
	$ehci_p‹t_ª£t
–
usbehci_ö°™˚_t
 *
so·
, 
p‹t
){

478 
rc
, 
i
, 
j
, 
ª£t
 = 0;

479 
uöt32_t
 
v
;

480 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

482 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "SèπögÖ‹à%dÑe£t", 
p‹t
);

485 
v
 = 
	`EOREAD4
(
so·
, 
	`EHCI_PORTSC
(
p‹t
)Ë& ~
EHCI_PS_CSC
;

487  
j
 = 0; j < 2; j++){

489 
v
 |
EHCI_PS_PR
;

492 
v
 &~
EHCI_PS_PE
;

494 
	`EOWRITE4
–
so·
, 
	`EHCI_PORTSC
(
p‹t
), 
v
);

495 
	`USECDELAY
(50000);

498 
v
 &~
EHCI_PS_PR
;

499 
	`EOWRITE4
–
so·
, 
	`EHCI_PORTSC
(
p‹t
), 
v
 );

500 
	`USECDELAY
(10000);

502  
i
 = 0; i < 100; i++){

504 
v
 = 
	`EOREAD4
–
so·
, 
	`EHCI_PORTSC
(
p‹t
)) ;

505 if––
v
 & 
EHCI_PS_PR
) == 0){

506 
	`TRACE
–
˛ass
, 12, "portÑeset complete", "");

507 
ª£t
 = 1;

510 
	`USECDELAY
(1000);

513 if–
ª£t
 == 0){

514 
	`TRACE
–
˛ass
, 12, "port didn'tÑeset!!! EHCI_PS_PR stillÉnable... quitting withÑc=-1", "");

518 
	`USECDELAY
(2000);

519 
v
 = 
	`EOREAD4
–
so·
, 
	`EHCI_PORTSC
(
p‹t
)) ;

522 if–!–
v
 & 
EHCI_PS_PE
)){

523 if–
j
 != 0){

526 
	`TRACE
–
˛ass
, 12, "Notá high speed device, give up ownership here", "");

527 
v
 = 
	`EOREAD4
–
so·
, 
	`EHCI_PORTSC
(
p‹t
)Ë& ~
EHCI_PS_CLEAR
;

528 
	`EOWRITE4
(
so·
, 
	`EHCI_PORTSC
(
p‹t
), 
v
 | 
EHCI_PS_PO
);

529 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

533 
	`TRACE
–
˛ass
, 12, "High speed device!! YES!!", "");

534 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

541 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

545 
	}
}

554 
	$ehci_ª£t
–*
hcd
){

555 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

556 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

559 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

560 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

561 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

564 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

566 
	}
}

568 
	$ehci_°¨t
–*
hcd
){

569 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

570 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

573 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

574 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

575 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

578 
	`TRACE
–
˛ass
, 12, "enabling interrupts", "");

580 
so·
->
ps_eöås
 = (
EHCI_STS_PCD
 | 
EHCI_STS_ERRINT
 | 
EHCI_STS_INT
);

581 
	`EOWRITE4
(
so·
, 
EHCI_USBINTR
, so·->
ps_eöås
);

583 
	`TRACE
–
˛ass
, 10 | 
TRC_START_END
, "end", "");

585 
	}
}

587 
	$ehci_h¸e£t
–*
hcd
){

588 
uöt32_t
 
h¸
;

589 
i
;

590 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

591 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

594 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

595 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

596 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

598 
	`EOWRITE4
(
so·
, 
EHCI_USBCMD
, 0);

599 
i
 = 0; i < 100; i++) {

600 
	`USECDELAY
(10000);

601 
h¸
 = 
	`EOREAD4
(
so·
, 
EHCI_USBSTS
Ë& 
EHCI_STS_HCH
;

602 i‡(
h¸
){

603 
	`TRACE
–
˛ass
, 10, "Host controller halted (HCH = 1)", "");

604 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

609 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

611 
	}
}

614 
	$ehci_öô
–*
hcd
){

615 
uöt32_t
 
vîsi⁄
;

616 
uöt32_t
 
•¨ams
;

617 
uöt32_t
 
˝¨ams
;

618 
uöt16_t
 
i
;

619 
uöt32_t
 
cmd
;

620 
h¸
;

621 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

622 
dma_node_t
 *
dma_node_‰amñi°
;

623 
dma_node_t
 *
dma_node_öå_qh
;

624 
dma_node_t
 *
dma_node_async_qh
;

625 
ehci_‰amñi°_t
 *
Ê
;

626 
ehci_qh_t
 *
öå_qh
;

627 
ehci_qh_t
 *
async_qh
;

629 
uöt64_t
 
˛ass
 = 
TRC_ATTACH
 | 
TRC_MOD_EHCI
;

632 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

633 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

634 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

636 
so·
->
sc_offs
 = 
	`EHCI_CAPLENGTH
(
	`EREAD4
(so·, 
EHCI_CAPLEN_HCIVERSION
));

637 
	`TRACE
–
˛ass
, 12, "sc_offs=0x%x", 
so·
->
sc_offs
);

639 
so·
->
ps_evít
 = 0x0000;

642 
vîsi⁄
 = 
	`EHCI_HCIVERSION
(
	`EREAD4
–
so·
, 
EHCI_CAPLEN_HCIVERSION
));

643 
	`TRACE
–
˛ass
, 12, "EHCI vîsi⁄ %x.%x", 
vîsi⁄
 >> 8, version & 0xff);

644 
•¨ams
 = 
	`EREAD4
–
so·
, 
EHCI_HCSPARAMS
);

645 
	`TRACE
–
˛ass
, 12, "•¨ams=0x%x", 
•¨ams
);

646 
so·
->
ps_n›‹t
 = 
	`EHCI_HCS_N_PORTS
–
•¨ams
);

647 
	`TRACE
–
˛ass
, 12, "p‹t†numbî=%d", 
so·
->
ps_n›‹t
);

649 
˝¨ams
 = 
	`EREAD4
–
so·
, 
EHCI_HCCPARAMS
);

651 i‡–
	`EHCI_HCC_64BIT
–
˝¨ams
)) {

652 
	`TRACE
–
˛ass
, 12, "HCC uses 64-bit structures", "");

654 
	`EWRITE4
–
so·
, 
EHCI_CTRLDSSEGMENT
, 0);

658 
	`TRACE
–
˛ass
, 12, "EHCI controllerÑesetting", "");

659 
	`ehci_h¸e£t
(
so·
);

661 
	`dma_li°_öô
–&
dma_li°
);

662 
dma_node_‰amñi°
 = 
	`dma_Æloc
–
so·
->
ps_c⁄n
, &
dma_li°
, (
ehci_‰amñi°_t
));

663 
dma_node_öå_qh
 = 
	`dma_Æloc
–
so·
->
ps_c⁄n
, &
dma_li°
, (
ehci_qh_t
));

664 
dma_node_async_qh
 = 
	`dma_Æloc
–
so·
->
ps_c⁄n
, &
dma_li°
, (
ehci_qh_t
));

667 if–
dma_node_‰amñi°
 =
NULL
 || 
dma_node_öå_qh
 =NULL || 
dma_node_async_qh
 == NULL){

668 
	`TRACE
–
˛ass
, 4, "Error in dma_alloc()!!!", "");

672 
	`TRACE
–
˛ass
, 10, "dmaÑeserved", "");

673 
Ê
 = ( 
ehci_‰amñi°_t
 *Ë
dma_node_‰amñi°
->
mem
;

674 
öå_qh
 = (
ehci_qh_t
 *Ë
dma_node_öå_qh
->
mem
;

675 
async_qh
 = (
ehci_qh_t
 *Ë
dma_node_async_qh
->
mem
;

677 
	`mem£t
–
öå_qh
, 0, –
ehci_qh_t
));

678 
	`TRACE
–
˛ass
, 10, "written1", "");

680 
öå_qh
->
√xt
 = 
EHCI_PTR_TERM
;

681 
öå_qh
->
öfo2
 = (0x01 << 
QH_SMASK_SHIFT
);

682 
öå_qh
->
tokí
 = 
QTD_STS_HALT
;

683 
öå_qh
->
qtd_√xt
 = i¡r_qh->
Æt_√xt
 = 
EHCI_PTR_TERM
;

684 
	`TRACE
–
˛ass
, 10, "written2", "");

687  
i
 = 0; i < 1024; i++)

688 
Ê
->
löks
[
i
] = (
uöt32_t
)–
dma_node_öå_qh
->
daddr
Ë| 
EHCI_PTR_QH
;

690 
	`TRACE
–
˛ass
, 10, "written3", "");

692 
	`EOWRITE4
(
so·
, 
EHCI_PERIODICLISTBASE
, (
uöt32_t
Ë
dma_node_‰amñi°
->
daddr
);

693 
	`TRACE
–
˛ass
, 10, "periodiclistbaseÑegister updated!!", "");

694 
so·
->
≥riodic_li°_ba£
 = 
Ê
;

697 
	`mem£t
–
async_qh
, 0, –
ehci_qh_t
) );

698 
	`TRACE
–
˛ass
, 10, "written4", "");

700 
async_qh
->
√xt
 = ( 
uöt32_t
Ë––(uöt32_tË
dma_node_async_qh
->
daddr
Ë| 
EHCI_PTR_QH
);

701 
async_qh
->
öfo1
 = 
QH_HEAD
;

702 
async_qh
->
tokí
 = 
QTD_STS_HALT
;

703 
async_qh
->
qtd_√xt
 =ásync_qh->
Æt_√xt
 = 
EHCI_PTR_TERM
;

704 
	`TRACE
–
˛ass
, 10, "written5", "");

706 
so·
->
async_li°_addr
 = 
async_qh
;

707 
	`TRACE
–
˛ass
, 10, "written6", "");

709 
	`EOWRITE4
(
so·
, 
EHCI_ASYNCLISTADDR
, (
uöt32_t
Ë
dma_node_async_qh
->
daddr
);

710 
	`TRACE
–
˛ass
, 10, "asynclistaddrÑegister updated!!", "");

716 
	`TRACE
–
˛ass
, 12, "Turn on controller", "");

730 
	`EOWRITE4
(
so·
, 
EHCI_USBCMD
,

731 
EHCI_CMD_ITC_64
 |

732 (
	`EOREAD4
(
so·
, 
EHCI_USBCMD
)) |

733 
EHCI_CMD_ASE
 |

734 
EHCI_CMD_PSE
 |

735 
EHCI_CMD_IAAD
 |

736 
EHCI_CMD_RS
);

739 
	`TRACE
–
˛ass
, 12, "Enable interrupts", "");

746 
	`TRACE
–
˛ass
, 12, "EHCI driverÇow hasÖorts ownership", "");

747 
	`EOWRITE4
(
so·
, 
EHCI_CONFIGFLAG
, 
EHCI_CONF_CF
);

749 
i
 = 0; i < 10000; i++) {

750 
	`USECDELAY
(100);

751 
h¸
 = 
	`EOREAD4
(
so·
, 
EHCI_USBSTS
Ë& 
EHCI_STS_HCH
;

752 i‡(!
h¸
) {

757 i‡(
h¸
) {

758 
	`TRACE
–
˛ass
, 12, "runÅimeout", "");

761 
	`TRACE
–
˛ass
, 12, "EHCI driverÅakingÖroperty ofállÖorts overánother *HCI", "");

762 
i
 = 1; i <
so·
->
ps_n›‹t
; i++) {

763 
cmd
 = 
	`EOREAD4
(
so·
, 
	`EHCI_PORTSC
(
i
));

764 
	`EOWRITE4
(
so·
, 
	`EHCI_PORTSC
(
i
), (
cmd
 & ~
EHCI_PS_PO
Ë| 
EHCI_PS_PP
 );

768 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

770 
	}
}

773 
	$ehci_°›
–*
hcd
){

774 
	}
}

776 
	$ehci_shutdown
–*
hcd
){

777 
	}
}

779 
	$ehci_su•íd
–*
hcd
){

780 
	}
}

782 
	$ehci_ªsume
–*
hcd
){

783 
	}
}

785 
	$ehci_°©us
–*
hcd
){

786 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

787 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

788 
uöt32_t
 
°©us
;

789 
rc
;

791 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

792 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

793 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

795 
°©us
 = ( 
	`EOREAD4
(
so·
, 
EHCI_USBSTS
Ë& 
EHCI_STS_HSE
);

796 if–
°©us
 == 0){

797 
rc
 = 0;

799 
rc
 = 1;

802 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

803 (
rc
);

804 
	}
}

806 
	$ehci_‰ì_pùe
–*
hcd
, 
usb_pùe
 *
pùe
){

807 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

808 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

811 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

812 
	`TRACE
–
˛ass
, 12, "hcd drivî = '%s'", 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

814 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

815 
	}
}

817 
usb_pùe_t
 *
	$ehci_Æloc_bulk_pùe
–*
hcd
, 
usb_pùe
 *
pùe
, 
usb_ídpoöt_des¸ùt‹
 *
desc
){

818 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

819 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

822 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

823 
	`TRACE
–
˛ass
, 12, "hcd drivî = '%s'", 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

825 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

827 
	}
}

829 
usb_pùe_t
 *
	$ehci_Æloc_c⁄åﬁ_pùe
–*
hcd
, 
tdnum
, 
td_addr_t
 *
td_addr
){

830 
	}
}

832 
	$ehci_£nd_c⁄åﬁ
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
cmd
, 
cmdsize
, *
d©a
, 
d©asize
){

833 
	}
}

835 
	$ehci_£t_addªss
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
cmd
, 
cmdsize
, *
d©a
, 
d©asize
){

836 
	}
}

839 
	$ehci_usb_£nd_bulk
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
d©a
, 
d©asize
){

840 
	}
}

842 
	$ehci_Æloc_öå_pùe
–*
hcd
, 
usb_pùe
 *
pùe
, 
usb_ídpoöt_des¸ùt‹
 *
des¸ùt‹
){

843 
	}
}

845 
	$ehci_usb_pﬁl_öå
–*
hcd
, 
usb_pùe
 *
pùe
, *
d©a
){

846 
	}
}

848 
	$ehci_io˘l
–*
hcd
, 
cmd
, *
u¨g
){

850 
	}
}

854 
	$ehci_£t_åa˚_Àvñ
–*
hcd
, *
¨g
){

855 
USB_åa˚_˛ass_t
 *
åa˚_¨g
 = (USB_åa˚_˛ass_à*Ë
¨g
;

856 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

857 
°r
[256];

859 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

862 
globÆ_åa˚_˛ass
.
˛ass
 = 
åa˚_¨g
->class;

863 
globÆ_åa˚_˛ass
.
Àvñ
 = 
åa˚_¨g
->level;

864 
	`INT2HEX64X
–
°r
, 
globÆ_åa˚_˛ass
.
˛ass
);

865 
	`TRACE
–
˛ass
, 12, "trace class settled; class=%s,Üevel=%d",

866 
°r
, 
globÆ_åa˚_˛ass
.
Àvñ
);

867 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

869 
	}
}

872 
	$ehci_hub_öfo
–*
hcd
, *
öfo
){

873 
usbhub_ö°™˚_t
 *
usb_hub
 = (usbhub_ö°™˚_à*Ë
öfo
;

874 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

875 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

877 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

879 
usb_hub
->
pci_bus
 = (
uch¨_t
Ë
	`pciio_öfo_bus_gë
–
so·
->
ps_pciio_öfo_devi˚
);

880 
usb_hub
->
pci_¶Ÿ
 = (
uch¨_t
Ë
	`pciio_öfo_¶Ÿ_gë
–
so·
->
ps_pciio_öfo_devi˚
);

881 
usb_hub
->
pci_fun˘i⁄
 = (Ë
	`pciio_öfo_fun˘i⁄_gë
–
so·
->
ps_pciio_öfo_devi˚
);

882 
usb_hub
->
p‹ts_numbî
 = 
so·
->
ps_n›‹t
;

906 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

908 
	}
}

912 
	$ehci_p‹t_a˘i⁄
–*
hcd
, 
p‹t
, 
a˘i⁄
){

913 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

914 
usbehci_ö°™˚_t
 *
so·
 = (usbehci_ö°™˚_à*Ë
hcd
;

915 
uöt32_t
 
v
;

917 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

918  
a˘i⁄
){

919 
USB_HCD_SET_OWNER
:

920 
	`TRACE
–
˛ass
, 12, "ehciÇow ownsÖort", "");

921 
p‹t
++;

922 
v
 = 
	`EOREAD4
–
so·
, 
	`EHCI_PORTSC
(
p‹t
));

923 
	`EOWRITE4
(
so·
, 
	`EHCI_PORTSC
(
p‹t
), 
v
 & ~
EHCI_PS_PO
);

925 
USB_HUB_PORT_RESET
:

926 
	`TRACE
–
˛ass
, 12, "ehciÑesetÖort", "");

927 
p‹t
++;

928 
	`ehci_p‹t_ª£t
–
so·
, 
p‹t
);

931 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

933 
	}
}

938 
uöt32_t
 
	$ehci_gë_p‹t
–*
hcd
, 
p‹t
){

939 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

940 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

941 
uöt32_t
 
∑
, 
Ω‹t
;

943 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

944 
p‹t
++;

945 
Ω‹t
 = 
	`EOREAD4
–
so·
, 
	`EHCI_PORTSC
(
p‹t
));

946 
∑
 = 0;

947 if–
Ω‹t
 & 
EHCI_PS_CS
)

948 
∑
 |
USB_PORT_CONNECTED
;

949 if–
Ω‹t
 & 
EHCI_PS_PE
)

950 
∑
 |
USB_PORT_ENABLED
 | 
USB_PORT_IN_USE
;

951 if–
Ω‹t
 & 
EHCI_PS_SUSP
)

952 
∑
 |
USB_PORT_SUSPENDED
;

954 if–
	`EHCI_PS_IS_LOWSPEED
–
Ω‹t
))

955 
∑
 |
USB_PORT_LOW_SPEED
;

957 
∑
 |
USB_PORT_HIGH_SPEED
;

959 
∑
 |
USB_PORT_STATUS_OK
;

960 
∑
 |
	`USB_PORT_SET_HCD_OWNER
(
USB_EHCI
);

962 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

963 –
∑
);

964 
	}
}

967 
	$ehci_£t_roŸhub
(*
hcd
, *
roŸhub
){

968 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

969 
usbehci_ö°™˚_t
 *
so·
 = ( usbehci_ö°™˚_à*Ë
hcd
;

970 
usbhub_ö°™˚_t
 *
usbhub
 = ( usbhub_ö°™˚_à*Ë
roŸhub
;

972 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

973 
so·
->
roŸhub
 =Ñoothub;

974 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

976 
	}
}

980 
	$ehci_¥o˚ss_evít
–*
‹igö
, *
de°
, 
evít_id
, *
¨g
){

981 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

983 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

984 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

986 
	}
}

988 
	$ehci_¥o˚ss_evít_‰om_usbc‹e
–*
de°
, 
evít_id
, *
¨g0
, *
¨g1
, *
¨g2
){

989 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

991 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

992 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

994 
	}
}

996 
	$ehci_£t_debug_vÆues
–*
hcd
, *
pv
){

997 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

998 
usbehci_ö°™˚_t
 *
so·
 = (usbehci_ö°™˚_à*Ë
hcd
;

999 
rc
;

1000 
usb_debug_vÆues_t
 *
v
 = (usb_debug_vÆues_à*Ë
pv
;

1002 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1004 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "ídÑc=%d", 
rc
);

1005 (
rc
);

1006 
	}
}

1014 
	$ªgi°î_ehci_wôh_usbc‹e
(*
hcd
){

1015 
USB_func_t
 
func
;

1016 
vîãx_hdl_t
 
vhdl
;

1017 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

1018 
usbehci_ö°™˚_t
 *
so·
;

1019 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

1020 
°r
[45];

1022 
so·
 = (
usbehci_ö°™˚_t
 *Ë
hcd
;

1023 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1027 
usbc‹e
 = (
usbc‹e_ö°™˚_t
 *Ë
so·
->usbcore;

1028 if–
usbc‹e
 =
NULL
){

1029 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
,

1031 –
EFAULT
);

1034 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1036 
	}
}

1039 
	$uƒegi°î_ehci_wôh_usbc‹e
(*
hcd
){

1040 
USB_func_t
 
func
;

1041 
vîãx_hdl_t
 
vhdl
;

1042 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

1043 
usbehci_ö°™˚_t
 *
so·
;

1044 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_EHCI
;

1045 
°r
[45];

1047 
so·
 = (
usbehci_ö°™˚_t
 *Ë
hcd
;

1048 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1052 
usbc‹e
 = (
usbc‹e_ö°™˚_t
 *Ë
so·
->usbcore;

1053 if–
usbc‹e
 =
NULL
){

1054 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
,

1056 –
EFAULT
);

1059 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1061 
	}
}

1077 
	$usbehci_öô
(){

1078 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

1079 
uöt64_t
 
˛ass
 = 
TRC_INIT
 | 
TRC_MOD_EHCI
;

1081 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1082 
	`¥ötf
( "**********************************************************\n");

1083 
	`¥ötf
( "* EHCI USB Driver for Silicon Graphics Irix 6.5 *\n");

1084 
	`¥ötf
( "* By bsderoát gmail dot org, 2011 *\n");

1085 
	`¥ötf
–"* Vîsi⁄ %† *\n", 
USBCORE_DRV_VERSION
);

1086 
	`¥ötf
–"* Sequí˚ %† *\n", 
USBCORE_DRV_SEQ
);

1087 
	`¥ötf
( "**********************************************************\n");

1088 
	`¥ötf
( "usbehci kernel moduleÜoaded! \n");

1089 
	`¥ötf
–"_dügöfo_: Kî√»usbehcòmoduÀ ba£áddªss:0x%x\n", 
moduÀ_addªss
);

1096 
usbc‹e
 = 
	`gë_usbc‹e
();

1097 
usbc‹e
->
	`ªgi°î_moduÀ
––*Ë&
ehci_hódî
);

1098 
	`pciio_ôî©e
("usbehci_", 
usbehci_ªlﬂdme
);

1099 
	`gc_li°_öô
–&
gc_li°
);

1100 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1101 
	}
}

1110 
	$usbehci_u∆ﬂd
(){

1111 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

1112 
uöt64_t
 
˛ass
 = 
TRC_UNLOAD
 | 
TRC_MOD_EHCI
;

1114 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1115 i‡(
usbehci_öu£
)

1116  
EBUSY
;

1118 
usbc‹e
 = 
	`gë_usbc‹e
();

1119 
usbc‹e
->
	`uƒegi°î_moduÀ
––*Ë&
ehci_hódî
);

1120 
	`pciio_ôî©e
("usbehci_", 
usbehci_u∆ﬂdme
);

1121 
	`gc_li°_de°roy
–&
gc_li°
);

1122 
	`TRACE
–
˛ass
, 0, "EHCI Driver unloaded", "");

1123 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1126 
	}
}

1140 
	$usbehci_ªg
(){

1141 
i
;

1142 
uöt16_t
 
devi˚_id
, 
víd‹_id
;

1143 
uöt64_t
 
˛ass
 = 
TRC_INIT
 | 
TRC_MOD_EHCI
;

1145 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1148  
i
 = 0; 
ehci_des¸ùti⁄s
[i].
devi˚_id
 != 0; i++){

1149 
devi˚_id
 = ((
ehci_des¸ùti⁄s
[
i
].device_id & 0xffff0000) >> 16);

1150 
víd‹_id
 = (
ehci_des¸ùti⁄s
[
i
].
devi˚_id
 & 0x0000ffff);

1151 
	`pciio_drivî_ªgi°î
(
víd‹_id
, 
devi˚_id
, "usbehci_", 0);

1154 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1156 
	}
}

1165 
	$usbehci_uƒeg
(){

1166 
	`TRACE
–
TRC_UNLOAD
 | 
TRC_MOD_EHCI
 | 
TRC_START_END
, 10, "start", "");

1167 
	`pciio_drivî_uƒegi°î
("usbehci_");

1168 
	`TRACE
–
TRC_UNLOAD
 | 
TRC_MOD_EHCI
 | 
TRC_START_END
, 10, "end", "");

1170 
	}
}

1186 
	$usbehci_©èch
(
vîãx_hdl_t
 
c⁄n
){

1187 
vîãx_hdl_t
 
vhdl
 = 
GRAPH_VERTEX_NONE
;

1188 
vîãx_hdl_t
 
ch¨v
 = 
GRAPH_VERTEX_NONE
;

1189 
uch¨_t
 *
cfg
;

1190 
usbehci_ö°™˚_t
 *
so·
;

1191 vﬁ©ûê
uch¨_t
 *
ªgs
;

1192 
pciio_piom≠_t
 
cm≠
 = 
NULL
;

1193 
pciio_piom≠_t
 
rm≠
 = 
NULL
;

1194 
gøph_îr‹_t
 
ªt
 = (graph_error_t) 0;

1195 
uöt16_t
 
víd‹_id
;

1196 
uöt16_t
 
devi˚_id
;

1197 
uöt32_t
 
ssid
;

1198 
uch¨_t
 
ªv_id
;

1199 
uch¨_t
 
vÆ
;

1200 
i
;

1201 
uöt32_t
 
devi˚_víd‹_id
;

1202 
rc
;

1203 
devi˚_desc_t
 
usbehci_dev_desc
;

1204 
uöt64_t
 
˛ass
 = 
TRC_ATTACH
 | 
TRC_MOD_EHCI
;

1205 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

1207 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1208 
	`TRACE
–
˛ass
, 0, "EHCI Host Controller Device Detected!", "");

1210 
usbc‹e
 = 
	`gë_usbc‹e
();

1211 if–
usbc‹e
 =
NULL
){

1212 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
, "usbcoreÇotÜoaded, quitting..", "");

1217 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
GRAPH_VERTEX_NONE
, "/usb", &
vhdl
)){

1218 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
, "error in hwgraph_traverse(), quitting..", "");

1223 
ªt
 = 
	`hwgøph_edge_gë
–
vhdl
, "usbehci", &
ch¨v
);

1224 
	`TRACE
–
˛ass
, 8, "r¯o‡hwgøph_edge_gë(Ë%d,ádded usbehcòedge", 
ªt
);

1232 
so·
 = (
usbehci_ö°™˚_t
 *Ë
	`gc_mÆloc
–&
gc_li°
, ( usbehci_instance_t));

1234 
	`ASSERT
(
so·
 !
NULL
);

1235 
	`devi˚_öfo_£t
(
vhdl
, (*)
so·
);

1238 
so·
->
ps_c⁄n
 = 
c⁄n
;

1239 
so·
->
ps_vhdl
 = 
vhdl
;

1240 
so·
->
ps_ch¨v
 = 
ch¨v
;

1241 
so·
->
usbc‹e
 = usbcore;

1245 
cfg
 = (
uch¨_t
 *Ë
pciio_pio_addr


1246 (
c⁄n
, 0,

1247 
PCIIO_SPACE_CFG
,

1249 
EHCI_NUM_CONF_REGISTERS
,

1250 &
cm≠
,

1253 
víd‹_id
 = (
uöt16_t
Ë
	`PCI_CFG_GET16
(
c⁄n
, 
EHCI_CF_VENDOR_ID
);

1254 
devi˚_id
 = (
uöt16_t
Ë
	`PCI_CFG_GET16
(
c⁄n
, 
EHCI_CF_DEVICE_ID
);

1255 
ssid
 = (
uöt32_t
Ë
	`PCI_CFG_GET32
–
c⁄n
, 
EHCI_CF_SSID
);

1256 
ªv_id
 = (
uch¨_t
Ë
	`PCI_CFG_GET8
–
c⁄n
, 
EHCI_CF_REVISION_ID
);

1258 
	`TRACE
–
˛ass
, 0, "EHCI supported device found", "");

1259 
	`TRACE
–
˛ass
, 0, "Víd‹ ID: 0x%x, Devi˚ ID: 0x%x", 
víd‹_id
, 
devi˚_id
);

1260 
	`TRACE
–
˛ass
, 0, "SSID: 0x%x, Rev ID: 0x%x",
ssid
, 
ªv_id
);

1263 
so·
->
devi˚_hódî
.
moduÀ_hódî
 = &
ehci_hódî
;

1265 
devi˚_víd‹_id
 = 
devi˚_id
 << 16 | 
víd‹_id
;

1266  
i
 = 0; 
ehci_des¸ùti⁄s
[i].
devi˚_id
 != 0; i++){

1267 if–
ehci_des¸ùti⁄s
[
i
].
devi˚_id
 =
devi˚_víd‹_id
){

1268 
so·
->
devi˚_hódî
.
víd‹_id
 = vendor_id;

1269 
so·
->
devi˚_hódî
.
devi˚_id
 = device_id;

1270 
	`°r˝y
–
so·
->
devi˚_hódî
.
h¨dw¨e_des¸ùti⁄
,

1271 (*)
ehci_des¸ùti⁄s
[
i
].
c⁄åﬁÀr_des¸ùti⁄
);

1272 
	`TRACE
–
˛ass
, 0, "Device Description: %s",

1273 
ehci_des¸ùti⁄s
[
i
].
c⁄åﬁÀr_des¸ùti⁄
);

1278 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

1279 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

1284 
ªgs
 = (vﬁ©ûê
uch¨_t
 *Ë
pciio_pio_addr


1285 (
c⁄n
, 0,

1286 
	`PCIIO_SPACE_WIN
(0),

1287 0, 
EHCI_NUM_IO_REGISTERS
,

1288 &
rm≠
,

1291 
	`TRACE
–
˛ass
, 8, "ªg†0x%x", 
ªgs
);

1292 if–
ªgs
 =
NULL
){

1293 –
EACCES
);

1296 
so·
->
pci_io_ˇps
 = 
ªgs
;

1297 
so·
->
ps_ªgs
 = 
ªgs
;

1298 
so·
->
ps_rm≠
 = 
rm≠
;

1299 
so·
->
ps_cfg
 = 
cfg
;

1300 
so·
->
ps_cm≠
 = 
cm≠
;

1301 
so·
->
ps_pciio_öfo_devi˚
 = 
	`pciio_öfo_gë
(
c⁄n
);

1302 
so·
->
devi˚_hódî
.soft = (*) soft;

1303 
so·
->
devi˚_hódî
.
˛ass_id
 = 0;

1304 
so·
->
devi˚_hódî
.
öãrÁ˚_id
 = 0;

1305 
so·
->
devi˚_hódî
.
öfo_size
 = –
usbehci_ö°™˚_t
);

1306 
so·
->
devi˚_hódî
.
mëhods
 = (*Ë&
ehci_mëhods
;

1307 
so·
->
usbc‹e
 = usbcore;

1308 
globÆ_so·
 = 
so·
;

1311 
	`ehci_öô
–(*Ë
so·
);

1313 
usbehci_dev_desc
 = 
	`devi˚_desc_dup
(
vhdl
);

1314 
	`devi˚_desc_öå_«me_£t
(
usbehci_dev_desc
, "usbehci");

1315 
	`devi˚_desc_deÁu…_£t
(
vhdl
, 
usbehci_dev_desc
);

1317 
	`TRACE
–
˛ass
, 4, "Creating PCI INTR", "");

1318 
so·
->
ps_öå
 = 
pciio_öå_Æloc


1319 (
c⁄n
, 
usbehci_dev_desc
,

1320 
PCIIO_INTR_LINE_C
,

1321 
vhdl
);

1323 
	`TRACE
–
˛ass
, 4, "aboutÅo connect..", "");

1324 
rc
 = 
	`pciio_öå_c⁄√˘
(
so·
->
ps_öå
, 
usbehci_dma_öå
, soft,(*) 0);

1325 
	`TRACE
–
˛ass
, 4, "r¯%d", 
rc
);

1328 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
 = 
usbc‹e
->
	`¥o˚ss_evít_‰om_hcd
( usbcore,

1329 
so·
, 
USB_HCD_GET_INSTANCE_ID
, so·, 
NULL
, NULL);

1331 
	`•rötf
–
so·
->
devi˚_hódî
.
fs_devi˚
, "usbehci%d",

1332 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
 );

1334 
ªt
 = 
	`hwgøph_ch¨_devi˚_add
–
vhdl
, 
so·
->
devi˚_hódî
.
fs_devi˚
,

1335 "usbehci_", &
ch¨v
);

1337 
	`TRACE
–
˛ass
, 8,

1338 "r¯o‡hwgøph_ch¨_devi˚_add(Ë%d,ádded usbehcòedgê(ch¨ devi˚)", 
ªt
);

1340 
	`devi˚_öfo_£t
(
vhdl
, (*)
so·
);

1342 
rc
 = 
usbc‹e
->
	`¥o˚ss_evít_‰om_hcd
–usbc‹e, 
so·
, 
USB_HCD_ATTACHED_EVENT
, so·, 
NULL
, NULL);

1349 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1352 
	}
}

1372 
	$usbehci_dëach
(
vîãx_hdl_t
 
c⁄n
){

1373 
vîãx_hdl_t
 
vhdl
, 
blockv
, 
ch¨v
;

1374 
usbehci_ö°™˚_t
 *
so·
;

1375 
uöt64_t
 
˛ass
 = 
TRC_DETACH
 | 
TRC_MOD_EHCI
;

1376 
rc
;

1378 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 2, "start", "");

1379 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
GRAPH_VERTEX_NONE
, "/usb", &
vhdl
))

1383 
so·
 = 
globÆ_so·
;

1385 
	`TRACE
–
˛ass
, 12, "so·=0x%x, globÆ_so·=0x%x", 
so·
, 
globÆ_so·
);

1386 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

1387 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

1389 
	`ehci_h¸e£t
–
so·
);

1390 
	`EOWRITE4
–
so·
, 
EHCI_USBINTR
, (
uöt32_t
) 0);

1397 
	`TRACE
–
˛ass
, 12, "disc⁄√˘ i¡îru±", 
rc
);

1401 
	`pciio_öå_disc⁄√˘
(
so·
->
ps_öå
);

1403 
	`TRACE
–
˛ass
, 12, "‰ì i¡îru±", 
rc
);

1404 
	`pciio_öå_‰ì
(
so·
->
ps_öå
);

1413 
	`dma_li°_de°roy
–&
dma_li°
);

1414 
	`TRACE
–
˛ass
, 12, "dropping cmap", "");

1415 i‡(
so·
->
ps_cm≠
 !
NULL
)

1416 
	`pciio_piom≠_‰ì
(
so·
->
ps_cm≠
);

1425 
	`TRACE
–
˛ass
, 12, "edgêªmove", 
rc
);

1426 
	`hwgøph_edge_ªmove
(
vhdl
, 
so·
->
devi˚_hódî
.
fs_devi˚
, &
ch¨v
);

1431 i‡(
GRAPH_SUCCESS
 =
	`hwgøph_edge_ªmove
(
vhdl
, 
EDGE_LBL_CHAR
, &
ch¨v
)) {

1433 
	`TRACE
–
˛ass
, 12, "devi˚_öfo_£t", 
rc
);

1434 
	`devi˚_öfo_£t
(
ch¨v
, 
NULL
);

1436 
	`TRACE
–
˛ass
, 12, "vîãx de°roy", 
rc
);

1437 
	`hwgøph_vîãx_de°roy
(
ch¨v
);

1441 
	`TRACE
–
˛ass
, 12, "devi˚_öfo_£t2", 
rc
);

1442 
	`devi˚_öfo_£t
(
vhdl
, 
NULL
);

1445 
	`TRACE
–
˛ass
, 12, "hwgøph_vîãx_de°roy", 
rc
);

1446 
	`hwgøph_vîãx_de°roy
(
vhdl
);

1448 
	`TRACE
–
˛ass
, 12, "gc_li°_de°roy", 
rc
);

1449 
	`gc_li°_de°roy
–&
gc_li°
);

1451 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1454 
	}
}

1468 
	$usbehci_ªlﬂdme
(
vîãx_hdl_t
 
c⁄n
){

1469 
vîãx_hdl_t
 
vhdl
;

1470 
usbehci_ö°™˚_t
 *
so·
;

1471 
uöt64_t
 
˛ass
 = 
TRC_INIT
 | 
TRC_MOD_EHCI
;

1473 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1474 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
c⁄n
, "usbehci", &
vhdl
))

1477 
so·
 = (
usbehci_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
(
vhdl
);

1481 
	`pciio_îr‹_ªgi°î
(
c⁄n
, 
usbehci_îr‹_h™dÀr
, 
so·
);

1482 
	`pciio_öå_c⁄√˘
(
so·
->
ps_öå
, 
usbehci_dma_öå
, soft, 0);

1483 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1484 
	}
}

1496 
	$usbehci_u∆ﬂdme
(
vîãx_hdl_t
 
pc⁄n
){

1497 
vîãx_hdl_t
 
vhdl
;

1498 
usbehci_ö°™˚_t
 *
so·
;

1499 
uöt64_t
 
˛ass
 = 
TRC_UNLOAD
 | 
TRC_MOD_EHCI
;

1501 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1502 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
pc⁄n
, "usbehci", &
vhdl
))

1505 
so·
 = (
usbehci_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
(
vhdl
);

1509 
	`pciio_îr‹_ªgi°î
(
pc⁄n
, 0, 0);

1510 
	`pciio_öå_disc⁄√˘
(
so·
->
ps_öå
);

1511 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1512 
	}
}

1522 
	$usbehci_›í
(
dev_t
 *
devp
, 
oÊag
, 
Ÿyp
, 
¸ed_t
 *
¸p
){

1524 –
EINVAL
);

1525 
	}
}

1537 
	$usbehci_˛o£
(
dev_t
 
dev
, 
oÊag
, 
Ÿyp
, 
¸ed_t
 *
¸p
){

1540 
	}
}

1553 
	$usbehci_io˘l
(
dev_t
 
dev
, 
cmd
, *
¨g
, 
mode
, 
¸ed_t
 *
¸p
, *
rvÆp
){

1555 *
rvÆp
 = -1;

1556  
ENOTTY
;

1557 
	}
}

1574 
	$usbehci_ªad
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
){

1577 
	}
}

1579 
	$usbehci_wrôe
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
){

1582 
	}
}

1584 
	$usbehci_°øãgy
(
buf
 *
bp
){

1588 
	}
}

1595 
	$usbehci_pﬁl
(
dev_t
 
dev
, 
evíts
, 
™yyë
,

1596 *
ªvít•
, 
pﬁlhód
 **
phµ
, *
gíp
){

1599 
	}
}

1607 
	$usbehci_m≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
, 
off_t
 
off
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
){

1610 
	}
}

1612 
	$usbehci_unm≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
){

1615 
	}
}

1624 
	$usbehci_dma_öå
(
öå_¨g_t
 
¨g
){

1625 
usbehci_ö°™˚_t
 *
so·
 = (usbehci_ö°™˚_à*Ë
¨g
;

1626 
uöt64_t
 
˛ass
 = 
TRC_INTR
 | 
TRC_MOD_EHCI
;

1627 
uöt64_t
 
°©us
, 
p‹t_°©us
, 
p‹t_c⁄√˘
, 
v
;

1628 
uöt32_t
 
p‹tc
;

1629 
i
, 
evít
 = 0, 
ehci_is_ow√r
 = 0;

1630 
usbhub_ö°™˚_t
 *
usbhub
;

1631 
hub_mëhods_t
 *
hub_mëhods
;

1633 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1636 
so·
 = 
globÆ_so·
;

1638 
	`TRACE
–
˛ass
, 12, "checking if interrupt was for us", "");

1639 
°©us
 = 
	`EHCI_STS_INTRS
(
	`EOREAD4
(
so·
, 
EHCI_USBSTS
));

1640 i‡(
°©us
 == 0) {

1646 
usbhub
 = ( 
usbhub_ö°™˚_t
 *Ë
so·
->
roŸhub
;

1647 
hub_mëhods
 = 
usbhub
->
devi˚_hódî
.
mëhods
;

1649 
	`TRACE
–
˛ass
, 12, "ack, sètus=0x%08x", 
°©us
);

1651 
	`EOWRITE4
(
so·
, 
EHCI_USBSTS
, 
°©us
);

1653 
°©us
 &
so·
->
ps_eöås
;

1656 i‡(
°©us
 & 
EHCI_STS_HSE
) {

1657 
	`TRACE
–
˛ass
, 12, "unrecoverableÉrror, controller halted", "");

1661 if–
°©us
 & 
EHCI_STS_IAA
){

1662 
	`TRACE
–
˛ass
, 12, "Got USB data from ASYNC,Ñeady forÅransfers", "");

1664 }if–
°©us
 & 
EHCI_STS_PCD
){

1666 
	`TRACE
–
˛ass
, 12, "port change detected!", "");

1667 
i
 = 1; i <
so·
->
ps_n›‹t
; i++){

1668 
p‹t_°©us
 = 
	`EOREAD4
–
so·
, 
	`EHCI_PORTSC
(
i
));

1670 
p‹t_c⁄√˘
 = 
p‹t_°©us
 & 
EHCI_PS_CLEAR
;

1672 if–
p‹t_c⁄√˘
){

1673 
	`TRACE
–
˛ass
, 12, "a˘ivôy i¿p‹à%d", 
i
);

1674 if––
p‹t_°©us
 & 
EHCI_PS_CS
) == 0){

1675 
	`TRACE
–
˛ass
, 12, "Device disconnected", "");

1676 
evít
 = 
USB_EVENT_PORT_DISCONNECT
;

1677 
p‹tc
 = 
i
;

1679 
	`EOWRITE4
–
so·
, 
	`EHCI_PORTSC
(
i
), 
	`EOREAD4
(so·, EHCI_PORTSC(i)Ë| 
EHCI_PS_CLEAR
);

1681 
	`TRACE
–
˛ass
, 12, "Device connected", "");

1682 
p‹tc
 = 
i
;

1683 if–
	`EHCI_PS_IS_LOWSPEED
(
p‹t_°©us
)){

1684 
	`TRACE
–
˛ass
, 12, "No High speed device,ÖassingÅo companion controller", "");

1687 
v
 = 
	`EOREAD4
–
so·
, 
	`EHCI_PORTSC
(
i
)Ë& ~
EHCI_PS_CLEAR
;

1688 
	`EOWRITE4
(
so·
, 
	`EHCI_PORTSC
(
i
), 
v
 | 
EHCI_PS_PO
);

1691 
	`TRACE
–
˛ass
, 12, "Device is High speed,Ñesetting", "");

1692 
ehci_is_ow√r
 = 
	`ehci_p‹t_ª£t
–
so·
, 
i
);

1694 if–
ehci_is_ow√r
 == 1)

1695 
evít
 = 
USB_EVENT_PORT_CONNECT
;

1706 
p‹tc
--;

1707 if–
evít
 != 0){

1709 
hub_mëhods
->
	`¥o˚ss_evít_‰om_hcd
–(*Ë
so·
, (*Ë
usbhub
, 
evít
,

1710 (*Ë&
p‹tc
, 
NULL
);

1725 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1727 
	}
}

1736 
	$usbehci_îr‹_h™dÀr
(*
eöfo
,

1737 
îr‹_code
,

1738 
i€º‹_mode_t
 
mode
,

1739 
i€º‹_t
 *
i€º‹
){

1756  
IOERROR_HANDLED
;

1757 
	}
}

1770 
	$usbehci_hÆt
(){

1771 
	`TRACE
–
TRC_HELPER
 | 
TRC_MOD_EHCI
 | 
TRC_START_END
, 2, "start", "");

1772 
	`TRACE
–
TRC_HELPER
 | 
TRC_MOD_EHCI
 | 
TRC_START_END
, 2, "end", "");

1774 
	}
}

1784 
	$usbehci_size
(
dev_t
 
dev
){

1787 
	}
}

1796 
	$usbehci_¥öt
(
dev_t
 
dev
, *
°r
){

1799 
	}
}

	@usbhc.h

70 #i‚de‡
_USBHC_H


71 
	#_USBHC_H_


	)

73 
	~<sys/£ma.h
>

74 
	~"usb.h
"

75 
	~"usbio˘l.h
"

78 
	#USB_FSPATH
 "/hw/usb/"

	)

82 
	#USECDELAY
(
ms
Ë
	`dñay
(
	`drv_u£˘ohz
(ms))

	)

85 
	#TD_ADDR_SIZE_VEC
 16

	)

87 *
	mkaddr
;

88 
uöt32_t
 
	mdaddr
;

89 *
	md©a_kaddr
;

90 
uöt32_t
 
	md©a_daddr
;

91 
	md©a_size
;

92 }
	ttd_addr_t
;

97 
	susb_pùe
 {

98 *
	mhub
;

99 
	mp‹t_num
;

100 
uöt8_t
 
	mty≥
;

101 
	#USB_PIPE_CONTROL
 1

	)

102 
uöt8_t
 
	mï
;

103 
uöt8_t
 
	mdevaddr
;

104 
uöt8_t
 
	m•ìd
;

105 
uöt8_t
 
	må™s„r_ty≥
;

106 
uöt16_t
 
	mmax∑ckë
;

107 
	msögÀ_dma_£gmít
;

108 *
	mhcd
;

109 *
	mdma_node
;

110 *
	mqh
;

111 
td_addr_t
 
	mtds
[
TD_ADDR_SIZE_VEC
];

112 
	mnum_tds
;

114 
usb_pùe
 
	tusb_pùe_t
;

117 
	susb_s
 {

118 
usb_pùe
 *
	mdeÁu…pùe
;

119 
muãx_t
 
	mª£éock
;

120 
	mbusid
;

121 
uöt16_t
 
	mbdf
;

122 
uöt8_t
 
	mty≥
;

123 
uöt8_t
 
	mmaxaddr
;

125 
usb_s
 
	tusb_s_t
;

128 
	susbhub_s
 {

129 
usbhub_›_s
 *
	m›
;

130 
usb_pùe
 *
	mpùe
;

131 
usb_s
 *
	m˙é
;

132 
muãx_t
 
	mlock
;

133 
uöt32_t
 
	mpowîwaô
;

134 
uöt32_t
 
	mp‹t
;

135 
uöt32_t
 
	mthªads
;

136 
uöt32_t
 
	mp‹tcou¡
;

137 
uöt32_t
 
	mdevcou¡
;

139 
usbhub_s
 
	tusbhub_t
;

145 
	susbhub_›_s
 {

146 (*
	mdëe˘
)(
usbhub_s
 *
	mhub
, 
uöt32_t
 
	mp‹t
);

147 (*
	mª£t
)(
usbhub_s
 *
	mhub
, 
uöt32_t
 
	mp‹t
);

148 (*
	mdisc⁄√˘
)(
usbhub_s
 *
	mhub
, 
uöt32_t
 
	mp‹t
);

152 #ifde‡
_SGIO2_


153 
	#EREAD1
(
sc
, 
a
Ë
	`pciio_pio_ªad8
–(
uöt8_t
 *Ë((sc)->
pci_io_ˇps
Ë+á )

	)

154 
	#EREAD2
(
sc
, 
a
Ë
	`pciio_pio_ªad16
–(
uöt16_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (a>>1Ë)

	)

155 
	#EREAD4
(
sc
, 
a
Ë
	`pciio_pio_ªad32
–(
uöt32_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (a>>2Ë)

	)

156 
	#EWRITE1
(
sc
, 
a
, 
x
Ë
	`pciio_pio_wrôe8
–x, (
uöt8_t
 *Ë((sc)->
pci_io_ˇps
Ë+á )

	)

157 
	#EWRITE2
(
sc
, 
a
, 
x
Ë
	`pciio_pio_wrôe16
–x, (
uöt16_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (a>>1Ë)

	)

158 
	#EWRITE4
(
sc
, 
a
, 
x
Ë
	`pciio_pio_wrôe32
–x, (
uöt32_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (a>>2Ë)

	)

159 
	#EOREAD1
(
sc
, 
a
Ë
	`pciio_pio_ªad8
–(
uöt8_t
 *Ë((sc)->
pci_io_ˇps
Ë+á + (sc)->
sc_offs
 )

	)

160 
	#EOREAD2
(
sc
, 
a
Ë
	`pciio_pio_ªad16
–(
uöt16_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (◊ + (sc)->
sc_offs
Ë>> 1Ë)

	)

161 
	#EOREAD4
(
sc
, 
a
Ë
	`pciio_pio_ªad32
–(
uöt32_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (◊ + (sc)->
sc_offs
Ë>> 2Ë)

	)

162 
	#EOWRITE1
(
sc
, 
a
, 
x
Ë
	`pciio_pio_wrôe8
–x, (
uöt8_t
 *Ë((sc)->
pci_io_ˇps
Ë+á + (sc)->
sc_offs
 )

	)

163 
	#EOWRITE2
(
sc
, 
a
, 
x
Ë
	`pciio_pio_wrôe16
–x, (
uöt16_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (◊ + (sc)->
sc_offs
)>>1Ë)

	)

164 
	#EOWRITE4
(
sc
, 
a
, 
x
Ë
	`pciio_pio_wrôe32
–x, (
uöt32_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (◊ + (sc)->
sc_offs
)>>2Ë)

	)

166 
	#EREAD1
(
sc
, 
a
Ë–(
uöt8_t
 ) *–((sc)->
pci_io_ˇps
Ë+á ))

	)

167 
	#EREAD2
(
sc
, 
a
Ë–(
uöt16_t
Ë*–(uöt16_à*Ë((sc)->
pci_io_ˇps
Ë+ (a>>1Ë))

	)

168 
	#EREAD4
(
sc
, 
a
Ë–(
uöt32_t
Ë*–(uöt32_à*Ë((sc)->
pci_io_ˇps
Ë+ (a>>2Ë))

	)

169 
	#EWRITE1
(
sc
, 
a
, 
x
Ë–*–(
uöt8_t
 *Ë((sc)->
pci_io_ˇps
Ë+á ) = x)

	)

170 
	#EWRITE2
(
sc
, 
a
, 
x
Ë–*–(
uöt16_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (a>>1ËËx)

	)

171 
	#EWRITE4
(
sc
, 
a
, 
x
Ë–*–(
uöt32_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (a>>2ËËx)

	)

172 
	#EOREAD1
(
sc
, 
a
Ë–(
uöt8_t
 ) *–((sc)->
pci_io_ˇps
Ë+á + (sc)->
sc_offs
 ))

	)

173 
	#EOREAD2
(
sc
, 
a
Ë–(
uöt16_t
 ) *–(uöt16_à*Ë((sc)->
pci_io_ˇps
Ë+ (◊ + (sc)->
sc_offs
)>>1Ë))

	)

174 
	#EOREAD4
(
sc
, 
a
Ë–(
uöt32_t
Ë*–(uöt32_à*Ë((sc)->
pci_io_ˇps
Ë+ (◊ + (sc)->
sc_offs
)>>2Ë))

	)

175 
	#EOWRITE1
(
sc
, 
a
, 
x
Ë–*–(
uöt8_t
 *Ë((sc)->
pci_io_ˇps
Ë+á + (sc)->
sc_offs
 ) = x)

	)

176 
	#EOWRITE2
(
sc
, 
a
, 
x
Ë–*–(
uöt16_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (◊ + (sc)->
sc_offs
)>>1ËËx)

	)

177 
	#EOWRITE4
(
sc
, 
a
, 
x
Ë–*–(
uöt32_t
 *Ë((sc)->
pci_io_ˇps
Ë+ (◊ + (sc)->
sc_offs
)>>2ËËx)

	)

180 
	#UREAD1
(
sc
, 
a
Ë
	`EOREAD1
(sc,á)

	)

181 
	#UREAD2
(
sc
, 
a
Ë
	`EOREAD2
(sc,á)

	)

182 
	#UREAD4
(
sc
, 
a
Ë
	`EOREAD4
(sc,á)

	)

183 
	#UWRITE1
(
sc
, 
a
, 
x
Ë
	`EOWRITE1
–sc,á, x)

	)

184 
	#UWRITE2
(
sc
, 
a
, 
x
Ë
	`EOWRITE2
–sc,á, x)

	)

185 
	#UWRITE4
(
sc
, 
a
, 
x
Ë
	`EOWRITE4
–sc,á, x)

	)

190 
	#PCI_CFG_GET
(
c
,
b
,
o
,
t
Ë
	`pciio_c⁄fig_gë
(c,o,—))

	)

191 
	#PCI_CFG_SET
(
c
,
b
,
o
,
t
,
v
Ë
	`pciio_c⁄fig_£t
(c,o,—),v)

	)

194 
	#PCI_CFG_GET8
(
c
,
o
Ë
	`PCI_CFG_GET
(c,0, o, 
uch¨_t
 )

	)

195 
	#PCI_CFG_GET16
(
c
,
o
Ë
	`PCI_CFG_GET
(c,0, o, 
uöt16_t
)

	)

196 
	#PCI_CFG_GET32
(
c
,
o
Ë
	`PCI_CFG_GET
(c,0, o, 
uöt32_t
)

	)

197 
	#PCI_CFG_SET8
(
c
,
o
,
v
Ë
	`PCI_CFG_SET
(c,0, o, 
uch¨_t
, v)

	)

198 
	#PCI_CFG_SET16
(
c
,
o
,
v
Ë
	`PCI_CFG_SET
(c,0, o, 
uöt16_t
, v)

	)

199 
	#PCI_CFG_SET32
(
c
,
o
,
v
Ë
	`PCI_CFG_SET
(c,0, o, 
uöt32_t
, v)

	)

207 (*
	m£t_åa˚_Àvñ
) (*, *);

208 (*
	m¥o˚ss_evít
) (*, *, , *);

209 (*
	m¥o˚ss_evít_‰om_usbc‹e
) (*, , *, *, *);

210 
uöt64_t
 
	mÊags
;

211 }
	tusb_gíîic_mëhods_t
;

214 (*
	mhcd_ª£t
) (*);

215 (*
	mhcd_°¨t
) (*);

216 (*
	mhcd_öô
) (*);

217 (*
	mhcd_°›
) (*);

218 (*
	mhcd_shutdown
) (*);

219 (*
	mhcd_su•íd
) (*);

220 (*
	mhcd_ªsume
) (*);

221 (*
	mhcd_°©us
) (*);

222 (*
	mhcd_‰ì_pùe
Ë(*, 
	musb_pùe
 *);

223 
	musb_pùe_t
 *(*
	mhcd_Æloc_c⁄åﬁ_pùe
Ë(*, , 
	mtd_addr_t
 *);

224 
	musb_pùe_t
 *(*
	mhcd_Æloc_bulk_pùe
Ë(*, 
	musb_pùe
 *, 
	musb_ídpoöt_des¸ùt‹
 *);

225 (*
	mhcd_£nd_c⁄åﬁ
Ë(*, 
	musb_pùe
 *, , *, , *, );

226 (*
	mhcd_£t_addªss
Ë(*, 
	musb_pùe
 *, , *, , *, );

227 (*
	mhcd_usb_£nd_bulk
Ë(*, 
	musb_pùe
 *, , *, );

228 (*
	mhcd_Æloc_öå_pùe
Ë(*, 
	musb_pùe
 *, 
	musb_ídpoöt_des¸ùt‹
 *);

229 (*
	mhcd_usb_pﬁl_öå
Ë(*, 
	musb_pùe
 *, *);

230 (*
	mhcd_io˘l
) (*, , *);

231 (*
	mhcd_£t_åa˚_Àvñ
) (*, *);

232 (*
	mhcd_hub_öfo
) (*, *);

233 (*
	mhcd_p‹t_a˘i⁄
) (*, , );

234 
uöt32_t
 (*
hcd_gë_p‹t
) (*, );

235 (*
	mhcd_£t_roŸhub
) (*, *);

236 (*
	mhcd_£t_debug_vÆues
) (*, *);

237 
uöt32_t
 
	mÊags
;

238 }
	thcd_mëhods_t
;

241 (*
	mupd©e_hub_öfo
) (*, *);

242 (*
	m¥o˚ss_evít_‰om_hcd
) (*, *, , *, *);

243 }
	thub_mëhods_t
;

247 
uöt32_t
 
	mmoduÀ_id
;

248 
	msh‹t_des¸ùti⁄
[12];

249 
	ml⁄g_des¸ùti⁄
[80];

250 
	mmoduÀ_«me
[32];

251 
uöt32_t
 
	mty≥
;

252 
usb_gíîic_mëhods_t
 
	mmëhods
;

253 }
	tmoduÀ_hódî_t
;

256 
moduÀ_hódî_t
 *
	mmoduÀ_hódî
;

257 
	mh¨dw¨e_des¸ùti⁄
[80];

258 
	mfs_devi˚
[80];

259 
uöt32_t
 
	mdevi˚_id
;

260 
uöt32_t
 
	mvíd‹_id
;

261 
uöt32_t
 
	m˛ass_id
;

262 
uöt32_t
 
	möãrÁ˚_id
;

263 
uöt32_t
 
	möfo_size
;

264 
uöt32_t
 
	mö°™˚_id
;

265 
uöt32_t
 
	m•ec_devi˚_ö°™˚_id
;

266 
	mhub_ödex
;

267 
	mp‹t_ödex
;

269 *
	mmëhods
;

270 *
	mso·
;

271 }
	tdevi˚_hódî_t
;

286 –*
	tUSB_func_t
)( *);

287 –*
	tUSB_io˘l_func_t
)(*, *);

288 –*
	tUSBCORE_evít_func_t
)(*, *, , *, *, *);

290 
devi˚_hódî_t
 
devi˚_hódî
;

291 
vîãx_hdl_t
 
c⁄n
;

292 
vîãx_hdl_t
 
ma°îv
;

293 
vîãx_hdl_t
 
usbd´m⁄
;

294 
vîãx_hdl_t
 
usbc‹e
;

295 
mode
;

296 
USB_func_t
 
ªgi°î_moduÀ
;

297 
USB_func_t
 
uƒegi°î_moduÀ
;

298 
USB_func_t
 
ªgi°î_devi˚
;

299 
USB_func_t
 
uƒegi°î_devi˚
;

301 
USBCORE_evít_func_t
 
¥o˚ss_evít_‰om_hcd
;

302 
USBCORE_evít_func_t
 
¥o˚ss_evít_‰om_devi˚
;

304 
muãx_t
 
muãx
;

307 
muãx_t
 
uhci_muãx
;

308 
muãx_t
 
ehci_muãx
;

309 
uöt32_t
 
debug_p‹t
;

310 }
	tusbc‹e_ö°™˚_t
;

313 
	#USB_HUB_MAX_PORTS
 16

	)

315 
devi˚_hódî_t
 
devi˚_hódî
;

316 
hub_ty≥
;

317 
hub_ödex
;

318 
hub_∑ª¡
;

319 
uch¨_t
 
hcd_drivîs
;

320 
uch¨_t
 
pci_bus
;

321 
uch¨_t
 
pci_¶Ÿ
;

322 
uch¨_t
 
pci_fun˘i⁄
;

323 
uch¨_t
 
hcd_ow√r
;

324 
uöt16_t
 
addªss
;

325 
p‹ts_numbî
;

326 
uöt32_t
 
p‹ts_°©us
[
USB_HUB_MAX_PORTS
];

327 
devi˚_hódî_t
 *
p‹ts_hcds
[
USB_HUB_MAX_PORTS
];

328 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

329 
vîãx_hdl_t
 
ps_c⁄n
;

330 
vîãx_hdl_t
 
ps_vhdl
;

331 
vîãx_hdl_t
 
ps_ch¨v
;

332 
	#USB_HUB_MAX_HCDS
 4

	)

333 
devi˚_hódî_t
 *
hcds
[
USB_HUB_MAX_HCDS
];

334 
hcd_ö°™˚s_num
;

335 
muãx_t
 
muãx
;

336 
muãx_t
 
uhci_muãx
;

344 
	#USB_CD_MAX_EVENTS
 8

	)

345 
uöt32_t
 
cd_p‹t_evít
[
USB_CD_MAX_EVENTS
];

346 
uöt32_t
 
cd_time_evít
[
USB_CD_MAX_EVENTS
];

347 
cd_evít_id
[
USB_CD_MAX_EVENTS
];

348 
cd_evíts_num
;

349 
toid_t
 
cd_ôimeout
;

350 
uöt8_t
 
maxaddr
;

351 }
	tusbhub_ö°™˚_t
;

360 
	#USB_HCD_GET_INSTANCE_ID
 1001

	)

361 
	#USB_HCD_ATTACHED_EVENT
 1002

	)

362 
	#USB_HUB_DEVICE_GET_STATUS
 1003

	)

363 
	#USB_HUB_PORT_RESET
 1004

	)

364 
	#USB_HCD_SET_OWNER
 1005

	)

365 
	#USB_HUB_SET_ADDRESS
 1006

	)

366 
	#USB_HUB_ALLOC_PIPE
 1007

	)

367 
	#USB_HUB_DESTROY_PIPE
 1008

	)

368 
	#USB_GET_DEVICE_INFO8
 1009

	)

369 
	#USB_SET_DEBUG_VALUES
 1010

	)

370 
	#USB_RUN_DEBUG_OP
 1011

	)

371 
	#USB_GET_DESCRIPTOR
 1012

	)

378 
	#USB_EVENT_EXIT_MAIN_THREAD
 2001

	)

379 
	#B2LENDIAN
–
x
Ë(
uöt16_t
)(((x & 0x00ff) << 8) | \

380 ((
x
 & 0xff00Ë>> 8))

	)

	@usbhub.c

49 
	~<sys/ty≥s.h
>

50 
	~<sys/˝u.h
>

51 
	~<sys/sy°m.h
>

52 
	~<sys/cmn_îr.h
>

53 
	~<sys/î∫o.h
>

54 
	~<sys/buf.h
>

55 
	~<sys/io˘l.h
>

56 
	~<sys/¸ed.h
>

57 
	~<ksys/ddm≠.h
>

58 
	~<sys/pﬁl.h
>

59 
	~<sys/övít.h
>

60 
	~<sys/debug.h
>

61 
	~<sys/sbd.h
>

62 
	~<sys/kmem.h
>

63 
	~<sys/edt.h
>

64 
	~<sys/dmam≠.h
>

65 
	~<sys/hwgøph.h
>

66 
	~<sys/iobus.h
>

67 
	~<sys/iogøph.h
>

68 
	~<sys/∑øm.h
>

69 
	~<sys/pio.h
>

70 
	~<sys/£ma.h
>

71 
	~<sys/ddi.h
>

72 
	~<sys/î∫o.h
>

73 
	~<sys/ksynch.h
>

74 
	~<sys/©omic_›s.h
>

75 
	~<sys/PCI/PCI_defs.h
>

76 
	~<sys/PCI/pciio.h
>

77 
	~<sys/cmn_îr.h
>

78 
	~<sys/mlﬂd.h
>

79 
	~<°rög.h
>

80 
	~<˘y≥.h
>

89 
	~"c⁄fig.h
"

90 
	~"usbio˘l.h
"

91 
	~"usb.h
"

92 
	~"usbhc.h
"

99 
USB_åa˚_˛ass_t
 
	gglobÆ_åa˚_˛ass
 = { 12, 
TRC_ALL
};

107 
	~"kmaddr.c
"

108 
	~"åa˚.c
"

109 
	~"kutûs.c
"

110 
	~"dumphex.c
"

111 
	~"li°.c
"

112 
	~"gc.c
"

113 
	~"dma.c
"

114 
	~"queue.c
"

121 
hub_£t_åa˚_Àvñ
–*
hcd
, *
¨g
);

122 
hub_¥o˚ss_evít
–*
‹igö
, *
de°
, 
evít_id
, *
¨g
);

123 
hub_¥o˚ss_evít_‰om_usbc‹e
–*
de°
, 
evít_id
, *
¨g0
, *
¨g1
, *
¨g2
);

125 
moduÀ_hódî_t
 
	ghub_hódî
={

126 
USB_MOD_HUB
,

130 
USB_DRIVER_IS_USB_DEVICE
,

132 
hub_£t_åa˚_Àvñ
,

133 
hub_¥o˚ss_evít
,

134 
hub_¥o˚ss_evít_‰om_usbc‹e
,

139 
upd©e_hub_°©us
–*
hub
, *
öfo
);

140 
¥o˚ss_evít_‰om_hcd
–*
hcd
, *
hub
, 
mesßge_id
, *
¨g0
, *
¨g1
);

142 
hub_mëhods_t
 
	ghub_mëhods
={

143 
upd©e_hub_°©us
,

144 
¥o˚ss_evít_‰om_hcd


154 *
	gusbhub_mvîsi⁄
 = 
M_VERSION
;

155 
	gusbhub_devÊag
 = 
D_MP
;

156 
	gusbhub_busy
 = 0;

157 
gc_li°_t
 
	ggc_li°
;

158 
usbhub_ö°™˚_t
 *
	gglobÆ_so·
 = 
NULL
;

159 
	#USB_HUB_MAX_STACK
 8

	)

160 
devi˚_hódî_t
 *
	ghcd_°ack
[
USB_HUB_MAX_STACK
];

161 
	gnum_hcds_ö_°ack
 = 0;

162 
	g•ec_devi˚_ö°™˚_id
 = 0;

170 
usbhub_öô
();

171 
usbhub_u∆ﬂd
();

172 
usbhub_ªg
();

173 
usbhub_uƒeg
();

174 
usbhub_©èch
(
vîãx_hdl_t
 
c⁄n
);

175 
usbhub_dëach
(
vîãx_hdl_t
 
c⁄n
);

176 
usbhub_›í
(
dev_t
 *
devp
, 
Êag
, 
Ÿyp
, 
¸ed
 *
¸p
);

177 
usbhub_˛o£
(
dev_t
 
dev
);

178 
usbhub_ªad
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
);

179 
usbhub_wrôe
();

180 
usbhub_io˘l
(
dev_t
 
dev
, 
cmd
, *
u¨g
, 
mode
, 
¸ed_t
 *
¸p
, *
rvÆp
);

181 
usbhub_m≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
, 
off_t
 
off
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
);

182 
usbhub_unm≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
);

200 
usbc‹e_ö°™˚_t
 *
	$gë_usbc‹e
(){

201 
vîãx_hdl_t
 
vhdl
;

202 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

204 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_INIT
;

205 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

208 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
GRAPH_VERTEX_NONE
, "/usb/usbc‹e", &
vhdl
)){

209 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
,

211 (
NULL
);

214 
usbc‹e
 = (
usbc‹e_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
–
vhdl
);

215 if–
usbc‹e
 =
NULL
){

216 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
,

221 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

223 –
usbc‹e
);

224 
	}
}

227 
	$hub_©èch
–*
pso·
, 
hub_ty≥
){

228 
usbhub_ö°™˚_t
 *
so·
;

229 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_ATTACH
;

230 
i
, 
hcd_öfo
 = -1;

231 
hcd_mëhods_t
 *
hcd_mëhods
;

232 
t
 = 0;

233 
vîãx_hdl_t
 
vhdl
 = 
GRAPH_VERTEX_NONE
;

234 
vîãx_hdl_t
 
ch¨v
 = 
GRAPH_VERTEX_NONE
;

235 
gøph_îr‹_t
 
ªt
 = (graph_error_t) 0;

236 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

237 
°r
[80];

241 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

243 
so·
 = (
usbhub_ö°™˚_t
 *Ë
	`gc_mÆloc
–&
gc_li°
, ( usbhub_instance_t));

244 
	`ASSERT
(
so·
 !
NULL
);

246 
	`bzîo
–(*Ë
so·
, –
usbhub_ö°™˚_t
));

249 if–
hub_ty≥
 =
USB_HUB_PCI
){

251  
i
 = 0; i < 
num_hcds_ö_°ack
; i++){

252 if–
hcd_°ack
[
i
]->
moduÀ_hódî
->
moduÀ_id
 =
USB_MOD_EHCI
){

253 
hcd_öfo
 = 
i
;

260 if–
hcd_öfo
 == -1){

261  
i
 = 0; i < 
num_hcds_ö_°ack
; i++){

262 if–
hcd_°ack
[
i
]->
moduÀ_hódî
->
moduÀ_id
 =
USB_MOD_UHCI
){

263 
hcd_öfo
 = 
i
;

270 
so·
->
devi˚_hódî
.
moduÀ_hódî
 = &
hub_hódî
;

271 
	`bc›y
–
hcd_°ack
[
hcd_öfo
]->
h¨dw¨e_des¸ùti⁄
,

272 
so·
->
devi˚_hódî
.
h¨dw¨e_des¸ùti⁄
, 80);

273 
so·
->
devi˚_hódî
.
devi˚_id
 = 
hcd_°ack
[
hcd_öfo
]->device_id;

274 
so·
->
devi˚_hódî
.
víd‹_id
 = 
hcd_°ack
[
hcd_öfo
]->vendor_id;

275 
so·
->
devi˚_hódî
.
˛ass_id
 = 
hcd_°ack
[
hcd_öfo
]->class_id;

276 
so·
->
devi˚_hódî
.
öãrÁ˚_id
 = 
hcd_°ack
[
hcd_öfo
]->interface_id;

277 
so·
->
devi˚_hódî
.
hub_ödex
 = -1;

278 
so·
->
devi˚_hódî
.
p‹t_ödex
 = -1;

279 
so·
->
hub_ödex
 = 0;

280 
so·
->
hub_∑ª¡
 = -1;

281 
so·
->
addªss
 = 0;

282 
so·
->
hcd_ow√r
 = 
hcd_öfo
;

283 
so·
->
cd_evíts_num
 = 0;

284 
so·
->
cd_ôimeout
 = 0;

285 
so·
->
maxaddr
 = 0;

288 
hcd_mëhods
 = (
hcd_mëhods_t
 *Ë
hcd_°ack
[
hcd_öfo
]->
mëhods
;

289 
hcd_mëhods
->
	`hcd_hub_öfo
–(*Ë
hcd_°ack
[
hcd_öfo
], (*Ë
so·
);

292  
i
 = 0; i < 
so·
->
p‹ts_numbî
; i++){

293 
so·
->
p‹ts_°©us
[
i
] = 
hcd_mëhods
->
	`hcd_gë_p‹t
(

294 (*Ë
hcd_°ack
[
hcd_öfo
], 
i
);

297  
i
 = 0; i < 
num_hcds_ö_°ack
; i++){

299 
so·
->
hcds
[
i
] = 
hcd_°ack
[i];

300 
	`TRACE
–
˛ass
, 10, "hcd[%d] = %x", 
i
, 
so·
->
hcds
[i]);

302 
hcd_mëhods
 = (
hcd_mëhods_t
 *Ë
hcd_°ack
[
i
]->
mëhods
;

303 
hcd_mëhods
->
	`hcd_£t_roŸhub
–(*Ë
hcd_°ack
[
i
], (*Ë
so·
);

305 if–
hcd_°ack
[
i
]->
moduÀ_hódî
->
moduÀ_id
 =
USB_MOD_UHCI
){

306 
so·
->
hcd_drivîs
 |
USB_UHCI
;

307 }if–
hcd_°ack
[
i
]->
moduÀ_hódî
->
moduÀ_id
 =
USB_MOD_EHCI
){

308 
so·
->
hcd_drivîs
 |
USB_EHCI
;

311 
so·
->
hcd_ö°™˚s_num
 = 
num_hcds_ö_°ack
;

320 
so·
->
devi˚_hódî
.
öfo_size
 = –
usbhub_ö°™˚_t
);

321 
so·
->
devi˚_hódî
.
ö°™˚_id
 = 0;

322 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
 = spec_device_instance_id++;

324 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
GRAPH_VERTEX_NONE
, "/usb", &
vhdl
)){

325 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
, "error in hwgraph_traverse(), quitting..", "");

329 
ªt
 = 
	`hwgøph_edge_gë
–
vhdl
, 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
,

330 &
ch¨v
);

333 
	`•rötf
–
so·
->
devi˚_hódî
.
fs_devi˚
, 
USB_FSPATH
 "%s%d",

334 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
,

335 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
);

336 
	`TRACE
–
˛ass
, 12, "f¢amê'%s'", 
so·
->
devi˚_hódî
.
fs_devi˚
);

338 
	`°r˝y
–
°r
, 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

339 
	`°rˇt
–
°r
, "_");

340 
ªt
 = 
	`hwgøph_ch¨_devi˚_add
–
vhdl
, 
so·
->
devi˚_hódî
.
fs_devi˚
, 
°r
, &
ch¨v
);

342 
	`TRACE
–
˛ass
, 12,

343 "r¯o‡hwgøph_ch¨_devi˚_add(Ë%d,ádded usbehcòedgê(ch¨ devi˚)", 
ªt
);

345 
	`devi˚_öfo_£t
(
vhdl
, (*)
so·
);

346 
so·
->
ps_vhdl
 = 
vhdl
;

347 
so·
->
ps_c⁄n
 = 
vhdl
;

348 
so·
->
ps_ch¨v
 = 
ch¨v
;

349 
so·
->
devi˚_hódî
.
mëhods
 = ( *Ë&
hub_mëhods
;

351 
so·
->
devi˚_hódî
.soft = soft;

352 
so·
->
hub_ty≥
 = hub_type;

353 
	`MUTEX_INIT
–&
so·
->
muãx
, 
MUTEX_DEFAULT
, "usbhub");

354 
	`MUTEX_INIT
–&
so·
->
uhci_muãx
, 
MUTEX_DEFAULT
, "usbhub");

357 
usbc‹e
 = 
	`gë_usbc‹e
();

358 
so·
->
usbc‹e
 = usbcore;

360 
usbc‹e
->
	`ªgi°î_devi˚
–(*Ë
so·
);

362 if–
hub_ty≥
 =
USB_HUB_PCI
){

363  
i
 = 0; i < 
so·
->
hcd_ö°™˚s_num
; i++){

364 
	`TRACE
–
˛ass
, 12, "°¨tög %d", 
i
);

368 
hcd_mëhods
 = (
hcd_mëhods_t
 *Ë
so·
->
hcds
[
i
]->
mëhods
;

369 
hcd_mëhods
->
	`hcd_°¨t
–(*Ë
so·
->
hcds
[
i
] );

373 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

375 
	}
}

378 
	$hub_dëach
–*
so·
){

379 
usbhub_ö°™˚_t
 *
usbhub
 = (usbhub_ö°™˚_à*Ë
so·
;

380 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_ATTACH
;

382 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

384 if–
usbhub
->
hub_ty≥
 =
USB_HUB_PCI
){

390 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

391  
NULL
;

392 
	}
}

395 
	$hub_öfo
–*
so·
){

396 
usbhub_ö°™˚_t
 *
usbhub
 = (usbhub_ö°™˚_à*Ë
so·
;

397 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_ATTACH
;

399 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

401 if–
usbhub
->
hub_ty≥
 =
USB_HUB_PCI
){

407 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

408  
NULL
;

409 
	}
}

412 
	$hub_£t_åa˚_Àvñ
–*
hcd
, *
¨g
){

413 
USB_åa˚_˛ass_t
 *
åa˚_¨g
 = (USB_åa˚_˛ass_à*Ë
¨g
;

414 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_HELPER
;

415 
°r
[256];

416 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

419 
globÆ_åa˚_˛ass
.
˛ass
 = 
åa˚_¨g
->class;

420 
globÆ_åa˚_˛ass
.
Àvñ
 = 
åa˚_¨g
->level;

421 
	`INT2HEX64X
–
°r
, 
globÆ_åa˚_˛ass
.
˛ass
);

422 
	`TRACE
–
˛ass
, 12, "trace class settled; class=%s,Üevel=%d",

423 
°r
, 
globÆ_åa˚_˛ass
.
Àvñ
);

424 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

427 
	}
}

429 
	$upd©e_hub_°©us
–*
hub
, *
öfo
){

430 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_HELPER
;

432 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

433 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

435 
	}
}

438 
	$check_f‹_evít
–*
hub
){

439 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_HELPER
;

440 
usbhub_ö°™˚_t
 *
roŸhub
 = (usbhub_ö°™˚_à*Ë
hub
;

441 
uöt32_t
 
p‹t_num
;

442 
mesßge_id
;

443 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

446 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

447 
	`MUTEX_LOCK
–&
roŸhub
->
muãx
, -1);

449 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "evíts_num=%d", 
roŸhub
->
cd_evíts_num
);

450 if–
roŸhub
->
cd_evíts_num
 >= 1){

452 
p‹t_num
 = 
roŸhub
->
cd_p‹t_evít
[0];

453 
mesßge_id
 = 
roŸhub
->
cd_evít_id
[0];

454 
usbc‹e
 = 
roŸhub
->usbcore;

455 
	`TRACE
–
˛ass
, 10, "sendingÉventÅo usbcore,Öort_num = %d, message_id=%d",

456 
p‹t_num
, 
mesßge_id
);

457 
usbc‹e
->
	`¥o˚ss_evít_‰om_devi˚
–(*)usbc‹e, (*Ë
roŸhub
,

458 
mesßge_id
, (*Ë
p‹t_num
, 
NULL
, NULL);

460 
roŸhub
->
cd_evíts_num
 = 0;

463 
	`MUTEX_UNLOCK
–&
roŸhub
->
muãx
);

465 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

467 
	}
}

471 
	$¥o˚ss_evít_‰om_hcd
–*
hcd
, *
hub
, 
mesßge_id
, *
¨g0
, *
¨g1
){

472 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_HELPER
;

473 
devi˚_hódî_t
 *
hcdp
 = ( devi˚_hódî_à*Ë
hcd
;

474 
usbhub_ö°™˚_t
 *
roŸhub
 = (usbhub_ö°™˚_à*Ë
hub
;

475 
hcd_mëhods_t
 *
hcd_mëhods
;

476 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

477 
uöt32_t
 *
p‹t_num
 = (uöt32_à*Ë
¨g0
;

478 
usb_pùe_t
 *
pùe
;

479 
uöt32_t
 
p‹t_vÆue
 = 0;

480 
£nd_evít
 = 0;

481 
•ìd
;

482 
ul⁄g_t
 
ktime
, 
kdif
;

485 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

486 
	`TRACE
–
˛ass
, 6, "hcd_«mê'%s'", 
hcdp
->
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

487 
	`TRACE
–
˛ass
, 10, "P‹à: %d", *
p‹t_num
);

489 
	`MUTEX_LOCK
–&
roŸhub
->
muãx
, -1);

490 
usbc‹e
 = 
roŸhub
->usbcore;

491  
mesßge_id
){

492 
USB_EVENT_PORT_CONNECT
:

493 
	`TRACE
–
˛ass
, 10, "P‹àc⁄√˘ed : %d", *
p‹t_num
);

494 
hcd_mëhods
 = (
hcd_mëhods_t
 *Ë
hcdp
->
mëhods
;

495 
p‹t_vÆue
 = 
hcd_mëhods
->
	`hcd_gë_p‹t
–(*Ë
hcdp
, (Ë*
p‹t_num
);

496 
roŸhub
->
p‹ts_°©us
[*
p‹t_num
] = 
p‹t_vÆue
;

497 
roŸhub
->
p‹ts_hcds
[*
p‹t_num
] = 
hcdp
;

498 
	`drv_gë∑rm
–
TIME
, &
ktime
);

499 
ktime
 -
roŸhub
->
cd_time_evít
[0];

500 
	`TRACE
–
˛ass
, 10, "ktime diff = %d,Évents_num = %d,Évent0=%d, current_port=%d",

501 
ktime
, 
roŸhub
->
cd_evíts_num
,ÑoŸhub->
cd_p‹t_evít
[0], *
p‹t_num
);

503 if((
roŸhub
->
cd_evíts_num
 == 1) &&

504 (
roŸhub
->
cd_p‹t_evít
[0] =*
p‹t_num
) &&

505 (
ktime
 < 2) ){

506 
roŸhub
->
cd_evíts_num
 = 0;

507 
	`u¡imeout
–
roŸhub
->
cd_ôimeout
);

508 
roŸhub
->
cd_ôimeout
 = 0;

511 
	`TRACE
–
˛ass
, 10, "sendingÉventÅo usbcore", "");

512 
usbc‹e
->
	`¥o˚ss_evít_‰om_devi˚
–(*)usbc‹e, (*Ë
roŸhub
,

513 
USB_EVENT_PORT_CONNECT
, (*Ë*
p‹t_num
, 
NULL
, NULL);

516 
USB_EVENT_PORT_DISCONNECT
:

517 
	`TRACE
–
˛ass
, 10, "P‹àdisc⁄√˘ed : %d", *
p‹t_num
);

518 
	`TRACE
–
˛ass
, 10, "ow√∏%d", 
roŸhub
->
hcd_ow√r
);

519 
	`TRACE
–
˛ass
, 10, "P‹à: %d", *
p‹t_num
);

522 
hcd_mëhods
 = (
hcd_mëhods_t
 *Ë
roŸhub
->
hcds
[roŸhub->
hcd_ow√r
]->
mëhods
;

526 if–
hcdp
 !
roŸhub
->
hcds
[roŸhub->
hcd_ow√r
]){

527 
	`TRACE
–
˛ass
, 10, "recover ownership ofÖort ", "");

530 
hcd_mëhods
->
	`hcd_p‹t_a˘i⁄
–(*Ë
roŸhub
->
hcds
[roŸhub->
hcd_ow√r
],

531 *
p‹t_num
, 
USB_HCD_SET_OWNER
);

535 
roŸhub
->
p‹ts_°©us
[*
p‹t_num
] = 
hcd_mëhods
->
	`hcd_gë_p‹t
(

536 (*Ë
roŸhub
->
hcds
[roŸhub->
hcd_ow√r
], *
p‹t_num
);

538 
	`drv_gë∑rm
–
TIME
, &
ktime
);

539 
	`TRACE
–
˛ass
, 10, "P‹à: %d", *
p‹t_num
);

540 
	`TRACE
–
˛ass
, 10, "ktime=%d,Ö‹t_num=%d,Évnum=%d", 
ktime
, *
p‹t_num
,

541 
roŸhub
->
cd_evíts_num
);

542 
roŸhub
->
cd_p‹t_evít
[roŸhub->
cd_evíts_num
] = *
p‹t_num
;

543 
roŸhub
->
cd_time_evít
[roŸhub->
cd_evíts_num
] = 
ktime
;

544 
roŸhub
->
cd_evít_id
[roŸhub->
cd_evíts_num
] = 
mesßge_id
;

545 
roŸhub
->
cd_evíts_num
++;

546 
roŸhub
->
cd_ôimeout
 = 
	`ôimeout
–
check_f‹_evít
, 
hub
, 
	`drv_u£˘ohz
(1000000), 0);

552 
	`MUTEX_UNLOCK
–&
roŸhub
->
muãx
);

554 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

556 
	}
}

559 
	$hub_¥o˚ss_evít
–*
‹igö
, *
de°
, 
evít_id
, *
¨g
){

560 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_HUB
;

562 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

563 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

565 
	}
}

570 
	$hub_¥o˚ss_evít_‰om_usbc‹e
–*
de°
, 
evít_id
, *
¨g0
, *
¨g1
, *
¨g2
){

571 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_HUB
;

572 
devi˚_hódî_t
 *
hcd
;

573 
usbhub_ö°™˚_t
 *
hub
;

574 
USB_roŸ_hub_°©us_t
 *
°©us
;

575 
hcd_mëhods_t
 *
hcd_mëhods
;

576 
usb_˘æªque°_t
 
ªq
;

577 
hcd_°©us
, 
p‹t_num
, 
•ìd
, 
rc
;

578 
usb_pùe_t
 *
pùe
, **
µùe
;

579 *
r_code
 = (*Ë
¨g1
;

580 
i
, 
j
 = 0;

581 
uhci_num
, 
ehci_num
, 
td_num
;

582 
usb_devi˚_des¸ùt‹_t
 *
döfo
;

583 
td_addr_t
 *
tds
;

584 
usb_debug_vÆues_t
 *
dvÆues
;

585 
uöt32_t
 *
debug›
;

587 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

589 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

590  
evít_id
){

593 
USB_HUB_PORT_RESET
:

594 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

595 
p‹t_num
 = (Ë
¨g0
;

597 
	`TRACE
–
˛ass
, 6, "event = USB_HUB_PORT_RESET from '%s',Öortnum=%d",

598 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
, 
p‹t_num
);

600 
hcd
 = 
hub
->
p‹ts_hcds
[
p‹t_num
];

601 
hcd_mëhods
 = 
hcd
->
mëhods
;

602 
rc
 = 
hcd_mëhods
->
	`hcd_p‹t_a˘i⁄
–(*Ë
hcd
, 
p‹t_num
,

603 
USB_HUB_PORT_RESET
);

604 –
rc
);

607 
USB_HUB_ALLOC_PIPE
:

608 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

609 
p‹t_num
 = (Ë
¨g0
;

610 
µùe
 = (
usb_pùe_t
 **Ë
¨g1
;

611 
tds
 = ( 
td_addr_t
 *Ë
¨g2
;

614 
	`TRACE
–
˛ass
, 6, "evíàUSB_HUB_ALLOC_PIPE from '%s'", 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

617 
hcd_mëhods
 = 
hub
->
p‹ts_hcds
[
p‹t_num
]->
mëhods
;

618 
hcd
 = 
hub
->
p‹ts_hcds
[
p‹t_num
];

619 
pùe
 = 
hcd_mëhods
->
	`hcd_Æloc_c⁄åﬁ_pùe
–(*Ë
hcd
, 
p‹t_num
, 
tds
);

621 
	`TRACE
–
˛ass
, 10, "¨g=0x%x", 
pùe
);

622 *
µùe
 = 
pùe
;

624 –
rc
);

627 
USB_HUB_DESTROY_PIPE
:

628 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

629 
pùe
 = (
usb_pùe_t
 *Ë
¨g0
;

630 
hcd
 = ( 
devi˚_hódî_t
 *Ë
pùe
->hcd;

633 
	`TRACE
–
˛ass
, 6, "evíàUSB_HUB_DESTROY_PIPE from '%s'", 
hub
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

634 
	`TRACE
–
˛ass
, 10, "¨g=0x%x", 
pùe
);

636 
hcd
 = 
hub
->
p‹ts_hcds
[
pùe
->
p‹t_num
];

637 
hcd_mëhods
 = 
hub
->
p‹ts_hcds
[
pùe
->
p‹t_num
]->
mëhods
;

638 
hcd_mëhods
->
	`hcd_‰ì_pùe
–(*Ë
hcd
, 
pùe
);

639 –
rc
);

642 
USB_HUB_SET_ADDRESS
:

643 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

644 
p‹t_num
 = (Ë
¨g0
;

645 
pùe
 = ( 
usb_pùe_t
 *Ë
¨g1
;

647 
pùe
->
max∑ckë
 = 8;

648 
pùe
->
•ìd
 = 
	`USB_PORT_GET_SPEED
–
hub
->
p‹ts_°©us
[
p‹t_num
]);

649 
pùe
->
å™s„r_ty≥
 = 
USB_DIR_OUT
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
;

650 
hcd
 = 
pùe
->hcd;

652 
hcd_mëhods
 = 
hcd
->
mëhods
;

653 
	`USECDELAY
( 10000);

655 
ªq
.
bReque°Ty≥
 = 
USB_DIR_OUT
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
;

656 
ªq
.
bReque°
 = 
USB_REQ_SET_ADDRESS
;

657 
ªq
.
wVÆue
 = 
	`B2LENDIAN
((
uöt16_t
)(
hub
->
maxaddr
 + 1));

658 
ªq
.
wIndex
 = 0;

659 
ªq
.
wLígth
 = 0;

663 
rc
 = 
hcd_mëhods
->
	`hcd_£nd_c⁄åﬁ
(

664 (*Ë
hcd
, 
pùe
, 
ªq
.
bReque°Ty≥
 & 
USB_DIR_IN
,

665 (*Ë&
ªq
, –
usb_˘æªque°_t
), 
NULL
,Ñeq.
wLígth
 );

671 
	`TRACE
–
˛ass
, 6, "SET ADDRESS IS UP AND RUNNING!!", "");

673 
	`USECDELAY
( 2000);

674 
hub
->
maxaddr
++;

675 
pùe
->
devaddr
 = 
hub
->
maxaddr
;

676 –
rc
);

678 
USB_GET_DEVICE_INFO8
:

679 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

680 
pùe
 = ( 
usb_pùe_t
 *Ë
¨g0
;

681 
döfo
 = ( 
usb_devi˚_des¸ùt‹_t
 *Ë
¨g1
;

683 
	`bzîo
–(*Ë
döfo
, –
usb_devi˚_des¸ùt‹_t
));

684 
ªq
.
bReque°Ty≥
 = 
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
;

685 
ªq
.
bReque°
 = 
USB_REQ_GET_DESCRIPTOR
;

686 
ªq
.
wVÆue
 = 
	`B2LENDIAN
((
uöt16_t
)
USB_DT_DEVICE
<<8);

687 
ªq
.
wIndex
 = 0;

688 
ªq
.
wLígth
 = 8;

690 
rc
 = 
hcd_mëhods
->
	`hcd_£nd_c⁄åﬁ
(

691 (*Ë
hcd
, 
pùe
, 
ªq
.
bReque°Ty≥
 & 
USB_DIR_IN
,

692 (*Ë&
ªq
, –
usb_˘æªque°_t
), (*Ë
döfo
,Ñeq.
wLígth
 );

694 –
rc
);

696 
USB_GET_DESCRIPTOR
:

697 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

698 
pùe
 = ( 
usb_pùe_t
 *Ë
¨g0
;

699 
döfo
 = ( 
usb_devi˚_des¸ùt‹_t
 *Ë
¨g1
;

701 
	`bzîo
–(*Ë
döfo
, –
usb_devi˚_des¸ùt‹_t
));

702 
ªq
.
bReque°Ty≥
 = 
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
;

703 
ªq
.
bReque°
 = 
USB_REQ_GET_DESCRIPTOR
;

704 
ªq
.
wVÆue
 = 
	`B2LENDIAN
((
uöt16_t
)
USB_DT_DEVICE
<<8);

705 
ªq
.
wIndex
 = 0;

706 
ªq
.
wLígth
 = 18;

708 
rc
 = 
hcd_mëhods
->
	`hcd_£nd_c⁄åﬁ
(

709 (*Ë
hcd
, 
pùe
, 
ªq
.
bReque°Ty≥
 & 
USB_DIR_IN
,

710 (*Ë&
ªq
, –
usb_˘æªque°_t
), (*Ë
döfo
,Ñeq.
wLígth
 );

712 –
rc
);

714 
USB_HCD_GET_INSTANCE_ID
:

715 
hcd
 = ( 
devi˚_hódî_t
 *Ë
¨g0
;

716 
	`TRACE
–
˛ass
, 6, "hcd_«mê'%s'", 
hcd
->
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

718 if–
num_hcds_ö_°ack
 == 0){

719 *
r_code
 = 0;

723 
j
 = 0;

724  
i
 = 0; i < 
num_hcds_ö_°ack
; i++){

725 if–
hcd
->
moduÀ_hódî
->
moduÀ_id
 =
hcd_°ack
[
i
]->module_header->module_id)

726 
j
++;

729 *
r_code
 = 
j
;

732 
USB_HCD_ATTACHED_EVENT
:

733 
hcd
 = ( 
devi˚_hódî_t
 *Ë
¨g0
;

734 
	`TRACE
–
˛ass
, 6, "hcd_«mê'%s'", 
hcd
->
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

736 if–
num_hcds_ö_°ack
 >
USB_HUB_MAX_STACK
)

740 
hcd_°ack
[
num_hcds_ö_°ack
++] = 
hcd
;

742 if–
num_hcds_ö_°ack
 == 1){

743 *
r_code
 = 1;

747 if–
num_hcds_ö_°ack
 == 3){

748 
ehci_num
 = 
uhci_num
 = 0;

750  
i
 = 0; i < 
num_hcds_ö_°ack
; i++){

751 if–
hcd_°ack
[
i
]->
moduÀ_hódî
->
moduÀ_id
 =
USB_MOD_EHCI
)

752 
ehci_num
++;

753 if–
hcd_°ack
[
i
]->
moduÀ_hódî
->
moduÀ_id
 =
USB_MOD_UHCI
)

754 
uhci_num
++;

757 if–
ehci_num
 =1 && 
uhci_num
 == 2){

759 
	`TRACE
–
˛ass
, 10, "Device is complete", "");

760 
	`hub_©èch
–
NULL
, 
USB_HUB_PCI
);

762 *
r_code
 = 2;

766 *
r_code
 = 2;

768 
USB_HUB_DEVICE_GET_STATUS
:

769 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

770 
°©us
 = (
USB_roŸ_hub_°©us_t
 *Ë
¨g0
;

773 
°©us
->
p‹ts_numbî
 = 
hub
->ports_number;

774 
hcd_°©us
 = 0;

777  
i
 = 0; i < 
hub
->
hcd_ö°™˚s_num
; i++){

778 
hcd_mëhods
 = (
hcd_mëhods_t
 *Ë
hub
->
hcds
[
i
]->
mëhods
;

779 
hcd_°©us
 |
hcd_mëhods
->
	`hcd_°©us
–(*Ë
hub
->
hcds
[
i
] );

781 if–
hcd_°©us
 == 0){

782 
°©us
->
hc_c⁄dôi⁄
 = 
USB_HC_OK
;

784 
°©us
->
hc_c⁄dôi⁄
 = 
USB_HC_ERROR
;

788 
USB_SET_DEBUG_VALUES
:

789 
hub
 = ( 
usbhub_ö°™˚_t
 *Ë
de°
;

790 
dvÆues
 = (
USB_roŸ_hub_°©us_t
 *Ë
¨g0
;

792  
i
 = 0; i < 
num_hcds_ö_°ack
; i++){

793 if–
hcd_°ack
[
i
]->
moduÀ_hódî
->
moduÀ_id
 =
USB_MOD_UHCI
){

794 
rc
 = 
hcd_mëhods
->
	`hcd_£t_debug_vÆues
–(*Ë
hcd
, (*Ë
dvÆues
);

802 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

804 
	}
}

811 
	$usbhub_öô
(){

812 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_INIT
;

813 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

815 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 0, "start", "");

816 
	`¥ötf
( "**********************************************************\n");

817 
	`¥ötf
( "* USBHUB Driver for Silicon Graphics Irix 6.5 *\n");

818 
	`¥ötf
( "* By bsderoát gmail dot org, 2012 *\n");

819 
	`¥ötf
–"* Vîsi⁄ %† *\n", 
USBCORE_DRV_VERSION
);

820 
	`¥ötf
–"* Sequí˚ %† *\n", 
USBCORE_DRV_SEQ
);

821 
	`¥ötf
( "**********************************************************\n", "");

822 
	`¥ötf
( "usbhub kernel moduleÜoaded! \n", "");

823 
	`¥ötf
–"_dügöfo_: Kî√»usbhub moduÀ ba£áddªss: 0x%x\n", 
moduÀ_addªss
);

827 
	`gc_li°_öô
–&
gc_li°
);

830 
usbc‹e
 = 
	`gë_usbc‹e
();

831 
usbc‹e
->
	`ªgi°î_moduÀ
––*Ë&
hub_hódî
);

845 
	`TRACE
–
˛ass
, 0, "USBHUB DriverÜoaded!", "");

846 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

847 
	}
}

849 
	$usbhub_u∆ﬂd
(){

850 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

851 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_UNLOAD
;

854 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

855 
	`TRACE
–
˛ass
, 0, "USBHUB Driver unloaded!", "");

859 
usbc‹e
 = 
	`gë_usbc‹e
();

860 
usbc‹e
->
	`uƒegi°î_moduÀ
––*Ë&
hub_hódî
);

862 
	`gc_li°_de°roy
–&
gc_li°
);

863 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

865 
	}
}

868 
	$usbhub_ªg
(){

870 
	}
}

872 
	$usbhub_uƒeg
(){

873 i‡(
usbhub_busy
)

877 
	}
}

879 
	$usbhub_©èch
(
vîãx_hdl_t
 
c⁄n
){

881 
	}
}

883 
	$usbhub_dëach
(
vîãx_hdl_t
 
c⁄n
){

886 
	}
}

889 
	$usbhub_›í
(
dev_t
 *
devp
, 
Êag
, 
Ÿyp
, 
¸ed
 *
¸p
){

890 
vîãx_hdl_t
 
vhdl
;

891 
usbhub_ö°™˚_t
 *
so·
;

892 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_OPEN
;

894 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

895 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

898 
	}
}

901 
	$usbhub_˛o£
(
dev_t
 
dev
){

902 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_CLOSE
;

903 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

905 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

907 
	}
}

910 
	$usbhub_ªad
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
){

911  
EOPNOTSUPP
;

912 
	}
}

915 
	$usbhub_wrôe
(){

916  
EOPNOTSUPP
;

917 
	}
}

921 
	$usbhub_io˘l
(
dev_t
 
dev
, 
cmd
, *
u¨g
, 
mode
, 
¸ed_t
 *
¸p
, *
rvÆp
){

922 
uöt64_t
 
˛ass
 = 
TRC_MOD_HUB
 | 
TRC_IOCTL
;

923 
rc
 = 0;

924 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

925 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

927  *
rvÆp
 = 
rc
;

929 
	}
}

932 
	$usbhub_m≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
, 
off_t
 
off
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
){

934 
	}
}

937 
	$usbhub_unm≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
){

939 
	}
}

	@usbio.h

24 #i‚de‡
_USBIO_H_


25 
	#_USBIO_H_


	)

30 
	#_IOCTL_RMASK
 (0x0100)

	)

31 
	#_IOCTL_WMASK
 (0x0200)

	)

33 
	#_IOCTL_
(
c
,
v
Ë(()(¯<< 8 | v))

	)

34 
	#_IOCTL_R
(
c
,
v
,
n
Ë(()–
_IOCTL_RMASK
 | (–nË<< 18Ë| 
	`_IOCTL_
(c,v)))

	)

35 
	#_IOCTL_W
(
c
,
v
,
n
Ë(()–
_IOCTL_WMASK
 | (–nË<< 18Ë| 
	`_IOCTL_
(c,v)))

	)

36 
	#_IOCTL_WR
(
c
,
v
,
n
Ë(()–
_IOCTL_RMASK
 | 
_IOCTL_WMASK
 | (–nË<< 18Ë| 
	`_IOCTL_
(c,v)))

	)

38 
	#_IOCTL_GETC
(
c
Ë(–¯>> 8Ë& 0xff)

	)

39 
	#_IOCTL_GETN
(
n
Ë“ & 0xff)

	)

40 
	#_IOCTL_GETS
(
s
Ë(–†>> 18Ë& 0xffff)

	)

	@usbioctl.h

41 #i‚de‡
_USBIOCTL_H_


42 
	#_USBIOCTL_H_


	)

44 
	~<sys/ty≥s.h
>

45 
	~"usbio.h
"

87 
	#IOCTL_USB_GET_DRIVER_INFO
 
	`_IOCTL_R
('D', 1, 
USB_drivî_öfo_t
)

	)

90 
	ml⁄g_«me
[128];

91 
	msh‹t_«me
[16];

92 
	mvîsi⁄
[16];

93 
	msh‹t_vîsi⁄
[8];

94 
	m£qn
[32];

95 
	mbuûd_d©e
[16];

96 
	mª£rved
[40];

97 } 
	tUSB_drivî_öfo_t
;

109 
	#IOCTL_USB_GET_NUM_MODULES
 
	`_IOCTL_R
('D', 2, )

	)

121 
	#IOCTL_USB_GET_MODULE_INFO
 
	`_IOCTL_WR
('D', 3, 
USB_drivî_moduÀ_öfo_t
)

	)

124 
	mnum_moduÀ
;

125 
uöt32_t
 
	mmoduÀ_id
;

126 
	#USB_MOD_CORE
 0x00

	)

127 
	#USB_MOD_EHCI
 0x01

	)

128 
	#USB_MOD_UHCI
 0x02

	)

129 
	#USB_MOD_OHCI
 0x03

	)

130 
	#USB_MOD_XHCI
 0x04

	)

131 
	#USB_MOD_HUB
 0x05

	)

133 
	msh‹t_des¸ùti⁄
[12];

134 
	ml⁄g_des¸ùti⁄
[80];

135 
	mmoduÀ_«me
[32];

136 
uöt32_t
 
	mty≥
;

137 
	#USB_DRIVER_IS_HCD
 0

	)

138 
	#USB_DRIVER_IS_CORE
 1

	)

139 
	#USB_DRIVER_IS_USB_DEVICE
 2

	)

141 } 
	tUSB_drivî_moduÀ_öfo_t
;

154 
	#IOCTL_USB_GET_ROOT_HUB_INFO
 
	`_IOCTL_R
('D', 4, 
USB_roŸ_hub_öfo_t
)

	)

157 
	mhub_ty≥
;

158 
	#USB_HUB_PCI
 0x01

	)

159 
	#USB_HUB_USB
 0x02

	)

161 
	mhub_ödex
;

162 
	mhub_∑ª¡
;

163 
uch¨_t
 
	mhcd_drivîs
;

164 
	#USB_UHCI
 0x01

	)

165 
	#USB_EHCI
 0x02

	)

166 
	#USB_OHCI
 0x04

	)

167 
	#USB_XHCI
 0x08

	)

169 
uch¨_t
 
	mpci_bus
;

170 
uch¨_t
 
	mpci_¶Ÿ
;

171 
	mpci_fun˘i⁄
;

172 
uöt16_t
 
	m¥odu˘_id
;

173 
uöt16_t
 
	mvíd‹_id
;

174 
uch¨_t
 
	mh¨dw¨e_des¸ùti⁄
[80];

175 
	mp‹ts_numbî
;

176 
uöt16_t
 
	maddªss
;

177 
uch¨_t
 
	mfs_devi˚
[80];

178 } 
	tUSB_roŸ_hub_öfo_t
;

197 
	#TRC_INIT
 0x0000000000000001

	)

198 
	#TRC_UNLOAD
 0x0000000000000002

	)

199 
	#TRC_ATTACH
 0x0000000000000004

	)

200 
	#TRC_DETACH
 0x0000000000000008

	)

201 
	#TRC_OPEN
 0x0000000000000010

	)

202 
	#TRC_CLOSE
 0x0000000000000020

	)

203 
	#TRC_READ
 0x0000000000000040

	)

204 
	#TRC_WRITE
 0x0000000000000080

	)

205 
	#TRC_IOCTL
 0x0000000000000100

	)

206 
	#TRC_STRATEGY
 0x0000000000000200

	)

207 
	#TRC_POLL
 0x0000000000000400

	)

208 
	#TRC_MAP
 0x0000000000000800

	)

209 
	#TRC_INTR
 0x0000000000001000

	)

210 
	#TRC_ERRFUNC
 0x0000000000002000

	)

211 
	#TRC_HALT
 0x0000000000004000

	)

215 
	#TRC_GC_DMA
 0x0000000000010000

	)

216 
	#TRC_HELPER
 0x0000000000020000

	)

217 
	#TRC_MESSAGES
 0x0000000000040000

	)

218 
	#TRC_EVENTS
 0x0000000000080000

	)

219 
	#TRC_ERROR
 0x0000000000100000

	)

220 
	#TRC_WARNING
 0x0000000000200000

	)

221 
	#TRC_START_END
 0x0000000000400000

	)

225 
	#TRC_MOD_UHCI
 0x0000000100000000

	)

226 
	#TRC_MOD_EHCI
 0x0000000200000000

	)

227 
	#TRC_MOD_OHCI
 0x0000000400000000

	)

228 
	#TRC_MOD_XHCI
 0x0000000800000000

	)

229 
	#TRC_MOD_CORE
 0x0000001000000000

	)

230 
	#TRC_MOD_HUB
 0x0000002000000000

	)

234 
	#TRC_NO_MESSAGES
 0x0000000000000000

	)

235 
	#TRC_ENTRY_POINTS
 0x000000000000fff‡

	)

236 
	#TRC_ALL_FUNCTIONALITIES
 0x0000000000ff0000

	)

239 
	#TRC_HCD_SET
(
x
Ë(x << 32)

	)

240 
	#TRC_HCD_GET
(
x
Ë((x >> 32Ë& 0x0000000f)

	)

243 
	#TRC_ALL_MODULES
 0x000000ff00000000

	)

244 
	#TRC_ALL_HCD_MODULES
 0x0000000f00000000

	)

246 
	#TRC_ALL
 0xfffffffffffffff‡

	)

250 
	#IOCTL_USB_SET_DEBUG_LEVEL
 
	`_IOCTL_W
('D', 5, 
USB_åa˚_˛ass_t
)

	)

251 
	#IOCTL_USB_GET_DEBUG_LEVEL
 
	`_IOCTL_R
('D', 6, 
USB_åa˚_˛ass_t
)

	)

254 
uch¨_t
 
	mÀvñ
;

255 
uöt64_t
 
	m˛ass
;

256 }
	tUSB_åa˚_˛ass_t
;

268 
	#IOCTL_USB_GET_ROOT_HUB_STATUS
 
	`_IOCTL_R
('D', 6, 
USB_roŸ_hub_°©us_t
)

	)

271 
	#USB_HUB_MAX_PORTS
 16

	)

272 
uöt32_t
 
	mp‹ts_°©us
[
USB_HUB_MAX_PORTS
];

273 
	#USB_PORT_CONNECTED
 0x00000001

	)

274 
	#USB_PORT_ENABLED
 0x00000002

	)

275 
	#USB_PORT_SUSPENDED
 0x00000004

	)

276 
	#USB_PORT_IN_USE
 0x00000008

	)

278 
	#USB_PORT_FULL_SPEED
 0x00000010

	)

279 
	#USB_PORT_LOW_SPEED
 0x00000020

	)

280 
	#USB_PORT_HIGH_SPEED
 0x00000040

	)

281 
	#USB_PORT_GET_SPEED
–
x
Ë((x >> 4Ë& 0x0007)

	)

283 
	#USB_PORT_UHCI
 
USB_UHCI


	)

284 
	#USB_PORT_EHCI
 
USB_EHCI


	)

285 
	#USB_PORT_OHCI
 
USB_OHCI


	)

286 
	#USB_PORT_XHCI
 
USB_XHCI


	)

288 
	#USB_PORT_GET_HCD_OWNER
(
x
Ë((x >> 8Ë& 0x000F)

	)

289 
	#USB_PORT_SET_HCD_OWNER
(
x
Ë(x << 8)

	)

292 
	#USB_PORT_STATUS_OK
 0x00001000

	)

293 
	#USB_PORT_STATUS_ERROR
 0x00002000

	)

295 
	#USB_PORT_POWER
 0x00010000

	)

297 
uöt32_t
 
	mhc_c⁄dôi⁄
;

298 
	#USB_HC_OK
 0x00

	)

299 
	#USB_HC_ERROR
 0x01

	)

300 
	mp‹ts_numbî
;

301 }
	tUSB_roŸ_hub_°©us_t
;

316 
	#IOCTL_USB_GET_DEVICE
 
	`_IOCTL_WR
('U', 1, 
USB_devi˚_t
)

	)

318 
uöt16_t
 
	mdevi˚_ödex
;

319 
	mh¨dw¨e_des¸ùti⁄
[80];

320 
	mfs_devi˚
[80];

321 
uöt32_t
 
	mdevi˚_id
;

322 
uöt32_t
 
	mvíd‹_id
;

323 
uöt32_t
 
	m˛ass_id
;

324 
uöt32_t
 
	möãrÁ˚_id
;

325 
uöt32_t
 
	mö°™˚_id
;

326 
öt16_t
 
	mhub_ödex
;

327 
uöt16_t
 
	mp‹t_ödex
;

329 
	#USB_DEVICE_STATUS_OK
 0

	)

330 
	#USB_DEVICE_STATUS_ERROR
 1

	)

332 
uch¨_t
 
	m°©us
;

333 
uöt16_t
 
	mty≥
;

334 
uöt16_t
 
	msubty≥
;

335 
uöt16_t
 
	msubty≥2
;

336 
uch¨_t
 
	mid_°rög
[48];

337 
uch¨_t
 
	m£rül_numbî
;

338 
uch¨_t
 
	mvíd‹_°r
[48];

339 
uch¨_t
 
	m¥odu˘_°r
[48];

340 
uch¨_t
 
	mmoduÀ_«me
[16];

341 
uöt32_t
 
	mmoduÀ_id
;

342 
uöt16_t
 
	maddªss
;

343 
uöt32_t
 
	m•ec_devi˚_ö°™˚_id
;

344 }
	tUSB_devi˚_t
;

356 
	#IOCTL_USB_GET_DEVICES_NUM
 
	`_IOCTL_R
('U', 2, )

	)

368 
	#IOCTL_USB_CONTROL
 
	`_IOCTL_WR
('U', 3, 
usb_˘æå™s„r
)

	)

369 
	susb_˘æå™s„r
 {

371 
uöt8_t
 
	mbReque°Ty≥
;

372 
uöt8_t
 
	mbReque°
;

373 
uöt16_t
 
	mwVÆue
;

374 
uöt16_t
 
	mwIndex
;

375 
uöt16_t
 
	mwLígth
;

377 
uöt32_t
 
	mtimeout
;

378 *
	md©a
;

380 
usb_˘æå™s„r
 
	tusb_˘æå™s„r_t
;

392 
	#IOCTL_USB_BULK
 
	`_IOCTL_WR
('U', 4, 
usb_bulkå™s„r
)

	)

393 
	susb_bulkå™s„r
 {

395 
	mï
;

396 
	mÀn
;

397 
	mtimeout
;

398 *
	md©a
;

400 
usb_bulkå™s„r
 
	tusb_bulkå™s„r_t
;

412 
	#IOCTL_USB_RESETEP
 
	`_IOCTL_W
('U', 5, )

	)

424 
	#IOCTL_USB_SETINTF
 
	`_IOCTL_W
('U', 6, 
usb_£töãrÁ˚
)

	)

425 
	susb_£töãrÁ˚
 {

427 
	möãrÁ˚
;

428 
	mÆt£âög
;

430 
usb_£töãrÁ˚
 
	tusb_£töãrÁ˚_t
;

442 
	#IOCTL_USB_SETCONFIG
 
	`_IOCTL_W
('U', 7, )

	)

454 
	#IOCTL_USB_GETDRIVER
 
	`_IOCTL_R
('U', 8, 
usb_gëdrivî
)

	)

456 
	#USB_MAXDRIVERNAME
 255

	)

457 
	susb_gëdrivî
 {

458 
	möãrÁ˚
;

459 
	mdrivî
[
USB_MAXDRIVERNAME
 + 1];

461 
usb_gëdrivî
 
	tusb_gëdrivî_t
;

473 
	#IOCTL_USB_SUBMITURB
 
	`_IOCTL_W
('U', 9, 
usb_urb
)

	)

474 
	#USB_URB_DISABLE_SPD
 1

	)

475 
	#USB_URB_ISO_ASAP
 2

	)

476 
	#USB_URB_QUEUE_BULK
 0x10

	)

478 
	#USB_URB_TYPE_ISO
 0

	)

479 
	#USB_URB_TYPE_INTERRUPT
 1

	)

480 
	#USB_URB_TYPE_CONTROL
 2

	)

481 
	#USB_URB_TYPE_BULK
 3

	)

483 
	susb_iso_∑ckë_desc
 {

484 
	mÀngth
;

485 
	ma˘uÆ_Àngth
;

486 
	m°©us
;

489 
	susb_urb
 {

490 
	mty≥
;

491 
	mídpoöt
;

492 
	m°©us
;

493 
	mÊags
;

494 *
	mbuf„r
;

495 
	mbuf„r_Àngth
;

496 
	ma˘uÆ_Àngth
;

497 
	m°¨t_‰ame
;

498 
	mnumbî_of_∑ckës
;

499 
	mîr‹_cou¡
;

500 
	msigƒ
;

501 *
	mu£rc⁄ãxt
;

502 
usb_iso_∑ckë_desc
 
	miso_‰ame_desc
;

504 
usb_iso_∑ckë_desc
 
	tusb_iso_∑ckë_desc_t
;

505 
usb_urb
 
	tusb_urb_t
;

517 
	#IOCTL_USB_DISCARDURB
 
	`_IOCTL_
('U', 10)

	)

529 
	#IOCTL_USB_REAPURB
 
	`_IOCTL_R
('U', 11, *)

	)

541 
	#IOCTL_USB_REAPURBNDELAY
 
	`_IOCTL_R
('U', 12, *)

	)

553 
	#IOCTL_USB_CLAIMINTF
 
	`_IOCTL_W
('U', 13, )

	)

565 
	#IOCTL_USB_RELEASEINTF
 
	`_IOCTL_W
('U', 14, )

	)

576 
	#IOCTL_USB_CONNECTINFO
 
	`_IOCTL_W
('U', 15, 
usb_c⁄√˘öfo
)

	)

577 
	susb_c⁄√˘öfo
 {

578 
	mdevnum
;

579 
	m¶ow
;

581 
usb_c⁄√˘öfo
 
	tusb_c⁄√˘öfo_t
;

588 
	#IOCTL_USB_IOCTL
 
	`_IOCTL_WR
('U', 16, 
usb_io˘l
)

	)

590 
	susb_io˘l
 {

591 
	mi‚o
;

592 
	mio˘l_code
;

594 *
	md©a
;

596 
usb_io˘l
 
	tusb_io˘l_t
;

608 
	#IOCTL_USB_HUB_PORTINFO
 
	`_IOCTL_R
('U', 17, 
usb_hub_p‹töfo
)

	)

610 
	susb_hub_p‹töfo
 {

611 
	mnump‹ts
;

612 
	mp‹t
[127];

625 
	#IOCTL_USB_RESET
 
	`_IOCTL_
('U', 18)

	)

637 
	#IOCTL_USB_CLEAR_HALT
 
	`_IOCTL_W
('U', 19, )

	)

649 
	#IOCTL_USB_DISCONNECT
 
	`_IOCTL_
('U', 20)

	)

661 
	#IOCTL_USB_CONNECT
 
	`_IOCTL_
('U', 21)

	)

670 
	#IOCTL_USB_POLL_START
 
	`_IOCTL_
('U', 22)

	)

671 
	#IOCTL_USB_POLL_END
 
	`_IOCTL_
('U', 23)

	)

672 
	#IOCTL_USB_POLL_GET_NEXT_EVENT
 
	`_IOCTL_R
('U', 24, 
usb_evít_t
)

	)

673 
	#IOCTL_USB_SUSCRIBE_EVENTS
 
	`_IOCTL_W
('U', 25, 
uöt32_t
)

	)

674 
	#IOCTL_USB_POLL_GET_EVENTS_NUM
 
	`_IOCTL_R
('U', 26, )

	)

676 
	#USB_EVENT_PORT_CONNECT
 0x00000001

	)

677 
	#USB_EVENT_PORT_DISCONNECT
 0x00000002

	)

678 
	#USB_EVENT_HUB_ERROR
 0x00000004

	)

679 
	#USB_EVENT_DEVICE_DETECTED
 0x00000008

	)

683 
uöt32_t
 
	mevít_id
;

684 
uöt32_t
 
	m∑øm
;

685 }
	tusb_evít_t
;

695 
uöt32_t
 
	mid
;

696 
uöt32_t
 
	mvÆues
[8];

697 }
	tusb_debug_vÆues_t
;

699 
	#IOCTL_USB_SET_DEBUG_VALUES
 
	`_IOCTL_W
('U', 90, 
usb_debug_vÆues_t
)

	)

702 
	#IOCTL_USB_RUN_DEBUG_OP
 
	`_IOCTL_W
('U', 91, 
uöt32_t
)

	)

710 
	#usbfs_˘æå™s„r
 
usb_˘æå™s„r


	)

711 
	#usbfs_bulkå™s„r
 
usb_bulkå™s„r


	)

712 
	#usbfs_£töãrÁ˚
 
usb_£töãrÁ˚


	)

713 
	#usbfs_gëdrivî
 
usb_gëdrivî


	)

714 
	#usbfs_urb
 
usb_urb


	)

715 
	#usbfs_c⁄√˘öfo
 
usb_c⁄√˘öfo


	)

716 
	#usbfs_io˘l
 
usb_io˘l


	)

717 
	#usbfs_hub_p‹töfo
 
usb_hub_p‹töfo


	)

719 
	#IOCTL_USBFS_CONTROL
 
IOCTL_USB_CONTROL


	)

720 
	#IOCTL_USBFS_BULK
 
IOCTL_USB_BULK


	)

721 
	#IOCTL_USBFS_RESETEP
 
IOCTL_USB_RESETEP


	)

722 
	#IOCTL_USBFS_SETINTF
 
IOCTL_USB_SETINTF


	)

723 
	#IOCTL_USBFS_SETCONFIG
 
IOCTL_USB_SETCONFIG


	)

724 
	#IOCTL_USBFS_GETDRIVER
 
IOCTL_USB_GETDRIVER


	)

725 
	#IOCTL_USBFS_SUBMITURB
 
IOCTL_USB_SUBMITURB


	)

726 
	#IOCTL_USBFS_DISCARDURB
 
IOCTL_USB_DISCARDURB


	)

727 
	#IOCTL_USBFS_REAPURB
 
IOCTL_USB_REAPURB


	)

728 
	#IOCTL_USBFS_REAPURBNDELAY
 
IOCTL_USB_REAPURBNDELAY


	)

729 
	#IOCTL_USBFS_CLAIMINTF
 
IOCTL_USB_CLAIMINTF


	)

730 
	#IOCTL_USBFS_RELEASEINTF
 
IOCTL_USB_RELEASEINTF


	)

731 
	#IOCTL_USBFS_CONNECTINFO
 
IOCTL_USB_CONNECTINFO


	)

732 
	#IOCTL_USBFS_IOCTL
 
IOCTL_USB_IOCTL


	)

733 
	#IOCTL_USBFS_HUB_PORTINFO
 
IOCTL_USB_HUB_PORTINFO


	)

734 
	#IOCTL_USBFS_RESET
 
IOCTL_USB_RESET


	)

735 
	#IOCTL_USBFS_CLEAR_HALT
 
IOCTL_USB_CLEAR_HALT


	)

736 
	#IOCTL_USBFS_DISCONNECT
 
IOCTL_USB_DISCONNECT


	)

737 
	#IOCTL_USBFS_CONNECT
 
IOCTL_USB_CONNECT


	)

	@usbtool.c

89 #i‚de‡
_IRIX_


90 
	tuch¨_t
;

92 
	~<°dio.h
>

93 
	~<°dlib.h
>

94 
	~<uni°d.h
>

95 
	~<î∫o.h
>

96 
	~<f˙é.h
>

97 
	~<time.h
>

98 
	~<˘y≥.h
>

99 
	~<°rög.h
>

100 
	~<sys/io˘l.h
>

101 
	~<sys/ty≥s.h
>

102 
	~"usbio˘l.h
"

103 
	~"kutûs.c
"

104 
	~"kv¨r.h
"

106 
	#USBTL_OPTION_HELP
 1

	)

107 
	#USBTL_OPTION_CORE
 2

	)

108 
	#USBTL_OPTION_ROOTHUB
 3

	)

109 
	#USBTL_OPTION_USBDEVICE
 4

	)

110 
	#USBTL_OPTION_API
 5

	)

111 
	#USBTL_OPTION_INTERACTIVE
 6

	)

114 
	#USBTL_OPTION_VERBOSE
 0x0001

	)

115 
	#USBTL_OPTION_LIST
 0x0002

	)

116 
	#USBTL_OPTION_INFO
 0x0004

	)

117 
	#USBTL_OPTION_STATUS
 0x0008

	)

118 
	#USBTL_OPTION_DEVICE
 0x0010

	)

119 
	#USBTL_OPTION_FILE
 0x0020

	)

120 
	#USBTL_OPTION_ALL
 0x0040

	)

121 
	#USBTL_OPTION_XML
 0x0080

	)

122 
	#USBTL_OPTION_SHELL
 0x0100

	)

126 
	#USBTL_OPTION_TRACELEVEL
 10

	)

127 
	#USBTL_OPTION_MODULES
 11

	)

128 
	#USBTL_OPTION_TREE
 13

	)

129 
	#USBTL_OPTION_STATS
 14

	)

130 
	#USBTL_OPTION_EVENTS
 15

	)

133 
	#USBTL_OPTION_START
 20

	)

134 
	#USBTL_OPTION_RESET
 21

	)

135 
	#USBTL_OPTION_HALT
 22

	)

136 
	#USBTL_OPTION_SHUTDOWN
 23

	)

137 
	#USBTL_OPTION_DUMP
 24

	)

138 
	#USBTL_OPTION_SUSPEND
 25

	)

139 
	#USBTL_OPTION_WAKEUP
 26

	)

140 
	#USBTL_OPTION_PORT_RESET
 27

	)

141 
	#USBTL_OPTION_STOP
 28

	)

144 
	#USBTL_OPTION_TEST
 30

	)

149 
	#USBTL_ACTION_INTERACTIVE
 1

	)

150 
	#USBTL_ACTION_HELP
 2

	)

151 
	#USBTL_ACTION_DRIVER_INFO
 3

	)

152 
	#USBTL_ACTION_DISPLAY_MODULES
 4

	)

153 
	#USBTL_ACTION_ROOT_HUB_INFO
 5

	)

154 
	#USBTL_ACTION_ROOT_HUB_INFO_ALL
 6

	)

155 
	#USBTL_ACTION_ROOT_HUB_STATUS
 7

	)

156 
	#USBTL_ACTION_DISPLAY_TRACE_LEVEL
 8

	)

157 
	#USBTL_ACTION_SET_TRACE_LEVEL
 9

	)

158 
	#USBTL_ACTION_SHOW_DEVICES
 10

	)

159 
	#USBTL_ACTION_SHOW_DEVICES_TREE
 11

	)

163 
	#USBTL_DISPLAY_FMTHUMAN
 0

	)

164 
	#USBTL_DISPLAY_FMTSHELL
 1

	)

165 
	#USBTL_DISPLAY_FMTXML
 2

	)

172 (*
	tfunc_t
)(*);

175 *
ˇ±i⁄
;

176 
func_t
 
func
;

177 
key
;

178 }
	tmíu_ôem_t
;

186 
	`di•œy_míu
(*
ôems1
, *
ôems2
);

187 
	`di•œy_míu_∑π
–*
míu_ôems
);

188 
	`míu_size
–
míu_ôem_t
 *
míu
);

189 
	`run_míu
(
míu_ôem_t
 *
ôems1
, míu_ôem_à*
ôems2
);

190 
	`∑r£_löe_comm™d
–
¨gc
, **
¨gv
, **
°ørgs
);

191 
	`∑r£_c‹e_›ti⁄s
–
¨gc
, **
¨gv
, **
°ørgs
);

192 
	`£¨ch_gíîic_›ti⁄s
–
¨gc
, **
¨gv
, *
num_›ti⁄s
);

193 
	`is_›ti⁄
–*
°r
, *
°r2
, *
Àâî
);

194 
	`show_åa˚_˛ass
();

195 
	`show_hñp
();

196 
	`£t_åa˚_˛ass_¨gs
–*
°æevñ
, *
°r˛ass
);

204 
	`exô_fun˘i⁄
–*
p
);

205 
	`i_›í_devi˚
(*
p
);

206 
	`›í_devi˚
(*
p
);

207 
	`˛o£_devi˚
(*
p
);

208 
	`usbc‹e_dummy
(*
p
);

209 
	`di•œy_maö_míu
–*
p
);

210 
	`ªtu∫_fun˘i⁄
–*
p
);

211 
	`di•œy_gí_míu1
–*
p
);

212 
	`usbc‹e_toﬁs
–*
p
);

213 
	`drivî_öfo
–*
p
);

214 
	`show_moduÀs
–*
p
);

215 
	`roŸ_hub_öfo
–*
p
);

216 
	`£t_åa˚_˛ass
–*
p
);

217 
	`roŸ_hub_°©us
–*
p
);

218 
	`pﬁl_p‹ts_ã°
–*
p
);

219 
	`show_devi˚s
–*
p
);

220 
	`£t_debug_vÆues
–*
p
);

221 
	`run_debug_›
–*
p
);

229 *
íåy_poöt_›ti⁄s
[] = {

245 
NULL


246 
	}
};

248 *
	gmoduÀ_›ti⁄s
[] = {

255 
NULL


258 *
	gmisc_›ti⁄s
[] = {

265 
NULL


269 
míu_ôem_t
 
	gmaö_míu_t›
[]={

270 "Exô usbutû ", 
exô_fun˘i⁄
 , 'X',

271 "Di•œy míu ", 
di•œy_maö_míu
 , 'M',

272 "O≥¿Devi˚ ", 
i_›í_devi˚
 , 'O',

273 "Hñ∞ ", 
usbc‹e_dummy
 , 'H',

274 
NULL
, NULL, 0

277 
míu_ôem_t
 
	gmaö_míu_bŸtom
[]={

278 "Clo£ devi˚ ", 
˛o£_devi˚
 , 0,

279 "USBc‹êtoﬁ† ", 
usbc‹e_toﬁs
 , 0,

280 "USB HCDÅoﬁ† ", 
usbc‹e_dummy
 , 0,

281 "USB devi˚Åoﬁ† ", 
usbc‹e_dummy
 , 0,

282 "LibUSBÅoﬁ† ", 
usbc‹e_dummy
 , 0,

283 
NULL
, NULL, 0

287 
míu_ôem_t
 
	ggíîic_míu_t›
[]={

288 "Rëu∫Åÿ¥eviou†", 
ªtu∫_fun˘i⁄
 , 'R',

289 "Di•œy míu ", 
di•œy_gí_míu1
 , 'M',

290 
NULL
, NULL, 0

293 
míu_ôem_t
 
	gusbc‹e_míu_bŸtom
[]={

294 "Gë drivî infÿ ", 
drivî_öfo
 , 0,

295 "Show USB moduÀ† ", 
show_moduÀs
 , 0,

296 "GëÑoŸhub infÿ ", 
roŸ_hub_öfo
 , 0,

297 "SëÅø˚ cls/lv» ", 
£t_åa˚_˛ass
 , 0,

298 "GëÑoŸhub sètu†", 
roŸ_hub_°©us
 , 0,

299 "Pﬁ»p‹t† ", 
pﬁl_p‹ts_ã°
 , 0,

300 "Show USB devi˚† ", 
show_devi˚s
 , 0,

301 "Së debug VÆue† ", 
£t_debug_vÆues
 , 0,

302 "Ru¿debug o∞ ", 
run_debug_›
 , 0,

303 
NULL
, NULL, 0

311 
	gdevi˚_fd
 = -1;

319 
	gÊag_vîbo£
 = 0;

320 
	gÊag_li°
 = 0;

321 
	gÊag_öfo
 = 0;

322 
	gÊag_°©us
 = 0;

323 
	gÊag_devi˚
 = 0;

324 
	gÊag_fûe
 = 0;

325 
	gÊag_Æl
 = 0;

326 
	gÊag_xml
 = 0;

327 
	gÊag_shñl
 = 0;

330 
	g¥öt_fmt
 = 
USBTL_DISPLAY_FMTHUMAN
;

331 
	göãø˘ive_mode
 = 0;

346 
	$is_›ti⁄
–*
°r
, *
°r2
, *
Àâî
){

347 
°rss
[80];

348 
ch_›
[80];

350 
	`°r˝y
–
°rss
, "--");

351 
	`°rˇt
–
°rss
, 
°r2
);

352 
	`°r˝y
–
ch_›
, "-");

353 
	`°rˇt
–
ch_›
, 
Àâî
);

355 if–(
	`°rcmp
–
°r
, 
°rss
Ë=0Ë|| (°rcmp–°r, 
ch_›
) == 0)){

360 
	}
}

362 
	$£¨ch_gíîic_›ti⁄s
–
¨gc
, **
¨gv
, *
num_›ti⁄s
){

363 
i
, 
j
 =0;

364 
£À˘ed
 = 0;

366  
i
 = 2; i < 
¨gc
; i++){

367 if–
	`is_›ti⁄
–
¨gv
[
i
], "verbose", "v")){

368 
£À˘ed
 |
USBTL_OPTION_VERBOSE
;

369 
Êag_vîbo£
 = 1;

370 
j
++;

371 }if–
	`is_›ti⁄
–
¨gv
[
i
], "list", "l")){

372 
£À˘ed
 |
USBTL_OPTION_LIST
;

373 
Êag_li°
 = 1;

374 
j
++;

375 }if–
	`is_›ti⁄
–
¨gv
[
i
], "info", "i")){

376 
£À˘ed
 |
USBTL_OPTION_INFO
;

377 
Êag_öfo
 = 1;

378 
j
++;

379 }if–
	`is_›ti⁄
–
¨gv
[
i
], "status", "s")){

380 
£À˘ed
 |
USBTL_OPTION_STATUS
;

381 
Êag_°©us
 = 1;

382 
j
++;

383 }if–
	`is_›ti⁄
–
¨gv
[
i
], "device", "d")){

384 
£À˘ed
 |
USBTL_OPTION_DEVICE
;

385 
Êag_devi˚
 = 1;

386 
j
++;

387 }if–
	`is_›ti⁄
–
¨gv
[
i
], "file", "f")){

388 
£À˘ed
 |
USBTL_OPTION_FILE
;

389 
Êag_fûe
 = 1;

390 
j
++;

391 }if–
	`is_›ti⁄
–
¨gv
[
i
], "all", "a")){

392 
£À˘ed
 |
USBTL_OPTION_ALL
;

393 
Êag_Æl
 = 1;

394 
j
++;

395 }if–
	`is_›ti⁄
–
¨gv
[
i
], "xml", "x")){

396 
£À˘ed
 |
USBTL_OPTION_XML
;

397 
Êag_xml
 = 1;

398 
j
++;

399 }if–
	`is_›ti⁄
–
¨gv
[
i
], "shell", "e")){

400 
£À˘ed
 |
USBTL_OPTION_SHELL
;

401 
Êag_shñl
 = 1;

402 
j
++;

406 *
num_›ti⁄s
 = 
j
;

407 –
£À˘ed
);

408 
	}
}

411 
	$∑r£_c‹e_›ti⁄s
–
¨gc
, **
¨gv
, **
°ørgs
){

412 
a˘i⁄
 = 
USBTL_ACTION_HELP
;

413 
gíîic
;

414 
gíîic_num_›ts
;

416 if–
¨gc
 < 3)

417 –
USBTL_ACTION_HELP
);

420 
gíîic
 = 
	`£¨ch_gíîic_›ti⁄s
–
¨gc
, 
¨gv
, &
gíîic_num_›ts
);

421 if–
gíîic
 & 
USBTL_OPTION_XML
)

422 
¥öt_fmt
 = 
USBTL_DISPLAY_FMTXML
;

424 if–
gíîic
 & 
USBTL_OPTION_SHELL
)

425 
¥öt_fmt
 = 
USBTL_DISPLAY_FMTSHELL
;

427 
¨gc
 -
gíîic_num_›ts
;

431 if–(
gíîic
 & 
USBTL_OPTION_XML
Ë&& (gíîi¯& 
USBTL_OPTION_SHELL
)){

432 
	`Ârötf
–
°dîr
, "Error: CanÇot use XML or Shell friendly output formatát sameÅime.\n");

433 –
USBTL_ACTION_HELP
);

436 }if––
gíîic
 & 
USBTL_OPTION_INFO
Ë&& ( 
¨gc
 == 3)){

437 –
USBTL_ACTION_DRIVER_INFO
);

440 }if–
	`is_›ti⁄
–
¨gv
[2], "roothub", "r")){

441 if–
gíîic
 =0 && 
¨gc
 == 3){

442 –
USBTL_ACTION_ROOT_HUB_INFO
);

443 }if–
gíîic
 & 
USBTL_OPTION_STATUS
 && 
¨gc
 == 3){

444 –
USBTL_ACTION_ROOT_HUB_STATUS
);

445 }if–
gíîic
 & 
USBTL_OPTION_ALL
 && 
¨gc
 == 3){

446 –
USBTL_ACTION_ROOT_HUB_INFO_ALL
);

448 }if–
	`is_›ti⁄
–
¨gv
[2], "tracelevel", "t")){

449 if–
¨gc
 == 3){

450 –
USBTL_ACTION_DISPLAY_TRACE_LEVEL
);

451 }if–
¨gc
 == 5){

452 
°ørgs
[0] = 
¨gv
[3];

453 
°ørgs
[1] = 
¨gv
[4];

454 –
USBTL_ACTION_SET_TRACE_LEVEL
);

456 }if–
	`is_›ti⁄
–
¨gv
[2], "usbdevices", "u")){

457 if–
¨gc
 > 3){

458 if–
	`is_›ti⁄
–
¨gv
[3], "tree", "t")){

459 –
USBTL_ACTION_SHOW_DEVICES_TREE
);

462 (
USBTL_ACTION_SHOW_DEVICES
);

464 }if–
	`is_›ti⁄
–
¨gv
[2], "modules", "m")){

465 if–
¨gc
 == 3){

466 (
USBTL_ACTION_DISPLAY_MODULES
);

469 –
a˘i⁄
);

470 
	}
}

472 
	$∑r£_löe_comm™d
–
¨gc
, **
¨gv
, **
°ørgs
){

473 
a˘i⁄
 = 
USBTL_ACTION_HELP
;

476 if–
	`is_›ti⁄
–
¨gv
[1], "help", "h")){

477 –
USBTL_ACTION_HELP
);

478 }if–
	`is_›ti⁄
–
¨gv
[1], "core", "c")){

479 
a˘i⁄
 = 
	`∑r£_c‹e_›ti⁄s
–
¨gc
, 
¨gv
, 
°ørgs
);

480 –
a˘i⁄
);

481 }if–
	`is_›ti⁄
–
¨gv
[1], "roothub", "r")){

482 
a˘i⁄
 = 
USBTL_ACTION_HELP
;

483 }if–
	`is_›ti⁄
–
¨gv
[1], "usbdevice", "u")){

484 
a˘i⁄
 = 
USBTL_ACTION_HELP
;

485 }if–
	`is_›ti⁄
–
¨gv
[1], "öãø˘ive", "i"Ë&& 
¨gc
 == 2){

486 
a˘i⁄
 = 
USBTL_ACTION_INTERACTIVE
;

489 –
a˘i⁄
);

490 
	}
}

493 
	$show_hñp
(){

494 
i
;

495 *
hñp
[]={

567 
NULL


571  
i
 = 0; 
hñp
[i]; i++)

572 
	`puts
–
hñp
[
i
]);

575 
	}
}

582 
	$exô_fun˘i⁄
–*
p
){

583 
	`˛o£_devi˚
–
p
);

584 
	`¥ötf
("Quitting..\n");

585 
	`exô
( 0);

588 
	}
}

591 
	$›í_devi˚
–*
p
){

593 #ifde‡
_EMUIOCTL_


594 
devi˚_fd
 = 999;

596 
devi˚_fd
 = 
	`›í
–(*Ë
p
, 
O_RDWR
);

597 if–
devi˚_fd
 < 0){

598 
	`≥º‹
("error opening device");

599 
	`exô
( 1);

604 –
devi˚_fd
);

605 
	}
}

607 
	$i_›í_devi˚
(*
p
){

608 
devi˚_«me
[256];

609 
›ti⁄
[5];

610 
i›t
;

612 if–
devi˚_fd
 != -1){

613 
	`¥ötf
("ERROR, Deviceálready open, close it first\n");

617 
	`¥ötf
("Select your USB device file. (EnterÅo Cancel)\n");

618 
	`¥ötf
(" 1.-Open /hw/usb/usbcore\n");

619 
	`¥ötf
(" 2.-Open /hw/usb/usbdaemon\n");

621 
	`gës
–
›ti⁄
);

622 
i›t
 = 
	`©oi
–
›ti⁄
);

624 if–
i›t
 == 1)

625 
	`°r˝y
–
devi˚_«me
, "/hw/usb/usbcore");

626 if–
i›t
 == 2)

627 
	`°r˝y
–
devi˚_«me
, "/hw/usb/usbdaemon");

629 
	`¥ötf
("No device file selected. \n");

633 
	`¥ötf
("O≥nög devi˚ '%s' \n", 
devi˚_«me
);

634 
devi˚_fd
 = 
	`›í_devi˚
–(*Ë
devi˚_«me
);

636 if–
devi˚_fd
 < 0){

637 
	`≥º‹
("error opening device");

639 
	`¥ötf
("devi˚ '%s' o≥√d, fd=%d \n", 
devi˚_«me
, 
devi˚_fd
);

642 
	}
}

645 
	$˛o£_devi˚
(*
p
){

646 #ifde‡
_EMUIOCTL_


647 
devi˚_fd
 = -1;

649 if–
devi˚_fd
 < 0){

653 
	`˛o£
–
devi˚_fd
);

654 
devi˚_fd
 = -1;

655 
	`¥ötf
("Device closed successfully\n");

657 
	}
}

659 
	$usbc‹e_dummy
(*
p
){

661 
	}
}

663 
	$di•œy_maö_míu
–*
p
){

664 
	`di•œy_míu
–
maö_míu_t›
, 
maö_míu_bŸtom
);

666 
	}
}

668 
	$ªtu∫_fun˘i⁄
–*
p
){

670 
	}
}

672 
	$di•œy_gí_míu1
–*
p
){

673 
	`di•œy_míu
–
gíîic_míu_t›
, 
usbc‹e_míu_bŸtom
);

675 
	}
}

677 
	$usbc‹e_toﬁs
–*
p
){

678 
	`run_míu
–
gíîic_míu_t›
, 
usbc‹e_míu_bŸtom
);

680 
	}
}

682 
	$drivî_öfo
(*
p
){

683 
USB_drivî_öfo_t
 
öfo
;

684 
rc
;

687 #i‚de‡
_EMUIOCTL_


688 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_DRIVER_INFO
, &
öfo
);

690 
rc
 = 0;

691 
	`°r˝y
–
öfo
.
sh‹t_«me
, "USBCORE");

692 
	`°r˝y
–
öfo
.
l⁄g_«me
, "USB stackánd host controller driver for SGI IRIX 6.5 <bsderoát gmail dot org>");

693 
	`°r˝y
–
öfo
.
vîsi⁄
, "0.0.1.5");

694 
	`°r˝y
–
öfo
.
sh‹t_vîsi⁄
, "0015");

695 
	`°r˝y
–
öfo
.
£qn
, "14092012162130");

696 
	`°r˝y
–
öfo
.
buûd_d©e
, "14092012");

699 if–
Êag_vîbo£
 == 1){

700 
	`¥ötf
("io˘»IOCTL_USB_GET_DRIVER_INFOÉxecuãd,Ñc=%d\n", 
rc
);

705 if–
rc
 == 0){

706 
	`¥ötf
("<<<<< Driver information >>>>>\n");

707 
	`¥ötf
("Drivî Name: %s\n", 
öfo
.
sh‹t_«me
);

708 
	`¥ötf
("Drivî Des¸ùti⁄: %s\n", 
öfo
.
l⁄g_«me
);

709 
	`¥ötf
("Drivî Vîsi⁄: %s\n", 
öfo
.
vîsi⁄
);

710 
	`¥ötf
("Drivî Sh‹àVîsi⁄: %s\n", 
öfo
.
sh‹t_vîsi⁄
);

711 
	`¥ötf
("Drivî Seq Numbî: %s\n", 
öfo
.
£qn
);

712 
	`¥ötf
("Drivî Buûd D©e: %s\n", 
öfo
.
buûd_d©e
);

714 
	`¥ötf
("ERROR\n");

717 
	}
}

719 
	$show_moduÀs
–*
p
){

720 
i
;

721 
num_moduÀs
;

722 
USB_drivî_moduÀ_öfo_t
 
öfo
;

723 
rc
;

724 *
moduÀ_desc
[]={ "HCD", "C‹e", "DD", 
NULL
 };

725 #ifde‡
_EMUIOCTL_


726 
USB_drivî_moduÀ_öfo_t
 
p_öfo
[] = {

727 { 1, 
USB_MOD_CORE
, "usbc‹e", "USB C‹êdevi˚ drivî", "usbc‹e", 
USB_DRIVER_IS_CORE
 },

728 { 2, 
USB_MOD_EHCI
, "usbehci", "USBÉhcòdevi˚ drivî", "usbehci", 
USB_DRIVER_IS_HCD
 },

729 { 3, 
USB_MOD_UHCI
, "usbuhci", "USB uhcòdevi˚ drivî", "usbuhci", 
USB_DRIVER_IS_HCD
 },

730 { 4, 
USB_MOD_HUB
, "usbhub ", "USB hubb devi˚ drivî", "usbhub ", 
USB_DRIVER_IS_USB_DEVICE
 }

735 
	`¥ötf
("<<<<< USB Kernel Modules >>>>>\n");

737 #i‚de‡
_EMUIOCTL_


738 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_NUM_MODULES
, &
num_moduÀs
);

740 
rc
 = 0;

741 
num_moduÀs
 = 4;

744 if–
Êag_vîbo£
 == 1){

745 
	`¥ötf
("io˘»IOCTL_USB_GET_NUM_MODULESÉxecuãd,Ñc=%d,Çum_moduÀs=%d\n", 
rc
, 
num_moduÀs
);

750 if–
rc
 != 0 ){

751 
	`¥ötf
("ERROR\n");

755 if–
num_moduÀs
 == 0){

756 
	`¥ötf
("No modules found. \n");

760 
	`¥ötf
("ModulesÜist\n");

761 
	`¥ötf
("ID Short Name Module Name Type Long Description\n");

762 
	`¥ötf
("------ ------------ ------------------ -------- ------------------------------\n");

763  
i
 = 0 ; i < 
num_moduÀs
; i++){

764 
öfo
.
num_moduÀ
 = 
i
;

766 #i‚de‡
_EMUIOCTL_


767 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_MODULE_INFO
, &
öfo
);

769 
	`mem˝y
––*Ë&
öfo
, (*Ë&
p_öfo
[
i
], –
USB_drivî_moduÀ_öfo_t
));

770 
rc
 = 0;

773 if–
Êag_vîbo£
 == 1){

774 
	`¥ötf
("io˘»IOCTL_USB_GET_MODULE_INFOÉxecuãd,Ñc=%d\n", 
rc
);

777 if–
rc
 == 0){

778 
	`¥ötf
("0x%-4x %-12s %-18s %-8s %-30.30s\n",

779 
öfo
.
moduÀ_id
, info.
sh‹t_des¸ùti⁄
, info.
moduÀ_«me
,

780 
moduÀ_desc
[
öfo
.
ty≥
], info.
l⁄g_des¸ùti⁄
);

782 
	`¥ötf
("ERROR\n");

788 
	}
}

790 
	$roŸ_hub_öfo
–*
p
){

791 #i‚de‡
_EMUIOCTL_


792 
USB_roŸ_hub_öfo_t
 
öfo
;

794 
USB_roŸ_hub_öfo_t
 
öfo
 = {

795 
USB_HUB_PCI
,

798 
USB_UHCI
|
USB_EHCI
,

808 
rc
;

810 
	`¥ötf
("<<<<< USBÑoot hub info >>>>>\n");

811 #i‚de‡
_EMUIOCTL_


812 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_ROOT_HUB_INFO
, &
öfo
);

814 
rc
 = 0;

817 if–
Êag_vîbo£
 == 1){

818 
	`¥ötf
("io˘»IOCTL_USB_GET_ROOT_HUB_INFOÉxecuãd,Ñc=%d\n", 
rc
);

821 if–
rc
 == 0){

822 
	`¥ötf
("Devi˚ Name: %s\n", 
öfo
.
h¨dw¨e_des¸ùti⁄
);

823 
	`¥ötf
("Produ˘ ID: 0x%x\n", 
öfo
.
¥odu˘_id
);

824 
	`¥ötf
("Víd‹ ID: 0x%x\n", 
öfo
.
víd‹_id
);

825 
	`¥ötf
("BusÅype: ");

826 if–
öfo
.
hub_ty≥
 =
USB_HUB_PCI
){

827 
	`¥ötf
("PCI\n");

828 
	`¥ötf
("PCI Bus: 0x%x\n", 
öfo
.
pci_bus
);

829 
	`¥ötf
("PCI SlŸ: 0x%x\n", 
öfo
.
pci_¶Ÿ
);

830 
	`¥ötf
("PCI Fun˘i⁄: 0x%x\n", 
öfo
.
pci_fun˘i⁄
);

832 
	`¥ötf
("USB\n");

834 
	`¥ötf
("Fûesy°em devi˚Çame: %s\n", 
öfo
.
fs_devi˚
);

835 
	`¥ötf
("Numbî o‡p‹ts: %d\n", 
öfo
.
p‹ts_numbî
);

836 
	`¥ötf
("Addªss: 0x%x\n", 
öfo
.
addªss
);

837 
	`¥ötf
("Supported host controllers: ");

838 if–
öfo
.
hcd_drivîs
 & 
USB_UHCI
)

839 
	`¥ötf
("UHCI ");

840 if–
öfo
.
hcd_drivîs
 & 
USB_EHCI
)

841 
	`¥ötf
("EHCI ");

842 if–
öfo
.
hcd_drivîs
 & 
USB_OHCI
)

843 
	`¥ötf
("OHCI ");

844 if–
öfo
.
hcd_drivîs
 & 
USB_XHCI
)

845 
	`¥ötf
("XHCI ");

846 
	`¥ötf
("\n");

849 
	`¥ötf
("ERROR\n");

852 
	}
}

855 
	$show_åa˚_˛ass
(){

856 
USB_åa˚_˛ass_t
 
åa˚
;

857 
uöt64_t
 
i
;

858 
rc
;

859 
°r
[128];

861 #i‚de‡
_EMUIOCTL_


862 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_DEBUG_LEVEL
, &
åa˚
);

864 
rc
 = 0;

865 
åa˚
.
˛ass
 = 0xffffffffffffffff;

866 
åa˚
.
Àvñ
 = 5;

868 if–
Êag_vîbo£
 == 1){

869 
	`¥ötf
("io˘»IOCTL_USB_GET_DEBUG_LEVELÉxecuãd,Ñc=%d\n", 
rc
);

872 if–
rc
 != 0){

873 
	`¥ötf
("ERROR\n");

877 
	`INT2HEX64X
–
°r
, 
åa˚
.
˛ass
);

878 
	`¥ötf
("Tø˚ vÆues,Üevñ=%d, cœss=%s\n", 
åa˚
.
Àvñ
, 
°r
);

879 
	`¥ötf
(">>Årace ofÉntryÖoints\n");

880  
i
 = 0; 
íåy_poöt_›ti⁄s
[i] !
NULL
; i++){

881 
	`¥ötf
–"%†: ", 
íåy_poöt_›ti⁄s
[
i
]);

882 if–
åa˚
.
˛ass
 & (1 << 
i
))

883 
	`¥ötf
("1");

885 
	`¥ötf
("0");

886 
	`¥ötf
("\n");

889 
	`¥ötf
(">>Årace of usb stack modules: \n");

890  
i
 = 0; 
moduÀ_›ti⁄s
[i] !
NULL
; i++){

891 
	`¥ötf
–"%†: ", 
moduÀ_›ti⁄s
[
i
]);

892 if–
åa˚
.
˛ass
 & (
	`TRC_HCD_SET
 ( ((
uöt64_t
)1Ë<< 
i
)) )

893 
	`¥ötf
("1");

895 
	`¥ötf
("0");

896 
	`¥ötf
("\n");

899 
	`¥ötf
(">>Årace of miscelaneous functionality: \n");

900  
i
 = 0; 
misc_›ti⁄s
[i] !
NULL
; i++){

901 
	`¥ötf
–"%†: ", 
misc_›ti⁄s
[
i
] );

902 if–
åa˚
.
˛ass
 & ( 1 << (
i
 + 20) ))

903 
	`¥ötf
("1");

905 
	`¥ötf
("0");

906 
	`¥ötf
("\n");

909 
	}
}

912 
	$£t_åa˚_˛ass_¨gs
–*
°æevñ
, *
°r˛ass
){

913 
Àvñ
, 
rc
;

914 
uöt64_t
 
˛ass
, 
cc
;

915 
USB_åa˚_˛ass_t
 
åa˚
;

916 
°r
[256];

918 
Àvñ
 = 
	`©oi
–
°æevñ
);

919 
rc
 = 
	`°r2hex
–
°r˛ass
, &
˛ass
);

921 if–
rc
 != 0){

922 
	`¥ötf
( "ERROR, invalid values\n");

926 
åa˚
.
˛ass
 = class;

927 
åa˚
.
Àvñ
 =Üevel;

929 
cc
 = 
˛ass
;

930 
	`INT2HEX64X
–
°r
, 
cc
);

933 if–
Êag_vîbo£
 == 1){

934 
	`¥ötf
("Àvñ = %d, cœss=%s, så˛ass=%s\n", 
Àvñ
, 
°r
, 
°r˛ass
);

938 #i‚de‡
_EMUIOCTL_


939 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_SET_DEBUG_LEVEL
, &
åa˚
);

941 
rc
 = 0;

944 if–
Êag_vîbo£
 == 1){

945 
	`¥ötf
("io˘»IOCTL_USB_SET_DEBUG_LEVELÉxecuãd,Ñc=%d\n", 
rc
);

948 if–
rc
 != 0){

949 
	`¥ötf
("ERROR\n");

955 
	}
}

957 
	$£t_åa˚_˛ass
–*
p
){

958 
rc
;

959 
USB_åa˚_˛ass_t
 
åa˚
;

960 
uöt64_t
 
i
;

961 
›ti⁄
[64];

962 
upd©e_åa˚
 = 0;

963 
°r
[128];

966 #i‚de‡
_EMUIOCTL_


967 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_DEBUG_LEVEL
, &
åa˚
);

969 
rc
 = 0;

970 
åa˚
.
˛ass
 = 0xffffffffffffffff;

971 
åa˚
.
Àvñ
 = 5;

974 if–
Êag_vîbo£
 == 1){

975 
	`¥ötf
("io˘»IOCTL_USB_GET_DEBUG_LEVELÉxecuãd,Ñc=%d\n", 
rc
);

978 if–
rc
 != 0){

979 
	`¥ötf
("ERROR\n");

983 
	`¥ötf
("\n>>>>> CurrentÅrace configuration <<<<<\n");

984 if–
Êag_vîbo£
 == 1){

985 
	`INT2HEX64X
–
°r
, 
åa˚
.
˛ass
);

986 
	`¥ötf
("Tø˚ vÆues,Üevñ=%d, cœss=%s\n", 
åa˚
.
Àvñ
, 
°r
);

989 if–
åa˚
.
˛ass
 =
TRC_ALL
){

990 
	`¥ötf
("All flagsÉnabled\n");

991 
£À˘_åa˚_›ts
;

992 }if–
åa˚
.
˛ass
 =
TRC_NO_MESSAGES
){

993 
	`¥ötf
("All flags disabled\n");

994 
£À˘_åa˚_›ts
;

996 
	`¥ötf
(">>Årace ofÉntryÖoints\n");

997  
i
 = 0; 
íåy_poöt_›ti⁄s
[i] !
NULL
; i++){

998 
	`¥ötf
–"%†: ", 
íåy_poöt_›ti⁄s
[
i
]);

999 if–
åa˚
.
˛ass
 & (1 << 
i
))

1000 
	`¥ötf
("1");

1002 
	`¥ötf
("0");

1003 
	`¥ötf
("\n");

1007 
	`¥ötf
("PressÉnterÅo continue");

1008 
	`gëch¨
();

1009 
	`¥ötf
(">>Årace of usb stack modules: \n");

1010  
i
 = 0; 
moduÀ_›ti⁄s
[i] !
NULL
; i++){

1011 
	`¥ötf
–"%†: ", 
moduÀ_›ti⁄s
[
i
]);

1012 if–
åa˚
.
˛ass
 & (
	`TRC_HCD_SET
 ( ((
uöt64_t
)1Ë<< 
i
)) )

1013 
	`¥ötf
("1");

1015 
	`¥ötf
("0");

1016 
	`¥ötf
("\n");

1019 
	`¥ötf
(">>Årace of miscelaneous functionality: \n");

1020  
i
 = 0; 
misc_›ti⁄s
[i] !
NULL
; i++){

1021 
	`¥ötf
–"%†: ", 
misc_›ti⁄s
[
i
] );

1022 if–
åa˚
.
˛ass
 & ( 1 << (
i
 + 20) ))

1023 
	`¥ötf
("1");

1025 
	`¥ötf
("0");

1026 
	`¥ötf
("\n");

1030 
£À˘_åa˚_›ts
:

1031 
	`¥ötf
("\nUpdateÅraceÜevel? (y/n)[n]:");

1033 
	`gës
–
›ti⁄
);

1034 if–
	`tﬁowî
(
›ti⁄
[0] ) != 'y')

1035 
£À˘_åa˚_Àvñ
;

1037 
	`¥ötf
("\nUpdateÅrace class with hex digit?\n");

1038 
	`¥ötf
(" -Yes, Iálready knowÅhe class bit flags\n");

1039 
	`¥ötf
(" -No, IÖrefer specifyÉach bit ofÅhe mask\n");

1040 
	`¥ötf
(" Chosse option (y/n)[y]:");

1042 
	`gës
–
›ti⁄
);

1043 if–
	`tﬁowî
(
›ti⁄
[0] ) != 'n'){

1044 
	`¥ötf
("CaptureÅheÅrace class in hexadecimal format: 0x");

1045 
	`gës
–
›ti⁄
);

1046 
	`ssˇnf
–
›ti⁄
, "%x", (*)(&
åa˚
.
˛ass
));

1047 
upd©e_åa˚
 = 1;

1048 
£À˘_åa˚_Àvñ
;

1053 
	`¥ötf
("\nSelect yourÉntryÖointÅoÅrace:\n");

1054 
åa˚
.
˛ass
 = 0;

1055  
i
 = 0; 
íåy_poöt_›ti⁄s
[i] !
NULL
; i++){

1056 
	`¥ötf
(" E«bÀÅø˚ %†(cuºíài†%d)? (0/1):", 
íåy_poöt_›ti⁄s
[
i
], ((
åa˚
.
˛ass
 & (1 << i)) == 1));

1057 
	`gës
–
›ti⁄
);

1058 if–
›ti⁄
[0] == '1')

1059 
åa˚
.
˛ass
 |(
uöt64_t
Ë(1 << 
i
);

1063 
	`¥ötf
("\nSelect your miscelaneous optionsÅoÅrace:\n");

1064  
i
 = 0; 
misc_›ti⁄s
[i] !
NULL
; i++){

1065 
	`¥ötf
(" E«bÀÅø˚ %†(cuºíài†%d)? (0/1):", 
misc_›ti⁄s
[
i
], ((
åa˚
.
˛ass
 & ( 1 << (i + 16) )) == 1) );

1066 
	`gës
–
›ti⁄
);

1067 if–
›ti⁄
[0] == '1')

1068 
åa˚
.
˛ass
 |(
uöt64_t
Ë–1 << (
i
 + 16) );

1071 
	`¥ötf
("\nSelect your USB stack modules optionsÅoÅrace:\n");

1072  
i
 = 0; 
moduÀ_›ti⁄s
[i] !
NULL
; i++){

1073 
	`¥ötf
(" E«bÀÅø˚ %†(cuºíài†%d)? (0/1):", 
moduÀ_›ti⁄s
[
i
], ((
åa˚
.
˛ass
 & ( (
uöt64_t
)1 << (i + 32) )) == (uint64_t)1) );

1074 
	`gës
–
›ti⁄
);

1075 if–
›ti⁄
[0] == '1')

1076 
åa˚
.
˛ass
 |(
uöt64_t
Ë–(uöt64_t)1 << (
i
 + 32) );

1079 
£À˘_åa˚_Àvñ
:

1080 
	`¥ötf
("\nUpdateÅrace class? (y/n)[n]:");

1081 
	`gës
–
›ti⁄
);

1082 if–
	`tﬁowî
(
›ti⁄
[0] ) != 'y')

1083 
exô_›ti⁄
;

1085 
	`¥ötf
("E¡î you∏åa˚Üevñ (cuºít: %d): ", 
åa˚
.
Àvñ
);

1086 
	`gës
–
›ti⁄
);

1087 
åa˚
.
Àvñ
 = 
	`©oi
–
›ti⁄
);

1088 
upd©e_åa˚
 = 1;

1090 
	`INT2HEX64X
–
°r
, 
åa˚
.
˛ass
);

1091 
	`¥ötf
("Tø˚ vÆues,Üevñ=%d, cœss=%s\n", 
åa˚
.
Àvñ
, 
°r
);

1092 
exô_›ti⁄
:

1094 if–
upd©e_åa˚
 == 1){

1095 #i‚de‡
_EMUIOCTL_


1096 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_SET_DEBUG_LEVEL
, &
åa˚
);

1098 
rc
 = 0;

1101 if–
Êag_vîbo£
 == 1){

1102 
	`¥ötf
("io˘»IOCTL_USB_SET_DEBUG_LEVELÉxecuãd,Ñc=%d\n", 
rc
);

1105 if–
rc
 != 0){

1106 
	`¥ötf
("ERROR\n");

1113 
	}
}

1115 
	$roŸ_hub_°©us
(*
p
){

1116 
USB_roŸ_hub_°©us_t
 
öfo
;

1117 
rc
;

1118 
i
;

1119 
uöt32_t
 
p‹t
, 
n
;

1121 
	`¥ötf
("<<<<< Root Hub Status >>>>>\n");

1122 #i‚de‡
_EMUIOCTL_


1123 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_ROOT_HUB_STATUS
, &
öfo
);

1125 
rc
 = 0;

1126 
öfo
.
p‹ts_numbî
 = 4;

1127 
öfo
.
p‹ts_°©us
[0] = 
USB_PORT_CONNECTED
 | 
USB_PORT_ENABLED
 | 
USB_PORT_IN_USE
 | 
USB_PORT_STATUS_OK
 | 
	`USB_PORT_SET_HCD_OWNER
(
USB_PORT_EHCI
);

1128 
öfo
.
p‹ts_°©us
[1] = 
USB_PORT_STATUS_OK
 | 
	`USB_PORT_SET_HCD_OWNER
(
USB_PORT_EHCI
);

1129 
öfo
.
p‹ts_°©us
[2] = 
USB_PORT_STATUS_OK
 | 
	`USB_PORT_SET_HCD_OWNER
(
USB_PORT_UHCI
);

1130 
öfo
.
p‹ts_°©us
[3] = 
USB_PORT_STATUS_OK
 | 
	`USB_PORT_SET_HCD_OWNER
(
USB_PORT_EHCI
);

1131 
öfo
.
hc_c⁄dôi⁄
 = 
USB_HC_OK
;

1134 if–
Êag_vîbo£
 == 1){

1135 
	`¥ötf
("io˘»IOCTL_USB_GET_ROOT_HUB_STATUSÉxecuãd,Ñc=%d\n", 
rc
);

1138 if–
rc
 == 0){

1139 
	`¥ötf
("Status :");

1140 if–
öfo
.
hc_c⁄dôi⁄
 =
USB_HC_OK
)

1141 
	`¥ötf
("OK\n");

1143 
	`¥ötf
("Error\n");

1145 
	`¥ötf
("Numbî o‡p‹t†: %d\n", 
öfo
.
p‹ts_numbî
);

1146 
	`¥ötf
(" ------------ Ports status ------------------\n");

1147 
	`¥ötf
(" <C=Connected E=Enabled S=Suspended I=In use P=PortÖower>\n");

1148 
	`¥ötf
(" Port No.\tOK\tStatus\tSpeed\tHC Owner\n");

1149  
i
 = 0; i < 
öfo
.
p‹ts_numbî
; i++){

1150 
p‹t
 = 
öfo
.
p‹ts_°©us
[
i
];

1151 
	`¥ötf
(" #%d\t\t", 
i
);

1152 
	`¥ötf
("%c\t", ((
p‹t
 & 
USB_PORT_STATUS_OK
) == 0) ? 'N' : 'Y');

1153 if––
p‹t
 & 
USB_PORT_CONNECTED
) != 0)

1154 
	`¥ötf
("C");

1155 if––
p‹t
 & 
USB_PORT_ENABLED
) != 0)

1156 
	`¥ötf
("E");

1157 if––
p‹t
 & 
USB_PORT_SUSPENDED
) != 0)

1158 
	`¥ötf
("S");

1159 if––
p‹t
 & 
USB_PORT_IN_USE
) != 0)

1160 
	`¥ötf
("I");

1161 if––
p‹t
 & 
USB_PORT_POWER
) != 0)

1162 
	`¥ötf
("P");

1164 
	`¥ötf
("\t");

1165 
n
 = 
	`USB_PORT_GET_SPEED
–
p‹t
);

1166  
n
){

1167 
USB_PORT_FULL_SPEED
: 
	`¥ötf
("Full"); ;

1168 
USB_PORT_LOW_SPEED
: 
	`¥ötf
("Low"); ;

1169 
USB_PORT_HIGH_SPEED
: 
	`¥ötf
("High"); ;

1171 
	`¥ötf
("\t");

1173 
n
 = 
	`USB_PORT_GET_HCD_OWNER
–
p‹t
);

1174  
n
){

1175 
USB_PORT_UHCI
: 
	`¥ötf
("UHCI"); ;

1176 
USB_PORT_EHCI
: 
	`¥ötf
("EHCI"); ;

1177 
USB_PORT_OHCI
: 
	`¥ötf
("OHCI"); ;

1178 
USB_PORT_XHCI
: 
	`¥ötf
("XHCI"); ;

1180 
	`¥ötf
("\n");

1183 
	`¥ötf
("ERROR\n");

1188 
	}
}

1190 
	$pﬁl_p‹ts_ã°
(*
p
){

1193 
	`¥ötf
("<<<<< PollÖortsÅest >>>>>\n");

1200 
	}
}

1203 
	$show_devi˚s
–*
p
){

1204 
usb_devi˚s_num
, 
i
, 
rc
;

1205 
USB_devi˚_t
 
USB_devi˚
;

1206 #ifde‡
_EMUIOCTL_


1207 
USB_devi˚_t
 
USB_devi˚_f
[] = {

1210 
USB_DEVICE_STATUS_OK
 ,0 ,0 ,0 ,

1215 
USB_DEVICE_STATUS_OK
 ,0 ,0 ,0 ,

1220 
USB_DEVICE_STATUS_OK
 ,0 ,0 ,0 ,

1225 
USB_DEVICE_STATUS_OK
 ,0 ,0 ,0 ,

1230 
USB_DEVICE_STATUS_ERROR
 ,0 ,0 ,0 ,

1236 *
t
[10] = {

1240 
	`¥ötf
("<<<<< DevicesÜist >>>>>\n");

1241 #i‚de‡
_EMUIOCTL_


1242 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_DEVICES_NUM
, &
usb_devi˚s_num
);

1244 
rc
 = 0;

1245 
usb_devi˚s_num
 = 5;

1250 if–
Êag_vîbo£
 == 1){

1251 
	`¥ötf
("io˘»IOCTL_USB_GET_DEVICES_NUMÉxecuãd,Ñc=%d,Çum_moduÀs=%d\n", 
rc
, 
usb_devi˚s_num
);

1255 if–
rc
 !0 || 
usb_devi˚s_num
 == 0){

1256 
	`¥ötf
("ERROR\n");

1261 if–
Êag_Æl
 == 0){

1262 
	`¥ötf
("No. Device ID Short Name Module Name Sts Filesystem deviceÇame\n");

1263 
	`¥ötf
("---- ---------- ------------ ------------ --- ------------------------------------\n");

1265  
i
 = 0; i < 
usb_devi˚s_num
; i++){

1266 #i‚de‡
_EMUIOCTL_


1267 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_DEVICE
, &
USB_devi˚
);

1269 
	`mem˝y
–(*Ë&
USB_devi˚
, (*Ë&
USB_devi˚_f
[
i
], (
USB_devi˚_t
 ));

1271 if–
Êag_vîbo£
 == 1){

1272 
	`¥ötf
("io˘»IOCTL_USB_GET_DEVICEÉxecuãd,Ñc=%d\n", 
rc
);

1275 if–
Êag_Æl
 == 0){

1276 
	`¥ötf
("0x%-2x 0x%-8x %-12s %-12s %s %-33.33s\n",

1277 
USB_devi˚
.
devi˚_ödex
, USB_devi˚.
ö°™˚_id
, 
t
[USB_devi˚.
moduÀ_id
],

1278 
USB_devi˚
.
moduÀ_«me
,

1279 ((
USB_devi˚
.
°©us
 =
USB_DEVICE_STATUS_OK
) ? "OK " : "ERR" ),

1280 
USB_devi˚
.
fs_devi˚
 );

1282 
	`¥ötf
("Devi˚ #%d:\n", 
USB_devi˚
.
devi˚_ödex
);

1283 
	`¥ötf
(" InstanceID: 0x%x, Devicetype: %s #%d, ModuleName: %s\n",

1284 
USB_devi˚
.
ö°™˚_id
, 
t
[USB_devi˚.
moduÀ_id
],

1285 
USB_devi˚
.
•ec_devi˚_ö°™˚_id
, USB_devi˚.
moduÀ_«me
);

1286 
	`¥ötf
(" FûeSy°emDevi˚Name: %s\n", 
USB_devi˚
.
fs_devi˚
);

1287 
	`¥ötf
(" L⁄g devi˚Çame: %s\n", 
USB_devi˚
.
h¨dw¨e_des¸ùti⁄
);

1288 
	`¥ötf
(" Vendor: %s, DeviceID: 0x%x, VendorID: 0x%x, ClassID: 0x%x\n",

1289 
USB_devi˚
.
víd‹_°r
, USB_devi˚.
devi˚_id
, USB_devi˚.
víd‹_id
, USB_devi˚.
˛ass_id
);

1290 
	`¥ötf
(" Sètus: %s\n", ((
USB_devi˚
.
°©us
 =
USB_DEVICE_STATUS_OK
) ? "OK " : "ERROR" ));

1291 if–
USB_devi˚
.
moduÀ_id
 =5 && USB_devi˚.
hub_ödex
 == -1){

1292 
	`¥ötf
(" RootHub device #0\n");

1294 
	`¥ötf
(" Device is %s, connectedÅo hub #%d,Öort %d\n",

1295 
t
[
USB_devi˚
.
moduÀ_id
], USB_devi˚.
hub_ödex
, USB_devi˚.
p‹t_ödex
);

1303 
	}
}

1306 
	$di•œy_hub
–
USB_devi˚_t
 *
buf
, 
usb_devi˚s_num
, 
hub_ödex
, 
Àvñ
){

1307 
i
;

1308 
j
;

1309 *
t
[10] = { "", "", "", "", "", "hub", "mouse", "keyboard", "umass", "" };

1312  
i
 = 0; i < 
usb_devi˚s_num
; i++){

1314 if–
buf
[
i
].
hub_ödex
 == hub_index){

1315  
j
 = 0; j < 
Àvñ
; j++)

1316 
	`¥ötf
(" ");

1318 
	`¥ötf
("hub #%dÖort %d: %s #%d, 0x%x, %s\n",

1319 
hub_ödex
,

1320 
buf
[
i
].
p‹t_ödex
,

1321 
t
[
buf
[
i
].
moduÀ_id
],

1322 
buf
[
i
].
•ec_devi˚_ö°™˚_id
,

1323 
buf
[
i
].
ö°™˚_id
,

1324 
buf
[
i
].
h¨dw¨e_des¸ùti⁄
);

1327 if–
buf
[
i
].
moduÀ_id
 =5 && buf[i].
hub_ödex
 == hub_index){

1328 
	`di•œy_hub
–
buf
, 
usb_devi˚s_num
, 
hub_ödex
 + 1, 
Àvñ
 + 1);

1361 
	}
}

1364 
	$show_devi˚s_åì
–*
p
){

1365 
usb_devi˚s_num
, 
i
, 
rc
;

1367 
USB_devi˚_t
 
USB_devi˚
;

1369 
	#USBTL_MAX_DEVICES_TREE
 64

	)

1370 
USB_devi˚_t
 *
p_devi˚s
[
USBTL_MAX_DEVICES_TREE
];

1371 
USB_devi˚_t
 *
buf
;

1372 
hubs_num
;

1376 #ifde‡
_EMUIOCTL_


1377 
USB_devi˚_t
 
USB_devi˚_f
[] = {

1380 
USB_DEVICE_STATUS_OK
 ,0 ,0 ,0 ,

1385 
USB_DEVICE_STATUS_OK
 ,0 ,0 ,0 ,

1390 
USB_DEVICE_STATUS_OK
 ,0 ,0 ,0 ,

1396 
USB_DEVICE_STATUS_OK
 ,0 ,0 ,0 ,

1402 
USB_DEVICE_STATUS_ERROR
 ,0 ,0 ,0 ,

1408 
USB_DEVICE_STATUS_ERROR
 ,0 ,0 ,0 ,

1414 *
t
[10] = {

1418 
	`¥ötf
("<<<<< DevicesÜist >>>>>\n");

1419 #i‚de‡
_EMUIOCTL_


1420 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_DEVICES_NUM
, &
usb_devi˚s_num
);

1422 
rc
 = 0;

1423 
usb_devi˚s_num
 = 6;

1428 if–
Êag_vîbo£
 == 1){

1429 
	`¥ötf
("io˘»IOCTL_USB_GET_DEVICES_NUMÉxecuãd,Ñc=%d,Çum_moduÀs=%d\n", 
rc
, 
usb_devi˚s_num
);

1433 if–
rc
 !0 || 
usb_devi˚s_num
 == 0){

1434 
	`¥ötf
("ERROR\n");

1438 
buf
 = (
USB_devi˚_t
 *Ë
	`mÆloc
–(USB_devi˚_tË* 
usb_devi˚s_num
);

1440 
	`mem£t
–(*Ë
buf
, 0, –
USB_devi˚_t
Ë* 
usb_devi˚s_num
);

1441 
	`mem£t
–(*Ë&
p_devi˚s
, 0, –
USB_devi˚_t
 *Ë* 
USBTL_MAX_DEVICES_TREE
);

1443 
hubs_num
 = 0;

1444  
i
 = 0; i < 
usb_devi˚s_num
; i++){

1445 #i‚de‡
_EMUIOCTL_


1446 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_GET_DEVICE
, &
USB_devi˚
);

1448 
	`mem˝y
–(*Ë&
USB_devi˚
, (*Ë&
USB_devi˚_f
[
i
], (
USB_devi˚_t
 ));

1451 if–
Êag_vîbo£
 == 1){

1452 
	`¥ötf
("io˘»IOCTL_USB_GET_DEVICEÉxecuãd,Ñc=%d\n", 
rc
);

1455 
	`mem˝y
–(*Ë&
buf
[
i
], (*Ë&
USB_devi˚
, (
USB_devi˚_t
 ));

1456 if–
buf
[
i
].
moduÀ_id
 == 5)

1457 
hubs_num
++;

1462  
i
 = 0; i < 
hubs_num
; i++){

1463 if–
buf
[
i
].
moduÀ_id
 =5 && buf[i].
hub_ödex
 == -1){

1464 
	`¥ötf
("RootHub -");

1465 
	`¥ötf
("%s #%d, 0x%x, %s\n",

1466 
t
[
buf
[
i
].
moduÀ_id
],

1467 
buf
[
i
].
•ec_devi˚_ö°™˚_id
,

1468 
buf
[
i
].
ö°™˚_id
,

1469 
buf
[
i
].
h¨dw¨e_des¸ùti⁄
);

1471 
	`di•œy_hub
–
buf
, 
usb_devi˚s_num
, 0, 1);

1477 
	`‰ì
–
buf
);

1480 
	}
}

1502 
	$£t_debug_vÆues
(*
p
){

1503 
usb_debug_vÆues_t
 
v
;

1504 
rc
;

1505 
›ti⁄
[80];

1508 
	`¥ötf
("<<<<< Set Debug Values >>>>>\n");

1509 
	`¥ötf
("Type debug values case id : ");

1510 
	`gës
–
›ti⁄
);

1511 
	`ssˇnf
–
›ti⁄
, "%d", (*)(&
v
.
id
));

1513 
	`¥ötf
("\nTypeÖortÇumber : ");

1514 
	`gës
–
›ti⁄
);

1515 
	`ssˇnf
–
›ti⁄
, "%d", (*)(&
v
.
vÆues
[0]));

1517 
	`¥ötf
("\nTypeÖortÑootÑeset delay [50]: ");

1518 
	`gës
–
›ti⁄
);

1519 
	`ssˇnf
–
›ti⁄
, "%d", (*)(&
v
.
vÆues
[1]));

1521 
	`¥ötf
("\nTypeÖortÑesetÑecovery delay [10]: ");

1522 
	`gës
–
›ti⁄
);

1523 
	`ssˇnf
–
›ti⁄
, "%d", (*)(&
v
.
vÆues
[2]));

1525 
	`¥ötf
("\nTypeÖortÑeset delay [50]: ");

1526 
	`gës
–
›ti⁄
);

1527 
	`ssˇnf
–
›ti⁄
, "%d", (*)(&
v
.
vÆues
[3]));

1530 #i‚de‡
_EMUIOCTL_


1531 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_SET_DEBUG_VALUES
, &
v
);

1533 
rc
 = 0;

1536 if–
Êag_vîbo£
 == 1){

1537 
	`¥ötf
("io˘»IOCTL_USB_SET_DEBUG_VALUESÉxecuãd,Ñc=%d\n", 
rc
);

1540 if–
rc
 == 0){

1541 
	`¥ötf
("OK\n");

1543 
	`¥ötf
("ERROR\n");

1548 
	}
}

1553 
	$run_debug_›
(*
p
){

1554 
uöt32_t
 
›
;

1555 
rc
, 
i
;

1556 
›ti⁄
[80];

1559 
	`¥ötf
("<<<<< Run Debug Op >>>>>\n");

1560 
	`¥ötf
("Type debug op id : ");

1561 
	`gës
–
›ti⁄
);

1562 
	`ssˇnf
–
›ti⁄
, "%d", (*)(&
›
));

1565 
	`¥ötf
("************************ WARNING *************************\n");

1566 
	`¥ötf
("ThisÑuns debug operationsÅhat may hang or crashÅhe\n");

1567 
	`¥ötf
("machine. sync() calls will beÉxecutedÇow.\n");

1568 
	`¥ötf
("Continue? (y/n)[n]:");

1570 
	`gës
–
›ti⁄
);

1571 if–
	`tﬁowî
(
›ti⁄
[0] ) != 'y')

1572 
exô_debug_›
;

1575  
i
 = 0; i < 10; i++){

1576 
	`¥ötf
("syncing...\n");

1577 
	`u¶ìp
( 200000);

1578 
	`sync
();

1581 
	`¶ìp
(1);

1583 #i‚de‡
_EMUIOCTL_


1584 
rc
 = 
	`io˘l
–
devi˚_fd
, 
IOCTL_USB_RUN_DEBUG_OP
, &
›
);

1586 
rc
 = 0;

1589 if–
Êag_vîbo£
 == 1){

1590 
	`¥ötf
("io˘»IOCTL_USB_RUN_DEBUG_OPÉxecuãd,Ñc=%d\n", 
rc
);

1593 if–
rc
 == 0){

1594 
	`¥ötf
("OK\n");

1596 
	`¥ötf
("ERROR\n");

1600 
exô_debug_›
:

1602 
	}
}

1609 
	$di•œy_míu
(*
ôems1
, *
ôems2
){

1610 
	`¥ötf
("+-------------------------+-------------------------+-------------------------+\n");

1611 
	`¥ötf
("| USBCORE FOR SGI IRIX 6.5 TEST UTILITY |\n");

1612 
	`¥ötf
("+-------------------------+-------------------------+-------------------------+\n");

1613 
	`¥ötf
("| << GENERAL COMMANDS >> |\n");

1614 
	`di•œy_míu_∑π
–
ôems1
);

1615 if–
devi˚_fd
 != -1){

1616 
	`¥ötf
("+-------------------------+-------------------------+-------------------------+\n");

1617 
	`di•œy_míu_∑π
–
ôems2
);

1619 
	`¥ötf
("+-------------------------+-------------------------+-------------------------+\n");

1621 
	}
}

1623 
	$di•œy_míu_∑π
–*
míu_ôems
){

1624 
míu_ôem_t
 *
ôem
;

1625 
i
;

1627 
ôem
 = ( 
míu_ôem_t
 *Ë
míu_ôems
;

1628 
i
 = 0;

1630  
ôem
[
i
].
ˇ±i⁄
 !
NULL
){

1631 if–
ôem
[
i
].
key
 == 0)

1632 
	`¥ötf
("| [%02d]%† ", 
i
, 
ôem
[i].
ˇ±i⁄
);

1634 
	`¥ötf
("| [%c] %† ", 
ôem
[
i
].
key
, iãm[i].
ˇ±i⁄
);

1635 
i
++;

1637 if–
ôem
[
i
].
ˇ±i⁄
 =
NULL
){

1638 
	`¥ötf
(" |\n");

1641 if–
ôem
[
i
].
key
 == 0)

1642 
	`¥ötf
(" [%02d]%† ", 
i
, 
ôem
[i].
ˇ±i⁄
);

1644 
	`¥ötf
(" [%c] %† ", 
ôem
[
i
].
key
, iãm[i].
ˇ±i⁄
);

1646 
i
++;

1648 if–
ôem
[
i
].
ˇ±i⁄
 =
NULL
){

1649 
	`¥ötf
(" |\n");

1652 if–
ôem
[
i
].
key
 == 0)

1653 
	`¥ötf
(" [%02d]%†|\n", 
i
, 
ôem
[i].
ˇ±i⁄
);

1655 
	`¥ötf
(" [%c] %†|\n", 
ôem
[
i
].
key
, iãm[i].
ˇ±i⁄
);

1657 
i
++;

1662 
	}
}

1664 
	$míu_size
–
míu_ôem_t
 *
míu
){

1665 
i
 = 0;

1666 
míu_ôem_t
 *
m
 = 
míu
;

1668  ; 
m
[
i
].
ˇ±i⁄
 !
NULL
; i++);

1669 (
i
);

1670 
	}
}

1674 
	$run_míu
(
míu_ôem_t
 *
ôems1
, míu_ôem_à*
ôems2
){

1675 
s
[80];

1676 
i
, 
›t
;

1677 
rc
;

1679 
	`di•œy_míu
–
ôems1
, 
ôems2
);

1682 
	`¥ötf
("\n Option select ('M' for menu) >> ");

1683 
	`gës
–
s
);

1684 if–
	`ißÕha
–
s
[0])){

1685  
i
 = 0; 
ôems1
[i].
ˇ±i⁄
 !
NULL
; i++){

1686 if–
ôems1
[
i
].
key
 =
	`touµî
(
s
[0]))

1687 
rc
 = 
ôems1
[
i
].
	`func
–
NULL
);

1690 if–
devi˚_fd
 != -1){

1691 if–
	`isdigô
(
s
[0])){

1692 
›t
 = 
	`©oi
–
s
);

1693 if–
›t
 < 
	`míu_size
–
ôems2
))

1694 
rc
 = 
ôems2
[
›t
].
	`func
–
NULL
);

1699 if–
rc
 == -100)

1703 
	}
}

1707 
	$maö
(
¨gc
, **
¨gv
){

1708 
a˘i⁄
;

1709 
i
;

1710 *
°r_¨gs
[8];

1713 if–
¨gc
 > 1){

1714  
i
 = 0; i < 
¨gc
; i++)

1715 
a˘i⁄
 = 
	`∑r£_löe_comm™d
–
¨gc
, 
¨gv
, 
°r_¨gs
);

1717 
a˘i⁄
 = 
USBTL_ACTION_HELP
;

1720  
a˘i⁄
){

1721 
USBTL_ACTION_INTERACTIVE
:

1722 
	`run_míu
–
maö_míu_t›
, 
maö_míu_bŸtom
);

1723 
öãø˘ive_mode
 = 1;

1725 
USBTL_ACTION_HELP
:

1726 
	`show_hñp
();

1728 
USBTL_ACTION_DRIVER_INFO
:

1729 
	`›í_devi˚
( "/hw/usb/usbcore");

1730 
	`drivî_öfo
(
NULL
);

1732 
USBTL_ACTION_DISPLAY_MODULES
:

1733 
	`›í_devi˚
( "/hw/usb/usbcore");

1734 
	`show_moduÀs
(
NULL
);

1736 
USBTL_ACTION_ROOT_HUB_INFO_ALL
:

1737 
USBTL_ACTION_ROOT_HUB_INFO
:

1738 
	`›í_devi˚
( "/hw/usb/usbcore");

1739 
	`roŸ_hub_öfo
–
NULL
);

1741 
USBTL_ACTION_ROOT_HUB_STATUS
:

1742 
	`›í_devi˚
( "/hw/usb/usbcore");

1743 
	`roŸ_hub_°©us
–
NULL
);

1745 
USBTL_ACTION_DISPLAY_TRACE_LEVEL
:

1746 
	`›í_devi˚
( "/hw/usb/usbcore");

1747 
	`show_åa˚_˛ass
();

1749 
USBTL_ACTION_SET_TRACE_LEVEL
:

1750 
	`›í_devi˚
( "/hw/usb/usbcore");

1751 
	`£t_åa˚_˛ass_¨gs
–
°r_¨gs
[0], str_args[1]);

1753 
USBTL_ACTION_SHOW_DEVICES
:

1754 
	`›í_devi˚
( "/hw/usb/usbcore");

1755 
	`¥ötf
("show devices selected\n");

1756 
	`show_devi˚s
(
NULL
);

1758 
USBTL_ACTION_SHOW_DEVICES_TREE
:

1759 
	`›í_devi˚
( "/hw/usb/usbcore");

1760 
	`¥ötf
("show devicesÅree selected\n");

1761 
	`show_devi˚s_åì
–
NULL
);

1768 if–
devi˚_fd
 >= 0)

1769 
	`˛o£
–
devi˚_fd
);

1770 
	}
}

	@usbuhci.c

54 
	~<sys/ty≥s.h
>

55 
	~<sys/˝u.h
>

56 
	~<sys/sy°m.h
>

57 
	~<sys/cmn_îr.h
>

58 
	~<sys/î∫o.h
>

59 
	~<sys/buf.h
>

60 
	~<sys/io˘l.h
>

61 
	~<sys/¸ed.h
>

62 
	~<ksys/ddm≠.h
>

63 
	~<sys/pﬁl.h
>

64 
	~<sys/övít.h
>

65 
	~<sys/debug.h
>

66 
	~<sys/sbd.h
>

67 
	~<sys/kmem.h
>

68 
	~<sys/edt.h
>

69 
	~<sys/dmam≠.h
>

70 
	~<sys/hwgøph.h
>

71 
	~<sys/iobus.h
>

72 
	~<sys/iogøph.h
>

73 
	~<sys/∑øm.h
>

74 
	~<sys/pio.h
>

75 
	~<sys/£ma.h
>

76 
	~<sys/ddi.h
>

77 
	~<sys/î∫o.h
>

78 
	~<sys/ksynch.h
>

79 
	~<sys/©omic_›s.h
>

80 
	~<sys/PCI/PCI_defs.h
>

81 
	~<sys/PCI/pciio.h
>

82 
	~<sys/cmn_îr.h
>

83 
	~<sys/mlﬂd.h
>

84 
	~<°rög.h
>

85 
	~<˘y≥.h
>

92 
	~"c⁄fig.h
"

93 
	~"usbio˘l.h
"

94 
	~"usb.h
"

95 
	~"usbhc.h
"

102 
USB_åa˚_˛ass_t
 
	gglobÆ_åa˚_˛ass
 = { 12, 
TRC_ALL
};

110 
	~"kmaddr.c
"

111 
	~"åa˚.c
"

112 
	~"kutûs.c
"

113 
	~"dumphex.c
"

114 
	~"li°.c
"

115 
	~"gc.c
"

116 
	~"dma.c
"

117 
	~"queue.c
"

119 
	~"uhcúeg.h
"

127 
uöt32_t
 
	mdevi˚_id
;

128 
uch¨_t
 *
	mc⁄åﬁÀr_des¸ùti⁄
;

129 }
	guhci_des¸ùti⁄s
[]={

178 0 ,
NULL


186 
	#UHCI_CF_VENDOR_ID
 0x00

	)

187 
	#UHCI_CF_DEVICE_ID
 0x02

	)

188 
	#UHCI_CF_COMMAND
 0x04

	)

189 
	#UHCI_CF_STATUS
 0x06

	)

190 
	#UHCI_CF_REVISION_ID
 0x08

	)

191 
	#UHCI_CF_CLASS_CODE
 0x09

	)

192 
	#UHCI_CF_CACHE_LINE_SIZE
 0x0c

	)

193 
	#UHCI_CF_LATENCY_TIME
 0x0d

	)

194 
	#UHCI_CF_HEADER_TYPE
 0x0e

	)

195 
	#UHCI_CF_BIST
 0x0f

	)

196 
	#UHCI_CF_MMAP_IO_BASE_ADDR
 0x10

	)

197 
	#UHCI_CF_CIS_BASE_ADDR
 0x14

	)

198 
	#UHCI_CF_BASE_ADDR
 0x20

	)

199 
	#UHCI_CF_CARDBUS_CIS_PTR
 0x28

	)

200 
	#UHCI_CF_SSID
 0x2c

	)

201 
	#UHCI_CF_PWR_MGMT_CAPS
 0x34

	)

202 
	#UHCI_CF_INTERRUPT_LINE
 0x3c

	)

203 
	#UHCI_CF_INTERRUPT_PIN
 0x3d

	)

204 
	#UHCI_NUM_CONF_REGISTERS
 0xc2

	)

205 
	#UHCI_NUM_IO_REGISTERS
 0x14

	)

206 
	#UHCICMD
(
sc
, 
cmd
Ë
	`UWRITE2
(sc, 
UHCI_CMD
, cmd)

	)

207 
	#UHCISTS
(
sc
Ë
	`UREAD2
(sc, 
UHCI_STS
)

	)

216 
	#TD_CTRL_SPD
 (0x20000000Ë

	)

217 
	#TD_CTRL_C_ERR_MASK
 (0x18000000Ë

	)

218 
	#TD_CTRL_C_ERR_SHIFT
 27

	)

219 
	#TD_CTRL_LS
 (0x04000000Ë

	)

220 
	#TD_CTRL_IOS
 (0x02000000Ë

	)

221 
	#TD_CTRL_IOC
 (0x01000000Ë

	)

222 
	#TD_CTRL_ACTIVE
 (0x00800000Ë

	)

223 
	#TD_CTRL_STALLED
 (0x00400000Ë

	)

224 
	#TD_CTRL_DBUFERR
 (0x00200000Ë

	)

225 
	#TD_CTRL_BABBLE
 (0x00100000Ë

	)

226 
	#TD_CTRL_NAK
 (0x00080000Ë

	)

227 
	#TD_CTRL_CRCTIMEO
 (0x00040000Ë

	)

228 
	#TD_CTRL_BITSTUFF
 (0x00020000Ë

	)

229 
	#TD_CTRL_ACTLEN_MASK
 0x7FF

	)

231 
	#TD_CTRL_ANY_ERROR
 (
TD_CTRL_STALLED
 | 
TD_CTRL_DBUFERR
 | \

232 
TD_CTRL_BABBLE
 | 
TD_CTRL_CRCTIMEO
 | \

233 
TD_CTRL_BITSTUFF
)

	)

234 
	#uhci_maxîr
(
îr
Ë(”ºË<< 
TD_CTRL_C_ERR_SHIFT
)

	)

236 
	#TD_TOKEN_DEVADDR_SHIFT
 8

	)

237 
	#TD_TOKEN_TOGGLE_SHIFT
 19

	)

238 
	#TD_TOKEN_TOGGLE
 (1 << 19)

	)

239 
	#TD_TOKEN_EXPLEN_SHIFT
 21

	)

240 
	#TD_TOKEN_EXPLEN_MASK
 0x7FF

	)

241 
	#TD_TOKEN_PID_MASK
 0xFF

	)

243 
	#uhci_ex∂í
(
Àn
Ë(((÷íË- 1Ë& 
TD_TOKEN_EXPLEN_MASK
) << \

244 
TD_TOKEN_EXPLEN_SHIFT
)

	)

246 
	#uhci_ex≥˘ed_Àngth
(
tokí
Ë(((—okíË>> 
TD_TOKEN_EXPLEN_SHIFT
) + \

247 1Ë& 
TD_TOKEN_EXPLEN_MASK
)

	)

250 
uöt32_t
 
	mlöks
[1024];

251 } 
	tuhci_‰amñi°_t
;

254 
uöt32_t
 
	mlök
;

255 
uöt32_t
 
	m°©us
;

256 
uöt32_t
 
	mtokí
;

257 
uöt32_t
 
	mbuf„r
;

258 
uöt32_t
 
	mr0
, 
	mr1
, 
	mr2
, 
	mr3
, 
	mr4
;

259 
uöt32_t
 
	mthis
;

260 
uöt32_t
 
	mègs
, 
	mÊags
;

261 *
	mklök
;

262 *
	mkbuf„r
;

263 }
	tuhci_td_t
;

266 
uöt32_t
 
	mlök
;

267 
uöt32_t
 
	mñemít
;

269 
uöt32_t
 
	mr0
, 
	mr1
;

270 
uöt32_t
 
	mthis
;

271 
uöt32_t
 
	m¥i‹_lök
;

273 *
	mk¥i‹_lök
;

274 *
	mklök
;

275 *
	mkñemít
;

277 }
	tuhci_qh_t
;

279 
	susb_uhci_s
 {

280 
usb_s
 
	musb
;

281 
uöt16_t
 
	mioba£
;

282 
uhci_qh_t
 *
	mc⁄åﬁ_qh
, *
	mbulk_qh
;

283 
uhci_‰amñi°_t
 *
	m‰amñi°
;

285 
usb_uhci_s
 
	gusb_uhci_t
;

287 
	suhci_pùe
 {

288 
uhci_qh_t
 
	mqh
;

289 
uhci_td_t
 *
	m√xt_td
;

290 
usb_pùe
 
	mpùe
;

291 
uöt16_t
 
	mioba£
;

292 
uch¨_t
 
	mtoggÀ
;

294 
uhci_pùe
 
	guhci_pùe_t
;

298 
uhci_qh_t
 
	mqh
;

299 
uhci_td_t
 
	mtd
[6];

300 
uch¨_t
 
	mbuf„r
[512];

301 }
	tuhci_c⁄åﬁ_chaö_t
;

303 
	#UHCI_PTR_BITS
 0x000F

	)

304 
	#UHCI_PTR_TERM
 0x0001

	)

305 
	#UHCI_PTR_QH
 0x0002

	)

306 
	#UHCI_PTR_DEPTH
 0x0004

	)

307 
	#UHCI_PTR_BREADTH
 0x0000

	)

316 
	#UHCI_QH1
 0

	)

317 
	#UHCI_QH2
 1

	)

318 
	#UHCI_QH4
 2

	)

319 
	#UHCI_QH8
 3

	)

320 
	#UHCI_QH16
 4

	)

321 
	#UHCI_QH32
 5

	)

322 
	#UHCI_QH64
 6

	)

323 
	#UHCI_QH128
 7

	)

324 
	#UHCI_QHCTL
 
UHCI_QH128


	)

326 
	#UHCI_QH1S
 8

	)

327 
	#UHCI_QH2S
 9

	)

328 
	#UHCI_QH4S
 10

	)

329 
	#UHCI_QH8S
 11

	)

330 
	#UHCI_QH16S
 12

	)

331 
	#UHCI_QH32S
 13

	)

332 
	#UHCI_QH64S
 14

	)

333 
	#UHCI_QH128S
 15

	)

334 
	#UHCI_QHCTLS
 
UHCI_QH128S


	)

336 
	#UHCI_QH1E
 16

	)

337 
	#UHCI_QH2E
 17

	)

338 
	#UHCI_QH4E
 18

	)

339 
	#UHCI_QH8E
 19

	)

340 
	#UHCI_QH16E
 20

	)

341 
	#UHCI_QH32E
 21

	)

342 
	#UHCI_QH64E
 22

	)

343 
	#UHCI_QH128E
 23

	)

344 
	#UHCI_QHCTLE
 
UHCI_QH128E


	)

346 
	#UHCI_QHNUM
 8

	)

347 
uhci_qh_t
 
	mqueue_hóds
[
UHCI_QHNUM
*3];

348 
uhci_qh_t
 
	mãrm_qh
;

349 
uhci_td_t
 
	mãrm_td
;

350 }
	tuhci_å™s„r_queues_t
;

359 
devi˚_hódî_t
 
	mdevi˚_hódî
;

360 
vîãx_hdl_t
 
	mps_c⁄n
;

361 
vîãx_hdl_t
 
	mps_vhdl
;

362 
vîãx_hdl_t
 
	mps_ch¨v
;

363 
USB_func_t
 
	mps_evít_func
;

364 
uch¨_t
 *
	mps_cfg
;

365 
uch¨_t
 *
	mps_ªgs
;

366 
uch¨_t
 *
	mpci_io_ˇps
;

367 
uöt32_t
 
	msc_offs
;

368 
pciio_piom≠_t
 
	mps_cm≠
;

369 
pciio_piom≠_t
 
	mps_rm≠
;

370 
	mps_s°
;

371 
	#usbuhci_SST_RX_READY
 (0x0001)

	)

372 
	#usbuhci_SST_TX_READY
 (0x0002)

	)

373 
	#usbuhci_SST_ERROR
 (0x0004)

	)

374 
	#usbuhci_SST_INUSE
 (0x8000)

	)

375 
pciio_öå_t
 
	mps_öå
;

376 
pciio_dmam≠_t
 
	mps_˘l_dmam≠
;

377 
pciio_dmam≠_t
 
	mps_°r_dmam≠
;

378 
pﬁlhód
 *
	mps_pﬁlhód
;

379 
	mps_blocks
;

380 
uöt32_t
 
	mps_evít
;

381 
uöt8_t
 
	mps_n›‹t
;

382 
uöt32_t
 
	mps_eöås
;

383 
toid_t
 
	mps_ôimeout
;

384 
uch¨_t
 
	mps_°›≥d_timeout
;

385 
pciio_öfo_t
 
	mps_pciio_öfo_devi˚
;

386 
usbc‹e_ö°™˚_t
 *
	musbc‹e
;

387 
usbhub_ö°™˚_t
 *
	mroŸhub
;

388 
uhci_‰amñi°_t
 *
	m‰amñi°
;

389 
uhci_å™s„r_queues_t
 *
	mtq
;

390 
uhci_qh_t
 *
	mc⁄åﬁ_qh
;

391 
uhci_qh_t
 *
	mbulk_qh
;

392 
	mdebug_p‹t
;

393 
uöt32_t
 
	mdebug_p‹t_ª£t_dñay
;

394 
uöt32_t
 
	mdebug_p‹t_ª£t_ªcovîy_dñay
;

395 
uöt32_t
 
	mdebug_p‹t_roŸ_ª£t_dñay
;

397 }
	tusbuhci_ö°™˚_t
;

404 
	gusbuhci_devÊag
 = 
D_MP
;

405 *
	gusbuhci_mvîsi⁄
 = 
M_VERSION
;

406 
	gusbuhci_öu£
 = 0;

407 
gc_li°_t
 
	ggc_li°
;

408 
usbuhci_ö°™˚_t
 *
	gglobÆ_so·
 = 
NULL
;

409 
dma_li°_t
 
	gdma_li°
;

416 
uhci_p‹ts_pﬁl
–
usbuhci_ö°™˚_t
 *
so·
);

417 
usbc‹e_ö°™˚_t
 *
gë_usbc‹e
();

425 
uhci_ª£t
–*
hcd
);

426 
uhci_°¨t
–*
hcd
);

427 
uhci_öô
–*
hcd
);

428 
uhci_°›
–*
hcd
);

429 
uhci_shutdown
–*
hcd
);

430 
uhci_su•íd
–*
hcd
);

431 
uhci_ªsume
–*
hcd
);

432 
uhci_°©us
–*
hcd
);

433 
uhci_‰ì_pùe
–*
hcd
, 
usb_pùe
 *
pùe
);

434 
usb_pùe_t
 *
uhci_Æloc_c⁄åﬁ_pùe
–*
hcd
, 
p‹t_num
, 
td_addr_t
 *
td_addr
);

435 
usb_pùe
 *
uhci_Æloc_bulk_pùe
–*
hcd
, usb_pùê*
pùe
, 
usb_ídpoöt_des¸ùt‹
 *
des¸ùt‹
);

436 
uhci_£nd_c⁄åﬁ
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
cmd
, 
cmdsize
, *
d©a
, 
d©asize
);

437 
uhci_£t_addªss
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
cmd
, 
cmdsize
, *
d©a
, 
d©asize
);

438 
uhci_usb_£nd_bulk
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
d©a
, 
d©asize
);

439 
uhci_Æloc_öå_pùe
–*
hcd
, 
usb_pùe
 *
pùe
, 
usb_ídpoöt_des¸ùt‹
 *
des¸ùt‹
);

440 
uhci_usb_pﬁl_öå
–*
hcd
, 
usb_pùe
 *
pùe
, *
d©a
);

441 
uhci_io˘l
–*
hcd
, 
cmd
, *
u¨g
);

442 
uhci_£t_åa˚_Àvñ
–*
hcd
, *
åa˚_Àvñ
);

443 
uhci_hub_öfo
–*
hcd
, *
öfo
);

444 
uhci_p‹t_a˘i⁄
–*
hcd
, 
p‹t
, 
a˘i⁄
);

445 
uöt32_t
 
uhci_gë_p‹t
–*
hcd
, 
p‹t
);

446 
uhci_£t_roŸhub
(*
hcd
, *
roŸhub
);

447 
uhci_£t_debug_vÆues
–*
hcd
, *
pv
);

454 
hcd_mëhods_t
 
	guhci_mëhods
={

455 
uhci_ª£t
,

456 
uhci_°¨t
,

457 
uhci_öô
,

458 
uhci_°›
,

459 
uhci_shutdown
,

460 
uhci_su•íd
,

461 
uhci_ªsume
,

462 
uhci_°©us
,

463 
uhci_‰ì_pùe
,

464 
uhci_Æloc_c⁄åﬁ_pùe
,

465 
uhci_Æloc_bulk_pùe
,

466 
uhci_£nd_c⁄åﬁ
,

467 
uhci_£t_addªss
,

468 
uhci_usb_£nd_bulk
,

469 
uhci_Æloc_öå_pùe
,

470 
uhci_usb_pﬁl_öå
,

471 
uhci_io˘l
,

472 
uhci_£t_åa˚_Àvñ
,

473 
uhci_hub_öfo
,

474 
uhci_p‹t_a˘i⁄
,

475 
uhci_gë_p‹t
,

476 
uhci_£t_roŸhub
,

477 
uhci_£t_debug_vÆues
,

482 
uhci_¥o˚ss_evít
–*
‹igö
, *
de°
, 
evít_id
, *
¨g
);

483 
uhci_¥o˚ss_evít_‰om_usbc‹e
–*
de°
, 
evít_id
, *
¨g0
, *
¨g1
, *
¨g2
);

485 
moduÀ_hódî_t
 
	guhci_hódî
={

486 
USB_MOD_UHCI
,

490 
USB_DRIVER_IS_HCD
,

492 
uhci_£t_åa˚_Àvñ
,

493 
uhci_¥o˚ss_evít
,

494 
uhci_¥o˚ss_evít_‰om_usbc‹e
,

505 
usbuhci_öô
();

506 
usbuhci_u∆ﬂd
();

507 
usbuhci_ªg
();

508 
usbuhci_uƒeg
();

509 
usbuhci_©èch
(
vîãx_hdl_t
 
c⁄n
);

510 
usbuhci_dëach
(
vîãx_hdl_t
 
c⁄n
);

511 
pciio_ôî_f
 
	gusbuhci_ªlﬂdme
;

512 
pciio_ôî_f
 
	gusbuhci_u∆ﬂdme
;

513 
usbuhci_›í
(
dev_t
 *
devp
, 
oÊag
, 
Ÿyp
, 
¸ed_t
 *
¸p
);

514 
usbuhci_˛o£
(
dev_t
 
dev
, 
oÊag
, 
Ÿyp
, 
¸ed_t
 *
¸p
);

515 
usbuhci_io˘l
(
dev_t
 
dev
, 
cmd
, *
¨g
, 
mode
, 
¸ed_t
 *
¸p
, *
rvÆp
);

516 
usbuhci_ªad
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
);

517 
usbuhci_wrôe
(
dev_t
 
dev
, 
uio_t
 * 
ui›
,
¸ed_t
 *
¸p
);

518 
usbuhci_°øãgy
(
buf
 *
bp
);

519 
usbuhci_pﬁl
(
dev_t
 
dev
, 
evíts
, 
™yyë
,

520 *
ªvít•
, 
pﬁlhód
 **
phµ
, *
gíp
);

521 
usbuhci_m≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
, 
off_t
 
off
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
);

522 
usbuhci_unm≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
);

523 
usbuhci_dma_öå
(
öå_¨g_t
 
¨g
);

524 
îr‹_h™dÀr_f
 
	gusbuhci_îr‹_h™dÀr
;

525 
usbuhci_hÆt
();

526 
usbuhci_size
(
dev_t
 
dev
);

527 
usbuhci_¥öt
(
dev_t
 
dev
, *
°r
);

544 
usbc‹e_ö°™˚_t
 *
	$gë_usbc‹e
(){

545 
vîãx_hdl_t
 
vhdl
;

546 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

547 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

549 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

552 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
GRAPH_VERTEX_NONE
, "/usb/usbc‹e", &
vhdl
)){

553 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
,

555 (
NULL
);

558 
usbc‹e
 = (
usbc‹e_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
–
vhdl
);

559 if–
usbc‹e
 =
NULL
){

560 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
,

565 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

567 –
usbc‹e
);

568 
	}
}

571 
uch¨_t
 
	$uhci_ª°¨t
–
usbuhci_ö°™˚_t
 *
so·
){

572 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

573 
rc
;

575 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

576 i‡–
	`UREAD2
–
so·
, 
UHCI_CMD
Ë& 
UHCI_CMD_RS
) {

577 
	`TRACE
–
˛ass
, 10, "Already started", "");

578 
rc
 = 0;

579 
uhci_ª°¨t_exô
;

582 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "restarting", "");

591 
	`UHCICMD
(
so·
, (
UHCI_CMD_MAXP
 | 
UHCI_CMD_RS
));

595 
	`USECDELAY
( 10000);

599 i‡(
	`UREAD2
(
so·
, 
UHCI_STS
Ë& 
UHCI_STS_HCH
) {

600 
	`TRACE
–
˛ass
, 10, "failed", "");

601 
rc
 = 1;

602 
uhci_ª°¨t_exô
;

605 
rc
 = 0;

606 
uhci_ª°¨t_exô
:

607 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

608  (
rc
);

609 
	}
}

611 
	$uhci_p‹t_ª£t
(
usbuhci_ö°™˚_t
 *
so·
, 
ödex
){

612 
p‹t
, 
x
, 
lim
, 
p‹t_m≠≥d
;

613 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

614 
rc
;

616 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

618 
	`TRACE
–
˛ass
, 12, "hcd drivî = '%s'", 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

619 
p‹t_m≠≥d
 = 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
 * 2 + (
ödex
 % 2);

620 
	`TRACE
–
˛ass
, 12, "p‹àm≠≥d=%d", 
p‹t_m≠≥d
);

621 
	`TRACE
–
˛ass
, 10, "so·=%x, uhcù‹t=%d", 
so·
, 
ödex
);

623 i‡(
ödex
 == 1)

624 
p‹t
 = 
UHCI_PORTSC1
;

625 i‡(
ödex
 == 2)

626 
p‹t
 = 
UHCI_PORTSC2
;

638 
x
 = 
	`URWMASK
(
	`UREAD2
(
so·
, 
p‹t
));

639 
	`UWRITE2
(
so·
, 
p‹t
, 
x
 | 
UHCI_PORTSC_PR
);

640 
	`USECDELAY
–
so·
->
debug_p‹t_roŸ_ª£t_dñay
);

643 
x
 = 
	`URWMASK
(
	`UREAD2
(
so·
, 
p‹t
));

644 
	`UWRITE2
(
so·
, 
p‹t
, 
x
 & ~
UHCI_PORTSC_PR
);

650 
	`USECDELAY
–
so·
->
debug_p‹t_ª£t_ªcovîy_dñay
);

653 
x
 = 
	`URWMASK
(
	`UREAD2
(
so·
, 
p‹t
));

655 
	`UWRITE2
(
so·
, 
p‹t
, 
x
 | 
UHCI_PORTSC_POEDC
 | 
UHCI_PORTSC_CSC
);

657 
lim
 = 0;Üim < 500;Üim++) {

658 
x
 = 
	`UREAD2
(
so·
, 
p‹t
);

660 
	`TRACE
–
˛ass
, 4, "uhciÖort %d iteration %u, status = 0x%04x",

661 
ödex
, 
lim
, 
x
);

663 
	`TRACE
–
˛ass
, 12, "p‹àm≠≥d=%d", 
p‹t_m≠≥d
);

664 
	`TRACE
–
˛ass
, 10, "so·=%x, uhcù‹t=%d", 
so·
, 
ödex
);

666 i‡(!(
x
 & 
UHCI_PORTSC_CCS
)) {

675 
	`TRACE
–
˛ass
, 4, "uhciÖort %dÜoop %u, device detached",

676 
ödex
, 
lim
);

677 
rc
 = 0;

678 
uhci_p‹åe£t_d⁄e
;

680 i‡(
x
 & (
UHCI_PORTSC_POEDC
 | 
UHCI_PORTSC_CSC
)) {

687 
	`UWRITE2
(
so·
, 
p‹t
, 
	`URWMASK
(
x
) |

688 (
x
 & (
UHCI_PORTSC_POEDC
 | 
UHCI_PORTSC_CSC
)));

689 
	`TRACE
–
˛ass
, 4, "CSC stillÉnabled, continue",

690 
ödex
, 
lim
);

691 
	`USECDELAY
(10);

694 i‡(
x
 & 
UHCI_PORTSC_PE
) {

696 
	`TRACE
–
˛ass
, 2, "portÉnabled", "");

697 
rc
 = 0;

698 
uhci_p‹åe£t_d⁄e
;

701 
	`UWRITE2
(
so·
, 
p‹t
, 
	`URWMASK
(
x
Ë| 
UHCI_PORTSC_PE
);

702 
	`USECDELAY
–
so·
->
debug_p‹t_ª£t_dñay
);

706 
	`TRACE
–
˛ass
, 4, "uhcòp‹à%dÑe£àtimed out", 
ödex
);

707 
rc
 = 1;

709 
uhci_p‹åe£t_d⁄e
:

712 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

713  (
rc
);

714 
	}
}

717 
	$uhci_p‹ts_pﬁl
–
usbuhci_ö°™˚_t
 *
so·
){

718 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

719 
uöt16_t
 
ªg
;

720 
usbc‹e_ö°™˚_t
 *
usbc‹e
 = 
so·
->usbcore;

721 
usbhub_ö°™˚_t
 *
roŸhub
 = 
so·
->roothub;

722 
hub_mëhods_t
 *
hub_mëhods
;

723 
uöt32_t
 
p‹t_num
;

724 
evít
 = 0, 
rc
 = 0;

726 if–
so·
 =
NULL
)

729 if–
so·
->
ps_ôimeout
 == 0){

730 
so·
->
ps_°›≥d_timeout
 = 0;

735 
	`MUTEX_LOCK
–&
roŸhub
->
uhci_muãx
, -1);

737 
ªg
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC1
);

738 if–
ªg
 & 
UHCI_PORTSC_CSC
){

740 
p‹t_num
 = 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
 * 2 + 1;

741 
	`TRACE
–
˛ass
, 10, "p‹äum %d ch™ged", 
p‹t_num
);

743 
	`UWRITE2
–
so·
, 
UHCI_PORTSC1
, 
ªg
);

745 if–
ªg
 & 
UHCI_PORTSC_CCS
){

746 
	`TRACE
–
˛ass
, 10, "device connected", "");

747 
evít
 = 
USB_EVENT_PORT_CONNECT
;

748 
	`uhci_p‹t_ª£t
–
so·
, 1);

751 
	`TRACE
–
˛ass
, 10, "device disconnected", "");

752 
evít
 = 
USB_EVENT_PORT_DISCONNECT
;

758 
ªg
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC2
);

759 if–
ªg
 & 
UHCI_PORTSC_CSC
){

761 
p‹t_num
 = 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
 * 2;

762 
	`TRACE
–
˛ass
, 10, "p‹äum %d ch™ged", 
p‹t_num
);

764 
	`UWRITE2
–
so·
, 
UHCI_PORTSC2
, 
ªg
);

766 if–
ªg
 & 
UHCI_PORTSC_CCS
){

767 
	`TRACE
–
˛ass
, 10, "device connected", "");

768 
evít
 = 
USB_EVENT_PORT_CONNECT
;

769 
	`uhci_p‹t_ª£t
–
so·
, 2);

771 
	`TRACE
–
˛ass
, 10, "device disconnected", "");

772 
evít
 = 
USB_EVENT_PORT_DISCONNECT
;

777 
	`MUTEX_UNLOCK
–&
roŸhub
->
uhci_muãx
);

780 
hub_mëhods
 = 
roŸhub
->
devi˚_hódî
.
mëhods
;

782 if–
evít
 != 0){

783 
	`TRACE
–
˛ass
, 10, "so·=%x,Ö‹t=%d", 
so·
, 
p‹t_num
);

784 
hub_mëhods
->
	`¥o˚ss_evít_‰om_hcd
–(*Ë
so·
, (*Ë
roŸhub
, 
evít
,

785 (*Ë&
p‹t_num
, 
NULL
);

793 
so·
->
ps_ôimeout
 = 
	`ôimeout
(
uhci_p‹ts_pﬁl
, so·, 
	`drv_u£˘ohz
(100000), 0);

796 
	}
}

805 
	$uhci_ª£t
–*
hcd
){

806 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

807 
rc
 = 0;

808 
n
;

809 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

811 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

812 
	`TRACE
–
˛ass
, 12, "hcd drivî = '%s'", 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

815 
	`UWRITE2
(
so·
, 
UHCI_INTR
, 0);

818 
	`UHCICMD
(
so·
, 
UHCI_CMD_GRESET
);

821 
	`USECDELAY
( 10000);

824 
	`UHCICMD
(
so·
, 
UHCI_CMD_HCRESET
);

827 
n
 = 100;

828 
n
--) {

830 
	`USECDELAY
( 1000);

832 i‡(!(
	`UREAD2
(
so·
, 
UHCI_CMD
Ë& 
UHCI_CMD_HCRESET
)) {

833 
rc
 = 0;

834 
d⁄e_1
;

837 
rc
 = 1;

838 
	`TRACE
–
˛ass
, 8, "controller didÇotÑeset", "");

840 
d⁄e_1
:

842 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "íd,Ñ¯%d", 
rc
);

843 –
rc
);

844 
	}
}

847 
	$uhci_°¨t
–*
hcd
){

848 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

849 
rc
;

850 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

853 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

854 
	`TRACE
–
˛ass
, 12, "hcd drivî = '%s'", 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

856 
so·
->
ps_°›≥d_timeout
 = 1;

857 
so·
->
ps_ôimeout
 = 
	`ôimeout
(
uhci_p‹ts_pﬁl
, so·, 
	`drv_u£˘ohz
(200000), 0);

858 
	`TRACE
–
˛ass
, 12, "ps_ôimeouà%d", 
so·
->
ps_ôimeout
);

860 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

861 –
rc
);

862 
	}
}

864 
	$uhci_öô
–*
hcd
){

865 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

866 
uhci_å™s„r_queues_t
 *
tq
;

867 
rc
, 
i
;

868 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

869 
dma_node_t
 *
dma_node_tq
;

870 
dma_node_t
 *
dma_node_Ê
;

871 
uhci_‰amñi°_t
 *
Ê
;

874 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

875 
	`TRACE
–
˛ass
, 12, "hcd drivî = '%s'", 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

877 
rc
 = 
	`uhci_ª£t
–
hcd
);

879 
	`dma_li°_öô
–&
dma_li°
);

882 
dma_node_tq
 = 
	`dma_Æloc
–
so·
->
ps_c⁄n
, &
dma_li°
, (
uhci_å™s„r_queues_t
));

885 
dma_node_Ê
 = 
	`dma_Æloc
–
so·
->
ps_c⁄n
, &
dma_li°
, (
uhci_‰amñi°_t
));

887 if–
dma_node_tq
 =
NULL
 || 
dma_node_Ê
 == NULL){

888 
	`TRACE
–
˛ass
, 4, "Error in dma_alloc()!!!", "");

892 
	`TRACE
–
˛ass
, 10, "dmaÑeserved", "");

893 
Ê
 = ( 
uhci_‰amñi°_t
 *Ë
dma_node_Ê
->
mem
;

894 
tq
 = ( 
uhci_å™s„r_queues_t
 *Ë
dma_node_tq
->
mem
;

896 
	`mem£t
–
tq
, 0, –
uhci_å™s„r_queues_t
 ));

897 
	`mem£t
–
Ê
, 0, –
uhci_‰amñi°_t
 ));

905 
tq
->
ãrm_td
.
lök
 = 
UHCI_PTR_TERM
;

906 
tq
->
ãrm_td
.
tokí
 = ( 
	`uhci_ex∂í
(0Ë| (0x7‡<< 
TD_TOKEN_DEVADDR_SHIFT
Ë| 
USB_PID_IN
);

907 
tq
->
ãrm_td
.
klök
 = (*Ë
UHCI_PTR_TERM
;

909 
tq
->
ãrm_qh
.
lök
 = 
UHCI_PTR_TERM
;

910 
tq
->
ãrm_qh
.
ñemít
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
, dma_node_tq->
kaddr
, &tq->
ãrm_td
);

911 
tq
->
ãrm_qh
.
klök
 = (*Ë
UHCI_PTR_TERM
;

912 
tq
->
ãrm_qh
.
k¥i‹_lök
 = (*Ë
UHCI_PTR_TERM
;

913 
tq
->
ãrm_qh
.
this
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
, dma_node_tq->
kaddr
, &tq->term_qh);

927 
tq
->
queue_hóds
[
UHCI_QH1
].
lök
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

928 
dma_node_tq
->
kaddr
, &
tq
->
ãrm_qh
Ë| 
UHCI_PTR_QH
;

929 
tq
->
queue_hóds
[
UHCI_QH1
].
ñemít
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

930 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
UHCI_QH1S
]Ë| 
UHCI_PTR_QH
;

931 
tq
->
queue_hóds
[
UHCI_QH1
].
klök
 = (*Ë&tq->
ãrm_qh
;

932 
tq
->
queue_hóds
[
UHCI_QH1
].
kñemít
 = (*Ë&tq->queue_hóds[
UHCI_QH1S
];

935 
tq
->
queue_hóds
[
UHCI_QH1S
].
lök
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

936 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
UHCI_QH1E
]Ë| 
UHCI_PTR_QH
;

937 
tq
->
queue_hóds
[
UHCI_QH1S
].
ñemít
 = 
UHCI_PTR_TERM
;

938 
tq
->
queue_hóds
[
UHCI_QH1S
].
klök
 = (*Ë&tq->queue_hóds[
UHCI_QH1E
];

939 
tq
->
queue_hóds
[
UHCI_QH1S
].
kñemít
 = (*Ë
UHCI_PTR_TERM
;

940 
tq
->
queue_hóds
[
UHCI_QH1S
].
¥i‹_lök
 = 
UHCI_PTR_TERM
;

941 
tq
->
queue_hóds
[
UHCI_QH1S
].
k¥i‹_lök
 = (*Ë
NULL
;

942 
tq
->
queue_hóds
[
UHCI_QH1S
].
this
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

943 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
UHCI_QH1S
]) ;

946 
tq
->
queue_hóds
[
UHCI_QH1E
].
lök
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

947 
dma_node_tq
->
kaddr
, &
tq
->
ãrm_qh
Ë| 
UHCI_PTR_QH
;

948 
tq
->
queue_hóds
[
UHCI_QH1E
].
ñemít
 = 
UHCI_PTR_TERM
;

949 
tq
->
queue_hóds
[
UHCI_QH1E
].
klök
 = (*Ë&tq->
ãrm_qh
;

950 
tq
->
queue_hóds
[
UHCI_QH1E
].
kñemít
 = (*Ë
UHCI_PTR_TERM
;

951 
tq
->
queue_hóds
[
UHCI_QH1E
].
¥i‹_lök
 =Åq->queue_hóds[
UHCI_QH1S
].
this
;

952 
tq
->
queue_hóds
[
UHCI_QH1E
].
k¥i‹_lök
 = (*Ë&tq->queue_hóds[
UHCI_QH1S
];

953 
tq
->
queue_hóds
[
UHCI_QH1E
].
this
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

954 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
UHCI_QH1E
]) ;

966  
i
 = 1; i < 
UHCI_QHNUM
; i++){

967 
tq
->
queue_hóds
[
i
].
lök
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

968 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
i
-1]Ë| 
UHCI_PTR_QH
;

969 
tq
->
queue_hóds
[
i
].
ñemít
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

970 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
i
+8]Ë| 
UHCI_PTR_QH
;

971 
tq
->
queue_hóds
[
i
].
klök
 = (*) &tq->queue_heads[i-1];

972 
tq
->
queue_hóds
[
i
].
kñemít
 = (*) &tq->queue_heads[i+8];

975 
tq
->
queue_hóds
[
i
+8].
lök
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

976 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
i
+16]Ë| 
UHCI_PTR_QH
;

977 
tq
->
queue_hóds
[
i
+8].
ñemít
 = 
UHCI_PTR_TERM
;

978 
tq
->
queue_hóds
[
i
+8].
klök
 = (*) &tq->queue_heads[i+16];

979 
tq
->
queue_hóds
[
i
+8].
kñemít
 = (*Ë
UHCI_PTR_TERM
;

980 
tq
->
queue_hóds
[
i
+8].
¥i‹_lök
 = 
UHCI_PTR_TERM
;

981 
tq
->
queue_hóds
[
i
+8].
k¥i‹_lök
 = (*Ë
NULL
;

982 
tq
->
queue_hóds
[
i
+8].
this
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

983 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
i
+8]) ;

985 
tq
->
queue_hóds
[
i
+16].
lök
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

986 
dma_node_tq
->
kaddr
, &
tq
->
ãrm_qh
Ë| 
UHCI_PTR_QH
;

987 
tq
->
queue_hóds
[
i
+16].
ñemít
 = 
UHCI_PTR_TERM
;

988 
tq
->
queue_hóds
[
i
+16].
klök
 = (*Ë&tq->
ãrm_qh
;

989 
tq
->
queue_hóds
[
i
+16].
kñemít
 = (*Ë
UHCI_PTR_TERM
;

990 
tq
->
queue_hóds
[
i
+16].
¥i‹_lök
 =Åq->queue_hóds[i+8].
this
;

991 
tq
->
queue_hóds
[
i
+16].
k¥i‹_lök
 = (*Ë&tq->queue_hóds[i+8].
this
;

992 
tq
->
queue_hóds
[
i
+16].
this
 = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

993 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[
i
+16]);

1030  
i
 = 0; i < 1024; i++){

1031 
Ê
->
löks
[
i
] = (
uöt32_t
Ë
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

1032 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[0]Ë| 
UHCI_PTR_QH
;

1034 if–(
i
 % 2) == 1){

1035 
Ê
->
löks
[
i
] = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

1036 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[1]Ë| 
UHCI_PTR_QH
;

1039 if–(
i
 % 4) == 3){

1040 
Ê
->
löks
[
i
] = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

1041 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[2]Ë| 
UHCI_PTR_QH
;

1044 if–(
i
 % 8) == 7){

1045 
Ê
->
löks
[
i
] = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

1046 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[3]Ë| 
UHCI_PTR_QH
;

1049 if–(
i
 % 16) == 15){

1050 
Ê
->
löks
[
i
] = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

1051 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[4]Ë| 
UHCI_PTR_QH
;

1053 if–(
i
 % 32) == 31){

1054 
Ê
->
löks
[
i
] = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

1055 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[5]Ë| 
UHCI_PTR_QH
;

1057 if–(
i
 % 64) == 63){

1058 
Ê
->
löks
[
i
] = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

1059 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[6]Ë| 
UHCI_PTR_QH
;

1061 if–(
i
 % 128) == 127){

1062 
Ê
->
löks
[
i
] = 
	`kaddr_2_daddr
–
dma_node_tq
->
daddr
,

1063 
dma_node_tq
->
kaddr
, &
tq
->
queue_hóds
[7]Ë| 
UHCI_PTR_QH
;

1066 
so·
->
‰amñi°
 = 
Ê
;

1067 
so·
->
tq
 =Åq;

1071 
	`UWRITE1
–
so·
, 
UHCI_SOF
, 0x40);

1074 
	`UWRITE4
–
so·
, 
UHCI_FLBASEADDR
, (
uöt32_t
 ) 
dma_node_Ê
->
daddr
);

1077 
	`UWRITE2
–
so·
, 
UHCI_FRNUM
, 0);

1081 
	`UHCICMD
(
so·
, (
UHCI_CMD_MAXP
 | 
UHCI_CMD_RS
 | 
UHCI_CMD_CF
));

1084 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1085 –
rc
);

1086 
	}
}

1088 
	$uhci_°›
–*
hcd
){

1089 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1090 
rc
;

1091 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1094 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1095 
rc
 = 
	`uhci_ª£t
–
hcd
);

1096 
	`UHCICMD
(
so·
, 0);

1098 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1099 –
rc
);

1100 
	}
}

1102 
	$uhci_shutdown
–*
hcd
){

1103 
	}
}

1105 
	$uhci_su•íd
–*
hcd
){

1106 
	}
}

1108 
	$uhci_ªsume
–*
hcd
){

1109 
	}
}

1111 
	$uhci_°©us
–*
hcd
){

1112 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1113 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1114 
uöt16_t
 
°©us
;

1115 
rc
;

1117 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1118 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

1119 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

1122 
°©us
 = (
	`UREAD2
(
so·
, 
UHCI_STS
Ë& ( 
UHCI_STS_HSE
|
UHCI_STS_HCPE
));

1123 if–
°©us
 == 0){

1124 
rc
 = 0;

1126 
rc
 = 1;

1128 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1129 –
rc
);

1130 
	}
}

1132 
	$uhci_‰ì_pùe
–*
hcd
, 
usb_pùe
 *
pùe
){

1133 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1134 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1137 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1138 
	`TRACE
–
˛ass
, 12, "hcd drivî = '%s'", 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

1141 if–
pùe
->
ty≥
 =
USB_PIPE_CONTROL
){

1142 
	`dma_døö
–
pùe
->
dma_node
);

1143 
	`dma_d⁄e
–
pùe
->
dma_node
);

1144 
	`dma_‰ì
–
pùe
->
dma_node
);

1147 
	`gc_m¨k
–
pùe
);

1149 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1150 
	}
}

1152 
	$uhci_ö£π_queue
–
dma_node_t
 *
q
, 
usbuhci_ö°™˚_t
 *
so·
, 
numtq
){

1153 
uhci_å™s„r_queues_t
 *
tq
 = 
so·
->tq;

1154 
uhci_c⁄åﬁ_chaö_t
 *
chaö
 = (uhci_c⁄åﬁ_chaö_à*Ë
q
->
mem
;

1155 
uhci_qh_t
 *
°¨t
 = &
tq
->
queue_hóds
[
numtq
+8];

1156 
uhci_qh_t
 *
íd
 = &
tq
->
queue_hóds
[
numtq
+8];

1158 
chaö
->
qh
.
lök
 = 
°¨t
->lök | 
UHCI_PTR_QH
;

1159 
chaö
->
qh
.
klök
 = 
°¨t
->klink;

1160 
chaö
->
qh
.
¥i‹_lök
 = 
°¨t
->
this
;

1161 
chaö
->
qh
.
k¥i‹_lök
 = (*Ë
°¨t
;

1163 
°¨t
->
lök
 = 
chaö
->
qh
.
this
| 
UHCI_PTR_QH
;

1164 
°¨t
->
klök
 = (*Ë&
chaö
->
qh
;

1168 
	}
}

1171 
usb_pùe_t
 *
	$uhci_Æloc_c⁄åﬁ_pùe
–*
hcd
, 
p‹t_num
, 
td_addr_t
 *
td_addr
){

1172 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1173 
usb_pùe_t
 *
pùe
;

1174 
mem_size
, 
i
, 
tdnum
;

1175 
dma_node_t
 *
dma_chunk
;

1176 
uhci_c⁄åﬁ_chaö_t
 *
chaö
;

1179 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1182 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1183 
	`TRACE
–
˛ass
, 12, "hcd drivî = '%s'", 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

1186 
pùe
 = (
usb_pùe_t
 *Ë
	`gc_mÆloc
–&
gc_li°
, ( usb_pipe_t));

1187 
	`bzîo
––*Ë
pùe
, –
usb_pùe_t
));

1189 
mem_size
 = –
uhci_c⁄åﬁ_chaö_t
);

1191 
dma_chunk
 = 
	`dma_Æloc
–
so·
->
ps_c⁄n
, &
dma_li°
, 
mem_size
);

1194 
pùe
->
dma_node
 = (*Ë
dma_chunk
;

1195 
pùe
->
qh
 = (*Ë
dma_chunk
->
mem
;

1196 
pùe
->
sögÀ_dma_£gmít
 = 1;

1197 
pùe
->
hcd
 = hcd;

1198 
pùe
->
num_tds
 = 0;

1199 
pùe
->
p‹t_num
 =Öort_num;

1200 
pùe
->
ty≥
 = 
USB_PIPE_CONTROL
;

1201 
pùe
->
devaddr
 = 0;

1204 
chaö
 = ( 
uhci_c⁄åﬁ_chaö_t
 *Ë
dma_chunk
->
mem
;

1206 
chaö
->
qh
.
this
 = 
dma_chunk
->
daddr
;

1207 
chaö
->
qh
.
lök
 = 
UHCI_PTR_TERM
;

1208 
chaö
->
qh
.
klök
 = (*Ëchaö->qh.
lök
;

1209 
chaö
->
qh
.
ñemít
 = chaö->qh.
this
 + –
uhci_qh_t
);

1210 
chaö
->
qh
.
kñemít
 = &chaö->
td
[0];

1215  
i
 = 0; i < 6; i++){

1216 
chaö
->
td
[
i
].
this
 = chaö->
qh
.thi†+ –
uhci_qh_t
Ë+ (ò* –
uhci_td_t
 ) );

1217 
chaö
->
td
[
i
].
lök
 = chaö->td[i].
this
 + –
uhci_td_t
 );

1218 
chaö
->
td
[
i
].
klök
 = &chain->td[i+1];

1219 
chaö
->
td
[
i
].
buf„r
 = 
	`kaddr_2_daddr
–
dma_chunk
->
daddr
, dma_chunk->
kaddr
, &chain->buffer[i*16]);

1220 
chaö
->
td
[
i
].
kbuf„r
 = &chaö->
buf„r
[i*16];

1224 
chaö
->
td
[
i
].
lök
 = 
UHCI_PTR_TERM
;

1225 
chaö
->
td
[
i
].
klök
 = 
NULL
;

1227 
	`bc›y
–(*Ë
td_addr
, (*Ë&
pùe
->
tds
, –
td_addr_t
Ë* 
TD_ADDR_SIZE_VEC
);

1229 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1230 –(
usb_pùe_t
 *Ë
pùe
);

1231 
	}
}

1236 
	$waô_qh
(
usbuhci_ö°™˚_t
 *
so·
, 
uhci_qh_t
 *
qh
){

1237 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1238 
i
, 
rc
;

1239 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1242 
com∂ëe
 = 0;

1244  
i
 = 0; i < 100; i++){

1245 
	`USECDELAY
( 5000);

1247 i‡(
qh
->
ñemít
 & 
UHCI_PTR_TERM
){

1248 
rc
 = 0;

1249 
waô_qh_quô
;

1253 
rc
 = 1;

1254 
	`TRACE
–
˛ass
, 12, "Timeout waiting for queue head", "");

1256 
waô_qh_quô
:

1257 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1259 –
rc
);

1260 
	}
}

1263 
	$waô_f‹_å™s„r
(
usbuhci_ö°™˚_t
 *
so·
, 
uhci_c⁄åﬁ_chaö_t
 *
chaö
){

1264 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1265 
i
, 
rc
;

1266 
uöt32_t
 
v
;

1267 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1270 
com∂ëe
 = 0;

1272  
i
 = 0; i < 10; i++){

1273 
	`USECDELAY
( 5000);

1275 i‡–
chaö
->
qh
.
ñemít
 & 
UHCI_PTR_TERM
){

1276 
rc
 = 0;

1277 
waô_f‹_å™s„r_quô
;

1280 
v
 = 
chaö
->
td
[0].
°©us
 & 0x07fe0000;

1281 if–
v
 & 
TD_CTRL_ACTIVE
) {

1282 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "TD status: ACTIVE", "");

1286 if–
v
 & 
TD_CTRL_STALLED
)

1287 
	`TRACE
–
˛ass
, 10, "TD status: STALLED", "");

1288 if–
v
 & 
TD_CTRL_DBUFERR
)

1289 
	`TRACE
–
˛ass
, 10, "TD status: DBUFER ERR", "");

1290 if–
v
 & 
TD_CTRL_BABBLE
)

1291 
	`TRACE
–
˛ass
, 10, "TD status: BABBLE", "");

1292 if–
v
 & 
TD_CTRL_NAK
)

1293 
	`TRACE
–
˛ass
, 10, "TD status: NAK", "");

1294 if–
v
 & 
TD_CTRL_CRCTIMEO
)

1295 
	`TRACE
–
˛ass
, 10, "TD status: CRC_TIMEO", "");

1296 if–
v
 & 
TD_CTRL_BITSTUFF
)

1297 
	`TRACE
–
˛ass
, 10, "TD status: BITSTUFF", "");

1299 if–
v
 == 0)

1300 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "TD status: COMPLETE", "");

1302 
rc
 = 0;

1303 
waô_f‹_å™s„r_quô
;

1305 
rc
 = 1;

1306 
	`TRACE
–
˛ass
, 12, "Timeout waiting for queue head", "");

1308 
waô_f‹_å™s„r_quô
:

1309 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1311 –
rc
);

1312 
	}
}

1316 
	$uhci_waôtick
–
usbuhci_ö°™˚_t
 *
so·
){

1317 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1318 
i
, 
rc
;

1319 
uöt16_t
 
°¨t_‰ame
, 
v
;

1321 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1322 
°¨t_‰ame
 = 
	`UREAD2
–
so·
, 
UHCI_FRNUM
);

1323  
i
 = 0; i < 100; i++){

1324 
	`USECDELAY
( 1000);

1325 
v
 = 
	`UREAD2
–
so·
, 
UHCI_FRNUM
);

1326 if–
°¨t_‰ame
 !
v
){

1327 
rc
 = 0;

1328 
quô_uhci_waôtick
;

1331 
rc
 = 1;

1333 
quô_uhci_waôtick
:

1334 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1336 –
rc
);

1337 
	}
}

1341 
usb_pùe
 *
	$uhci_Æloc_bulk_pùe
–*
hcd
, 
usb_pùe
 *
pùe
, 
usb_ídpoöt_des¸ùt‹
 *
des¸ùt‹
){

1342 
	}
}

1345 
	$uhci_chaö_dump
–
uhci_c⁄åﬁ_chaö_t
 *
chaö
){

1346 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1347 
i
;

1349 
	`TRACE
–
˛ass
, 12, "----- chain dump", "");

1350 
	`TRACE
–
˛ass
, 12, "QH:", "");

1351 
	`dump_uöt32
–
˛ass
, 12, (
uöt32_t
 *Ë&
chaö
->
qh
, –
uhci_qh_t
));

1352 
	`USECDELAY
( 4000);

1355  
i
 = 0; i < 3; i++){

1356 
	`TRACE
–
˛ass
, 12, "TD%d:", 
i
);

1357 
	`dump_uöt32
–
˛ass
, 12, (
uöt32_t
 *Ë&
chaö
->
td
[
i
], –
uhci_td_t
));

1358 
	`USECDELAY
( 40000);

1361  
i
 = 0; i < 3; i++){

1362 
	`TRACE
–
˛ass
, 12, "BUF%d:", 
i
);

1363 
	`dump_uöt32
–
˛ass
, 12, (
uöt32_t
 *Ë&
chaö
->
buf„r
[
i
*16], 16);

1364 
	`USECDELAY
( 40000);

1368 
	}
}

1370 
	$uhci_£nd_c⁄åﬁ
–*
hcd
, 
usb_pùe
 *
p
, 
dú
, *
cmd
, 
cmdsize
, *
d©a
, 
d©asize
){

1371 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1372 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1373 
uhci_c⁄åﬁ_chaö_t
 *
chaö
;

1374 
rc
, 
i
;

1375 
Àn
, 
toggÀ
;

1376 
timeout
 = 50;

1377 
uöt16_t
 
ªgv
;

1378 
usb_˘æªque°_t
 
ªq
;

1379 
usb_devi˚_des¸ùt‹_t
 *
döfo
;

1380 
usb_˘æªque°_t
 *
r
;

1381 
dma_node_t
 *
dma_chunk
;

1382 
uöt32_t
 
addr
;

1384 
°r
[32];

1385 
uch¨_t
 
buffõ
[8] = { 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 };

1386 
uch¨_t
 
buffõ2
[8] ={ 0x80, 0x06, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00 };

1389 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1392 
	`UWRITE2
(
so·
, 
UHCI_INTR
, 0x000f);

1393 
	`UWRITE2
(
so·
, 
UHCI_FRNUM
, 0x0000);

1394 
	`UWRITE2
(
so·
, 
UHCI_SOF
, 0x0040);

1396 
dma_chunk
 = (
dma_node_t
 *Ë
p
->
dma_node
;

1397 
chaö
 = ( 
uhci_c⁄åﬁ_chaö_t
 *Ë
p
->
qh
;

1399 
chaö
->
qh
.
lök
 = 
so·
->
tq
->
ãrm_qh
.
this
;

1400 
chaö
->
qh
.
ñemít
 = chaö->
td
[0].
this
;

1402 
chaö
->
td
[0].
lök
 = chaö->td[1].
this
 | 0x00000004;

1403 
chaö
->
td
[0].
°©us
 = 0x1c800000;

1404 
chaö
->
td
[0].
tokí
 = 0x00e0002d;

1405 
chaö
->
td
[0].
buf„r
 = 
	`kaddr_2_daddr
–
dma_chunk
->
daddr
, dma_chunk->
kaddr
, &chain->buffer[0]);

1407 
chaö
->
td
[1].
lök
 = chaö->td[2].
this
 | 0x00000004;

1408 
chaö
->
td
[1].
°©us
 = 0x1c800000;

1409 
chaö
->
td
[1].
tokí
 = 0x00e80069;

1410 
chaö
->
td
[1].
buf„r
 = 
	`kaddr_2_daddr
–
dma_chunk
->
daddr
, dma_chunk->
kaddr
, &chain->buffer[16]);

1412 
chaö
->
td
[2].
lök
 = 0x00000001;

1413 
chaö
->
td
[2].
°©us
 = 0x1d800000;

1414 
chaö
->
td
[2].
tokí
 = 0xffe800e1;

1415 
chaö
->
td
[2].
buf„r
 = 0x00000000;

1418 
	`bc›y
–(*Ë
buffõ2
, (*Ë
chaö
->
td
[0].
kbuf„r
, 8);

1421 
	`UWRITE2
(
so·
, 
UHCI_STS
, 0x0001);

1424 
r
 = (
usb_˘æªque°_t
 *Ë
cmd
;

1425 
addr
 = 1;

1453 
so·
->
‰amñi°
->
löks
[0] = 
chaö
->
qh
.
this
 | 
UHCI_PTR_QH
;

1458 
timeout
 = 100;

1459 !–
	`UREAD2
–
so·
, 
UHCI_STS
Ë& 1Ë&& (
timeout
 > 0)) {

1460 
timeout
--;

1461 
	`USECDELAY
(100000);

1465 i‡(
timeout
 == 0) {

1466 
	`TRACE
–
˛ass
, 12, "UHCIÅimeout inÅransfers1", "");

1468 
	`TRACE
–
˛ass
, 12, "UHCIÅøns„∏ok1 %d", 
timeout
);

1472 
	`UWRITE2
(
so·
, 
UHCI_STS
, 1);

1474 
timeout
 = 100;

1475  ((
chaö
->
td
[0].
°©us
 & (0xFF<<16)Ë!0Ë&& (
timeout
 > 0)){

1476 
timeout
--;

1477 
	`USECDELAY
(100000);

1478 
	`dma_døö
–
p
->
dma_node
);

1480 i‡(
timeout
 == 0){

1481 
	`TRACE
–
˛ass
, 12, "UHCIÉrror inÅransfers2", "");

1483 
	`TRACE
–
˛ass
, 12, "UHCIÅransfer ok2", "");

1486 
so·
->
‰amñi°
->
löks
[0] = soft->framelist->links[2];

1488 
	`uhci_chaö_dump
–
chaö
);

1489 
	`TRACE
–
˛ass
, 12, "FRAMELIST", "");

1490 
	`dump_uöt32
–
˛ass
, 12, (
uöt32_t
 *Ë
so·
->
‰amñi°
->
löks
, 16);

1492 
	`USECDELAY
( 10000);

1494 
	`TRACE
–
˛ass
, 12, "REGISTERS", "");

1495 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_STS
);

1496 
	`INT2HEX16X
–
°r
, 
ªgv
);

1497 
	`TRACE
–
˛ass
, 12, "°©u†%s", 
°r
);

1499 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_CMD
);

1500 
	`INT2HEX16X
–
°r
, 
ªgv
);

1501 
	`TRACE
–
˛ass
, 12, "cmd = %s", 
°r
);

1503 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_INTR
);

1504 
	`INT2HEX16X
–
°r
, 
ªgv
);

1505 
	`TRACE
–
˛ass
, 12, "öå = %s", 
°r
);

1507 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC1
);

1508 
	`INT2HEX16X
–
°r
, 
ªgv
);

1509 
	`TRACE
–
˛ass
, 12, "p‹t1 = %s", 
°r
);

1511 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC2
);

1512 
	`INT2HEX16X
–
°r
, 
ªgv
);

1513 
	`TRACE
–
˛ass
, 12, "p‹t1 = %s", 
°r
);

1514 
	`TRACE
–
˛ass
, 12, "UHCI GET8Énd", "");

1517 
	`USECDELAY
( 50000);

1519 
ªq
.
bReque°Ty≥
 = 
USB_DIR_IN
 | 
USB_TYPE_STANDARD
 | 
USB_RECIP_DEVICE
;

1520 
ªq
.
bReque°
 = 
USB_REQ_GET_DESCRIPTOR
;

1521 
ªq
.
wVÆue
 = 
	`B2LENDIAN
((
uöt16_t
)
USB_DT_DEVICE
<<8);

1522 
ªq
.
wIndex
 = 0;

1523 
ªq
.
wLígth
 = 8;

1526 
chaö
->
qh
.
lök
 = 
so·
->
tq
->
ãrm_qh
.
this
;

1527 
chaö
->
qh
.
ñemít
 = chaö->
td
[0].
this
;

1529 
chaö
->
td
[0].
lök
 = chaö->td[1].
this
 | 0x00000004;

1530 
chaö
->
td
[0].
°©us
 = 0x1c800000;

1531 
chaö
->
td
[0].
tokí
 = 0x00e0002d;

1534 
chaö
->
td
[1].
lök
 = 0x00000001;

1535 
chaö
->
td
[1].
°©us
 = 0x1d800000;

1536 
chaö
->
td
[1].
tokí
 = 0xffe80069;

1539 
	`bc›y
–(*Ë
buffõ
, (*Ë
chaö
->
td
[0].
kbuf„r
, 8);

1541 
	`uhci_chaö_dump
–
chaö
);

1545 
so·
->
‰amñi°
->
löks
[0] = 
chaö
->
qh
.
this
 | 
UHCI_PTR_QH
;

1549 
timeout
 = 100;

1550 !–
	`UREAD2
–
so·
, 
UHCI_STS
Ë& 1Ë&& (
timeout
 > 0)) {

1551 
timeout
--;

1552 
	`USECDELAY
(100000);

1556 i‡(
timeout
 == 0) {

1557 
	`TRACE
–
˛ass
, 12, "UHCIÅimeout inÅransfers1", "");

1559 
	`TRACE
–
˛ass
, 12, "UHCIÅøns„∏ok1 %d", 
timeout
);

1563 
	`UWRITE2
(
so·
, 
UHCI_STS
, 1);

1565 
timeout
 = 100;

1566  ((
chaö
->
td
[0].
°©us
 & (0xFF<<16)Ë!0Ë&& (
timeout
 > 0)){

1567 
timeout
--;

1568 
	`USECDELAY
(100000);

1569 
	`dma_døö
–
p
->
dma_node
);

1571 i‡(
timeout
 == 0){

1572 
	`TRACE
–
˛ass
, 12, "UHCIÉrror inÅransfers2", "");

1574 
	`TRACE
–
˛ass
, 12, "UHCIÅransfer ok2", "");

1577 
so·
->
‰amñi°
->
löks
[0] = soft->framelist->links[2];

1579 
	`uhci_chaö_dump
–
chaö
);

1580 
	`TRACE
–
˛ass
, 12, "UHCI SET ADDRESS completed", "");

1582 
	`USECDELAY
( 1000);

1585 
chaö
->
qh
.
lök
 = 
so·
->
tq
->
ãrm_qh
.
this
;

1586 
chaö
->
qh
.
ñemít
 = chaö->
td
[0].
this
;

1588 
chaö
->
td
[0].
lök
 = chaö->td[1].
this
 | 0x00000004;

1589 
chaö
->
td
[0].
°©us
 = 0x1c800000;

1590 
chaö
->
td
[0].
tokí
 = 0x00e0012d;

1593 
chaö
->
td
[1].
lök
 = chaö->td[2].
this
 | 0x00000004;

1594 
chaö
->
td
[1].
°©us
 = 0x1c800000;

1595 
chaö
->
td
[1].
tokí
 = 0x00e80169;

1598 
chaö
->
td
[2].
lök
 = chaö->td[3].
this
 | 0x00000004;

1599 
chaö
->
td
[2].
°©us
 = 0x1c800000;

1600 
chaö
->
td
[2].
tokí
 = 0x00e00169;

1603 
chaö
->
td
[3].
lök
 = chaö->td[4].
this
 | 0x00000004;

1604 
chaö
->
td
[3].
°©us
 = 0x1c800000;

1605 
chaö
->
td
[3].
tokí
 = 0x00280169;

1608 
chaö
->
td
[4].
lök
 = 0x00000001;

1609 
chaö
->
td
[4].
°©us
 = 0x1d800000;

1610 
chaö
->
td
[4].
tokí
 = 0xffe801e1;

1614 
	`bc›y
–(*Ë
buffõ2
, (*Ë
chaö
->
td
[0].
kbuf„r
, 8);

1619 
r
 = (
usb_˘æªque°_t
 *Ë
cmd
;

1620 
addr
 = 1;

1621 
	`uhci_chaö_dump
–
chaö
);

1623 
	`TRACE
–
˛ass
, 12, "FRAMELIST", "");

1624 
	`dump_uöt32
–
˛ass
, 12, (
uöt32_t
 *Ë
so·
->
‰amñi°
->
löks
, 16);

1625 
	`USECDELAY
( 10000);

1626 
	`TRACE
–
˛ass
, 12, "REGISTERS", "");

1627 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_STS
);

1628 
	`INT2HEX16X
–
°r
, 
ªgv
);

1629 
	`TRACE
–
˛ass
, 12, "°©u†%s", 
°r
);

1631 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_CMD
);

1632 
	`INT2HEX16X
–
°r
, 
ªgv
);

1633 
	`TRACE
–
˛ass
, 12, "cmd = %s", 
°r
);

1635 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_INTR
);

1636 
	`INT2HEX16X
–
°r
, 
ªgv
);

1637 
	`TRACE
–
˛ass
, 12, "öå = %s", 
°r
);

1639 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC1
);

1640 
	`INT2HEX16X
–
°r
, 
ªgv
);

1641 
	`TRACE
–
˛ass
, 12, "p‹t1 = %s", 
°r
);

1643 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC2
);

1644 
	`INT2HEX16X
–
°r
, 
ªgv
);

1645 
	`TRACE
–
˛ass
, 12, "p‹t2 = %s", 
°r
);

1646 
	`USECDELAY
(2000000);

1647 
so·
->
‰amñi°
->
löks
[0] = 
chaö
->
qh
.
this
 | 
UHCI_PTR_QH
;

1649 
timeout
 = 100;

1650 !–
	`UREAD2
–
so·
, 
UHCI_STS
Ë& 1Ë&& (
timeout
 > 0)) {

1651 
timeout
--;

1652 
	`USECDELAY
(100000);

1656 i‡(
timeout
 == 0) {

1657 
	`TRACE
–
˛ass
, 12, "UHCIÅimeout inÅransfers1", "");

1659 
	`TRACE
–
˛ass
, 12, "UHCIÅøns„∏ok1 %d", 
timeout
);

1663 
	`UWRITE2
(
so·
, 
UHCI_STS
, 1);

1665 
timeout
 = 100;

1666  ((
chaö
->
td
[0].
°©us
 & (0xFF<<16)Ë!0Ë&& (
timeout
 > 0)){

1667 
timeout
--;

1668 
	`USECDELAY
(200000);

1669 
	`dma_døö
–
p
->
dma_node
);

1671 i‡(
timeout
 == 0){

1672 
	`TRACE
–
˛ass
, 12, "UHCIÉrror inÅransfers2", "");

1674 
	`TRACE
–
˛ass
, 12, "UHCIÅransfer ok2", "");

1677 
so·
->
‰amñi°
->
löks
[0] = soft->framelist->links[2];

1679 
	`uhci_chaö_dump
–
chaö
);

1680 
	`TRACE
–
˛ass
, 12, "FRAMELIST", "");

1681 
	`dump_uöt32
–
˛ass
, 12, (
uöt32_t
 *Ë
so·
->
‰amñi°
->
löks
, 16);

1682 
	`USECDELAY
( 10000);

1683 
	`TRACE
–
˛ass
, 12, "REGISTERS", "");

1684 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_STS
);

1685 
	`INT2HEX16X
–
°r
, 
ªgv
);

1686 
	`TRACE
–
˛ass
, 12, "°©u†%s", 
°r
);

1688 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_CMD
);

1689 
	`INT2HEX16X
–
°r
, 
ªgv
);

1690 
	`TRACE
–
˛ass
, 12, "cmd = %s", 
°r
);

1692 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_INTR
);

1693 
	`INT2HEX16X
–
°r
, 
ªgv
);

1694 
	`TRACE
–
˛ass
, 12, "öå = %s", 
°r
);

1696 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC1
);

1697 
	`INT2HEX16X
–
°r
, 
ªgv
);

1698 
	`TRACE
–
˛ass
, 12, "p‹t1 = %s", 
°r
);

1700 
ªgv
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC2
);

1701 
	`INT2HEX16X
–
°r
, 
ªgv
);

1702 
	`TRACE
–
˛ass
, 12, "p‹t1 = %s", 
°r
);

1703 
	`USECDELAY
( 10000);

1705 
	`TRACE
–
˛ass
, 12, "UHCI GET DESCRIPTORÉnd", "");

1712 
	`USECDELAY
(5000000);

1763 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1765 –
rc
);

1767 
	}
}

1769 
	$uhci_£t_addªss
–*
hcd
, 
usb_pùe
 *
p
, 
dú
, *
cmd
, 
cmdsize
, *
d©a
, 
d©asize
){

1770 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1771 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1772 
	}
}

1774 
	$uhci_usb_£nd_bulk
–*
hcd
, 
usb_pùe
 *
pùe
, 
dú
, *
d©a
, 
d©asize
){

1775 
	}
}

1777 
	$uhci_Æloc_öå_pùe
–*
hcd
, 
usb_pùe
 *
pùe
, 
usb_ídpoöt_des¸ùt‹
 *
des¸ùt‹
){

1778 
	}
}

1780 
	$uhci_usb_pﬁl_öå
–*
hcd
, 
usb_pùe
 *
pùe
, *
d©a
){

1781 
	}
}

1783 
	$uhci_io˘l
–*
hcd
, 
cmd
, *
u¨g
){

1784 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1785 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1788 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1789 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1792 
	}
}

1796 
	$uhci_£t_åa˚_Àvñ
–*
hcd
, *
¨g
){

1797 
USB_åa˚_˛ass_t
 *
åa˚_¨g
 = (USB_åa˚_˛ass_à*Ë
¨g
;

1798 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1799 
°r
[256];

1801 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1804 
globÆ_åa˚_˛ass
.
˛ass
 = 
åa˚_¨g
->class;

1805 
globÆ_åa˚_˛ass
.
Àvñ
 = 
åa˚_¨g
->level;

1807 
	`INT2HEX64X
–
°r
, 
globÆ_åa˚_˛ass
.
˛ass
);

1808 
	`TRACE
–
˛ass
, 12, "trace class settled; class=%s,Üevel=%d",

1809 
°r
, 
globÆ_åa˚_˛ass
.
Àvñ
);

1810 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1813 
	}
}

1815 
	$uhci_hub_öfo
–*
hcd
, *
öfo
){

1816 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1817 
usbhub_ö°™˚_t
 *
usb_hub
 = (usbhub_ö°™˚_à*Ë
öfo
;

1818 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1820 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1821 
usb_hub
->
pci_bus
 = (
uch¨_t
Ë
	`pciio_öfo_bus_gë
–
so·
->
ps_pciio_öfo_devi˚
);

1822 
usb_hub
->
pci_¶Ÿ
 = (
uch¨_t
Ë
	`pciio_öfo_¶Ÿ_gë
–
so·
->
ps_pciio_öfo_devi˚
);

1823 
usb_hub
->
pci_fun˘i⁄
 = (Ë
	`pciio_öfo_fun˘i⁄_gë
–
so·
->
ps_pciio_öfo_devi˚
);

1824 
usb_hub
->
p‹ts_numbî
 = 
so·
->
ps_n›‹t
;

1826 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1828 
	}
}

1830 
uöt32_t
 
	$uhci_gë_p‹t
–*
hcd
, 
p‹t
){

1831 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1832 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1833 
uöt32_t
 
∑
, 
Ω‹t
;

1835 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1836 
p‹t
 =Öort % 2;

1838 if–
p‹t
 == 0)

1839 
Ω‹t
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC2
);

1841 
Ω‹t
 = 
	`UREAD2
–
so·
, 
UHCI_PORTSC1
);

1843 
∑
 = 0;

1844 if–
Ω‹t
 & 
UHCI_PORTSC_CCS
)

1845 
∑
 |
USB_PORT_CONNECTED
;

1846 if–
Ω‹t
 & 
UHCI_PORTSC_PE
)

1847 
∑
 |
USB_PORT_ENABLED
 | 
USB_PORT_IN_USE
;

1848 if–
Ω‹t
 & 
UHCI_PORTSC_SUSP
)

1849 
∑
 |
USB_PORT_SUSPENDED
;

1851 if–
Ω‹t
 & 
UHCI_PORTSC_LSDA
)

1852 
∑
 |
USB_PORT_LOW_SPEED
;

1854 
∑
 |
USB_PORT_FULL_SPEED
;

1856 
∑
 |
USB_PORT_STATUS_OK
;

1857 
∑
 |
	`USB_PORT_SET_HCD_OWNER
(
USB_UHCI
);

1859 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1860 –
∑
);

1861 
	}
}

1863 
	$uhci_£t_roŸhub
(*
hcd
, *
roŸhub
){

1864 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1865 
usbuhci_ö°™˚_t
 *
so·
 = ( usbuhci_ö°™˚_à*Ë
hcd
;

1866 
usbhub_ö°™˚_t
 *
usbhub
 = ( usbhub_ö°™˚_à*Ë
roŸhub
;

1868 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1869 
so·
->
roŸhub
 =Ñoothub;

1870 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1872 
	}
}

1874 
	$uhci_p‹t_a˘i⁄
–*
hcd
, 
p‹t
, 
a˘i⁄
){

1875 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1876 
usbuhci_ö°™˚_t
 *
so·
 = (usbuhci_ö°™˚_à*Ë
hcd
;

1877 
rc
;

1878 
usbhub_ö°™˚_t
 *
roŸhub
 = 
so·
->roothub;

1880 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1881 
a˘i⁄
){

1882 
USB_HUB_PORT_RESET
:

1883 
	`MUTEX_LOCK
–&
roŸhub
->
uhci_muãx
, -1);

1884 
	`TRACE
–
˛ass
, 10, "uhcòª£àp‹à%d", 
p‹t
);

1885 
p‹t
 = (Öort % 2);

1887 
rc
 = 
	`uhci_p‹t_ª£t
–
so·
, 
p‹t
);

1888 
	`MUTEX_UNLOCK
–&
roŸhub
->
uhci_muãx
);

1892 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "ídÑc=%d", 
rc
);

1893 (
rc
);

1894 
	}
}

1897 
	$uhci_£t_debug_vÆues
–*
hcd
, *
pv
){

1898 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1899 
usbuhci_ö°™˚_t
 *
so·
 = (usbuhci_ö°™˚_à*Ë
hcd
;

1900 
rc
;

1901 
usb_debug_vÆues_t
 *
v
 = (usb_debug_vÆues_à*Ë
pv
;

1903 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1905  
v
->
id
){

1907 
so·
->
debug_p‹t
 = 
v
->
vÆues
[0];

1908 
so·
->
debug_p‹t_roŸ_ª£t_dñay
 = 
v
->
vÆues
[1];

1909 
so·
->
debug_p‹t_ª£t_ªcovîy_dñay
 = 
v
->
vÆues
[2];

1910 
so·
->
debug_p‹t_ª£t_dñay
 = 
v
->
vÆues
[3];

1913 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "ídÑc=%d", 
rc
);

1914 (
rc
);

1915 
	}
}

1922 
	$ªgi°î_uhci_wôh_usbc‹e
(*
hcd
){

1923 
USB_func_t
 
func
;

1924 
vîãx_hdl_t
 
vhdl
;

1925 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

1926 
usbuhci_ö°™˚_t
 *
so·
;

1927 
rc
;

1928 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1929 
°r
[45];

1931 
so·
 = (
usbuhci_ö°™˚_t
 *Ë
hcd
;

1932 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1939 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1941 –
rc
);

1942 
	}
}

1945 
	$uƒegi°î_uhci_wôh_usbc‹e
(*
hcd
){

1946 
USB_func_t
 
func
;

1947 
vîãx_hdl_t
 
vhdl
;

1948 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

1949 
usbuhci_ö°™˚_t
 *
so·
;

1950 
rc
 = 0;

1951 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1952 
°r
[45];

1954 
so·
 = (
usbuhci_ö°™˚_t
 *Ë
hcd
;

1955 
	`TRACE
–
˛ass
, 10, "start", "");

1962 
	`TRACE
–
˛ass
, 10, "end", "");

1964 –
rc
);

1965 
	}
}

1968 
	$uhci_¥o˚ss_evít
–*
‹igö
, *
de°
, 
evít_id
, *
¨g
){

1969 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1971 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1972 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1973 
	}
}

1975 
	$uhci_¥o˚ss_evít_‰om_usbc‹e
–*
de°
, 
evít_id
, *
¨g0
, *
¨g1
, *
¨g2
){

1976 
uöt64_t
 
˛ass
 = 
TRC_HELPER
 | 
TRC_MOD_UHCI
;

1978 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

1979 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

1981 
	}
}

1996 
	$usbuhci_öô
(){

1997 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

1998 
uöt64_t
 
˛ass
 = 
TRC_INIT
 | 
TRC_MOD_UHCI
;

2000 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

2001 
	`¥ötf
( "**********************************************************\n");

2002 
	`¥ötf
( "* UHCI USB Driver for Silicon Graphics Irix 6.5 *\n");

2003 
	`¥ötf
( "* By bsderoát gmail dot org, 2011-2013 *\n");

2004 
	`¥ötf
–"* Vîsi⁄ %† *\n", 
USBCORE_DRV_VERSION
);

2005 
	`¥ötf
–"* Sequí˚ %† *\n", 
USBCORE_DRV_SEQ
);

2006 
	`¥ötf
( "**********************************************************\n");

2007 
	`¥ötf
( "usbuhci kernel moduleÜoaded! \n");

2008 
	`¥ötf
–"_dügöfo_: Kî√»usbuhcòmoduÀ ba£áddªss:0x%x\n", 
moduÀ_addªss
);

2009 
	`USECDELAY
(100000);

2016 
usbc‹e
 = 
	`gë_usbc‹e
();

2017 
usbc‹e
->
	`ªgi°î_moduÀ
––*Ë&
uhci_hódî
);

2018 
	`pciio_ôî©e
("usbuhci_", 
usbuhci_ªlﬂdme
);

2019 
	`gc_li°_öô
–&
gc_li°
);

2020 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

2021 
	}
}

2030 
	$usbuhci_u∆ﬂd
(){

2031 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

2032 
uöt64_t
 
˛ass
 = 
TRC_UNLOAD
 | 
TRC_MOD_UHCI
;

2034 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

2035 i‡(
usbuhci_öu£
)

2036  
EBUSY
;

2038 
usbc‹e
 = 
	`gë_usbc‹e
();

2039 
usbc‹e
->
	`uƒegi°î_moduÀ
––*Ë&
uhci_hódî
);

2040 
	`pciio_ôî©e
("usbuhci_", 
usbuhci_u∆ﬂdme
);

2041 
	`gc_li°_de°roy
–&
gc_li°
);

2042 
	`TRACE
–
˛ass
, 0, "UHCI Driver unloaded", "");

2043 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

2046 
	}
}

2060 
	$usbuhci_ªg
(){

2061 
i
;

2062 
uöt16_t
 
devi˚_id
, 
víd‹_id
;

2063 
uöt64_t
 
˛ass
 = 
TRC_INIT
 | 
TRC_MOD_UHCI
;

2065 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

2068  
i
 = 0; 
uhci_des¸ùti⁄s
[i].
devi˚_id
 != 0; i++){

2069 
devi˚_id
 = ((
uhci_des¸ùti⁄s
[
i
].device_id & 0xffff0000) >> 16);

2070 
víd‹_id
 = (
uhci_des¸ùti⁄s
[
i
].
devi˚_id
 & 0x0000ffff);

2071 
	`pciio_drivî_ªgi°î
(
víd‹_id
, 
devi˚_id
, "usbuhci_", 0);

2074 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

2076 
	}
}

2085 
	$usbuhci_uƒeg
(){

2086 
	`TRACE
–
TRC_UNLOAD
 | 
TRC_MOD_UHCI
 | 
TRC_START_END
, 10, "start", "");

2087 
	`pciio_drivî_uƒegi°î
("usbuhci_");

2088 
	`TRACE
–
TRC_UNLOAD
 | 
TRC_MOD_UHCI
 | 
TRC_START_END
, 10, "end", "");

2090 
	}
}

2106 
	$usbuhci_©èch
(
vîãx_hdl_t
 
c⁄n
){

2107 
vîãx_hdl_t
 
vhdl
 = 
GRAPH_VERTEX_NONE
;

2108 
vîãx_hdl_t
 
ch¨v
 = 
GRAPH_VERTEX_NONE
;

2109 
uch¨_t
 *
cfg
;

2110 
usbuhci_ö°™˚_t
 *
so·
;

2111 
uch¨_t
 *
ªgs
;

2112 
pciio_piom≠_t
 
cm≠
 = 
NULL
;

2113 
pciio_piom≠_t
 
rm≠
 = 
NULL
;

2114 
uöt32_t
 
ps_io_ba£_addr
 = 0;

2115 
gøph_îr‹_t
 
ªt
 = (graph_error_t) 0;

2116 
uöt16_t
 
víd‹_id
;

2117 
uöt16_t
 
devi˚_id
;

2118 
uöt32_t
 
ssid
;

2119 
uch¨_t
 
ªv_id
;

2120 
uöt16_t
 
vÆ
;

2121 
i
;

2122 
uöt32_t
 
devi˚_víd‹_id
;

2123 
rc
;

2124 
devi˚_desc_t
 
usbuhci_dev_desc
;

2125 
uöt64_t
 
˛ass
 = 
TRC_ATTACH
 | 
TRC_MOD_UHCI
;

2126 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

2128 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

2129 
	`TRACE
–
˛ass
, 0, "UHCI Host Controller Device Detected!", "");

2131 
usbc‹e
 = 
	`gë_usbc‹e
();

2132 if–
usbc‹e
 =
NULL
){

2133 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
, "usbcoreÇotÜoaded, quitting..", "");

2137 
	`MUTEX_LOCK
–&
usbc‹e
->
uhci_muãx
, -1);

2139 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
GRAPH_VERTEX_NONE
, "/usb", &
vhdl
)){

2140 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
, "error in hwgraph_traverse(), quitting..", "");

2141 
rc
 = -1;

2142 
exô_©èch
;

2146 
ªt
 = 
	`hwgøph_edge_gë
–
vhdl
, "usbuhci", &
ch¨v
);

2152 
so·
 = (
usbuhci_ö°™˚_t
 *Ë
	`gc_mÆloc
–&
gc_li°
, ( usbuhci_instance_t));

2154 
	`ASSERT
(
so·
 !
NULL
);

2155 
	`devi˚_öfo_£t
(
vhdl
, (*)
so·
);

2156 
so·
->
ps_c⁄n
 = 
c⁄n
;

2157 
so·
->
ps_vhdl
 = 
vhdl
;

2158 
so·
->
ps_ch¨v
 = 
ch¨v
;

2161 
cfg
 = (
uch¨_t
 *Ë
pciio_pio_addr


2162 (
c⁄n
, 0,

2163 
PCIIO_SPACE_CFG
,

2165 
UHCI_NUM_CONF_REGISTERS
,

2166 &
cm≠
,

2169 
víd‹_id
 = (
uöt16_t
Ë
	`PCI_CFG_GET16
(
c⁄n
, 
UHCI_CF_VENDOR_ID
);

2170 
devi˚_id
 = (
uöt16_t
Ë
	`PCI_CFG_GET16
(
c⁄n
, 
UHCI_CF_DEVICE_ID
);

2171 
ssid
 = (
uöt32_t
Ë
	`PCI_CFG_GET32
–
c⁄n
, 
UHCI_CF_SSID
);

2172 
ªv_id
 = (
uch¨_t
Ë
	`PCI_CFG_GET8
–
c⁄n
, 
UHCI_CF_REVISION_ID
);

2173 
ps_io_ba£_addr
 = (
uöt32_t
Ë
	`PCI_CFG_GET32
–
c⁄n
, 
UHCI_CF_BASE_ADDR
);

2174 
	`PCI_CFG_SET16
–
c⁄n
, 
PCI_LEGSUP
, 0x8f00);

2175 
	`USECDELAY
(1000);

2176 
	`PCI_CFG_SET16
–
c⁄n
, 
PCI_LEGSUP
, 
PCI_LEGSUP_USBPIRQDEN
);

2178 
	`TRACE
–
˛ass
, 10, "UHCI supported device found", "");

2179 
	`TRACE
–
˛ass
, 10, "Víd‹ ID: 0x%x, Devi˚ ID: 0x%x", 
víd‹_id
, 
devi˚_id
);

2180 
	`TRACE
–
˛ass
, 10, "SSID: 0x%x, Rev ID: 0x%x, ba£áddr: 0x%x",
ssid
, 
ªv_id
,

2181 
ps_io_ba£_addr
);

2184 
so·
->
devi˚_hódî
.
moduÀ_hódî
 = &
uhci_hódî
;

2186 
devi˚_víd‹_id
 = 
devi˚_id
 << 16 | 
víd‹_id
;

2187  
i
 = 0; 
uhci_des¸ùti⁄s
[i].
devi˚_id
 != 0; i++){

2188 if–
uhci_des¸ùti⁄s
[
i
].
devi˚_id
 =
devi˚_víd‹_id
){

2189 
so·
->
devi˚_hódî
.
víd‹_id
 = vendor_id;

2190 
so·
->
devi˚_hódî
.
devi˚_id
 = device_id;

2191 
	`°r˝y
–
so·
->
devi˚_hódî
.
h¨dw¨e_des¸ùti⁄
,

2192 (*)
uhci_des¸ùti⁄s
[
i
].
c⁄åﬁÀr_des¸ùti⁄
);

2193 
	`TRACE
–
˛ass
, 10, "Device Description: %s",

2194 
uhci_des¸ùti⁄s
[
i
].
c⁄åﬁÀr_des¸ùti⁄
);

2199 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

2200 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

2206 
	`TRACE
–
˛ass
, 8, "Tryög PCIIO_SPACE_IO", 
ªgs
);

2207 
ªgs
 = (
uch¨_t
 *Ë
pciio_pio_addr


2208 (
c⁄n
, 0,

2209 
PCIIO_SPACE_IO
,

2211 &
rm≠
,

2214 
	`TRACE
–
˛ass
, 12, "ªg†0x%x", 
ªgs
);

2215 if–
ªgs
 =
NULL
){

2216 
	`TRACE
–
˛ass
, 12, "failed", "");

2217 
rc
 = -1;

2218 
exô_©èch
;

2220 
sﬁved
;

2223 
sﬁved
:

2224 
so·
->
pci_io_ˇps
 = 
ªgs
;

2225 
so·
->
ps_ªgs
 = 
ªgs
;

2226 
so·
->
ps_rm≠
 = 
rm≠
;

2227 
so·
->
ps_cfg
 = 
cfg
;

2228 
so·
->
ps_cm≠
 = 
cm≠
;

2229 
so·
->
ps_pciio_öfo_devi˚
 = 
	`pciio_öfo_gë
(
c⁄n
);

2230 
so·
->
sc_offs
 = 
ps_io_ba£_addr
;

2231 
so·
->
ps_n›‹t
 = 2;

2232 
so·
->
devi˚_hódî
.soft = (*) soft;

2233 
so·
->
devi˚_hódî
.
˛ass_id
 = 0;

2234 
so·
->
devi˚_hódî
.
öãrÁ˚_id
 = 0;

2235 
so·
->
devi˚_hódî
.
öfo_size
 = –
usbuhci_ö°™˚_t
);

2236 
so·
->
devi˚_hódî
.
mëhods
 = (*Ë&
uhci_mëhods
;

2237 
so·
->
debug_p‹t_roŸ_ª£t_dñay
 = 50;

2238 
so·
->
debug_p‹t_ª£t_ªcovîy_dñay
 = 100;

2239 
so·
->
debug_p‹t_ª£t_dñay
 = 10;

2240 
so·
->
usbc‹e
 = usbcore;

2241 
globÆ_so·
 = 
so·
;

2244 
	`uhci_öô
–(*Ë
so·
);

2247 
	`TRACE
–
˛ass
, 12, "enabling interrupts", "");

2248 
usbuhci_dev_desc
 = 
	`devi˚_desc_dup
(
vhdl
);

2249 
	`devi˚_desc_öå_«me_£t
(
usbuhci_dev_desc
, "usbuhci");

2250 
	`devi˚_desc_deÁu…_£t
(
vhdl
, 
usbuhci_dev_desc
);

2252 
globÆ_so·
 = 
so·
;

2255 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
 = 
usbc‹e
->
	`¥o˚ss_evít_‰om_hcd
( usbcore,

2256 
so·
, 
USB_HCD_GET_INSTANCE_ID
, so·, 
NULL
, NULL);

2258 
	`TRACE
–
˛ass
, 12, "Creating PCI INTR, spec_device_instance_id=%d",

2259 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
);

2262 
	`•rötf
–
so·
->
devi˚_hódî
.
fs_devi˚
, "usbuhci%d",

2263 
so·
->
devi˚_hódî
.
•ec_devi˚_ö°™˚_id
 );

2265 
ªt
 = 
	`hwgøph_ch¨_devi˚_add
–
vhdl
, 
so·
->
devi˚_hódî
.
fs_devi˚
,

2266 "usbehci_", &
ch¨v
);

2268 
	`devi˚_öfo_£t
(
vhdl
, (*)
so·
);

2287 
rc
 = 0;

2288 
exô_©èch
:

2290 
rc
 = 
usbc‹e
->
	`¥o˚ss_evít_‰om_hcd
–usbc‹e, 
so·
, 
USB_HCD_ATTACHED_EVENT
, so·, 
NULL
 ,NULL);

2294 
	`MUTEX_UNLOCK
–&
usbc‹e
->
uhci_muãx
);

2296 
	`TRACE
–
˛ass
, 12, "r¯%d", 
rc
);

2297 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

2299 –
rc
);

2300 
	}
}

2320 
	$usbuhci_dëach
(
vîãx_hdl_t
 
c⁄n
){

2321 
vîãx_hdl_t
 
vhdl
, 
blockv
, 
ch¨v
;

2322 
usbuhci_ö°™˚_t
 *
so·
;

2323 
uöt64_t
 
˛ass
 = 
TRC_DETACH
|
TRC_MOD_UHCI
;

2324 
i
, 
rc
;

2325 
usbc‹e_ö°™˚_t
 *
usbc‹e
;

2326 
usbhub_ö°™˚_t
 *
roŸhub
;

2329 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

2330 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
GRAPH_VERTEX_NONE
, "/usb", &
vhdl
))

2333 
usbc‹e
 = 
	`gë_usbc‹e
();

2334 if–
usbc‹e
 =
NULL
){

2335 
	`TRACEWAR
–
˛ass
 | 
TRC_WARNING
, "usbcoreÇotÜoaded, quitting..", "");

2342 
so·
 = 
globÆ_so·
;

2343 
roŸhub
 = 
so·
->roothub;

2344 
	`MUTEX_LOCK
–&
roŸhub
->
uhci_muãx
, -1);

2345 
	`TRACE
–
˛ass
, 12, "so·=0x%x, globÆ_so·=0x%x", 
so·
, 
globÆ_so·
);

2346 
	`TRACE
–
˛ass
, 12, "hcd driver = '%s'",

2347 
so·
->
devi˚_hódî
.
moduÀ_hódî
->
sh‹t_des¸ùti⁄
);

2349 
	`TRACE
–
˛ass
, 12, "untimeout", "");

2351 
	`u¡imeout
–
so·
->
ps_ôimeout
);

2352 
so·
->
ps_ôimeout
 = 0;

2354 
	`uhci_°›
–
so·
);

2367 
	`USECDELAY
(1000000);

2370 
	`TRACE
–
˛ass
, 12, "disc⁄√˘ i¡îru±", 
rc
);

2371 
	`dma_li°_de°roy
–&
dma_li°
);

2394 
	`TRACE
–
˛ass
, 12, "dropping cmap", "");

2395 i‡(
so·
->
ps_cm≠
 !
NULL
)

2396 
	`pciio_piom≠_‰ì
(
so·
->
ps_cm≠
);

2404 
	`TRACE
–
˛ass
, 12, "edgêªmove", 
rc
);

2405 
	`hwgøph_edge_ªmove
(
vhdl
, 
so·
->
devi˚_hódî
.
fs_devi˚
, &
ch¨v
);

2410 i‡(
GRAPH_SUCCESS
 =
	`hwgøph_edge_ªmove
(
vhdl
, 
EDGE_LBL_CHAR
, &
ch¨v
)) {

2411 
	`TRACE
–
˛ass
, 12, "devi˚_öfo_£t", 
rc
);

2412 
	`devi˚_öfo_£t
(
ch¨v
, 
NULL
);

2413 
	`TRACE
–
˛ass
, 12, "vîãx de°roy", 
rc
);

2414 
	`hwgøph_vîãx_de°roy
(
ch¨v
);

2417 
	`TRACE
–
˛ass
, 12, "devi˚_öfo_£t2", 
rc
);

2418 
	`devi˚_öfo_£t
(
vhdl
, 
NULL
);

2420 
	`TRACE
–
˛ass
, 12, "hwgøph_vîãx_de°roy", 
rc
);

2421 
	`hwgøph_vîãx_de°roy
(
vhdl
);

2423 
	`TRACE
–
˛ass
, 12, "gc_li°_de°roy", 
rc
);

2424 
	`gc_li°_de°roy
–&
gc_li°
);

2426 
	`MUTEX_UNLOCK
–&
roŸhub
->
uhci_muãx
);

2428 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

2431 
	}
}

2445 
	$usbuhci_ªlﬂdme
(
vîãx_hdl_t
 
c⁄n
){

2446 
vîãx_hdl_t
 
vhdl
;

2447 
usbuhci_ö°™˚_t
 *
so·
;

2448 
uöt64_t
 
˛ass
 = 
TRC_INIT
 | 
TRC_MOD_UHCI
;

2450 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

2451 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
c⁄n
, "usbuhci", &
vhdl
))

2454 
so·
 = (
usbuhci_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
(
vhdl
);

2458 
	`pciio_îr‹_ªgi°î
(
c⁄n
, 
usbuhci_îr‹_h™dÀr
, 
so·
);

2459 
	`pciio_öå_c⁄√˘
(
so·
->
ps_öå
, 
usbuhci_dma_öå
, soft, 0);

2460 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

2461 
	}
}

2473 
	$usbuhci_u∆ﬂdme
(
vîãx_hdl_t
 
pc⁄n
){

2474 
vîãx_hdl_t
 
vhdl
;

2475 
usbuhci_ö°™˚_t
 *
so·
;

2476 
uöt64_t
 
˛ass
 = 
TRC_UNLOAD
 | 
TRC_MOD_UHCI
;

2478 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

2479 i‡(
GRAPH_SUCCESS
 !
	`hwgøph_åavî£
(
pc⁄n
, "usbuhci", &
vhdl
))

2482 
so·
 = (
usbuhci_ö°™˚_t
 *Ë
	`devi˚_öfo_gë
(
vhdl
);

2486 
	`pciio_îr‹_ªgi°î
(
pc⁄n
, 0, 0);

2487 
	`pciio_öå_disc⁄√˘
(
so·
->
ps_öå
);

2488 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

2489 
	}
}

2499 
	$usbuhci_›í
(
dev_t
 *
devp
, 
oÊag
, 
Ÿyp
, 
¸ed_t
 *
¸p
){

2501 –
EINVAL
);

2502 
	}
}

2514 
	$usbuhci_˛o£
(
dev_t
 
dev
, 
oÊag
, 
Ÿyp
, 
¸ed_t
 *
¸p
){

2517 
	}
}

2530 
	$usbuhci_io˘l
(
dev_t
 
dev
, 
cmd
, *
¨g
, 
mode
, 
¸ed_t
 *
¸p
, *
rvÆp
){

2532 *
rvÆp
 = -1;

2533  
ENOTTY
;

2534 
	}
}

2551 
	$usbuhci_ªad
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
){

2554 
	}
}

2556 
	$usbuhci_wrôe
(
dev_t
 
dev
, 
uio_t
 * 
ui›
, 
¸ed_t
 *
¸p
){

2559 
	}
}

2561 
	$usbuhci_°øãgy
(
buf
 *
bp
){

2565 
	}
}

2572 
	$usbuhci_pﬁl
(
dev_t
 
dev
, 
evíts
, 
™yyë
,

2573 *
ªvít•
, 
pﬁlhód
 **
phµ
, *
gíp
){

2576 
	}
}

2584 
	$usbuhci_m≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
, 
off_t
 
off
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
){

2587 
	}
}

2589 
	$usbuhci_unm≠
(
dev_t
 
dev
, 
vh™dl_t
 *
vt
){

2592 
	}
}

2601 
	$usbuhci_dma_öå
(
öå_¨g_t
 
¨g
){

2602 
usbuhci_ö°™˚_t
 *
so·
 = (usbuhci_ö°™˚_à*Ë
¨g
;

2603 
uöt64_t
 
˛ass
 = 
TRC_INTR
 | 
TRC_MOD_UHCI
;

2605 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "start", "");

2607 if–
so·
 =
NULL
){

2608 
so·
 = 
globÆ_so·
;

2621 
	`TRACE
–
˛ass
 | 
TRC_START_END
, 10, "end", "");

2623 
	}
}

2632 
	$usbuhci_îr‹_h™dÀr
(*
eöfo
,

2633 
îr‹_code
,

2634 
i€º‹_mode_t
 
mode
,

2635 
i€º‹_t
 *
i€º‹
){

2652  
IOERROR_HANDLED
;

2653 
	}
}

2666 
	$usbuhci_hÆt
(){

2667 
	`TRACE
–
TRC_HELPER
 | 
TRC_MOD_UHCI
 | 
TRC_START_END
, 10, "start", "");

2668 
	`TRACE
–
TRC_HELPER
 | 
TRC_MOD_UHCI
 | 
TRC_START_END
, 10, "end", "");

2670 
	}
}

2680 
	$usbuhci_size
(
dev_t
 
dev
){

2683 
	}
}

2692 
	$usbuhci_¥öt
(
dev_t
 
dev
, *
°r
){

2695 
	}
}

	@xusbnotifier.c

25 
	#XK_LATIN1


	)

26 
	#XK_MISCELLANY


	)

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<time.h
>

32 
	~<sys/time.h
>

33 
	~<˘y≥.h
>

34 
	~<X11/Xlib.h
>

35 
	~<X11/Xutû.h
>

36 
	~<X11/Xªsour˚.h
>

37 
	~<X11/keysymdef.h
>

38 
	~<X11/curs‹f⁄t.h
>

39 
	~<X11/Xos.h
>

40 
	~<X11/X©om.h
>

41 
	~"X11di•œy.h
"

42 
	~"X11wödow.h
"

43 
	~"¨r°r.h
"

45 
	#USBLOG
 "/v¨/adm/usblog"

	)

47 
X11_wödow_t
 *
	mwö
;

48 
GC
 
	mgc
;

49 
XGCVÆues
 
	mvÆues
;

50 
	mvÆue_mask
;

51 
XF⁄tSåu˘
* 
	mf⁄t_öfo
;

52 
	mf⁄t_«me
[256];

53 }
	tX11_gc_t
;

58 
	mposx
, 
	mposy
;

60 
	#MBUTTON_RIGHT
 0x01

	)

61 
	#MBUTTON_CENTER
 0x02

	)

62 
	#MBUTTON_LEFT
 0x04

	)

63 
	mbuâ⁄_°©us
;

64 }
	tmou£_°©us_t
;

66 
FILE
 *
	gÊog
;

67 
¨r°r_t
 
	g°rögs
;

69 
X11_gc_öô
–
X11_gc_t
 *
gc
, 
X11_wödow_t
 *
w
);

71 
	$X11_gc_öô
–
X11_gc_t
 *
gc
, 
X11_wödow_t
 *
w
){

72 
gc
->
wö
 = 
w
;

73 
gc
->
vÆues
.
f‹eground
 = 
	`BœckPixñ
–
w
->
di•œy
->
dpy
, w->di•œy->
s¸ìn_num
);

74 
gc
->
vÆues
.
löe_width
 = 1;

75 
gc
->
vÆues
.
löe_°yÀ
 = 
LöeSﬁid
;

76 
gc
->
vÆue_mask
 = 
GCF‹eground
 | 
GCLöeWidth
 | 
GCLöeStyÀ
;

77 
gc
->g¯
	`XCª©eGC
–
w
->
di•œy
->
dpy
, w->
wö
, gc->
vÆue_mask
, &gc->
vÆues
);

78 
	`°r˝y
–
gc
->
f⁄t_«me
, "*-courier-*-12-*");

79 
gc
->
f⁄t_öfo
 = 
	`XLﬂdQuîyF⁄t
(
w
->
di•œy
->
dpy
, gc->
f⁄t_«me
);

80 i‡–!
gc
->
f⁄t_öfo
) {

81 
	`Ârötf
–
°dîr
, "XLﬂdQuîyF⁄t: faûedÜﬂdög f⁄à'%s'\n", 
gc
->
f⁄t_«me
);

85 
	`XSëF⁄t
(
w
->
di•œy
->
dpy
, 
gc
->gc, gc->
f⁄t_öfo
->
fid
);

87 
	}
}

90 
	$døw_°©us_b¨s
–
X11_gc_t
 *
gc
, **
¨r
){

91 
	#COLRED
 0

	)

92 
	#COLGREEN
 1

	)

93 
	#COLYELLOW
 2

	)

94 
	#COLCYAN
 3

	)

95 
	#COLWHITE
 4

	)

96 
i
;

97 *
«me_cﬁ‹s
[] = { "red", "green", "yellow", "cyan", "white" };

98 
VisuÆ
* 
deÁu…_visuÆ
;

99 
XCﬁ‹
 
X11Cﬁ‹s
[5];

100 
XCﬁ‹
 
exa˘_cﬁ‹
;

101 
Cﬁ‹m≠
 
my_cﬁ‹m≠
;

102 
ty≥
;

103 *
s
;

104 
X11_wödow_t
 *
w
 = 
gc
->
wö
;

106 
deÁu…_visuÆ
 = 
	`DeÁu…VisuÆ
(
w
->
di•œy
->
dpy
, 
	`DeÁu…S¸ìn
(w->display->dpy));

107 
my_cﬁ‹m≠
 = 
	`XCª©eCﬁ‹m≠
(
w
->
di•œy
->
dpy
, w->
wö
, 
deÁu…_visuÆ
, 
AŒocN⁄e
);

109  
i
 = 0; i < 5; i++){

111 
	`XAŒocNamedCﬁ‹
–
w
->
di•œy
->
dpy
, 
my_cﬁ‹m≠
, 
«me_cﬁ‹s
[
i
], &
X11Cﬁ‹s
[i], &
exa˘_cﬁ‹
);

115 
	`XSëF‹eground
–
w
->
di•œy
->
dpy
, 
gc
->gc, 
	`BœckPixñ
–w->di•œy->dpy, w->di•œy->
s¸ìn_num
));

116 
	`XFûlRe˘™gÀ
–
w
->
di•œy
->
dpy
, w->
wö
, 
gc
->gc, 0, 0, w->
width
 , w->
height
);

118 
	`XSëBackground
–
w
->
di•œy
->
dpy
, 
gc
->gc, 
	`WhôePixñ
–w->di•œy->dpy, w->di•œy->
s¸ìn_num
));

121 
	`XSëFûlStyÀ
(
w
->
di•œy
->
dpy
, 
gc
->gc, 
FûlSﬁid
);

127 
	`XSëLöeAâribuãs
(
w
->
di•œy
->
dpy
, 
gc
->gc, 3, 
LöeSﬁid
, 
C≠Round
, 
JoöRound
);

128 
	`XSëF‹eground
–
w
->
di•œy
->
dpy
, 
gc
->gc, 
	`WhôePixñ
–w->di•œy->dpy, w->di•œy->
s¸ìn_num
));

130  
i
 = 0; i < 5; i++){

131 if–
¨r
[
i
] =
NULL
)

135 
s
 = 
¨r
[
i
];

136 
s
 += 2;

138 
ty≥
 = 
	`tﬁowî
–
¨r
[
i
][0]);

139  
ty≥
){

141 
ty≥
 = 
COLYELLOW
;

144 
ty≥
 = 
COLRED
;

147 
ty≥
 = 
COLGREEN
;

150 
ty≥
 = 
COLCYAN
;

153 
ty≥
 = 
COLWHITE
;

156 
ty≥
 = 
COLWHITE
;

157 
s
 = 
¨r
[
i
];

161 
	`XSëF‹eground
–
w
->
di•œy
->
dpy
, 
gc
->gc, 
X11Cﬁ‹s
[
ty≥
].
pixñ
 );

162 
	`XDøwRe˘™gÀ
–
w
->
di•œy
->
dpy
, w->
wö
, 
gc
->gc, 5, (
i
 * 30Ë+ 5, w->
width
 - 10, 25);

163 
	`XDøwSåög
–
w
->
di•œy
->
dpy
, w->
wö
, 
gc
->gc, 10, (
i
 * 30Ë+ 22, 
s
, 
	`°æí
( s));

166 
	}
}

169 
	$MaöWödowInô
(){

170 
rc
;

171 
X11_di•œy_t
 
di•œy
;

172 
X11_wödow_t
 
wödow
;

173 
X11_gc_t
 
gc
;

174 
KeySym
 
key_symbﬁ
;

175 
quô
 = 0;

176 
evít
;

177 
ascii_key
, 
evít_fd
;

178 
x11_fd
, 
°dö_fd
;

179 
fd_£t
 
ö_fds
;

180 
timevÆ
 
tv
;

181 
öput_°r
[80];

182 * 
wödow_tôÀ
 = "X USB Notifier";

183 
c
, 
i
;

185 
Êog
 = 
	`f›í
–
USBLOG
, "r");

186 if–
Êog
 =
NULL
){

187 
	`≥º‹
("CouldÇot open file:");

188 
	`exô
( -1);

193 
rc
 = 
	`X11_di•œy_öô
–&
di•œy
);

194 if–
rc
 != 0){

195 
	`exô
(1);

198 
	`X11_wödow_öô
–&
di•œy
, &
wödow
);

199 
	`X11_wödow_£t_geomëry
–&
wödow
, 350, 150, 
di•œy
.
width
 - ( 350 + 5), di•œy.
height
 - (150 + 40), 5);

200 
	`X11_wödow_£t_mask
–&
wödow
, 
WINDOW_ALL_EVENTS_MASK
 );

202 
	`X11_wödow_di•œy
–&
wödow
);

203 
	`X11_wödow_£t_wm_«me
–&
wödow
, 
wödow_tôÀ
);

204 
rc
 = 
	`X11_gc_öô
–&
gc
, &
wödow
);

206 
Atom
 
wmDñëe
 = 
	`XI¡înAtom
(
di•œy
.
dpy
, "WM_DELETE_WINDOW", 
True
);

207 
	`XSëWMPrŸocﬁs
(
di•œy
.
dpy
, 
wödow
.
wö
, &
wmDñëe
, 1);

216 
°dö_fd
 = 
	`fûío
–
Êog
);

217 
x11_fd
 = 
	`C⁄√˘i⁄Numbî
–
di•œy
.
dpy
);

219 
	`l£ek
–
°dö_fd
, 0, 
SEEK_END
);

221 
	`døw_°©us_b¨s
–&
gc
, 
°rögs
.
°r
);

222  
quô
 == 0){

224 
	`FD_ZERO
–&
ö_fds
);

226 
	`FD_SET
–
x11_fd
, &
ö_fds
);

227 
tv
.
tv_u£c
 = 0;

228 
tv
.
tv_£c
 = 1;

232 
evít_fd
 = 
	`£À˘
–
x11_fd
 + 1, &
ö_fds
, 0, 0, &
tv
);

250 if–
evít_fd
 == 0){

251 
	`¥ötf
("timeout\n");

252 
	`°r˝y
–
öput_°r
, "");

254  
	`ªad
–
°dö_fd
, &
c
, 1) > 0){

255 
c
 = () c;

256 if–
c
 == '\n' || c == '\r'){

257 
öput_°r
[
i
++] = 0;

259 if–
	`°æí
–
öput_°r
) != 0){

260 
	`¥ötf
("öput_°r='%s'\n", 
öput_°r
);

261 
	`¨r°r_add
–&
°rögs
, 
öput_°r
);

263 
i
 = 0;

264 }if(
c
 =
EOF
){

267 
öput_°r
[
i
++] = (Ë
c
;

271 
	`døw_°©us_b¨s
–&
gc
, 
°rögs
.
°r
);

272 }if–
	`FD_ISSET
–
x11_fd
, &
ö_fds
)){

274  
	`XPídög
–
di•œy
.
dpy
)){

275 
evít
 = 
	`X11_wödow_gë_√xt_evít
–&
wödow
);

278  
evít
){

279 
C⁄figuªNŸify
:

280 i‡(
wödow
.
width
 !wödow.
ev
.
xc⁄figuª
.width || wödow.
height
 != window.ev.xconfigure.height) {

281 
wödow
.
width
 = wödow.
ev
.
xc⁄figuª
.width;

282 
wödow
.
height
 = wödow.
ev
.
xc⁄figuª
.height;

283 
	`¥ötf
("Sizêch™gedÅo: %d by %d\n", 
wödow
.
width
, wödow.
height
);

286 
Unm≠NŸify
:

287 
	`¥ötf
("UnmapNotify\n");

289 
M≠NŸify
:

290 
	`¥ötf
("MapNotify\n");

292 
Clõ¡Mesßge
:

293 
De°royNŸify
:

294 
	`¥ötf
("DestroyNotify \n");

296 
quô
 = 1;

299 
Expo£
:

300 
	`døw_°©us_b¨s
–&
gc
, 
°rögs
.
°r
);

301 
	`¥ötf
("Expose\n");

303 
KeyPªss
:

304 
	`¥ötf
("KeyPress\n");

305 
key_symbﬁ
 = 
	`XKeycodeToKeysym
(
di•œy
.
dpy
, 
wödow
.
ev
.
xkey
.
keycode
, 0);

308 i‡(
key_symbﬁ
 >
XK_A
 && key_symbﬁ <
XK_Z
) {

309 
ascii_key
 = 
key_symbﬁ
 - 
XK_A
 + 'A';

310 
	`¥ötf
("KeyÖªs£d - '%c'\n", 
ascii_key
);

312 i‡(
key_symbﬁ
 >
XK_a
 && key_symbﬁ <
XK_z
) {

313 
ascii_key
 = 
key_symbﬁ
 - 
XK_a
 + 'a';

314 
	`¥ötf
("KeyÖªs£d - '%c'\n", 
ascii_key
);

325 
	`XFlush
(
di•œy
.
dpy
);

326 
	`fÊush
–
°dout
);

329 
	`X11_wödow_˛o£
–&
wödow
);

330 
	`X11_wödow_de°roy
–&
wödow
);

331 
	`f˛o£
–
Êog
);

334 
	}
}

337 
	$maö
–
¨gc
, **
¨gv
){

339 
	`¨r°r_öô
–&
°rögs
, 5);

340 
	`MaöWödowInô
();

341 
	`¨r°r_de°roy
–&
°rögs
);

343 
	}
}

	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

80 #i‡
deföed
(
__sgi
Ë&& !deföed(
_ABI_SOURCE
)

81 
	#_SGI_EXTRA_PREDEFINES


	)

	@/usr/include/X11/Xlib.h

34 #i‚de‡
_XLIB_H_


35 
	#_XLIB_H_


	)

37 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

39 #ifde‡
USG


40 #i‚de‡
__TYPES__


41 
	~<sys/ty≥s.h
>

42 
	#__TYPES__


	)

45 #i‡
deföed
(
_POSIX_SOURCE
Ë&& deföed(
MOTOROLA
)

46 #unde‡
_POSIX_SOURCE


47 
	~<sys/ty≥s.h
>

48 
	#_POSIX_SOURCE


	)

50 
	~<sys/ty≥s.h
>

54 
	~<X11/X.h
>

57 
	~<X11/Xfun˝rŸo.h
>

58 
	~<X11/Xosdefs.h
>

60 #i‚de‡
X_WCHAR


61 #ifde‡
X_NOT_STDC_ENV


62 
	#X_WCHAR


	)

66 #i‚de‡
X_WCHAR


67 
	~<°ddef.h
>

69 #i‡
deföed
(
sgi
Ë|| deföed(
__sgi
)

70 
	~<°ddef.h
>

71 #i‡!
deföed
(
_WCHAR_T_
Ë&& !deföed(
_WCHAR_T
)

72 
	#_WCHAR_T


	)

73 
	#_WCHAR_T_


	)

74 
	twch¨_t
;

77 
	twch¨_t
;

81 *
	tXPoöãr
;

83 
	#Boﬁ
 

	)

84 
	#Sètus
 

	)

85 
	#True
 1

	)

86 
	#FÆ£
 0

	)

88 
	#QueuedAÃódy
 0

	)

89 
	#QueuedA·îRódög
 1

	)

90 
	#QueuedA·îFlush
 2

	)

92 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
fd
)

	)

93 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

94 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
deÁu…_s¸ìn
)

	)

95 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

96 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

97 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

98 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

99 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

100 
	#AŒPœ√s
 (()~0L)

	)

101 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
qÀn
)

	)

102 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

103 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

104 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

105 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

106 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

107 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

108 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ns¸ìns
)

	)

109 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
víd‹
)

	)

110 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_maj‹_vîsi⁄
)

	)

111 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_mö‹_vîsi⁄
)

	)

112 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªÀa£
)

	)

113 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
di•œy_«me
)

	)

114 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

115 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

116 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_unô
)

	)

117 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_bô_‹dî
)

	)

118 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_∑d
)

	)

119 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
byã_‹dî
)

	)

120 #ifde‡
CRAY


121 
	#NextReque°
(
dpy
Ë
	`XNextReque°
(dpy)

	)

123 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªque°
 + 1)

	)

125 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
œ°_ªque°_ªad
)

	)

128 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)dpy)->
s¸ìns
[s¸])

	)

129 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

130 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

131 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

132 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

133 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

134 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

135 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

136 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

137 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

138 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

139 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

140 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

141 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

142 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

143 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

144 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

145 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

146 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

147 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

148 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

153 
	s_XExtD©a
 {

154 
	mnumbî
;

155 
_XExtD©a
 *
	m√xt
;

156 (*
	m‰ì_¥iv©e
)();

157 
XPoöãr
 
	m¥iv©e_d©a
;

158 } 
	tXExtD©a
;

164 
	mexãnsi⁄
;

165 
	mmaj‹_›code
;

166 
	mfú°_evít
;

167 
	mfú°_îr‹
;

168 } 
	tXExtCodes
;

175 
	mdïth
;

176 
	mbôs_≥r_pixñ
;

177 
	msˇ∆öe_∑d
;

178 } 
	tXPixm≠F‹m©VÆues
;

185 
	mfun˘i⁄
;

186 
	m∂™e_mask
;

187 
	mf‹eground
;

188 
	mbackground
;

189 
	mlöe_width
;

190 
	mlöe_°yÀ
;

191 
	mˇp_°yÀ
;

193 
	mjoö_°yÀ
;

194 
	mfûl_°yÀ
;

196 
	mfûl_ruÀ
;

197 
	m¨c_mode
;

198 
Pixm≠
 
	mtûe
;

199 
Pixm≠
 
	m°ù∂e
;

200 
	mts_x_‹igö
;

201 
	mts_y_‹igö
;

202 
F⁄t
 
	mf⁄t
;

203 
	msubwödow_mode
;

204 
Boﬁ
 
	mgøphics_exposuªs
;

205 
	m˛ù_x_‹igö
;

206 
	m˛ù_y_‹igö
;

207 
Pixm≠
 
	m˛ù_mask
;

208 
	mdash_off£t
;

209 
	mdashes
;

210 } 
	tXGCVÆues
;

217 
	g_XGC


218 #ifde‡
	tXLIB_ILLEGAL_ACCESS


220 
XExtD©a
 *
	gext_d©a
;

221 
GC⁄ãxt
 
	ggid
;

225 *
	tGC
;

231 
XExtD©a
 *
	mext_d©a
;

232 
VisuÆID
 
	mvisuÆid
;

233 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

234 
	mc_˛ass
;

236 
	m˛ass
;

238 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

239 
	mbôs_≥r_rgb
;

240 
	mm≠_íåõs
;

241 } 
	tVisuÆ
;

247 
	mdïth
;

248 
	mnvisuÆs
;

249 
VisuÆ
 *
	mvisuÆs
;

250 } 
	tDïth
;

258 
	g_XDi•œy
;

261 
XExtD©a
 *
	mext_d©a
;

262 
_XDi•œy
 *
	mdi•œy
;

263 
Wödow
 
	mroŸ
;

264 
	mwidth
, 
	mheight
;

265 
	mmwidth
, 
	mmheight
;

266 
	mndïths
;

267 
Dïth
 *
	mdïths
;

268 
	mroŸ_dïth
;

269 
VisuÆ
 *
	mroŸ_visuÆ
;

270 
GC
 
	mdeÁu…_gc
;

271 
Cﬁ‹m≠
 
	mcm≠
;

272 
	mwhôe_pixñ
;

273 
	mbœck_pixñ
;

274 
	mmax_m≠s
, 
	mmö_m≠s
;

275 
	mbackög_°‹e
;

276 
Boﬁ
 
	mßve_undîs
;

277 
	mroŸ_öput_mask
;

278 } 
	tS¸ìn
;

284 
XExtD©a
 *
	mext_d©a
;

285 
	mdïth
;

286 
	mbôs_≥r_pixñ
;

287 
	msˇ∆öe_∑d
;

288 } 
	tS¸ìnF‹m©
;

294 
Pixm≠
 
	mbackground_pixm≠
;

295 
	mbackground_pixñ
;

296 
Pixm≠
 
	mb‹dî_pixm≠
;

297 
	mb‹dî_pixñ
;

298 
	mbô_gøvôy
;

299 
	mwö_gøvôy
;

300 
	mbackög_°‹e
;

301 
	mbackög_∂™es
;

302 
	mbackög_pixñ
;

303 
Boﬁ
 
	mßve_undî
;

304 
	mevít_mask
;

305 
	mdo_nŸ_¥›ag©e_mask
;

306 
Boﬁ
 
	movîride_ªdúe˘
;

307 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

308 
Curs‹
 
	mcurs‹
;

309 } 
	tXSëWödowAâribuãs
;

312 
	mx
, 
	my
;

313 
	mwidth
, 
	mheight
;

314 
	mb‹dî_width
;

315 
	mdïth
;

316 
VisuÆ
 *
	mvisuÆ
;

317 
Wödow
 
	mroŸ
;

318 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

319 
	mc_˛ass
;

321 
	m˛ass
;

323 
	mbô_gøvôy
;

324 
	mwö_gøvôy
;

325 
	mbackög_°‹e
;

326 
	mbackög_∂™es
;

327 
	mbackög_pixñ
;

328 
Boﬁ
 
	mßve_undî
;

329 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

330 
Boﬁ
 
	mm≠_ö°ÆÀd
;

331 
	mm≠_°©e
;

332 
	mÆl_evít_masks
;

333 
	myour_evít_mask
;

334 
	mdo_nŸ_¥›ag©e_mask
;

335 
Boﬁ
 
	movîride_ªdúe˘
;

336 
S¸ìn
 *
	ms¸ìn
;

337 } 
	tXWödowAâribuãs
;

345 
	mÁmûy
;

346 
	mÀngth
;

347 *
	maddªss
;

348 } 
	tXHo°Addªss
;

353 
	s_XImage
 {

354 
	mwidth
, 
	mheight
;

355 
	mxoff£t
;

356 
	mf‹m©
;

357 *
	md©a
;

358 
	mbyã_‹dî
;

359 
	mbôm≠_unô
;

360 
	mbôm≠_bô_‹dî
;

361 
	mbôm≠_∑d
;

362 
	mdïth
;

363 
	mbyãs_≥r_löe
;

364 
	mbôs_≥r_pixñ
;

365 
	mªd_mask
;

366 
	mgªí_mask
;

367 
	mblue_mask
;

368 
XPoöãr
 
	mobd©a
;

369 
	sfuncs
 {

370 
	m_XImage
 *(*
	m¸óã_image
)();

371 #i‡
NìdFun˘i⁄PrŸŸy≥s


372 (*
	mde°roy_image
Ë(
	m_XImage
 *);

373 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

374 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

375 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

376 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

378 (*
	mde°roy_image
)();

379 (*
	mgë_pixñ
)();

380 (*
	mput_pixñ
)();

381 
	m_XImage
 *(*
	msub_image
)();

382 (*
	madd_pixñ
)();

384 } 
	mf
;

385 } 
	tXImage
;

391 
	mx
, 
	my
;

392 
	mwidth
, 
	mheight
;

393 
	mb‹dî_width
;

394 
Wödow
 
	msiblög
;

395 
	m°ack_mode
;

396 } 
	tXWödowCh™ges
;

402 
	mpixñ
;

403 
	mªd
, 
	mgªí
, 
	mblue
;

404 
	mÊags
;

405 
	m∑d
;

406 } 
	tXCﬁ‹
;

414 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

415 } 
	tXSegmít
;

418 
	mx
, 
	my
;

419 } 
	tXPoöt
;

422 
	mx
, 
	my
;

423 
	mwidth
, 
	mheight
;

424 } 
	tXRe˘™gÀ
;

427 
	mx
, 
	my
;

428 
	mwidth
, 
	mheight
;

429 
	m™gÀ1
, 
	m™gÀ2
;

430 } 
	tXArc
;

436 
	mkey_˛ick_≥r˚¡
;

437 
	mbñl_≥r˚¡
;

438 
	mbñl_pôch
;

439 
	mbñl_duøti⁄
;

440 
	mÀd
;

441 
	mÀd_mode
;

442 
	mkey
;

443 
	mauto_ª≥©_mode
;

444 } 
	tXKeybﬂrdC⁄åﬁ
;

449 
	mkey_˛ick_≥r˚¡
;

450 
	mbñl_≥r˚¡
;

451 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

452 
	mÀd_mask
;

453 
	mglobÆ_auto_ª≥©
;

454 
	mauto_ª≥©s
[32];

455 } 
	tXKeybﬂrdSèã
;

460 
Time
 
	mtime
;

461 
	mx
, 
	my
;

462 } 
	tXTimeCo‹d
;

467 
	mmax_key≥rmod
;

468 
KeyCode
 *
	mmodifõrm≠
;

469 } 
	tXModifõrKeym≠
;

477 #i‚de‡
XLIB_ILLEGAL_ACCESS


478 
_XDi•œy
 
	tDi•œy
;

481 
	g_XPriv©e
;

482 
	g_XrmHashBuckëRec
;

485 #ifde‡
XLIB_ILLEGAL_ACCESS


486 
	t_XDi•œy


489 
XExtD©a
 *
	gext_d©a
;

490 
_XPriv©e
 *
	g¥iv©e1
;

491 
	gfd
;

492 
	g¥iv©e2
;

493 
	g¥Ÿo_maj‹_vîsi⁄
;

494 
	g¥Ÿo_mö‹_vîsi⁄
;

495 *
	gvíd‹
;

496 
XID
 
	g¥iv©e3
;

497 
XID
 
	g¥iv©e4
;

498 
XID
 
	g¥iv©e5
;

499 
	g¥iv©e6
;

500 #i‡
NìdFun˘i⁄PrŸŸy≥s


501 
XID
 (*
ªsour˚_Æloc
)(
	g_XDi•œy
 *);

503 
XID
 (*
ªsour˚_Æloc
)();

505 
	gbyã_‹dî
;

506 
	gbôm≠_unô
;

507 
	gbôm≠_∑d
;

508 
	gbôm≠_bô_‹dî
;

509 
	gnf‹m©s
;

510 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

511 
	g¥iv©e8
;

512 
	gªÀa£
;

513 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

514 
	gqÀn
;

515 
	gœ°_ªque°_ªad
;

516 
	gªque°
;

517 
XPoöãr
 
	g¥iv©e11
;

518 
XPoöãr
 
	g¥iv©e12
;

519 
XPoöãr
 
	g¥iv©e13
;

520 
XPoöãr
 
	g¥iv©e14
;

521 
	gmax_ªque°_size
;

522 
_XrmHashBuckëRec
 *
	gdb
;

523 (*
	g¥iv©e15
)();

524 *
	gdi•œy_«me
;

525 
	gdeÁu…_s¸ìn
;

526 
	gns¸ìns
;

527 
S¸ìn
 *
	gs¸ìns
;

528 
	gmŸi⁄_buf„r
;

529 
	g¥iv©e16
;

530 
	gmö_keycode
;

531 
	gmax_keycode
;

532 
XPoöãr
 
	g¥iv©e17
;

533 
XPoöãr
 
	g¥iv©e18
;

534 
	g¥iv©e19
;

535 *
	gxdeÁu…s
;

538 #ifde‡
	tXLIB_ILLEGAL_ACCESS


539 
	tDi•œy
,

541 *
	t_XPrivDi•œy
;

543 #i‡
NìdFun˘i⁄PrŸŸy≥s


544 #unde‡
_XEVENT_


546 #i‚de‡
_XEVENT_


551 
	mty≥
;

552 
	m£rül
;

553 
Boﬁ
 
	m£nd_evít
;

554 
Di•œy
 *
	mdi•œy
;

555 
Wödow
 
	mwödow
;

556 
Wödow
 
	mroŸ
;

557 
Wödow
 
	msubwödow
;

558 
Time
 
	mtime
;

559 
	mx
, 
	my
;

560 
	mx_roŸ
, 
	my_roŸ
;

561 
	m°©e
;

562 
	mkeycode
;

563 
Boﬁ
 
	mßme_s¸ìn
;

564 } 
	tXKeyEvít
;

565 
XKeyEvít
 
	tXKeyPªs£dEvít
;

566 
XKeyEvít
 
	tXKeyRñó£dEvít
;

569 
	mty≥
;

570 
	m£rül
;

571 
Boﬁ
 
	m£nd_evít
;

572 
Di•œy
 *
	mdi•œy
;

573 
Wödow
 
	mwödow
;

574 
Wödow
 
	mroŸ
;

575 
Wödow
 
	msubwödow
;

576 
Time
 
	mtime
;

577 
	mx
, 
	my
;

578 
	mx_roŸ
, 
	my_roŸ
;

579 
	m°©e
;

580 
	mbuâ⁄
;

581 
Boﬁ
 
	mßme_s¸ìn
;

582 } 
	tXBuâ⁄Evít
;

583 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

584 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

587 
	mty≥
;

588 
	m£rül
;

589 
Boﬁ
 
	m£nd_evít
;

590 
Di•œy
 *
	mdi•œy
;

591 
Wödow
 
	mwödow
;

592 
Wödow
 
	mroŸ
;

593 
Wödow
 
	msubwödow
;

594 
Time
 
	mtime
;

595 
	mx
, 
	my
;

596 
	mx_roŸ
, 
	my_roŸ
;

597 
	m°©e
;

598 
	mis_höt
;

599 
Boﬁ
 
	mßme_s¸ìn
;

600 } 
	tXMŸi⁄Evít
;

601 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

604 
	mty≥
;

605 
	m£rül
;

606 
Boﬁ
 
	m£nd_evít
;

607 
Di•œy
 *
	mdi•œy
;

608 
Wödow
 
	mwödow
;

609 
Wödow
 
	mroŸ
;

610 
Wödow
 
	msubwödow
;

611 
Time
 
	mtime
;

612 
	mx
, 
	my
;

613 
	mx_roŸ
, 
	my_roŸ
;

614 
	mmode
;

615 
	mdëaû
;

620 
Boﬁ
 
	mßme_s¸ìn
;

621 
Boﬁ
 
	mfocus
;

622 
	m°©e
;

623 } 
	tXCrossögEvít
;

624 
XCrossögEvít
 
	tXE¡îWödowEvít
;

625 
XCrossögEvít
 
	tXLóveWödowEvít
;

628 
	mty≥
;

629 
	m£rül
;

630 
Boﬁ
 
	m£nd_evít
;

631 
Di•œy
 *
	mdi•œy
;

632 
Wödow
 
	mwödow
;

633 
	mmode
;

634 
	mdëaû
;

640 } 
	tXFocusCh™geEvít
;

641 
XFocusCh™geEvít
 
	tXFocusInEvít
;

642 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

646 
	mty≥
;

647 
	m£rül
;

648 
Boﬁ
 
	m£nd_evít
;

649 
Di•œy
 *
	mdi•œy
;

650 
Wödow
 
	mwödow
;

651 
	mkey_ve˘‹
[32];

652 } 
	tXKeym≠Evít
;

655 
	mty≥
;

656 
	m£rül
;

657 
Boﬁ
 
	m£nd_evít
;

658 
Di•œy
 *
	mdi•œy
;

659 
Wödow
 
	mwödow
;

660 
	mx
, 
	my
;

661 
	mwidth
, 
	mheight
;

662 
	mcou¡
;

663 } 
	tXExpo£Evít
;

666 
	mty≥
;

667 
	m£rül
;

668 
Boﬁ
 
	m£nd_evít
;

669 
Di•œy
 *
	mdi•œy
;

670 
DøwabÀ
 
	mdøwabÀ
;

671 
	mx
, 
	my
;

672 
	mwidth
, 
	mheight
;

673 
	mcou¡
;

674 
	mmaj‹_code
;

675 
	mmö‹_code
;

676 } 
	tXGøphicsExpo£Evít
;

679 
	mty≥
;

680 
	m£rül
;

681 
Boﬁ
 
	m£nd_evít
;

682 
Di•œy
 *
	mdi•œy
;

683 
DøwabÀ
 
	mdøwabÀ
;

684 
	mmaj‹_code
;

685 
	mmö‹_code
;

686 } 
	tXNoExpo£Evít
;

689 
	mty≥
;

690 
	m£rül
;

691 
Boﬁ
 
	m£nd_evít
;

692 
Di•œy
 *
	mdi•œy
;

693 
Wödow
 
	mwödow
;

694 
	m°©e
;

695 } 
	tXVisibûôyEvít
;

698 
	mty≥
;

699 
	m£rül
;

700 
Boﬁ
 
	m£nd_evít
;

701 
Di•œy
 *
	mdi•œy
;

702 
Wödow
 
	m∑ª¡
;

703 
Wödow
 
	mwödow
;

704 
	mx
, 
	my
;

705 
	mwidth
, 
	mheight
;

706 
	mb‹dî_width
;

707 
Boﬁ
 
	movîride_ªdúe˘
;

708 } 
	tXCª©eWödowEvít
;

711 
	mty≥
;

712 
	m£rül
;

713 
Boﬁ
 
	m£nd_evít
;

714 
Di•œy
 *
	mdi•œy
;

715 
Wödow
 
	mevít
;

716 
Wödow
 
	mwödow
;

717 } 
	tXDe°royWödowEvít
;

720 
	mty≥
;

721 
	m£rül
;

722 
Boﬁ
 
	m£nd_evít
;

723 
Di•œy
 *
	mdi•œy
;

724 
Wödow
 
	mevít
;

725 
Wödow
 
	mwödow
;

726 
Boﬁ
 
	m‰om_c⁄figuª
;

727 } 
	tXUnm≠Evít
;

730 
	mty≥
;

731 
	m£rül
;

732 
Boﬁ
 
	m£nd_evít
;

733 
Di•œy
 *
	mdi•œy
;

734 
Wödow
 
	mevít
;

735 
Wödow
 
	mwödow
;

736 
Boﬁ
 
	movîride_ªdúe˘
;

737 } 
	tXM≠Evít
;

740 
	mty≥
;

741 
	m£rül
;

742 
Boﬁ
 
	m£nd_evít
;

743 
Di•œy
 *
	mdi•œy
;

744 
Wödow
 
	m∑ª¡
;

745 
Wödow
 
	mwödow
;

746 } 
	tXM≠Reque°Evít
;

749 
	mty≥
;

750 
	m£rül
;

751 
Boﬁ
 
	m£nd_evít
;

752 
Di•œy
 *
	mdi•œy
;

753 
Wödow
 
	mevít
;

754 
Wödow
 
	mwödow
;

755 
Wödow
 
	m∑ª¡
;

756 
	mx
, 
	my
;

757 
Boﬁ
 
	movîride_ªdúe˘
;

758 } 
	tXRï¨ítEvít
;

761 
	mty≥
;

762 
	m£rül
;

763 
Boﬁ
 
	m£nd_evít
;

764 
Di•œy
 *
	mdi•œy
;

765 
Wödow
 
	mevít
;

766 
Wödow
 
	mwödow
;

767 
	mx
, 
	my
;

768 
	mwidth
, 
	mheight
;

769 
	mb‹dî_width
;

770 
Wödow
 
	mabove
;

771 
Boﬁ
 
	movîride_ªdúe˘
;

772 } 
	tXC⁄figuªEvít
;

775 
	mty≥
;

776 
	m£rül
;

777 
Boﬁ
 
	m£nd_evít
;

778 
Di•œy
 *
	mdi•œy
;

779 
Wödow
 
	mevít
;

780 
Wödow
 
	mwödow
;

781 
	mx
, 
	my
;

782 } 
	tXGøvôyEvít
;

785 
	mty≥
;

786 
	m£rül
;

787 
Boﬁ
 
	m£nd_evít
;

788 
Di•œy
 *
	mdi•œy
;

789 
Wödow
 
	mwödow
;

790 
	mwidth
, 
	mheight
;

791 } 
	tXResizeReque°Evít
;

794 
	mty≥
;

795 
	m£rül
;

796 
Boﬁ
 
	m£nd_evít
;

797 
Di•œy
 *
	mdi•œy
;

798 
Wödow
 
	m∑ª¡
;

799 
Wödow
 
	mwödow
;

800 
	mx
, 
	my
;

801 
	mwidth
, 
	mheight
;

802 
	mb‹dî_width
;

803 
Wödow
 
	mabove
;

804 
	mdëaû
;

805 
	mvÆue_mask
;

806 } 
	tXC⁄figuªReque°Evít
;

809 
	mty≥
;

810 
	m£rül
;

811 
Boﬁ
 
	m£nd_evít
;

812 
Di•œy
 *
	mdi•œy
;

813 
Wödow
 
	mevít
;

814 
Wödow
 
	mwödow
;

815 
	m∂a˚
;

816 } 
	tXCúcuœãEvít
;

819 
	mty≥
;

820 
	m£rül
;

821 
Boﬁ
 
	m£nd_evít
;

822 
Di•œy
 *
	mdi•œy
;

823 
Wödow
 
	m∑ª¡
;

824 
Wödow
 
	mwödow
;

825 
	m∂a˚
;

826 } 
	tXCúcuœãReque°Evít
;

829 
	mty≥
;

830 
	m£rül
;

831 
Boﬁ
 
	m£nd_evít
;

832 
Di•œy
 *
	mdi•œy
;

833 
Wödow
 
	mwödow
;

834 
Atom
 
	m©om
;

835 
Time
 
	mtime
;

836 
	m°©e
;

837 } 
	tXPr›îtyEvít
;

840 
	mty≥
;

841 
	m£rül
;

842 
Boﬁ
 
	m£nd_evít
;

843 
Di•œy
 *
	mdi•œy
;

844 
Wödow
 
	mwödow
;

845 
Atom
 
	m£À˘i⁄
;

846 
Time
 
	mtime
;

847 } 
	tXSñe˘i⁄CÀ¨Evít
;

850 
	mty≥
;

851 
	m£rül
;

852 
Boﬁ
 
	m£nd_evít
;

853 
Di•œy
 *
	mdi•œy
;

854 
Wödow
 
	mow√r
;

855 
Wödow
 
	mªque°‹
;

856 
Atom
 
	m£À˘i⁄
;

857 
Atom
 
	mèrgë
;

858 
Atom
 
	m¥›îty
;

859 
Time
 
	mtime
;

860 } 
	tXSñe˘i⁄Reque°Evít
;

863 
	mty≥
;

864 
	m£rül
;

865 
Boﬁ
 
	m£nd_evít
;

866 
Di•œy
 *
	mdi•œy
;

867 
Wödow
 
	mªque°‹
;

868 
Atom
 
	m£À˘i⁄
;

869 
Atom
 
	mèrgë
;

870 
Atom
 
	m¥›îty
;

871 
Time
 
	mtime
;

872 } 
	tXSñe˘i⁄Evít
;

875 
	mty≥
;

876 
	m£rül
;

877 
Boﬁ
 
	m£nd_evít
;

878 
Di•œy
 *
	mdi•œy
;

879 
Wödow
 
	mwödow
;

880 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

881 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

882 
Boﬁ
 
	mc_√w
;

884 
Boﬁ
 
	m√w
;

886 
	m°©e
;

887 } 
	tXCﬁ‹m≠Evít
;

890 
	mty≥
;

891 
	m£rül
;

892 
Boﬁ
 
	m£nd_evít
;

893 
Di•œy
 *
	mdi•œy
;

894 
Wödow
 
	mwödow
;

895 
Atom
 
	mmesßge_ty≥
;

896 
	mf‹m©
;

898 
	mb
[20];

899 
	ms
[10];

900 
	ml
[5];

901 } 
	md©a
;

902 } 
	tXClõ¡MesßgeEvít
;

905 
	mty≥
;

906 
	m£rül
;

907 
Boﬁ
 
	m£nd_evít
;

908 
Di•œy
 *
	mdi•œy
;

909 
Wödow
 
	mwödow
;

910 
	mªque°
;

912 
	mfú°_keycode
;

913 
	mcou¡
;

914 } 
	tXM≠pögEvít
;

917 
	mty≥
;

918 
Di•œy
 *
	mdi•œy
;

919 
XID
 
	mªsour˚id
;

920 
	m£rül
;

921 
	mîr‹_code
;

922 
	mªque°_code
;

923 
	mmö‹_code
;

924 } 
	tXEº‹Evít
;

927 
	mty≥
;

928 
	m£rül
;

929 
Boﬁ
 
	m£nd_evít
;

930 
Di•œy
 *
	mdi•œy
;

931 
Wödow
 
	mwödow
;

932 } 
	tXAnyEvít
;

938 
	u_XEvít
 {

939 
	mty≥
;

940 
XAnyEvít
 
	mx™y
;

941 
XKeyEvít
 
	mxkey
;

942 
XBuâ⁄Evít
 
	mxbuâ⁄
;

943 
XMŸi⁄Evít
 
	mxmŸi⁄
;

944 
XCrossögEvít
 
	mx¸ossög
;

945 
XFocusCh™geEvít
 
	mxfocus
;

946 
XExpo£Evít
 
	mxexpo£
;

947 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

948 
XNoExpo£Evít
 
	mxn€xpo£
;

949 
XVisibûôyEvít
 
	mxvisibûôy
;

950 
XCª©eWödowEvít
 
	mx¸óãwödow
;

951 
XDe°royWödowEvít
 
	mxde°roywödow
;

952 
XUnm≠Evít
 
	mxunm≠
;

953 
XM≠Evít
 
	mxm≠
;

954 
XM≠Reque°Evít
 
	mxm≠ªque°
;

955 
XRï¨ítEvít
 
	mxª∑ª¡
;

956 
XC⁄figuªEvít
 
	mxc⁄figuª
;

957 
XGøvôyEvít
 
	mxgøvôy
;

958 
XResizeReque°Evít
 
	mxªsizîeque°
;

959 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

960 
XCúcuœãEvít
 
	mxcúcuœã
;

961 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

962 
XPr›îtyEvít
 
	mx¥›îty
;

963 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

964 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

965 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

966 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

967 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

968 
XM≠pögEvít
 
	mxm≠pög
;

969 
XEº‹Evít
 
	mxîr‹
;

970 
XKeym≠Evít
 
	mxkeym≠
;

971 
	m∑d
[24];

972 } 
	tXEvít
;

975 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)dpy)->
ªsour˚_Æloc
)((dpy)))

	)

981 
	mlbórög
;

982 
	mrbórög
;

983 
	mwidth
;

984 
	mas˚¡
;

985 
	mdes˚¡
;

986 
	m©åibuãs
;

987 } 
	tXCh¨Såu˘
;

994 
Atom
 
	m«me
;

995 
	mˇrd32
;

996 } 
	tXF⁄tPr›
;

999 
XExtD©a
 *
	mext_d©a
;

1000 
F⁄t
 
	mfid
;

1001 
	mdúe˘i⁄
;

1002 
	mmö_ch¨_‹_byã2
;

1003 
	mmax_ch¨_‹_byã2
;

1004 
	mmö_byã1
;

1005 
	mmax_byã1
;

1006 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1007 
	mdeÁu…_ch¨
;

1008 
	mn_¥›îtõs
;

1009 
XF⁄tPr›
 *
	m¥›îtõs
;

1010 
XCh¨Såu˘
 
	mmö_bounds
;

1011 
XCh¨Såu˘
 
	mmax_bounds
;

1012 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1013 
	mas˚¡
;

1014 
	mdes˚¡
;

1015 } 
	tXF⁄tSåu˘
;

1021 *
	mch¨s
;

1022 
	mnch¨s
;

1023 
	mdñè
;

1024 
F⁄t
 
	mf⁄t
;

1025 } 
	tXTextIãm
;

1028 
	mbyã1
;

1029 
	mbyã2
;

1030 } 
	tXCh¨2b
;

1033 
XCh¨2b
 *
	mch¨s
;

1034 
	mnch¨s
;

1035 
	mdñè
;

1036 
F⁄t
 
	mf⁄t
;

1037 } 
	tXTextIãm16
;

1040 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1041 
GC
 
	mgc
;

1042 
VisuÆ
 *
	mvisuÆ
;

1043 
S¸ìn
 *
	ms¸ìn
;

1044 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1045 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1048 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1049 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1050 } 
	tXF⁄tSëExã¡s
;

1052 (*
	gXOMProc
)();

1054 
_XOM
 *
	tXOM
;

1055 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1058 *
	mch¨s
;

1059 
	mnch¨s
;

1060 
	mdñè
;

1061 
XF⁄tSë
 
	mf⁄t_£t
;

1062 } 
	tXmbTextIãm
;

1065 
wch¨_t
 *
	mch¨s
;

1066 
	mnch¨s
;

1067 
	mdñè
;

1068 
XF⁄tSë
 
	mf⁄t_£t
;

1069 } 
	tXwcTextIãm
;

1071 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1072 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1073 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1074 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1075 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1076 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1077 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1078 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1079 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1080 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1083 
	mch¨£t_cou¡
;

1084 **
	mch¨£t_li°
;

1085 } 
	tXOMCh¨SëLi°
;

1088 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1089 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1090 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1091 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1092 
	mXOMOrõ¡©i⁄_C⁄ãxt


1093 } 
	tXOrõ¡©i⁄
;

1096 
	mnum_‹õ¡©i⁄
;

1097 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1098 } 
	tXOMOrõ¡©i⁄
;

1101 
	mnum_f⁄t
;

1102 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1103 **
	mf⁄t_«me_li°
;

1104 } 
	tXOMF⁄tInfo
;

1106 (*
	gXIMProc
)();

1108 
_XIM
 *
	tXIM
;

1109 
_XIC
 *
	tXIC
;

1111 
	tXIMStyÀ
;

1114 
	mcou¡_°yÀs
;

1115 
XIMStyÀ
 *
	msuµ‹ãd_°yÀs
;

1116 } 
	tXIMStyÀs
;

1118 
	#XIMPªedôAªa
 0x0001L

	)

1119 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1120 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1121 
	#XIMPªedôNŸhög
 0x0008L

	)

1122 
	#XIMPªedôN⁄e
 0x0010L

	)

1123 
	#XIMSètusAªa
 0x0100L

	)

1124 
	#XIMSètusCÆlbacks
 0x0200L

	)

1125 
	#XIMSètusNŸhög
 0x0400L

	)

1126 
	#XIMSètusN⁄e
 0x0800L

	)

1128 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1129 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1130 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1131 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1132 
	#XNFocusWödow
 "focusWödow"

	)

1133 
	#XNResour˚Name
 "ªsour˚Name"

	)

1134 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1135 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1136 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1137 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1138 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1139 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1140 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1141 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1142 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1143 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1144 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1145 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1146 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1147 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1148 
	#XNAªa
 "¨ó"

	)

1149 
	#XNAªaNìded
 "¨óNìded"

	)

1150 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1151 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1152 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1153 
	#XNF‹eground
 "f‹eground"

	)

1154 
	#XNBackground
 "background"

	)

1155 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1156 
	#XNF⁄tSë
 "f⁄tSë"

	)

1157 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1158 
	#XNCurs‹
 "curs‹"

	)

1160 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1161 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1162 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1163 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1164 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1165 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1166 
	#XNRe£tSèã
 "ª£tSèã"

	)

1167 
	#XNHŸKey
 "hŸKey"

	)

1168 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1169 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1170 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1172 
	#XBuf„rOvîÊow
 -1

	)

1173 
	#XLookupN⁄e
 1

	)

1174 
	#XLookupCh¨s
 2

	)

1175 
	#XLookupKeySym
 3

	)

1176 
	#XLookupBŸh
 4

	)

1178 #i‡
NìdFun˘i⁄PrŸŸy≥s


1179 *
	tXVaNe°edLi°
;

1181 
XPoöãr
 
	tXVaNe°edLi°
;

1185 
XPoöãr
 
	m˛õ¡_d©a
;

1186 
XIMProc
 
	mˇŒback
;

1187 } 
	tXIMCÆlback
;

1189 
	tXIMFìdback
;

1191 
	#XIMRevî£
 1L

	)

1192 
	#XIMUndîlöe
 (1L<<1)

	)

1193 
	#XIMHighlight
 (1L<<2)

	)

1194 
	#XIMPrim¨y
 (1L<<5)

	)

1195 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1196 
	#XIMTîtüry
 (1L<<7)

	)

1197 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1198 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1199 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1201 
	s_XIMText
 {

1202 
	mÀngth
;

1203 
XIMFìdback
 *
	m„edback
;

1204 
Boﬁ
 
	mícodög_is_wch¨
;

1206 *
	mmu…i_byã
;

1207 
wch¨_t
 *
	mwide_ch¨
;

1208 } 
	m°rög
;

1209 } 
	tXIMText
;

1211 
	tXIMPªedôSèã
;

1213 
	#XIMPªedôUnKnown
 0L

	)

1214 
	#XIMPªedôE«bÀ
 1L

	)

1215 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1217 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1218 
XIMPªedôSèã
 
	m°©e
;

1219 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1221 
	tXIMRe£tSèã
;

1223 
	#XIMInôülSèã
 1L

	)

1224 
	#XIMPª£rveSèã
 (1L<<1)

	)

1226 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1228 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1229 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1230 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1231 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1232 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1233 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1235 
	s_XIMSåögC⁄vîsi⁄Text
 {

1236 
	mÀngth
;

1237 
XIMSåögC⁄vîsi⁄Fìdback
 *
	m„edback
;

1238 
Boﬁ
 
	mícodög_is_wch¨
;

1240 *
	mmbs
;

1241 
wch¨_t
 *
	mwcs
;

1242 } 
	m°rög
;

1243 } 
	tXIMSåögC⁄vîsi⁄Text
;

1245 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1247 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1249 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1250 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1251 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1252 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1254 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1256 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1257 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1260 
	mXIMF‹w¨dCh¨
, 
	mXIMBackw¨dCh¨
,

1261 
	mXIMF‹w¨dW‹d
, 
	mXIMBackw¨dW‹d
,

1262 
	mXIMC¨ëUp
, 
	mXIMC¨ëDown
,

1263 
	mXIMNextLöe
, 
	mXIMPªviousLöe
,

1264 
	mXIMLöeSèπ
, 
	mXIMLöeEnd
,

1265 
	mXIMAbsﬁuãPosôi⁄
,

1266 
	mXIMD⁄tCh™ge


1267 } 
	tXIMC¨ëDúe˘i⁄
;

1269 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1270 
XIMSåögC⁄vîsi⁄Posôi⁄
 
	mposôi⁄
;

1271 
XIMC¨ëDúe˘i⁄
 
	mdúe˘i⁄
;

1272 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
	m›î©i⁄
;

1273 
	mÁ˘‹
;

1274 
XIMSåögC⁄vîsi⁄Text
 *
	mãxt
;

1275 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1277 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1278 
	mˇªt
;

1279 
	mchg_fú°
;

1280 
	mchg_Àngth
;

1281 
XIMText
 *
	mãxt
;

1282 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1285 
	mXIMIsInvisibÀ
,

1286 
	mXIMIsPrim¨y
,

1287 
	mXIMIsSec⁄d¨y


1288 } 
	tXIMC¨ëStyÀ
;

1290 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1291 
	mposôi⁄
;

1292 
XIMC¨ëDúe˘i⁄
 
	mdúe˘i⁄
;

1293 
XIMC¨ëStyÀ
 
	m°yÀ
;

1294 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1297 
	mXIMTextTy≥
,

1298 
	mXIMBôm≠Ty≥


1299 } 
	tXIMSètusD©aTy≥
;

1301 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1302 
XIMSètusD©aTy≥
 
	mty≥
;

1304 
XIMText
 *
	mãxt
;

1305 
Pixm≠
 
	mbôm≠
;

1306 } 
	md©a
;

1307 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1309 
	s_XIMHŸKeyTriggî
 {

1310 
KeySym
 
	mkeysym
;

1311 
	mmodifõr
;

1312 
	mmodifõr_mask
;

1313 } 
	tXIMHŸKeyTriggî
;

1315 
	s_XIMHŸKeyTriggîs
 {

1316 
	mnum_hŸ_key
;

1317 
XIMHŸKeyTriggî
 *
	mkey
;

1318 } 
	tXIMHŸKeyTriggîs
;

1320 
	tXIMHŸKeySèã
;

1322 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1323 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1326 
	mcou¡_vÆues
;

1327 **
	msuµ‹ãd_vÆues
;

1328 } 
	tXIMVÆuesLi°
;

1330 
	g_XFUNCPROTOBEGIN


1332 #i‡
deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1333 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1336 
_Xdebug
;

1338 
XF⁄tSåu˘
 *
XLﬂdQuîyF⁄t
(

1339 #i‡
NìdFun˘i⁄PrŸŸy≥s


1340 
Di•œy
* ,

1341 
_Xc⁄°
 *

1345 
XF⁄tSåu˘
 *
XQuîyF⁄t
(

1346 #i‡
NìdFun˘i⁄PrŸŸy≥s


1347 
Di•œy
* ,

1348 
XID


1353 
XTimeCo‹d
 *
XGëMŸi⁄Evíts
(

1354 #i‡
NìdFun˘i⁄PrŸŸy≥s


1355 
Di•œy
* ,

1356 
Wödow
 ,

1357 
Time
 ,

1358 
Time
 ,

1363 
XModifõrKeym≠
 *
XDñëeModifõrm≠E¡ry
(

1364 #i‡
NìdFun˘i⁄PrŸŸy≥s


1365 
XModifõrKeym≠
* ,

1366 #i‡
NìdWidePrŸŸy≥s


1369 
KeyCode
 ,

1375 
XModifõrKeym≠
 *
XGëModifõrM≠pög
(

1376 #i‡
NìdFun˘i⁄PrŸŸy≥s


1377 
Di•œy
*

1381 
XModifõrKeym≠
 *
XIn£πModifõrm≠E¡ry
(

1382 #i‡
NìdFun˘i⁄PrŸŸy≥s


1383 
XModifõrKeym≠
* ,

1384 #i‡
NìdWidePrŸŸy≥s


1387 
KeyCode
 ,

1393 
XModifõrKeym≠
 *
XNewModifõrm≠
(

1394 #i‡
NìdFun˘i⁄PrŸŸy≥s


1399 
XImage
 *
XCª©eImage
(

1400 #i‡
NìdFun˘i⁄PrŸŸy≥s


1401 
Di•œy
* ,

1402 
VisuÆ
* ,

1413 
Sètus
 
XInôImage
(

1414 #i‡
NìdFun˘i⁄PrŸŸy≥s


1415 
XImage
*

1418 
XImage
 *
XGëImage
(

1419 #i‡
NìdFun˘i⁄PrŸŸy≥s


1420 
Di•œy
* ,

1421 
DøwabÀ
 ,

1430 
XImage
 *
XGëSubImage
(

1431 #i‡
NìdFun˘i⁄PrŸŸy≥s


1432 
Di•œy
* ,

1433 
DøwabÀ
 ,

1440 
XImage
* ,

1449 
Di•œy
 *
XO≥nDi•œy
(

1450 #i‡
NìdFun˘i⁄PrŸŸy≥s


1451 
_Xc⁄°
 *

1455 
XrmInôülize
(

1456 #i‡
NìdFun˘i⁄PrŸŸy≥s


1461 *
XFëchByãs
(

1462 #i‡
NìdFun˘i⁄PrŸŸy≥s


1463 
Di•œy
* ,

1467 *
XFëchBuf„r
(

1468 #i‡
NìdFun˘i⁄PrŸŸy≥s


1469 
Di•œy
* ,

1474 *
XGëAtomName
(

1475 #i‡
NìdFun˘i⁄PrŸŸy≥s


1476 
Di•œy
* ,

1477 
Atom


1480 
Sètus
 
XGëAtomNames
(

1481 #i‡
NìdFun˘i⁄PrŸŸy≥s


1482 
Di•œy
* ,

1483 
Atom
* ,

1488 *
XGëDeÁu…
(

1489 #i‡
NìdFun˘i⁄PrŸŸy≥s


1490 
Di•œy
* ,

1491 
_Xc⁄°
 * ,

1492 
_Xc⁄°
 *

1495 *
XDi•œyName
(

1496 #i‡
NìdFun˘i⁄PrŸŸy≥s


1497 
_Xc⁄°
 *

1500 *
XKeysymToSåög
(

1501 #i‡
NìdFun˘i⁄PrŸŸy≥s


1502 
KeySym


1506 (*
XSynchr⁄ize
(

1507 #i‡
NìdFun˘i⁄PrŸŸy≥s


1508 
Di•œy
* ,

1509 
Boﬁ


1512 (*
XSëA·îFun˘i⁄
(

1513 #i‡
NìdFun˘i⁄PrŸŸy≥s


1514 
Di•œy
* ,

1516 #i‡
NìdNe°edPrŸŸy≥s


1517 
Di•œy
*

1522 
Atom
 
	`XI¡înAtom
(

1523 #i‡
NìdFun˘i⁄PrŸŸy≥s


1524 
Di•œy
* ,

1525 
_Xc⁄°
 * ,

1526 
Boﬁ


1529 
Sètus
 
	`XI¡înAtoms
(

1530 #i‡
NìdFun˘i⁄PrŸŸy≥s


1531 
Di•œy
* ,

1534 
Boﬁ
 ,

1535 
Atom
*

1538 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1539 #i‡
NìdFun˘i⁄PrŸŸy≥s


1540 
Di•œy
* ,

1541 
Cﬁ‹m≠


1544 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1545 #i‡
NìdFun˘i⁄PrŸŸy≥s


1546 
Di•œy
* ,

1547 
Wödow
 ,

1548 
VisuÆ
* ,

1552 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1553 #i‡
NìdFun˘i⁄PrŸŸy≥s


1554 
Di•œy
* ,

1555 
Pixm≠
 ,

1556 
Pixm≠
 ,

1557 
XCﬁ‹
* ,

1558 
XCﬁ‹
* ,

1563 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1564 #i‡
NìdFun˘i⁄PrŸŸy≥s


1565 
Di•œy
* ,

1566 
F⁄t
 ,

1567 
F⁄t
 ,

1570 
XCﬁ‹
* ,

1571 
XCﬁ‹
*

1574 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1575 #i‡
NìdFun˘i⁄PrŸŸy≥s


1576 
Di•œy
* ,

1580 
F⁄t
 
	`XLﬂdF⁄t
(

1581 #i‡
NìdFun˘i⁄PrŸŸy≥s


1582 
Di•œy
* ,

1583 
_Xc⁄°
 *

1586 
GC
 
	`XCª©eGC
(

1587 #i‡
NìdFun˘i⁄PrŸŸy≥s


1588 
Di•œy
* ,

1589 
DøwabÀ
 ,

1591 
XGCVÆues
*

1594 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1595 #i‡
NìdFun˘i⁄PrŸŸy≥s


1596 
GC


1599 
	`XFlushGC
(

1600 #i‡
NìdFun˘i⁄PrŸŸy≥s


1601 
Di•œy
* ,

1602 
GC


1605 
Pixm≠
 
	`XCª©ePixm≠
(

1606 #i‡
NìdFun˘i⁄PrŸŸy≥s


1607 
Di•œy
* ,

1608 
DøwabÀ
 ,

1614 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1615 #i‡
NìdFun˘i⁄PrŸŸy≥s


1616 
Di•œy
* ,

1617 
DøwabÀ
 ,

1618 
_Xc⁄°
 * ,

1623 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1624 #i‡
NìdFun˘i⁄PrŸŸy≥s


1625 
Di•œy
* ,

1626 
DøwabÀ
 ,

1635 
Wödow
 
	`XCª©eSim∂eWödow
(

1636 #i‡
NìdFun˘i⁄PrŸŸy≥s


1637 
Di•œy
* ,

1638 
Wödow
 ,

1648 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1649 #i‡
NìdFun˘i⁄PrŸŸy≥s


1650 
Di•œy
* ,

1651 
Atom


1654 
Wödow
 
	`XCª©eWödow
(

1655 #i‡
NìdFun˘i⁄PrŸŸy≥s


1656 
Di•œy
* ,

1657 
Wödow
 ,

1665 
VisuÆ
* ,

1667 
XSëWödowAâribuãs
*

1670 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1671 #i‡
NìdFun˘i⁄PrŸŸy≥s


1672 
Di•œy
* ,

1673 
Wödow
 ,

1677 **
	`XLi°F⁄ts
(

1678 #i‡
NìdFun˘i⁄PrŸŸy≥s


1679 
Di•œy
* ,

1680 
_Xc⁄°
 * ,

1685 **
	`XLi°F⁄tsWôhInfo
(

1686 #i‡
NìdFun˘i⁄PrŸŸy≥s


1687 
Di•œy
* ,

1688 
_Xc⁄°
 * ,

1691 
XF⁄tSåu˘
**

1694 **
	`XGëF⁄tP©h
(

1695 #i‡
NìdFun˘i⁄PrŸŸy≥s


1696 
Di•œy
* ,

1700 **
	`XLi°Exãnsi⁄s
(

1701 #i‡
NìdFun˘i⁄PrŸŸy≥s


1702 
Di•œy
* ,

1706 
Atom
 *
	`XLi°Pr›îtõs
(

1707 #i‡
NìdFun˘i⁄PrŸŸy≥s


1708 
Di•œy
* ,

1709 
Wödow
 ,

1713 
XHo°Addªss
 *
	`XLi°Ho°s
(

1714 #i‡
NìdFun˘i⁄PrŸŸy≥s


1715 
Di•œy
* ,

1717 
Boﬁ
*

1720 
KeySym
 
	`XKeycodeToKeysym
(

1721 #i‡
NìdFun˘i⁄PrŸŸy≥s


1722 
Di•œy
* ,

1723 #i‡
NìdWidePrŸŸy≥s


1726 
KeyCode
 ,

1731 
KeySym
 
	`XLookupKeysym
(

1732 #i‡
NìdFun˘i⁄PrŸŸy≥s


1733 
XKeyEvít
* ,

1737 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1738 #i‡
NìdFun˘i⁄PrŸŸy≥s


1739 
Di•œy
* ,

1740 #i‡
NìdWidePrŸŸy≥s


1743 
KeyCode
 ,

1749 
KeySym
 
	`XSåögToKeysym
(

1750 #i‡
NìdFun˘i⁄PrŸŸy≥s


1751 
_Xc⁄°
 *

1754 
	`XMaxReque°Size
(

1755 #i‡
NìdFun˘i⁄PrŸŸy≥s


1756 
Di•œy
*

1759 
	`XExãndedMaxReque°Size
(

1760 #i‡
NìdFun˘i⁄PrŸŸy≥s


1761 
Di•œy
*

1764 *
	`XResour˚M™agîSåög
(

1765 #i‡
NìdFun˘i⁄PrŸŸy≥s


1766 
Di•œy
*

1769 *
	`XS¸ìnResour˚Såög
(

1770 #i‡
NìdFun˘i⁄PrŸŸy≥s


1771 
S¸ìn
*

1774 
	`XDi•œyMŸi⁄Buf„rSize
(

1775 #i‡
NìdFun˘i⁄PrŸŸy≥s


1776 
Di•œy
*

1779 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1780 #i‡
NìdFun˘i⁄PrŸŸy≥s


1781 
VisuÆ
*

1787 
Sètus
 
	`XInôThªads
(

1788 #i‡
NìdFun˘i⁄PrŸŸy≥s


1793 
	`XLockDi•œy
(

1794 #i‡
NìdFun˘i⁄PrŸŸy≥s


1795 
Di•œy
*

1799 
	`XU∆ockDi•œy
(

1800 #i‡
NìdFun˘i⁄PrŸŸy≥s


1801 
Di•œy
*

1807 
XExtCodes
 *
	`XInôExãnsi⁄
(

1808 #i‡
NìdFun˘i⁄PrŸŸy≥s


1809 
Di•œy
* ,

1810 
_Xc⁄°
 *

1814 
XExtCodes
 *
	`XAddExãnsi⁄
(

1815 #i‡
NìdFun˘i⁄PrŸŸy≥s


1816 
Di•œy
*

1819 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1820 #i‡
NìdFun˘i⁄PrŸŸy≥s


1821 
XExtD©a
** ,

1825 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1826 #i‡
NìdFun˘i⁄PrŸŸy≥s


1827 
XED©aObje˘


1832 
Wödow
 
	`XRoŸWödow
(

1833 #i‡
NìdFun˘i⁄PrŸŸy≥s


1834 
Di•œy
* ,

1838 
Wödow
 
	`XDeÁu…RoŸWödow
(

1839 #i‡
NìdFun˘i⁄PrŸŸy≥s


1840 
Di•œy
*

1843 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1844 #i‡
NìdFun˘i⁄PrŸŸy≥s


1845 
S¸ìn
*

1848 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1849 #i‡
NìdFun˘i⁄PrŸŸy≥s


1850 
Di•œy
* ,

1854 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1855 #i‡
NìdFun˘i⁄PrŸŸy≥s


1856 
S¸ìn
*

1859 
GC
 
	`XDeÁu…GC
(

1860 #i‡
NìdFun˘i⁄PrŸŸy≥s


1861 
Di•œy
* ,

1865 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1866 #i‡
NìdFun˘i⁄PrŸŸy≥s


1867 
S¸ìn
*

1870 
	`XBœckPixñ
(

1871 #i‡
NìdFun˘i⁄PrŸŸy≥s


1872 
Di•œy
* ,

1876 
	`XWhôePixñ
(

1877 #i‡
NìdFun˘i⁄PrŸŸy≥s


1878 
Di•œy
* ,

1882 
	`XAŒPœ√s
(

1883 #i‡
NìdFun˘i⁄PrŸŸy≥s


1887 
	`XBœckPixñOfS¸ìn
(

1888 #i‡
NìdFun˘i⁄PrŸŸy≥s


1889 
S¸ìn
*

1892 
	`XWhôePixñOfS¸ìn
(

1893 #i‡
NìdFun˘i⁄PrŸŸy≥s


1894 
S¸ìn
*

1897 
	`XNextReque°
(

1898 #i‡
NìdFun˘i⁄PrŸŸy≥s


1899 
Di•œy
*

1902 
	`XLa°KnownReque°Pro˚s£d
(

1903 #i‡
NìdFun˘i⁄PrŸŸy≥s


1904 
Di•œy
*

1907 *
	`XSîvîVíd‹
(

1908 #i‡
NìdFun˘i⁄PrŸŸy≥s


1909 
Di•œy
*

1912 *
	`XDi•œySåög
(

1913 #i‡
NìdFun˘i⁄PrŸŸy≥s


1914 
Di•œy
*

1917 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1918 #i‡
NìdFun˘i⁄PrŸŸy≥s


1919 
Di•œy
* ,

1923 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1924 #i‡
NìdFun˘i⁄PrŸŸy≥s


1925 
S¸ìn
*

1928 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1929 #i‡
NìdFun˘i⁄PrŸŸy≥s


1930 
S¸ìn
*

1933 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1934 #i‡
NìdFun˘i⁄PrŸŸy≥s


1935 
Di•œy
* ,

1939 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1940 #i‡
NìdFun˘i⁄PrŸŸy≥s


1941 
Di•œy
*

1944 
	`XEvítMaskOfS¸ìn
(

1945 #i‡
NìdFun˘i⁄PrŸŸy≥s


1946 
S¸ìn
*

1950 
	`XS¸ìnNumbîOfS¸ìn
(

1951 #i‡
NìdFun˘i⁄PrŸŸy≥s


1952 
S¸ìn
*

1956 (*
	tXEº‹H™dÀr
) (

1957 #i‡
	tNìdFun˘i⁄PrŸŸy≥s


1958 
	tDi•œy
* ,

1959 
	tXEº‹Evít
*

1963 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1964 #i‡
NìdFun˘i⁄PrŸŸy≥s


1965 
XEº‹H™dÀr


1970 (*
	tXIOEº‹H™dÀr
) (

1971 #i‡
	tNìdFun˘i⁄PrŸŸy≥s


1972 
	tDi•œy
*

1976 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1977 #i‡
NìdFun˘i⁄PrŸŸy≥s


1978 
XIOEº‹H™dÀr


1983 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1984 #i‡
NìdFun˘i⁄PrŸŸy≥s


1985 
Di•œy
* ,

1989 *
	`XLi°Dïths
(

1990 #i‡
NìdFun˘i⁄PrŸŸy≥s


1991 
Di•œy
* ,

1999 
Sètus
 
	`XRec⁄figuªWMWödow
(

2000 #i‡
NìdFun˘i⁄PrŸŸy≥s


2001 
Di•œy
* ,

2002 
Wödow
 ,

2005 
XWödowCh™ges
*

2009 
Sètus
 
	`XGëWMPrŸocﬁs
(

2010 #i‡
NìdFun˘i⁄PrŸŸy≥s


2011 
Di•œy
* ,

2012 
Wödow
 ,

2013 
Atom
** ,

2017 
Sètus
 
	`XSëWMPrŸocﬁs
(

2018 #i‡
NìdFun˘i⁄PrŸŸy≥s


2019 
Di•œy
* ,

2020 
Wödow
 ,

2021 
Atom
* ,

2025 
Sètus
 
	`XIc⁄ifyWödow
(

2026 #i‡
NìdFun˘i⁄PrŸŸy≥s


2027 
Di•œy
* ,

2028 
Wödow
 ,

2032 
Sètus
 
	`XWôhdøwWödow
(

2033 #i‡
NìdFun˘i⁄PrŸŸy≥s


2034 
Di•œy
* ,

2035 
Wödow
 ,

2039 
Sètus
 
	`XGëComm™d
(

2040 #i‡
NìdFun˘i⁄PrŸŸy≥s


2041 
Di•œy
* ,

2042 
Wödow
 ,

2047 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

2048 #i‡
NìdFun˘i⁄PrŸŸy≥s


2049 
Di•œy
* ,

2050 
Wödow
 ,

2051 
Wödow
** ,

2055 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

2056 #i‡
NìdFun˘i⁄PrŸŸy≥s


2057 
Di•œy
* ,

2058 
Wödow
 ,

2059 
Wödow
* ,

2063 
	`XFªeSåögLi°
(

2064 #i‡
NìdFun˘i⁄PrŸŸy≥s


2068 
	`XSëTønsõ¡F‹Höt
(

2069 #i‡
NìdFun˘i⁄PrŸŸy≥s


2070 
Di•œy
* ,

2071 
Wödow
 ,

2072 
Wödow


2078 
	`XA˘iv©eS¸ìnSavî
(

2079 #i‡
NìdFun˘i⁄PrŸŸy≥s


2080 
Di•œy
*

2084 
	`XAddHo°
(

2085 #i‡
NìdFun˘i⁄PrŸŸy≥s


2086 
Di•œy
* ,

2087 
XHo°Addªss
*

2091 
	`XAddHo°s
(

2092 #i‡
NìdFun˘i⁄PrŸŸy≥s


2093 
Di•œy
* ,

2094 
XHo°Addªss
* ,

2099 
	`XAddToExãnsi⁄Li°
(

2100 #i‡
NìdFun˘i⁄PrŸŸy≥s


2101 
_XExtD©a
** ,

2102 
XExtD©a
*

2106 
	`XAddToSaveSë
(

2107 #i‡
NìdFun˘i⁄PrŸŸy≥s


2108 
Di•œy
* ,

2109 
Wödow


2113 
Sètus
 
	`XAŒocCﬁ‹
(

2114 #i‡
NìdFun˘i⁄PrŸŸy≥s


2115 
Di•œy
* ,

2116 
Cﬁ‹m≠
 ,

2117 
XCﬁ‹
*

2121 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

2122 #i‡
NìdFun˘i⁄PrŸŸy≥s


2123 
Di•œy
* ,

2124 
Cﬁ‹m≠
 ,

2125 
Boﬁ
 ,

2133 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

2134 #i‡
NìdFun˘i⁄PrŸŸy≥s


2135 
Di•œy
* ,

2136 
Cﬁ‹m≠
 ,

2137 
Boﬁ
 ,

2149 
Sètus
 
	`XAŒocNamedCﬁ‹
(

2150 #i‡
NìdFun˘i⁄PrŸŸy≥s


2151 
Di•œy
* ,

2152 
Cﬁ‹m≠
 ,

2153 
_Xc⁄°
 * ,

2154 
XCﬁ‹
* ,

2155 
XCﬁ‹
*

2159 
	`XAŒowEvíts
(

2160 #i‡
NìdFun˘i⁄PrŸŸy≥s


2161 
Di•œy
* ,

2163 
Time


2167 
	`XAutoRïótOff
(

2168 #i‡
NìdFun˘i⁄PrŸŸy≥s


2169 
Di•œy
*

2173 
	`XAutoRïótOn
(

2174 #i‡
NìdFun˘i⁄PrŸŸy≥s


2175 
Di•œy
*

2179 
	`XBñl
(

2180 #i‡
NìdFun˘i⁄PrŸŸy≥s


2181 
Di•œy
* ,

2186 
	`XBôm≠BôOrdî
(

2187 #i‡
NìdFun˘i⁄PrŸŸy≥s


2188 
Di•œy
*

2192 
	`XBôm≠Pad
(

2193 #i‡
NìdFun˘i⁄PrŸŸy≥s


2194 
Di•œy
*

2198 
	`XBôm≠Unô
(

2199 #i‡
NìdFun˘i⁄PrŸŸy≥s


2200 
Di•œy
*

2204 
	`XCñlsOfS¸ìn
(

2205 #i‡
NìdFun˘i⁄PrŸŸy≥s


2206 
S¸ìn
*

2210 
	`XCh™geA˘ivePoöãrGøb
(

2211 #i‡
NìdFun˘i⁄PrŸŸy≥s


2212 
Di•œy
* ,

2214 
Curs‹
 ,

2215 
Time


2219 
	`XCh™geGC
(

2220 #i‡
NìdFun˘i⁄PrŸŸy≥s


2221 
Di•œy
* ,

2222 
GC
 ,

2224 
XGCVÆues
*

2228 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2229 #i‡
NìdFun˘i⁄PrŸŸy≥s


2230 
Di•œy
* ,

2232 
XKeybﬂrdC⁄åﬁ
*

2236 
	`XCh™geKeybﬂrdM≠pög
(

2237 #i‡
NìdFun˘i⁄PrŸŸy≥s


2238 
Di•œy
* ,

2241 
KeySym
* ,

2246 
	`XCh™gePoöãrC⁄åﬁ
(

2247 #i‡
NìdFun˘i⁄PrŸŸy≥s


2248 
Di•œy
* ,

2249 
Boﬁ
 ,

2250 
Boﬁ
 ,

2257 
	`XCh™gePr›îty
(

2258 #i‡
NìdFun˘i⁄PrŸŸy≥s


2259 
Di•œy
* ,

2260 
Wödow
 ,

2261 
Atom
 ,

2262 
Atom
 ,

2265 
_Xc⁄°
 * ,

2270 
	`XCh™geSaveSë
(

2271 #i‡
NìdFun˘i⁄PrŸŸy≥s


2272 
Di•œy
* ,

2273 
Wödow
 ,

2278 
	`XCh™geWödowAâribuãs
(

2279 #i‡
NìdFun˘i⁄PrŸŸy≥s


2280 
Di•œy
* ,

2281 
Wödow
 ,

2283 
XSëWödowAâribuãs
*

2287 
Boﬁ
 
	`XCheckIfEvít
(

2288 #i‡
NìdFun˘i⁄PrŸŸy≥s


2289 
Di•œy
* ,

2290 
XEvít
* ,

2291 
	$Boﬁ
 (*) (

2292 #i‡
NìdNe°edPrŸŸy≥s


2293 
Di•œy
* ,

2294 
XEvít
* ,

2295 
XPoöãr


2298 
XPoöãr


2302 
Boﬁ
 
	`XCheckMaskEvít
(

2303 #i‡
NìdFun˘i⁄PrŸŸy≥s


2304 
Di•œy
* ,

2306 
XEvít
*

2310 
Boﬁ
 
	`XCheckTy≥dEvít
(

2311 #i‡
NìdFun˘i⁄PrŸŸy≥s


2312 
Di•œy
* ,

2314 
XEvít
*

2318 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2319 #i‡
NìdFun˘i⁄PrŸŸy≥s


2320 
Di•œy
* ,

2321 
Wödow
 ,

2323 
XEvít
*

2327 
Boﬁ
 
	`XCheckWödowEvít
(

2328 #i‡
NìdFun˘i⁄PrŸŸy≥s


2329 
Di•œy
* ,

2330 
Wödow
 ,

2332 
XEvít
*

2336 
	`XCúcuœãSubwödows
(

2337 #i‡
NìdFun˘i⁄PrŸŸy≥s


2338 
Di•œy
* ,

2339 
Wödow
 ,

2344 
	`XCúcuœãSubwödowsDown
(

2345 #i‡
NìdFun˘i⁄PrŸŸy≥s


2346 
Di•œy
* ,

2347 
Wödow


2351 
	`XCúcuœãSubwödowsUp
(

2352 #i‡
NìdFun˘i⁄PrŸŸy≥s


2353 
Di•œy
* ,

2354 
Wödow


2358 
	`XCÀ¨Aªa
(

2359 #i‡
NìdFun˘i⁄PrŸŸy≥s


2360 
Di•œy
* ,

2361 
Wödow
 ,

2366 
Boﬁ


2370 
	`XCÀ¨Wödow
(

2371 #i‡
NìdFun˘i⁄PrŸŸy≥s


2372 
Di•œy
* ,

2373 
Wödow


2377 
	`XClo£Di•œy
(

2378 #i‡
NìdFun˘i⁄PrŸŸy≥s


2379 
Di•œy
*

2383 
	`XC⁄figuªWödow
(

2384 #i‡
NìdFun˘i⁄PrŸŸy≥s


2385 
Di•œy
* ,

2386 
Wödow
 ,

2388 
XWödowCh™ges
*

2392 
	`XC⁄√˘i⁄Numbî
(

2393 #i‡
NìdFun˘i⁄PrŸŸy≥s


2394 
Di•œy
*

2398 
	`XC⁄vîtSñe˘i⁄
(

2399 #i‡
NìdFun˘i⁄PrŸŸy≥s


2400 
Di•œy
* ,

2401 
Atom
 ,

2402 
Atom
 ,

2403 
Atom
 ,

2404 
Wödow
 ,

2405 
Time


2409 
	`XC›yAªa
(

2410 #i‡
NìdFun˘i⁄PrŸŸy≥s


2411 
Di•œy
* ,

2412 
DøwabÀ
 ,

2413 
DøwabÀ
 ,

2414 
GC
 ,

2424 
	`XC›yGC
(

2425 #i‡
NìdFun˘i⁄PrŸŸy≥s


2426 
Di•œy
* ,

2427 
GC
 ,

2429 
GC


2433 
	`XC›yPœ√
(

2434 #i‡
NìdFun˘i⁄PrŸŸy≥s


2435 
Di•œy
* ,

2436 
DøwabÀ
 ,

2437 
DøwabÀ
 ,

2438 
GC
 ,

2449 
	`XDeÁu…Dïth
(

2450 #i‡
NìdFun˘i⁄PrŸŸy≥s


2451 
Di•œy
* ,

2456 
	`XDeÁu…DïthOfS¸ìn
(

2457 #i‡
NìdFun˘i⁄PrŸŸy≥s


2458 
S¸ìn
*

2462 
	`XDeÁu…S¸ìn
(

2463 #i‡
NìdFun˘i⁄PrŸŸy≥s


2464 
Di•œy
*

2468 
	`XDeföeCurs‹
(

2469 #i‡
NìdFun˘i⁄PrŸŸy≥s


2470 
Di•œy
* ,

2471 
Wödow
 ,

2472 
Curs‹


2476 
	`XDñëePr›îty
(

2477 #i‡
NìdFun˘i⁄PrŸŸy≥s


2478 
Di•œy
* ,

2479 
Wödow
 ,

2480 
Atom


2484 
	`XDe°royWödow
(

2485 #i‡
NìdFun˘i⁄PrŸŸy≥s


2486 
Di•œy
* ,

2487 
Wödow


2491 
	`XDe°roySubwödows
(

2492 #i‡
NìdFun˘i⁄PrŸŸy≥s


2493 
Di•œy
* ,

2494 
Wödow


2498 
	`XD€sBackögSt‹e
(

2499 #i‡
NìdFun˘i⁄PrŸŸy≥s


2500 
S¸ìn
*

2504 
Boﬁ
 
	`XD€sSaveUndîs
(

2505 #i‡
NìdFun˘i⁄PrŸŸy≥s


2506 
S¸ìn
*

2510 
	`XDißbÀAc˚ssC⁄åﬁ
(

2511 #i‡
NìdFun˘i⁄PrŸŸy≥s


2512 
Di•œy
*

2517 
	`XDi•œyCñls
(

2518 #i‡
NìdFun˘i⁄PrŸŸy≥s


2519 
Di•œy
* ,

2524 
	`XDi•œyHeight
(

2525 #i‡
NìdFun˘i⁄PrŸŸy≥s


2526 
Di•œy
* ,

2531 
	`XDi•œyHeightMM
(

2532 #i‡
NìdFun˘i⁄PrŸŸy≥s


2533 
Di•œy
* ,

2538 
	`XDi•œyKeycodes
(

2539 #i‡
NìdFun˘i⁄PrŸŸy≥s


2540 
Di•œy
* ,

2546 
	`XDi•œyPœ√s
(

2547 #i‡
NìdFun˘i⁄PrŸŸy≥s


2548 
Di•œy
* ,

2553 
	`XDi•œyWidth
(

2554 #i‡
NìdFun˘i⁄PrŸŸy≥s


2555 
Di•œy
* ,

2560 
	`XDi•œyWidthMM
(

2561 #i‡
NìdFun˘i⁄PrŸŸy≥s


2562 
Di•œy
* ,

2567 
	`XDøwArc
(

2568 #i‡
NìdFun˘i⁄PrŸŸy≥s


2569 
Di•œy
* ,

2570 
DøwabÀ
 ,

2571 
GC
 ,

2581 
	`XDøwArcs
(

2582 #i‡
NìdFun˘i⁄PrŸŸy≥s


2583 
Di•œy
* ,

2584 
DøwabÀ
 ,

2585 
GC
 ,

2586 
XArc
* ,

2591 
	`XDøwImageSåög
(

2592 #i‡
NìdFun˘i⁄PrŸŸy≥s


2593 
Di•œy
* ,

2594 
DøwabÀ
 ,

2595 
GC
 ,

2598 
_Xc⁄°
 * ,

2603 
	`XDøwImageSåög16
(

2604 #i‡
NìdFun˘i⁄PrŸŸy≥s


2605 
Di•œy
* ,

2606 
DøwabÀ
 ,

2607 
GC
 ,

2610 
_Xc⁄°
 
XCh¨2b
* ,

2615 
	`XDøwLöe
(

2616 #i‡
NìdFun˘i⁄PrŸŸy≥s


2617 
Di•œy
* ,

2618 
DøwabÀ
 ,

2619 
GC
 ,

2627 
	`XDøwLöes
(

2628 #i‡
NìdFun˘i⁄PrŸŸy≥s


2629 
Di•œy
* ,

2630 
DøwabÀ
 ,

2631 
GC
 ,

2632 
XPoöt
* ,

2638 
	`XDøwPoöt
(

2639 #i‡
NìdFun˘i⁄PrŸŸy≥s


2640 
Di•œy
* ,

2641 
DøwabÀ
 ,

2642 
GC
 ,

2648 
	`XDøwPoöts
(

2649 #i‡
NìdFun˘i⁄PrŸŸy≥s


2650 
Di•œy
* ,

2651 
DøwabÀ
 ,

2652 
GC
 ,

2653 
XPoöt
* ,

2659 
	`XDøwRe˘™gÀ
(

2660 #i‡
NìdFun˘i⁄PrŸŸy≥s


2661 
Di•œy
* ,

2662 
DøwabÀ
 ,

2663 
GC
 ,

2671 
	`XDøwRe˘™gÀs
(

2672 #i‡
NìdFun˘i⁄PrŸŸy≥s


2673 
Di•œy
* ,

2674 
DøwabÀ
 ,

2675 
GC
 ,

2676 
XRe˘™gÀ
* ,

2681 
	`XDøwSegmíts
(

2682 #i‡
NìdFun˘i⁄PrŸŸy≥s


2683 
Di•œy
* ,

2684 
DøwabÀ
 ,

2685 
GC
 ,

2686 
XSegmít
* ,

2691 
	`XDøwSåög
(

2692 #i‡
NìdFun˘i⁄PrŸŸy≥s


2693 
Di•œy
* ,

2694 
DøwabÀ
 ,

2695 
GC
 ,

2698 
_Xc⁄°
 * ,

2703 
	`XDøwSåög16
(

2704 #i‡
NìdFun˘i⁄PrŸŸy≥s


2705 
Di•œy
* ,

2706 
DøwabÀ
 ,

2707 
GC
 ,

2710 
_Xc⁄°
 
XCh¨2b
* ,

2715 
	`XDøwText
(

2716 #i‡
NìdFun˘i⁄PrŸŸy≥s


2717 
Di•œy
* ,

2718 
DøwabÀ
 ,

2719 
GC
 ,

2722 
XTextIãm
* ,

2727 
	`XDøwText16
(

2728 #i‡
NìdFun˘i⁄PrŸŸy≥s


2729 
Di•œy
* ,

2730 
DøwabÀ
 ,

2731 
GC
 ,

2734 
XTextIãm16
* ,

2739 
	`XE«bÀAc˚ssC⁄åﬁ
(

2740 #i‡
NìdFun˘i⁄PrŸŸy≥s


2741 
Di•œy
*

2745 
	`XEvítsQueued
(

2746 #i‡
NìdFun˘i⁄PrŸŸy≥s


2747 
Di•œy
* ,

2752 
Sètus
 
	`XFëchName
(

2753 #i‡
NìdFun˘i⁄PrŸŸy≥s


2754 
Di•œy
* ,

2755 
Wödow
 ,

2760 
	`XFûlArc
(

2761 #i‡
NìdFun˘i⁄PrŸŸy≥s


2762 
Di•œy
* ,

2763 
DøwabÀ
 ,

2764 
GC
 ,

2774 
	`XFûlArcs
(

2775 #i‡
NìdFun˘i⁄PrŸŸy≥s


2776 
Di•œy
* ,

2777 
DøwabÀ
 ,

2778 
GC
 ,

2779 
XArc
* ,

2784 
	`XFûlPﬁyg⁄
(

2785 #i‡
NìdFun˘i⁄PrŸŸy≥s


2786 
Di•œy
* ,

2787 
DøwabÀ
 ,

2788 
GC
 ,

2789 
XPoöt
* ,

2796 
	`XFûlRe˘™gÀ
(

2797 #i‡
NìdFun˘i⁄PrŸŸy≥s


2798 
Di•œy
* ,

2799 
DøwabÀ
 ,

2800 
GC
 ,

2808 
	`XFûlRe˘™gÀs
(

2809 #i‡
NìdFun˘i⁄PrŸŸy≥s


2810 
Di•œy
* ,

2811 
DøwabÀ
 ,

2812 
GC
 ,

2813 
XRe˘™gÀ
* ,

2818 
	`XFlush
(

2819 #i‡
NìdFun˘i⁄PrŸŸy≥s


2820 
Di•œy
*

2824 
	`XF‹˚S¸ìnSavî
(

2825 #i‡
NìdFun˘i⁄PrŸŸy≥s


2826 
Di•œy
* ,

2831 
	`XFªe
(

2832 #i‡
NìdFun˘i⁄PrŸŸy≥s


2837 
	`XFªeCﬁ‹m≠
(

2838 #i‡
NìdFun˘i⁄PrŸŸy≥s


2839 
Di•œy
* ,

2840 
Cﬁ‹m≠


2844 
	`XFªeCﬁ‹s
(

2845 #i‡
NìdFun˘i⁄PrŸŸy≥s


2846 
Di•œy
* ,

2847 
Cﬁ‹m≠
 ,

2854 
	`XFªeCurs‹
(

2855 #i‡
NìdFun˘i⁄PrŸŸy≥s


2856 
Di•œy
* ,

2857 
Curs‹


2861 
	`XFªeExãnsi⁄Li°
(

2862 #i‡
NìdFun˘i⁄PrŸŸy≥s


2867 
	`XFªeF⁄t
(

2868 #i‡
NìdFun˘i⁄PrŸŸy≥s


2869 
Di•œy
* ,

2870 
XF⁄tSåu˘
*

2874 
	`XFªeF⁄tInfo
(

2875 #i‡
NìdFun˘i⁄PrŸŸy≥s


2877 
XF⁄tSåu˘
* ,

2882 
	`XFªeF⁄tNames
(

2883 #i‡
NìdFun˘i⁄PrŸŸy≥s


2888 
	`XFªeF⁄tP©h
(

2889 #i‡
NìdFun˘i⁄PrŸŸy≥s


2894 
	`XFªeGC
(

2895 #i‡
NìdFun˘i⁄PrŸŸy≥s


2896 
Di•œy
* ,

2897 
GC


2901 
	`XFªeModifõrm≠
(

2902 #i‡
NìdFun˘i⁄PrŸŸy≥s


2903 
XModifõrKeym≠
*

2907 
	`XFªePixm≠
(

2908 #i‡
NìdFun˘i⁄PrŸŸy≥s


2909 
Di•œy
* ,

2910 
Pixm≠


2914 
	`XGeomëry
(

2915 #i‡
NìdFun˘i⁄PrŸŸy≥s


2916 
Di•œy
* ,

2918 
_Xc⁄°
 * ,

2919 
_Xc⁄°
 * ,

2932 
	`XGëEº‹D©aba£Text
(

2933 #i‡
NìdFun˘i⁄PrŸŸy≥s


2934 
Di•œy
* ,

2935 
_Xc⁄°
 * ,

2936 
_Xc⁄°
 * ,

2937 
_Xc⁄°
 * ,

2943 
	`XGëEº‹Text
(

2944 #i‡
NìdFun˘i⁄PrŸŸy≥s


2945 
Di•œy
* ,

2952 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2953 #i‡
NìdFun˘i⁄PrŸŸy≥s


2954 
XF⁄tSåu˘
* ,

2955 
Atom
 ,

2960 
Sètus
 
	`XGëGCVÆues
(

2961 #i‡
NìdFun˘i⁄PrŸŸy≥s


2962 
Di•œy
* ,

2963 
GC
 ,

2965 
XGCVÆues
*

2969 
Sètus
 
	`XGëGeomëry
(

2970 #i‡
NìdFun˘i⁄PrŸŸy≥s


2971 
Di•œy
* ,

2972 
DøwabÀ
 ,

2973 
Wödow
* ,

2983 
Sètus
 
	`XGëIc⁄Name
(

2984 #i‡
NìdFun˘i⁄PrŸŸy≥s


2985 
Di•œy
* ,

2986 
Wödow
 ,

2991 
	`XGëI≈utFocus
(

2992 #i‡
NìdFun˘i⁄PrŸŸy≥s


2993 
Di•œy
* ,

2994 
Wödow
* ,

2999 
	`XGëKeybﬂrdC⁄åﬁ
(

3000 #i‡
NìdFun˘i⁄PrŸŸy≥s


3001 
Di•œy
* ,

3002 
XKeybﬂrdSèã
*

3006 
	`XGëPoöãrC⁄åﬁ
(

3007 #i‡
NìdFun˘i⁄PrŸŸy≥s


3008 
Di•œy
* ,

3015 
	`XGëPoöãrM≠pög
(

3016 #i‡
NìdFun˘i⁄PrŸŸy≥s


3017 
Di•œy
* ,

3023 
	`XGëS¸ìnSavî
(

3024 #i‡
NìdFun˘i⁄PrŸŸy≥s


3025 
Di•œy
* ,

3033 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

3034 #i‡
NìdFun˘i⁄PrŸŸy≥s


3035 
Di•œy
* ,

3036 
Wödow
 ,

3037 
Wödow
*

3041 
	`XGëWödowPr›îty
(

3042 #i‡
NìdFun˘i⁄PrŸŸy≥s


3043 
Di•œy
* ,

3044 
Wödow
 ,

3045 
Atom
 ,

3048 
Boﬁ
 ,

3049 
Atom
 ,

3050 
Atom
* ,

3058 
Sètus
 
	`XGëWödowAâribuãs
(

3059 #i‡
NìdFun˘i⁄PrŸŸy≥s


3060 
Di•œy
* ,

3061 
Wödow
 ,

3062 
XWödowAâribuãs
*

3066 
	`XGøbBuâ⁄
(

3067 #i‡
NìdFun˘i⁄PrŸŸy≥s


3068 
Di•œy
* ,

3071 
Wödow
 ,

3072 
Boﬁ
 ,

3076 
Wödow
 ,

3077 
Curs‹


3081 
	`XGøbKey
(

3082 #i‡
NìdFun˘i⁄PrŸŸy≥s


3083 
Di•œy
* ,

3086 
Wödow
 ,

3087 
Boﬁ
 ,

3093 
	`XGøbKeybﬂrd
(

3094 #i‡
NìdFun˘i⁄PrŸŸy≥s


3095 
Di•œy
* ,

3096 
Wödow
 ,

3097 
Boﬁ
 ,

3100 
Time


3104 
	`XGøbPoöãr
(

3105 #i‡
NìdFun˘i⁄PrŸŸy≥s


3106 
Di•œy
* ,

3107 
Wödow
 ,

3108 
Boﬁ
 ,

3112 
Wödow
 ,

3113 
Curs‹
 ,

3114 
Time


3118 
	`XGøbSîvî
(

3119 #i‡
NìdFun˘i⁄PrŸŸy≥s


3120 
Di•œy
*

3124 
	`XHeightMMOfS¸ìn
(

3125 #i‡
NìdFun˘i⁄PrŸŸy≥s


3126 
S¸ìn
*

3130 
	`XHeightOfS¸ìn
(

3131 #i‡
NìdFun˘i⁄PrŸŸy≥s


3132 
S¸ìn
*

3136 
	`XIfEvít
(

3137 #i‡
NìdFun˘i⁄PrŸŸy≥s


3138 
Di•œy
* ,

3139 
XEvít
* ,

3140 
	$Boﬁ
 (*) (

3141 #i‡
NìdNe°edPrŸŸy≥s


3142 
Di•œy
* ,

3143 
XEvít
* ,

3144 
XPoöãr


3147 
XPoöãr


3151 
	`XImageByãOrdî
(

3152 #i‡
NìdFun˘i⁄PrŸŸy≥s


3153 
Di•œy
*

3157 
	`XIn°ÆlCﬁ‹m≠
(

3158 #i‡
NìdFun˘i⁄PrŸŸy≥s


3159 
Di•œy
* ,

3160 
Cﬁ‹m≠


3164 
KeyCode
 
	`XKeysymToKeycode
(

3165 #i‡
NìdFun˘i⁄PrŸŸy≥s


3166 
Di•œy
* ,

3167 
KeySym


3171 
	`XKûlClõ¡
(

3172 #i‡
NìdFun˘i⁄PrŸŸy≥s


3173 
Di•œy
* ,

3174 
XID


3178 
Sètus
 
	`XLookupCﬁ‹
(

3179 #i‡
NìdFun˘i⁄PrŸŸy≥s


3180 
Di•œy
* ,

3181 
Cﬁ‹m≠
 ,

3182 
_Xc⁄°
 * ,

3183 
XCﬁ‹
* ,

3184 
XCﬁ‹
*

3188 
	`XLowîWödow
(

3189 #i‡
NìdFun˘i⁄PrŸŸy≥s


3190 
Di•œy
* ,

3191 
Wödow


3195 
	`XM≠Rai£d
(

3196 #i‡
NìdFun˘i⁄PrŸŸy≥s


3197 
Di•œy
* ,

3198 
Wödow


3202 
	`XM≠Subwödows
(

3203 #i‡
NìdFun˘i⁄PrŸŸy≥s


3204 
Di•œy
* ,

3205 
Wödow


3209 
	`XM≠Wödow
(

3210 #i‡
NìdFun˘i⁄PrŸŸy≥s


3211 
Di•œy
* ,

3212 
Wödow


3216 
	`XMaskEvít
(

3217 #i‡
NìdFun˘i⁄PrŸŸy≥s


3218 
Di•œy
* ,

3220 
XEvít
*

3224 
	`XMaxCm≠sOfS¸ìn
(

3225 #i‡
NìdFun˘i⁄PrŸŸy≥s


3226 
S¸ìn
*

3230 
	`XMöCm≠sOfS¸ìn
(

3231 #i‡
NìdFun˘i⁄PrŸŸy≥s


3232 
S¸ìn
*

3236 
	`XMoveResizeWödow
(

3237 #i‡
NìdFun˘i⁄PrŸŸy≥s


3238 
Di•œy
* ,

3239 
Wödow
 ,

3247 
	`XMoveWödow
(

3248 #i‡
NìdFun˘i⁄PrŸŸy≥s


3249 
Di•œy
* ,

3250 
Wödow
 ,

3256 
	`XNextEvít
(

3257 #i‡
NìdFun˘i⁄PrŸŸy≥s


3258 
Di•œy
* ,

3259 
XEvít
*

3263 
	`XNoOp
(

3264 #i‡
NìdFun˘i⁄PrŸŸy≥s


3265 
Di•œy
*

3269 
Sètus
 
	`XP¨£Cﬁ‹
(

3270 #i‡
NìdFun˘i⁄PrŸŸy≥s


3271 
Di•œy
* ,

3272 
Cﬁ‹m≠
 ,

3273 
_Xc⁄°
 * ,

3274 
XCﬁ‹
*

3278 
	`XP¨£Geomëry
(

3279 #i‡
NìdFun˘i⁄PrŸŸy≥s


3280 
_Xc⁄°
 * ,

3288 
	`XPìkEvít
(

3289 #i‡
NìdFun˘i⁄PrŸŸy≥s


3290 
Di•œy
* ,

3291 
XEvít
*

3295 
	`XPìkIfEvít
(

3296 #i‡
NìdFun˘i⁄PrŸŸy≥s


3297 
Di•œy
* ,

3298 
XEvít
* ,

3299 
	$Boﬁ
 (*) (

3300 #i‡
NìdNe°edPrŸŸy≥s


3301 
Di•œy
* ,

3302 
XEvít
* ,

3303 
XPoöãr


3306 
XPoöãr


3310 
	`XPídög
(

3311 #i‡
NìdFun˘i⁄PrŸŸy≥s


3312 
Di•œy
*

3316 
	`XPœ√sOfS¸ìn
(

3317 #i‡
NìdFun˘i⁄PrŸŸy≥s


3318 
S¸ìn
*

3323 
	`XPrŸocﬁRevisi⁄
(

3324 #i‡
NìdFun˘i⁄PrŸŸy≥s


3325 
Di•œy
*

3329 
	`XPrŸocﬁVîsi⁄
(

3330 #i‡
NìdFun˘i⁄PrŸŸy≥s


3331 
Di•œy
*

3336 
	`XPutBackEvít
(

3337 #i‡
NìdFun˘i⁄PrŸŸy≥s


3338 
Di•œy
* ,

3339 
XEvít
*

3343 
	`XPutImage
(

3344 #i‡
NìdFun˘i⁄PrŸŸy≥s


3345 
Di•œy
* ,

3346 
DøwabÀ
 ,

3347 
GC
 ,

3348 
XImage
* ,

3358 
	`XQLígth
(

3359 #i‡
NìdFun˘i⁄PrŸŸy≥s


3360 
Di•œy
*

3364 
Sètus
 
	`XQuîyBe°Curs‹
(

3365 #i‡
NìdFun˘i⁄PrŸŸy≥s


3366 
Di•œy
* ,

3367 
DøwabÀ
 ,

3375 
Sètus
 
	`XQuîyBe°Size
(

3376 #i‡
NìdFun˘i⁄PrŸŸy≥s


3377 
Di•œy
* ,

3379 
DøwabÀ
 ,

3387 
Sètus
 
	`XQuîyBe°Stù∂e
(

3388 #i‡
NìdFun˘i⁄PrŸŸy≥s


3389 
Di•œy
* ,

3390 
DøwabÀ
 ,

3398 
Sètus
 
	`XQuîyBe°Tûe
(

3399 #i‡
NìdFun˘i⁄PrŸŸy≥s


3400 
Di•œy
* ,

3401 
DøwabÀ
 ,

3409 
	`XQuîyCﬁ‹
(

3410 #i‡
NìdFun˘i⁄PrŸŸy≥s


3411 
Di•œy
* ,

3412 
Cﬁ‹m≠
 ,

3413 
XCﬁ‹
*

3417 
	`XQuîyCﬁ‹s
(

3418 #i‡
NìdFun˘i⁄PrŸŸy≥s


3419 
Di•œy
* ,

3420 
Cﬁ‹m≠
 ,

3421 
XCﬁ‹
* ,

3426 
Boﬁ
 
	`XQuîyExãnsi⁄
(

3427 #i‡
NìdFun˘i⁄PrŸŸy≥s


3428 
Di•œy
* ,

3429 
_Xc⁄°
 * ,

3436 
	`XQuîyKeym≠
(

3437 #i‡
NìdFun˘i⁄PrŸŸy≥s


3438 
Di•œy
* ,

3443 
Boﬁ
 
	`XQuîyPoöãr
(

3444 #i‡
NìdFun˘i⁄PrŸŸy≥s


3445 
Di•œy
* ,

3446 
Wödow
 ,

3447 
Wödow
* ,

3448 
Wödow
* ,

3457 
	`XQuîyTextExã¡s
(

3458 #i‡
NìdFun˘i⁄PrŸŸy≥s


3459 
Di•œy
* ,

3460 
XID
 ,

3461 
_Xc⁄°
 * ,

3466 
XCh¨Såu˘
*

3470 
	`XQuîyTextExã¡s16
(

3471 #i‡
NìdFun˘i⁄PrŸŸy≥s


3472 
Di•œy
* ,

3473 
XID
 ,

3474 
_Xc⁄°
 
XCh¨2b
* ,

3479 
XCh¨Såu˘
*

3483 
Sètus
 
	`XQuîyTªe
(

3484 #i‡
NìdFun˘i⁄PrŸŸy≥s


3485 
Di•œy
* ,

3486 
Wödow
 ,

3487 
Wödow
* ,

3488 
Wödow
* ,

3489 
Wödow
** ,

3494 
	`XRai£Wödow
(

3495 #i‡
NìdFun˘i⁄PrŸŸy≥s


3496 
Di•œy
* ,

3497 
Wödow


3501 
	`XRódBôm≠Fûe
(

3502 #i‡
NìdFun˘i⁄PrŸŸy≥s


3503 
Di•œy
* ,

3504 
DøwabÀ
 ,

3505 
_Xc⁄°
 * ,

3508 
Pixm≠
* ,

3514 
	`XRódBôm≠FûeD©a
(

3515 #i‡
NìdFun˘i⁄PrŸŸy≥s


3516 
_Xc⁄°
 * ,

3525 
	`XRebödKeysym
(

3526 #i‡
NìdFun˘i⁄PrŸŸy≥s


3527 
Di•œy
* ,

3528 
KeySym
 ,

3529 
KeySym
* ,

3531 
_Xc⁄°
 * ,

3536 
	`XRecﬁ‹Curs‹
(

3537 #i‡
NìdFun˘i⁄PrŸŸy≥s


3538 
Di•œy
* ,

3539 
Curs‹
 ,

3540 
XCﬁ‹
* ,

3541 
XCﬁ‹
*

3545 
	`XRe‰eshKeybﬂrdM≠pög
(

3546 #i‡
NìdFun˘i⁄PrŸŸy≥s


3547 
XM≠pögEvít
*

3551 
	`XRemoveFromSaveSë
(

3552 #i‡
NìdFun˘i⁄PrŸŸy≥s


3553 
Di•œy
* ,

3554 
Wödow


3558 
	`XRemoveHo°
(

3559 #i‡
NìdFun˘i⁄PrŸŸy≥s


3560 
Di•œy
* ,

3561 
XHo°Addªss
*

3565 
	`XRemoveHo°s
(

3566 #i‡
NìdFun˘i⁄PrŸŸy≥s


3567 
Di•œy
* ,

3568 
XHo°Addªss
* ,

3573 
	`XRï¨ítWödow
(

3574 #i‡
NìdFun˘i⁄PrŸŸy≥s


3575 
Di•œy
* ,

3576 
Wödow
 ,

3577 
Wödow
 ,

3583 
	`XRe£tS¸ìnSavî
(

3584 #i‡
NìdFun˘i⁄PrŸŸy≥s


3585 
Di•œy
*

3589 
	`XResizeWödow
(

3590 #i‡
NìdFun˘i⁄PrŸŸy≥s


3591 
Di•œy
* ,

3592 
Wödow
 ,

3598 
	`XRe°ackWödows
(

3599 #i‡
NìdFun˘i⁄PrŸŸy≥s


3600 
Di•œy
* ,

3601 
Wödow
* ,

3606 
	`XRŸ©eBuf„rs
(

3607 #i‡
NìdFun˘i⁄PrŸŸy≥s


3608 
Di•œy
* ,

3613 
	`XRŸ©eWödowPr›îtõs
(

3614 #i‡
NìdFun˘i⁄PrŸŸy≥s


3615 
Di•œy
* ,

3616 
Wödow
 ,

3617 
Atom
* ,

3623 
	`XS¸ìnCou¡
(

3624 #i‡
NìdFun˘i⁄PrŸŸy≥s


3625 
Di•œy
*

3629 
	`XSñe˘I≈ut
(

3630 #i‡
NìdFun˘i⁄PrŸŸy≥s


3631 
Di•œy
* ,

3632 
Wödow
 ,

3637 
Sètus
 
	`XSídEvít
(

3638 #i‡
NìdFun˘i⁄PrŸŸy≥s


3639 
Di•œy
* ,

3640 
Wödow
 ,

3641 
Boﬁ
 ,

3643 
XEvít
*

3647 
	`XSëAc˚ssC⁄åﬁ
(

3648 #i‡
NìdFun˘i⁄PrŸŸy≥s


3649 
Di•œy
* ,

3654 
	`XSëArcMode
(

3655 #i‡
NìdFun˘i⁄PrŸŸy≥s


3656 
Di•œy
* ,

3657 
GC
 ,

3662 
	`XSëBackground
(

3663 #i‡
NìdFun˘i⁄PrŸŸy≥s


3664 
Di•œy
* ,

3665 
GC
 ,

3670 
	`XSëClùMask
(

3671 #i‡
NìdFun˘i⁄PrŸŸy≥s


3672 
Di•œy
* ,

3673 
GC
 ,

3674 
Pixm≠


3678 
	`XSëClùOrigö
(

3679 #i‡
NìdFun˘i⁄PrŸŸy≥s


3680 
Di•œy
* ,

3681 
GC
 ,

3687 
	`XSëClùRe˘™gÀs
(

3688 #i‡
NìdFun˘i⁄PrŸŸy≥s


3689 
Di•œy
* ,

3690 
GC
 ,

3693 
XRe˘™gÀ
* ,

3699 
	`XSëClo£DownMode
(

3700 #i‡
NìdFun˘i⁄PrŸŸy≥s


3701 
Di•œy
* ,

3706 
	`XSëComm™d
(

3707 #i‡
NìdFun˘i⁄PrŸŸy≥s


3708 
Di•œy
* ,

3709 
Wödow
 ,

3715 
	`XSëDashes
(

3716 #i‡
NìdFun˘i⁄PrŸŸy≥s


3717 
Di•œy
* ,

3718 
GC
 ,

3720 
_Xc⁄°
 * ,

3725 
	`XSëFûlRuÀ
(

3726 #i‡
NìdFun˘i⁄PrŸŸy≥s


3727 
Di•œy
* ,

3728 
GC
 ,

3733 
	`XSëFûlStyÀ
(

3734 #i‡
NìdFun˘i⁄PrŸŸy≥s


3735 
Di•œy
* ,

3736 
GC
 ,

3741 
	`XSëF⁄t
(

3742 #i‡
NìdFun˘i⁄PrŸŸy≥s


3743 
Di•œy
* ,

3744 
GC
 ,

3745 
F⁄t


3749 
	`XSëF⁄tP©h
(

3750 #i‡
NìdFun˘i⁄PrŸŸy≥s


3751 
Di•œy
* ,

3757 
	`XSëF‹eground
(

3758 #i‡
NìdFun˘i⁄PrŸŸy≥s


3759 
Di•œy
* ,

3760 
GC
 ,

3765 
	`XSëFun˘i⁄
(

3766 #i‡
NìdFun˘i⁄PrŸŸy≥s


3767 
Di•œy
* ,

3768 
GC
 ,

3773 
	`XSëGøphicsExposuªs
(

3774 #i‡
NìdFun˘i⁄PrŸŸy≥s


3775 
Di•œy
* ,

3776 
GC
 ,

3777 
Boﬁ


3781 
	`XSëIc⁄Name
(

3782 #i‡
NìdFun˘i⁄PrŸŸy≥s


3783 
Di•œy
* ,

3784 
Wödow
 ,

3785 
_Xc⁄°
 *

3789 
	`XSëI≈utFocus
(

3790 #i‡
NìdFun˘i⁄PrŸŸy≥s


3791 
Di•œy
* ,

3792 
Wödow
 ,

3794 
Time


3798 
	`XSëLöeAâribuãs
(

3799 #i‡
NìdFun˘i⁄PrŸŸy≥s


3800 
Di•œy
* ,

3801 
GC
 ,

3809 
	`XSëModifõrM≠pög
(

3810 #i‡
NìdFun˘i⁄PrŸŸy≥s


3811 
Di•œy
* ,

3812 
XModifõrKeym≠
*

3816 
	`XSëPœ√Mask
(

3817 #i‡
NìdFun˘i⁄PrŸŸy≥s


3818 
Di•œy
* ,

3819 
GC
 ,

3824 
	`XSëPoöãrM≠pög
(

3825 #i‡
NìdFun˘i⁄PrŸŸy≥s


3826 
Di•œy
* ,

3827 
_Xc⁄°
 * ,

3832 
	`XSëS¸ìnSavî
(

3833 #i‡
NìdFun˘i⁄PrŸŸy≥s


3834 
Di•œy
* ,

3842 
	`XSëSñe˘i⁄Ow√r
(

3843 #i‡
NìdFun˘i⁄PrŸŸy≥s


3844 
Di•œy
* ,

3845 
Atom
 ,

3846 
Wödow
 ,

3847 
Time


3851 
	`XSëSèã
(

3852 #i‡
NìdFun˘i⁄PrŸŸy≥s


3853 
Di•œy
* ,

3854 
GC
 ,

3862 
	`XSëStù∂e
(

3863 #i‡
NìdFun˘i⁄PrŸŸy≥s


3864 
Di•œy
* ,

3865 
GC
 ,

3866 
Pixm≠


3870 
	`XSëSubwödowMode
(

3871 #i‡
NìdFun˘i⁄PrŸŸy≥s


3872 
Di•œy
* ,

3873 
GC
 ,

3878 
	`XSëTSOrigö
(

3879 #i‡
NìdFun˘i⁄PrŸŸy≥s


3880 
Di•œy
* ,

3881 
GC
 ,

3887 
	`XSëTûe
(

3888 #i‡
NìdFun˘i⁄PrŸŸy≥s


3889 
Di•œy
* ,

3890 
GC
 ,

3891 
Pixm≠


3895 
	`XSëWödowBackground
(

3896 #i‡
NìdFun˘i⁄PrŸŸy≥s


3897 
Di•œy
* ,

3898 
Wödow
 ,

3903 
	`XSëWödowBackgroundPixm≠
(

3904 #i‡
NìdFun˘i⁄PrŸŸy≥s


3905 
Di•œy
* ,

3906 
Wödow
 ,

3907 
Pixm≠


3911 
	`XSëWödowB‹dî
(

3912 #i‡
NìdFun˘i⁄PrŸŸy≥s


3913 
Di•œy
* ,

3914 
Wödow
 ,

3919 
	`XSëWödowB‹dîPixm≠
(

3920 #i‡
NìdFun˘i⁄PrŸŸy≥s


3921 
Di•œy
* ,

3922 
Wödow
 ,

3923 
Pixm≠


3927 
	`XSëWödowB‹dîWidth
(

3928 #i‡
NìdFun˘i⁄PrŸŸy≥s


3929 
Di•œy
* ,

3930 
Wödow
 ,

3935 
	`XSëWödowCﬁ‹m≠
(

3936 #i‡
NìdFun˘i⁄PrŸŸy≥s


3937 
Di•œy
* ,

3938 
Wödow
 ,

3939 
Cﬁ‹m≠


3943 
	`XSt‹eBuf„r
(

3944 #i‡
NìdFun˘i⁄PrŸŸy≥s


3945 
Di•œy
* ,

3946 
_Xc⁄°
 * ,

3952 
	`XSt‹eByãs
(

3953 #i‡
NìdFun˘i⁄PrŸŸy≥s


3954 
Di•œy
* ,

3955 
_Xc⁄°
 * ,

3960 
	`XSt‹eCﬁ‹
(

3961 #i‡
NìdFun˘i⁄PrŸŸy≥s


3962 
Di•œy
* ,

3963 
Cﬁ‹m≠
 ,

3964 
XCﬁ‹
*

3968 
	`XSt‹eCﬁ‹s
(

3969 #i‡
NìdFun˘i⁄PrŸŸy≥s


3970 
Di•œy
* ,

3971 
Cﬁ‹m≠
 ,

3972 
XCﬁ‹
* ,

3977 
	`XSt‹eName
(

3978 #i‡
NìdFun˘i⁄PrŸŸy≥s


3979 
Di•œy
* ,

3980 
Wödow
 ,

3981 
_Xc⁄°
 *

3985 
	`XSt‹eNamedCﬁ‹
(

3986 #i‡
NìdFun˘i⁄PrŸŸy≥s


3987 
Di•œy
* ,

3988 
Cﬁ‹m≠
 ,

3989 
_Xc⁄°
 * ,

3995 
	`XSync
(

3996 #i‡
NìdFun˘i⁄PrŸŸy≥s


3997 
Di•œy
* ,

3998 
Boﬁ


4002 
	`XTextExã¡s
(

4003 #i‡
NìdFun˘i⁄PrŸŸy≥s


4004 
XF⁄tSåu˘
* ,

4005 
_Xc⁄°
 * ,

4010 
XCh¨Såu˘
*

4014 
	`XTextExã¡s16
(

4015 #i‡
NìdFun˘i⁄PrŸŸy≥s


4016 
XF⁄tSåu˘
* ,

4017 
_Xc⁄°
 
XCh¨2b
* ,

4022 
XCh¨Såu˘
*

4026 
	`XTextWidth
(

4027 #i‡
NìdFun˘i⁄PrŸŸy≥s


4028 
XF⁄tSåu˘
* ,

4029 
_Xc⁄°
 * ,

4034 
	`XTextWidth16
(

4035 #i‡
NìdFun˘i⁄PrŸŸy≥s


4036 
XF⁄tSåu˘
* ,

4037 
_Xc⁄°
 
XCh¨2b
* ,

4042 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

4043 #i‡
NìdFun˘i⁄PrŸŸy≥s


4044 
Di•œy
* ,

4045 
Wödow
 ,

4046 
Wödow
 ,

4051 
Wödow
*

4055 
	`XUndeföeCurs‹
(

4056 #i‡
NìdFun˘i⁄PrŸŸy≥s


4057 
Di•œy
* ,

4058 
Wödow


4062 
	`XUngøbBuâ⁄
(

4063 #i‡
NìdFun˘i⁄PrŸŸy≥s


4064 
Di•œy
* ,

4067 
Wödow


4071 
	`XUngøbKey
(

4072 #i‡
NìdFun˘i⁄PrŸŸy≥s


4073 
Di•œy
* ,

4076 
Wödow


4080 
	`XUngøbKeybﬂrd
(

4081 #i‡
NìdFun˘i⁄PrŸŸy≥s


4082 
Di•œy
* ,

4083 
Time


4087 
	`XUngøbPoöãr
(

4088 #i‡
NìdFun˘i⁄PrŸŸy≥s


4089 
Di•œy
* ,

4090 
Time


4094 
	`XUngøbSîvî
(

4095 #i‡
NìdFun˘i⁄PrŸŸy≥s


4096 
Di•œy
*

4100 
	`XUnö°ÆlCﬁ‹m≠
(

4101 #i‡
NìdFun˘i⁄PrŸŸy≥s


4102 
Di•œy
* ,

4103 
Cﬁ‹m≠


4107 
	`XU∆ﬂdF⁄t
(

4108 #i‡
NìdFun˘i⁄PrŸŸy≥s


4109 
Di•œy
* ,

4110 
F⁄t


4114 
	`XUnm≠Subwödows
(

4115 #i‡
NìdFun˘i⁄PrŸŸy≥s


4116 
Di•œy
* ,

4117 
Wödow


4121 
	`XUnm≠Wödow
(

4122 #i‡
NìdFun˘i⁄PrŸŸy≥s


4123 
Di•œy
* ,

4124 
Wödow


4128 
	`XVíd‹Rñó£
(

4129 #i‡
NìdFun˘i⁄PrŸŸy≥s


4130 
Di•œy
*

4134 
	`XW¨pPoöãr
(

4135 #i‡
NìdFun˘i⁄PrŸŸy≥s


4136 
Di•œy
* ,

4137 
Wödow
 ,

4138 
Wödow
 ,

4148 
	`XWidthMMOfS¸ìn
(

4149 #i‡
NìdFun˘i⁄PrŸŸy≥s


4150 
S¸ìn
*

4154 
	`XWidthOfS¸ìn
(

4155 #i‡
NìdFun˘i⁄PrŸŸy≥s


4156 
S¸ìn
*

4160 
	`XWödowEvít
(

4161 #i‡
NìdFun˘i⁄PrŸŸy≥s


4162 
Di•œy
* ,

4163 
Wödow
 ,

4165 
XEvít
*

4169 
	`XWrôeBôm≠Fûe
(

4170 #i‡
NìdFun˘i⁄PrŸŸy≥s


4171 
Di•œy
* ,

4172 
_Xc⁄°
 * ,

4173 
Pixm≠
 ,

4181 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
(

4182 #i‡
NìdFun˘i⁄PrŸŸy≥s


4187 *
	`XSëLoˇÀModifõrs
(

4188 #i‡
NìdFun˘i⁄PrŸŸy≥s


4189 
_Xc⁄°
 *

4193 
XOM
 
	`XO≥nOM
(

4194 #i‡
NìdFun˘i⁄PrŸŸy≥s


4195 
Di•œy
* ,

4196 
_XrmHashBuckëRec
* ,

4197 
_Xc⁄°
 * ,

4198 
_Xc⁄°
 *

4202 
Sètus
 
	`XClo£OM
(

4203 #i‡
NìdFun˘i⁄PrŸŸy≥s


4204 
XOM


4208 *
	`XSëOMVÆues
(

4209 #i‡
NìdV¨¨gsPrŸŸy≥s


4210 
XOM
 ,

4215 *
	`XGëOMVÆues
(

4216 #i‡
NìdV¨¨gsPrŸŸy≥s


4217 
XOM
 ,

4222 
Di•œy
 *
	`XDi•œyOfOM
(

4223 #i‡
NìdFun˘i⁄PrŸŸy≥s


4224 
XOM


4228 *
	`XLoˇÀOfOM
(

4229 #i‡
NìdFun˘i⁄PrŸŸy≥s


4230 
XOM


4234 
XOC
 
	`XCª©eOC
(

4235 #i‡
NìdV¨¨gsPrŸŸy≥s


4236 
XOM
 ,

4241 
	`XDe°royOC
(

4242 #i‡
NìdFun˘i⁄PrŸŸy≥s


4243 
XOC


4247 
XOM
 
	`XOMOfOC
(

4248 #i‡
NìdFun˘i⁄PrŸŸy≥s


4249 
XOC


4253 *
	`XSëOCVÆues
(

4254 #i‡
NìdV¨¨gsPrŸŸy≥s


4255 
XOC
 ,

4260 *
	`XGëOCVÆues
(

4261 #i‡
NìdV¨¨gsPrŸŸy≥s


4262 
XOC
 ,

4267 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

4268 #i‡
NìdFun˘i⁄PrŸŸy≥s


4269 
Di•œy
* ,

4270 
_Xc⁄°
 * ,

4277 
	`XFªeF⁄tSë
(

4278 #i‡
NìdFun˘i⁄PrŸŸy≥s


4279 
Di•œy
* ,

4280 
XF⁄tSë


4284 
	`XF⁄tsOfF⁄tSë
(

4285 #i‡
NìdFun˘i⁄PrŸŸy≥s


4286 
XF⁄tSë
 ,

4287 
XF⁄tSåu˘
*** ,

4292 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

4293 #i‡
NìdFun˘i⁄PrŸŸy≥s


4294 
XF⁄tSë


4298 *
	`XLoˇÀOfF⁄tSë
(

4299 #i‡
NìdFun˘i⁄PrŸŸy≥s


4300 
XF⁄tSë


4304 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

4305 #i‡
NìdFun˘i⁄PrŸŸy≥s


4306 
XF⁄tSë


4310 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

4311 #i‡
NìdFun˘i⁄PrŸŸy≥s


4312 
XF⁄tSë


4316 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

4317 #i‡
NìdFun˘i⁄PrŸŸy≥s


4318 
XF⁄tSë


4322 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

4323 #i‡
NìdFun˘i⁄PrŸŸy≥s


4324 
XF⁄tSë


4328 
	`XmbTextEsˇ≥mít
(

4329 #i‡
NìdFun˘i⁄PrŸŸy≥s


4330 
XF⁄tSë
 ,

4331 
_Xc⁄°
 * ,

4336 
	`XwcTextEsˇ≥mít
(

4337 #i‡
NìdFun˘i⁄PrŸŸy≥s


4338 
XF⁄tSë
 ,

4339 
_Xc⁄°
 
wch¨_t
* ,

4344 
	`XmbTextExã¡s
(

4345 #i‡
NìdFun˘i⁄PrŸŸy≥s


4346 
XF⁄tSë
 ,

4347 
_Xc⁄°
 * ,

4349 
XRe˘™gÀ
* ,

4350 
XRe˘™gÀ
*

4354 
	`XwcTextExã¡s
(

4355 #i‡
NìdFun˘i⁄PrŸŸy≥s


4356 
XF⁄tSë
 ,

4357 
_Xc⁄°
 
wch¨_t
* ,

4359 
XRe˘™gÀ
* ,

4360 
XRe˘™gÀ
*

4364 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

4365 #i‡
NìdFun˘i⁄PrŸŸy≥s


4366 
XF⁄tSë
 ,

4367 
_Xc⁄°
 * ,

4369 
XRe˘™gÀ
* ,

4370 
XRe˘™gÀ
* ,

4373 
XRe˘™gÀ
* ,

4374 
XRe˘™gÀ
*

4378 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

4379 #i‡
NìdFun˘i⁄PrŸŸy≥s


4380 
XF⁄tSë
 ,

4381 
_Xc⁄°
 
wch¨_t
* ,

4383 
XRe˘™gÀ
* ,

4384 
XRe˘™gÀ
* ,

4387 
XRe˘™gÀ
* ,

4388 
XRe˘™gÀ
*

4392 
	`XmbDøwText
(

4393 #i‡
NìdFun˘i⁄PrŸŸy≥s


4394 
Di•œy
* ,

4395 
DøwabÀ
 ,

4396 
GC
 ,

4399 
XmbTextIãm
* ,

4404 
	`XwcDøwText
(

4405 #i‡
NìdFun˘i⁄PrŸŸy≥s


4406 
Di•œy
* ,

4407 
DøwabÀ
 ,

4408 
GC
 ,

4411 
XwcTextIãm
* ,

4416 
	`XmbDøwSåög
(

4417 #i‡
NìdFun˘i⁄PrŸŸy≥s


4418 
Di•œy
* ,

4419 
DøwabÀ
 ,

4420 
XF⁄tSë
 ,

4421 
GC
 ,

4424 
_Xc⁄°
 * ,

4429 
	`XwcDøwSåög
(

4430 #i‡
NìdFun˘i⁄PrŸŸy≥s


4431 
Di•œy
* ,

4432 
DøwabÀ
 ,

4433 
XF⁄tSë
 ,

4434 
GC
 ,

4437 
_Xc⁄°
 
wch¨_t
* ,

4442 
	`XmbDøwImageSåög
(

4443 #i‡
NìdFun˘i⁄PrŸŸy≥s


4444 
Di•œy
* ,

4445 
DøwabÀ
 ,

4446 
XF⁄tSë
 ,

4447 
GC
 ,

4450 
_Xc⁄°
 * ,

4455 
	`XwcDøwImageSåög
(

4456 #i‡
NìdFun˘i⁄PrŸŸy≥s


4457 
Di•œy
* ,

4458 
DøwabÀ
 ,

4459 
XF⁄tSë
 ,

4460 
GC
 ,

4463 
_Xc⁄°
 
wch¨_t
* ,

4468 
XIM
 
	`XO≥nIM
(

4469 #i‡
NìdFun˘i⁄PrŸŸy≥s


4470 
Di•œy
* ,

4471 
_XrmHashBuckëRec
* ,

4477 
Sètus
 
	`XClo£IM
(

4478 #i‡
NìdFun˘i⁄PrŸŸy≥s


4479 
XIM


4483 *
	`XGëIMVÆues
(

4484 #i‡
NìdV¨¨gsPrŸŸy≥s


4485 
XIM
 , ...

4489 
Di•œy
 *
	`XDi•œyOfIM
(

4490 #i‡
NìdFun˘i⁄PrŸŸy≥s


4491 
XIM


4495 *
	`XLoˇÀOfIM
(

4496 #i‡
NìdFun˘i⁄PrŸŸy≥s


4497 
XIM


4501 
XIC
 
	`XCª©eIC
(

4502 #i‡
NìdV¨¨gsPrŸŸy≥s


4503 
XIM
 , ...

4507 
	`XDe°royIC
(

4508 #i‡
NìdFun˘i⁄PrŸŸy≥s


4509 
XIC


4513 
	`XSëICFocus
(

4514 #i‡
NìdFun˘i⁄PrŸŸy≥s


4515 
XIC


4519 
	`XUn£tICFocus
(

4520 #i‡
NìdFun˘i⁄PrŸŸy≥s


4521 
XIC


4525 
wch¨_t
 *
	`XwcRe£tIC
(

4526 #i‡
NìdFun˘i⁄PrŸŸy≥s


4527 
XIC


4531 *
	`XmbRe£tIC
(

4532 #i‡
NìdFun˘i⁄PrŸŸy≥s


4533 
XIC


4537 *
	`XSëICVÆues
(

4538 #i‡
NìdV¨¨gsPrŸŸy≥s


4539 
XIC
 , ...

4543 *
	`XGëICVÆues
(

4544 #i‡
NìdV¨¨gsPrŸŸy≥s


4545 
XIC
 , ...

4549 
XIM
 
	`XIMOfIC
(

4550 #i‡
NìdFun˘i⁄PrŸŸy≥s


4551 
XIC


4555 
Boﬁ
 
	`XFûãrEvít
(

4556 #i‡
NìdFun˘i⁄PrŸŸy≥s


4557 
XEvít
* ,

4558 
Wödow


4562 
	`XmbLookupSåög
(

4563 #i‡
NìdFun˘i⁄PrŸŸy≥s


4564 
XIC
 ,

4565 
XKeyPªs£dEvít
* ,

4568 
KeySym
* ,

4569 
Sètus
*

4573 
	`XwcLookupSåög
(

4574 #i‡
NìdFun˘i⁄PrŸŸy≥s


4575 
XIC
 ,

4576 
XKeyPªs£dEvít
* ,

4577 
wch¨_t
* ,

4579 
KeySym
* ,

4580 
Sètus
*

4584 
XVaNe°edLi°
 
	`XVaCª©eNe°edLi°
(

4585 #i‡
NìdV¨¨gsPrŸŸy≥s


4592 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

4593 #i‡
NìdFun˘i⁄PrŸŸy≥s


4594 
Di•œy
* ,

4595 
_XrmHashBuckëRec
* ,

4598 
XIMProc
 ,

4599 
XPoöãr
*

4603 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

4604 #i‡
NìdFun˘i⁄PrŸŸy≥s


4605 
Di•œy
* ,

4606 
_XrmHashBuckëRec
* ,

4609 
XIMProc
 ,

4610 
XPoöãr
*

4614 (*
	tXC⁄√˘i⁄W©chProc
)(

4615 #i‡
	tNìdFun˘i⁄PrŸŸy≥s


4616 
	tDi•œy
* ,

4617 
	tXPoöãr
 ,

4619 
	tBoﬁ
 ,

4620 
	tXPoöãr
*

4625 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

4626 #i‡
NìdFun˘i⁄PrŸŸy≥s


4627 
Di•œy
* ,

4633 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

4634 #i‡
NìdFun˘i⁄PrŸŸy≥s


4635 
Di•œy
* ,

4640 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

4641 #i‡
NìdFun˘i⁄PrŸŸy≥s


4642 
Di•œy
* ,

4643 
XC⁄√˘i⁄W©chProc
 ,

4644 
XPoöãr


4648 
	`XRemoveC⁄√˘i⁄W©ch
(

4649 #i‡
NìdFun˘i⁄PrŸŸy≥s


4650 
Di•œy
* ,

4651 
XC⁄√˘i⁄W©chProc
 ,

4652 
XPoöãr


4656 
_XFUNCPROTOEND


	@/usr/include/X11/Xos.h

35 #i‚de‡
_XOS_H_


36 
	#_XOS_H_


	)

38 
	~<X11/Xosdefs.h
>

44 #ifde‡
USG


45 #i‚de‡
__TYPES__


46 #ifde‡
CRAY


47 
	#w‹d
 
w‹d_t


	)

49 
	~<sys/ty≥s.h
>

50 
	#__TYPES__


	)

53 #i‡
deföed
(
_POSIX_SOURCE
Ë&& (deföed(
MOTOROLA
Ë|| deföed(
AMOEBA
))

54 #unde‡
_POSIX_SOURCE


55 
	~<sys/ty≥s.h
>

56 
	#_POSIX_SOURCE


	)

58 
	~<sys/ty≥s.h
>

62 #ifde‡
_SEQUENT_


67 
	~<√töë/ö_sy°m.h
>

68 
	~<sys/£À˘.h
>

84 #i‚de‡
X_NOT_STDC_ENV


86 
	~<°rög.h
>

87 #i‚de‡
__sgi


88 #i‚de‡
ödex


89 
	#ödex
 
°rchr


	)

91 #i‚de‡
rödex


92 
	#rödex
 
°ºchr


	)

95 
	~<°rögs.h
>

100 #ifde‡
SYSV


101 
	~<°rög.h
>

102 
	#ödex
 
°rchr


	)

103 
	#rödex
 
°ºchr


	)

105 
	~<°rögs.h
>

106 
	#°rchr
 
ödex


	)

107 
	#°ºchr
 
rödex


	)

115 #i‡
deföed
(
X_NOT_STDC_ENV
Ë|| (deföed(
sun
Ë&& !deföed(
SVR4
)Ë|| deföed(
macII
)

116 #i‚de‡
°ªº‹


117 *
sys_îæi°
[];

118 
sys_√º
;

119 
	#°ªº‹
(
n
) \

120 (((
n
Ë>0 && (nË< 
sys_√º
Ë? 
sys_îæi°
[n] : "unknow¿îr‹")

	)

127 #ifde‡
X_NOT_POSIX


128 
	~<f˙é.h
>

129 #i‡
deföed
(
USL
Ë|| deföed(
CRAY
Ë|| deföed(
MOTOROLA
Ë|| (deföed(
i386
Ë&& (deföed(
SYSV
Ë|| deföed(
SVR4
))Ë|| deföed(
__sxg__
)

130 
	~<uni°d.h
>

132 #ifde‡
WIN32


133 
	~<X11/Xw32defs.h
>

135 
	~<sys/fûe.h
>

138 #i‡!
deföed
(
_POSIX_SOURCE
Ë&& deföed(
macII
)

139 
	#_POSIX_SOURCE


	)

140 
	~<f˙é.h
>

141 
	~<uni°d.h
>

142 #unde‡
_POSIX_SOURCE


144 
	~<f˙é.h
>

145 
	~<uni°d.h
>

153 #i‡
deföed
(
SYSV
Ë&& !deföed(
_SEQUENT_
)

155 #i‚de‡
USL


156 
	~<sys/time.h
>

158 
	~<time.h
>

159 #ifde‡
CRAY


160 #unde‡
w‹d


162 #i‡
deföed
(
USG
Ë&& !deföed(
CRAY
Ë&& !deföed(
MOTOROLA
Ë&& !deföed(
uniosu
Ë&& !deföed(
__sxg__
)

163 
	stimevÆ
 {

164 
	mtv_£c
;

165 
	mtv_u£c
;

167 #i‚de‡
USL_SHARELIB


168 
	stimez⁄e
 {

169 
	mtz_möuãswe°
;

170 
	mtz_d°time
;

175 #ifde‡
_SEQUENT_


176 
	stimez⁄e
 {

177 
	mtz_möuãswe°
;

178 
	mtz_d°time
;

184 #i‡
deföed
(
_POSIX_SOURCE
Ë&& deföed(
SVR4
)

186 #unde‡
_POSIX_SOURCE


187 
	~<sys/time.h
>

188 
	#_POSIX_SOURCE


	)

190 #ifde‡
WIN32


191 
	~<time.h
>

192 #i‡!
deföed
(
_WINSOCKAPI_
Ë&& !deföed(
_WILLWINSOCK_
)

193 
	stimevÆ
 {

194 
	mtv_£c
;

195 
	mtv_u£c
;

198 
	~<sys/timeb.h
>

199 
	#gëtimeofday
(
t
) \

201 
_timeb
 
_gtodtmp
; \

202 
	`_·ime
 (&
_gtodtmp
); \

203 (
t
)->
tv_£c
 = 
_gtodtmp
.
time
; \

204 (
t
)->
tv_u£c
 = 
_gtodtmp
.
mûlôm
 * 1000; \

205 }

	)

207 #ifde‡
_SEQUENT_


208 
	~<time.h
>

210 
	~<sys/time.h
>

217 #i‡
deföed
(
_XOPEN_XPG4
Ë|| deföed(
_XOPEN_UNIX
)

218 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—, (
timez⁄e
*)0)

	)

220 #i‡
deföed
(
SVR4
Ë|| deföed(
VMS
Ë|| deföed(
WIN32
)

221 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—)

	)

223 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—, (
timez⁄e
*)0)

	)

228 #i‡
deföed
(
X_NOT_POSIX
Ë&& deföed(
SYSV
Ë&& !deföed(
SIGCHLD
)

229 
	#SIGCHLD
 
SIGCLD


	)

232 #ifde‡
ISC


233 
	~<sys/bsdty≥s.h
>

	@/usr/include/X11/Xresource.h

50 #i‚de‡
_XRESOURCE_H_


51 
	#_XRESOURCE_H_


	)

55 
	~<X11/Xlib.h
>

67 
_XFUNCPROTOBEGIN


75 *
X≥rmÆloc
(

76 #i‡
NìdFun˘i⁄PrŸŸy≥s


87 
	tXrmQu¨k
, *
	tXrmQu¨kLi°
;

88 
	#NULLQUARK
 ((
XrmQu¨k
Ë0)

	)

90 *
	tXrmSåög
;

91 
	#NULLSTRING
 ((
XrmSåög
Ë0)

	)

94 
XrmQu¨k
 
XrmSåögToQu¨k
(

95 #i‡
NìdFun˘i⁄PrŸŸy≥s


96 
_Xc⁄°
 *

100 
XrmQu¨k
 
XrmPîmSåögToQu¨k
(

101 #i‡
NìdFun˘i⁄PrŸŸy≥s


102 
_Xc⁄°
 *

107 
XrmSåög
 
XrmQu¨kToSåög
(

108 #i‡
NìdFun˘i⁄PrŸŸy≥s


109 
XrmQu¨k


113 
XrmQu¨k
 
XrmUniqueQu¨k
(

114 #i‡
NìdFun˘i⁄PrŸŸy≥s


119 
	#XrmSåögsEquÆ
(
a1
, 
a2
Ë(
	`°rcmp
◊1,á2Ë=0)

	)

128 íum {
	mXrmBödTighéy
, 
	mXrmBödLoo£ly
} 
	tXrmBödög
, *
	tXrmBödögLi°
;

130 
XrmSåögToQu¨kLi°
(

131 #i‡
NìdFun˘i⁄PrŸŸy≥s


132 
_Xc⁄°
 * ,

133 
XrmQu¨kLi°


137 
XrmSåögToBödögQu¨kLi°
(

138 #i‡
NìdFun˘i⁄PrŸŸy≥s


139 
_Xc⁄°
 * ,

140 
XrmBödögLi°
 ,

141 
XrmQu¨kLi°


151 
XrmQu¨k
 
	tXrmName
;

152 
XrmQu¨kLi°
 
	tXrmNameLi°
;

153 
	#XrmNameToSåög
(
«me
Ë
	`XrmQu¨kToSåög
“ame)

	)

154 
	#XrmSåögToName
(
°rög
Ë
	`XrmSåögToQu¨k
(°rög)

	)

155 
	#XrmSåögToNameLi°
(
°r
, 
«me
Ë
	`XrmSåögToQu¨kLi°
(°r,Çame)

	)

157 
XrmQu¨k
 
	tXrmCœss
;

158 
XrmQu¨kLi°
 
	tXrmCœssLi°
;

159 
	#XrmCœssToSåög
(
c_˛ass
Ë
	`XrmQu¨kToSåög
(c_˛ass)

	)

160 
	#XrmSåögToCœss
(
c_˛ass
Ë
	`XrmSåögToQu¨k
(c_˛ass)

	)

161 
	#XrmSåögToCœssLi°
(
°r
,
c_˛ass
Ë
	`XrmSåögToQu¨kLi°
(°r, c_˛ass)

	)

171 
XrmQu¨k
 
	tXrmRïª£¡©i⁄
;

172 
	#XrmSåögToRïª£¡©i⁄
(
°rög
Ë
	`XrmSåögToQu¨k
(°rög)

	)

173 
	#XrmRïª£¡©i⁄ToSåög
(
ty≥
Ë
	`XrmQu¨kToSåög
—y≥)

	)

176 
	msize
;

177 
XPoöãr
 
	maddr
;

178 } 
	tXrmVÆue
, *
	tXrmVÆuePå
;

187 
_XrmHashBuckëRec
 *
	tXrmHashBuckë
;

188 
XrmHashBuckë
 *
	tXrmHashTabÀ
;

189 
XrmHashTabÀ
 
	tXrmSórchLi°
[];

190 
_XrmHashBuckëRec
 *
	tXrmD©aba£
;

193 
XrmDe°royD©aba£
(

194 #i‡
NìdFun˘i⁄PrŸŸy≥s


195 
XrmD©aba£


199 
XrmQPutResour˚
(

200 #i‡
NìdFun˘i⁄PrŸŸy≥s


201 
XrmD©aba£
* ,

202 
XrmBödögLi°
 ,

203 
XrmQu¨kLi°
 ,

204 
XrmRïª£¡©i⁄
 ,

205 
XrmVÆue
*

209 
XrmPutResour˚
(

210 #i‡
NìdFun˘i⁄PrŸŸy≥s


211 
XrmD©aba£
* ,

212 
_Xc⁄°
 * ,

213 
_Xc⁄°
 * ,

214 
XrmVÆue
*

218 
XrmQPutSåögResour˚
(

219 #i‡
NìdFun˘i⁄PrŸŸy≥s


220 
XrmD©aba£
* ,

221 
XrmBödögLi°
 ,

222 
XrmQu¨kLi°
 ,

223 
_Xc⁄°
 *

227 
XrmPutSåögResour˚
(

228 #i‡
NìdFun˘i⁄PrŸŸy≥s


229 
XrmD©aba£
* ,

230 
_Xc⁄°
 * ,

231 
_Xc⁄°
 *

235 
XrmPutLöeResour˚
(

236 #i‡
NìdFun˘i⁄PrŸŸy≥s


237 
XrmD©aba£
* ,

238 
_Xc⁄°
 *

242 
Boﬁ
 
XrmQGëResour˚
(

243 #i‡
NìdFun˘i⁄PrŸŸy≥s


244 
XrmD©aba£
 ,

245 
XrmNameLi°
 ,

246 
XrmCœssLi°
 ,

247 
XrmRïª£¡©i⁄
* ,

248 
XrmVÆue
*

252 
Boﬁ
 
XrmGëResour˚
(

253 #i‡
NìdFun˘i⁄PrŸŸy≥s


254 
XrmD©aba£
 ,

255 
_Xc⁄°
 * ,

256 
_Xc⁄°
 * ,

258 
XrmVÆue
*

262 
Boﬁ
 
XrmQGëSórchLi°
(

263 #i‡
NìdFun˘i⁄PrŸŸy≥s


264 
XrmD©aba£
 ,

265 
XrmNameLi°
 ,

266 
XrmCœssLi°
 ,

267 
XrmSórchLi°
 ,

272 
Boﬁ
 
XrmQGëSórchResour˚
(

273 #i‡
NìdFun˘i⁄PrŸŸy≥s


274 
XrmSórchLi°
 ,

275 
XrmName
 ,

276 
XrmCœss
 ,

277 
XrmRïª£¡©i⁄
* ,

278 
XrmVÆue
*

288 
XrmSëD©aba£
(

289 #i‡
NìdFun˘i⁄PrŸŸy≥s


290 
Di•œy
* ,

291 
XrmD©aba£


295 
XrmD©aba£
 
XrmGëD©aba£
(

296 #i‡
NìdFun˘i⁄PrŸŸy≥s


297 
Di•œy
*

301 
XrmD©aba£
 
XrmGëFûeD©aba£
(

302 #i‡
NìdFun˘i⁄PrŸŸy≥s


303 
_Xc⁄°
 *

307 
Sètus
 
XrmComböeFûeD©aba£
(

308 #i‡
NìdFun˘i⁄PrŸŸy≥s


309 
_Xc⁄°
 * ,

310 
XrmD©aba£
* ,

311 
Boﬁ


315 
XrmD©aba£
 
XrmGëSåögD©aba£
(

316 #i‡
NìdFun˘i⁄PrŸŸy≥s


317 
_Xc⁄°
 *

321 
XrmPutFûeD©aba£
(

322 #i‡
NìdFun˘i⁄PrŸŸy≥s


323 
XrmD©aba£
 ,

324 
_Xc⁄°
 *

328 
XrmMîgeD©aba£s
(

329 #i‡
NìdFun˘i⁄PrŸŸy≥s


330 
XrmD©aba£
 ,

331 
XrmD©aba£
*

335 
XrmComböeD©aba£
(

336 #i‡
NìdFun˘i⁄PrŸŸy≥s


337 
XrmD©aba£
 ,

338 
XrmD©aba£
* ,

339 
Boﬁ


343 
	#XrmEnumAŒLevñs
 0

	)

344 
	#XrmEnumO√Levñ
 1

	)

346 
Boﬁ
 
XrmEnumî©eD©aba£
(

347 #i‡
NìdFun˘i⁄PrŸŸy≥s


348 
XrmD©aba£
 ,

349 
XrmNameLi°
 ,

350 
XrmCœssLi°
 ,

352 
	$Boﬁ
 (*)(

353 #i‡
NìdNe°edPrŸŸy≥s


354 
XrmD©aba£
* ,

355 
XrmBödögLi°
 ,

356 
XrmQu¨kLi°
 ,

357 
XrmRïª£¡©i⁄
* ,

358 
XrmVÆue
* ,

359 
XPoöãr


362 
XPoöãr


366 *
	`XrmLoˇÀOfD©aba£
(

367 #i‡
NìdFun˘i⁄PrŸŸy≥s


368 
XrmD©aba£


380 
Xrm›ti⁄NoArg
,

381 
Xrm›ti⁄IsArg
,

382 
Xrm›ti⁄StickyArg
,

383 
Xrm›ti⁄SïArg
,

384 
Xrm›ti⁄ResArg
,

385 
Xrm›ti⁄SkùArg
,

386 
Xrm›ti⁄SkùLöe
,

387 
Xrm›ti⁄SkùNArgs


389 } 
	tXrmO±i⁄Köd
;

392 *
›ti⁄
;

393 *
•ecifõr
;

394 
XrmO±i⁄Köd
 
¨gKöd
;

395 
XPoöãr
 
vÆue
;

396 } 
	tXrmO±i⁄DescRec
, *
	tXrmO±i⁄DescLi°
;

399 
	`XrmP¨£Comm™d
(

400 #i‡
NìdFun˘i⁄PrŸŸy≥s


401 
XrmD©aba£
* ,

402 
XrmO±i⁄DescLi°
 ,

404 
_Xc⁄°
 * ,

410 #ifde‡
FAST_QUARKS


413 c⁄° *
	`_XQ°rög
(const *);

415 
	`_XQ°rcmp
(const *,const *);

418 
_XFUNCPROTOEND


	@/usr/include/X11/Xutil.h

50 #i‚de‡
_XUTIL_H_


51 
	#_XUTIL_H_


	)

54 
	~<X11/Xlib.h
>

60 
	#NoVÆue
 0x0000

	)

61 
	#XVÆue
 0x0001

	)

62 
	#YVÆue
 0x0002

	)

63 
	#WidthVÆue
 0x0004

	)

64 
	#HeightVÆue
 0x0008

	)

65 
	#AŒVÆues
 0x000F

	)

66 
	#XNeg©ive
 0x0010

	)

67 
	#YNeg©ive
 0x0020

	)

74 
	mÊags
;

75 
	mx
, 
	my
;

76 
	mwidth
, 
	mheight
;

77 
	mmö_width
, 
	mmö_height
;

78 
	mmax_width
, 
	mmax_height
;

79 
	mwidth_öc
, 
	mheight_öc
;

81 
	mx
;

82 
	my
;

83 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

84 
	mba£_width
, 
	mba£_height
;

85 
	mwö_gøvôy
;

86 } 
	tXSizeHöts
;

94 
	#USPosôi⁄
 (1L << 0Ë

	)

95 
	#USSize
 (1L << 1Ë

	)

97 
	#PPosôi⁄
 (1L << 2Ë

	)

98 
	#PSize
 (1L << 3Ë

	)

99 
	#PMöSize
 (1L << 4Ë

	)

100 
	#PMaxSize
 (1L << 5Ë

	)

101 
	#PResizeInc
 (1L << 6Ë

	)

102 
	#PA•e˘
 (1L << 7Ë

	)

103 
	#PBa£Size
 (1L << 8Ë

	)

104 
	#PWöGøvôy
 (1L << 9Ë

	)

107 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

112 
	mÊags
;

113 
Boﬁ
 
	möput
;

115 
	möôül_°©e
;

116 
Pixm≠
 
	mic⁄_pixm≠
;

117 
Wödow
 
	mic⁄_wödow
;

118 
	mic⁄_x
, 
	mic⁄_y
;

119 
Pixm≠
 
	mic⁄_mask
;

120 
XID
 
	mwödow_group
;

122 } 
	tXWMHöts
;

126 
	#I≈utHöt
 (1L << 0)

	)

127 
	#SèãHöt
 (1L << 1)

	)

128 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

129 
	#Ic⁄WödowHöt
 (1L << 3)

	)

130 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

131 
	#Ic⁄MaskHöt
 (1L << 5)

	)

132 
	#WödowGroupHöt
 (1L << 6)

	)

133 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

134 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

135 
	#XUrgícyHöt
 (1L << 8)

	)

138 
	#WôhdøwnSèã
 0

	)

139 
	#N‹mÆSèã
 1

	)

140 
	#Ic⁄icSèã
 3

	)

145 
	#D⁄tC¨eSèã
 0

	)

146 
	#ZoomSèã
 2

	)

147 
	#I«˘iveSèã
 4

	)

156 *
	mvÆue
;

157 
Atom
 
	mícodög
;

158 
	mf‹m©
;

159 
	mnôems
;

160 } 
	tXTextPr›îty
;

162 
	#XNoMem‹y
 -1

	)

163 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

164 
	#XC⁄vîãrNŸFound
 -3

	)

167 
	mXSåögStyÀ
,

168 
	mXCompoundTextStyÀ
,

169 
	mXTextStyÀ
,

170 
	mXStdICCTextStyÀ


171 } 
	tXICCEncodögStyÀ
;

174 
	mmö_width
, 
	mmö_height
;

175 
	mmax_width
, 
	mmax_height
;

176 
	mwidth_öc
, 
	mheight_öc
;

177 } 
	tXIc⁄Size
;

180 *
	mªs_«me
;

181 *
	mªs_˛ass
;

182 } 
	tXCœssHöt
;

188 
	#XDe°royImage
(
ximage
) \

189 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

190 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

191 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

192 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

193 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

194 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

195 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

196 
	#XAddPixñ
(
ximage
, 
vÆue
) \

197 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

202 
	s_XCompo£Sètus
 {

203 
XPoöãr
 
	mcompo£_±r
;

204 
	mch¨s_m©ched
;

205 } 
	tXCompo£Sètus
;

210 
	#IsKey∑dKey
(
keysym
) \

211 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

213 
	#IsPriv©eKey∑dKey
(
keysym
) \

214 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

216 
	#IsCurs‹Key
(
keysym
) \

217 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

219 
	#IsPFKey
(
keysym
) \

220 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

222 
	#IsFun˘i⁄Key
(
keysym
) \

223 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

225 
	#IsMiscFun˘i⁄Key
(
keysym
) \

226 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

228 
	#IsModifõrKey
(
keysym
) \

229 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

230 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

231 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

235 
_XRegi⁄
 *
	tRegi⁄
;

239 
	#Re˘™gÀOut
 0

	)

240 
	#Re˘™gÀIn
 1

	)

241 
	#Re˘™gÀP¨t
 2

	)

250 
VisuÆ
 *
	mvisuÆ
;

251 
VisuÆID
 
	mvisuÆid
;

252 
	ms¸ìn
;

253 
	mdïth
;

254 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

255 
	mc_˛ass
;

257 
	m˛ass
;

259 
	mªd_mask
;

260 
	mgªí_mask
;

261 
	mblue_mask
;

262 
	mcﬁ‹m≠_size
;

263 
	mbôs_≥r_rgb
;

264 } 
	tXVisuÆInfo
;

266 
	#VisuÆNoMask
 0x0

	)

267 
	#VisuÆIDMask
 0x1

	)

268 
	#VisuÆS¸ìnMask
 0x2

	)

269 
	#VisuÆDïthMask
 0x4

	)

270 
	#VisuÆCœssMask
 0x8

	)

271 
	#VisuÆRedMaskMask
 0x10

	)

272 
	#VisuÆGªíMaskMask
 0x20

	)

273 
	#VisuÆBlueMaskMask
 0x40

	)

274 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

275 
	#VisuÆBôsPîRGBMask
 0x100

	)

276 
	#VisuÆAŒMask
 0x1FF

	)

283 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

284 
	mªd_max
;

285 
	mªd_mu…
;

286 
	mgªí_max
;

287 
	mgªí_mu…
;

288 
	mblue_max
;

289 
	mblue_mu…
;

290 
	mba£_pixñ
;

291 
VisuÆID
 
	mvisuÆid
;

292 
XID
 
	mkûlid
;

293 } 
	tXSènd¨dCﬁ‹m≠
;

295 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

301 
	#Bôm≠Suc˚ss
 0

	)

302 
	#Bôm≠O≥nFaûed
 1

	)

303 
	#Bôm≠FûeInvÆid
 2

	)

304 
	#Bôm≠NoMem‹y
 3

	)

315 
	#XCSUCCESS
 0

	)

316 
	#XCNOMEM
 1

	)

317 
	#XCNOENT
 2

	)

319 
	tXC⁄ãxt
;

321 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

322 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

324 
_XFUNCPROTOBEGIN


328 
XCœssHöt
 *
XAŒocCœssHöt
 (

329 #i‡
NìdFun˘i⁄PrŸŸy≥s


334 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

335 #i‡
NìdFun˘i⁄PrŸŸy≥s


340 
XSizeHöts
 *
XAŒocSizeHöts
 (

341 #i‡
NìdFun˘i⁄PrŸŸy≥s


346 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

347 #i‡
NìdFun˘i⁄PrŸŸy≥s


352 
XWMHöts
 *
XAŒocWMHöts
 (

353 #i‡
NìdFun˘i⁄PrŸŸy≥s


358 
XClùBox
(

359 #i‡
NìdFun˘i⁄PrŸŸy≥s


360 
Regi⁄
 ,

361 
XRe˘™gÀ
*

365 
Regi⁄
 
XCª©eRegi⁄
(

366 #i‡
NìdFun˘i⁄PrŸŸy≥s


371 *
XDeÁu…Såög
(

372 #i‡
NìdFun˘i⁄PrŸŸy≥s


377 
XDñëeC⁄ãxt
(

378 #i‡
NìdFun˘i⁄PrŸŸy≥s


379 
Di•œy
* ,

380 
XID
 ,

381 
XC⁄ãxt


385 
XDe°royRegi⁄
(

386 #i‡
NìdFun˘i⁄PrŸŸy≥s


387 
Regi⁄


391 
XEm±yRegi⁄
(

392 #i‡
NìdFun˘i⁄PrŸŸy≥s


393 
Regi⁄


397 
XEquÆRegi⁄
(

398 #i‡
NìdFun˘i⁄PrŸŸy≥s


399 
Regi⁄
 ,

400 
Regi⁄


404 
XFödC⁄ãxt
(

405 #i‡
NìdFun˘i⁄PrŸŸy≥s


406 
Di•œy
* ,

407 
XID
 ,

408 
XC⁄ãxt
 ,

409 
XPoöãr
*

413 
Sètus
 
XGëCœssHöt
(

414 #i‡
NìdFun˘i⁄PrŸŸy≥s


415 
Di•œy
* ,

416 
Wödow
 ,

417 
XCœssHöt
*

421 
Sètus
 
XGëIc⁄Sizes
(

422 #i‡
NìdFun˘i⁄PrŸŸy≥s


423 
Di•œy
* ,

424 
Wödow
 ,

425 
XIc⁄Size
** ,

430 
Sètus
 
XGëN‹mÆHöts
(

431 #i‡
NìdFun˘i⁄PrŸŸy≥s


432 
Di•œy
* ,

433 
Wödow
 ,

434 
XSizeHöts
*

438 
Sètus
 
XGëRGBCﬁ‹m≠s
(

439 #i‡
NìdFun˘i⁄PrŸŸy≥s


440 
Di•œy
* ,

441 
Wödow
 ,

442 
XSènd¨dCﬁ‹m≠
** ,

444 
Atom


448 
Sètus
 
XGëSizeHöts
(

449 #i‡
NìdFun˘i⁄PrŸŸy≥s


450 
Di•œy
* ,

451 
Wödow
 ,

452 
XSizeHöts
* ,

453 
Atom


457 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

458 #i‡
NìdFun˘i⁄PrŸŸy≥s


459 
Di•œy
* ,

460 
Wödow
 ,

461 
XSènd¨dCﬁ‹m≠
* ,

462 
Atom


466 
Sètus
 
XGëTextPr›îty
(

467 #i‡
NìdFun˘i⁄PrŸŸy≥s


468 
Di•œy
* ,

469 
Wödow
 ,

470 
XTextPr›îty
* ,

471 
Atom


475 
XVisuÆInfo
 *
XGëVisuÆInfo
(

476 #i‡
NìdFun˘i⁄PrŸŸy≥s


477 
Di•œy
* ,

479 
XVisuÆInfo
* ,

484 
Sètus
 
XGëWMClõ¡Machöe
(

485 #i‡
NìdFun˘i⁄PrŸŸy≥s


486 
Di•œy
* ,

487 
Wödow
 ,

488 
XTextPr›îty
*

492 
XWMHöts
 *
XGëWMHöts
(

493 #i‡
NìdFun˘i⁄PrŸŸy≥s


494 
Di•œy
* ,

495 
Wödow


499 
Sètus
 
XGëWMIc⁄Name
(

500 #i‡
NìdFun˘i⁄PrŸŸy≥s


501 
Di•œy
* ,

502 
Wödow
 ,

503 
XTextPr›îty
*

507 
Sètus
 
XGëWMName
(

508 #i‡
NìdFun˘i⁄PrŸŸy≥s


509 
Di•œy
* ,

510 
Wödow
 ,

511 
XTextPr›îty
*

515 
Sètus
 
XGëWMN‹mÆHöts
(

516 #i‡
NìdFun˘i⁄PrŸŸy≥s


517 
Di•œy
* ,

518 
Wödow
 ,

519 
XSizeHöts
* ,

524 
Sètus
 
XGëWMSizeHöts
(

525 #i‡
NìdFun˘i⁄PrŸŸy≥s


526 
Di•œy
* ,

527 
Wödow
 ,

528 
XSizeHöts
* ,

530 
Atom


534 
Sètus
 
XGëZoomHöts
(

535 #i‡
NìdFun˘i⁄PrŸŸy≥s


536 
Di•œy
* ,

537 
Wödow
 ,

538 
XSizeHöts
*

542 
XI¡î£˘Regi⁄
(

543 #i‡
NìdFun˘i⁄PrŸŸy≥s


544 
Regi⁄
 ,

545 
Regi⁄
 ,

546 
Regi⁄


550 
XC⁄vîtCa£
(

551 #i‡
NìdFun˘i⁄PrŸŸy≥s


552 
KeySym
 ,

553 
KeySym
* ,

554 
KeySym
*

558 
XLookupSåög
(

559 #i‡
NìdFun˘i⁄PrŸŸy≥s


560 
XKeyEvít
* ,

563 
KeySym
* ,

564 
XCompo£Sètus
*

568 
Sètus
 
XM©chVisuÆInfo
(

569 #i‡
NìdFun˘i⁄PrŸŸy≥s


570 
Di•œy
* ,

574 
XVisuÆInfo
*

578 
XOff£tRegi⁄
(

579 #i‡
NìdFun˘i⁄PrŸŸy≥s


580 
Regi⁄
 ,

586 
Boﬁ
 
XPoötInRegi⁄
(

587 #i‡
NìdFun˘i⁄PrŸŸy≥s


588 
Regi⁄
 ,

594 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

595 #i‡
NìdFun˘i⁄PrŸŸy≥s


596 
XPoöt
* ,

602 
XRe˘InRegi⁄
(

603 #i‡
NìdFun˘i⁄PrŸŸy≥s


604 
Regi⁄
 ,

612 
XSaveC⁄ãxt
(

613 #i‡
NìdFun˘i⁄PrŸŸy≥s


614 
Di•œy
* ,

615 
XID
 ,

616 
XC⁄ãxt
 ,

617 
_Xc⁄°
 *

621 
XSëCœssHöt
(

622 #i‡
NìdFun˘i⁄PrŸŸy≥s


623 
Di•œy
* ,

624 
Wödow
 ,

625 
XCœssHöt
*

629 
XSëIc⁄Sizes
(

630 #i‡
NìdFun˘i⁄PrŸŸy≥s


631 
Di•œy
* ,

632 
Wödow
 ,

633 
XIc⁄Size
* ,

638 
XSëN‹mÆHöts
(

639 #i‡
NìdFun˘i⁄PrŸŸy≥s


640 
Di•œy
* ,

641 
Wödow
 ,

642 
XSizeHöts
*

646 
XSëRGBCﬁ‹m≠s
(

647 #i‡
NìdFun˘i⁄PrŸŸy≥s


648 
Di•œy
* ,

649 
Wödow
 ,

650 
XSènd¨dCﬁ‹m≠
* ,

652 
Atom


656 
XSëSizeHöts
(

657 #i‡
NìdFun˘i⁄PrŸŸy≥s


658 
Di•œy
* ,

659 
Wödow
 ,

660 
XSizeHöts
* ,

661 
Atom


665 
XSëSènd¨dPr›îtõs
(

666 #i‡
NìdFun˘i⁄PrŸŸy≥s


667 
Di•œy
* ,

668 
Wödow
 ,

669 
_Xc⁄°
 * ,

670 
_Xc⁄°
 * ,

671 
Pixm≠
 ,

674 
XSizeHöts
*

678 
XSëTextPr›îty
(

679 #i‡
NìdFun˘i⁄PrŸŸy≥s


680 
Di•œy
* ,

681 
Wödow
 ,

682 
XTextPr›îty
* ,

683 
Atom


687 
XSëWMClõ¡Machöe
(

688 #i‡
NìdFun˘i⁄PrŸŸy≥s


689 
Di•œy
* ,

690 
Wödow
 ,

691 
XTextPr›îty
*

695 
XSëWMHöts
(

696 #i‡
NìdFun˘i⁄PrŸŸy≥s


697 
Di•œy
* ,

698 
Wödow
 ,

699 
XWMHöts
*

703 
XSëWMIc⁄Name
(

704 #i‡
NìdFun˘i⁄PrŸŸy≥s


705 
Di•œy
* ,

706 
Wödow
 ,

707 
XTextPr›îty
*

711 
XSëWMName
(

712 #i‡
NìdFun˘i⁄PrŸŸy≥s


713 
Di•œy
* ,

714 
Wödow
 ,

715 
XTextPr›îty
*

719 
XSëWMN‹mÆHöts
(

720 #i‡
NìdFun˘i⁄PrŸŸy≥s


721 
Di•œy
* ,

722 
Wödow
 ,

723 
XSizeHöts
*

727 
XSëWMPr›îtõs
(

728 #i‡
NìdFun˘i⁄PrŸŸy≥s


729 
Di•œy
* ,

730 
Wödow
 ,

731 
XTextPr›îty
* ,

732 
XTextPr›îty
* ,

735 
XSizeHöts
* ,

736 
XWMHöts
* ,

737 
XCœssHöt
*

741 
XmbSëWMPr›îtõs
(

742 #i‡
NìdFun˘i⁄PrŸŸy≥s


743 
Di•œy
* ,

744 
Wödow
 ,

745 
_Xc⁄°
 * ,

746 
_Xc⁄°
 * ,

749 
XSizeHöts
* ,

750 
XWMHöts
* ,

751 
XCœssHöt
*

755 
XSëWMSizeHöts
(

756 #i‡
NìdFun˘i⁄PrŸŸy≥s


757 
Di•œy
* ,

758 
Wödow
 ,

759 
XSizeHöts
* ,

760 
Atom


764 
XSëRegi⁄
(

765 #i‡
NìdFun˘i⁄PrŸŸy≥s


766 
Di•œy
* ,

767 
GC
 ,

768 
Regi⁄


772 
XSëSènd¨dCﬁ‹m≠
(

773 #i‡
NìdFun˘i⁄PrŸŸy≥s


774 
Di•œy
* ,

775 
Wödow
 ,

776 
XSènd¨dCﬁ‹m≠
* ,

777 
Atom


781 
XSëZoomHöts
(

782 #i‡
NìdFun˘i⁄PrŸŸy≥s


783 
Di•œy
* ,

784 
Wödow
 ,

785 
XSizeHöts
*

789 
XShrökRegi⁄
(

790 #i‡
NìdFun˘i⁄PrŸŸy≥s


791 
Regi⁄
 ,

797 
Sètus
 
XSåögLi°ToTextPr›îty
(

798 #i‡
NìdFun˘i⁄PrŸŸy≥s


801 
XTextPr›îty
*

805 
XSubåa˘Regi⁄
(

806 #i‡
NìdFun˘i⁄PrŸŸy≥s


807 
Regi⁄
 ,

808 
Regi⁄
 ,

809 
Regi⁄


813 
XmbTextLi°ToTextPr›îty
(

814 #i‡
NìdFun˘i⁄PrŸŸy≥s


815 
Di•œy
* ,

818 
XICCEncodögStyÀ
 ,

819 
XTextPr›îty
*

823 
XwcTextLi°ToTextPr›îty
(

824 #i‡
NìdFun˘i⁄PrŸŸy≥s


825 
Di•œy
* ,

826 
wch¨_t
** ,

828 
XICCEncodögStyÀ
 ,

829 
XTextPr›îty
*

833 
XwcFªeSåögLi°
(

834 #i‡
NìdFun˘i⁄PrŸŸy≥s


835 
wch¨_t
**

839 
Sètus
 
XTextPr›îtyToSåögLi°
(

840 #i‡
NìdFun˘i⁄PrŸŸy≥s


841 
XTextPr›îty
* ,

847 
XmbTextPr›îtyToTextLi°
(

848 #i‡
NìdFun˘i⁄PrŸŸy≥s


849 
Di•œy
* ,

850 
XTextPr›îty
* ,

856 
XwcTextPr›îtyToTextLi°
(

857 #i‡
NìdFun˘i⁄PrŸŸy≥s


858 
Di•œy
* ,

859 
XTextPr›îty
* ,

860 
wch¨_t
*** ,

865 
XUni⁄Re˘WôhRegi⁄
(

866 #i‡
NìdFun˘i⁄PrŸŸy≥s


867 
XRe˘™gÀ
* ,

868 
Regi⁄
 ,

869 
Regi⁄


873 
XUni⁄Regi⁄
(

874 #i‡
NìdFun˘i⁄PrŸŸy≥s


875 
Regi⁄
 ,

876 
Regi⁄
 ,

877 
Regi⁄


881 
XWMGeomëry
(

882 #i‡
NìdFun˘i⁄PrŸŸy≥s


883 
Di•œy
* ,

885 
_Xc⁄°
 * ,

886 
_Xc⁄°
 * ,

888 
XSizeHöts
* ,

897 
XX‹Regi⁄
(

898 #i‡
NìdFun˘i⁄PrŸŸy≥s


899 
Regi⁄
 ,

900 
Regi⁄
 ,

901 
Regi⁄


905 
	g_XFUNCPROTOEND


	@/usr/include/X11/cursorfont.h

30 
	#XC_num_glyphs
 154

	)

31 
	#XC_X_curs‹
 0

	)

32 
	#XC_¨row
 2

	)

33 
	#XC_ba£d_¨row_down
 4

	)

34 
	#XC_ba£d_¨row_up
 6

	)

35 
	#XC_bﬂt
 8

	)

36 
	#XC_bogosôy
 10

	)

37 
	#XC_bŸtom_À·_c‹√r
 12

	)

38 
	#XC_bŸtom_right_c‹√r
 14

	)

39 
	#XC_bŸtom_side
 16

	)

40 
	#XC_bŸtom_ãe
 18

	)

41 
	#XC_box_•úÆ
 20

	)

42 
	#XC_˚¡î_±r
 22

	)

43 
	#XC_cú˛e
 24

	)

44 
	#XC_˛ock
 26

	)

45 
	#XC_cof„e_mug
 28

	)

46 
	#XC_¸oss
 30

	)

47 
	#XC_¸oss_ªvî£
 32

	)

48 
	#XC_¸osshaú
 34

	)

49 
	#XC_düm⁄d_¸oss
 36

	)

50 
	#XC_dŸ
 38

	)

51 
	#XC_dŸbox
 40

	)

52 
	#XC_doubÀ_¨row
 42

	)

53 
	#XC_dø·_œrge
 44

	)

54 
	#XC_dø·_smÆl
 46

	)

55 
	#XC_dø≥d_box
 48

	)

56 
	#XC_exch™ge
 50

	)

57 
	#XC_Êeur
 52

	)

58 
	#XC_gobbÀr
 54

	)

59 
	#XC_gumby
 56

	)

60 
	#XC_h™d1
 58

	)

61 
	#XC_h™d2
 60

	)

62 
	#XC_hóπ
 62

	)

63 
	#XC_ic⁄
 64

	)

64 
	#XC_ú⁄_¸oss
 66

	)

65 
	#XC_À·_±r
 68

	)

66 
	#XC_À·_side
 70

	)

67 
	#XC_À·_ãe
 72

	)

68 
	#XC_À·buâ⁄
 74

	)

69 
	#XC_Œ_™gÀ
 76

	)

70 
	#XC_Ã_™gÀ
 78

	)

71 
	#XC_m™
 80

	)

72 
	#XC_middÀbuâ⁄
 82

	)

73 
	#XC_mou£
 84

	)

74 
	#XC_≥ncû
 86

	)

75 
	#XC_pú©e
 88

	)

76 
	#XC_∂us
 90

	)

77 
	#XC_que°i⁄_¨row
 92

	)

78 
	#XC_right_±r
 94

	)

79 
	#XC_right_side
 96

	)

80 
	#XC_right_ãe
 98

	)

81 
	#XC_rightbuâ⁄
 100

	)

82 
	#XC_πl_logo
 102

	)

83 
	#XC_ßûbﬂt
 104

	)

84 
	#XC_sb_down_¨row
 106

	)

85 
	#XC_sb_h_doubÀ_¨row
 108

	)

86 
	#XC_sb_À·_¨row
 110

	)

87 
	#XC_sb_right_¨row
 112

	)

88 
	#XC_sb_up_¨row
 114

	)

89 
	#XC_sb_v_doubÀ_¨row
 116

	)

90 
	#XC_shuâÀ
 118

	)

91 
	#XC_sizög
 120

	)

92 
	#XC_•idî
 122

	)

93 
	#XC_•øyˇn
 124

	)

94 
	#XC_°¨
 126

	)

95 
	#XC_èrgë
 128

	)

96 
	#XC_t¸oss
 130

	)

97 
	#XC_t›_À·_¨row
 132

	)

98 
	#XC_t›_À·_c‹√r
 134

	)

99 
	#XC_t›_right_c‹√r
 136

	)

100 
	#XC_t›_side
 138

	)

101 
	#XC_t›_ãe
 140

	)

102 
	#XC_åek
 142

	)

103 
	#XC_ul_™gÀ
 144

	)

104 
	#XC_umbªŒa
 146

	)

105 
	#XC_ur_™gÀ
 148

	)

106 
	#XC_w©ch
 150

	)

107 
	#XC_xãrm
 152

	)

	@/usr/include/X11/keysymdef.h

51 
	#XK_VoidSymbﬁ
 0xFFFFFF

	)

53 #ifde‡
XK_MISCELLANY


60 
	#XK_BackS∑˚
 0xFF08

	)

61 
	#XK_Tab
 0xFF09

	)

62 
	#XK_Löe„ed
 0xFF0A

	)

63 
	#XK_CÀ¨
 0xFF0B

	)

64 
	#XK_Rëu∫
 0xFF0D

	)

65 
	#XK_Pau£
 0xFF13

	)

66 
	#XK_S¸ﬁl_Lock
 0xFF14

	)

67 
	#XK_Sys_Req
 0xFF15

	)

68 
	#XK_Esˇ≥
 0xFF1B

	)

69 
	#XK_Dñëe
 0xFFFF

	)

75 
	#XK_Mu…i_key
 0xFF20

	)

76 
	#XK_Codeöput
 0xFF37

	)

77 
	#XK_SögÀC™did©e
 0xFF3C

	)

78 
	#XK_Mu…ùÀC™did©e
 0xFF3D

	)

79 
	#XK_PªviousC™did©e
 0xFF3E

	)

83 
	#XK_K™ji
 0xFF21

	)

84 
	#XK_Muhík™
 0xFF22

	)

85 
	#XK_Hík™_Mode
 0xFF23

	)

86 
	#XK_Hík™
 0xFF23

	)

87 
	#XK_Romaji
 0xFF24

	)

88 
	#XK_Húag™a
 0xFF25

	)

89 
	#XK_K©ak™a
 0xFF26

	)

90 
	#XK_Húag™a_K©ak™a
 0xFF27

	)

91 
	#XK_Zíkaku
 0xFF28

	)

92 
	#XK_H™kaku
 0xFF29

	)

93 
	#XK_Zíkaku_H™kaku
 0xFF2A

	)

94 
	#XK_Touroku
 0xFF2B

	)

95 
	#XK_Massyo
 0xFF2C

	)

96 
	#XK_K™a_Lock
 0xFF2D

	)

97 
	#XK_K™a_Shi·
 0xFF2E

	)

98 
	#XK_Eisu_Shi·
 0xFF2F

	)

99 
	#XK_Eisu_toggÀ
 0xFF30

	)

100 
	#XK_K™ji_B™gou
 0xFF37

	)

101 
	#XK_Zí_Koho
 0xFF3D

	)

102 
	#XK_M´_Koho
 0xFF3E

	)

108 
	#XK_Home
 0xFF50

	)

109 
	#XK_Le·
 0xFF51

	)

110 
	#XK_Up
 0xFF52

	)

111 
	#XK_Right
 0xFF53

	)

112 
	#XK_Down
 0xFF54

	)

113 
	#XK_Pri‹
 0xFF55

	)

114 
	#XK_Page_Up
 0xFF55

	)

115 
	#XK_Next
 0xFF56

	)

116 
	#XK_Page_Down
 0xFF56

	)

117 
	#XK_End
 0xFF57

	)

118 
	#XK_Begö
 0xFF58

	)

123 
	#XK_Sñe˘
 0xFF60

	)

124 
	#XK_Pröt
 0xFF61

	)

125 
	#XK_Execuã
 0xFF62

	)

126 
	#XK_In£π
 0xFF63

	)

127 
	#XK_Undo
 0xFF65

	)

128 
	#XK_Redo
 0xFF66

	)

129 
	#XK_Míu
 0xFF67

	)

130 
	#XK_Föd
 0xFF68

	)

131 
	#XK_C™˚l
 0xFF69

	)

132 
	#XK_Hñp
 0xFF6A

	)

133 
	#XK_Bªak
 0xFF6B

	)

134 
	#XK_Mode_swôch
 0xFF7E

	)

135 
	#XK_s¸ùt_swôch
 0xFF7E

	)

136 
	#XK_Num_Lock
 0xFF7F

	)

140 
	#XK_KP_S∑˚
 0xFF80

	)

141 
	#XK_KP_Tab
 0xFF89

	)

142 
	#XK_KP_E¡î
 0xFF8D

	)

143 
	#XK_KP_F1
 0xFF91

	)

144 
	#XK_KP_F2
 0xFF92

	)

145 
	#XK_KP_F3
 0xFF93

	)

146 
	#XK_KP_F4
 0xFF94

	)

147 
	#XK_KP_Home
 0xFF95

	)

148 
	#XK_KP_Le·
 0xFF96

	)

149 
	#XK_KP_Up
 0xFF97

	)

150 
	#XK_KP_Right
 0xFF98

	)

151 
	#XK_KP_Down
 0xFF99

	)

152 
	#XK_KP_Pri‹
 0xFF9A

	)

153 
	#XK_KP_Page_Up
 0xFF9A

	)

154 
	#XK_KP_Next
 0xFF9B

	)

155 
	#XK_KP_Page_Down
 0xFF9B

	)

156 
	#XK_KP_End
 0xFF9C

	)

157 
	#XK_KP_Begö
 0xFF9D

	)

158 
	#XK_KP_In£π
 0xFF9E

	)

159 
	#XK_KP_Dñëe
 0xFF9F

	)

160 
	#XK_KP_EquÆ
 0xFFBD

	)

161 
	#XK_KP_Mu…ùly
 0xFFAA

	)

162 
	#XK_KP_Add
 0xFFAB

	)

163 
	#XK_KP_Sï¨©‹
 0xFFAC

	)

164 
	#XK_KP_Subåa˘
 0xFFAD

	)

165 
	#XK_KP_DecimÆ
 0xFFAE

	)

166 
	#XK_KP_Divide
 0xFFAF

	)

168 
	#XK_KP_0
 0xFFB0

	)

169 
	#XK_KP_1
 0xFFB1

	)

170 
	#XK_KP_2
 0xFFB2

	)

171 
	#XK_KP_3
 0xFFB3

	)

172 
	#XK_KP_4
 0xFFB4

	)

173 
	#XK_KP_5
 0xFFB5

	)

174 
	#XK_KP_6
 0xFFB6

	)

175 
	#XK_KP_7
 0xFFB7

	)

176 
	#XK_KP_8
 0xFFB8

	)

177 
	#XK_KP_9
 0xFFB9

	)

188 
	#XK_F1
 0xFFBE

	)

189 
	#XK_F2
 0xFFBF

	)

190 
	#XK_F3
 0xFFC0

	)

191 
	#XK_F4
 0xFFC1

	)

192 
	#XK_F5
 0xFFC2

	)

193 
	#XK_F6
 0xFFC3

	)

194 
	#XK_F7
 0xFFC4

	)

195 
	#XK_F8
 0xFFC5

	)

196 
	#XK_F9
 0xFFC6

	)

197 
	#XK_F10
 0xFFC7

	)

198 
	#XK_F11
 0xFFC8

	)

199 
	#XK_L1
 0xFFC8

	)

200 
	#XK_F12
 0xFFC9

	)

201 
	#XK_L2
 0xFFC9

	)

202 
	#XK_F13
 0xFFCA

	)

203 
	#XK_L3
 0xFFCA

	)

204 
	#XK_F14
 0xFFCB

	)

205 
	#XK_L4
 0xFFCB

	)

206 
	#XK_F15
 0xFFCC

	)

207 
	#XK_L5
 0xFFCC

	)

208 
	#XK_F16
 0xFFCD

	)

209 
	#XK_L6
 0xFFCD

	)

210 
	#XK_F17
 0xFFCE

	)

211 
	#XK_L7
 0xFFCE

	)

212 
	#XK_F18
 0xFFCF

	)

213 
	#XK_L8
 0xFFCF

	)

214 
	#XK_F19
 0xFFD0

	)

215 
	#XK_L9
 0xFFD0

	)

216 
	#XK_F20
 0xFFD1

	)

217 
	#XK_L10
 0xFFD1

	)

218 
	#XK_F21
 0xFFD2

	)

219 
	#XK_R1
 0xFFD2

	)

220 
	#XK_F22
 0xFFD3

	)

221 
	#XK_R2
 0xFFD3

	)

222 
	#XK_F23
 0xFFD4

	)

223 
	#XK_R3
 0xFFD4

	)

224 
	#XK_F24
 0xFFD5

	)

225 
	#XK_R4
 0xFFD5

	)

226 
	#XK_F25
 0xFFD6

	)

227 
	#XK_R5
 0xFFD6

	)

228 
	#XK_F26
 0xFFD7

	)

229 
	#XK_R6
 0xFFD7

	)

230 
	#XK_F27
 0xFFD8

	)

231 
	#XK_R7
 0xFFD8

	)

232 
	#XK_F28
 0xFFD9

	)

233 
	#XK_R8
 0xFFD9

	)

234 
	#XK_F29
 0xFFDA

	)

235 
	#XK_R9
 0xFFDA

	)

236 
	#XK_F30
 0xFFDB

	)

237 
	#XK_R10
 0xFFDB

	)

238 
	#XK_F31
 0xFFDC

	)

239 
	#XK_R11
 0xFFDC

	)

240 
	#XK_F32
 0xFFDD

	)

241 
	#XK_R12
 0xFFDD

	)

242 
	#XK_F33
 0xFFDE

	)

243 
	#XK_R13
 0xFFDE

	)

244 
	#XK_F34
 0xFFDF

	)

245 
	#XK_R14
 0xFFDF

	)

246 
	#XK_F35
 0xFFE0

	)

247 
	#XK_R15
 0xFFE0

	)

251 
	#XK_Shi·_L
 0xFFE1

	)

252 
	#XK_Shi·_R
 0xFFE2

	)

253 
	#XK_C⁄åﬁ_L
 0xFFE3

	)

254 
	#XK_C⁄åﬁ_R
 0xFFE4

	)

255 
	#XK_C≠s_Lock
 0xFFE5

	)

256 
	#XK_Shi·_Lock
 0xFFE6

	)

258 
	#XK_Mëa_L
 0xFFE7

	)

259 
	#XK_Mëa_R
 0xFFE8

	)

260 
	#XK_A…_L
 0xFFE9

	)

261 
	#XK_A…_R
 0xFFEA

	)

262 
	#XK_Su≥r_L
 0xFFEB

	)

263 
	#XK_Su≥r_R
 0xFFEC

	)

264 
	#XK_Hy≥r_L
 0xFFED

	)

265 
	#XK_Hy≥r_R
 0xFFEE

	)

273 #ifde‡
XK_XKB_KEYS


274 
	#XK_ISO_Lock
 0xFE01

	)

275 
	#XK_ISO_Levñ2_L©ch
 0xFE02

	)

276 
	#XK_ISO_Levñ3_Shi·
 0xFE03

	)

277 
	#XK_ISO_Levñ3_L©ch
 0xFE04

	)

278 
	#XK_ISO_Levñ3_Lock
 0xFE05

	)

279 
	#XK_ISO_Group_Shi·
 0xFF7E

	)

280 
	#XK_ISO_Group_L©ch
 0xFE06

	)

281 
	#XK_ISO_Group_Lock
 0xFE07

	)

282 
	#XK_ISO_Next_Group
 0xFE08

	)

283 
	#XK_ISO_Next_Group_Lock
 0xFE09

	)

284 
	#XK_ISO_Pªv_Group
 0xFE0A

	)

285 
	#XK_ISO_Pªv_Group_Lock
 0xFE0B

	)

286 
	#XK_ISO_Fú°_Group
 0xFE0C

	)

287 
	#XK_ISO_Fú°_Group_Lock
 0xFE0D

	)

288 
	#XK_ISO_La°_Group
 0xFE0E

	)

289 
	#XK_ISO_La°_Group_Lock
 0xFE0F

	)

291 
	#XK_ISO_Le·_Tab
 0xFE20

	)

292 
	#XK_ISO_Move_Löe_Up
 0xFE21

	)

293 
	#XK_ISO_Move_Löe_Down
 0xFE22

	)

294 
	#XK_ISO_P¨tül_Löe_Up
 0xFE23

	)

295 
	#XK_ISO_P¨tül_Löe_Down
 0xFE24

	)

296 
	#XK_ISO_P¨tül_S∑˚_Le·
 0xFE25

	)

297 
	#XK_ISO_P¨tül_S∑˚_Right
 0xFE26

	)

298 
	#XK_ISO_Së_M¨gö_Le·
 0xFE27

	)

299 
	#XK_ISO_Së_M¨gö_Right
 0xFE28

	)

300 
	#XK_ISO_Rñó£_M¨gö_Le·
 0xFE29

	)

301 
	#XK_ISO_Rñó£_M¨gö_Right
 0xFE2A

	)

302 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0xFE2B

	)

303 
	#XK_ISO_Fa°_Curs‹_Le·
 0xFE2C

	)

304 
	#XK_ISO_Fa°_Curs‹_Right
 0xFE2D

	)

305 
	#XK_ISO_Fa°_Curs‹_Up
 0xFE2E

	)

306 
	#XK_ISO_Fa°_Curs‹_Down
 0xFE2F

	)

307 
	#XK_ISO_C⁄töuous_Undîlöe
 0xFE30

	)

308 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0xFE31

	)

309 
	#XK_ISO_Emphasize
 0xFE32

	)

310 
	#XK_ISO_Cíãr_Obje˘
 0xFE33

	)

311 
	#XK_ISO_E¡î
 0xFE34

	)

313 
	#XK_dód_gøve
 0xFE50

	)

314 
	#XK_dód_acuã
 0xFE51

	)

315 
	#XK_dód_cúcumÊex
 0xFE52

	)

316 
	#XK_dód_tûde
 0xFE53

	)

317 
	#XK_dód_ma¸⁄
 0xFE54

	)

318 
	#XK_dód_bªve
 0xFE55

	)

319 
	#XK_dód_abovedŸ
 0xFE56

	)

320 
	#XK_dód_düîesis
 0xFE57

	)

321 
	#XK_dód_abovîög
 0xFE58

	)

322 
	#XK_dód_doubÀacuã
 0xFE59

	)

323 
	#XK_dód_ˇr⁄
 0xFE5A

	)

324 
	#XK_dód_˚dûœ
 0xFE5B

	)

325 
	#XK_dód_og⁄ek
 0xFE5C

	)

326 
	#XK_dód_iŸa
 0xFE5D

	)

327 
	#XK_dód_voi˚d_sound
 0xFE5E

	)

328 
	#XK_dód_£mivoi˚d_sound
 0xFE5F

	)

329 
	#XK_dód_bñowdŸ
 0xFE60

	)

331 
	#XK_Fú°_VútuÆ_S¸ìn
 0xFED0

	)

332 
	#XK_Pªv_VútuÆ_S¸ìn
 0xFED1

	)

333 
	#XK_Next_VútuÆ_S¸ìn
 0xFED2

	)

334 
	#XK_La°_VútuÆ_S¸ìn
 0xFED4

	)

335 
	#XK_Tîmö©e_Sîvî
 0xFED5

	)

337 
	#XK_Ac˚ssX_E«bÀ
 0xFE70

	)

338 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0xFE71

	)

339 
	#XK_RïótKeys_E«bÀ
 0xFE72

	)

340 
	#XK_SlowKeys_E«bÀ
 0xFE73

	)

341 
	#XK_Boun˚Keys_E«bÀ
 0xFE74

	)

342 
	#XK_StickyKeys_E«bÀ
 0xFE75

	)

343 
	#XK_Mou£Keys_E«bÀ
 0xFE76

	)

344 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0xFE77

	)

345 
	#XK_Ovîœy1_E«bÀ
 0xFE78

	)

346 
	#XK_Ovîœy2_E«bÀ
 0xFE79

	)

347 
	#XK_AudibÀBñl_E«bÀ
 0xFE7A

	)

349 
	#XK_Poöãr_Le·
 0xFEE0

	)

350 
	#XK_Poöãr_Right
 0xFEE1

	)

351 
	#XK_Poöãr_Up
 0xFEE2

	)

352 
	#XK_Poöãr_Down
 0xFEE3

	)

353 
	#XK_Poöãr_UpLe·
 0xFEE4

	)

354 
	#XK_Poöãr_UpRight
 0xFEE5

	)

355 
	#XK_Poöãr_DownLe·
 0xFEE6

	)

356 
	#XK_Poöãr_DownRight
 0xFEE7

	)

357 
	#XK_Poöãr_Buâ⁄_DÊt
 0xFEE8

	)

358 
	#XK_Poöãr_Buâ⁄1
 0xFEE9

	)

359 
	#XK_Poöãr_Buâ⁄2
 0xFEEA

	)

360 
	#XK_Poöãr_Buâ⁄3
 0xFEEB

	)

361 
	#XK_Poöãr_Buâ⁄4
 0xFEEC

	)

362 
	#XK_Poöãr_Buâ⁄5
 0xFEED

	)

363 
	#XK_Poöãr_DblClick_DÊt
 0xFEEE

	)

364 
	#XK_Poöãr_DblClick1
 0xFEEF

	)

365 
	#XK_Poöãr_DblClick2
 0xFEF0

	)

366 
	#XK_Poöãr_DblClick3
 0xFEF1

	)

367 
	#XK_Poöãr_DblClick4
 0xFEF2

	)

368 
	#XK_Poöãr_DblClick5
 0xFEF3

	)

369 
	#XK_Poöãr_Døg_DÊt
 0xFEF4

	)

370 
	#XK_Poöãr_Døg1
 0xFEF5

	)

371 
	#XK_Poöãr_Døg2
 0xFEF6

	)

372 
	#XK_Poöãr_Døg3
 0xFEF7

	)

373 
	#XK_Poöãr_Døg4
 0xFEF8

	)

374 
	#XK_Poöãr_Døg5
 0xFEFD

	)

376 
	#XK_Poöãr_E«bÀKeys
 0xFEF9

	)

377 
	#XK_Poöãr_Ac˚Àøã
 0xFEFA

	)

378 
	#XK_Poöãr_DÊtBäNext
 0xFEFB

	)

379 
	#XK_Poöãr_DÊtBäPªv
 0xFEFC

	)

388 #ifde‡
XK_3270


389 
	#XK_3270_Du∂iˇã
 0xFD01

	)

390 
	#XK_3270_FõldM¨k
 0xFD02

	)

391 
	#XK_3270_Right2
 0xFD03

	)

392 
	#XK_3270_Le·2
 0xFD04

	)

393 
	#XK_3270_BackTab
 0xFD05

	)

394 
	#XK_3270_Eø£EOF
 0xFD06

	)

395 
	#XK_3270_Eø£I≈ut
 0xFD07

	)

396 
	#XK_3270_Re£t
 0xFD08

	)

397 
	#XK_3270_Quô
 0xFD09

	)

398 
	#XK_3270_PA1
 0xFD0A

	)

399 
	#XK_3270_PA2
 0xFD0B

	)

400 
	#XK_3270_PA3
 0xFD0C

	)

401 
	#XK_3270_Te°
 0xFD0D

	)

402 
	#XK_3270_Aân
 0xFD0E

	)

403 
	#XK_3270_Curs‹Blök
 0xFD0F

	)

404 
	#XK_3270_A…Curs‹
 0xFD10

	)

405 
	#XK_3270_KeyClick
 0xFD11

	)

406 
	#XK_3270_Jump
 0xFD12

	)

407 
	#XK_3270_Idít
 0xFD13

	)

408 
	#XK_3270_RuÀ
 0xFD14

	)

409 
	#XK_3270_C›y
 0xFD15

	)

410 
	#XK_3270_Pœy
 0xFD16

	)

411 
	#XK_3270_Sëup
 0xFD17

	)

412 
	#XK_3270_Rec‹d
 0xFD18

	)

413 
	#XK_3270_Ch™geS¸ìn
 0xFD19

	)

414 
	#XK_3270_DñëeW‹d
 0xFD1A

	)

415 
	#XK_3270_ExSñe˘
 0xFD1B

	)

416 
	#XK_3270_Curs‹Sñe˘
 0xFD1C

	)

417 
	#XK_3270_PrötS¸ìn
 0xFD1D

	)

418 
	#XK_3270_E¡î
 0xFD1E

	)

425 #ifde‡
XK_LATIN1


426 
	#XK_•a˚
 0x020

	)

427 
	#XK_ex˛am
 0x021

	)

428 
	#XK_quŸedbl
 0x022

	)

429 
	#XK_numbîsign
 0x023

	)

430 
	#XK_dﬁœr
 0x024

	)

431 
	#XK_≥r˚¡
 0x025

	)

432 
	#XK_am≥rßnd
 0x026

	)

433 
	#XK_≠o°r›he
 0x027

	)

434 
	#XK_quŸîight
 0x027

	)

435 
	#XK_∑ª∆e·
 0x028

	)

436 
	#XK_∑ªƒight
 0x029

	)

437 
	#XK_a°îisk
 0x02a

	)

438 
	#XK_∂us
 0x02b

	)

439 
	#XK_comma
 0x02c

	)

440 
	#XK_möus
 0x02d

	)

441 
	#XK_≥riod
 0x02e

	)

442 
	#XK_¶ash
 0x02f

	)

443 
	#XK_0
 0x030

	)

444 
	#XK_1
 0x031

	)

445 
	#XK_2
 0x032

	)

446 
	#XK_3
 0x033

	)

447 
	#XK_4
 0x034

	)

448 
	#XK_5
 0x035

	)

449 
	#XK_6
 0x036

	)

450 
	#XK_7
 0x037

	)

451 
	#XK_8
 0x038

	)

452 
	#XK_9
 0x039

	)

453 
	#XK_cﬁ⁄
 0x03a

	)

454 
	#XK_£micﬁ⁄
 0x03b

	)

455 
	#XK_Àss
 0x03c

	)

456 
	#XK_equÆ
 0x03d

	)

457 
	#XK_gª©î
 0x03e

	)

458 
	#XK_que°i⁄
 0x03f

	)

459 
	#XK_©
 0x040

	)

460 
	#XK_A
 0x041

	)

461 
	#XK_B
 0x042

	)

462 
	#XK_C
 0x043

	)

463 
	#XK_D
 0x044

	)

464 
	#XK_E
 0x045

	)

465 
	#XK_F
 0x046

	)

466 
	#XK_G
 0x047

	)

467 
	#XK_H
 0x048

	)

468 
	#XK_I
 0x049

	)

469 
	#XK_J
 0x04a

	)

470 
	#XK_K
 0x04b

	)

471 
	#XK_L
 0x04c

	)

472 
	#XK_M
 0x04d

	)

473 
	#XK_N
 0x04e

	)

474 
	#XK_O
 0x04f

	)

475 
	#XK_P
 0x050

	)

476 
	#XK_Q
 0x051

	)

477 
	#XK_R
 0x052

	)

478 
	#XK_S
 0x053

	)

479 
	#XK_T
 0x054

	)

480 
	#XK_U
 0x055

	)

481 
	#XK_V
 0x056

	)

482 
	#XK_W
 0x057

	)

483 
	#XK_X
 0x058

	)

484 
	#XK_Y
 0x059

	)

485 
	#XK_Z
 0x05a

	)

486 
	#XK_bøckëÀ·
 0x05b

	)

487 
	#XK_back¶ash
 0x05c

	)

488 
	#XK_bøckëright
 0x05d

	)

489 
	#XK_asciicúcum
 0x05e

	)

490 
	#XK_undîsc‹e
 0x05f

	)

491 
	#XK_gøve
 0x060

	)

492 
	#XK_quŸñe·
 0x060

	)

493 
	#XK_a
 0x061

	)

494 
	#XK_b
 0x062

	)

495 
	#XK_c
 0x063

	)

496 
	#XK_d
 0x064

	)

497 
	#XK_e
 0x065

	)

498 
	#XK_f
 0x066

	)

499 
	#XK_g
 0x067

	)

500 
	#XK_h
 0x068

	)

501 
	#XK_i
 0x069

	)

502 
	#XK_j
 0x06a

	)

503 
	#XK_k
 0x06b

	)

504 
	#XK_l
 0x06c

	)

505 
	#XK_m
 0x06d

	)

506 
	#XK_n
 0x06e

	)

507 
	#XK_o
 0x06f

	)

508 
	#XK_p
 0x070

	)

509 
	#XK_q
 0x071

	)

510 
	#XK_r
 0x072

	)

511 
	#XK_s
 0x073

	)

512 
	#XK_t
 0x074

	)

513 
	#XK_u
 0x075

	)

514 
	#XK_v
 0x076

	)

515 
	#XK_w
 0x077

	)

516 
	#XK_x
 0x078

	)

517 
	#XK_y
 0x079

	)

518 
	#XK_z
 0x07a

	)

519 
	#XK_bø˚À·
 0x07b

	)

520 
	#XK_b¨
 0x07c

	)

521 
	#XK_bø˚right
 0x07d

	)

522 
	#XK_asciôûde
 0x07e

	)

524 
	#XK_nobªak•a˚
 0x0a0

	)

525 
	#XK_ex˛amdown
 0x0a1

	)

526 
	#XK_˚¡
 0x0a2

	)

527 
	#XK_°îlög
 0x0a3

	)

528 
	#XK_cuºícy
 0x0a4

	)

529 
	#XK_yí
 0x0a5

	)

530 
	#XK_brokíb¨
 0x0a6

	)

531 
	#XK_£˘i⁄
 0x0a7

	)

532 
	#XK_düîesis
 0x0a8

	)

533 
	#XK_c›yright
 0x0a9

	)

534 
	#XK_‹d„mööe
 0x0Ø

	)

535 
	#XK_guûÀmŸÀ·
 0x0ab

	)

536 
	#XK_nŸsign
 0x0ac

	)

537 
	#XK_hyphí
 0x0ad

	)

538 
	#XK_ªgi°îed
 0x0´

	)

539 
	#XK_ma¸⁄
 0x0af

	)

540 
	#XK_degªe
 0x0b0

	)

541 
	#XK_∂usmöus
 0x0b1

	)

542 
	#XK_twosu≥ri‹
 0x0b2

	)

543 
	#XK_thªesu≥ri‹
 0x0b3

	)

544 
	#XK_acuã
 0x0b4

	)

545 
	#XK_mu
 0x0b5

	)

546 
	#XK_∑øgøph
 0x0b6

	)

547 
	#XK_≥riod˚¡îed
 0x0b7

	)

548 
	#XK_˚dûœ
 0x0b8

	)

549 
	#XK_⁄esu≥ri‹
 0x0b9

	)

550 
	#XK_masculöe
 0x0ba

	)

551 
	#XK_guûÀmŸright
 0x0bb

	)

552 
	#XK_⁄equ¨ãr
 0x0bc

	)

553 
	#XK_⁄ehÆf
 0x0bd

	)

554 
	#XK_thªequ¨ãrs
 0x0be

	)

555 
	#XK_que°i⁄down
 0x0bf

	)

556 
	#XK_Agøve
 0x0c0

	)

557 
	#XK_Aacuã
 0x0c1

	)

558 
	#XK_AcúcumÊex
 0x0c2

	)

559 
	#XK_Atûde
 0x0c3

	)

560 
	#XK_Adüîesis
 0x0c4

	)

561 
	#XK_Arög
 0x0c5

	)

562 
	#XK_AE
 0x0c6

	)

563 
	#XK_C˚dûœ
 0x0c7

	)

564 
	#XK_Egøve
 0x0c8

	)

565 
	#XK_Eacuã
 0x0c9

	)

566 
	#XK_EcúcumÊex
 0x0ˇ

	)

567 
	#XK_Edüîesis
 0x0cb

	)

568 
	#XK_Igøve
 0x0cc

	)

569 
	#XK_Iacuã
 0x0cd

	)

570 
	#XK_IcúcumÊex
 0x0˚

	)

571 
	#XK_Idüîesis
 0x0cf

	)

572 
	#XK_ETH
 0x0d0

	)

573 
	#XK_Eth
 0x0d0

	)

574 
	#XK_Ntûde
 0x0d1

	)

575 
	#XK_Ogøve
 0x0d2

	)

576 
	#XK_Oacuã
 0x0d3

	)

577 
	#XK_OcúcumÊex
 0x0d4

	)

578 
	#XK_Otûde
 0x0d5

	)

579 
	#XK_Odüîesis
 0x0d6

	)

580 
	#XK_mu…ùly
 0x0d7

	)

581 
	#XK_Ooblique
 0x0d8

	)

582 
	#XK_Ugøve
 0x0d9

	)

583 
	#XK_Uacuã
 0x0da

	)

584 
	#XK_UcúcumÊex
 0x0db

	)

585 
	#XK_Udüîesis
 0x0dc

	)

586 
	#XK_Yacuã
 0x0dd

	)

587 
	#XK_THORN
 0x0de

	)

588 
	#XK_Th‹n
 0x0dê

	)

589 
	#XK_ssh¨p
 0x0df

	)

590 
	#XK_agøve
 0x0e0

	)

591 
	#XK_Øcuã
 0x0e1

	)

592 
	#XK_acúcumÊex
 0x0e2

	)

593 
	#XK_©ûde
 0x0e3

	)

594 
	#XK_adüîesis
 0x0e4

	)

595 
	#XK_¨ög
 0x0e5

	)

596 
	#XK_´
 0x0e6

	)

597 
	#XK_c˚dûœ
 0x0e7

	)

598 
	#XK_egøve
 0x0e8

	)

599 
	#XK_ócuã
 0x0e9

	)

600 
	#XK_ecúcumÊex
 0x0ó

	)

601 
	#XK_edüîesis
 0x0eb

	)

602 
	#XK_igøve
 0x0ec

	)

603 
	#XK_ücuã
 0x0ed

	)

604 
	#XK_icúcumÊex
 0x0ì

	)

605 
	#XK_idüîesis
 0x0ef

	)

606 
	#XK_ëh
 0x0f0

	)

607 
	#XK_¡ûde
 0x0f1

	)

608 
	#XK_ogøve
 0x0f2

	)

609 
	#XK_ﬂcuã
 0x0f3

	)

610 
	#XK_ocúcumÊex
 0x0f4

	)

611 
	#XK_Ÿûde
 0x0f5

	)

612 
	#XK_odüîesis
 0x0f6

	)

613 
	#XK_divisi⁄
 0x0f7

	)

614 
	#XK_o¶ash
 0x0f8

	)

615 
	#XK_ugøve
 0x0f9

	)

616 
	#XK_uacuã
 0x0Á

	)

617 
	#XK_ucúcumÊex
 0x0fb

	)

618 
	#XK_udüîesis
 0x0fc

	)

619 
	#XK_yacuã
 0x0fd

	)

620 
	#XK_th‹n
 0x0„

	)

621 
	#XK_ydüîesis
 0x0ff

	)

629 #ifde‡
XK_LATIN2


630 
	#XK_Aog⁄ek
 0x1a1

	)

631 
	#XK_bªve
 0x1a2

	)

632 
	#XK_L°roke
 0x1a3

	)

633 
	#XK_Lˇr⁄
 0x1a5

	)

634 
	#XK_Sacuã
 0x1a6

	)

635 
	#XK_Sˇr⁄
 0x1a9

	)

636 
	#XK_S˚dûœ
 0x1Ø

	)

637 
	#XK_Tˇr⁄
 0x1ab

	)

638 
	#XK_Zacuã
 0x1ac

	)

639 
	#XK_Zˇr⁄
 0x1´

	)

640 
	#XK_ZabovedŸ
 0x1af

	)

641 
	#XK_aog⁄ek
 0x1b1

	)

642 
	#XK_og⁄ek
 0x1b2

	)

643 
	#XK_l°roke
 0x1b3

	)

644 
	#XK_lˇr⁄
 0x1b5

	)

645 
	#XK_ßcuã
 0x1b6

	)

646 
	#XK_ˇr⁄
 0x1b7

	)

647 
	#XK_sˇr⁄
 0x1b9

	)

648 
	#XK_s˚dûœ
 0x1ba

	)

649 
	#XK_tˇr⁄
 0x1bb

	)

650 
	#XK_zacuã
 0x1bc

	)

651 
	#XK_doubÀacuã
 0x1bd

	)

652 
	#XK_zˇr⁄
 0x1be

	)

653 
	#XK_zabovedŸ
 0x1bf

	)

654 
	#XK_Racuã
 0x1c0

	)

655 
	#XK_Abªve
 0x1c3

	)

656 
	#XK_Lacuã
 0x1c5

	)

657 
	#XK_Cacuã
 0x1c6

	)

658 
	#XK_Cˇr⁄
 0x1c8

	)

659 
	#XK_Eog⁄ek
 0x1ˇ

	)

660 
	#XK_Eˇr⁄
 0x1cc

	)

661 
	#XK_Dˇr⁄
 0x1cf

	)

662 
	#XK_D°roke
 0x1d0

	)

663 
	#XK_Nacuã
 0x1d1

	)

664 
	#XK_Nˇr⁄
 0x1d2

	)

665 
	#XK_OdoubÀacuã
 0x1d5

	)

666 
	#XK_Rˇr⁄
 0x1d8

	)

667 
	#XK_Urög
 0x1d9

	)

668 
	#XK_UdoubÀacuã
 0x1db

	)

669 
	#XK_T˚dûœ
 0x1de

	)

670 
	#XK_øcuã
 0x1e0

	)

671 
	#XK_abªve
 0x1e3

	)

672 
	#XK_œcuã
 0x1e5

	)

673 
	#XK_ˇcuã
 0x1e6

	)

674 
	#XK_cˇr⁄
 0x1e8

	)

675 
	#XK_eog⁄ek
 0x1ó

	)

676 
	#XK_eˇr⁄
 0x1ec

	)

677 
	#XK_dˇr⁄
 0x1ef

	)

678 
	#XK_d°roke
 0x1f0

	)

679 
	#XK_«cuã
 0x1f1

	)

680 
	#XK_nˇr⁄
 0x1f2

	)

681 
	#XK_odoubÀacuã
 0x1f5

	)

682 
	#XK_udoubÀacuã
 0x1fb

	)

683 
	#XK_rˇr⁄
 0x1f8

	)

684 
	#XK_urög
 0x1f9

	)

685 
	#XK_t˚dûœ
 0x1„

	)

686 
	#XK_abovedŸ
 0x1ff

	)

694 #ifde‡
XK_LATIN3


695 
	#XK_H°roke
 0x2a1

	)

696 
	#XK_HcúcumÊex
 0x2a6

	)

697 
	#XK_IabovedŸ
 0x2a9

	)

698 
	#XK_Gbªve
 0x2ab

	)

699 
	#XK_JcúcumÊex
 0x2ac

	)

700 
	#XK_h°roke
 0x2b1

	)

701 
	#XK_hcúcumÊex
 0x2b6

	)

702 
	#XK_idŸÀss
 0x2b9

	)

703 
	#XK_gbªve
 0x2bb

	)

704 
	#XK_jcúcumÊex
 0x2bc

	)

705 
	#XK_CabovedŸ
 0x2c5

	)

706 
	#XK_CcúcumÊex
 0x2c6

	)

707 
	#XK_GabovedŸ
 0x2d5

	)

708 
	#XK_GcúcumÊex
 0x2d8

	)

709 
	#XK_Ubªve
 0x2dd

	)

710 
	#XK_ScúcumÊex
 0x2de

	)

711 
	#XK_ˇbovedŸ
 0x2e5

	)

712 
	#XK_ccúcumÊex
 0x2e6

	)

713 
	#XK_gabovedŸ
 0x2f5

	)

714 
	#XK_gcúcumÊex
 0x2f8

	)

715 
	#XK_ubªve
 0x2fd

	)

716 
	#XK_scúcumÊex
 0x2„

	)

725 #ifde‡
XK_LATIN4


726 
	#XK_kø
 0x3a2

	)

727 
	#XK_k≠∑
 0x3a2

	)

728 
	#XK_R˚dûœ
 0x3a3

	)

729 
	#XK_Itûde
 0x3a5

	)

730 
	#XK_L˚dûœ
 0x3a6

	)

731 
	#XK_Ema¸⁄
 0x3Ø

	)

732 
	#XK_G˚dûœ
 0x3ab

	)

733 
	#XK_T¶ash
 0x3ac

	)

734 
	#XK_r˚dûœ
 0x3b3

	)

735 
	#XK_ôûde
 0x3b5

	)

736 
	#XK_l˚dûœ
 0x3b6

	)

737 
	#XK_ema¸⁄
 0x3ba

	)

738 
	#XK_g˚dûœ
 0x3bb

	)

739 
	#XK_t¶ash
 0x3bc

	)

740 
	#XK_ENG
 0x3bd

	)

741 
	#XK_íg
 0x3bf

	)

742 
	#XK_Ama¸⁄
 0x3c0

	)

743 
	#XK_Iog⁄ek
 0x3c7

	)

744 
	#XK_EabovedŸ
 0x3cc

	)

745 
	#XK_Ima¸⁄
 0x3cf

	)

746 
	#XK_N˚dûœ
 0x3d1

	)

747 
	#XK_Oma¸⁄
 0x3d2

	)

748 
	#XK_K˚dûœ
 0x3d3

	)

749 
	#XK_Uog⁄ek
 0x3d9

	)

750 
	#XK_Utûde
 0x3dd

	)

751 
	#XK_Uma¸⁄
 0x3de

	)

752 
	#XK_ama¸⁄
 0x3e0

	)

753 
	#XK_iog⁄ek
 0x3e7

	)

754 
	#XK_óbovedŸ
 0x3ec

	)

755 
	#XK_ima¸⁄
 0x3ef

	)

756 
	#XK_n˚dûœ
 0x3f1

	)

757 
	#XK_oma¸⁄
 0x3f2

	)

758 
	#XK_k˚dûœ
 0x3f3

	)

759 
	#XK_uog⁄ek
 0x3f9

	)

760 
	#XK_utûde
 0x3fd

	)

761 
	#XK_uma¸⁄
 0x3„

	)

769 #ifde‡
XK_LATIN9


770 
	#XK_OE
 0x13bc

	)

771 
	#XK_€
 0x13bd

	)

772 
	#XK_Ydüîesis
 0x13be

	)

780 #ifde‡
XK_KATAKANA


781 
	#XK_ovîlöe
 0x47e

	)

782 
	#XK_k™a_fuŒ°›
 0x4a1

	)

783 
	#XK_k™a_›íögbøckë
 0x4a2

	)

784 
	#XK_k™a_˛osögbøckë
 0x4a3

	)

785 
	#XK_k™a_comma
 0x4a4

	)

786 
	#XK_k™a_c⁄jun˘ive
 0x4a5

	)

787 
	#XK_k™a_middÀdŸ
 0x4a5

	)

788 
	#XK_k™a_WO
 0x4a6

	)

789 
	#XK_k™a_a
 0x4a7

	)

790 
	#XK_k™a_i
 0x4a8

	)

791 
	#XK_k™a_u
 0x4a9

	)

792 
	#XK_k™a_e
 0x4Ø

	)

793 
	#XK_k™a_o
 0x4ab

	)

794 
	#XK_k™a_ya
 0x4ac

	)

795 
	#XK_k™a_yu
 0x4ad

	)

796 
	#XK_k™a_yo
 0x4´

	)

797 
	#XK_k™a_tsu
 0x4af

	)

798 
	#XK_k™a_tu
 0x4a‡

	)

799 
	#XK_¥ﬁ⁄gedsound
 0x4b0

	)

800 
	#XK_k™a_A
 0x4b1

	)

801 
	#XK_k™a_I
 0x4b2

	)

802 
	#XK_k™a_U
 0x4b3

	)

803 
	#XK_k™a_E
 0x4b4

	)

804 
	#XK_k™a_O
 0x4b5

	)

805 
	#XK_k™a_KA
 0x4b6

	)

806 
	#XK_k™a_KI
 0x4b7

	)

807 
	#XK_k™a_KU
 0x4b8

	)

808 
	#XK_k™a_KE
 0x4b9

	)

809 
	#XK_k™a_KO
 0x4ba

	)

810 
	#XK_k™a_SA
 0x4bb

	)

811 
	#XK_k™a_SHI
 0x4bc

	)

812 
	#XK_k™a_SU
 0x4bd

	)

813 
	#XK_k™a_SE
 0x4be

	)

814 
	#XK_k™a_SO
 0x4bf

	)

815 
	#XK_k™a_TA
 0x4c0

	)

816 
	#XK_k™a_CHI
 0x4c1

	)

817 
	#XK_k™a_TI
 0x4c1

	)

818 
	#XK_k™a_TSU
 0x4c2

	)

819 
	#XK_k™a_TU
 0x4c2

	)

820 
	#XK_k™a_TE
 0x4c3

	)

821 
	#XK_k™a_TO
 0x4c4

	)

822 
	#XK_k™a_NA
 0x4c5

	)

823 
	#XK_k™a_NI
 0x4c6

	)

824 
	#XK_k™a_NU
 0x4c7

	)

825 
	#XK_k™a_NE
 0x4c8

	)

826 
	#XK_k™a_NO
 0x4c9

	)

827 
	#XK_k™a_HA
 0x4ˇ

	)

828 
	#XK_k™a_HI
 0x4cb

	)

829 
	#XK_k™a_FU
 0x4cc

	)

830 
	#XK_k™a_HU
 0x4c¯

	)

831 
	#XK_k™a_HE
 0x4cd

	)

832 
	#XK_k™a_HO
 0x4˚

	)

833 
	#XK_k™a_MA
 0x4cf

	)

834 
	#XK_k™a_MI
 0x4d0

	)

835 
	#XK_k™a_MU
 0x4d1

	)

836 
	#XK_k™a_ME
 0x4d2

	)

837 
	#XK_k™a_MO
 0x4d3

	)

838 
	#XK_k™a_YA
 0x4d4

	)

839 
	#XK_k™a_YU
 0x4d5

	)

840 
	#XK_k™a_YO
 0x4d6

	)

841 
	#XK_k™a_RA
 0x4d7

	)

842 
	#XK_k™a_RI
 0x4d8

	)

843 
	#XK_k™a_RU
 0x4d9

	)

844 
	#XK_k™a_RE
 0x4da

	)

845 
	#XK_k™a_RO
 0x4db

	)

846 
	#XK_k™a_WA
 0x4dc

	)

847 
	#XK_k™a_N
 0x4dd

	)

848 
	#XK_voi˚dsound
 0x4de

	)

849 
	#XK_£mivoi˚dsound
 0x4df

	)

850 
	#XK_k™a_swôch
 0xFF7E

	)

858 #ifde‡
XK_ARABIC


859 
	#XK_Aøbic_comma
 0x5ac

	)

860 
	#XK_Aøbic_£micﬁ⁄
 0x5bb

	)

861 
	#XK_Aøbic_que°i⁄_m¨k
 0x5bf

	)

862 
	#XK_Aøbic_hamza
 0x5c1

	)

863 
	#XK_Aøbic_madda⁄Æef
 0x5c2

	)

864 
	#XK_Aøbic_hamza⁄Æef
 0x5c3

	)

865 
	#XK_Aøbic_hamza⁄waw
 0x5c4

	)

866 
	#XK_Aøbic_hamzaundîÆef
 0x5c5

	)

867 
	#XK_Aøbic_hamza⁄yeh
 0x5c6

	)

868 
	#XK_Aøbic_Æef
 0x5c7

	)

869 
	#XK_Aøbic_beh
 0x5c8

	)

870 
	#XK_Aøbic_ãhm¨buè
 0x5c9

	)

871 
	#XK_Aøbic_ãh
 0x5ˇ

	)

872 
	#XK_Aøbic_theh
 0x5cb

	)

873 
	#XK_Aøbic_jìm
 0x5cc

	)

874 
	#XK_Aøbic_hah
 0x5cd

	)

875 
	#XK_Aøbic_khah
 0x5˚

	)

876 
	#XK_Aøbic_dÆ
 0x5cf

	)

877 
	#XK_Aøbic_thÆ
 0x5d0

	)

878 
	#XK_Aøbic_ø
 0x5d1

	)

879 
	#XK_Aøbic_zaö
 0x5d2

	)

880 
	#XK_Aøbic_£í
 0x5d3

	)

881 
	#XK_Aøbic_shìn
 0x5d4

	)

882 
	#XK_Aøbic_ßd
 0x5d5

	)

883 
	#XK_Aøbic_dad
 0x5d6

	)

884 
	#XK_Aøbic_èh
 0x5d7

	)

885 
	#XK_Aøbic_zah
 0x5d8

	)

886 
	#XK_Aøbic_aö
 0x5d9

	)

887 
	#XK_Aøbic_ghaö
 0x5da

	)

888 
	#XK_Aøbic_ètwìl
 0x5e0

	)

889 
	#XK_Aøbic_„h
 0x5e1

	)

890 
	#XK_Aøbic_qaf
 0x5e2

	)

891 
	#XK_Aøbic_kaf
 0x5e3

	)

892 
	#XK_Aøbic_œm
 0x5e4

	)

893 
	#XK_Aøbic_mìm
 0x5e5

	)

894 
	#XK_Aøbic_no⁄
 0x5e6

	)

895 
	#XK_Aøbic_ha
 0x5e7

	)

896 
	#XK_Aøbic_heh
 0x5e7

	)

897 
	#XK_Aøbic_waw
 0x5e8

	)

898 
	#XK_Aøbic_Æefmaksuø
 0x5e9

	)

899 
	#XK_Aøbic_yeh
 0x5ó

	)

900 
	#XK_Aøbic_Áth©™
 0x5eb

	)

901 
	#XK_Aøbic_damm©™
 0x5ec

	)

902 
	#XK_Aøbic_ka§©™
 0x5ed

	)

903 
	#XK_Aøbic_Átha
 0x5ì

	)

904 
	#XK_Aøbic_damma
 0x5ef

	)

905 
	#XK_Aøbic_ka§a
 0x5f0

	)

906 
	#XK_Aøbic_shadda
 0x5f1

	)

907 
	#XK_Aøbic_sukun
 0x5f2

	)

908 
	#XK_Aøbic_swôch
 0xFF7E

	)

915 #ifde‡
XK_CYRILLIC


916 
	#XK_Sîbün_dje
 0x6a1

	)

917 
	#XK_Ma˚d⁄ü_gje
 0x6a2

	)

918 
	#XK_Cyrûlic_io
 0x6a3

	)

919 
	#XK_Ukøöün_õ
 0x6a4

	)

920 
	#XK_Ukønün_je
 0x6a4

	)

921 
	#XK_Ma˚d⁄ü_d£
 0x6a5

	)

922 
	#XK_Ukøöün_i
 0x6a6

	)

923 
	#XK_Ukønün_i
 0x6a6

	)

924 
	#XK_Ukøöün_yi
 0x6a7

	)

925 
	#XK_Ukønün_yi
 0x6a7

	)

926 
	#XK_Cyrûlic_je
 0x6a8

	)

927 
	#XK_Sîbün_je
 0x6a8

	)

928 
	#XK_Cyrûlic_lje
 0x6a9

	)

929 
	#XK_Sîbün_lje
 0x6a9

	)

930 
	#XK_Cyrûlic_nje
 0x6Ø

	)

931 
	#XK_Sîbün_nje
 0x6Ø

	)

932 
	#XK_Sîbün_tshe
 0x6ab

	)

933 
	#XK_Ma˚d⁄ü_kje
 0x6ac

	)

934 
	#XK_Byñ‹ussün_sh‹tu
 0x6´

	)

935 
	#XK_Cyrûlic_dzhe
 0x6af

	)

936 
	#XK_Sîbün_dze
 0x6a‡

	)

937 
	#XK_numîosign
 0x6b0

	)

938 
	#XK_Sîbün_DJE
 0x6b1

	)

939 
	#XK_Ma˚d⁄ü_GJE
 0x6b2

	)

940 
	#XK_Cyrûlic_IO
 0x6b3

	)

941 
	#XK_Ukøöün_IE
 0x6b4

	)

942 
	#XK_Ukønün_JE
 0x6b4

	)

943 
	#XK_Ma˚d⁄ü_DSE
 0x6b5

	)

944 
	#XK_Ukøöün_I
 0x6b6

	)

945 
	#XK_Ukønün_I
 0x6b6

	)

946 
	#XK_Ukøöün_YI
 0x6b7

	)

947 
	#XK_Ukønün_YI
 0x6b7

	)

948 
	#XK_Cyrûlic_JE
 0x6b8

	)

949 
	#XK_Sîbün_JE
 0x6b8

	)

950 
	#XK_Cyrûlic_LJE
 0x6b9

	)

951 
	#XK_Sîbün_LJE
 0x6b9

	)

952 
	#XK_Cyrûlic_NJE
 0x6ba

	)

953 
	#XK_Sîbün_NJE
 0x6b®

	)

954 
	#XK_Sîbün_TSHE
 0x6bb

	)

955 
	#XK_Ma˚d⁄ü_KJE
 0x6bc

	)

956 
	#XK_Byñ‹ussün_SHORTU
 0x6be

	)

957 
	#XK_Cyrûlic_DZHE
 0x6bf

	)

958 
	#XK_Sîbün_DZE
 0x6b‡

	)

959 
	#XK_Cyrûlic_yu
 0x6c0

	)

960 
	#XK_Cyrûlic_a
 0x6c1

	)

961 
	#XK_Cyrûlic_be
 0x6c2

	)

962 
	#XK_Cyrûlic_t£
 0x6c3

	)

963 
	#XK_Cyrûlic_de
 0x6c4

	)

964 
	#XK_Cyrûlic_õ
 0x6c5

	)

965 
	#XK_Cyrûlic_ef
 0x6c6

	)

966 
	#XK_Cyrûlic_ghe
 0x6c7

	)

967 
	#XK_Cyrûlic_ha
 0x6c8

	)

968 
	#XK_Cyrûlic_i
 0x6c9

	)

969 
	#XK_Cyrûlic_sh‹ti
 0x6ˇ

	)

970 
	#XK_Cyrûlic_ka
 0x6cb

	)

971 
	#XK_Cyrûlic_ñ
 0x6cc

	)

972 
	#XK_Cyrûlic_em
 0x6cd

	)

973 
	#XK_Cyrûlic_í
 0x6˚

	)

974 
	#XK_Cyrûlic_o
 0x6cf

	)

975 
	#XK_Cyrûlic_≥
 0x6d0

	)

976 
	#XK_Cyrûlic_ya
 0x6d1

	)

977 
	#XK_Cyrûlic_î
 0x6d2

	)

978 
	#XK_Cyrûlic_es
 0x6d3

	)

979 
	#XK_Cyrûlic_ã
 0x6d4

	)

980 
	#XK_Cyrûlic_u
 0x6d5

	)

981 
	#XK_Cyrûlic_zhe
 0x6d6

	)

982 
	#XK_Cyrûlic_ve
 0x6d7

	)

983 
	#XK_Cyrûlic_so·sign
 0x6d8

	)

984 
	#XK_Cyrûlic_yîu
 0x6d9

	)

985 
	#XK_Cyrûlic_ze
 0x6da

	)

986 
	#XK_Cyrûlic_sha
 0x6db

	)

987 
	#XK_Cyrûlic_e
 0x6dc

	)

988 
	#XK_Cyrûlic_shcha
 0x6dd

	)

989 
	#XK_Cyrûlic_che
 0x6de

	)

990 
	#XK_Cyrûlic_h¨dsign
 0x6df

	)

991 
	#XK_Cyrûlic_YU
 0x6e0

	)

992 
	#XK_Cyrûlic_A
 0x6e1

	)

993 
	#XK_Cyrûlic_BE
 0x6e2

	)

994 
	#XK_Cyrûlic_TSE
 0x6e3

	)

995 
	#XK_Cyrûlic_DE
 0x6e4

	)

996 
	#XK_Cyrûlic_IE
 0x6e5

	)

997 
	#XK_Cyrûlic_EF
 0x6e6

	)

998 
	#XK_Cyrûlic_GHE
 0x6e7

	)

999 
	#XK_Cyrûlic_HA
 0x6e8

	)

1000 
	#XK_Cyrûlic_I
 0x6e9

	)

1001 
	#XK_Cyrûlic_SHORTI
 0x6ó

	)

1002 
	#XK_Cyrûlic_KA
 0x6eb

	)

1003 
	#XK_Cyrûlic_EL
 0x6ec

	)

1004 
	#XK_Cyrûlic_EM
 0x6ed

	)

1005 
	#XK_Cyrûlic_EN
 0x6ì

	)

1006 
	#XK_Cyrûlic_O
 0x6ef

	)

1007 
	#XK_Cyrûlic_PE
 0x6f0

	)

1008 
	#XK_Cyrûlic_YA
 0x6f1

	)

1009 
	#XK_Cyrûlic_ER
 0x6f2

	)

1010 
	#XK_Cyrûlic_ES
 0x6f3

	)

1011 
	#XK_Cyrûlic_TE
 0x6f4

	)

1012 
	#XK_Cyrûlic_U
 0x6f5

	)

1013 
	#XK_Cyrûlic_ZHE
 0x6f6

	)

1014 
	#XK_Cyrûlic_VE
 0x6f7

	)

1015 
	#XK_Cyrûlic_SOFTSIGN
 0x6f8

	)

1016 
	#XK_Cyrûlic_YERU
 0x6f9

	)

1017 
	#XK_Cyrûlic_ZE
 0x6Á

	)

1018 
	#XK_Cyrûlic_SHA
 0x6fb

	)

1019 
	#XK_Cyrûlic_E
 0x6fc

	)

1020 
	#XK_Cyrûlic_SHCHA
 0x6fd

	)

1021 
	#XK_Cyrûlic_CHE
 0x6„

	)

1022 
	#XK_Cyrûlic_HARDSIGN
 0x6ff

	)

1030 #ifde‡
XK_GREEK


1031 
	#XK_Gªek_ALPHAac˚¡
 0x7a1

	)

1032 
	#XK_Gªek_EPSILONac˚¡
 0x7a2

	)

1033 
	#XK_Gªek_ETAac˚¡
 0x7a3

	)

1034 
	#XK_Gªek_IOTAac˚¡
 0x7a4

	)

1035 
	#XK_Gªek_IOTAdüîesis
 0x7a5

	)

1036 
	#XK_Gªek_OMICRONac˚¡
 0x7a7

	)

1037 
	#XK_Gªek_UPSILONac˚¡
 0x7a8

	)

1038 
	#XK_Gªek_UPSILONdõªsis
 0x7a9

	)

1039 
	#XK_Gªek_OMEGAac˚¡
 0x7ab

	)

1040 
	#XK_Gªek_ac˚¡dõªsis
 0x7´

	)

1041 
	#XK_Gªek_h‹izb¨
 0x7af

	)

1042 
	#XK_Gªek_ÆphØc˚¡
 0x7b1

	)

1043 
	#XK_Gªek_ïsû⁄ac˚¡
 0x7b2

	)

1044 
	#XK_Gªek_ëØc˚¡
 0x7b3

	)

1045 
	#XK_Gªek_iŸØc˚¡
 0x7b4

	)

1046 
	#XK_Gªek_iŸadõªsis
 0x7b5

	)

1047 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x7b6

	)

1048 
	#XK_Gªek_omi¸⁄ac˚¡
 0x7b7

	)

1049 
	#XK_Gªek_upsû⁄ac˚¡
 0x7b8

	)

1050 
	#XK_Gªek_upsû⁄dõªsis
 0x7b9

	)

1051 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x7ba

	)

1052 
	#XK_Gªek_omegØc˚¡
 0x7bb

	)

1053 
	#XK_Gªek_ALPHA
 0x7c1

	)

1054 
	#XK_Gªek_BETA
 0x7c2

	)

1055 
	#XK_Gªek_GAMMA
 0x7c3

	)

1056 
	#XK_Gªek_DELTA
 0x7c4

	)

1057 
	#XK_Gªek_EPSILON
 0x7c5

	)

1058 
	#XK_Gªek_ZETA
 0x7c6

	)

1059 
	#XK_Gªek_ETA
 0x7c7

	)

1060 
	#XK_Gªek_THETA
 0x7c8

	)

1061 
	#XK_Gªek_IOTA
 0x7c9

	)

1062 
	#XK_Gªek_KAPPA
 0x7ˇ

	)

1063 
	#XK_Gªek_LAMDA
 0x7cb

	)

1064 
	#XK_Gªek_LAMBDA
 0x7cb

	)

1065 
	#XK_Gªek_MU
 0x7cc

	)

1066 
	#XK_Gªek_NU
 0x7cd

	)

1067 
	#XK_Gªek_XI
 0x7˚

	)

1068 
	#XK_Gªek_OMICRON
 0x7cf

	)

1069 
	#XK_Gªek_PI
 0x7d0

	)

1070 
	#XK_Gªek_RHO
 0x7d1

	)

1071 
	#XK_Gªek_SIGMA
 0x7d2

	)

1072 
	#XK_Gªek_TAU
 0x7d4

	)

1073 
	#XK_Gªek_UPSILON
 0x7d5

	)

1074 
	#XK_Gªek_PHI
 0x7d6

	)

1075 
	#XK_Gªek_CHI
 0x7d7

	)

1076 
	#XK_Gªek_PSI
 0x7d8

	)

1077 
	#XK_Gªek_OMEGA
 0x7d9

	)

1078 
	#XK_Gªek_Æpha
 0x7e1

	)

1079 
	#XK_Gªek_bëa
 0x7e2

	)

1080 
	#XK_Gªek_gamma
 0x7e3

	)

1081 
	#XK_Gªek_dñè
 0x7e4

	)

1082 
	#XK_Gªek_ïsû⁄
 0x7e5

	)

1083 
	#XK_Gªek_zëa
 0x7e6

	)

1084 
	#XK_Gªek_ëa
 0x7e7

	)

1085 
	#XK_Gªek_thëa
 0x7e8

	)

1086 
	#XK_Gªek_iŸa
 0x7e9

	)

1087 
	#XK_Gªek_k≠∑
 0x7ó

	)

1088 
	#XK_Gªek_œmda
 0x7eb

	)

1089 
	#XK_Gªek_œmbda
 0x7eb

	)

1090 
	#XK_Gªek_mu
 0x7ec

	)

1091 
	#XK_Gªek_nu
 0x7ed

	)

1092 
	#XK_Gªek_xi
 0x7ì

	)

1093 
	#XK_Gªek_omi¸⁄
 0x7ef

	)

1094 
	#XK_Gªek_pi
 0x7f0

	)

1095 
	#XK_Gªek_rho
 0x7f1

	)

1096 
	#XK_Gªek_sigma
 0x7f2

	)

1097 
	#XK_Gªek_föÆsmÆlsigma
 0x7f3

	)

1098 
	#XK_Gªek_èu
 0x7f4

	)

1099 
	#XK_Gªek_upsû⁄
 0x7f5

	)

1100 
	#XK_Gªek_phi
 0x7f6

	)

1101 
	#XK_Gªek_chi
 0x7f7

	)

1102 
	#XK_Gªek_psi
 0x7f8

	)

1103 
	#XK_Gªek_omega
 0x7f9

	)

1104 
	#XK_Gªek_swôch
 0xFF7E

	)

1112 #ifde‡
XK_TECHNICAL


1113 
	#XK_À·ødiˇl
 0x8a1

	)

1114 
	#XK_t›À·ødiˇl
 0x8a2

	)

1115 
	#XK_h‹izc⁄√˘‹
 0x8a3

	)

1116 
	#XK_t›öãgøl
 0x8a4

	)

1117 
	#XK_bŸöãgøl
 0x8a5

	)

1118 
	#XK_vîtc⁄√˘‹
 0x8a6

	)

1119 
	#XK_t›À·sqbøckë
 0x8a7

	)

1120 
	#XK_bŸÀ·sqbøckë
 0x8a8

	)

1121 
	#XK_t›rightsqbøckë
 0x8a9

	)

1122 
	#XK_bŸrightsqbøckë
 0x8Ø

	)

1123 
	#XK_t›À·∑ªns
 0x8ab

	)

1124 
	#XK_bŸÀ·∑ªns
 0x8ac

	)

1125 
	#XK_t›righç¨ís
 0x8ad

	)

1126 
	#XK_bŸrighç¨ís
 0x8´

	)

1127 
	#XK_À·middÀcuæybø˚
 0x8af

	)

1128 
	#XK_rightmiddÀcuæybø˚
 0x8b0

	)

1129 
	#XK_t›À·summ©i⁄
 0x8b1

	)

1130 
	#XK_bŸÀ·summ©i⁄
 0x8b2

	)

1131 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x8b3

	)

1132 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x8b4

	)

1133 
	#XK_t›rightsumm©i⁄
 0x8b5

	)

1134 
	#XK_bŸrightsumm©i⁄
 0x8b6

	)

1135 
	#XK_rightmiddÀsumm©i⁄
 0x8b7

	)

1136 
	#XK_Às°h™equÆ
 0x8bc

	)

1137 
	#XK_nŸequÆ
 0x8bd

	)

1138 
	#XK_gª©îth™equÆ
 0x8be

	)

1139 
	#XK_öãgøl
 0x8bf

	)

1140 
	#XK_thîef‹e
 0x8c0

	)

1141 
	#XK_v¨üti⁄
 0x8c1

	)

1142 
	#XK_öföôy
 0x8c2

	)

1143 
	#XK_«bœ
 0x8c5

	)

1144 
	#XK_≠¥oxim©e
 0x8c8

	)

1145 
	#XK_simû¨equÆ
 0x8c9

	)

1146 
	#XK_if⁄lyif
 0x8cd

	)

1147 
	#XK_im∂õs
 0x8˚

	)

1148 
	#XK_idítiˇl
 0x8cf

	)

1149 
	#XK_ødiˇl
 0x8d6

	)

1150 
	#XK_ö˛udedö
 0x8da

	)

1151 
	#XK_ö˛udes
 0x8db

	)

1152 
	#XK_öãr£˘i⁄
 0x8dc

	)

1153 
	#XK_uni⁄
 0x8dd

	)

1154 
	#XK_logiˇœnd
 0x8de

	)

1155 
	#XK_logiˇl‹
 0x8df

	)

1156 
	#XK_∑πüldîiv©ive
 0x8ef

	)

1157 
	#XK_fun˘i⁄
 0x8f6

	)

1158 
	#XK_À·¨row
 0x8fb

	)

1159 
	#XK_u∑ºow
 0x8fc

	)

1160 
	#XK_righèºow
 0x8fd

	)

1161 
	#XK_dow«ºow
 0x8„

	)

1169 #ifde‡
XK_SPECIAL


1170 
	#XK_bœnk
 0x9df

	)

1171 
	#XK_sﬁiddüm⁄d
 0x9e0

	)

1172 
	#XK_checkîbﬂrd
 0x9e1

	)

1173 
	#XK_ht
 0x9e2

	)

1174 
	#XK_ff
 0x9e3

	)

1175 
	#XK_¸
 0x9e4

	)

1176 
	#XK_lf
 0x9e5

	)

1177 
	#XK_∆
 0x9e8

	)

1178 
	#XK_vt
 0x9e9

	)

1179 
	#XK_lowrightc‹√r
 0x9ó

	)

1180 
	#XK_u¥ightc‹√r
 0x9eb

	)

1181 
	#XK_u∂e·c‹√r
 0x9ec

	)

1182 
	#XK_lowÀ·c‹√r
 0x9ed

	)

1183 
	#XK_¸ossöglöes
 0x9ì

	)

1184 
	#XK_h‹izlöesˇn1
 0x9ef

	)

1185 
	#XK_h‹izlöesˇn3
 0x9f0

	)

1186 
	#XK_h‹izlöesˇn5
 0x9f1

	)

1187 
	#XK_h‹izlöesˇn7
 0x9f2

	)

1188 
	#XK_h‹izlöesˇn9
 0x9f3

	)

1189 
	#XK_À·t
 0x9f4

	)

1190 
	#XK_righâ
 0x9f5

	)

1191 
	#XK_bŸt
 0x9f6

	)

1192 
	#XK_t›t
 0x9f7

	)

1193 
	#XK_vîtb¨
 0x9f8

	)

1201 #ifde‡
XK_PUBLISHING


1202 
	#XK_em•a˚
 0xØ1

	)

1203 
	#XK_í•a˚
 0xØ2

	)

1204 
	#XK_em3•a˚
 0xØ3

	)

1205 
	#XK_em4•a˚
 0xØ4

	)

1206 
	#XK_digô•a˚
 0xØ5

	)

1207 
	#XK_pun˘•a˚
 0xØ6

	)

1208 
	#XK_thö•a˚
 0xØ7

	)

1209 
	#XK_haú•a˚
 0xØ8

	)

1210 
	#XK_emdash
 0xØ9

	)

1211 
	#XK_ídash
 0xØa

	)

1212 
	#XK_signifbœnk
 0xØc

	)

1213 
	#XK_ñlùsis
 0xØe

	)

1214 
	#XK_doubba£löedŸ
 0xØf

	)

1215 
	#XK_⁄ëhúd
 0xab0

	)

1216 
	#XK_twŸhúds
 0xab1

	)

1217 
	#XK_⁄efi·h
 0xab2

	)

1218 
	#XK_twofi·hs
 0xab3

	)

1219 
	#XK_thªefi·hs
 0xab4

	)

1220 
	#XK_fourfi·hs
 0xab5

	)

1221 
	#XK_⁄esixth
 0xab6

	)

1222 
	#XK_fivesixths
 0xab7

	)

1223 
	#XK_ˇªof
 0xab8

	)

1224 
	#XK_figdash
 0xabb

	)

1225 
	#XK_À·™gÀbøckë
 0xabc

	)

1226 
	#XK_decimÆpoöt
 0xabd

	)

1227 
	#XK_righèngÀbøckë
 0xabe

	)

1228 
	#XK_m¨kî
 0xabf

	)

1229 
	#XK_⁄ìighth
 0xac3

	)

1230 
	#XK_thªìighths
 0xac4

	)

1231 
	#XK_fivìighths
 0xac5

	)

1232 
	#XK_£víeighths
 0xac6

	)

1233 
	#XK_åadem¨k
 0xac9

	)

1234 
	#XK_sig«tuªm¨k
 0xaˇ

	)

1235 
	#XK_åadem¨köcú˛e
 0xacb

	)

1236 
	#XK_À·›íåüngÀ
 0xacc

	)

1237 
	#XK_right›íåüngÀ
 0xacd

	)

1238 
	#XK_em›ícú˛e
 0xa˚

	)

1239 
	#XK_em›íª˘™gÀ
 0xacf

	)

1240 
	#XK_À·sögÀquŸem¨k
 0xad0

	)

1241 
	#XK_rightsögÀquŸem¨k
 0xad1

	)

1242 
	#XK_À·doubÀquŸem¨k
 0xad2

	)

1243 
	#XK_rightdoubÀquŸem¨k
 0xad3

	)

1244 
	#XK_¥es¸ùti⁄
 0xad4

	)

1245 
	#XK_möuãs
 0xad6

	)

1246 
	#XK_£c⁄ds
 0xad7

	)

1247 
	#XK_œtö¸oss
 0xad9

	)

1248 
	#XK_hexagøm
 0xada

	)

1249 
	#XK_fûÀdª˘buŒë
 0xadb

	)

1250 
	#XK_fûÀdÀ·åibuŒë
 0xadc

	)

1251 
	#XK_fûÀdrighâribuŒë
 0xadd

	)

1252 
	#XK_emfûÀdcú˛e
 0xade

	)

1253 
	#XK_emfûÀdª˘
 0xadf

	)

1254 
	#XK_í›ícúcbuŒë
 0x´0

	)

1255 
	#XK_í›ísqu¨ebuŒë
 0x´1

	)

1256 
	#XK_›íª˘buŒë
 0x´2

	)

1257 
	#XK_›íåibuŒëup
 0x´3

	)

1258 
	#XK_›íåibuŒëdown
 0x´4

	)

1259 
	#XK_›í°¨
 0x´5

	)

1260 
	#XK_ífûÀdcúcbuŒë
 0x´6

	)

1261 
	#XK_ífûÀdsqbuŒë
 0x´7

	)

1262 
	#XK_fûÀdåibuŒëup
 0x´8

	)

1263 
	#XK_fûÀdåibuŒëdown
 0x´9

	)

1264 
	#XK_À·poöãr
 0x´a

	)

1265 
	#XK_righçoöãr
 0x´b

	)

1266 
	#XK_˛ub
 0x´c

	)

1267 
	#XK_düm⁄d
 0x´d

	)

1268 
	#XK_hóπ
 0x´e

	)

1269 
	#XK_mÆã£¸oss
 0xaf0

	)

1270 
	#XK_daggî
 0xaf1

	)

1271 
	#XK_doubÀdaggî
 0xaf2

	)

1272 
	#XK_checkm¨k
 0xaf3

	)

1273 
	#XK_bÆlŸ¸oss
 0xaf4

	)

1274 
	#XK_musiˇlsh¨p
 0xaf5

	)

1275 
	#XK_musiˇlÊ©
 0xaf6

	)

1276 
	#XK_mÆesymbﬁ
 0xaf7

	)

1277 
	#XK_„mÆesymbﬁ
 0xaf8

	)

1278 
	#XK_ãÀph⁄e
 0xaf9

	)

1279 
	#XK_ãÀph⁄îec‹dî
 0xaÁ

	)

1280 
	#XK_ph⁄ogøphc›yright
 0xafb

	)

1281 
	#XK_ˇªt
 0xafc

	)

1282 
	#XK_sögÀlowquŸem¨k
 0xafd

	)

1283 
	#XK_doubÀlowquŸem¨k
 0xa„

	)

1284 
	#XK_curs‹
 0xaff

	)

1292 #ifde‡
XK_APL


1293 
	#XK_À·ˇªt
 0xba3

	)

1294 
	#XK_rightˇªt
 0xba6

	)

1295 
	#XK_downˇªt
 0xba8

	)

1296 
	#XK_upˇªt
 0xba9

	)

1297 
	#XK_ovîb¨
 0xbc0

	)

1298 
	#XK_dow¡ack
 0xbc2

	)

1299 
	#XK_upsh€
 0xbc3

	)

1300 
	#XK_down°ûe
 0xbc4

	)

1301 
	#XK_undîb¨
 0xbc6

	)

1302 
	#XK_jŸ
 0xbˇ

	)

1303 
	#XK_quad
 0xbcc

	)

1304 
	#XK_u±ack
 0xb˚

	)

1305 
	#XK_cú˛e
 0xbcf

	)

1306 
	#XK_up°ûe
 0xbd3

	)

1307 
	#XK_downsh€
 0xbd6

	)

1308 
	#XK_rightsh€
 0xbd8

	)

1309 
	#XK_À·sh€
 0xbda

	)

1310 
	#XK_À·èck
 0xbdc

	)

1311 
	#XK_righâack
 0xbfc

	)

1319 #ifde‡
XK_HEBREW


1320 
	#XK_hebªw_doubÀlowlöe
 0xcdf

	)

1321 
	#XK_hebªw_Æïh
 0x˚0

	)

1322 
	#XK_hebªw_bë
 0x˚1

	)

1323 
	#XK_hebªw_bëh
 0x˚1

	)

1324 
	#XK_hebªw_gimñ
 0x˚2

	)

1325 
	#XK_hebªw_gimmñ
 0x˚2

	)

1326 
	#XK_hebªw_dÆë
 0x˚3

	)

1327 
	#XK_hebªw_dÆëh
 0x˚3

	)

1328 
	#XK_hebªw_he
 0x˚4

	)

1329 
	#XK_hebªw_waw
 0x˚5

	)

1330 
	#XK_hebªw_zaö
 0x˚6

	)

1331 
	#XK_hebªw_zayö
 0x˚6

	)

1332 
	#XK_hebªw_chë
 0x˚7

	)

1333 
	#XK_hebªw_hë
 0x˚7

	)

1334 
	#XK_hebªw_ãt
 0x˚8

	)

1335 
	#XK_hebªw_ãth
 0x˚8

	)

1336 
	#XK_hebªw_yod
 0x˚9

	)

1337 
	#XK_hebªw_föÆk≠h
 0x˚a

	)

1338 
	#XK_hebªw_k≠h
 0x˚b

	)

1339 
	#XK_hebªw_œmed
 0x˚c

	)

1340 
	#XK_hebªw_föÆmem
 0x˚d

	)

1341 
	#XK_hebªw_mem
 0x˚e

	)

1342 
	#XK_hebªw_föÆnun
 0x˚f

	)

1343 
	#XK_hebªw_nun
 0xcf0

	)

1344 
	#XK_hebªw_ßmech
 0xcf1

	)

1345 
	#XK_hebªw_ßmekh
 0xcf1

	)

1346 
	#XK_hebªw_ayö
 0xcf2

	)

1347 
	#XK_hebªw_föÆ≥
 0xcf3

	)

1348 
	#XK_hebªw_≥
 0xcf4

	)

1349 
	#XK_hebªw_föÆzade
 0xcf5

	)

1350 
	#XK_hebªw_föÆzadi
 0xcf5

	)

1351 
	#XK_hebªw_zade
 0xcf6

	)

1352 
	#XK_hebªw_zadi
 0xcf6

	)

1353 
	#XK_hebªw_q›h
 0xcf7

	)

1354 
	#XK_hebªw_kuf
 0xcf7

	)

1355 
	#XK_hebªw_ªsh
 0xcf8

	)

1356 
	#XK_hebªw_shö
 0xcf9

	)

1357 
	#XK_hebªw_èw
 0xcÁ

	)

1358 
	#XK_hebªw_èf
 0xcÁ

	)

1359 
	#XK_Hebªw_swôch
 0xFF7E

	)

1367 #ifde‡
XK_THAI


1368 
	#XK_Thai_kokai
 0xda1

	)

1369 
	#XK_Thai_khokhai
 0xda2

	)

1370 
	#XK_Thai_khokhu©
 0xda3

	)

1371 
	#XK_Thai_khokhwai
 0xda4

	)

1372 
	#XK_Thai_khokh⁄
 0xda5

	)

1373 
	#XK_Thai_kh‹akh™g
 0xda6

	)

1374 
	#XK_Thai_ng⁄gu
 0xda7

	)

1375 
	#XK_Thai_choch™
 0xda8

	)

1376 
	#XK_Thai_chochög
 0xda9

	)

1377 
	#XK_Thai_choch™g
 0xdØ

	)

1378 
	#XK_Thai_soso
 0xdab

	)

1379 
	#XK_Thai_choch€
 0xdac

	)

1380 
	#XK_Thai_yoyög
 0xdad

	)

1381 
	#XK_Thai_dochada
 0xd´

	)

1382 
	#XK_Thai_t›©ak
 0xdaf

	)

1383 
	#XK_Thai_thŸh™
 0xdb0

	)

1384 
	#XK_Thai_th⁄™gm⁄tho
 0xdb1

	)

1385 
	#XK_Thai_th›huthao
 0xdb2

	)

1386 
	#XK_Thai_n⁄í
 0xdb3

	)

1387 
	#XK_Thai_dodek
 0xdb4

	)

1388 
	#XK_Thai_tŸao
 0xdb5

	)

1389 
	#XK_Thai_thŸhung
 0xdb6

	)

1390 
	#XK_Thai_thŸhah™
 0xdb7

	)

1391 
	#XK_Thai_thŸh⁄g
 0xdb8

	)

1392 
	#XK_Thai_n⁄u
 0xdb9

	)

1393 
	#XK_Thai_bobaimai
 0xdba

	)

1394 
	#XK_Thai_p›œ
 0xdbb

	)

1395 
	#XK_Thai_ph›hung
 0xdbc

	)

1396 
	#XK_Thai_foÁ
 0xdbd

	)

1397 
	#XK_Thai_ph›h™
 0xdbe

	)

1398 
	#XK_Thai_foÁn
 0xdbf

	)

1399 
	#XK_Thai_phoßmphao
 0xdc0

	)

1400 
	#XK_Thai_moma
 0xdc1

	)

1401 
	#XK_Thai_yoyak
 0xdc2

	)

1402 
	#XK_Thai_r‹ua
 0xdc3

	)

1403 
	#XK_Thai_ru
 0xdc4

	)

1404 
	#XK_Thai_lﬁög
 0xdc5

	)

1405 
	#XK_Thai_lu
 0xdc6

	)

1406 
	#XK_Thai_wow´n
 0xdc7

	)

1407 
	#XK_Thai_soßœ
 0xdc8

	)

1408 
	#XK_Thai_s‹usi
 0xdc9

	)

1409 
	#XK_Thai_sosua
 0xdˇ

	)

1410 
	#XK_Thai_hohù
 0xdcb

	)

1411 
	#XK_Thai_lochuœ
 0xdcc

	)

1412 
	#XK_Thai_ﬂng
 0xdcd

	)

1413 
	#XK_Thai_h⁄okhuk
 0xd˚

	)

1414 
	#XK_Thai_∑iy™noi
 0xdcf

	)

1415 
	#XK_Thai_ßøa
 0xdd0

	)

1416 
	#XK_Thai_maih™ak©
 0xdd1

	)

1417 
	#XK_Thai_ßøØ
 0xdd2

	)

1418 
	#XK_Thai_ßøam
 0xdd3

	)

1419 
	#XK_Thai_ßøi
 0xdd4

	)

1420 
	#XK_Thai_ßøii
 0xdd5

	)

1421 
	#XK_Thai_ßøue
 0xdd6

	)

1422 
	#XK_Thai_ßøuì
 0xdd7

	)

1423 
	#XK_Thai_ßøu
 0xdd8

	)

1424 
	#XK_Thai_ßøuu
 0xdd9

	)

1425 
	#XK_Thai_phöthu
 0xdda

	)

1426 
	#XK_Thai_maih™ak©_maôho
 0xdde

	)

1427 
	#XK_Thai_baht
 0xddf

	)

1428 
	#XK_Thai_ßøe
 0xde0

	)

1429 
	#XK_Thai_ßø´
 0xde1

	)

1430 
	#XK_Thai_ßøo
 0xde2

	)

1431 
	#XK_Thai_ßøaimaimu™
 0xde3

	)

1432 
	#XK_Thai_ßøaimaimÆai
 0xde4

	)

1433 
	#XK_Thai_œkkh™gyao
 0xde5

	)

1434 
	#XK_Thai_maiyamok
 0xde6

	)

1435 
	#XK_Thai_maôaikhu
 0xde7

	)

1436 
	#XK_Thai_maõk
 0xde8

	)

1437 
	#XK_Thai_maôho
 0xde9

	)

1438 
	#XK_Thai_maôri
 0xdó

	)

1439 
	#XK_Thai_maich©èwa
 0xdeb

	)

1440 
	#XK_Thai_th™thakh©
 0xdec

	)

1441 
	#XK_Thai_nikhahô
 0xded

	)

1442 
	#XK_Thai_Àksun
 0xdf0

	)

1443 
	#XK_Thai_Àknung
 0xdf1

	)

1444 
	#XK_Thai_Àks⁄g
 0xdf2

	)

1445 
	#XK_Thai_Àkßm
 0xdf3

	)

1446 
	#XK_Thai_Àksi
 0xdf4

	)

1447 
	#XK_Thai_Àkha
 0xdf5

	)

1448 
	#XK_Thai_Àkhok
 0xdf6

	)

1449 
	#XK_Thai_Àkchë
 0xdf7

	)

1450 
	#XK_Thai_Àk∑ë
 0xdf8

	)

1451 
	#XK_Thai_Àkkao
 0xdf9

	)

1459 #ifde‡
XK_KOREAN


1461 
	#XK_H™gul
 0xff31

	)

1462 
	#XK_H™gul_Sèπ
 0xff32

	)

1463 
	#XK_H™gul_End
 0xff33

	)

1464 
	#XK_H™gul_H™ja
 0xff34

	)

1465 
	#XK_H™gul_Jamo
 0xff35

	)

1466 
	#XK_H™gul_Romaja
 0xff36

	)

1467 
	#XK_H™gul_Codeöput
 0xff37

	)

1468 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1469 
	#XK_H™gul_B™ja
 0xff39

	)

1470 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1471 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1472 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1473 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1474 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1475 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1476 
	#XK_H™gul_swôch
 0xFF7E

	)

1479 
	#XK_H™gul_Kiyeog
 0xó1

	)

1480 
	#XK_H™gul_SßngKiyeog
 0xó2

	)

1481 
	#XK_H™gul_KiyeogSios
 0xó3

	)

1482 
	#XK_H™gul_Nõun
 0xó4

	)

1483 
	#XK_H™gul_NõunJõuj
 0xó5

	)

1484 
	#XK_H™gul_NõunHõuh
 0xó6

	)

1485 
	#XK_H™gul_Dikeud
 0xó7

	)

1486 
	#XK_H™gul_SßngDikeud
 0xó8

	)

1487 
	#XK_H™gul_Rõul
 0xó9

	)

1488 
	#XK_H™gul_RõulKiyeog
 0xóa

	)

1489 
	#XK_H™gul_RõulMõum
 0xób

	)

1490 
	#XK_H™gul_RõulPõub
 0xóc

	)

1491 
	#XK_H™gul_RõulSios
 0xód

	)

1492 
	#XK_H™gul_RõulTõut
 0xóe

	)

1493 
	#XK_H™gul_RõulPhõuf
 0xóf

	)

1494 
	#XK_H™gul_RõulHõuh
 0xeb0

	)

1495 
	#XK_H™gul_Mõum
 0xeb1

	)

1496 
	#XK_H™gul_Põub
 0xeb2

	)

1497 
	#XK_H™gul_SßngPõub
 0xeb3

	)

1498 
	#XK_H™gul_PõubSios
 0xeb4

	)

1499 
	#XK_H™gul_Sios
 0xeb5

	)

1500 
	#XK_H™gul_SßngSios
 0xeb6

	)

1501 
	#XK_H™gul_Ieung
 0xeb7

	)

1502 
	#XK_H™gul_Jõuj
 0xeb8

	)

1503 
	#XK_H™gul_SßngJõuj
 0xeb9

	)

1504 
	#XK_H™gul_Cõuc
 0xeba

	)

1505 
	#XK_H™gul_Khõuq
 0xebb

	)

1506 
	#XK_H™gul_Tõut
 0xebc

	)

1507 
	#XK_H™gul_Phõuf
 0xebd

	)

1508 
	#XK_H™gul_Hõuh
 0xebe

	)

1511 
	#XK_H™gul_A
 0xebf

	)

1512 
	#XK_H™gul_AE
 0xec0

	)

1513 
	#XK_H™gul_YA
 0xec1

	)

1514 
	#XK_H™gul_YAE
 0xec2

	)

1515 
	#XK_H™gul_EO
 0xec3

	)

1516 
	#XK_H™gul_E
 0xec4

	)

1517 
	#XK_H™gul_YEO
 0xec5

	)

1518 
	#XK_H™gul_YE
 0xec6

	)

1519 
	#XK_H™gul_O
 0xec7

	)

1520 
	#XK_H™gul_WA
 0xec8

	)

1521 
	#XK_H™gul_WAE
 0xec9

	)

1522 
	#XK_H™gul_OE
 0xeˇ

	)

1523 
	#XK_H™gul_YO
 0xecb

	)

1524 
	#XK_H™gul_U
 0xecc

	)

1525 
	#XK_H™gul_WEO
 0xecd

	)

1526 
	#XK_H™gul_WE
 0xe˚

	)

1527 
	#XK_H™gul_WI
 0xecf

	)

1528 
	#XK_H™gul_YU
 0xed0

	)

1529 
	#XK_H™gul_EU
 0xed1

	)

1530 
	#XK_H™gul_YI
 0xed2

	)

1531 
	#XK_H™gul_I
 0xed3

	)

1534 
	#XK_H™gul_J_Kiyeog
 0xed4

	)

1535 
	#XK_H™gul_J_SßngKiyeog
 0xed5

	)

1536 
	#XK_H™gul_J_KiyeogSios
 0xed6

	)

1537 
	#XK_H™gul_J_Nõun
 0xed7

	)

1538 
	#XK_H™gul_J_NõunJõuj
 0xed8

	)

1539 
	#XK_H™gul_J_NõunHõuh
 0xed9

	)

1540 
	#XK_H™gul_J_Dikeud
 0xeda

	)

1541 
	#XK_H™gul_J_Rõul
 0xedb

	)

1542 
	#XK_H™gul_J_RõulKiyeog
 0xedc

	)

1543 
	#XK_H™gul_J_RõulMõum
 0xedd

	)

1544 
	#XK_H™gul_J_RõulPõub
 0xede

	)

1545 
	#XK_H™gul_J_RõulSios
 0xedf

	)

1546 
	#XK_H™gul_J_RõulTõut
 0xì0

	)

1547 
	#XK_H™gul_J_RõulPhõuf
 0xì1

	)

1548 
	#XK_H™gul_J_RõulHõuh
 0xì2

	)

1549 
	#XK_H™gul_J_Mõum
 0xì3

	)

1550 
	#XK_H™gul_J_Põub
 0xì4

	)

1551 
	#XK_H™gul_J_PõubSios
 0xì5

	)

1552 
	#XK_H™gul_J_Sios
 0xì6

	)

1553 
	#XK_H™gul_J_SßngSios
 0xì7

	)

1554 
	#XK_H™gul_J_Ieung
 0xì8

	)

1555 
	#XK_H™gul_J_Jõuj
 0xì9

	)

1556 
	#XK_H™gul_J_Cõuc
 0xìa

	)

1557 
	#XK_H™gul_J_Khõuq
 0xìb

	)

1558 
	#XK_H™gul_J_Tõut
 0xìc

	)

1559 
	#XK_H™gul_J_Phõuf
 0xìd

	)

1560 
	#XK_H™gul_J_Hõuh
 0xìe

	)

1563 
	#XK_H™gul_RõulYe‹öHõuh
 0xìf

	)

1564 
	#XK_H™gul_Sunkye⁄geumMõum
 0xef0

	)

1565 
	#XK_H™gul_Sunkye⁄geumPõub
 0xef1

	)

1566 
	#XK_H™gul_P™Sios
 0xef2

	)

1567 
	#XK_H™gul_KkogjiDÆröIeung
 0xef3

	)

1568 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0xef4

	)

1569 
	#XK_H™gul_Ye‹öHõuh
 0xef5

	)

1572 
	#XK_H™gul_AøeA
 0xef6

	)

1573 
	#XK_H™gul_AøeAE
 0xef7

	)

1576 
	#XK_H™gul_J_P™Sios
 0xef8

	)

1577 
	#XK_H™gul_J_KkogjiDÆröIeung
 0xef9

	)

1578 
	#XK_H™gul_J_Ye‹öHõuh
 0xeÁ

	)

1581 
	#XK_K‹ón_W⁄
 0xeff

	)

1585 #ifde‡
XK_CURRENCY


1586 
	#XK_EcuSign
 0x20a0

	)

1587 
	#XK_Cﬁ⁄Sign
 0x20a1

	)

1588 
	#XK_CruzeúoSign
 0x20a2

	)

1589 
	#XK_FFøncSign
 0x20a3

	)

1590 
	#XK_LúaSign
 0x20a4

	)

1591 
	#XK_MûlSign
 0x20a5

	)

1592 
	#XK_NaúaSign
 0x20a6

	)

1593 
	#XK_Pe£èSign
 0x20a7

	)

1594 
	#XK_Ru≥eSign
 0x20a8

	)

1595 
	#XK_W⁄Sign
 0x20a9

	)

1596 
	#XK_NewSheqñSign
 0x20Ø

	)

1597 
	#XK_D⁄gSign
 0x20ab

	)

1598 
	#XK_EuroSign
 0x20ac

	)

	@/usr/include/ctype.h

1 #i‚de‡
__CTYPE_H__


2 
	#__CTYPE_H__


	)

4 
	~<öã∫Æ/˘y≥_c‹e.h
>

8 
	$__SGI_LIBC_USING_FROM_STD
(
iß um
)

9 
	$__SGI_LIBC_USING_FROM_STD
(
ißÕha
)

10 
	$__SGI_LIBC_USING_FROM_STD
(
is˙ål
)

11 
	$__SGI_LIBC_USING_FROM_STD
(
isdigô
)

12 
	$__SGI_LIBC_USING_FROM_STD
(
isgøph
)

13 
	$__SGI_LIBC_USING_FROM_STD
(
i¶owî
)

14 
	$__SGI_LIBC_USING_FROM_STD
(
i•röt
)

15 
	$__SGI_LIBC_USING_FROM_STD
(
i•un˘
)

16 
	$__SGI_LIBC_USING_FROM_STD
(
is•a˚
)

17 
	$__SGI_LIBC_USING_FROM_STD
(
isuµî
)

18 
	$__SGI_LIBC_USING_FROM_STD
(
isxdigô
)

19 
	$__SGI_LIBC_USING_FROM_STD
(
tﬁowî
)

20 
	$__SGI_LIBC_USING_FROM_STD
(
touµî
)

	@/usr/include/errno.h

1 #i‚de‡
__ERRNO_H__


2 
	#__ERRNO_H__


	)

4 
	~<öã∫Æ/î∫o_c‹e.h
>

	@/usr/include/fcntl.h

1 #i‚de‡
__FCNTL_H__


2 
	#__FCNTL_H__


	)

29 
	~<sys/ty≥s.h
>

30 
	~<sys/f˙é.h
>

31 
	~<öã∫Æ/sgima¸os.h
>

33 
	g__SGI_LIBC_BEGIN_EXTERN_C


35 #i‚de‡
S_IRWXU


36 
	#S_IRWXU
 00700

	)

37 
	#S_IRUSR
 00400

	)

38 
	#S_IWUSR
 00200

	)

39 
	#S_IXUSR
 00100

	)

40 
	#S_IRWXG
 00070

	)

41 
	#S_IRGRP
 00040

	)

42 
	#S_IWGRP
 00020

	)

43 
	#S_IXGRP
 00010

	)

44 
	#S_IRWXO
 00007

	)

45 
	#S_IROTH
 00004

	)

46 
	#S_IWOTH
 00002

	)

47 
	#S_IXOTH
 00001

	)

48 
	#S_ISUID
 0x800

	)

49 
	#S_ISGID
 0x400

	)

52 #i‚de‡
SEEK_SET


53 
	#SEEK_SET
 0

	)

54 
	#SEEK_CUR
 1

	)

55 
	#SEEK_END
 2

	)

58 
f˙é
(, , ...);

59 
›í
(const *, , ...);

60 
¸ót
(c⁄° *, 
mode_t
);

62 #i‡
_LFAPI


63 
›í64
(const *, , ...);

64 
¸ót64
(c⁄° *, 
mode_t
);

67 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/ksys/ddmap.h

12 #i‚de‡
__SYS_DDMAP_H__


13 
	#__SYS_DDMAP_H__


	)

17 #ifde‡
__˝lu•lus


48 
__vh™dl_s
 
	tvh™dl_t
;

51 
uvaddr_t
 
v_gëaddr
(
vh™dl_t
 *);

54 
__psunsig√d_t
 
v_gëh™dÀ
(
vh™dl_t
 *);

57 
size_t
 
v_gëÀn
(
vh™dl_t
 *);

64 
v_gë¥Ÿ
(
vh™dl_t
 *,

65 
uvaddr_t
,

95 
	gVDD_DEFAULT
,

96 
	gVDD_COHRNT_EXLWR
,

97 
	gVDD_TRUEUNCACHED


98 } 
	tv_ˇchólgo_t
;

100 
	#VDD_UNCACHED_DEFAULT
 0

	)

101 
	#VDD_UNCACHED_IO
 1

	)

104 
	#VDD_READ
 1

	)

105 
	#VDD_WRITE
 2

	)

106 
	#VDD_EXEC
 4

	)

109 
uvaddr_t
 
	gv_°¨t
;

110 
uvaddr_t
 
	gv_íd
;

111 
v_ˇchólgo_t
 
	gv_cc
;

112 
uöt
 
	gv_uc
;

113 
	gv_¥Ÿ
;

114 } 
	tv_m≠©å_t
;

116 
v_öôphys
(
vh™dl_t
 *,

117 (*)(
vh™dl_t
 *, *, 
uvaddr_t
, ),

118 
size_t
,

120 
v_£tuµhys
(
vh™dl_t
 *,

121 (*)(
vh™dl_t
 *, *, 
uvaddr_t
, ),

122 
size_t
,

124 
v_m≠©å_t
 *,

134 
v_íãΩage
(
vh™dl_t
 *,

135 
uvaddr_t
,

137 
pg˙t_t
);

139 
v_íãΩ‚s
(
vh™dl_t
 *,

140 
uvaddr_t
,

141 
p‚_t
 *,

142 
pg˙t_t
,

144 
__uöt64_t
 
±ebôs
);

151 
v_m≠phys
(
vh™dl_t
 *,

153 
size_t
);

160 
v_m≠p‚s
(
vh™dl_t
 *,

161 
p‚_t
 *,

162 
pg˙t_t
,

164 
__uöt64_t
 
±ebôs
);

171 
v_gëm≠≥dp‚s
(
vh™dl_t
 *,

172 
off_t
,

173 
p‚_t
 *,

174 
pg˙t_t
);

183 
v_Ælo˝age
(
vh™dl_t
 *, 
uvaddr_t
, 
p‚_t
 *, 
size_t
 *, );

185 
v_‰ì∑ge
(
vh™dl_t
 *, 
p‚_t
);

191 
__ddv_h™dÀ_s
 *
	tddv_h™dÀ_t
;

198 
ddv_h™dÀ_t
 
v_gëddv_h™dÀ
(
vh™dl_t
 *);

204 
ddv_de°roy_h™dÀ
(
ddv_h™dÀ_t
);

209 
uvaddr_t
 
ddv_gëaddr
(
ddv_h™dÀ_t
);

214 
size_t
 
ddv_gëÀn
(
ddv_h™dÀ_t
);

219 
ddv_gë¥Ÿ
(
ddv_h™dÀ_t
, 
off_t
, *, *);

225 
ddv_lock
(
ddv_h™dÀ_t
);

230 
ddv_u∆ock
(
ddv_h™dÀ_t
);

244 
ddv_m≠∑ges
(
ddv_h™dÀ_t
,

245 
off_t
,

247 
pg˙t_t
);

248 
ddv_m≠p‚s
(
ddv_h™dÀ_t
,

249 
off_t
,

250 
p‚_t
 *,

251 
pg˙t_t
,

252 
__uöt64_t
 
±ebôs
);

261 
ddv_övÆéb
(
ddv_h™dÀ_t
, 
off_t
, 
ssize_t
);

284 
ddv_övÆphys
(
ddv_h™dÀ_t
,

285 
off_t
,

286 
ssize_t
);

287 
ddv_övÆphys_Ál
(
ddv_h™dÀ_t
,

288 
off_t
,

289 
ssize_t
);

294 
	#VDD_GFX_NOSHARE
 0x0001

	)

295 
gfxdd_mm≠
(, 
size_t
, 
uvaddr_t
,

296 (*)(
vh™dl_t
 *, *, 
uvaddr_t
, ),

297 *, 
v_m≠©å_t
 *, , 
ddv_h™dÀ_t
 *);

298 
gfxdd_mm≠_mem
(, 
size_t
, 
uvaddr_t
, 
ddv_h™dÀ_t
 *);

299 
gfxdd_mm≠_mem_ex
(, 
size_t
, 
uvaddr_t
, 
v_m≠©å_t
 *, , 
ddv_h™dÀ_t
 *);

301 
gfxdd_munm≠
(
ddv_h™dÀ_t
);

302 
gfxdd_lookup
(
ddv_h™dÀ_t
);

303 
gfxdd_ªcy˛e
((*)(*, *, *), *, 
uvaddr_t
);

305 #ifde‡
__˝lu•lus


	@/usr/include/stdio.h

1 #i‚de‡
__STDIO_H__


2 
	#__STDIO_H__


	)

4 
	~<öã∫Æ/°dio_c‹e.h
>

6 
	$__SGI_LIBC_USING_FROM_STD
(
Âos_t
)

7 
	$__SGI_LIBC_USING_FROM_STD
(
size_t
)

8 
	$__SGI_LIBC_USING_FROM_STD
(
˛óªº
)

9 
	$__SGI_LIBC_USING_FROM_STD
(
f˛o£
)

10 
	$__SGI_LIBC_USING_FROM_STD
(
„of
)

11 
	$__SGI_LIBC_USING_FROM_STD
(
„º‹
)

12 
	$__SGI_LIBC_USING_FROM_STD
(
fÊush
)

13 
	$__SGI_LIBC_USING_FROM_STD
(
fgëc
)

14 
	$__SGI_LIBC_USING_FROM_STD
(
fgëpos
)

15 
	$__SGI_LIBC_USING_FROM_STD
(
fgës
)

16 
	$__SGI_LIBC_USING_FROM_STD
(
f›í
)

17 
	$__SGI_LIBC_USING_FROM_STD
(
Ârötf
)

18 
	$__SGI_LIBC_USING_FROM_STD
(
Âutc
)

19 
	$__SGI_LIBC_USING_FROM_STD
(
Âuts
)

20 
	$__SGI_LIBC_USING_FROM_STD
(
‰ód
)

21 
	$__SGI_LIBC_USING_FROM_STD
(
‰e›í
)

22 
	$__SGI_LIBC_USING_FROM_STD
(
fsˇnf
)

23 
	$__SGI_LIBC_USING_FROM_STD
(
f£ek
)

24 
	$__SGI_LIBC_USING_FROM_STD
(
f£ços
)

25 
	$__SGI_LIBC_USING_FROM_STD
(
·ñl
)

26 
	$__SGI_LIBC_USING_FROM_STD
(
fwrôe
)

27 
	$__SGI_LIBC_USING_FROM_STD
(
gëc
)

28 
	$__SGI_LIBC_USING_FROM_STD
(
gëch¨
)

29 
	$__SGI_LIBC_USING_FROM_STD
(
gës
)

30 
	$__SGI_LIBC_USING_FROM_STD
(
≥º‹
)

31 
	$__SGI_LIBC_USING_FROM_STD
(
¥ötf
)

32 
	$__SGI_LIBC_USING_FROM_STD
(
putc
)

33 
	$__SGI_LIBC_USING_FROM_STD
(
putch¨
)

34 
	$__SGI_LIBC_USING_FROM_STD
(
puts
)

35 
	$__SGI_LIBC_USING_FROM_STD
(
ªmove
)

36 
	$__SGI_LIBC_USING_FROM_STD
(
ª«me
)

37 
	$__SGI_LIBC_USING_FROM_STD
(
ªwöd
)

38 
	$__SGI_LIBC_USING_FROM_STD
(
sˇnf
)

39 
	$__SGI_LIBC_USING_FROM_STD
(
£tbuf
)

40 
	$__SGI_LIBC_USING_FROM_STD
(
£tvbuf
)

41 
	$__SGI_LIBC_USING_FROM_STD
(
•rötf
)

42 
	$__SGI_LIBC_USING_FROM_STD
(
ssˇnf
)

43 
	$__SGI_LIBC_USING_FROM_STD
(
tmpfûe
)

44 
	$__SGI_LIBC_USING_FROM_STD
(
tm≤am
)

45 
	$__SGI_LIBC_USING_FROM_STD
(
ungëc
)

46 
	$__SGI_LIBC_USING_FROM_STD
(
vÂrötf
)

47 #i‡
	`deföed
(
__c99
Ë|| (
_SGIAPI
 && 
_NO_ANSIMODE
)

48 
	$__SGI_LIBC_USING_FROM_STD
(
vfsˇnf
)

50 
	$__SGI_LIBC_USING_FROM_STD
(
v¥ötf
)

51 #i‡
	`deföed
(
__c99
Ë|| (
_SGIAPI
 && 
_NO_ANSIMODE
)

52 
	$__SGI_LIBC_USING_FROM_STD
(
vsˇnf
)

54 
	$__SGI_LIBC_USING_FROM_STD
(
v•rötf
)

55 #i‡
	`deföed
(
__c99
Ë|| (
_SGIAPI
 && 
_NO_ANSIMODE
)

56 
	$__SGI_LIBC_USING_FROM_STD
(
vssˇnf
)

	@/usr/include/stdlib.h

1 #i‚de‡
__STDLIB_H__


2 
	#__STDLIB_H__


	)

4 
	~<öã∫Æ/°dlib_c‹e.h
>

6 
	$__SGI_LIBC_USING_FROM_STD
(
size_t
)

7 
	$__SGI_LIBC_USING_FROM_STD
(
©of
)

8 
	$__SGI_LIBC_USING_FROM_STD
(
©oi
)

9 
	$__SGI_LIBC_USING_FROM_STD
(
©ﬁ
)

10 
	$__SGI_LIBC_USING_FROM_STD
(
°πod
)

11 
	$__SGI_LIBC_USING_FROM_STD
(
°πﬁ
)

12 
	$__SGI_LIBC_USING_FROM_STD
(
°πoul
)

13 
	$__SGI_LIBC_USING_FROM_STD
(
ønd
)

14 
	$__SGI_LIBC_USING_FROM_STD
(
§™d
)

15 
	$__SGI_LIBC_USING_FROM_STD
(
ˇŒoc
)

16 
	$__SGI_LIBC_USING_FROM_STD
(
‰ì
)

17 
	$__SGI_LIBC_USING_FROM_STD
(
mÆloc
)

18 
	$__SGI_LIBC_USING_FROM_STD
(
ªÆloc
)

19 
	$__SGI_LIBC_USING_FROM_STD
(
ab‹t
)

20 
	$__SGI_LIBC_USING_FROM_STD
(
©exô
)

21 
	$__SGI_LIBC_USING_FROM_STD
(
exô
)

22 
	$__SGI_LIBC_USING_FROM_STD
(
gëív
)

23 
	$__SGI_LIBC_USING_FROM_STD
(
sy°em
)

24 
	$__SGI_LIBC_USING_FROM_STD
(
b£¨ch
)

25 
	$__SGI_LIBC_USING_FROM_STD
(
qs‹t
)

26 
	$__SGI_LIBC_USING_FROM_STD
(
abs
)

27 
	$__SGI_LIBC_USING_FROM_STD
(
div
)

28 
	$__SGI_LIBC_USING_FROM_STD
(
œbs
)

29 
	$__SGI_LIBC_USING_FROM_STD
(
ldiv
)

30 
	$__SGI_LIBC_USING_FROM_STD
(
mbtowc
)

31 
	$__SGI_LIBC_USING_FROM_STD
(
mbÀn
)

32 
	$__SGI_LIBC_USING_FROM_STD
(
w˘omb
)

33 
	$__SGI_LIBC_USING_FROM_STD
(
mb°owcs
)

34 
	$__SGI_LIBC_USING_FROM_STD
(
wc°ombs
)

	@/usr/include/string.h

1 #i‚de‡
__STRING_H__


2 
	#__STRING_H__


	)

4 
	~<öã∫Æ/°rög_c‹e.h
>

6 
	$__SGI_LIBC_USING_FROM_STD
(
size_t
)

8 
	$__SGI_LIBC_USING_FROM_STD
(
mem˝y
)

9 
	$__SGI_LIBC_USING_FROM_STD
(
memmove
)

10 
	$__SGI_LIBC_USING_FROM_STD
(
°r˝y
)

11 
	$__SGI_LIBC_USING_FROM_STD
(
°∫˝y
)

12 
	$__SGI_LIBC_USING_FROM_STD
(
°rˇt
)

13 
	$__SGI_LIBC_USING_FROM_STD
(
°∫ˇt
)

14 
	$__SGI_LIBC_USING_FROM_STD
(
memc˝y
)

15 
	$__SGI_LIBC_USING_FROM_STD
(
memcmp
)

16 
	$__SGI_LIBC_USING_FROM_STD
(
°rcmp
)

17 
	$__SGI_LIBC_USING_FROM_STD
(
°rcﬁl
)

18 
	$__SGI_LIBC_USING_FROM_STD
(
°∫cmp
)

19 
	$__SGI_LIBC_USING_FROM_STD
(
°rx‰m
)

20 
	$__SGI_LIBC_USING_FROM_STD
(
memchr
)

21 
	$__SGI_LIBC_USING_FROM_STD
(
°rchr
)

22 
	$__SGI_LIBC_USING_FROM_STD
(
°rc•n
)

23 
	$__SGI_LIBC_USING_FROM_STD
(
°Ωbrk
)

24 
	$__SGI_LIBC_USING_FROM_STD
(
°ºchr
)

25 
	$__SGI_LIBC_USING_FROM_STD
(
°r•n
)

26 
	$__SGI_LIBC_USING_FROM_STD
(
°r°r
)

27 
	$__SGI_LIBC_USING_FROM_STD
(
°πok
)

28 
	$__SGI_LIBC_USING_FROM_STD
(
mem£t
)

29 
	$__SGI_LIBC_USING_FROM_STD
(
°ªº‹
)

30 
	$__SGI_LIBC_USING_FROM_STD
(
°æí
)

	@/usr/include/sys/PCI/PCI_defs.h

12 #i‚de‡
__PCI_DEFS_H__


13 
	#__PCI_DEFS_H__


	)

22 
	#PCI_TYPE0_SLOT_MASK
 0xFFFFF800

	)

23 
	#PCI_TYPE0_FUNC_MASK
 0x00000700

	)

24 
	#PCI_TYPE0_REG_MASK
 0x000000FF

	)

26 
	#PCI_TYPE0_SLOT_SHFT
 11

	)

27 
	#PCI_TYPE0_FUNC_SHFT
 8

	)

28 
	#PCI_TYPE0_REG_SHFT
 0

	)

30 
	#PCI_TYPE0_FUNC
(
a
Ë((◊Ë& 
PCI_TYPE0_FUNC_MASK
Ë>> 
PCI_TYPE0_FUNC_SHFT
)

	)

31 
	#PCI_TYPE0_REG
(
a
Ë((◊Ë& 
PCI_TYPE0_REG_MASK
Ë>> 
PCI_TYPE0_REG_SHFT
)

	)

33 
	#PCI_TYPE0
(
s
,
f
,
r
Ë((((1<<(s)Ë<< 
PCI_TYPE0_SLOT_SHFT
Ë& 
PCI_TYPE0_SLOT_MASK
) |\

34 (((
f
Ë<< 
PCI_TYPE0_FUNC_SHFT
Ë& 
PCI_TYPE0_FUNC_MASK
) |\

35 (((
r
Ë<< 
PCI_TYPE0_REG_SHFT
Ë& 
PCI_TYPE0_REG_MASK
))

	)

44 
	#PCI_TYPE1_BUS_MASK
 0x00FF0000

	)

45 
	#PCI_TYPE1_SLOT_MASK
 0x0000F800

	)

46 
	#PCI_TYPE1_FUNC_MASK
 0x00000700

	)

47 
	#PCI_TYPE1_REG_MASK
 0x000000FF

	)

49 
	#PCI_TYPE1_BUS_SHFT
 16

	)

50 
	#PCI_TYPE1_SLOT_SHFT
 11

	)

51 
	#PCI_TYPE1_FUNC_SHFT
 8

	)

52 
	#PCI_TYPE1_REG_SHFT
 0

	)

54 
	#PCI_TYPE1_BUS
(
a
Ë((◊Ë& 
PCI_TYPE1_BUS_MASK
Ë>> 
PCI_TYPE1_BUS_SHFT
)

	)

55 
	#PCI_TYPE1_SLOT
(
a
Ë((◊Ë& 
PCI_TYPE1_SLOT_MASK
Ë>> 
PCI_TYPE1_SLOT_SHFT
)

	)

56 
	#PCI_TYPE1_FUNC
(
a
Ë((◊Ë& 
PCI_TYPE1_FUNC_MASK
Ë>> 
PCI_TYPE1_FUNC_SHFT
)

	)

57 
	#PCI_TYPE1_REG
(
a
Ë((◊Ë& 
PCI_TYPE1_REG_MASK
Ë>> 
PCI_TYPE1_REG_SHFT
)

	)

59 
	#PCI_TYPE1
(
b
,
s
,
f
,
r
Ë((((bË<< 
PCI_TYPE1_BUS_SHFT
Ë& 
PCI_TYPE1_BUS_MASK
) |\

60 (((
s
Ë<< 
PCI_TYPE1_SLOT_SHFT
Ë& 
PCI_TYPE1_SLOT_MASK
) |\

61 (((
f
Ë<< 
PCI_TYPE1_FUNC_SHFT
Ë& 
PCI_TYPE1_FUNC_MASK
) |\

62 (((
r
Ë<< 
PCI_TYPE1_REG_SHFT
Ë& 
PCI_TYPE1_REG_MASK
))

	)

66 
	#PCI_CFG_VENDOR_ID
 0x00

	)

67 
	#PCI_CFG_DEVICE_ID
 0x02

	)

69 
	#PCI_CFG_COMMAND
 0x04

	)

70 
	#PCI_CFG_STATUS
 0x06

	)

77 
	#PCI_CFG_REV_ID
 0x08

	)

78 
	#PCI_CFG_CLASS_CODE
 0x09

	)

79 
	#PCI_CFG_PROG_IF
 0x09

	)

80 
	#PCI_CFG_SUB_CLASS
 0x0A

	)

81 
	#PCI_CFG_BASE_CLASS
 0x0B

	)

83 
	#PCI_CFG_CACHE_LINE
 0x0C

	)

84 
	#PCI_CFG_LATENCY_TIMER
 0x0D

	)

85 
	#PCI_CFG_HEADER_TYPE
 0x0E

	)

86 
	#PCI_CFG_BIST
 0x0F

	)

88 
	#PCI_CFG_BASE_ADDR_0
 0x10

	)

89 
	#PCI_CFG_BASE_ADDR_1
 0x14

	)

90 
	#PCI_CFG_BASE_ADDR_2
 0x18

	)

91 
	#PCI_CFG_BASE_ADDR_3
 0x1C

	)

92 
	#PCI_CFG_BASE_ADDR_4
 0x20

	)

93 
	#PCI_CFG_BASE_ADDR_5
 0x24

	)

95 
	#PCI_CFG_BASE_ADDR_OFF
 0x04

	)

96 
	#PCI_CFG_BASE_ADDR
(
n
Ë(
PCI_CFG_BASE_ADDR_0
 + (n)*
PCI_CFG_BASE_ADDR_OFF
)

	)

97 
	#PCI_CFG_BASE_ADDRS
 6

	)

99 
	#PCI_CFG_CARDBUS_CIS
 0x28

	)

101 
	#PCI_CFG_SUBSYS_VEND_ID
 0x2C

	)

102 
	#PCI_CFG_SUBSYS_ID
 0x2E

	)

104 
	#PCI_EXPANSION_ROM
 0x30

	)

105 
	#PCI_CAPABILITIES_PTR
 0x34

	)

107 
	#PCI_INTR_LINE
 0x3C

	)

108 
	#PCI_INTR_PIN
 0x3D

	)

109 
	#PCI_MIN_GNT
 0x3E

	)

110 
	#PCI_MAX_LAT
 0x3F

	)

112 
	#PCI_CFG_VEND_SPECIFIC
 0x40

	)

116 
	#PCI_CFG_PPB_BUS_PRI
 0x18

	)

117 
	#PCI_CFG_PPB_BUS_SEC
 0x19

	)

118 
	#PCI_CFG_PPB_BUS_SUB
 0x1A

	)

119 
	#PCI_CFG_PPB_SEC_LAT
 0x1B

	)

120 
	#PCI_CFG_PPB_IOBASE
 0x1C

	)

121 
	#PCI_CFG_PPB_IOLIM
 0x1D

	)

122 
	#PCI_CFG_PPB_SEC_STAT
 0x1E

	)

123 
	#PCI_CFG_PPB_MEMBASE
 0x20

	)

124 
	#PCI_CFG_PPB_MEMLIM
 0x22

	)

125 
	#PCI_CFG_PPB_MEMPFBASE
 0x24

	)

126 
	#PCI_CFG_PPB_MEMPFLIM
 0x26

	)

127 
	#PCI_CFG_PPB_MEMPFBASEHI
 0x28

	)

128 
	#PCI_CFG_PPB_MEMPFLIMHI
 0x2C

	)

129 
	#PCI_CFG_PPB_IOBASEHI
 0x30

	)

130 
	#PCI_CFG_PPB_IOLIMHI
 0x32

	)

132 
	#PCI_CFG_PPB_BASE_ADDRS
 2

	)

136 
	#PCI_CFG_PPB_SUB_VENDOR
 0x34

	)

137 
	#PCI_CFG_PPB_SUB_DEVICE
 0x36

	)

138 
	#PCI_CFG_PPB_ROM_BASE
 0x38

	)

139 
	#PCI_CFG_PPB_INT_LINE
 0x3C

	)

140 
	#PCI_CFG_PPB_INT_PIN
 0x3D

	)

141 
	#PCI_CFG_PPB_BRIDGE_CTRL
 0x3E

	)

147 
	#PCI_PPB_IO_ALIGN
 0x10000

	)

148 
	#PCI_PPB_MEM_ALIGN
 0x100000

	)

149 
	#PCI_PPB_MEMPF_ALIGN
 0x100000

	)

151 
	#PCI_PPB_IO_AD16
 0x0

	)

152 
	#PCI_PPB_IO_AD32
 0x1

	)

153 
	#PCI_PPB_MEMPF_AD32
 0x0

	)

154 
	#PCI_PPB_MEMPF_AD64
 0x1

	)

160 
	#PCI_CFG_PPB_CHIP_CTRL
 0x40

	)

161 
	#PCI_CFG_PPB_DIAG_CTRL
 0x41

	)

162 
	#PCI_CFG_PPB_ARB_CTRL
 0x42

	)

163 
	#PCI_CFG_PPB_SERR_DISABLE
 0x64

	)

164 
	#PCI_CFG_PPB_CLK2_CTRL
 0x68

	)

165 
	#PCI_CFG_PPB_SERR_STATUS
 0x6A

	)

168 
	#PCI_CMD_IO_SPACE
 0x001

	)

169 
	#PCI_CMD_MEM_SPACE
 0x002

	)

170 
	#PCI_CMD_BUS_MASTER
 0x004

	)

171 
	#PCI_CMD_SPEC_CYCLES
 0x008

	)

172 
	#PCI_CMD_MEMW_INV_ENAB
 0x010

	)

173 
	#PCI_CMD_VGA_PALETTE_SNP
 0x020

	)

174 
	#PCI_CMD_PAR_ERR_RESP
 0x040

	)

175 
	#PCI_CMD_WAIT_CYCLE_CTL
 0x080

	)

176 
	#PCI_CMD_SERR_ENABLE
 0x100

	)

177 
	#PCI_CMD_F_BK_BK_ENABLE
 0x200

	)

180 
	#PCI_STAT_PAR_ERR_DET
 0x8000

	)

181 
	#PCI_STAT_SYS_ERR
 0x4000

	)

182 
	#PCI_STAT_RCVD_MSTR_ABT
 0x2000

	)

183 
	#PCI_STAT_RCVD_TGT_ABT
 0x1000

	)

184 
	#PCI_STAT_SGNL_TGT_ABT
 0x0800

	)

186 
	#PCI_STAT_DEVSEL_TIMING
 0x0600

	)

187 
	#DEVSEL_TIMING
(
_x
Ë(((_xË>> 9Ë& 3Ë

	)

188 
	#DEVSEL_FAST
 0

	)

189 
	#DEVSEL_MEDIUM
 1

	)

190 
	#DEVSEL_SLOW
 2

	)

192 
	#PCI_STAT_DATA_PAR_ERR
 0x0100

	)

193 
	#PCI_STAT_F_BK_BK_CAP
 0x0080

	)

194 
	#PCI_STAT_UDF_SUPP
 0x0040

	)

195 
	#PCI_STAT_66MHZ_CAP
 0x0020

	)

196 
	#PCI_STAT_CAP_LIST
 0x0010

	)

199 
	#PCI_BIST_BIST_CAP
 0x80

	)

200 
	#PCI_BIST_START_BIST
 0x40

	)

201 
	#PCI_BIST_CMPLTION_MASK
 0x0F

	)

202 
	#PCI_BIST_CMPL_OK
 0x00

	)

205 
	#PCI_BA_IO_CODEMASK
 0x3

	)

206 
	#PCI_BA_IO_SPACE
 0x1

	)

208 
	#PCI_BA_MEM_CODEMASK
 0x‡

	)

209 
	#PCI_BA_MEM_LOCATION
 0x6

	)

210 
	#PCI_BA_MEM_32BIT
 0x0

	)

211 
	#PCI_BA_MEM_1MEG
 0x2

	)

212 
	#PCI_BA_MEM_64BIT
 0x4

	)

213 
	#PCI_BA_PREFETCH
 0x8

	)

215 
	#PCI_BA_ROM_CODEMASK
 0x1

	)

216 
	#PCI_BA_ROM_ENABLE
 0x1

	)

219 
	#PCI_BCTRL_DTO_SERR
 0x0800

	)

220 
	#PCI_BCTRL_DTO
 0x0400

	)

221 
	#PCI_BCTRL_DTO_SEC
 0x0200

	)

222 
	#PCI_BCTRL_DTO_PRI
 0x0100

	)

223 
	#PCI_BCTRL_F_BK_BK_ENABLE
 0x0080

	)

224 
	#PCI_BCTRL_RESET_SEC
 0x0040

	)

225 
	#PCI_BCTRL_MSTR_ABT_MODE
 0x0020

	)

226 
	#PCI_BCTRL_VGA_AF_ENABLE
 0x0008

	)

227 
	#PCI_BCTRL_ISA_AF_ENABLE
 0x0004

	)

228 
	#PCI_BCTRL_SERR_ENABLE
 0x0002

	)

229 
	#PCI_BCTRL_PAR_ERR_RESP
 0x0001

	)

248 
	#PCI_CAP_ID
 0x00

	)

249 
	#PCI_CAP_PTR
 0x01

	)

252 
	#PCI_CAP_PM
 0x01

	)

253 
	#PCI_CAP_AGP
 0x02

	)

254 
	#PCI_CAP_VPD
 0x03

	)

255 
	#PCI_CAP_SID
 0x04

	)

256 
	#PCI_CAP_MSI
 0x05

	)

257 
	#PCI_CAP_HS
 0x06

	)

258 
	#PCI_CAP_PCIX
 0x07

	)

259 
	#PCI_CAP_ID_HT
 0x08

	)

263 #i‚de‡
IOC3_EMULATION


265 
	#PCI_INB
(
x
Ë(*((vﬁ©ûê*)x))

	)

266 
	#PCI_INH
(
x
Ë(*((vﬁ©ûê*)x))

	)

267 
	#PCI_INW
(
x
Ë(*((vﬁ©ûê*)x))

	)

268 
	#PCI_OUTB
(
x
,
y
Ë(*((vﬁ©ûê*)xËy)

	)

269 
	#PCI_OUTH
(
x
,
y
Ë(*((vﬁ©ûê*)xËy)

	)

270 
	#PCI_OUTW
(
x
,
y
Ë(*((vﬁ©ûê*)xËy)

	)

274 
uöt
 
pci_ªad
(* 
addªss
, 
ty≥
);

275 
pci_wrôe
(* 
addªss
, 
d©a
, 
ty≥
);

277 
	#BYTE
 1

	)

278 
	#HALF
 2

	)

279 
	#WORD
 4

	)

281 
	#PCI_INB
(
x
Ë
	`pci_ªad
((*)(x),
BYTE
)

	)

282 
	#PCI_INH
(
x
Ë
	`pci_ªad
((*)(x),
HALF
)

	)

283 
	#PCI_INW
(
x
Ë
	`pci_ªad
((*)(x),
WORD
)

	)

284 
	#PCI_OUTB
(
x
,
y
Ë
	`pci_wrôe
((*)(x),(y),
BYTE
)

	)

285 
	#PCI_OUTH
(
x
,
y
Ë
	`pci_wrôe
((*)(x),(y),
HALF
)

	)

286 
	#PCI_OUTW
(
x
,
y
Ë
	`pci_wrôe
((*)(x),(y),
WORD
)

	)

291 #ifde‡
IP22


292 
	#BYTECOUNT_W_GIO
 0xbf400000

	)

301 
	#CFG1_ADDR_REGISTER_MASK
 0x000000fc

	)

302 
	#CFG1_ADDR_FUNCTION_MASK
 0x00000700

	)

303 
	#CFG1_ADDR_DEVICE_MASK
 0x0000f800

	)

304 
	#CFG1_ADDR_BUS_MASK
 0x00ff0000

	)

306 
	#CFG1_REGISTER_SHIFT
 2

	)

307 
	#CFG1_FUNCTION_SHIFT
 8

	)

308 
	#CFG1_DEVICE_SHIFT
 11

	)

309 
	#CFG1_BUS_SHIFT
 16

	)

311 #ifde‡
IP32


315 
	#PCI_CONFIG_BITS
 0x„0085ff

	)

316 
	#PCI_CONTROL_MRMRA_ENABLE
 0x00000800

	)

317 
	#PCI_FIRST_IO_ADDR
 0x1000

	)

318 
	#PCI_IO_MAP_INCR
 0x1000

	)

324 
	#PCI_CFG_CLASS_PRE20
 0x00

	)

325 
	#PCI_CFG_CLASS_STORAGE
 0x01

	)

326 
	#PCI_CFG_CLASS_NETWORK
 0x02

	)

327 
	#PCI_CFG_CLASS_DISPLAY
 0x03

	)

328 
	#PCI_CFG_CLASS_MMEDIA
 0x04

	)

329 
	#PCI_CFG_CLASS_MEMORY
 0x05

	)

330 
	#PCI_CFG_CLASS_BRIDGE
 0x06

	)

331 
	#PCI_CFG_CLASS_COMM
 0x07

	)

332 
	#PCI_CFG_CLASS_BASE
 0x08

	)

333 
	#PCI_CFG_CLASS_INPUT
 0x09

	)

334 
	#PCI_CFG_CLASS_DOCK
 0x0A

	)

335 
	#PCI_CFG_CLASS_PROC
 0x0B

	)

336 
	#PCI_CFG_CLASS_SERIALBUS
 0x0C

	)

337 
	#PCI_CFG_CLASS_OTHER
 0xFF

	)

342 
	#PCI_CFG_SUBCLASS_BRIDGE_HOST
 0x00

	)

343 
	#PCI_CFG_SUBCLASS_BRIDGE_ISA
 0x01

	)

344 
	#PCI_CFG_SUBCLASS_BRIDGE_EISA
 0x02

	)

345 
	#PCI_CFG_SUBCLASS_BRIDGE_MC
 0x03

	)

346 
	#PCI_CFG_SUBCLASS_BRIDGE_PCI
 0x04

	)

347 
	#PCI_CFG_SUBCLASS_BRIDGE_PCMCIA
 0x05

	)

348 
	#PCI_CFG_SUBCLASS_BRIDGE_NUBUS
 0x06

	)

349 
	#PCI_CFG_SUBCLASS_BRIDGE_CARDBUS
 0x07

	)

350 
	#PCI_CFG_SUBCLASS_BRIDGE_OTHER
 0x80

	)

352 #ifde‡
_LANGUAGE_C


357 vﬁ©ûê
	spci_cfg_s
 {

358 
ush‹t_t
 
	mdev_id
;

359 
ush‹t_t
 
	mvíd‹_id
;

360 
ush‹t_t
 
	m°©us
;

361 
ush‹t_t
 
	mcmd
;

362 
uch¨_t
 
	m˛ass
;

363 
uch¨_t
 
	msub_˛ass
;

364 
uch¨_t
 
	m¥og_if
;

365 
uch¨_t
 
	mªv
;

366 
uch¨_t
 
	mbi°
;

367 
uch¨_t
 
	mhdr_ty≥
;

368 
uch¨_t
 
	m…
;

369 
uch¨_t
 
	mlöe_size
;

370 
__uöt32_t
 
	mb¨
[6];

371 
__uöt32_t
 
	mˇrdbus
;

372 
ush‹t_t
 
	msubsys_dev_id
;

373 
ush‹t_t
 
	msubsys_víd‹_id
;

374 
__uöt32_t
 
	mexp_rom
;

375 
__uöt32_t
 
	mªs
[2];

376 
uch¨_t
 
	mmax_œt
;

377 
uch¨_t
 
	mmö_g¡
;

378 
uch¨_t
 
	möt_pö
;

379 
uch¨_t
 
	möt_löe
;

380 } 
	tpci_cfg_t
;

386 vﬁ©ûê
	spci_cfg1_s
 {

387 
ush‹t_t
 
	mdev_id
;

388 
ush‹t_t
 
	mvíd‹_id
;

389 
ush‹t_t
 
	m°©us
;

390 
ush‹t_t
 
	mcmd
;

391 
uch¨_t
 
	m˛ass
;

392 
uch¨_t
 
	msub_˛ass
;

393 
uch¨_t
 
	m¥og_if
;

394 
uch¨_t
 
	mªv
;

395 
uch¨_t
 
	mbi°
;

396 
uch¨_t
 
	mhdr_ty≥
;

397 
uch¨_t
 
	m…
;

398 
uch¨_t
 
	mlöe_size
;

399 
__uöt32_t
 
	mb¨
[2];

400 
uch¨_t
 
	m¶t
;

401 
uch¨_t
 
	msub_bus_num
;

402 
uch¨_t
 
	m¢d_bus_num
;

403 
uch¨_t
 
	m¥i_bus_num
;

404 
ush‹t_t
 
	m¢d_°©us
;

405 
uch¨_t
 
	mio_limô
;

406 
uch¨_t
 
	mio_ba£
;

407 
ush‹t_t
 
	mmem_limô
;

408 
ush‹t_t
 
	mmem_ba£
;

409 
ush‹t_t
 
	mpmem_limô
;

410 
ush‹t_t
 
	mpmem_ba£
;

411 
__uöt32_t
 
	mpmem_limô_uµî
;

412 
__uöt32_t
 
	mpmem_ba£_uµî
;

413 
ush‹t_t
 
	mio_limô_uµî
;

414 
ush‹t_t
 
	mio_ba£_uµî
;

415 
__uöt32_t
 
	mªs
;

416 
__uöt32_t
 
	mexp_rom
;

417 
ush‹t_t
 
	mµb_c⁄åﬁ
;

418 
uch¨_t
 
	möt_pö
;

419 
uch¨_t
 
	möt_löe
;

420 } 
	tpci_cfg1_t
;

425 vﬁ©ûê
	sˇp_pcix_cmd_ªg_s
 {

426 
ush‹t_t
 
	mª£rved1
: 9,

427 
	mmax_•lô
: 3,

428 
	mmax_mem_ªad_˙t
: 2,

429 
	míabÀ_ªœxed_‹dî
: 1,

430 
	md©a_∑rôy_íabÀ
: 1;

431 } 
	tˇp_pcix_cmd_ªg_t
;

433 vﬁ©ûê
	sˇp_pcix_°©_ªg_s
 {

434 
__uöt32_t
 
	mª£rved1
: 2,

435 
	m•lô_com∂t_îr
: 1,

436 
	mmax_cum_ªad
: 3,

437 
	mmax_out_•lô
: 3,

438 
	mmax_mem_ªad_˙t
: 2,

439 
	mdevi˚_com∂ex
: 1,

440 
	mu√x≥˘_•lô_com∂t
: 1,

441 
	m•lô_com∂t_disˇrd
: 1,

442 
	mmhz133_ˇ∑bÀ
: 1,

443 
	mbô64_devi˚
: 1,

444 
	mbus_num
: 8,

445 
	mdev_num
: 5,

446 
	mfunc_num
: 3;

447 } 
	tˇp_pcix_°©_ªg_t
;

449 vﬁ©ûê
	sˇp_pcix_ty≥0_s
 {

450 
ˇp_pcix_cmd_ªg_t
 
	mpcix_ty≥0_comm™d
;

451 
uch¨_t
 
	mpcix_ˇp_nxt
;

452 
uch¨_t
 
	mpcix_ˇp_id
;

453 
ˇp_pcix_°©_ªg_t
 
	mpcix_ty≥0_°©us
;

454 } 
	tˇp_pcix_ty≥0_t
;

	@/usr/include/sys/PCI/pciio.h

12 #i‚de‡
__PCI_PCIIO_H__


13 
	#__PCI_PCIIO_H__


	)

21 
	~<sys/i€º‹.h
>

22 
	~<sys/iobus.h
>

25 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

27 
	~<sys/gøph.h
>

28 
	~<sys/dmam≠.h
>

29 
	~<sys/Æíli°.h
>

31 #ifde‡
__˝lu•lus


35 
	tpciio_víd‹_id_t
;

37 
	#PCIIO_VENDOR_ID_NONE
 -1

	)

39 
	tpciio_devi˚_id_t
;

41 
	#PCIIO_DEVICE_ID_NONE
 -1

	)

43 
	tpciio_bus_t
;

44 
	tpciio_¶Ÿ_t
;

45 
	tpciio_fun˘i⁄_t
;

47 
	#PCIIO_SLOTS
 ((
pciio_¶Ÿ_t
)32)

	)

48 
	#PCIIO_FUNCS
 ((
pciio_fun˘i⁄_t
)8)

	)

50 
	#PCIIO_BUS_NONE
 ((
pciio_bus_t
)255Ë

	)

51 
	#PCIIO_SLOT_NONE
 ((
pciio_¶Ÿ_t
)255)

	)

52 
	#PCIIO_FUNC_NONE
 ((
pciio_fun˘i⁄_t
)255)

	)

54 
	tpciio_öå_löe_t
;

56 
	#PCIIO_INTR_LINE
(
n
Ë(0x1 << (n))

	)

57 
	#PCIIO_INTR_LINE_A
 (0x1)

	)

58 
	#PCIIO_INTR_LINE_B
 (0x2)

	)

59 
	#PCIIO_INTR_LINE_C
 (0x4)

	)

60 
	#PCIIO_INTR_LINE_D
 (0x8)

	)

62 
	tpciio_•a˚_t
;

64 
	#PCIIO_SPACE_NONE
 (0)

	)

65 
	#PCIIO_SPACE_ROM
 (1)

	)

66 
	#PCIIO_SPACE_IO
 (2)

	)

68 
	#PCIIO_SPACE_MEM
 (4)

	)

69 
	#PCIIO_SPACE_MEM32
 (5)

	)

70 
	#PCIIO_SPACE_MEM64
 (6)

	)

71 
	#PCIIO_SPACE_CFG
 (7)

	)

72 
	#PCIIO_SPACE_WIN0
 (8)

	)

73 
	#PCIIO_SPACE_WIN
(
n
Ë(
PCIIO_SPACE_WIN0
+“)Ë

	)

75 
	#PCIIO_SPACE_BAD
 (15)

	)

78 
	#PCIIO_SPACE_USER0
 (20)

	)

79 
	#PCIIO_SPACE_USER
(
n
Ë(
PCIIO_SPACE_USER0
+“)Ë

	)

87 
	#PCI_NOWHERE
 (0)

	)

162 
	#PCIIO_FIXED
 
DMAMAP_FIXED


	)

163 
	#PCIIO_NOSLEEP
 
DMAMAP_NOSLEEP


	)

164 
	#PCIIO_INPLACE
 
DMAMAP_INPLACE


	)

166 
	#PCIIO_DMA_CMD
 0x0010

	)

167 
	#PCIIO_DMA_DATA
 0x0020

	)

168 
	#PCIIO_DMA_A64
 0x0040

	)

170 
	#PCIIO_WRITE_GATHER
 0x0100

	)

171 
	#PCIIO_NOWRITE_GATHER
 0x0200

	)

172 
	#PCIIO_PREFETCH
 0x0400

	)

173 
	#PCIIO_NOPREFETCH
 0x0800

	)

180 
	#PCIIO_BYTE_STREAM
 0x1000

	)

181 
	#PCIIO_WORD_VALUES
 0x2000

	)

193 
	epciio_ídün_e
 {

194 
PCIDMA_ENDIAN_BIG
,

195 
PCIDMA_ENDIAN_LITTLE


196 } 
	tpciio_ídün_t
;

207 
	epciio_¥i‹ôy_e
 {

208 
PCI_PRIO_LOW
,

209 
PCI_PRIO_HIGH
,

210 
PCI_PRIO_RT


211 } 
	tpciio_¥i‹ôy_t
;

216 
	epciio_asic_ty≥_e
 {

217 
PCIIO_ASIC_TYPE_UNKNOWN
,

218 
PCIIO_ASIC_TYPE_MACE
,

219 
PCIIO_ASIC_TYPE_BRIDGE
,

220 
PCIIO_ASIC_TYPE_XBRIDGE
,

221 
PCIIO_ASIC_TYPE_PIC
,

222 
PCIIO_ASIC_TYPE_TIOCP


223 } 
	tpciio_asic_ty≥_t
;

225 
	epciio_bus_ty≥_e
 {

226 
PCIIO_BUS_TYPE_UNKNOWN
,

227 
PCIIO_BUS_TYPE_PCI
,

228 
PCIIO_BUS_TYPE_PCIX


229 } 
	tpciio_bus_ty≥_t
;

231 
	epciio_bus_•ìd_e
 {

232 
PCIIO_BUS_SPEED_UNKNOWN
,

233 
PCIIO_BUS_SPEED_33
,

234 
PCIIO_BUS_SPEED_66
,

235 
PCIIO_BUS_SPEED_100
,

236 
PCIIO_BUS_SPEED_133


237 } 
	tpciio_bus_•ìd_t
;

239 
	#PCIIO_GET_MULTI_MASTER
(
bi
Ë(
	`pciio_busöfo_mu…i_ma°î_gë
(bi))

	)

240 
	#PCIIO_GET_ASIC_TYPE
(
bi
Ë(
	`pciio_busöfo_asic_ty≥_gë
(bi))

	)

241 
	#PCIIO_GET_BUS_TYPE
(
bi
Ë(
	`pciio_busöfo_bus_ty≥_gë
(bi))

	)

242 
	#PCIIO_GET_BUS_SPEED
(
bi
Ë(
	`pciio_busöfo_bus_•ìd_gë
(bi))

	)

243 
	#PCIIO_IS_BUS_TYPE_PCI
(
bi
Ë(
PCIIO_BUS_TYPE_PCI
 == \

244 (
	`pciio_busöfo_bus_ty≥_gë
(
bi
)))

	)

245 
	#PCIIO_IS_BUS_TYPE_PCIX
(
bi
Ë(
PCIIO_BUS_TYPE_PCIX
 == \

246 (
	`pciio_busöfo_bus_ty≥_gë
(
bi
)))

	)

247 
	#PCIIO_IS_BUS_SPEED_33
(
bi
Ë(
PCIIO_BUS_SPEED_33
 == \

248 (
	`pciio_busöfo_bus_•ìd_gë
(
bi
)))

	)

249 
	#PCIIO_IS_BUS_SPEED_66
(
bi
Ë(
PCIIO_BUS_SPEED_66
 == \

250 (
	`pciio_busöfo_bus_•ìd_gë
(
bi
)))

	)

251 
	#PCIIO_IS_BUS_SPEED_100
(
bi
Ë(
PCIIO_BUS_SPEED_100
 == \

252 (
	`pciio_busöfo_bus_•ìd_gë
(
bi
)))

	)

253 
	#PCIIO_IS_BUS_SPEED_133
(
bi
Ë(
PCIIO_BUS_SPEED_133
 == \

254 (
	`pciio_busöfo_bus_•ìd_gë
(
bi
)))

	)

261 
pciio_piom≠_s
 *
	tpciio_piom≠_t
;

262 
pciio_dmam≠_s
 *
	tpciio_dmam≠_t
;

263 
pciio_öå_s
 *
	tpciio_öå_t
;

264 
pciio_öfo_s
 *
	tpciio_öfo_t
;

265 
pciio_pio•a˚_s
 *
	tpciio_pio•a˚_t
;

266 
pciio_µb_s
 *
	tpciio_µb_t
;

267 
pciio_wö_öfo_s
 *
	tpciio_wö_öfo_t
;

268 
pciio_wö_m≠_s
 *
	tpciio_wö_m≠_t
;

269 
pciio_wö_Æloc_s
 *
	tpciio_wö_Æloc_t
;

270 
pciio_bus_m≠_s
 *
	tpciio_bus_m≠_t
;

271 
pciio_busöfo_s
 *
	tpciio_busöfo_t
;

332 
	#PCIIO_PIOMAP_CFG
 (0x1)

	)

333 
	#PCIIO_PIOMAP_MEM
 (0x2)

	)

334 
	#PCIIO_PIOMAP_IO
 (0x4)

	)

335 
	#PCIIO_PIOMAP_WIN
(
n
Ë(0x8+“))

	)

337 
pciio_piom≠_t


338 
	tpciio_piom≠_Æloc_f
 (
	tvîãx_hdl_t
 
	tdev
,

339 
	tdevi˚_desc_t
 
	tdev_desc
,

340 
	tpciio_•a˚_t
 
	t•a˚
,

341 
	ti›addr_t
 
	tpcùio_addr
,

342 
	tsize_t
 
	tbyã_cou¡
,

343 
	tsize_t
 
	tbyã_cou¡_max
,

344 
	tÊags
);

347 
	tpciio_piom≠_‰ì_f
 (
	tpciio_piom≠_t
 
	tpciio_piom≠
);

349 
ˇddr_t


350 
	tpciio_piom≠_addr_f
 (
	tpciio_piom≠_t
 
	tpciio_piom≠
,

351 
	ti›addr_t
 
	tpciio_addr
,

352 
	tsize_t
 
	tbyã_cou¡
);

355 
	tpciio_piom≠_d⁄e_f
 (
	tpciio_piom≠_t
 
	tpciio_piom≠
);

357 
ˇddr_t


358 
	tpciio_piŸøns_addr_f
 (
	tvîãx_hdl_t
 
	tdev
,

359 
	tdevi˚_desc_t
 
	tdev_desc
,

360 
	tpciio_•a˚_t
 
	t•a˚
,

361 
	ti›addr_t
 
	tpciio_addr
,

362 
	tsize_t
 
	tbyã_cou¡
,

363 
	tÊags
);

365 
ˇddr_t


366 
	tpciio_pio_addr_f
 (
	tvîãx_hdl_t
 
	tdev
,

367 
	tdevi˚_desc_t
 
	tdev_desc
,

368 
	tpciio_•a˚_t
 
	t•a˚
,

369 
	ti›addr_t
 
	tpciio_addr
,

370 
	tsize_t
 
	tbyã_cou¡
,

371 
	tpciio_piom≠_t
 *
	tm≠p
,

372 
	tÊags
);

374 
i›addr_t


375 
	tpciio_pio•a˚_Æloc_f
 (
	tvîãx_hdl_t
 
	tdev
,

376 
	tdevi˚_desc_t
 
	tdev_desc
,

377 
	tpciio_•a˚_t
 
	t•a˚
,

378 
	tsize_t
 
	tbyã_cou¡
,

379 
	tsize_t
 
	tÆignmít
);

382 
	tpciio_pio•a˚_‰ì_f
 (
	tvîãx_hdl_t
 
	tdev
,

383 
	tpciio_•a˚_t
 
	t•a˚
,

384 
	ti›addr_t
 
	tpci_addr
,

385 
	tsize_t
 
	tsize
);

389 
pciio_dmam≠_t


390 
	tpciio_dmam≠_Æloc_f
 (
	tvîãx_hdl_t
 
	tdev
,

391 
	tdevi˚_desc_t
 
	tdev_desc
,

392 
	tsize_t
 
	tbyã_cou¡_max
,

393 
	tÊags
);

396 
	tpciio_dmam≠_‰ì_f
 (
	tpciio_dmam≠_t
 
	tdmam≠
);

398 
i›addr_t


399 
	tpciio_dmam≠_addr_f
 (
	tpciio_dmam≠_t
 
	tdmam≠
,

400 
	t∑ddr_t
 
	t∑ddr
,

401 
	tsize_t
 
	tbyã_cou¡
);

403 
Æíli°_t


404 
	tpciio_dmam≠_li°_f
 (
	tpciio_dmam≠_t
 
	tdmam≠
,

405 
	tÆíli°_t
 
	tÆíli°
,

406 
	tÊags
);

409 
	tpciio_dmam≠_d⁄e_f
 (
	tpciio_dmam≠_t
 
	tdmam≠
);

411 
i›addr_t


412 
	tpciio_dm©øns_addr_f
 (
	tvîãx_hdl_t
 
	tdev
,

413 
	tdevi˚_desc_t
 
	tdev_desc
,

414 
	t∑ddr_t
 
	t∑ddr
,

415 
	tsize_t
 
	tbyã_cou¡
,

416 
	tÊags
);

418 
i›addr_t


419 
	tpciio_dma_addr_f
 (
	tvîãx_hdl_t
 
	tdev
,

420 
	tdevi˚_desc_t
 
	tdev_desc
,

421 
	t∑ddr_t
 
	taddr
,

422 
	tsize_t
 
	tbyã_cou¡
,

423 
	tpciio_dmam≠_t
 *
	tm≠p
,

424 
	tÊags
);

426 
Æíli°_t


427 
	tpciio_dm©øns_li°_f
 (
	tvîãx_hdl_t
 
	tdev
,

428 
	tdevi˚_desc_t
 
	tdev_desc
,

429 
	tÆíli°_t
 
	t∑À∆i°
,

430 
	tÊags
);

433 
	tpciio_dmam≠_døö_f
 (
	tpciio_dmam≠_t
 
	tm≠
);

436 
	tpciio_dmØddr_døö_f
 (
	tvîãx_hdl_t
 
	tvhdl
,

437 
	t∑ddr_t
 
	taddr
,

438 
	tsize_t
 
	tbyãs
);

441 
	tpciio_dmÆi°_døö_f
 (
	tvîãx_hdl_t
 
	tvhdl
,

442 
	tÆíli°_t
 
	tli°
);

446 
pciio_öå_t


447 
	tpciio_öå_Æloc_f
 (
	tvîãx_hdl_t
 
	tdev
,

448 
	tdevi˚_desc_t
 
	tdev_desc
,

449 
	tpciio_öå_löe_t
 
	tlöes
,

450 
	tvîãx_hdl_t
 
	tow√r_dev
);

453 
	tpciio_öå_‰ì_f
 (
	tpciio_öå_t
 
	töå_hdl
);

456 
	tpciio_öå_c⁄√˘_f
 (
	tpciio_öå_t
 
	töå_hdl
,

457 
	töå_func_t
 
	töå_func
,

458 
	töå_¨g_t
 
	töå_¨g
,

459 *
	tthªad
);

462 
	tpciio_öå_disc⁄√˘_f
 (
	tpciio_öå_t
 
	töå_hdl
);

464 
vîãx_hdl_t


465 
	tpciio_öå_˝u_gë_f
 (
	tpciio_öå_t
 
	töå_hdl
);

468 
	tpciio_öå_£tmu°run_f
 (
	tpciio_öå_t
 
	töå_hdl
, 
	t˝uid_t
 
	t˝u
);

474 
	tpciio_¥ovidî_°¨tup_f
 (
	tvîãx_hdl_t
 
	tpciio_¥ovidî
);

477 
	tpciio_¥ovidî_shutdown_f
 (
	tvîãx_hdl_t
 
	tpciio_¥ovidî
);

480 
	tpciio_ª£t_f
 (
	tvîãx_hdl_t
 
	tc⁄n
);

483 
	tpciio_wrôe_g©hî_Êush_f
 (
	tvîãx_hdl_t
 
	tdev
);

485 
pciio_ídün_t


486 
	tpciio_ídün_£t_f
 (
	tvîãx_hdl_t
 
	tdev
,

487 
	tpciio_ídün_t
 
	tdevi˚_íd
,

488 
	tpciio_ídün_t
 
	tdesúed_íd
);

490 
pciio_¥i‹ôy_t


491 
	tpciio_¥i‹ôy_£t_f
 (
	tvîãx_hdl_t
 
	tpciˇrd
,

492 
	tpciio_¥i‹ôy_t
 
	tdevi˚_¥io
);

494 
uöt64_t


495 
	tpciio_c⁄fig_gë_f
 (
	tvîãx_hdl_t
 
	tc⁄n
,

496 
	tªg
,

497 
	tsize
);

500 
	tpciio_c⁄fig_£t_f
 (
	tvîãx_hdl_t
 
	tc⁄n
,

501 
	tªg
,

502 
	tsize
,

503 
	tuöt64_t
 
	tvÆue
);

506 
	tpciio_îr‹_devíabÀ_f
 (
	tvîãx_hdl_t
 
	tpc⁄n_vhdl
, 
	tîr‹_code
);

508 
pciio_¶Ÿ_t


509 
	tpciio_îr‹_exåa˘_f
 (
	tvîãx_hdl_t
 
	tvhdl
,

510 
	tpciio_•a˚_t
 *
	t•a˚p
,

511 
	ti›addr_t
 *
	taddΩ
);

514 
	tpciio_drivî_ªg_ˇŒback_f
 (
	tvîãx_hdl_t
 
	tc⁄n
,

515 
	tkey1
,

516 
	tkey2
,

517 
	tîr‹
);

520 
	tpciio_drivî_uƒeg_ˇŒback_f
 (
	tvîãx_hdl_t
 
	tc⁄n
,

521 
	tkey1
,

522 
	tkey2
,

523 
	tîr‹
);

526 
	tpciio_devi˚_uƒegi°î_f
 (
	tvîãx_hdl_t
 
	tc⁄n
);

529 
	tpciio_dma_íabÀd_f
 (
	tvîãx_hdl_t
 
	tc⁄n
);

531 
pciio_busöfo_t


532 
	tpciio_busöfo_gë_f
 (
	tvîãx_hdl_t
 
	tc⁄n
);

535 
	tpciio_pio_Êush_dñ_f
 (
	tpciio_piom≠_t
);

537 
pciio_piom≠_t


538 
	tpciio_pio_Êush_öô_f
 (
	tvîãx_hdl_t
);

541 
	tpciio_pio_Êush_ªad_f
 (
	tpciio_piom≠_t
, *, *, );

546 
	spciio_¥ovidî_s
 {

548 
pciio_piom≠_Æloc_f
 *
piom≠_Æloc
;

549 
pciio_piom≠_‰ì_f
 *
piom≠_‰ì
;

550 
pciio_piom≠_addr_f
 *
piom≠_addr
;

551 
pciio_piom≠_d⁄e_f
 *
piom≠_d⁄e
;

552 
pciio_piŸøns_addr_f
 *
piŸøns_addr
;

553 
pciio_pio•a˚_Æloc_f
 *
pio•a˚_Æloc
;

554 
pciio_pio•a˚_‰ì_f
 *
pio•a˚_‰ì
;

555 
pciio_pio_Êush_dñ_f
 *
pio_Êush_dñ
;

556 
pciio_pio_Êush_öô_f
 *
pio_Êush_öô
;

557 
pciio_pio_Êush_ªad_f
 *
pio_Êush_ªad
;

560 
pciio_dmam≠_Æloc_f
 *
dmam≠_Æloc
;

561 
pciio_dmam≠_‰ì_f
 *
dmam≠_‰ì
;

562 
pciio_dmam≠_addr_f
 *
dmam≠_addr
;

563 
pciio_dmam≠_li°_f
 *
dmam≠_li°
;

564 
pciio_dmam≠_d⁄e_f
 *
dmam≠_d⁄e
;

565 
pciio_dm©øns_addr_f
 *
dm©øns_addr
;

566 
pciio_dm©øns_li°_f
 *
dm©øns_li°
;

567 
pciio_dmam≠_døö_f
 *
dmam≠_døö
;

568 
pciio_dmØddr_døö_f
 *
dmØddr_døö
;

569 
pciio_dmÆi°_døö_f
 *
dmÆi°_døö
;

572 
pciio_öå_Æloc_f
 *
öå_Æloc
;

573 
pciio_öå_‰ì_f
 *
öå_‰ì
;

574 
pciio_öå_c⁄√˘_f
 *
öå_c⁄√˘
;

575 
pciio_öå_disc⁄√˘_f
 *
öå_disc⁄√˘
;

576 
pciio_öå_˝u_gë_f
 *
öå_˝u_gë
;

577 
pciio_öå_£tmu°run_f
 *
öå_£tmu°run
;

580 
pciio_¥ovidî_°¨tup_f
 *
¥ovidî_°¨tup
;

581 
pciio_¥ovidî_shutdown_f
 *
¥ovidî_shutdown
;

582 
pciio_ª£t_f
 *
ª£t
;

583 
pciio_wrôe_g©hî_Êush_f
 *
wrôe_g©hî_Êush
;

584 
pciio_ídün_£t_f
 *
ídün_£t
;

585 
pciio_¥i‹ôy_£t_f
 *
¥i‹ôy_£t
;

586 
pciio_c⁄fig_gë_f
 *
c⁄fig_gë
;

587 
pciio_c⁄fig_gë_f
 *
c⁄fig_gë_ß„
;

588 
pciio_c⁄fig_£t_f
 *
c⁄fig_£t
;

591 
pciio_îr‹_devíabÀ_f
 *
îr‹_devíabÀ
;

592 
pciio_îr‹_exåa˘_f
 *
îr‹_exåa˘
;

595 
pciio_drivî_ªg_ˇŒback_f
 *
drivî_ªg_ˇŒback
;

596 
pciio_drivî_uƒeg_ˇŒback_f
 *
drivî_uƒeg_ˇŒback
;

597 
pciio_devi˚_uƒegi°î_f
 *
devi˚_uƒegi°î
;

598 
pciio_dma_íabÀd_f
 *
dma_íabÀd
;

601 
pciio_busöfo_gë_f
 *
busöfo_gë
;

602 } 
	tpciio_¥ovidî_t
;

605 
pciio_piom≠_Æloc_f
 
pciio_piom≠_Æloc
;

606 
pciio_piom≠_‰ì_f
 
pciio_piom≠_‰ì
;

607 
pciio_piom≠_addr_f
 
pciio_piom≠_addr
;

608 
pciio_piom≠_d⁄e_f
 
pciio_piom≠_d⁄e
;

609 
pciio_piŸøns_addr_f
 
pciio_piŸøns_addr
;

610 
pciio_pio_addr_f
 
pciio_pio_addr
;

611 
pciio_pio•a˚_Æloc_f
 
pciio_pio•a˚_Æloc
;

612 
pciio_pio•a˚_‰ì_f
 
pciio_pio•a˚_‰ì
;

613 
pciio_dmam≠_Æloc_f
 
pciio_dmam≠_Æloc
;

614 
pciio_dmam≠_‰ì_f
 
pciio_dmam≠_‰ì
;

615 
pciio_dmam≠_addr_f
 
pciio_dmam≠_addr
;

616 
pciio_dmam≠_li°_f
 
pciio_dmam≠_li°
;

617 
pciio_dmam≠_d⁄e_f
 
pciio_dmam≠_d⁄e
;

618 
pciio_dm©øns_addr_f
 
pciio_dm©øns_addr
;

619 
pciio_dma_addr_f
 
pciio_dma_addr
;

620 
pciio_dm©øns_li°_f
 
pciio_dm©øns_li°
;

621 
pciio_dmam≠_døö_f
 
pciio_dmam≠_døö
;

622 
pciio_dmØddr_døö_f
 
pciio_dmØddr_døö
;

623 
pciio_dmÆi°_døö_f
 
pciio_dmÆi°_døö
;

624 
pciio_öå_Æloc_f
 
pciio_öå_Æloc
;

625 
pciio_öå_‰ì_f
 
pciio_öå_‰ì
;

626 
pciio_öå_c⁄√˘_f
 
pciio_öå_c⁄√˘
;

627 
pciio_öå_disc⁄√˘_f
 
pciio_öå_disc⁄√˘
;

628 
pciio_öå_˝u_gë_f
 
pciio_öå_˝u_gë
;

629 
pciio_öå_£tmu°run_f
 
pciio_öå_£tmu°run
;

630 
pciio_¥ovidî_°¨tup_f
 
pciio_¥ovidî_°¨tup
;

631 
pciio_¥ovidî_shutdown_f
 
pciio_¥ovidî_shutdown
;

632 
pciio_ª£t_f
 
pciio_ª£t
;

633 
pciio_wrôe_g©hî_Êush_f
 
pciio_wrôe_g©hî_Êush
;

634 
pciio_ídün_£t_f
 
pciio_ídün_£t
;

635 
pciio_¥i‹ôy_£t_f
 
pciio_¥i‹ôy_£t
;

636 
pciio_c⁄fig_gë_f
 
pciio_c⁄fig_gë
;

637 
pciio_c⁄fig_gë_f
 
pciio_c⁄fig_gë_ß„
;

638 
pciio_c⁄fig_£t_f
 
pciio_c⁄fig_£t
;

639 
pciio_îr‹_devíabÀ_f
 
pciio_îr‹_devíabÀ
;

640 
pciio_îr‹_exåa˘_f
 
pciio_îr‹_exåa˘
;

641 
pciio_pio_Êush_dñ_f
 
pciio_pio_Êush_dñ
;

642 
pciio_pio_Êush_öô_f
 
pciio_pio_Êush_öô
;

643 
pciio_pio_Êush_ªad_f
 
pciio_pio_Êush_ªad
;

653 
	#PCIIO_WIDGETDEV_SLOT_SHFT
 3

	)

654 
	#PCIIO_WIDGETDEV_SLOT_MASK
 0x1f

	)

655 
	#PCIIO_WIDGETDEV_FUNC_MASK
 0x7

	)

657 
	#pciio_widgëdev_¸óã
(
¶Ÿ
,
func
) \

658 ((
¶Ÿ
Ë<< 
PCIIO_WIDGETDEV_SLOT_SHFT
 + (
func
))

	)

660 
	#pciio_widgëdev_¶Ÿ_gë
(
wdev
) \

661 (((
wdev
Ë>> 
PCIIO_WIDGETDEV_SLOT_SHFT
Ë& 
PCIIO_WIDGETDEV_SLOT_MASK
)

	)

663 
	#pciio_widgëdev_func_gë
(
wdev
) \

664 ((
wdev
Ë& 
PCIIO_WIDGETDEV_FUNC_MASK
)

	)

671 
pciio_drivî_ªgi°î
 (
pciio_víd‹_id_t
 
víd‹_id
,

672 
pciio_devi˚_id_t
 
devi˚_id
,

673 *
drivî_¥efix
,

674 
Êags
);

677 
pciio_îr‹_ªgi°î
 (
vîãx_hdl_t
 
pc⁄n
,

678 
îr‹_h™dÀr_f
 *
efunc
,

679 
îr‹_h™dÀr_¨g_t
 
eöfo
);

681 
pciio_drivî_uƒegi°î
(*
drivî_¥efix
);

683 
	tpciio_ôî_f
(
	tvîãx_hdl_t
 
	tpc⁄n
);

685 
pciio_ôî©e
(*
drivî_¥efix
,

686 
pciio_ôî_f
 *
func
);

691 
vîãx_hdl_t


692 
pciio_devi˚_ªgi°î
 (
vîãx_hdl_t
 
c⁄√˘±
,

693 
vîãx_hdl_t
 
ma°î
,

694 
pciio_¶Ÿ_t
 
¶Ÿ
,

695 
pciio_fun˘i⁄_t
 
func
,

696 
pciio_víd‹_id_t
 
víd‹
,

697 
pciio_devi˚_id_t
 
devi˚
);

700 
pciio_devi˚_uƒegi°î
(
vîãx_hdl_t
 
c⁄√˘±
);

702 
pciio_öfo_t


703 
pciio_devi˚_öfo_√w
 (
pciio_öfo_t
 
pciio_öfo
,

704 
vîãx_hdl_t
 
ma°î
,

705 
pciio_¶Ÿ_t
 
¶Ÿ
,

706 
pciio_fun˘i⁄_t
 
func
,

707 
pciio_víd‹_id_t
 
víd‹
,

708 
pciio_devi˚_id_t
 
devi˚
);

711 
pciio_devi˚_öfo_‰ì
(
pciio_öfo_t
 
pciio_öfo
);

713 
vîãx_hdl_t


714 
pciio_devi˚_öfo_ªgi°î
(

715 
vîãx_hdl_t
 
c⁄√˘±
,

716 
pciio_öfo_t
 
pciio_öfo
);

719 
pciio_devi˚_öfo_uƒegi°î
(

720 
vîãx_hdl_t
 
c⁄√˘±
,

721 
pciio_öfo_t
 
pciio_öfo
);

725 
pciio_devi˚_©èch
(

726 
vîãx_hdl_t
 
pciˇrd
,

727 
drv_Êags
);

729 
pciio_devi˚_dëach
(

730 
vîãx_hdl_t
 
pciˇrd
,

731 
drv_Êags
);

734 
pciio_wö_m≠_t


735 
pciio_devi˚_wö_m≠_√w
(
pciio_wö_m≠_t
 
wö_m≠
,

736 
size_t
 
ªgi⁄_size
,

737 
size_t
 
∑ge_size
);

741 
pciio_devi˚_wö_m≠_‰ì
(
pciio_wö_m≠_t
 
wö_m≠
);

745 
pciio_devi˚_wö_p›uœã
(
pciio_wö_m≠_t
 
wö_m≠
,

746 
i›addr_t
 
iﬂddr
,

747 
size_t
 
size
);

750 
i›addr_t


751 
pciio_devi˚_wö_Æloc
(
pciio_wö_m≠_t
 
wö_m≠
,

752 
pciio_wö_Æloc_t
 
wö_Æloc
,

753 
size_t
 
°¨t
,

754 
size_t
 
size
,

755 
size_t
 
Æign
);

759 
pciio_devi˚_wö_‰ì
(
pciio_wö_Æloc_t
 
wö_Æloc
);

767 
vîãx_hdl_t
 
pciio_öå_dev_gë
(
pciio_öå_t
 
pciio_öå
);

768 
vîãx_hdl_t
 
pciio_öå_˝u_gë
(
pciio_öå_t
 
pciio_öå
);

771 
vîãx_hdl_t
 
pciio_pio_dev_gë
(
pciio_piom≠_t
 
pciio_piom≠
);

772 
pciio_¶Ÿ_t
 
pciio_pio_¶Ÿ_gë
(
pciio_piom≠_t
 
pciio_piom≠
);

773 
pciio_•a˚_t
 
pciio_pio_•a˚_gë
(
pciio_piom≠_t
 
pciio_piom≠
);

774 
i›addr_t
 
pciio_pio_pcüddr_gë
(
pciio_piom≠_t
 
pciio_piom≠
);

775 
ul⁄g
 
pciio_pio_m≠sz_gë
(
pciio_piom≠_t
 
pciio_piom≠
);

776 
ˇddr_t
 
pciio_pio_kvaddr_gë
(
pciio_piom≠_t
 
pciio_piom≠
);

778 #ifde‡
USE_PCI_PIO


779 
uöt8_t
 
pciio_pio_ªad8
(vﬁ©ûêuöt8_à*
addr
);

780 
uöt16_t
 
pciio_pio_ªad16
(vﬁ©ûêuöt16_à*
addr
);

781 
uöt32_t
 
pciio_pio_ªad32
(vﬁ©ûêuöt32_à*
addr
);

782 
uöt64_t
 
pciio_pio_ªad64
(vﬁ©ûêuöt64_à*
addr
);

783 
pciio_pio_wrôe8
(
uöt8_t
 
vÆ
, vﬁ©ûêuöt8_à*
addr
);

784 
pciio_pio_wrôe16
(
uöt16_t
 
vÆ
, vﬁ©ûêuöt16_à*
addr
);

785 
pciio_pio_wrôe32
(
uöt32_t
 
vÆ
, vﬁ©ûêuöt32_à*
addr
);

786 
pciio_pio_wrôe64
(
uöt64_t
 
vÆ
, vﬁ©ûêuöt64_à*
addr
);

788 
__ölöe
 
uöt8_t
 
pciio_pio_ªad8
(vﬁ©ûêuöt8_à*
addr
)

790  *
	gaddr
;

792 
__ölöe
 
uöt16_t
 
pciio_pio_ªad16
(vﬁ©ûêuöt16_à*
addr
)

794  *
	gaddr
;

796 
__ölöe
 
uöt32_t
 
pciio_pio_ªad32
(vﬁ©ûêuöt32_à*
addr
)

798  *
	gaddr
;

800 
__ölöe
 
uöt64_t
 
pciio_pio_ªad64
(vﬁ©ûêuöt64_à*
addr
)

802  *
	gaddr
;

804 
__ölöe
 
pciio_pio_wrôe8
(
uöt8_t
 
vÆ
, vﬁ©ûêuöt8_à*
addr
)

806 *
	gaddr
 = 
vÆ
;

808 
__ölöe
 
pciio_pio_wrôe16
(
uöt16_t
 
vÆ
, vﬁ©ûêuöt16_à*
addr
)

810 *
	gaddr
 = 
vÆ
;

812 
__ölöe
 
pciio_pio_wrôe32
(
uöt32_t
 
vÆ
, vﬁ©ûêuöt32_à*
addr
)

814 *
	gaddr
 = 
vÆ
;

816 
__ölöe
 
pciio_pio_wrôe64
(
uöt64_t
 
vÆ
, vﬁ©ûêuöt64_à*
addr
)

818 *
	gaddr
 = 
vÆ
;

823 
vîãx_hdl_t
 
pciio_dma_dev_gë
(
pciio_dmam≠_t
 
pciio_dmam≠
);

826 
pciio_¥ovidî_ªgi°î
(
vîãx_hdl_t
 
¥ovidî
, 
pciio_¥ovidî_t
 *
pciio_‚s
);

827 
pciio_¥ovidî_uƒegi°î
(
vîãx_hdl_t
 
¥ovidî
);

828 
pciio_¥ovidî_t
 *
pciio_¥ovidî_‚s_gë
(
vîãx_hdl_t
 
¥ovidî
);

831 
pciio_öfo_t
 
pciio_öfo_chk
(
vîãx_hdl_t
 
vhdl
);

832 
pciio_öfo_t
 
pciio_öfo_gë
(
vîãx_hdl_t
 
vhdl
);

833 
pciio_öfo_t
 
pciio_ho°öfo_gë
(
vîãx_hdl_t
 
vhdl
);

834 
pciio_öfo_£t
(
vîãx_hdl_t
 
vhdl
, 
pciio_öfo_t
 
widgë_öfo
);

835 
vîãx_hdl_t
 
pciio_öfo_dev_gë
(
pciio_öfo_t
 
pciio_öfo
);

836 
vîãx_hdl_t
 
pciio_öfo_ho°dev_gë
(
pciio_öfo_t
 
pciio_öfo
);

837 
pciio_bus_t
 
pciio_öfo_bus_gë
(
pciio_öfo_t
 
pciio_öfo
);

838 
pciio_¶Ÿ_t
 
pciio_öfo_¶Ÿ_gë
(
pciio_öfo_t
 
pciio_öfo
);

839 
pciio_¶Ÿ_t
 
pciio_öfo_ho°¶Ÿ_gë
(
pciio_öfo_t
 
pciio_öfo
);

840 
pciio_fun˘i⁄_t
 
pciio_öfo_fun˘i⁄_gë
(
pciio_öfo_t
 
pciio_öfo
);

841 
pciio_víd‹_id_t
 
pciio_öfo_víd‹_id_gë
(
pciio_öfo_t
 
pciio_öfo
);

842 
pciio_devi˚_id_t
 
pciio_öfo_devi˚_id_gë
(
pciio_öfo_t
 
pciio_öfo
);

843 
vîãx_hdl_t
 
pciio_öfo_ma°î_gë
(
pciio_öfo_t
 
pciio_öfo
);

844 
¨bôøry_öfo_t
 
pciio_öfo_mÁ°_gë
(
pciio_öfo_t
 
pciio_öfo
);

845 
pciio_¥ovidî_t
 *
pciio_öfo_p›s_gë
(
pciio_öfo_t
 
pciio_öfo
);

846 
îr‹_h™dÀr_f
 *
pciio_öfo_efunc_gë
(
pciio_öfo_t
);

847 
îr‹_h™dÀr_¨g_t
 *
pciio_öfo_eöfo_gë
(
pciio_öfo_t
);

848 
pciio_•a˚_t
 
pciio_öfo_b¨_•a˚_gë
(
pciio_öfo_t
, );

849 
i›addr_t
 
pciio_öfo_b¨_ba£_gë
(
pciio_öfo_t
, );

850 
size_t
 
pciio_öfo_b¨_size_gë
(
pciio_öfo_t
, );

851 
i›addr_t
 
pciio_öfo_rom_ba£_gë
(
pciio_öfo_t
);

852 
size_t
 
pciio_öfo_rom_size_gë
(
pciio_öfo_t
);

853 
pciio_öfo_ty≥1_gë
(
pciio_öfo_t
);

854 
pciio_îr‹_h™dÀr
(
vîãx_hdl_t
, , 
i€º‹_mode_t
, 
i€º‹_t
 *);

855 
pciio_dma_íabÀd
(
vîãx_hdl_t
);

856 
pciio_busöfo_t
 
pciio_busöfo_gë
(
vîãx_hdl_t
);

857 
pciio_busöfo_mu…i_ma°î_gë
(
pciio_busöfo_t
 
busöfo
);

858 
pciio_asic_ty≥_t
 
pciio_busöfo_asic_ty≥_gë
(
pciio_busöfo_t
 
busöfo
);

859 
pciio_bus_ty≥_t
 
pciio_busöfo_bus_ty≥_gë
(
pciio_busöfo_t
 
busöfo
);

860 
pciio_bus_•ìd_t
 
pciio_busöfo_bus_•ìd_gë
(
pciio_busöfo_t
 
busöfo
);

861 
pciio_œãncy_£t
(
vîãx_hdl_t
, 
uch¨_t
);

862 #ifde‡
__˝lu•lus


	@/usr/include/sys/atomic_ops.h

13 #i‚de‡
__SYS_ATOMIC_OPS_H__


14 
	#__SYS_ATOMIC_OPS_H__


	)

18 #i‡
_KERNEL
 && !
_STANDALONE
 && !
LANGUAGE_ASSEMBLY


24 
	gkthªad
;

26 #i‡ 
deföed
(
_COMPILER_VERSION
Ë&& (_COMPILER_VERSION>=700Ë&& !deföed(
IP28
)

40 
	#©omicAddI¡
(
a
, 
b
Ë
	`__add_™d_„tch
◊, b)

	)

41 
	#©omicSëI¡
(
a
, 
b
Ë
	`__„tch_™d_‹
◊, b)

	)

42 
	#©omicCÀ¨I¡
(
a
, 
b
Ë
	`__„tch_™d_™d
◊, ~(b))

	)

44 
	#©omicAddUöt
(
a
, 
b
Ë
	`__add_™d_„tch
◊, b)

	)

45 
	#©omicSëUöt
(
a
, 
b
Ë
	`__„tch_™d_‹
◊, b)

	)

46 
	#©omicCÀ¨Uöt
(
a
, 
b
Ë
	`__„tch_™d_™d
◊, ~(b))

	)

51 
	#©omicAddL⁄g
(
a
, 
b
Ë
	`__add_™d_„tch
◊, b)

	)

52 
	#©omicSëL⁄g
(
a
, 
b
Ë
	`__„tch_™d_‹
◊, b)

	)

53 
	#©omicCÀ¨L⁄g
(
a
, 
b
Ë
	`__„tch_™d_™d
◊, ~(b))

	)

55 
__ölöe
 
uöt
 
	$©omicFõldAssignUöt
(
uöt
 *
l
, uöà
f
, uöà
b
)

57 
uöt
 
tmp
;

59 
tmp
 = *
l
;

60 } !
	`__com∑ª_™d_sw≠
((
l
), (
tmp
),

61 (((
tmp
Ë& (~((
uöt
)
f
))Ë| (
b
))));

62  
tmp
;

63 
	}
}

65 
__ölöe
 
	$©omicFõldAssignL⁄g
(*
l
,
f
,
b
)

67 
tmp
;

69 
tmp
 = *
l
;

70 } !
	`__com∑ª_™d_sw≠
((
l
), (
tmp
),

71 (((
tmp
Ë& (~((
__uöt64_t
)
f
))Ë| (
b
))));

72  
tmp
;

73 
	}
}

75 
	#©omicAddUl⁄g
(
a
, 
b
Ë
	`__add_™d_„tch
◊, b)

	)

76 
	#©omicSëUl⁄g
(
a
, 
b
Ë
	`__„tch_™d_‹
◊, b)

	)

77 
	#©omicCÀ¨Ul⁄g
(
a
, 
b
Ë
	`__„tch_™d_™d
◊, ~(b))

	)

82 
	#©omicAddI¡64
(
a
, 
b
Ë
	`__add_™d_„tch
◊, b)

	)

83 
	#©omicAddUöt64
(
a
, 
b
Ë
	`__add_™d_„tch
◊, b)

	)

84 
	#©omicSëI¡64
(
a
, 
b
Ë
	`__„tch_™d_‹
◊, b)

	)

85 
	#©omicSëUöt64
(
a
, 
b
Ë
	`__„tch_™d_‹
◊, b)

	)

86 
	#©omicCÀ¨I¡64
(
a
, 
b
Ë
	`__„tch_™d_™d
◊, ~(b))

	)

87 
	#©omicCÀ¨Uöt64
(
a
, 
b
Ë
	`__„tch_™d_™d
◊, ~(b))

	)

89 
	#bôlock_ªÀa£
(
a
, 
b
Ë
	`__„tch_™d_™d
◊, ~(b))

	)

90 
	#bôlock_ªÀa£_32bô
(
a
, 
b
Ë
	`__„tch_™d_™d
◊, ~(b))

	)

97 
©omicAddI¡
(volatile *, );

98 
©omicSëI¡
(volatile *, );

99 
©omicCÀ¨I¡
(volatile *, );

101 
uöt
 
©omicAddUöt
(volatile uint *, uint);

102 
uöt
 
©omicSëUöt
(volatile uint *, uint);

103 
uöt
 
©omicCÀ¨Uöt
(volatile uint *, uint);

108 
©omicAddL⁄g
(volatile *, );

109 
©omicSëL⁄g
(volatile *, );

110 
©omicCÀ¨L⁄g
(volatile *, );

111 
©omicFõldAssignL⁄g
(volatile *, , );

112 
©omicFõldAssignUöt
(vﬁ©ûê
uöt
 *, uint, uint);

114 
©omicAddUl⁄g
(volatile *, );

115 
©omicSëUl⁄g
(volatile *, );

116 
©omicCÀ¨Ul⁄g
(volatile *, );

121 
öt64_t
 
©omicAddI¡64
(volatile int64_t *, int64_t);

122 
uöt64_t
 
©omicAddUöt64
(volatile uint64_t *, uint64_t);

123 
öt64_t
 
©omicSëI¡64
(volatile int64_t *, int64_t);

124 
uöt64_t
 
©omicSëUöt64
(volatile uint64_t *, uint64_t);

125 
öt64_t
 
©omicCÀ¨I¡64
(volatile int64_t *, int64_t);

126 
uöt64_t
 
©omicCÀ¨Uöt64
(volatile uint64_t *, uint64_t);

128 
uöt64_t
 
bôlock_ªÀa£
(volatile uint64_t *, uint64_t);

129 
uöt32_t
 
bôlock_ªÀa£_32bô
(volatile uint32_t *, uint32_t);

137 
©omicIncWôhWøp
(*, );

138 
©omicAddWôhWøp
(*, , );

141 
©omicIncP‹t
(*, , );

156 
©omicSëCpumask
(
˝umask_t
 *, cpumask_t *);

157 
©omicCÀ¨Cpumask
(
˝umask_t
 *, cpumask_t *);

162 *
©omicPush
(*, *, *);

163 *
©omicPuŒ
(*);

171 
ã°_™d_£t_öt
(*
loc
, 
√w
);

172 
ã°_™d_£t_l⁄g
(*
loc
, 
√w
);

173 * 
ã°_™d_£t_±r
(**
loc
, *
√w
);

174 
ã°_™d_£t_öt64
(
__öt64_t
 *
loc
, __öt64_à
√w
);

175 
com∑ª_™d_sw≠_öt
(*
loc
, 
ﬁd
, 
√w
);

176 
com∑ª_™d_sw≠_l⁄g
(*
loc
, 
ﬁd
, 
√w
);

177 
com∑ª_™d_sw≠_±r
(**
loc
, *
ﬁd
, *
√w
);

178 
com∑ª_™d_sw≠_öt64
(
__öt64_t
 *
loc
, __öt64_à
ﬁd
, 
__uöt64_t
 
√w
);

179 
com∑ªgt_™d_sw≠_öt
(*
loc
, 
com∑ª_vÆ
, 
√w
);

180 
com∑ª_™d_öc_öt_gt_zîo
(*
loc
);

181 
com∑ª_™d_dec_öt_gt
(*
loc
, 
com∑ª_vÆ
);

182 
com∑ª_™d_sw≠_kt
(
kthªad
 **, kthread *,

183 
kthªad
 *);

184 #i‡
MP


185 
	#com∑ª_™d_dec_öt_gt_hŸ
(
˝
,
v
Ë
	`com∑ª_™d_dec_öt_gt_hŸ2
(&(˝)->
vÆue
, v, &(˝)->
¥ef
)

	)

186 
com∑ª_™d_dec_öt_gt_hŸ2
(vﬁ©ûê*
loc
, 
com∑ª_vÆ
, *
¥ef
);

188 
	#com∑ª_™d_dec_öt_gt_hŸ
(
˝
,
v
Ë
	`com∑ª_™d_dec_öt_gt
((*)&(˝)->
vÆue
, v)

	)

192 
sw≠_öt
(*
loc
, 
√w
);

193 
sw≠_l⁄g
(*
loc
, 
√w
);

194 * 
sw≠_±r
(**
loc
, *
√w
);

195 
__uöt64_t
 
sw≠_öt64
(
__öt64_t
 *
loc
, __uöt64_à
√w
);

201 
bôlock_acquúe
(*, );

202 
bôlock_c⁄dacq
(*, );

209 
bôlock_acquúe_32bô
(
__uöt32_t
 *
w‹d
, __uöt32_à
lockög_bô
);

210 
bôlock_c⁄dacq_32bô
(
__uöt32_t
 *, __uint32_t);

257 vﬁ©ûê
	mvÆue
;

258 #i‡
MP


259 
	m¥ef
;

261 } 
	thŸI¡Cou¡î_t
;

264 vﬁ©ûê
uöt
 
	mvÆue
;

265 #i‡
MP


266 
	m¥ef
;

268 } 
	thŸUötCou¡î_t
;

271 vﬁ©ûê
öt64_t
 
	mvÆue
;

272 #i‡
MP


273 
	m¥ef
;

275 } 
	thŸI¡64Cou¡î_t
;

278 vﬁ©ûê
uöt64_t
 
	mvÆue
;

279 #i‡
MP


280 
	m¥ef
;

282 } 
	thŸUöt64Cou¡î_t
;

284 #¥agm®
£t
 
ty≥
 
©åibuã
 
hŸI¡Cou¡î_t
 
Æign
=8

285 #¥agm®
£t
 
ty≥
 
©åibuã
 
hŸUötCou¡î_t
 
Æign
=8

286 #¥agm®
£t
 
ty≥
 
©åibuã
 
hŸI¡64Cou¡î_t
 
Æign
=16

287 #¥agm®
£t
 
ty≥
 
©åibuã
 
hŸUöt64Cou¡î_t
 
Æign
=16

289 
	#„tchI¡HŸ
(
c
Ë((c)->
vÆue
)

	)

290 
	#„tchUötHŸ
(
c
Ë((c)->
vÆue
)

	)

291 
	#„tchI¡64HŸ
(
c
Ë((c)->
vÆue
)

	)

292 
	#„tchUöt64HŸ
(
c
Ë((c)->
vÆue
)

	)

294 
	#£tI¡HŸ
(
c
,
v
Ë(c)->
vÆue
 = (v)

	)

295 
	#£tUötHŸ
(
c
,
v
Ë(c)->
vÆue
 = (v)

	)

296 
	#£tI¡64HŸ
(
c
,
v
Ë(c)->
vÆue
 = (v)

	)

297 
	#£tUöt64HŸ
(
c
,
v
Ë(c)->
vÆue
 = (v)

	)

299 
	#©omicAddI¡HŸ
(
c
,
n
Ë
	`©omicAddI¡HŸ2
(&(c)->
vÆue
,Ç, &(c)->
¥ef
)

	)

300 
	#©omicAddUötHŸ
(
c
,
n
Ë
	`©omicAddUötHŸ2
(&(c)->
vÆue
,Ç, &(c)->
¥ef
)

	)

301 
	#©omicAddI¡64HŸ
(
c
,
n
Ë
	`©omicAddI¡64HŸ2
(&(c)->
vÆue
,Ç, &(c)->
¥ef
)

	)

302 
	#©omicAddUöt64HŸ
(
c
,
n
Ë
	`©omicAddUöt64HŸ2
(&(c)->
vÆue
,Ç, &(c)->
¥ef
)

	)

306 #i‡
MP


307 
©omicAddI¡HŸ2
(volatile *, , *);

308 
uöt
 
©omicAddUötHŸ2
(volatile uint *, uint, *);

309 
öt64_t
 
©omicAddI¡64HŸ2
(volatile int64_t *, int64_t, *);

310 
uöt64_t
 
©omicAddUöt64HŸ2
(volatile uint64_t *, uint64_t, *);

311 
	#©omicAddL⁄gHŸ2
(
˝
,
vÆ
,
µ
Ë
	`©omicAddI¡64HŸ2
(˝,vÆ,µ)

	)

320 #i‡ 
deföed
(
_COMPILER_VERSION
Ë&& (_COMPILER_VERSION>=700Ë&& !deföed(
IP28
)

321 
	#©omicAddI¡HŸ2
(
˝
,
vÆ
,
µ
Ë
	`__add_™d_„tch
(˝,vÆ)

	)

322 
	#©omicAddL⁄gHŸ2
(
˝
,
vÆ
,
µ
Ë
	`__add_™d_„tch
(˝,vÆ)

	)

323 
	#©omicAddUötHŸ2
(
˝
,
vÆ
,
µ
Ë
	`__add_™d_„tch
(˝,vÆ)

	)

324 
	#©omicAddI¡64HŸ2
(
˝
,
vÆ
,
µ
Ë
	`__add_™d_„tch
(˝,vÆ)

	)

325 
	#©omicAddUöt64HŸ2
(
˝
,
vÆ
,
µ
Ë
	`__add_™d_„tch
(˝,vÆ)

	)

327 
	#©omicAddI¡HŸ2
(
˝
,
vÆ
,
µ
Ë
	`©omicAddI¡
(˝, vÆ)

	)

328 
	#©omicAddL⁄gHŸ2
(
˝
,
vÆ
,
µ
Ë
	`©omicAddL⁄g
(˝, vÆ)

	)

329 
	#©omicAddUötHŸ2
(
˝
,
vÆ
,
µ
Ë
	`©omicAddUöt
(˝, vÆ)

	)

330 
	#©omicAddI¡64HŸ2
(
˝
,
vÆ
,
µ
Ë
	`©omicAddI¡64
(˝, vÆ)

	)

331 
	#©omicAddUöt64HŸ2
(
˝
,
vÆ
,
µ
Ë
	`©omicAddUöt64
(˝,vÆ)

	)

336 #i‡(
_MIPS_SZLONG
 == 32)

338 
hŸI¡Cou¡î_t
 
	thŸL⁄gCou¡î_t
;

339 
hŸUötCou¡î_t
 
	thŸUl⁄gCou¡î_t
;

341 
	#„tchL⁄gHŸ
(
c
Ë
	`„tchI¡HŸ
(c)

	)

342 
	#„tchUl⁄gHŸ
(
c
Ë
	`„tchUötHŸ
(c)

	)

344 
	#£tL⁄gHŸ
(
c
,
v
Ë
	`£tI¡HŸ
(c,v)

	)

345 
	#£tUl⁄gHŸ
(
c
,
v
Ë
	`£tUötHŸ
(c,v)

	)

347 
	#©omicAddL⁄gHŸ
(
c
,
n
Ë
	`©omicAddI¡HŸ
(c,n)

	)

348 
	#©omicAddUl⁄gHŸ
(
c
,
n
Ë
	`©omicAddUötHŸ
(c,n)

	)

352 
hŸI¡64Cou¡î_t
 
	thŸL⁄gCou¡î_t
;

353 
hŸUöt64Cou¡î_t
 
	thŸUl⁄gCou¡î_t
;

355 
	#„tchL⁄gHŸ
(
c
Ë
	`„tchI¡64HŸ
(c)

	)

356 
	#„tchUl⁄gHŸ
(
c
Ë
	`„tchUöt64HŸ
(c)

	)

358 
	#£tL⁄gHŸ
(
c
,
v
Ë
	`£tI¡64HŸ
(c,v)

	)

359 
	#£tUl⁄gHŸ
(
c
,
v
Ë
	`£tUöt64HŸ
(c,v)

	)

361 
	#©omicAddL⁄gHŸ
(
c
,
n
Ë
	`©omicAddI¡64HŸ
(c,n)

	)

362 
	#©omicAddUl⁄gHŸ
(
c
,
n
Ë
	`©omicAddUöt64HŸ
(c,n)

	)

	@/usr/include/sys/buf.h

19 #i‚de‡
__SYS_BUF_H__


20 
	#__SYS_BUF_H__


	)

23 
	~<sys/£ma.h
>

24 
	~<sys/uio.h
>

25 
	~<sys/kmem.h
>

27 
	gkåa˚
;

28 
	gdhbuf
;

29 
	gbdevsw
;

39 
	sbu·¨g
 {

40 
vnode
 *
	m•ecvp
;

41 
bdevsw
 *
	mbdevsw
;

42 
dev_t
 
	mdev
;

43 } 
	tbu·¨g_t
;

45 #ifde‡
DEBUG_BUFTAGGING


47 
	#BT_RING_SIZE
 8

	)

49 
	sbt_loˇti⁄
 {

50 
	mlöíum
;

51 
	mfûíum
;

52 } 
	tbt_loˇti⁄_t
;

73 
	sbuf
 {

78 
£ma_t
 
	mb_lock
;

79 
uöt64_t
 
	mb_Êags
;

80 
buf
 *
	mb_f‹w
;

81 
buf
 *
	mb_back
;

82 
buf
 *
	mbd_f‹w
;

83 
buf
 *
	mbd_back
;

84 
dhbuf
 *
	mbd_hash
;

85 
buf
 *
	mav_f‹w
;

86 
buf
 *
	mav_back
;

87 
dev_t
 
	mb_edev
;

88 
	mb_îr‹
;

89 
off_t
 
	mb_off£t
;

90 
bu·¨g_t
 *
	mb_èrgë
;

91 
	mb_bcou¡
;

92 
	mb_ªsid
;

93 
	mb_ªmaö
;

94 
	mb_bufsize
;

95 
__psunsig√d_t
 
	mb_s‹t
;

97 
ˇddr_t
 
	mb_addr
;

98 *
	mb_w‹ds
;

99 
pfd©
 *
	mb_pfd©
;

100 
daddr_t
 *
	mb_daddr
;

101 } 
	mb_un
;

102 
vnode
 *
	mb_vp
;

103 
daddr_t
 
	mb_blkno
;

104 
˛ock_t
 
	mb_°¨t
;

105 
pfd©
 *
	mb_∑ges
;

106 *
	mb_Æíli°
;

107 (*
	mb_ªl£
)(
	mbuf
 *);

108 
£ma_t
 
	mb_iod⁄e£ma
;

109 (*
	mb_iod⁄e
)(
	mbuf
 *);

110 (*
	mb_bd°øt
)(
	mbuf
 *);

111 *
	mb_¥iv©e
;

112 *
	mb_f•riv©e
;

113 *
	mb_f•riv©e2
;

114 *
	mb_f•riv©e3
;

115 
	mb_pöcou¡
;

116 
ush‹t
 
	mb_aÊags
;

117 
	mb_ªf
;

118 
	mb_bÆ™˚
;

119 
	mb_li°id
;

120 
	mb_bvty≥
;

121 
buf
 *
	mb_df‹w
;

122 
buf
 *
	mb_dback
;

123 
buf
 *
	mb_∑ª¡
;

125 *
	mb_gr_¥v
;

126 
	mb_¥i
;

127 } 
	mb_gr
;

128 
buf
 *
	mb_grio_li°
;

129 #ifde‡
DEBUG_BUFTRACE


130 
kåa˚
 *
	mb_åa˚
;

132 #ifde‡
DEBUG_BUFTAGGING


133 
bt_loˇti⁄_t
 
	mbt_loc
[
BT_RING_SIZE
];

134 
lock_t
 
	mbt_lock
;

135 
	mbt_hód
;

137 } 
	tbuf_t
;

139 
	t›aque_t
;

141 
	#∑ddr
(
X
Ë(
∑ddr_t
)(X->
b_un
.
b_addr
)

	)

142 
	#b_dmØddr
 
b_un
.
b_addr


	)

143 
	#b_∑ge
 
b_un
.
b_pfd©


	)

144 
	#b_grio_¥iv©e
 
b_gr
.
b_gr_¥v


	)

145 
	#b_i›ri
 
b_gr
.
b_¥i


	)

146 
	#b_ext_Êags
 
b_Êags


	)

148 
buf_t
 *
globÆ_buf_èbÀ
;

149 
buf_t
 *
b‰ìli°
;

150 
b‰ìli°mask
;

153 
	sp‰ì
 {

154 
uöt64_t
 
	mb_Êags
;

155 
buf
 *
	mav_f‹w
;

156 
buf
 *
	mav_back
;

164 
	mB_FS_NONE
,

165 
	mB_FS_INO
,

166 
	mB_FS_INOMAP
,

167 
	mB_FS_DIR_BTREE
,

168 
	mB_FS_MAP
,

169 
	mB_FS_ATTR_BTREE
,

170 
	mB_FS_AGI
,

171 
	mB_FS_AGF
,

172 
	mB_FS_AGFL
,

173 
	mB_FS_DQUOT


174 } 
	tbvty≥_t
;

176 
	#BINFO_NAME_SIZE
 32

	)

178 
	sböfo
 {

179 
uöt64_t
 
	mböfo_Êags
;

180 
	mböfo_size
;

181 
dev_t
 
	mböfo_dev
;

182 
˛ock_t
 
	mböfo_°¨t
;

183 
	mböfo_f°y≥
;

184 
	mböfo_Âass
;

185 
	mböfo_bvty≥
;

186 
	mböfo_futs
;

187 
	mböfo_futi
;

189 
off64_t
 
	mbun_off
;

190 
daddr_t
 
	mbun_blk
;

191 } 
	mböfo_uni⁄2
;

192 
uöt64_t
 
	mböfo_vp
;

193 
uöt64_t
 
	mböfo_vnumbî
;

194 
	mböfo_«me
[
BINFO_NAME_SIZE
];

195 } 
	tböfo_t
;

197 
	#böfo_off£t
 
böfo_uni⁄2
.
bun_off


	)

198 
	#böfo_blkno
 
böfo_uni⁄2
.
bun_blk


	)

203 
	#B_WRITE
 0x0000000000000000LL

	)

204 
	#B_READ
 0x0000000000000001LL

	)

205 
	#B_DONE
 0x0000000000000002LL

	)

206 
	#B_ERROR
 0x0000000000000004LL

	)

207 
	#B_BUSY
 0x0000000000000008LL

	)

208 
	#B_PHYS
 0x0000000000000010LL

	)

209 
	#B_MAP
 0x0000000000000020LL

	)

210 
	#B_WANTED
 0x0000000000000040LL

	)

211 
	#B_AGE
 0x0000000000000080LL

	)

212 
	#B_ASYNC
 0x0000000000000100LL

	)

213 
	#B_DELWRI
 0x0000000000000200LL

	)

215 
	#B_OPEN
 0x0000000000000400LL

	)

216 
	#B_STALE
 0x0000000000000800LL

	)

217 
	#B_LEADER
 0x0000000000001000LL

	)

218 
	#B_FORMAT
 0x0000000000002000LL

	)

219 
	#B_PAGEIO
 0x0000000000004000LL

	)

220 
	#B_MAPPED
 0x0000000000008000LL

	)

222 
	#B_SWAP
 0x0000000000010000LL

	)

224 
	#B_BDFLUSH
 0x0000000000020000LL

	)

225 
	#B_RELSE
 0x0000000000040000LL

	)

226 
	#B_ALENLIST
 0x0000000000080000LL

	)

227 
	#B_PARTIAL
 0x0000000000100000LL

	)

229 
	#B_UNCACHED
 0x0000000000200000LL

	)

231 
	#B_INACTIVE
 0x0000000000400000LL

	)

233 
	#B_BFLUSH
 0x0000000000800000LL

	)

235 
	#B_FOUND
 0x0000000001000000LL

	)

236 
	#B_WAIT
 0x0000000002000000LL

	)

238 
	#B_WAKE
 0x0000000004000000LL

	)

239 
	#B_HOLD
 0x0000000008000000LL

	)

240 
	#B_DELALLOC
 0x0000000010000000LL

	)

242 
	#B_MAPUSER
 0x0000000020000000LL

	)

243 
	#B_DACCT
 0x0000000040000000LL

	)

245 
	#B_VDBUF
 0x0000000080000000LL

	)

247 
	#B_GR_BUF
 0x0000000100000000LL

	)

248 
	#B_XLVSPEC
 0x0000000200000000LL

	)

250 
	#B_NOMORE
 0x0000000200000000LL

	)

251 
	#B_GR_ISD
 0x0000000400000000LL

	)

252 
	#B_NONEED
 0x0000000800000000LL

	)

253 
	#B_XLV_HBUF
 0x0000001000000000LL

	)

254 
	#B_XLVD_BUF
 0x0000002000000000LL

	)

255 
	#B_XLVD_FAILOVER
 \

256 0x0000004000000000LL

	)

257 
	#B_XLV_IOC
 0x0000008000000000LL

	)

258 
	#B_XLV_ACK
 0x0000010000000000LL

	)

259 
	#B_SHUFFLED
 0x0000020000000000LL

	)

260 
	#B_PRV_BUF
 0x0000040000000000LL

	)

261 
	#B_XVM_PRIV
 0x0000080000000000LL

	)

262 
	#B_XFS_SHUT
 0x0000100000000000LL

	)

263 
	#B_NFS_ASYNC
 \

264 0x0000200000000000LL

	)

265 
	#B_NFS_UNSTABLE
 \

266 0x0000400000000000LL

	)

267 
	#B_NFS_RETRY
 \

268 0x0000800000000000LL

	)

269 
	#B_UNINITIAL
 \

270 0x0001000000000000LL

	)

272 
	#B_PRIVATE_B_ADDR
 \

273 0x0002000000000000LL

	)

275 
	#B_IO_ACCT
 \

276 0x0004000000000000LL

	)

279 
	#B_DIRTY_ACCT
 \

280 0x0008000000000000LL

	)

283 
	#B_NFS_JUKEBOX
 \

284 0x0010000000000000LL

	)

286 
	#B_NFS_JUKEBOX_STALE
 \

287 0x0020000000000000LL

	)

292 
	#BP_ISMAPPED
(
bp
Ë((bp->
b_Êags
 & (
B_PAGEIO
|
B_MAPPED
)Ë!B_PAGEIO)

	)

293 
	#BUF_IS_IOSPL
(
bp
Ë(bp->
b_Êags
 & (
B_GR_BUF
|
B_PRV_BUF
))

	)

298 
	#BA_PINWAITER
 0x01

	)

299 
	#BA_DONTRECLAIM
 0x02

	)

300 
	#BA_GLOBAL_BUF
 0x04

	)

302 
	#B_GET_AFLAG
(
bp
, 
Êag
Ë(bp)->
b_aÊags
 & 
	)
Êag

303 
	#B_SET_AFLAG
(
bp
, 
Êag
Ë
	`©omicSëUöt
((
uöt
*)&(bp)->
b_pöcou¡
, (Êag))

	)

304 
	#B_CLEAR_AFLAG
(
bp
, 
Êag
Ë
	`©omicCÀ¨Uöt
((
uöt
*)&(bp)->
b_pöcou¡
, (Êag))

	)

309 
	#BUF_FSPRIV
 0x1

	)

310 
	#BUF_FSPRIV2
 0x2

	)

312 #ifde‡
_KERNEL


314 
	#b‰ì_lock
(
li°id
) \

315 
	`muãx_•ölock
((
lock_t
*)&
b‰ìli°
[(
li°id
)].
b_¥iv©e
)

	)

316 
	#b‰ì_u∆ock
(
li°id
, 
s
) \

317 
	`muãx_•öu∆ock
((
lock_t
*)&
b‰ìli°
[(
li°id
)].
b_¥iv©e
, 
s
)

	)

318 
	#√°ed_b‰ì_lock
(
li°id
) \

319 
	`√°ed_•ölock
((
lock_t
*)&
b‰ìli°
[(
li°id
)].
b_¥iv©e
)

	)

320 
	#√°ed_b‰ì_u∆ock
(
li°id
) \

321 
	`√°ed_•öu∆ock
((
lock_t
*)&
b‰ìli°
[(
li°id
)].
b_¥iv©e
)

	)

323 #ifde‡
DEBUG_BUFTRACE


324 
b‰ìli°_check
(
buf_t
 *);

326 
	#b‰ìli°_check
(
b
)

	)

333 
	#bhash
(
d
,
b
Ë((
buf_t
 *)&
globÆ_buf_hash
[
	`_bhash
(d,b)])

	)

334 
	#bdhash
(
d
Ë(&
globÆ_dev_hash
[(()(d))&
v
.
v_hmask
])

	)

336 
	shbuf
 {

337 
£ma_t
 
	mb_lock
;

338 
uöt64_t
 
	mb_Êags
;

339 
buf
 *
	mb_f‹w
;

340 
buf
 *
	mb_back
;

341 } 
	thbuf_t
;

347 
	sdhbuf
 {

348 
£ma_t
 
	mb_lock
;

349 
uöt64_t
 
	mb_Êags
;

350 
buf
 *
	mb_f‹w
;

351 
buf
 *
	mb_back
;

352 
buf
 *
	mbd_f‹w
;

353 
buf
 *
	mbd_back
;

354 
lock_t
 
	mbd_lock
;

355 } 
	tdhbuf_t
;

357 
hbuf_t
 *
globÆ_buf_hash
;

358 
dhbuf_t
 *
globÆ_dev_hash
;

360 
	#BIO_MAXBSIZE_LOG2
 (
BPCSHIFT
+8)

	)

363 
	#BIO_MAXBSIZE
 (1<<
BIO_MAXBSIZE_LOG2
)

	)

364 
	#BIO_MAXBBS
 (1<<(
BIO_MAXBSIZE_LOG2
-
BBSHIFT
))

	)

369 
	sbwaô_pö
 {

370 
sv_t
 
	mbwp_waô
;

371 
	mbwp_cou¡
;

372 
lock_t
 
	mbwp_lock
;

373 } 
	tbwaô_pö_t
;

376 #ifde‡
MP


377 #¥agm®
£t
 
ty≥
 
©åibuã
 
bwaô_pö_t
 
Æign
=128

380 
	#NUM_BWAIT_PIN
 32

	)

381 
	#BWAIT_PIN_MASK
 (
NUM_BWAIT_PIN
 - 1)

	)

385 
	#BPTOBWP
(
bp
Ë((((bpË< &
globÆ_buf_èbÀ
[0]) || \

386 ((
bp
Ë>&
globÆ_buf_èbÀ
[
v
.
v_buf
])) ? \

387 &
bwaô_pö
[0] : \

388 &
bwaô_pö
[((
bp
Ë- 
globÆ_buf_èbÀ
Ë& 
BWAIT_PIN_MASK
])

	)

390 
bwaô_pö_t
 
bwaô_pö
[];

395 
	sbfidev
 {

396 
dev_t
 
	mbfid_dev
;

397 
	mbfid_Êags
;

399 
	mbfidr_wrŸe
;

400 
	mbfidr_vskù
;

402 
	mbfidr_lskù
;

404 
	mbfidr_mch™ge
;

407 
	mbfidr_pskù
;

409 
	mbfidr_mk°Æe
;

410 
	mbfidr_°Æe
;

411 } 
	mbfid_r
;

412 } 
	tbfidev_t
;

414 
	#BFID_TRYLOCK
 0x01

	)

416 
	#BFID_NOVNBUF
 0x02

	)

418 
	#BFID_NOIOWAIT
 0x04

	)

428 
	#BUF_TRYLOCK
 0x00000001

	)

429 
	#BUF_BUSY
 0x00000002

	)

434 
	#INCORE_LOCK
 0x00000001

	)

435 
	#INCORE_TRYLOCK
 0x00000002

	)

440 
	#CD_FLUSH
 0x1

	)

445 
	#C_PUSH
 0x01

	)

446 
	#C_EOF
 0x02

	)

451 
	gkåa˚
;

452 
kåa˚
 *
buf_åa˚_buf
;

456 
	#BUF_TRACE_SIZE
 32

	)

459 #i‚de‡
DEBUG_BUFTRACE


461 
	#bu·ø˚
(
id
, 
bp
)

	)

465 
	#bu·ø˚
(
id
, 
bp
) \

466 
	`bu·ø˚_íãr
(
id
, 
bp
, (
ö°_t
 *)
__ªtu∫_addªss
)

	)

467 
bu·ø˚_íãr
(*, 
buf_t
 *, 
ö°_t
 *);

471 #ifde‡
DEBUG_BUFTAGGING


478 
	#BT_FS_BIO
 0

	)

479 
	#BT_CHUNKIO
 1

	)

480 
	#BT_PLEX_CPY
 2

	)

481 
	#BT_XLV
 3

	)

482 
	#BT_GRIO_SUB
 4

	)

483 
	#BT_BPQUEUE
 5

	)

484 
	#BT_DISKSUB
 6

	)

485 
	#BT_DKSC
 7

	)

486 
	#BT_XFS_MOUNT
 8

	)

487 
	#BT_XFS_RW
 9

	)

488 
	#BT_XFS_BUF_ITEM
 10

	)

489 
	#BT_CXFS_CLIENT_MOUNT
 11

	)

490 
	#BT_CXFS_CLIENT_RW
 12

	)

491 
	#BT_NFS_VNODEOPS
 13

	)

493 
bu·ag1_func
(
buf_t
 *
a
, 
b
, 
c
);

494 
bu·ag3_func
(
buf_t
 *
a
, 
b
, 
c
);

496 
	#bu·ag1
(
a
, 
b
, 
c
Ë
	`bu·ag1_func
◊, b, c)

	)

497 
	#bu·ag3
(
a
, 
b
, 
c
Ë
	`bu·ag3_func
◊, b, c)

	)

501 
	#bu·ag1
(
a
, 
b
, 
c
)

	)

502 
	#bu·ag3
(
a
, 
b
, 
c
)

	)

506 
	guio_rw
;

507 
	gbm≠vÆ
;

508 
	g¸ed
;

509 
	gpfd©
;

510 
	guio
;

511 
	gvnode
;

512 
	gÆíli°_s
;

513 
	giovec
;

515 
böô
();

516 
buf_t
 *
öc‹e_m©ch
(
dev_t
, 
daddr_t
, , , *);

517 
öc‹e_ªl£
(
dev_t
, , );

518 
nŸavaû
(
buf_t
 *);

519 
buf_t
 *
gëblk
(
dev_t
, 
daddr_t
, );

520 
buf_t
 *
gë_buf
(
dev_t
, 
daddr_t
, , 
uöt
);

521 
gëîr‹
(
buf_t
 *);

522 
buf_t
 *
gërbuf
();

523 
buf_t
 *
gërbuf_z⁄e
(, 
z⁄e_t
 *);

524 
buf_t
 *
ngërbuf
(
size_t
);

525 
buf_t
 *
ngëeblk
(
size_t
);

526 
buf_t
 *
ngëeblkdev
(
dev_t
, 
size_t
);

527 
buf_t
 *
bªad
(
dev_t
, 
daddr_t
, );

528 
buf_t
 *
bªada
(
dev_t
, 
daddr_t
, , daddr_t, );

529 
buf_t
 *
ªad_buf
(
dev_t
, 
daddr_t
, , 
uöt
);

530 
buf_t
 *
ªad_buf_èrg
(
bu·¨g_t
 *, 
daddr_t
, , 
uöt
);

531 
b¨ód
(
bu·¨g_t
 *, 
daddr_t
, );

532 
bwrôe
(
buf_t
 *);

533 
bdwrôe
(
buf_t
 *);

534 
bawrôe
(
buf_t
 *);

535 
bªl£
(
buf_t
 *);

536 
bövÆ
(
dev_t
);

537 
bÊush
(
dev_t
);

538 
bövÆ_dev
(
bfidev_t
 *);

539 
bÊush_dev
(
bfidev_t
 *);

540 
bpö
(
buf_t
 *);

541 
bu≈ö
(
buf_t
 *);

542 
bwaô_u≈ö
(
buf_t
 *);

543 
iowaô
(
buf_t
 *);

544 
iod⁄e
(
buf_t
 *);

545 
biowaô
(
buf_t
 *);

546 
biod⁄e
(
buf_t
 *);

547 
bi€º‹
(
buf
 *, );

548 
buf_avoid_add
(
dev_t
);

549 
buf_avoid_dñëe
(
dev_t
);

550 
buf_avoid_£¨ch
(
dev_t
);

551 
˛rbuf
(
buf_t
 *);

552 
‰ìrbuf
(
buf_t
 *);

553 
‰ìrbuf_z⁄e
(
buf_t
 *, 
z⁄e_t
 *);

554 
n‰ìrbuf
(
buf_t
 *);

555 *
bp_m≠ö
(
buf_t
 *);

556 
bp_m≠out
(
buf_t
 *);

557 
pfd©
 *
gë√xçg
(
buf_t
 *, pfdat *);

558 
ˇddr_t
 
m≠utokv
(ˇddr_t, 
size_t
, );

559 
unm≠utokv
(
ˇddr_t
, 
size_t
);

560 
iom≠
(
buf_t
 *);

561 
iom≠_ve˘‹
(
buf_t
 *, 
iovec
 *, );

562 
iounm≠
(
buf_t
 *);

563 
unu£øcc
(*, 
size_t
, );

564 
Á°_unu£øcc
(*, 
size_t
, , 
›aque_t
 *);

565 
u£øcc
(*, 
size_t
, , *);

566 
Á°_u£øcc
(*, 
size_t
, , 
›aque_t
 *);

567 
u£rdma
(*, 
size_t
, , *);

568 
Á°_u£rdma
(*, 
size_t
, , 
›aque_t
 *);

569 
undma
(*, 
size_t
, );

570 
Á°_undma
(*, 
size_t
, , 
›aque_t
 *);

571 
buf_t
 *
gëphysbuf
(
dev_t
);

572 
ui›hysio
((*)(
buf_t
 *), buf_à*, 
dev_t
, 
uöt64_t
,

573 
uio
 *);

574 
	`bi›hysio
((*)(
buf_t
 *), buf_à*, 
dev_t
, 
uöt64_t
, 
daddr_t
,

575 
uio
 *);

576 
	`puçhysbuf
(
buf_t
 *);

577 
buf_t
 *
	`öc‹e
(
dev_t
, 
daddr_t
, , );

578 
	`biomove
(
buf_t
 *, 
u_öt
, 
size_t
, 
uio_rw
, 
uio
 *);

579 
buf_t
 *
	`chunkªad
(
vnode
 *, 
bm≠vÆ
 *,

580 , 
¸ed
 *);

581 
buf_t
 *
	`gëchunk
(
vnode
 *, 
bm≠vÆ
 *, 
¸ed
 *);

582 
buf_t
 *
	`chunkªªad
(buf_t *);

583 
	`dchunkunchaö
(
buf_t
 *);

584 
	`dñÆloc_‰ì
(
buf_t
 *);

585 
	`˛u°îwrôe
(
buf_t
 *, 
˛ock_t
);

586 
	`bp_dˇche_wbövÆ
(
buf_t
 *);

587 
	`bp_dˇche_Êush
(
buf_t
 *, 
uöt
);

588 
	`chunktoss
(
vnode
 *, 
off_t
, off_t);

589 
	`chunkpush
(
vnode
 *, 
off_t
, off_t, 
uöt64_t
);

590 
	`chunk°abûize
(
vnode
 *, 
off_t
, off_t);

591 
	`chunkövÆ‰ì
(
vnode
 *);

592 #ifde‡
TILE_DATA


593 
	`chunkpföd
(
pfd©
 *, 
buf_t
 **);

594 
	`chunk¥ïœ˚
(
buf_t
 *, 
pfd©
 *, pfdat *);

597 
	`chunk_vªl£
(
vnode
 *,
off_t
,off_t);

599 #ifde‡
DEBUG


600 
	`bÊushed
(
dev_t
);

602 
	#bÊushed
(
dev
)

	)

605 
	`_bhash
(
dev_t
, 
daddr_t
);

	@/usr/include/sys/cmn_err.h

8 #i‚de‡
_SYS_CMN_ERR_H


9 
	#_SYS_CMN_ERR_H


	)

13 
	~"sys/sy¶og.h
"

14 
	~<°d¨g.h
>

15 
	~<sys/ty≥s.h
>

22 
	#CE_DEBUG
 
LOG_DEBUG


	)

23 
	#CE_CONT
 
LOG_INFO


	)

24 
	#CE_NOTE
 
LOG_NOTICE


	)

25 
	#CE_WARN
 
LOG_WARNING


	)

26 
	#CE_ALERT
 
LOG_ALERT


	)

27 
	#CE_PANIC
 
LOG_EMERG


	)

29 
	#CE_LEVELMASK
 
LOG_PRIMASK


	)

30 
	#CE_CPUID
 0x8

	)

31 
	#CE_PHYSID
 0x10

	)

32 
	#CE_SYNC
 0x20

	)

39 
	#CE_TOOKACTIONS
 0x0100

	)

40 
	#CE_RUNNINGPOOR
 0x0200

	)

41 
	#CE_MAINTENANCE
 0x0400

	)

42 
	#CE_CONFIGERROR
 0x0800

	)

45 
	#CE_PRIOLEVELMASK
 0x00f‡

	)

46 
	#CE_SUBTASKMASK
 0xff00

	)

47 
	#CE_AVAILMONALL
 (
CE_TOOKACTIONS
|
CE_RUNNINGPOOR
| \

48 
CE_MAINTENANCE
|
CE_CONFIGERROR
)

	)

50 #ifde‡
_KERNEL


52 
	#CE_PBPANIC
 
LOG_CRIT


	)

57 
c⁄°æí
;

59 
cmn_îr
(, *, ...);

60 
icmn_îr
(, *, 
va_li°
);

61 
cmn_îr_èg
(, , *, ...);

62 
icmn_îr_èg
(, , *, 
va_li°
);

63 
¨cs_¥ötf
(*, ...);

65 
	#CONBUF_LOCKED
 0

	)

66 
	#CONBUF_UNLOCKED
 1

	)

67 
	#CONBUF_DRAIN
 2

	)

69 #i‚def 
_STANDALONE


113 
	sªg_vÆues
 {

114 
__psunsig√d_t
 
	mrv_vÆue
;

115 *
	mrv_«me
;

122 
	sªg_desc
 {

123 
k_machªg_t
 
	mrd_mask
;

124 
	mrd_shi·
;

125 *
	mrd_«me
;

126 *
	mrd_f‹m©
;

127 
ªg_vÆues
 *
	mrd_vÆues
;

	@/usr/include/sys/cpu.h

16 #i‚de‡
__SYS_CPU_H__


17 
	#__SYS_CPU_H__


	)

23 
	#CPU_IP19
 19

	)

24 
	#CPU_IP20
 20

	)

25 
	#CPU_IP21
 21

	)

26 
	#CPU_IP22
 22

	)

27 
	#CPU_IP25
 25

	)

28 
	#CPU_IP26
 26

	)

29 
	#CPU_IP27
 27

	)

30 
	#CPU_IP28
 28

	)

31 
	#CPU_IP30
 30

	)

32 
	#CPU_IP32
 32

	)

33 
	#CPU_IP35
 35

	)

35 #i‡
IP19


36 
	~"sys/EVEREST/evîe°.h
"

37 
	~"sys/EVEREST/IP19.h
"

40 #i‡
IP20


41 
	~"sys/IP20.h
"

44 #i‡
IP21


45 
	~"sys/EVEREST/evîe°.h
"

46 
	~"sys/EVEREST/IP21.h
"

49 #i‡
IP22


50 
	~"sys/IP22.h
"

53 #i‡
IP25


54 
	~"sys/EVEREST/evîe°.h
"

55 
	~"sys/EVEREST/IP25.h
"

58 #i‡
IP26


59 
	~"sys/IP26.h
"

62 #i‡
IP27


63 
	~"sys/SN/SN0/IP27.h
"

64 
	~"sys/SN/SN0/hub.h
"

65 
	~"sys/SN/rouãr.h
"

68 #i‡
IP28


69 
	~"sys/IP22.h
"

72 #i‡
IP30


73 
	~"sys/RACER/IP30.h
"

76 #i‡
IP32


77 
	~"sys/IP32.h
"

80 #i‡
IPMHSIM


81 
	~"sys/IPMHSIM.h
"

84 #i‡
IP35


85 
	~"sys/SN/SN1/IP35.h
"

86 
	~"sys/SN/SN1/bedrock.h
"

87 
	~"sys/SN/rouãr.h
"

	@/usr/include/sys/cred.h

33 #i‚de‡
_PROC_CRED_H


34 
	#_PROC_CRED_H


	)

43 
	~<sys/ty≥s.h
>

44 
	~<sys/ˇ∑bûôy.h
>

46 
	s¸ed
 {

47 
	m¸_ªf
;

48 
ush‹t
 
	m¸_ngroups
;

49 
uid_t
 
	m¸_uid
;

50 
gid_t
 
	m¸_gid
;

51 
uid_t
 
	m¸_ruid
;

52 
gid_t
 
	m¸_rgid
;

53 
uid_t
 
	m¸_suid
;

54 
gid_t
 
	m¸_sgid
;

55 
mac_œbñ
 *
	m¸_mac
;

56 
ˇp_£t_t
 
	m¸_ˇp
;

57 #i‡
CELL_CAPABLE
 || 
CELL_PREPARE


58 
¸edid_t
 
	m¸_id
;

60 
gid_t
 
	m¸_groups
[1];

61 } 
	t¸ed_t
;

63 #ifde‡
_KERNEL


65 
¸ed
 *
sys_¸ed
;

67 
	g¥oc
;

68 
¸ed_öô
();

69 
¸hﬁd
(
¸ed_t
 *);

70 
¸‰ì
(
¸ed_t
 *);

71 
¸ed_t
 *
¸c›y
(
¥oc
 *);

72 
¸ed_t
 *
¸dup
(cred_t *);

73 
¸ed_t
 *
¸gë¸ed
();

74 
size_t
 
¸gësize
();

75 
¸cmp
(c⁄° 
¸ed_t
 *, const cred_t *);

76 
groupmembî
(
gid_t
, 
¸ed_t
 *);

77 
¸su£r
(
¸ed_t
 *);

78 
¸ed_t
 *
gë_cuºít_¸ed
();

79 
£t_cuºít_¸ed
(
¸ed_t
 *);

	@/usr/include/sys/ddi.h

10 #i‚de‡
_IO_DDI_H


11 
	#_IO_DDI_H


	)

13 #ifde‡
__˝lu•lus


20 
	~<sys/ty≥s.h
>

21 
	~<sys/buf.h
>

22 
	~<sys/uio.h
>

38 
	#TIME
 1

	)

39 
	#PPGRP
 3

	)

40 
	#LBOLT
 4

	)

41 
	#SYSRINT
 5

	)

42 
	#SYSXINT
 6

	)

43 
	#SYSMINT
 7

	)

44 
	#SYSRAWC
 8

	)

45 
	#SYSCANC
 9

	)

46 
	#SYSOUTC
 10

	)

47 
	#PPID
 11

	)

48 
	#PSID
 12

	)

49 
	#UCRED
 13

	)

52 #i‚de‡
NMAJORENTRY


53 
	#NMAJORENTRY
 512

	)

56 
∂_t
 
∂ba£
;

57 
∂_t
 
∂timeout
;

58 
∂_t
 
∂disk
;

59 
∂_t
 
∂°r
;

60 
∂_t
 
∂hi
;

67 #unde‡
gëemaj‹


68 #unde‡
gëemö‹


69 #unde‡
gëmaj‹


70 #unde‡
gëmö‹


71 #unde‡
makedevi˚


80 #unde‡
OTHERQ


81 #unde‡
RD


82 #unde‡
WR


83 #unde‡
d©amsg


84 #unde‡
puäext


85 #unde‡
•l°r


87 
	gpﬁlhód
;

89 
drv_gë∑rm
(
ul⁄g_t
, ulong_t *);

90 
˛ock_t
 
drv_hztou£c
(clock_t);

91 
drv_£ç¨m
(
ul⁄g_t
, ulong_t);

92 
˛ock_t
 
drv_u£˘ohz
(clock_t);

93 
drv_u£cwaô
(
˛ock_t
);

94 
maj‹_t
 
ëoimaj‹
(major_t);

95 
maj‹_t
 
gëemaj‹
(
dev_t
);

96 
mö‹_t
 
gëemö‹
(
dev_t
);

97 
maj‹_t
 
gëmaj‹
(
dev_t
);

98 
mö‹_t
 
gëmö‹
(
dev_t
);

99 
ô€maj‹
(
maj‹_t
, major_t);

100 
dev_t
 
makedevi˚
(
maj‹_t
, 
mö‹_t
);

101 
max
(, );

102 
mö
(, );

103 
ul⁄g_t
 
±ob
(ulong_t);

104 
ul⁄g_t
 
bt›
(ulong_t);

105 
ul⁄g_t
 
bt›r
(ulong_t);

106 *
¥oc_ªf
();

107 
¥oc_uƒef
(*);

108 
¥oc_sig«l
(*, );

109 
pﬁlhód
 *
phÆloc
();

110 
ph‰ì
(
pﬁlhód
 *);

111 
physiock
((*)(
buf
 *), buf*, 
dev_t
, 
uöt64_t
,

112 
daddr_t
, 
uio
*);

113 
	g¸ed
;

114 
drv_¥iv
(
¸ed
 *);

115 
toid_t
 
ôimeout
((*)(), *, , 
∂_t
, ...);

116 
toid_t
 
dtimeout
((*)(), *, , 
∂_t
, 
¥o˚ss‹id_t
);

117 
toid_t
 
Á°_ôimeout
((*)(), *, , 
∂_t
, ...);

118 
toid_t
 
˛ock_¥timeout
(
¥o˚ss‹id_t
, (*
fun
)(), *,

119 
__öt64_t
, , ...);

120 
__öt64_t
 
πc_ªad
();

121 
πc_ªsﬁuti⁄
();

122 
queue
 *
OTHERQ
(queue *);

123 
queue
 *
RD
(queue *);

124 
queue
 *
WR
(queue *);

125 
d©amsg
(
uch¨_t
);

126 
	gmsgb
;

127 
puäext
(
queue
 *, 
msgb
 *);

128 
¶ìp
(*, );

129 
wakeup
(*);

130 
toid_t
 
timeout
((*)(), *, , ...);

131 
u¡imeout
(
toid_t
);

132 
u¡imeout_waô
(
toid_t
);

133 
bc›y
(c⁄° *, *, 
size_t
);

134 
bzîo
(*, 
size_t
);

135 
c›yö
(*, *, );

136 
c›yout
(*,*, );

137 
∑ddr_t
 
kvt›hys
(*);

138 
u£øbi
(
__u£øbi_t
 *);

139 
dñay
();

140 
•l0
();

141 
•l1
();

142 
•l2
();

143 
•l3
();

144 
•l4
();

145 
•l5
();

146 
•l6
();

147 
•l7
();

148 
•lhi
();

149 
•lba£
();

150 
•…imeout
();

151 
•ldisk
();

152 
•l°r
();

153 
•lhi
();

154 
•…ty
();

155 
•lx
();

160 
drv_thªad_¸óã
(* 
«me
,

161 
ul⁄g_t
 
°ack_size
,

162 
uöt_t
 
Êags
,

163 
¥i
,

164 
°_func_t
 
func
,

165 * 
¨g0
,

166 * 
¨g1
,

167 * 
¨g2
,

168 * 
¨g3
);

170 
drv_thªad_exô
();

172 #ifde‡
__˝lu•lus


	@/usr/include/sys/debug.h

19 #i‚def 
__SYS_DEBUG_H__


20 
	#__SYS_DEBUG_H__


	)

24 #i‡
deföed
(
DEBUG
)

25 #ifde‡
löt


26 
	#ASSERT
(
EX
Ë(()0Ë

	)

27 
	#ASSERT_LEVEL
(
LVL
,
EX
Ë(()0)

	)

29 #ifde‡
__ANSI_CPP__


30 
	#ASSERT
(
EX
Ë((!
dﬂss
||(EX))?(()0):
	`assÁû
(#EX, 
__FILE__
, 
__LINE__
))

	)

31 
	#ASSERT_LEVEL
(
LVL
,
EX
Ë
	`ASSERT
(EX)

	)

33 
	#ASSERT
(
EX
Ë((!
dﬂss
||(EX))?(()0):
	`assÁû
("EX", 
__FILE__
, 
__LINE__
))

	)

34 
	#ASSERT_LEVEL
(
LVL
,
EX
Ë
	`ASSERT
(EX)

	)

37 
	#METER
(
x
Ë
	)
x

39 
	#OS_METER
 1

	)

40 
dﬂss
;

44 
	#ASSERT
(
x
Ë(()0)

	)

45 
	#ASSERT_LEVEL
(
LVL
,
EX
Ë(((LVL)>
¥iv©e
.
p_as¶evñ
)||!(EX))?(()0):
	`assÁû
(#EX, 
__FILE__
, 
__LINE__
)

	)

46 
	#METER
(
x
)

	)

47 #unde‡
OS_METER


50 
assÁû
(*, *, );

51 #¥agm®
mùs_‰equícy_höt
 
NEVER
 
assÁû


53 #ifde‡
_KERNEL


55 #ifde‡
MP


56 
	#ASSERT_MP
 
ASSERT


	)

57 
	#ASSERT_NOMIGRATE
 
	`ASSERT
(
	`is•lhi
(
	`gë§
()Ë|| (
cuπhªadp
->
k_mu°run
 =
	`˝uid
()Ë|| 
	`KT_ISKB
(cuπhªadp))

	)

59 
	#ASSERT_MP
(
x
Ë(()0)

	)

60 
	#ASSERT_NOMIGRATE
 (()0)

	)

63 
	#ASSERT_DEBUG
 
ASSERT


	)

64 
	#ASSERT_ALWAYS
(
EX
Ë((EX)?(()0):
	`assÁû
(#EX, 
__FILE__
, 
__LINE__
))

	)

69 
	#ASSERTION_LEVEL_NONE
 0

	)

70 
	#ASSERTION_LEVEL_HIPERF
 25

	)

71 
	#ASSERTION_LEVEL_INTEG
 50

	)

72 
	#ASSERTION_LEVEL_DEBUG
 75

	)

73 
	#ASSERTION_LEVEL_ALL
 100

	)

75 
debug_°›_Æl_˝us
(*);

	@/usr/include/sys/dmamap.h

1 #i‚de‡
__SYS_DMAMAP_H__


2 
	#__SYS_DMAMAP_H__


	)

16 #ifde‡
__˝lu•lus


22 
	~"sys/edt.h
"

31 
	#DMA_SCSI
 0

	)

32 
	#DMA_A24VME
 1

	)

33 
	#DMA_A32VME
 2

	)

34 
	#DMA_A64VME
 3

	)

36 
	#DMA_EISA
 4

	)

38 
	#DMA_PCI32
 5

	)

39 
	#DMA_PCI64
 6

	)

44 
	sdmam≠
 {

45 
dma_ty≥
;

46 
dma_ad≠
;

47 
dma_ödex
;

48 
dma_size
;

49 
∑ddr_t
 
dma_addr
;

50 
ˇddr_t
 
dma_vúèddr
;

51 } 
	tdmam≠_t
;

53 
	~"sys/buf.h
"

54 
Æíli°_s
;

59 
dmam≠_t
 *
dma_m≠Æloc
(, , , );

60 
dma_m≠‰ì
(
dmam≠_t
 *);

61 
dma_m≠
(
dmam≠_t
 *, 
ˇddr_t
, );

62 
dma_m≠2
(
dmam≠_t
 *, 
ˇddr_t
, caddr_t, );

63 
∑ddr_t
 
dma_m≠addr
(
dmam≠_t
 *, 
ˇddr_t
);

64 
dma_m≠bp
(
dmam≠_t
 *, 
buf_t
 *, );

65 
dma_m≠_Æíli°
(
dmam≠_t
 *, 
Æíli°_s
 *, 
size_t
);

66 
uöt
 
ev_kvtoi›num
(
ˇddr_t
);

71 
m≠
 *
a24m≠
[];

72 
m≠
 *
a32m≠
[];

74 
a24_m≠size
;

75 
a32_m≠size
;

77 
lock_t
 
dmam≠lock
;

78 
sv_t
 
dmam≠out
;

80 #ifde‡
__˝lu•lus


88 
	#DMAMAP_FIXED
 0x1

	)

89 
	#DMAMAP_NOSLEEP
 0x2

	)

90 
	#DMAMAP_INPLACE
 0x4

	)

92 
	#DMAMAP_FLAGS
 0x7

	)

	@/usr/include/sys/edt.h

7 #i‚de‡
_SYS_EDT_H_


8 
	#_SYS_EDT_H_


	)

12 #i‡!
_LANGUAGE_ASSEMBLY


14 
	#NBASE
 3

	)

16 
	sio•a˚
 {

17 
unch¨
 
	mios_ty≥
;

18 
i›addr_t
 
	mios_i›addr
;

19 
ul⁄g
 
	mios_size
;

20 
ˇddr_t
 
	mios_vaddr
;

21 } 
	tio•a˚_t
;

23 #ifde‡
_KERNEL


25 
	súix5_io•a˚
 {

26 
unch¨
 
	mios_ty≥
;

27 
≠p32_ul⁄g_t
 
	mios_i›addr
;

28 
≠p32_ul⁄g_t
 
	mios_size
;

29 
≠p32_±r_t
 
	mios_vaddr
;

30 } 
	túix5_io•a˚_t
;

34 
edt
 
	tedt_t
;

35 
	~<sys/iobus.h
>

37 
	sedt
 {

38 
uöt_t
 
	me_bus_ty≥
;

39 
unch¨
 
	mv_˝uöå
;

40 
unch¨
 
	mv_£t˝uöå
;

41 
uöt_t
 
	me_ad≠
;

42 
uöt_t
 
	me_˘Ã
;

43 * 
	me_bus_öfo
;

44 (*
	me_öô
)(
	medt
 *);

45 
io•a˚_t
 
	me_•a˚
[
NBASE
];

46 * 
	me_∂©f‹m_¥iv©e
;

48 
vîãx_hdl_t
 
	me_c⁄√˘±
;

52 
vîãx_hdl_t
 
	me_ma°î
;

56 
	me_ma°î_«me
[512];

57 
devi˚_desc_t
 
	me_devi˚_desc
;

62 
	#e_ba£
 
e_•a˚
[0].
ios_vaddr


	)

63 
	#e_ba£2
 
e_•a˚
[1].
ios_vaddr


	)

64 
	#e_ba£3
 
e_•a˚
[2].
ios_vaddr


	)

65 
	#e_ioba£
 
e_•a˚
[0].
ios_i›addr


	)

66 
	#e_ioba£2
 
e_•a˚
[1].
ios_i›addr


	)

67 
	#e_ioba£3
 
e_•a˚
[2].
ios_i›addr


	)

70 
	#ADAP_NULL
 0

	)

71 
	#ADAP_VME
 1

	)

72 
	#ADAP_GFX
 2

	)

73 
	#ADAP_SCSI
 3

	)

74 
	#ADAP_LOCAL
 4

	)

75 
	#ADAP_GIO
 5

	)

76 
	#ADAP_EISA
 6

	)

77 
	#ADAP_IBUS
 7

	)

78 
	#ADAP_EPC
 8

	)

79 
	#ADAP_DANG
 9

	)

80 
	#ADAP_PCI
 10

	)

82 * 
edt_bus_öfo_gë
(
edt_t
 *
edt
);

83 
vîãx_hdl_t
 
edt_c⁄√˘±_gë
(
edt_t
 *
edt
);

84 
vîãx_hdl_t
 
edt_ma°î_gë
(
edt_t
 *
edt
);

85 
devi˚_desc_t
 
edt_devi˚_desc_gë
(
edt_t
 *
edt
);

88 
	#IBUS_SLOTSHFT
 3

	)

89 
	#IBUS_IOASHFT
 0

	)

90 
	#IBUS_IOAMASK
 0x7

	)

92 
	#EPC_SERIAL
 0x1

	)

93 
	#EPC_ETHER
 0x2

	)

96 
	mibus_moduÀ
;

97 
	mibus_unô
;

99 
	mibus_ad≠
;

100 
	mibus_˘Ã
;

102 
	mibus_¥oc
;

103 } 
	tibus_t
;

105 
ibus_t
 
ibus_ad≠ãrs
[];

106 
ibus_numad≠s
;

108 #ifdef 
_KERNEL


109 
edt
Édt[];

110 
√dt
;

	@/usr/include/sys/errno.h

10 #i‚de‡
_SVC_ERRNO_H


11 
	#_SVC_ERRNO_H


	)

35 
	~<°™d¨ds.h
>

36 #i‡
deföed
(
_KERNEL
)

37 
	#__KBASE
 1000

	)

39 
	#__IRIXBASE
 1000

	)

40 
	#__FTNBASE
 4000

	)

41 
	#__FTNLAST
 5999

	)

48 
	#EPERM
 1

	)

49 
	#ENOENT
 2

	)

50 
	#ESRCH
 3

	)

51 
	#EINTR
 4

	)

52 
	#EIO
 5

	)

53 
	#ENXIO
 6

	)

54 
	#E2BIG
 7

	)

55 
	#ENOEXEC
 8

	)

56 
	#EBADF
 9

	)

57 
	#ECHILD
 10

	)

58 
	#EAGAIN
 11

	)

59 
	#ENOMEM
 12

	)

60 
	#EACCES
 13

	)

61 
	#EFAULT
 14

	)

62 
	#ENOTBLK
 15

	)

63 
	#EBUSY
 16

	)

64 
	#EEXIST
 17

	)

65 
	#EXDEV
 18

	)

66 
	#ENODEV
 19

	)

67 
	#ENOTDIR
 20

	)

68 
	#EISDIR
 21

	)

69 
	#EINVAL
 22

	)

70 
	#ENFILE
 23

	)

71 
	#EMFILE
 24

	)

72 
	#ENOTTY
 25

	)

73 
	#ETXTBSY
 26

	)

74 
	#EFBIG
 27

	)

75 
	#ENOSPC
 28

	)

76 
	#ESPIPE
 29

	)

77 
	#EROFS
 30

	)

78 
	#EMLINK
 31

	)

79 
	#EPIPE
 32

	)

80 
	#EDOM
 33

	)

81 
	#ERANGE
 34

	)

82 
	#ENOMSG
 35

	)

83 
	#EIDRM
 36

	)

84 
	#ECHRNG
 37

	)

85 
	#EL2NSYNC
 38

	)

86 
	#EL3HLT
 39

	)

87 
	#EL3RST
 40

	)

88 
	#ELNRNG
 41

	)

89 
	#EUNATCH
 42

	)

90 
	#ENOCSI
 43

	)

91 
	#EL2HLT
 44

	)

92 
	#EDEADLK
 45

	)

93 
	#ENOLCK
 46

	)

94 
	#ECKPT
 47

	)

97 
	#EBADE
 50

	)

98 
	#EBADR
 51

	)

99 
	#EXFULL
 52

	)

100 
	#ENOANO
 53

	)

101 
	#EBADRQC
 54

	)

102 
	#EBADSLT
 55

	)

103 
	#EDEADLOCK
 56

	)

105 
	#EBFONT
 57

	)

108 
	#ENOSTR
 60

	)

109 
	#ENODATA
 61

	)

110 
	#ETIME
 62

	)

111 
	#ENOSR
 63

	)

113 
	#ENONET
 64

	)

114 
	#ENOPKG
 65

	)

115 
	#EREMOTE
 66

	)

116 
	#ENOLINK
 67

	)

117 
	#EADV
 68

	)

118 
	#ESRMNT
 69

	)

120 
	#ECOMM
 70

	)

121 
	#EPROTO
 71

	)

122 
	#EMULTIHOP
 74

	)

123 
	#EBADMSG
 77

	)

124 
	#ENAMETOOLONG
 78

	)

125 
	#EOVERFLOW
 79

	)

126 
	#ENOTUNIQ
 80

	)

127 
	#EBADFD
 81

	)

128 
	#EREMCHG
 82

	)

131 
	#ELIBACC
 83

	)

132 
	#ELIBBAD
 84

	)

133 
	#ELIBSCN
 85

	)

134 
	#ELIBMAX
 86

	)

135 
	#ELIBEXEC
 87

	)

136 
	#EILSEQ
 88

	)

137 
	#ENOSYS
 89

	)

138 
	#ELOOP
 90

	)

139 
	#ERESTART
 91

	)

140 
	#ESTRPIPE
 92

	)

142 
	#ENOTEMPTY
 93

	)

144 
	#EUSERS
 94

	)

148 
	#ENOTSOCK
 95

	)

149 
	#EDESTADDRREQ
 96

	)

150 
	#EMSGSIZE
 97

	)

151 
	#EPROTOTYPE
 98

	)

152 
	#ENOPROTOOPT
 99

	)

153 
	#EPROTONOSUPPORT
 120

	)

154 
	#ESOCKTNOSUPPORT
 121

	)

155 
	#EOPNOTSUPP
 122

	)

156 
	#EPFNOSUPPORT
 123

	)

157 
	#EAFNOSUPPORT
 124

	)

159 
	#EADDRINUSE
 125

	)

160 
	#EADDRNOTAVAIL
 126

	)

163 
	#ENETDOWN
 127

	)

164 
	#ENETUNREACH
 128

	)

165 
	#ENETRESET
 129

	)

167 
	#ECONNABORTED
 130

	)

168 
	#ECONNRESET
 131

	)

169 
	#ENOBUFS
 132

	)

170 
	#EISCONN
 133

	)

171 
	#ENOTCONN
 134

	)

174 
	#ESHUTDOWN
 143

	)

175 
	#ETOOMANYREFS
 144

	)

176 
	#ETIMEDOUT
 145

	)

177 
	#ECONNREFUSED
 146

	)

178 
	#EHOSTDOWN
 147

	)

179 
	#EHOSTUNREACH
 148

	)

181 #i‡
_SGIAPI


182 
	#LASTERRNO
 
ENOTCONN


	)

185 #i‡
deföed
(
_KERNEL
)

186 
	#EWOULDBLOCK
 
__KBASE
+101

	)

188 
	#EWOULDBLOCK
 
EAGAIN


	)

191 
	#EALREADY
 149

	)

192 
	#EINPROGRESS
 150

	)

194 
	#ESTALE
 151

	)

197 
	#EIORESID
 500

	)

200 
	#EUCLEAN
 135

	)

201 
	#ENOTNAM
 137

	)

202 
	#ENAVAIL
 138

	)

203 
	#EISNAM
 139

	)

204 
	#EREMOTEIO
 140

	)

205 
	#EINIT
 141

	)

206 
	#EREMDEV
 142

	)

207 
	#ECANCELED
 158

	)

211 
	#ENOLIMFILE
 1001

	)

212 
	#EPROCLIM
 1002

	)

213 
	#EDISJOINT
 1003

	)

214 
	#ENOLOGIN
 1004

	)

215 
	#ELOGINLIM
 1005

	)

216 
	#EGROUPLOOP
 1006

	)

217 
	#ENOATTACH
 1007

	)

220 
	#ENOTSUP
 1008

	)

221 
	#ENOATTR
 1009

	)

222 
	#EFSCORRUPTED
 1010

	)

223 
	#EDIRCORRUPTED
 1010

	)

224 
	#EWRONGFS
 1011

	)

226 
	#EDQUOT
 1133

	)

227 
	#ENFSREMOTE
 1135

	)

233 
	#ECONTROLLER
 1300

	)

234 
	#ENOTCONTROLLER
 1301

	)

235 
	#EENQUEUED
 1302

	)

236 
	#ENOTENQUEUED
 1303

	)

237 
	#EJOINED
 1304

	)

238 
	#ENOTJOINED
 1305

	)

239 
	#ENOPROC
 1306

	)

240 
	#EMUSTRUN
 1307

	)

241 
	#ENOTSTOPPED
 1308

	)

242 
	#ECLOCKCPU
 1309

	)

243 
	#EINVALSTATE
 1310

	)

244 
	#ENOEXIST
 1311

	)

245 
	#EENDOFMINOR
 1312

	)

246 
	#EBUFSIZE
 1313

	)

247 
	#EEMPTY
 1314

	)

248 
	#ENOINTRGROUP
 1315

	)

249 
	#EINVALMODE
 1316

	)

250 
	#ECANTEXTENT
 1317

	)

251 
	#EINVALTIME
 1318

	)

252 
	#EDESTROYED
 1319

	)

258 
	#EBDHDL
 1400

	)

259 
	#EDELAY
 1401

	)

260 
	#ENOBWD
 1402

	)

261 
	#EBADRSPEC
 1403

	)

262 
	#EBADTSPEC
 1404

	)

263 
	#EBADFILT
 1405

	)

269 
	#EMIGRATED
 1500

	)

270 
	#EMIGRATING
 1501

	)

271 
	#ECELLDOWN
 1502

	)

272 
	#ENOSERVICE
 1503

	)

273 
	#ENOMESSAGE
 1504

	)

274 
	#ECONVERTING
 1505

	)

275 
	#ENOBHVHOLD
 1056

	)

276 
	#EINTFDOWN
 1507

	)

277 
	#EEXPORTING
 1508

	)

278 
	#EBADOBJID
 1510

	)

281 
	#EMEMRETRY
 1600

	)

282 
	#ECPUWARN
 1601

	)

283 
	#ECPUFAIL
 1602

	)

284 
	#EMEMWARN
 1603

	)

285 
	#EMEMFAIL
 1604

	)

286 
	#ESHAREWARN
 1605

	)

287 
	#ESHAREFAIL
 1606

	)

290 
	#ENOJOB
 1700

	)

	@/usr/include/sys/hwgraph.h

12 #i‚de‡
_HWGRAPH_H


13 
	#_HWGRAPH_H


	)

17 #i‡
_KERNEL


18 
	~<sys/c⁄f.h
>

19 
	~<sys/gøph.h
>

20 
	~<sys/sysma¸os.h
>

25 
	#HWGRAPH_NUM_INDEX_INFO
 3

	)

29 
	#HWGRAPH_NUM_BUCKETS
 16

	)

31 
	#HWGRAPH_DEVSW
 0

	)

32 
	#HWGRAPH_CONNECTPT
 1

	)

33 
	#HWGRAPH_FASTINFO
 2

	)

35 (*
	tåavî£_‚_t
)–
	tvîãx_hdl_t
 
	t‰om
,

36 **
	tªmaödî_buf
,

37 
	tvîãx_hdl_t
 *
	tto
);

49 
	#vhdl_to_dev
(
vhdl
Ë((
dev_t
)(vhdl))

	)

50 
	#dev_to_vhdl
(
dev
Ë((
vîãx_hdl_t
)(dev))

	)

51 
	#dev_is_vîãx
(
dev
Ë(
	`emaj‹
((
dev_t
)(dev)Ë=0)

	)

52 
	#HWGRAPH_STRING_DEV
 
	`makedev
(0, 0)

	)

53 
	#IS_HWGRAPH_STRING_DEV
(
x
Ë((
dev_t
)(x)==
HWGRAPH_STRING_DEV
)

	)

61 
	#EDGE_PLACE_WANT_CURRENT
 
GRAPH_EDGE_PLACE_NONE


	)

62 
	#EDGE_PLACE_WANT_CONNECTPT
 1

	)

63 
	#EDGE_PLACE_WANT_REAL_EDGES
 2

	)

64 
	#HWGRAPH_RESERVED_PLACES
 2

	)

68 
vîãx_hdl_t
 
hwgøph_roŸ
;

73 
gøph_îr‹_t
 
	`hwgøph_summ¨y_gë
(
gøph_©å_t
 *
gøph_©å
);

75 
gøph_îr‹_t
 
	`hwgøph_vîãx_visô
–(*)(*, 
vîãx_hdl_t
),

76 *
¨g
,

77 *
ªtvÆ
,

78 
vîãx_hdl_t
 *
íd_h™dÀ
);

84 
gøph_îr‹_t
 
	`hwgøph_vîãx_¸óã
(
vîãx_hdl_t
 *
vhdÕ
);

86 
gøph_îr‹_t
 
	`hwgøph_vîãx_de°roy
(
vîãx_hdl_t
 
vhdl
);

88 
gøph_îr‹_t
 
	`hwgøph_vîãx_˛⁄e
–
vîãx_hdl_t
 
§c
,

89 
vîãx_hdl_t
 *
˛⁄e_vhdl_p
);

91 
gøph_îr‹_t
 
	`hwgøph_vîãx_gë_√xt
–
vîãx_hdl_t
 *
vhdÕ
,

92 
gøph_vîãx_∂a˚_t
 *
∂a˚_p
);

94 
	`hwgøph_vîãx_ªf˙t
(
vîãx_hdl_t
 
vhdl
);

96 
gøph_îr‹_t
 
	`hwgøph_vîãx_ªf
(
vîãx_hdl_t
 
vhdl
);

98 
gøph_îr‹_t
 
	`hwgøph_vîãx_uƒef
(
vîãx_hdl_t
 
vhdl
);

105 
gøph_îr‹_t
 
	`hwgøph_edge_add
–
vîãx_hdl_t
 
‰om
,

106 
vîãx_hdl_t
 
to
,

107 *
edge_«me
);

109 
gøph_îr‹_t
 
	`hwgøph_edge_ªmove
–
vîãx_hdl_t
 
‰om
,

110 *
edge_«me
,

111 
vîãx_hdl_t
 *
ﬁd_to_p
);

113 
gøph_îr‹_t
 
	`hwgøph_edge_gë
–
vîãx_hdl_t
 
‰om
,

114 *
edge_«me
,

115 
vîãx_hdl_t
 *
to_p
);

117 
gøph_îr‹_t
 
	`hwgøph_edge_gë_√xt
–
vîãx_hdl_t
 
§cv
,

118 *
edge_«me_buf
,

119 
vîãx_hdl_t
 *
èrgëv
,

120 
gøph_edge_∂a˚_t
 *
∂a˚_p
);

126 
	#HWGRAPH_EDGELBL_HW
 "hw"

	)

127 
	#HWGRAPH_EDGELBL_DOT
 "."

	)

128 
	#HWGRAPH_EDGELBL_DOTDOT
 ".."

	)

135 
gøph_îr‹_t
 
	`hwgøph_öfo_add_LBL
–
vîãx_hdl_t
 
vhdl
,

136 *
öfo_«me
,

137 
¨bôøry_öfo_t
 
öfo
);

139 
gøph_îr‹_t
 
	`hwgøph_öfo_ªmove_LBL
–
vîãx_hdl_t
 
vhdl
,

140 *
öfo_«me
,

141 
¨bôøry_öfo_t
 *
ﬁd_öfo_p
);

143 
gøph_îr‹_t
 
	`hwgøph_öfo_ª∂a˚_LBL
–
vîãx_hdl_t
 
vhdl
,

144 *
öfo_«me
,

145 
¨bôøry_öfo_t
 
√w_öfo
,

146 
¨bôøry_öfo_t
 *
ﬁd_öfo_p
);

148 
gøph_îr‹_t
 
	`hwgøph_öfo_gë_LBL
–
vîãx_hdl_t
 
vhdl
,

149 *
öfo_«me
,

150 
¨bôøry_öfo_t
 *
öfo_p
);

152 
gøph_îr‹_t
 
	`hwgøph_öfo_gë_√xt_LBL
–
vîãx_hdl_t
 
§cv
,

153 *
öfo_«me_buf
,

154 
¨bôøry_öfo_t
 *
öfo_p
,

155 
gøph_öfo_∂a˚_t
 *
∂a˚_p
);

157 
gøph_îr‹_t
 
	`hwgøph_öfo_exp‹t_LBL
–
vîãx_hdl_t
 
vhdl
,

158 *
öfo_«me
,

159 
exp‹t_öfo
);

161 
gøph_îr‹_t
 
	`hwgøph_öfo_u√xp‹t_LBL
–
vîãx_hdl_t
 
vhdl
,

162 *
öfo_«me
);

173 
gøph_îr‹_t
 
	`hwgøph_∑th_gë_comp⁄ít
(*
∑th
,

174 *
comp⁄ít
,

175 *
£∑øt‹_Àngth
,

176 *
comp⁄ít_Àngth
);

178 
gøph_îr‹_t
 
	`hwgøph_∑th_lookup
–
vîãx_hdl_t
 
°¨tv
,

179 *
∑th
,

180 
vîãx_hdl_t
 *
ídv_p
,

181 **
ªmaödî_p
);

183 
gøph_îr‹_t
 
	`hwgøph_∑th_add
–
vîãx_hdl_t
 
‰om
,

184 *
∑th
,

185 
vîãx_hdl_t
 *
√wv_p
);

187 
gøph_îr‹_t
 
	`hwgøph_åavî£
–
vîãx_hdl_t
 
‰om
,

188 *
∑th
,

189 
vîãx_hdl_t
 *
to_p
);

191 
vîãx_hdl_t
 
	`hwgøph_∑th_to_vîãx
(*
∑th
);

193 
dev_t
 
	`hwgøph_∑th_to_dev
(*
∑th
);

195 
gøph_îr‹_t
 
	`hwgøph_block_devi˚_add
–
vîãx_hdl_t
 
‰om
,

196 *
∑th
,

197 *
drivî_¥efix
,

198 
vîãx_hdl_t
 *
bdev
);

200 
gøph_îr‹_t
 
	`hwgøph_ch¨_devi˚_add
–
vîãx_hdl_t
 
‰om
,

201 *
∑th
,

202 *
drivî_¥efix
,

203 
vîãx_hdl_t
 *
cdev
);

205 
	`hwgøph_devi˚_add
–
vîãx_hdl_t
 
‰om
,

206 *
∑th
,

207 *
drivî_¥efix
,

208 
vîãx_hdl_t
 *
dev
,

209 
vîãx_hdl_t
 *
block_dev
,

210 
vîãx_hdl_t
 *
ch¨_dev
);

212 
vîãx_hdl_t
 
	`hwgøph_block_devi˚_gë
(vîãx_hdl_à
vhdl
);

214 
vîãx_hdl_t
 
	`hwgøph_ch¨_devi˚_gë
(vîãx_hdl_à
vhdl
);

223 
	`hwgøph_cdevsw_£t
–
vîãx_hdl_t
 
vhdl
,

224 
cdevsw
 *cdevsw);

226 
cdevsw
 * 
	`hwgøph_cdevsw_gë
(
vîãx_hdl_t
 
vhdl
);

228 
	`hwgøph_bdevsw_£t
–
vîãx_hdl_t
 
vhdl
,

229 
bdevsw
 *bdevsw);

231 
bdevsw
 * 
	`hwgøph_bdevsw_gë
(
vîãx_hdl_t
 
vhdl
);

233 
gøph_îr‹_t
 
	`hwgøph_åavî£_£t
–
vîãx_hdl_t
 
vhdl
,

234 
åavî£_‚_t
 
func
);

236 
åavî£_‚_t
 
	`hwgøph_åavî£_gë
(
vîãx_hdl_t
 
vhdl
);

238 
	`hwgøph_Á°öfo_£t
–
vîãx_hdl_t
 
vhdl
,

239 
¨bôøry_öfo_t
 
öfo
);

241 
¨bôøry_öfo_t
 
	`hwgøph_Á°öfo_gë
(
vîãx_hdl_t
 
vhdl
);

243 
	`devi˚_öfo_£t
–
dev_t
 
devi˚
,

244 *
öfo
);

246 *
	`devi˚_öfo_gë
(
dev_t
 
devi˚
);

252 
övít‹y_s
;

253 
öv∂a˚_s
;

254 
öv∂a˚_s
 
öv∂a˚_n⁄e
;

256 
gøph_îr‹_t
 
	`hwgøph_övít‹y_add
–
vîãx_hdl_t
 
vhdl
,

257 
˛ass
,

258 
ty≥
,

259 
maj‹_t
 
˘Ã
,

260 
mö‹_t
 
unô
,

261 
°©e
);

263 
gøph_îr‹_t
 
	`hwgøph_övít‹y_ªmove
–
vîãx_hdl_t
 
vhdl
,

264 
˛ass
,

265 
ty≥
,

266 
maj‹_t
 
˘Ã
,

267 
mö‹_t
 
unô
,

268 
°©e
);

270 
gøph_îr‹_t
 
	`hwgøph_övít‹y_gë_√xt
(
vîãx_hdl_t
 
vhdl
,

271 
öv∂a˚_s
 *
∂a˚_p
,

272 
övít‹y_s
 **
övít‹y_p
);

275 
	`hwgøph_c⁄åﬁÀr_num_gë
(
dev_t
);

276 
	`hwgøph_c⁄åﬁÀr_num_£t
(
dev_t
, );

278 
	`hwgøph_övít‹y_ac˚ss
();

279 
	`hwgøph_övít‹y_u«c˚ss
();

284 
gøph_îr‹_t
 
	`hwgøph_c⁄√˘±_£t
–
vîãx_hdl_t
 
vhdl
,

285 
vîãx_hdl_t
 
c⁄√˘±
);

287 
vîãx_hdl_t
 
	`hwgøph_c⁄√˘±_gë
(vîãx_hdl_à
vhdl
);

289 
	`hwgøph_chmod
(
vîãx_hdl_t
 
vhdl
, 
mode_t
 
mode
);

292 
	#HWGRAPH_PERM_EXTERNAL_INT
 0444

	)

293 
	#HWGRAPH_PERM_TTY
 0666

	)

294 
	#HWGRAPH_PERM_TABLET
 0644

	)

295 
	#HWGRAPH_PERM_DIALS
 0666

	)

296 
	#HWGRAPH_PERM_KBD
 0666

	)

297 
	#HWGRAPH_PERM_MOUSE
 0666

	)

298 
	#HWGRAPH_PERM_CONSOLE
 0644

	)

299 
	#HWGRAPH_PERM_TPSC
 0666

	)

300 
	#HWGRAPH_PERM_SMFD
 0666

	)

301 
	#HWGRAPH_PERM_MMSC_CONTROL
 0600

	)

305 
gøph_îr‹_t
 
	`hwgøph_vîãx_«me_gë
–
vîãx_hdl_t
 
vhdl
,

306 *
«me_buf
,

307 
uöt
 
«me_Àngth
);

309 *
	`vîãx_to_«me
–
vîãx_hdl_t
 
vhdl
,

310 *
«me_buf
,

311 
uöt
 
«me_Àngth
);

313 
vîãx_hdl_t
 
	`devi˚_ma°î_gë
(vîãx_hdl_à
vhdl
);

315 
˙odeid_t
 
	`ma°î_node_gë
(
vîãx_hdl_t
 
vhdl
);

317 
˝uid_t
 
	`˝uvîãx_to_˝uid
(
vîãx_hdl_t
 
˝u_vhdl
);

319 
˙odeid_t
 
	`nodevîãx_to_˙odeid
(
vîãx_hdl_t
 
node_vhdl
);

330 
	#HWGRAPH_VPATH_LEN_MAX
 50

	)

332 
	shwgøph_v∑th_s
 {

333 
vîãx_hdl_t
 
vhdl_¨øy
[
HWGRAPH_VPATH_LEN_MAX
];

334 
∑thÀn
;

335 } *
	thwgøph_v∑th_t
;

337 
	shwgøph_v∑th_curs‹_s
 {

338 
hwgøph_v∑th_t
 
∑th
;

339 
curs‹
;

340 } *
	thwgøph_v∑th_curs‹_t
;

342 
hwgøph_v∑th_t
 
	`hwgøph_v∑th_¸óã
–
vîãx_hdl_t
 
§c
,

343 
vîãx_hdl_t
 
sök
);

345 
	`hwgøph_v∑th_de°roy
(
hwgøph_v∑th_t
 
v∑th
);

347 
vîãx_hdl_t
 
	`hwgøph_v∑th_vîãx_gë
(
hwgøph_v∑th_curs‹_t
 
curs‹
);

349 
	`hwgøph_v∑th_curs‹_√xt
(
hwgøph_v∑th_curs‹_t
 
curs‹
);

351 
	`hwgøph_v∑th_curs‹_¥ev
(
hwgøph_v∑th_curs‹_t
 
curs‹
);

353 
	`hwgøph_v∑th_curs‹_öô
–
hwgøph_v∑th_curs‹_t
 
curs‹
,

354 
hwgøph_v∑th_t
 
v∑th
);

356 
	`hwgøph_v∑th_curs‹_˛⁄e
–
hwgøph_v∑th_curs‹_t
 
sour˚_curs‹
,

357 
hwgøph_v∑th_curs‹_t
 
de°_curs‹
);

359 
hwgøph_v∑th_curs‹_t
 
	`hwgøph_v∑th_curs‹_¸óã
();

361 
	`hwgøph_v∑th_curs‹_de°roy
(
hwgøph_v∑th_curs‹_t
 
curs‹
);

363 
vîãx_hdl_t
 
	`mem_vhdl_gë
(vîãx_hdl_à
drv_vhdl
);

365 #i‡(
MAXCPUS
 == 512)

366 
xxl_hwgøph_num_dev
;

368 
hwgøph_num_dev
;

	@/usr/include/sys/invent.h

1 #i‚de‡ 
__SYS_INVENT_H__


2 
	#__SYS_INVENT_H__


	)

36 
	~"sys/ty≥s.h
"

38 
	sövít‹y_s
 {

39 
övít‹y_s
 *
	möv_√xt
;

40 
	möv_˛ass
;

41 
	möv_ty≥
;

42 
maj‹_t
 
	möv_c⁄åﬁÀr
;

43 
mö‹_t
 
	möv_unô
;

44 
	möv_°©e
;

46 } 
	tövít‹y_t
;

48 
	s˝u_öv_s
 {

49 
	m˝uÊav‹
;

50 
	m˝ufq
;

51 
	msdsize
;

52 
	msd‰eq
;

53 } 
	t˝u_öv_t
;

56 
	sdüg_öv_s
{

57 
	m«me
[80];

58 
	mdügvÆ
;

59 
	mphysid
;

60 
	mvútid
;

61 } 
	tdüg_öv_t
;

64 
	srouãr_öv_s
{

65 
	mp‹tm≠
[80];

66 
	mty≥
[40];

67 
	m‰eq
;

68 
	mªv
;

69 } 
	trouãr_öv_t
;

86 
	#INV_PROCESSOR
 1

	)

87 
	#INV_DISK
 2

	)

88 
	#INV_MEMORY
 3

	)

89 
	#INV_SERIAL
 4

	)

90 
	#INV_PARALLEL
 5

	)

91 
	#INV_TAPE
 6

	)

92 
	#INV_GRAPHICS
 7

	)

93 
	#INV_NETWORK
 8

	)

94 
	#INV_SCSI
 9

	)

95 
	#INV_AUDIO
 10

	)

96 
	#INV_IOBD
 11

	)

97 
	#INV_VIDEO
 12

	)

98 
	#INV_BUS
 13

	)

99 
	#INV_MISC
 14

	)

101 
	#INV_COMPRESSION
 15

	)

102 
	#INV_VSCSI
 16

	)

103 
	#INV_DISPLAY
 17

	)

104 
	#INV_UNC_SCSILUN
 18

	)

105 
	#INV_PCI
 19

	)

106 
	#INV_PCI_NO_DRV
 20

	)

107 
	#INV_PROM
 21

	)

108 
	#INV_IEEE1394
 22

	)

109 
	#INV_RPS
 23

	)

110 
	#INV_TPU
 24

	)

111 
	#INV_FCNODE
 25

	)

112 
	#INV_USB
 26

	)

113 
	#INV_1394NODE
 27

	)

116 
	#INV_CPUBOARD
 1

	)

117 
	#INV_CPUCHIP
 2

	)

118 
	#INV_FPUCHIP
 3

	)

119 
	#INV_CCSYNC
 4

	)

124 
	#INV_IP20BOARD
 10

	)

125 
	#INV_IP19BOARD
 11

	)

126 
	#INV_IP22BOARD
 12

	)

127 
	#INV_IP21BOARD
 13

	)

128 
	#INV_IP26BOARD
 14

	)

129 
	#INV_IP25BOARD
 15

	)

130 
	#INV_IP30BOARD
 16

	)

131 
	#INV_IP28BOARD
 17

	)

132 
	#INV_IP32BOARD
 18

	)

133 
	#INV_IP27BOARD
 19

	)

134 
	#INV_IPMHSIMBOARD
 20

	)

135 
	#INV_IP33BOARD
 21

	)

136 
	#INV_IP35BOARD
 22

	)

139 
	#INV_EVIO
 2

	)

140 
	#INV_O200IO
 3

	)

144 
	#INV_O2000BASEIO
 0x21

	)

145 
	#INV_O2000MSCSI
 0x22

	)

146 
	#INV_O2000MENET
 0x23

	)

147 
	#INV_O2000HIPPI
 0x24

	)

148 
	#INV_O2000GFX
 0x25

	)

149 
	#INV_O2000HAROLD
 0x26

	)

150 
	#INV_O2000VME
 0x27

	)

151 
	#INV_O2000MIO
 0x28

	)

152 
	#INV_O2000FC
 0x29

	)

153 
	#INV_O2000LINC
 0x2a

	)

155 
	#INV_PCIADAP
 4

	)

157 
	#INV_IO4_REV1
 0x21

	)

163 
	#INV_SCSICONTROL
 1

	)

164 
	#INV_SCSIDRIVE
 2

	)

165 
	#INV_SCSIFLOPPY
 5

	)

166 
	#INV_JAGUAR
 16

	)

167 
	#INV_VSCSIDRIVE
 17

	)

168 
	#INV_GIO_SCSICONTROL
 18

	)

169 
	#INV_SCSIRAID
 19

	)

170 
	#INV_XLVGEN
 20

	)

171 
	#INV_PCCARD
 21

	)

172 
	#INV_PCI_SCSICONTROL
 22

	)

176 
	#INV_WD93
 0

	)

177 
	#INV_WD93A
 1

	)

178 
	#INV_WD93B
 2

	)

179 
	#INV_WD95A
 3

	)

180 
	#INV_SCIP95
 4

	)

181 
	#INV_ADP7880
 5

	)

182 
	#INV_QL_REV1
 6

	)

183 
	#INV_QL_REV2
 7

	)

184 
	#INV_QL_REV2_4
 8

	)

185 
	#INV_QL_REV3
 9

	)

186 
	#INV_FCADP
 10

	)

187 
	#INV_QL_REV4
 11

	)

188 
	#INV_QL
 12

	)

189 
	#INV_QL_1240
 13

	)

190 
	#INV_QL_1080
 14

	)

191 
	#INV_QL_1280
 15

	)

192 
	#INV_QL_10160
 16

	)

193 
	#INV_QL_12160
 17

	)

194 
	#INV_QL_2100
 18

	)

195 
	#INV_QL_2200
 19

	)

196 
	#INV_PR_HIO_D
 20

	)

197 
	#INV_PR_PCI64_D
 21

	)

198 
	#INV_QL_2200A
 22

	)

199 
	#INV_SBP2
 23

	)

200 
	#INV_QL_2300
 24

	)

201 
	#INV_QL_2310
 25

	)

202 
	#INV_QL_2342A
 26

	)

203 
	#INV_QL_2342B
 27

	)

204 
	#INV_QL_2340
 28

	)

205 
	#INV_IDE_IOC4
 29

	)

206 
	#INV_LS_1030
 30

	)

207 
	#INV_LS_929XA
 31

	)

208 
	#INV_LS_929XB
 32

	)

209 
	#INV_LS_949XA
 33

	)

210 
	#INV_LS_949XB
 34

	)

211 
	#INV_LS_939X
 35

	)

212 
	#INV_LS_1064
 36

	)

213 
	#INV_LS_1068
 37

	)

217 
	#INV_RAID5_LUN
 0x100

	)

218 
	#INV_PRIMARY
 0x200

	)

219 
	#INV_ALTERNATE
 0x400

	)

220 
	#INV_FAILED
 0x800

	)

221 
	#INV_XVMPRIVATE
 0x1000

	)

222 
	#INV_XVMCLUSTER
 0x2000

	)

223 
	#INV_XVMFOREIGN
 0x4000

	)

225 
	#INV_FO_PREFERRED_PATH
 0x00008000

	)

226 
	#INV_FO_AFFINITY
 0x000f0000

	)

227 
	#INV_FO_AFFINITY_SHIFT
 16

	)

228 
	#INV_FO_MAX_AFFINITY
 ((
INV_FO_AFFINITY
Ë>> (
INV_FO_AFFINITY_SHIFT
))

	)

231 
	#INV_TEAC_FLOPPY
 1

	)

232 
	#INV_INSITE_FLOPPY
 2

	)

235 
	#INV_CPU_SCANNER
 1

	)

238 
	#INV_PCI_33MHZ
 0

	)

239 
	#INV_PCI_66MHZ
 1

	)

240 
	#INV_PCIX_66MHZ
 2

	)

241 
	#INV_PCIX_100MHZ
 3

	)

242 
	#INV_PCIX_133MHZ
 4

	)

248 
	#INV_MAIN
 1

	)

249 
	#INV_DCACHE
 3

	)

250 
	#INV_ICACHE
 4

	)

251 
	#INV_WBUFFER
 5

	)

252 
	#INV_SDCACHE
 6

	)

253 
	#INV_SICACHE
 7

	)

254 
	#INV_SIDCACHE
 8

	)

255 
	#INV_MAIN_MB
 9

	)

256 
	#INV_HUBSPC
 10

	)

257 
	#INV_TIDCACHE
 11

	)

260 
	#INV_CDSIO
 1

	)

261 
	#INV_T3270
 2

	)

262 
	#INV_GSE
 3

	)

263 
	#INV_SI
 4

	)

264 
	#INV_M333X25
 6

	)

265 
	#INV_CDSIO_E
 7

	)

266 
	#INV_ONBOARD
 8

	)

267 
	#INV_EPC_SERIAL
 9

	)

268 
	#INV_ICA
 10

	)

269 
	#INV_VSC
 11

	)

270 
	#INV_ISC
 12

	)

271 
	#INV_GSC
 13

	)

272 
	#INV_ASO_SERIAL
 14

	)

273 
	#INV_PSC
 15

	)

274 
	#INV_IOC3_DMA
 16

	)

275 
	#INV_IOC3_PIO
 17

	)

276 
	#INV_INVISIBLE
 18

	)

277 
	#INV_ISA_DMA
 19

	)

278 
	#INV_IOC4_DMA
 20

	)

279 
	#INV_IOC4_PIO
 21

	)

282 
	#INV_GPIB
 2

	)

283 
	#INV_GPIB_E
 3

	)

284 
	#INV_EPC_PLP
 4

	)

285 
	#INV_ONBOARD_PLP
 5

	)

288 
	#INV_EPP_ECP_PLP
 6

	)

289 
	#INV_EPP_PFD
 7

	)

292 
	#INV_SCSIQIC
 1

	)

293 
	#INV_VSCSITAPE
 4

	)

296 
	#TPUNKNOWN
 0

	)

297 
	#TPQIC24
 1

	)

298 
	#TPDAT
 2

	)

299 
	#TPQIC150
 3

	)

300 
	#TP9TRACK
 4

	)

301 
	#TP8MM_8200
 5

	)

302 
	#TP8MM_8500
 6

	)

303 
	#TPQIC1000
 7

	)

304 
	#TPQIC1350
 8

	)

305 
	#TP3480
 9

	)

306 
	#TPDLT
 10

	)

307 
	#TPD2
 11

	)

308 
	#TPDLTSTACKER
 12

	)

309 
	#TPNTP
 13

	)

310 
	#TPNTPSTACKER
 14

	)

311 
	#TPSTK9490
 15

	)

312 
	#TPSTKSD3
 16

	)

313 
	#TPGY10
 17

	)

314 
	#TP8MM_8900
 18

	)

315 
	#TPMGSTRMP
 19

	)

316 
	#TPMGSTRMPSTCKR
 20

	)

317 
	#TPSTK4791
 21

	)

318 
	#TPSTK4781
 22

	)

319 
	#TPFUJDIANA1
 23

	)

320 
	#TPFUJDIANA2
 24

	)

321 
	#TPFUJDIANA3
 25

	)

322 
	#TP8MM_AIT
 26

	)

323 
	#TPTD3600
 27

	)

324 
	#TPTD3600STCKR
 28

	)

325 
	#TPNCTP
 29

	)

326 
	#TPGY2120
 30

	)

327 
	#TPOVL490E
 31

	)

328 
	#TPSTK9840
 32

	)

329 
	#TPSTK9940
 33

	)

330 
	#TPAPD
 34

	)

331 
	#TPLTO
 35

	)

332 
	#TPGY8240
 36

	)

333 
	#TPSAIT
 37

	)

334 
	#TPIBM3592
 38

	)

335 
	#TPAPDLAST
 69

	)

338 
	#INV_CPUDIAGVAL
 70

	)

346 
	#INV_GR1BOARD
 1

	)

347 
	#INV_GR1BP
 2

	)

348 
	#INV_GR1ZBUFFER
 3

	)

349 
	#INV_GRODEV
 4

	)

350 
	#INV_GMDEV
 5

	)

351 
	#INV_CG2
 6

	)

352 
	#INV_VMUXBOARD
 7

	)

353 
	#INV_VGX
 8

	)

354 
	#INV_VGXT
 9

	)

355 
	#INV_LIGHT
 10

	)

356 
	#INV_GR2
 11

	)

357 
	#INV_RE
 12

	)

358 
	#INV_VTX
 13

	)

359 
	#INV_NEWPORT
 14

	)

360 
	#INV_MGRAS
 15

	)

361 
	#INV_IR
 16

	)

362 
	#INV_CRIME
 17

	)

363 
	#INV_IR2
 18

	)

364 
	#INV_IR2LITE
 19

	)

365 
	#INV_IR2E
 20

	)

366 
	#INV_ODSY
 21

	)

367 
	#INV_IR3
 22

	)

368 
	#INV_IR4
 23

	)

369 
	#INV_PCIGFX
 24

	)

370 
	#INV_PCIGVO_DM7
 25

	)

371 
	#INV_PCIVGA
 26

	)

372 
	#INV_IS1
 27

	)

375 
	#INV_GR1REMASK
 0x7

	)

376 
	#INV_GR1REUNK
 0x0

	)

377 
	#INV_GR1RE1
 0x1

	)

378 
	#INV_GR1RE2
 0x2

	)

379 
	#INV_GR1BUSMASK
 0x38

	)

380 
	#INV_GR1PB
 0x00

	)

381 
	#INV_GR1PBVME
 0x08

	)

382 
	#INV_GR1TURBO
 0x40

	)

383 
	#INV_GR1BIT24
 0x80

	)

384 
	#INV_GR1ZBUF24
 0x100

	)

385 
	#INV_GR1SMALLMON
 0x200

	)

386 
	#INV_GR1SMALLMAP
 0x400

	)

387 
	#INV_GR1AUX4
 0x800

	)

391 
	#INV_GR2_Z
 0x1

	)

392 
	#INV_GR2_24
 0x2

	)

393 
	#INV_GR2_4GE
 0x4

	)

394 
	#INV_GR2_1GE
 0x8

	)

395 
	#INV_GR2_2GE
 0x10

	)

396 
	#INV_GR2_8GE
 0x20

	)

397 
	#INV_GR2_GR3
 0x40

	)

398 
	#INV_GR2_GU1
 0x80

	)

399 
	#INV_GR2_INDY
 0x100

	)

400 
	#INV_GR2_GR5
 0x200

	)

403 
	#INV_GR2_XS
 0x0

	)

404 
	#INV_GR2_XSZ
 0x1

	)

405 
	#INV_GR2_XS24
 0x2

	)

406 
	#INV_GR2_XS24Z
 0x3

	)

407 
	#INV_GR2_XSM
 0x4

	)

408 
	#INV_GR2_ELAN
 0x7

	)

409 
	#INV_GR2_XZ
 0x13

	)

410 
	#INV_GR3_XSM
 0x44

	)

411 
	#INV_GR3_ELAN
 0x47

	)

412 
	#INV_GU1_EXTREME
 0xa3

	)

415 
	#INV_NEWPORT_XL
 0x01

	)

416 
	#INV_NEWPORT_24
 0x02

	)

417 
	#INV_NEWTON
 0x04

	)

420 
	#INV_MGRAS_ARCHS
 0xff000000

	)

421 
	#INV_MGRAS_HQ3
 0x00000000

	)

422 
	#INV_MGRAS_HQ4
 0x01000000

	)

423 
	#INV_MGRAS_MOT
 0x02000000

	)

424 
	#INV_MGRAS_GES
 0x00ff0000

	)

425 
	#INV_MGRAS_1GE
 0x00010000

	)

426 
	#INV_MGRAS_2GE
 0x00020000

	)

427 
	#INV_MGRAS_RES
 0x0000ff00

	)

428 
	#INV_MGRAS_1RE
 0x00000100

	)

429 
	#INV_MGRAS_2RE
 0x00000200

	)

430 
	#INV_MGRAS_TRS
 0x000000f‡

	)

431 
	#INV_MGRAS_0TR
 0x00000000

	)

432 
	#INV_MGRAS_1TR
 0x00000001

	)

433 
	#INV_MGRAS_2TR
 0x00000002

	)

436 
	#INV_CRM_BASE
 0x01

	)

439 
	#INV_ODSY_ARCHS
 0xff000000

	)

440 
	#INV_ODSY_REVA_ARCH
 0x01000000

	)

441 
	#INV_ODSY_REVB_ARCH
 0x02000000

	)

442 
	#INV_ODSY_MEMCFG
 0x00ff0000

	)

443 
	#INV_ODSY_MEMCFG_32
 0x00010000

	)

444 
	#INV_ODSY_MEMCFG_64
 0x00020000

	)

445 
	#INV_ODSY_MEMCFG_128
 0x00030000

	)

446 
	#INV_ODSY_MEMCFG_256
 0x00040000

	)

447 
	#INV_ODSY_MEMCFG_512
 0x00050000

	)

450 
	#INV_NET_ETHER
 0

	)

451 
	#INV_NET_HYPER
 1

	)

452 
	#INV_NET_CRAYIOS
 2

	)

453 
	#INV_NET_FDDI
 3

	)

454 
	#INV_NET_TOKEN
 4

	)

455 
	#INV_NET_HIPPI
 5

	)

456 
	#INV_NET_ATM
 6

	)

457 
	#INV_NET_ISDN_BRI
 7

	)

458 
	#INV_NET_ISDN_PRI
 8

	)

459 
	#INV_NET_HIPPIS
 9

	)

460 
	#INV_NET_GSN
 10

	)

461 
	#INV_NET_MYRINET
 11

	)

464 
	#INV_ETHER_EC
 0

	)

465 
	#INV_ETHER_ENP
 1

	)

466 
	#INV_ETHER_ET
 2

	)

467 
	#INV_HYPER_HY
 3

	)

468 
	#INV_CRAYIOS_CFEI3
 4

	)

469 
	#INV_FDDI_IMF
 5

	)

470 
	#INV_ETHER_EGL
 6

	)

471 
	#INV_ETHER_FXP
 7

	)

472 
	#INV_FDDI_IPG
 8

	)

473 
	#INV_TOKEN_FV
 9

	)

474 
	#INV_FDDI_XPI
 10

	)

475 
	#INV_TOKEN_GTR
 11

	)

476 
	#INV_ETHER_GIO
 12

	)

477 
	#INV_ETHER_EE
 13

	)

478 
	#INV_HIO_HIPPI
 14

	)

479 
	#INV_ATM_GIO64
 15

	)

480 
	#INV_ETHER_EP
 16

	)

481 
	#INV_ISDN_SM
 17

	)

482 
	#INV_TOKEN_MTR
 18

	)

483 
	#INV_ETHER_EF
 19

	)

484 
	#INV_ISDN_48XP
 20

	)

485 
	#INV_FDDI_RNS
 21

	)

486 
	#INV_HIPPIS_XTK
 22

	)

487 
	#INV_ATM_QUADOC3
 23

	)

488 
	#INV_TOKEN_MTRPCI
 24

	)

489 
	#INV_ETHER_ECF
 25

	)

490 
	#INV_GFE
 26

	)

491 
	#INV_VFE
 27

	)

492 
	#INV_ETHER_GE
 28

	)

493 
	#INV_ETHER_EFP
 
INV_ETHER_EF


	)

494 
	#INV_GSN_XTK1
 29

	)

495 
	#INV_GSN_XTK2
 30

	)

496 
	#INV_FORE_HE
 31

	)

497 
	#INV_FORE_PCA
 32

	)

498 
	#INV_FORE_VMA
 33

	)

499 
	#INV_FORE_ESA
 34

	)

500 
	#INV_FORE_GIA
 35

	)

501 
	#INV_MYRINET
 36

	)

502 
	#INV_NET_GENERIC
 37

	)

517 
	#INV_PRINTER
 2

	)

518 
	#INV_CPU
 3

	)

519 
	#INV_WORM
 4

	)

520 
	#INV_CDROM
 5

	)

521 
	#INV_SCANNER
 6

	)

522 
	#INV_OPTICAL
 7

	)

523 
	#INV_CHANGER
 8

	)

524 
	#INV_COMM
 9

	)

525 
	#INV_STARCTLR
 12

	)

526 
	#INV_RAIDCTLR
 32

	)

529 
	#INV_REMOVE
 0x80

	)

530 
	#INV_SCSI_MASK
 7

	)

534 
	#INV_AUDIO_HDSP
 0

	)

535 
	#INV_AUDIO_VIGRA110
 1

	)

536 
	#INV_AUDIO_VIGRA210
 2

	)

537 
	#INV_AUDIO_A2
 3

	)

538 
	#INV_AUDIO_A3
 4

	)

539 
	#INV_AUDIO_RAD
 5

	)

540 
	#INV_AUDIO_USB
 6

	)

541 
	#INV_AUDIO_MAD
 7

	)

542 
	#INV_AUDIO_EMU
 8

	)

546 
	#INV_VIDEO_LIGHT
 0

	)

547 
	#INV_VIDEO_VS2
 1

	)

548 
	#INV_VIDEO_EXPRESS
 2

	)

549 
	#INV_VIDEO_VINO
 3

	)

550 
	#INV_VIDEO_VO2
 4

	)

551 
	#INV_VIDEO_INDY
 5

	)

553 
	#INV_VIDEO_MVP
 6

	)

554 
	#INV_VIDEO_INDY_601
 7

	)

555 
	#INV_VIDEO_PMUX
 8

	)

556 
	#INV_VIDEO_MGRAS
 9

	)

557 
	#INV_VIDEO_DIVO
 10

	)

558 
	#INV_VIDEO_RACER
 11

	)

559 
	#INV_VIDEO_EVO
 12

	)

560 
	#INV_VIDEO_XTHD
 13

	)

561 
	#INV_VIDEO_XTDIGVID
 14

	)

562 
	#INV_VIDEO_DVS_PCI_SD
 15

	)

563 
	#INV_VIDEO_DVS_PCI_HD
 16

	)

564 
	#INV_VIDEO_SD_ANAVID
 17

	)

565 
	#INV_VIDEO_SGC
 18

	)

567 
	#INV_VIDEO_MPEG_2K1
 20

	)

568 
	#INV_VIDEO_MPEG_2K2
 21

	)

570 
	#INV_VIDEO_IIDC
 40

	)

571 
	#INV_VIDEO_AVC
 41

	)

573 
	#INV_VIDEO_DVBASI_MP503
 0x75

	)

574 
	#INV_VIDEO_DVBASI_VP
 0x76

	)

578 
	#INV_GALILEO_REV
 0xF

	)

579 
	#INV_GALILEO_JUNIOR
 0x10

	)

580 
	#INV_GALILEO_INDY_CAM
 0x20

	)

581 
	#INV_GALILEO_DBOB
 0x40

	)

582 
	#INV_GALILEO_ELANTEC
 0x80

	)

586 
	#INV_VINO_REV
 0xF

	)

587 
	#INV_VINO_INDY_CAM
 0x10

	)

588 
	#INV_VINO_INDY_NOSW
 0x20

	)

592 
	#INV_MVP_REV
(
x
Ë(((x)&0x0000000f))

	)

593 
	#INV_MVP_REV_SW
(
x
Ë(((x)&0x000000f0)>>4)

	)

594 
	#INV_MVP_AV_BOARD
(
x
Ë(((x)&0x00000f00)>>8)

	)

595 
	#INV_MVP_AV_REV
(
x
Ë(((x)&0x0000f000)>>12)

	)

596 
	#INV_MVP_CAMERA
(
x
Ë(((x)&0x000f0000)>>16)

	)

597 
	#INV_MVP_CAM_REV
(
x
Ë(((x)&0x00f00000)>>20)

	)

598 
	#INV_MVP_SDIINF
(
x
Ë(((x)&0x0f000000)>>24)

	)

599 
	#INV_MVP_SDI_REV
(
x
Ë(((x)&0xf0000000)>>28)

	)

603 
	#INV_BUS_VME
 0

	)

604 
	#INV_BUS_EISA
 1

	)

605 
	#INV_BUS_GIO
 2

	)

606 
	#INV_BUS_BT3_PCI
 3

	)

609 
	#INV_MISC_EPC_EINT
 0

	)

610 
	#INV_MISC_PCKM
 1

	)

611 
	#INV_MISC_IOC3_EINT
 2

	)

612 
	#INV_MISC_OTHER
 3

	)

613 
	#INV_MISC_IOC4_EINT
 4

	)

614 
	#INV_MISC_IOC4
 7

	)

624 
	#INV_XBOW
 3

	)

625 
	#INV_HUB
 4

	)

626 
	#INV_PCI_BRIDGE
 5

	)

627 
	#INV_ROUTER
 6

	)

630 
	#INV_IO6PROM
 0

	)

631 
	#INV_IP27PROM
 1

	)

632 
	#INV_IP35PROM
 2

	)

636 
	#INV_COSMO
 0

	)

637 
	#INV_INDYCOMP
 1

	)

638 
	#INV_IMPACTCOMP
 2

	)

639 
	#INV_VICE
 3

	)

642 
	#INV_PRESENTER_BOARD
 0

	)

643 
	#INV_PRESENTER_PANEL
 1

	)

644 
	#INV_ICO_BOARD
 2

	)

645 
	#INV_DCD_BOARD
 3

	)

646 
	#INV_7of9_BOARD
 4

	)

647 
	#INV_7of9_PANEL
 5

	)

650 
	#INV_OHCI
 0

	)

651 
	#INV_DM10
 1

	)

654 
	#INV_IEEE1394_STATE_TI_REV_1
 0

	)

657 
	#INV_IEEE1394_CTLR_O2_DVLINK_11
 0x8009104c

	)

660 
	#INV_TPU_EXT
 0

	)

661 
	#INV_TPU_XIO
 1

	)

662 
	#INV_TPUPLUS_XIO
 2

	)

671 
	#USB_INV_DEVCLASS
(
övty≥
Ë((övty≥Ë>> 8)

	)

672 
	#USB_INV_DEVTYPE
(
övty≥
Ë((övty≥Ë& 0xf)

	)

673 
	#USB_INV_TYPE
(
usb˛ass
, 
usbty≥
Ë(((usb˛assË<< 8Ë| (usbty≥))

	)

680 
	#USB_INV_CLASS_RH
 0x00

	)

681 
	#USB_INV_CLASS_HID
 0x03

	)

682 
	#USB_INV_CLASS_HUB
 0x09

	)

683 
	#USB_INV_CLASS_COMPOSITOR
 0xf‡

	)

698 
	#USB_INV_RH_OHCI
 0x01

	)

704 
	#USB_INV_HID_KEYBOARD
 0x01

	)

705 
	#USB_INV_HID_MOUSE
 0x02

	)

706 
	#USB_INV_HID_TABLET
 0x03

	)

712 
	sövít_gíîic_s
 {

713 
	mig_moduÀ
;

714 
	mig_¶Ÿ
;

715 
	mig_Êag
;

716 
	mig_öv˛ass
;

717 } 
	tövít_gíîic_t
;

719 
	#INVENT_ENABLED
 0x1

	)

721 
	sövít_membnköfo
 {

722 
	mimb_size
;

723 
	mimb_©å
;

724 
	mimb_Êag
;

725 } 
	tövít_membnköfo_t
;

728 
	sövít_memöfo
 {

729 
övít_gíîic_t
 
	mim_gí
;

730 
	mim_size
;

731 
	mim_b™ks
;

737 
övít_membnköfo_t
 
	mim_b™k_öfo
[1];

738 } 
	tövít_memöfo_t
;

740 
	#INV_MEM_PREMIUM
 0x01

	)

742 
	sövít_˝uöfo
 {

743 
övít_gíîic_t
 
	mic_gí
;

744 
˝u_öv_t
 
	mic_˝u_öfo
;

745 
	mic_˝uid
;

746 
	mic_¶i˚
;

747 
	mic_˝umode
;

749 } 
	tövít_˝uöfo_t
;

751 
	sövít_Ωsöfo
 {

752 
övít_gíîic_t
 
	mú_gí
;

753 
	mú_xbox
;

754 } 
	tövít_Ωsöfo_t
;

756 
	sövít_miscöfo
 {

757 
övít_gíîic_t
 
	mim_gí
;

758 
	mim_ªv
;

759 
	mim_vîsi⁄
;

760 
	mim_ty≥
;

761 
__uöt64_t
 
	mim_•ìd
;

762 } 
	tövít_miscöfo_t
;

765 
	sövít_rouãröfo
{

766 
övít_gíîic_t
 
	mim_gí
;

767 
rouãr_öv_t
 
	mrù
;

768 } 
	tövít_rouãröfo_t
;

772 #ifde‡
_KERNEL


773 
	~"sys/gøph.h
"

774 
	~"sys/hwgøph.h
"

776 
	súix5_övít‹y_s
 {

777 
≠p32_±r_t
 
	möv_√xt
;

778 
	möv_˛ass
;

779 
	möv_ty≥
;

780 
maj‹_t
 
	möv_c⁄åﬁÀr
;

781 
mö‹_t
 
	möv_unô
;

782 
	möv_°©e
;

784 } 
	túix5_övít‹y_t
;

786 
	söv∂a˚_s
 {

787 
vîãx_hdl_t
 
	möv∂a˚_vhdl
;

788 
gøph_vîãx_∂a˚_t
 
	möv∂a˚_v∂a˚
;

789 
övít‹y_t
 *
	möv∂a˚_öv
;

790 } 
	töv∂a˚_t
;

792 
	#INVPLACE_NONE
 
öv∂a˚_n⁄e


	)

794 
add_to_övít‹y
(, , , , );

795 
ª∂a˚_ö_övít‹y
(
övít‹y_t
 *, , , , , );

796 
°¨t_sˇn_övít‹y
(
öv∂a˚_t
 *);

797 
övít‹y_t
 *
gë_√xt_övít‹y
(
öv∂a˚_t
 *);

798 
íd_sˇn_övít‹y
(
öv∂a˚_t
 *);

799 
övít‹y_t
 *
föd_övít‹y
(inventory_t *, , , , , );

800 
sˇnövít
((*)(
övít‹y_t
 *, *), *);

801 
	`xsˇnövít
((*)(
övít‹y_t
 *, 
vîãx_hdl_t
, *),

803 
	`gë_sizeof_övít‹y
();

805 
	`devi˚_övít‹y_add
–
dev_t
 
devi˚
,

806 
˛ass
,

807 
ty≥
,

808 
maj‹_t
 
˘Ã
,

809 
mö‹_t
 
unô
,

810 
°©e
);

813 
övít‹y_t
 *
	`devi˚_övít‹y_gë_√xt
–
dev_t
 
devi˚
,

814 
öv∂a˚_t
 *);

816 
	`devi˚_c⁄åﬁÀr_num_£t
–
dev_t
,

818 
	`devi˚_c⁄åﬁÀr_num_gë
–
dev_t
);

820 
	`devi˚_övít‹y_°rög_£t
–
dev_t
 
devi˚
,

821 *
°rög
);

823 
	`devi˚_övít‹y_°rög_ªmove
–
dev_t
 
devi˚
);

	@/usr/include/sys/iobus.h

1 #i‚de‡
__SYS_IOBUS_H


2 
	#__SYS_IOBUS_H


	)

16 #ifde‡
__˝lu•lus


22 
e‰ame_s
;

23 
piom≠
;

24 
dmam≠
;

32 
	~<sys/drivî.h
>

35 
__psunsig√d_t
 
	tiobush_t
;

37 #i‡
_KERNEL


39 
vîãx_hdl_t
 
	tad≠_t
;

44 *
	töå_¨g_t
;

45 
	töå_func_f
(
	töå_¨g_t
);

46 
öå_func_f
 *
	töå_func_t
;

48 
	#INTR_ARG
(
n
Ë((
öå_¨g_t
)(
__psunsig√d_t
)“))

	)

51 
öå_s
 *
	töå_t
;

52 
	#INTR_HANDLE_NONE
 ((
öå_t
)0)

	)

58 *
	tævl_t
;

77 
	sdevi˚_desc_s
 {

84 
vîãx_hdl_t
 
öå_èrgë
;

85 
öå_pﬁicy
;

86 
ûvl_t
 
öå_swÀvñ
;

87 *
öå_«me
;

89 
Êags
;

90 } *
	tdevi˚_desc_t
;

93 
	#D_INTR_ISERR
 0x1

	)

94 
	#D_IS_ASSOC
 0x2

	)

95 
	#D_INTR_NOTHREAD
 0x4

	)

97 
	#INTR_SWLEVEL_NOTHREAD_DEFAULT
 0

	)

128 
devi˚_desc_t
 
devi˚_desc_dup
(
vîãx_hdl_t
 
dev
);

129 
devi˚_desc_‰ì
(
devi˚_desc_t
 
devi˚_desc
);

130 
devi˚_desc_t
 
devi˚_desc_deÁu…_gë
(
vîãx_hdl_t
 
dev
);

131 
devi˚_desc_deÁu…_£t
(
vîãx_hdl_t
 
dev
, 
devi˚_desc_t
 
devi˚_desc
);

133 
vîãx_hdl_t
 
devi˚_desc_öå_èrgë_gë
(
devi˚_desc_t
 
devi˚_desc
);

134 
devi˚_desc_öå_pﬁicy_gë
(
devi˚_desc_t
 
devi˚_desc
);

135 
ûvl_t
 
devi˚_desc_öå_swÀvñ_gë
(
devi˚_desc_t
 
devi˚_desc
);

136 * 
devi˚_desc_öå_«me_gë
(
devi˚_desc_t
 
devi˚_desc
);

137 
devi˚_desc_Êags_gë
(
devi˚_desc_t
 
devi˚_desc
);

139 
devi˚_desc_öå_èrgë_£t
(
devi˚_desc_t
 
devi˚_desc
, 
vîãx_hdl_t
 
èrgë
);

140 
devi˚_desc_öå_pﬁicy_£t
(
devi˚_desc_t
 
devi˚_desc
, 
pﬁicy
);

141 
devi˚_desc_öå_swÀvñ_£t
(
devi˚_desc_t
 
devi˚_desc
, 
ûvl_t
 
swÀvñ
);

142 
devi˚_desc_öå_«me_£t
(
devi˚_desc_t
 
devi˚_desc
, *
«me
);

143 
devi˚_desc_Êags_£t
(
devi˚_desc_t
 
devi˚_desc
, 
Êags
);

147 #ifde‡
COMMENT


148 
	#IO_STATE_EMPTY
 0x01

	)

149 
	#IO_STATE_INITIALIZING
 0x02

	)

150 
	#IO_STATE_ATTACHING
 0x04

	)

151 
	#IO_STATE_ACTIVE
 0x08

	)

152 
	#IO_STATE_DETACHING
 0x10

	)

153 
	#IO_STATE_INACTIVE
 0x20

	)

154 
	#IO_STATE_ERROR
 0x40

	)

155 
	#IO_STATE_BAD_HARDWARE
 0x80

	)

158 
	gedt
;

162 
	#RC_OK
 0

	)

163 
	#RC_ERROR
 1

	)

166 
	#IOBUS_CONFIG_ATTACH
 0

	)

167 
	#IOBUS_CONFIG_DETACH
 1

	)

168 
	#IOBUS_CONFIG_RECOVER
 2

	)

171 
pio_gëh
(
piom≠
*, 
bus
, 
bus_id
, 
subty≥
,

172 
i›addr_t
 
addr
, 
size
);

175 
dma_gëh
(
dmam≠
*, 
bus_ty≥
, 
bus_id
, 
dma_ty≥
,

176 
≈ages
, 
∑ge_size
, 
Êags
);

178 #ifde‡
__˝lu•lus


185 
	#x_≤um
(
addr
, 
ps
Ë((
__psunsig√d_t
)◊ddrË/ (__psunsig√d_t)’s))

	)

186 
	#x_poff
(
addr
, 
ps
Ë((
__psunsig√d_t
)◊ddrË& ((__psunsig√d_t)’sË- 1))

	)

	@/usr/include/sys/ioctl.h

8 #i‚de‡
_SYS_IOCTL_H


9 
	#_SYS_IOCTL_H


	)

11 #ifde‡
__˝lu•lus


20 
	#IOCTYPE
 0xff00

	)

22 
	#LIOC
 ('l'<<8)

	)

23 
	#LIOCGETP
 (
LIOC
|1)

	)

24 
	#LIOCSETP
 (
LIOC
|2)

	)

25 
	#LIOCGETS
 (
LIOC
|5)

	)

26 
	#LIOCSETS
 (
LIOC
|6)

	)

28 
	#DIOC
 ('d'<<8)

	)

29 
	#DIOCGETC
 (
DIOC
|1)

	)

30 
	#DIOCGETB
 (
DIOC
|2)

	)

31 
	#DIOCSETE
 (
DIOC
|3)

	)

34 
	#GIOC
 ('g'<<8)

	)

35 
	#GIOCSETBW
 (
GIOC
|1)

	)

36 
	#GIOCRELEASEBW
 (
GIOC
|2)

	)

45 
	~<sys/ioccom.h
>

47 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

48 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

49 
	#FIOASYNC
 
	`_IOW
('f', 125, Ë

	)

50 
	#FIOSETOWN
 
	`_IOW
('f', 124, Ë

	)

51 
	#FIOGETOWN
 
	`_IOR
('f', 123, Ë

	)

55 #i‚de‡
_KERNEL


56 
	~<√t/soio˘l.h
>

57 
	~<sys/ãrmio.h
>

59 
io˘l
(, , ...);

62 #ifde‡
__˝lu•lus


	@/usr/include/sys/iograph.h

1 #i‚de‡
__SYS_IOGRAPH_H


2 
	#__SYS_IOGRAPH_H


	)

18 
	~<sys/xèlk/xbow.h
>

28 
	#EDGE_LBL_BUS
 "bus"

	)

29 
	#EDGE_LBL_CONN
 ".c⁄√˘i⁄"

	)

30 
	#EDGE_LBL_ECP
 "e˝"

	)

31 
	#EDGE_LBL_ECPP
 "e˝p"

	)

32 
	#EDGE_LBL_GUEST
 ".gue°"

	)

33 
	#EDGE_LBL_HOST
 ".ho°"

	)

34 
	#EDGE_LBL_PERFMON
 "m⁄"

	)

35 
	#EDGE_LBL_USRPCI
 "u§pci"

	)

36 
	#EDGE_LBL_VME
 "vmebus"

	)

37 
	#EDGE_LBL_BLOCK
 "block"

	)

38 
	#EDGE_LBL_BOARD
 "bﬂrd"

	)

39 
	#EDGE_LBL_CHAR
 "ch¨"

	)

40 
	#EDGE_LBL_CONTROLLER
 "c⁄åﬁÀr"

	)

41 
	#EDGE_LBL_CPU
 "˝u"

	)

42 
	#EDGE_LBL_CPUNUM
 "˝unum"

	)

43 
	#EDGE_LBL_DISABLED
 "dißbÀd"

	)

44 
	#EDGE_LBL_DISK
 "disk"

	)

45 
	#EDGE_LBL_DMA_ENGINE
 "dma_ígöe"

	)

47 
	#EDGE_LBL_NET
 "√t"

	)

48 
	#EDGE_LBL_EF
 "ef"

	)

49 
	#EDGE_LBL_ET
 "ë"

	)

50 
	#EDGE_LBL_EC
 "ec"

	)

51 
	#EDGE_LBL_ECF
 "ec"

	)

52 
	#EDGE_LBL_EM
 "ec"

	)

53 
	#EDGE_LBL_IPG
 "ùg"

	)

54 
	#EDGE_LBL_XPI
 "xpi"

	)

55 
	#EDGE_LBL_HIP
 "hù"

	)

56 
	#EDGE_LBL_GSN
 "g¢"

	)

57 
	#EDGE_LBL_ATM
 "©m"

	)

58 
	#EDGE_LBL_FXP
 "fxp"

	)

59 
	#EDGE_LBL_EP
 "ï"

	)

60 
	#EDGE_LBL_VFE
 "v„"

	)

61 
	#EDGE_LBL_GFE
 "g„"

	)

62 
	#EDGE_LBL_RNS
 "∫s"

	)

63 
	#EDGE_LBL_MTR
 "må"

	)

64 
	#EDGE_LBL_FV
 "fv"

	)

65 
	#EDGE_LBL_GTR
 "gå"

	)

66 
	#EDGE_LBL_ISDN
 "isdn"

	)

68 
	#EDGE_LBL_EISA
 "eiß"

	)

69 
	#EDGE_LBL_ENET
 "ëhî√t"

	)

70 
	#EDGE_LBL_FIREWIRE
 "fúewúe"

	)

71 
	#EDGE_LBL_FLOPPY
 "Ê›py"

	)

72 
	#EDGE_LBL_PFD
 "pfd"

	)

73 
	#EDGE_LBL_FOP
 "f›"

	)

74 
	#EDGE_LBL_GIO
 "gio"

	)

75 
	#EDGE_LBL_HEART
 "hóπ"

	)

76 
	#EDGE_LBL_HPC
 "hpc"

	)

77 
	#EDGE_LBL_GFX
 "gfx"

	)

78 
	#EDGE_LBL_HUB
 "hub"

	)

79 
	#EDGE_LBL_IBUS
 "ibus"

	)

80 
	#EDGE_LBL_INTERCONNECT
 "lök"

	)

81 
	#EDGE_LBL_IO
 "io"

	)

82 
	#EDGE_LBL_IO4
 "io4"

	)

83 
	#EDGE_LBL_IOC3
 "ioc3"

	)

84 
	#EDGE_LBL_IOC4
 "ioc4"

	)

85 
	#EDGE_LBL_LUN
 "lun"

	)

86 
	#EDGE_LBL_MACE
 "ma˚"

	)

87 
	#EDGE_LBL_MACHDEP
 "machdï"

	)

88 
	#EDGE_LBL_MASTER
 ".ma°î"

	)

89 
	#EDGE_LBL_MEMORY
 "mem‹y"

	)

90 
	#EDGE_LBL_META_ROUTER
 "më¨ouãr"

	)

91 
	#EDGE_LBL_MIDPLANE
 "mid∂™e"

	)

92 
	#EDGE_LBL_MODULE
 "moduÀ"

	)

93 
	#EDGE_LBL_NODE
 "node"

	)

94 
	#EDGE_LBL_NODENUM
 "nodíum"

	)

95 
	#EDGE_LBL_NVRAM
 "nvøm"

	)

96 
	#EDGE_LBL_PARTITION
 "∑πôi⁄"

	)

97 
	#EDGE_LBL_PCI
 "pci"

	)

98 
	#EDGE_LBL_PCIX
 "pci-x"

	)

99 
	#EDGE_LBL_PCIX_0
 
EDGE_LBL_PCIX
 "/0"

	)

100 
	#EDGE_LBL_PCIX_1
 
EDGE_LBL_PCIX
 "/1"

	)

101 
	#EDGE_LBL_AGP
 "agp"

	)

102 
	#EDGE_LBL_AGP_0
 
EDGE_LBL_AGP
 "/0"

	)

103 
	#EDGE_LBL_AGP_1
 
EDGE_LBL_AGP
 "/1"

	)

104 
	#EDGE_LBL_PORT
 "p‹t"

	)

105 
	#EDGE_LBL_PROM
 "¥om"

	)

106 
	#EDGE_LBL_RACK
 "øck"

	)

107 
	#EDGE_LBL_RDISK
 "rdisk"

	)

108 
	#EDGE_LBL_REPEATER_ROUTER
 "ª≥©îrouãr"

	)

109 
	#EDGE_LBL_ROUTER
 "rouãr"

	)

110 
	#EDGE_LBL_RPOS
 "bay"

	)

111 
	#EDGE_LBL_SCSI
 "scsi"

	)

112 
	#EDGE_LBL_SCSI_CTLR
 "scsi_˘Ã"

	)

113 
	#EDGE_LBL_SLOT
 "¶Ÿ"

	)

114 
	#EDGE_LBL_SLAB
 "¶ab"

	)

115 
	#EDGE_LBL_TAPE
 "è≥"

	)

116 
	#EDGE_LBL_TARGET
 "èrgë"

	)

117 
	#EDGE_LBL_UNKNOWN
 "unknown"

	)

118 
	#EDGE_LBL_VOLUME
 "vﬁume"

	)

119 
	#EDGE_LBL_VOLUME_HEADER
 "vﬁume_hódî"

	)

120 
	#EDGE_LBL_XBOW
 "xbow"

	)

121 
	#EDGE_LBL_XIO
 "xio"

	)

122 
	#EDGE_LBL_XSWITCH
 ".xswôch"

	)

123 
	#EDGE_LBL_XTALK
 "xèlk"

	)

124 
	#EDGE_LBL_XWIDGET
 "xwidgë"

	)

125 
	#EDGE_LBL_ELSC
 "ñsc"

	)

126 
	#EDGE_LBL_L1
 "L1"

	)

127 
	#EDGE_LBL_L1_1
 "L1_exã∫"

	)

128 
	#EDGE_LBL_MADGE_TR
 "Madge-tokírög"

	)

129 
	#EDGE_LBL_XPLINK
 "x∂ök"

	)

130 
	#EDGE_LBL_XPLINK_NET
 "√t"

	)

131 
	#EDGE_LBL_XPLINK_RAW
 "øw"

	)

132 
	#EDGE_LBL_XPLINK_KERNEL
 "kî√l"

	)

133 
	#EDGE_LBL_XPLINK_ADMIN
 "admö"

	)

134 
	#EDGE_LBL_KAIO
 "kaio"

	)

135 
	#EDGE_LBL_RPS
 "Ωs"

	)

136 
	#EDGE_LBL_XBOX_RPS
 "xbox_Ωs"

	)

137 
	#EDGE_LBL_IOBRICK
 "iobrick"

	)

138 
	#EDGE_LBL_PBRICK
 "Pbrick"

	)

139 
	#EDGE_LBL_PEBRICK
 "PEbrick"

	)

140 
	#EDGE_LBL_PXBRICK
 "PXbrick"

	)

141 
	#EDGE_LBL_IBRICK
 "Ibrick"

	)

142 
	#EDGE_LBL_IXBRICK
 "IXbrick"

	)

143 
	#EDGE_LBL_XBRICK
 "Xbrick"

	)

144 
	#EDGE_LBL_NBRICK
 "Nbrick"

	)

145 
	#EDGE_LBL_CGBRICK
 "CGbrick"

	)

146 
	#EDGE_LBL_CPUBUS
 "˝ubus"

	)

147 
	#EDGE_LBL_MEM_ALLOC
 "mem_Æloc"

	)

150 
	#INFO_LBL_CNODEID
 "_˙odeid"

	)

151 
	#INFO_LBL_CONTROLLER_NAME
 "_c⁄åﬁÀr_«me"

	)

152 
	#INFO_LBL_CPUBUS
 "_˝ubus"

	)

153 
	#INFO_LBL_CPUID
 "_˝uid"

	)

154 
	#INFO_LBL_CPU_INFO
 "_˝u"

	)

155 
	#INFO_LBL_DETAIL_INVENT
 "_dëaû_övít"

	)

156 
	#INFO_LBL_DEVICE_DESC
 "_devi˚_desc"

	)

157 
	#INFO_LBL_DIAGVAL
 "_düg_ªas⁄"

	)

158 
	#INFO_LBL_DKIOTIME
 "_dkiŸime"

	)

159 
	#INFO_LBL_DRIVER
 "_drivî"

	)

160 
	#INFO_LBL_ELSC
 "_ñsc"

	)

161 
	#INFO_LBL_SUBCH
 "_subch"

	)

162 
	#INFO_LBL_L1SCP
 "_l1s˝"

	)

163 
	#INFO_LBL_FC_PORTNAME
 "_fc_p‹äame"

	)

164 
	#INFO_LBL_GIOIO
 "_gioio"

	)

165 
	#INFO_LBL_GFUNCS
 "_gioio_›s"

	)

166 
	#INFO_LBL_HINV_STRING
 "_höv_°rög"

	)

167 
	#INFO_LBL_HUB_INFO
 "_huböfo"

	)

168 
	#INFO_LBL_HWGFSLIST
 "_hwgfs_li°"

	)

169 
	#INFO_LBL_TRAVERSE
 "_hwg_åavî£"

	)

170 
	#INFO_LBL_INVENT
 "_övít"

	)

171 
	#INFO_LBL_MLRESET
 "_mÃe£t"

	)

172 
	#INFO_LBL_MODULE_INFO
 "_moduÀ"

	)

173 
	#INFO_LBL_MONDATA
 "_m⁄"

	)

174 
	#INFO_LBL_MDPERF_DATA
 "_md≥rf"

	)

175 
	#INFO_LBL_NIC
 "_nic"

	)

176 
	#INFO_LBL_NODE_INFO
 "_node"

	)

177 
	#INFO_LBL_PCIBR_HINTS
 "_pcibr_höts"

	)

178 
	#INFO_LBL_PCIIO
 "_pciio"

	)

179 
	#INFO_LBL_PFUNCS
 "_pciio_›s"

	)

180 
	#INFO_LBL_PERMISSIONS
 "_≥rmissi⁄s"

	)

181 
	#INFO_LBL_ROUTER_INFO
 "_rouãr"

	)

182 
	#INFO_LBL_SUBDEVS
 "_subdevs"

	)

183 
	#INFO_LBL_VME_FUNCS
 "_vmeio_›s"

	)

184 
	#INFO_LBL_XSWITCH
 "_xswôch"

	)

185 
	#INFO_LBL_XSWITCH_ID
 "_xswôch_id"

	)

186 
	#INFO_LBL_XSWITCH_VOL
 "_xswôch_vﬁu¡ìr"

	)

187 
	#INFO_LBL_XFUNCS
 "_xèlk_›s"

	)

188 
	#INFO_LBL_XWIDGET
 "_xwidgë"

	)

189 
	#INFO_LBL_GRIO_DSK
 "_grio_disk"

	)

190 
	#INFO_LBL_ASYNC_ATTACH
 "_async_©èch"

	)

191 
	#INFO_LBL_GFXID
 "_gfxid"

	)

192 
	#INFO_LBL_ENET_OPEN_FUNC
 "_íë_›í_f"

	)

196 
	#ADMIN_LBL_INTR_TARGET
 "INTR_TARGET"

	)

197 
	#ADMIN_LBL_INTR_SWLEVEL
 "INTR_SWLEVEL"

	)

199 
	#ADMIN_LBL_DMATRANS_NODE
 "PCIBUS_DMATRANS_NODE"

	)

203 
	#ADMIN_LBL_DISABLED
 "DISABLE"

	)

204 
	#ADMIN_LBL_DETACH
 "DETACH"

	)

206 
	#ADMIN_LBL_THREAD_PRI
 "thªad_¥i‹ôy"

	)

211 
	#ADMIN_LBL_THREAD_CLASS
 "thªad_˛ass"

	)

218 
	#_DEVNAME_ATTR
 "_dev«me"

	)

219 
	#_DRIVERNAME_ATTR
 "_drivî«me"

	)

220 
	#_INVENT_ATTR
 "_övít‹y"

	)

221 
	#_MASTERNODE_ATTR
 "_ma°înode"

	)

224 
	#INFO_LBL_RESERVED
(
«me
Ë(“ame)[0] ='_')

	)

226 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

227 
öô_Æl_devi˚s
();

230 
io_brick_m≠_widgë
(, );

235 
	sio_brick_m≠_s
 {

236 
	mibm_ty≥
;

237 
	mibm_m≠_wid
[
MAX_PORT_NUM
];

	@/usr/include/sys/kmem.h

13 #i‚de‡
__SYS_KMEM_H__


14 
	#__SYS_KMEM_H__


	)

16 #ifde‡
__˝lu•lus


22 
	~<sys/∑øm.h
>

26 
	#KM_SLEEP
 0

	)

27 
	#KM_NOSLEEP
 0x0001

	)

28 
	#KM_PHYSCONTIG
 0x8000

	)

29 
	#KM_CACHEALIGN
 0x0800

	)

31 
	#KM_NODESPECIFIC
 0x1000000

	)

37 *
kmem_Æloc
(
size_t
, );

38 *
kmem_zÆloc
(
size_t
, );

39 *
kmem_ªÆloc
(*, 
size_t
, );

40 
kmem_‰ì
(*, 
size_t
);

41 
ul⁄g
 
kmem_avaû
();

43 *
kmem_Æloc_node
(
size_t
, , 
˙odeid_t
);

44 *
kmem_ªÆloc_node
(*, 
size_t
, , 
˙odeid_t
);

45 *
kmem_zÆloc_node
(
size_t
, , 
˙odeid_t
);

47 *
kmem_Æloc_node_höt
(
size_t
, , 
˙odeid_t
);

48 *
kmem_zÆloc_node_höt
(
size_t
, , 
˙odeid_t
);

52 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
Ë&& deföed(
BPCSHIFT
)

54 
¨ía
 
	t¨ía_t
;

62 
¨ía_t
 *
kmem_¨ía_¸óã
(*(*)◊ª«_à*, 
size_t
, , ),

63 (*)(*, 
uöt
, ));

64 
kmem_¨ía_de°roy
(
¨ía_t
 *);

69 *
kmem_¨ía_Æloc
(
¨ía_t
 *, 
size_t
, );

70 *
kmem_¨ía_zÆloc
(
¨ía_t
 *, 
size_t
, );

71 *
kmem_¨ía_ªÆloc
(
¨ía_t
 *, *, 
size_t
, );

72 
kmem_¨ía_‰ì
(
¨ía_t
 *, *, 
size_t
);

79 
kmem_z⁄e_mem
(*, *);

94 
z⁄e
 
	tz⁄e_t
;

96 
z⁄e_t
 *
kmem_z⁄e_öô
(, *);

97 *
kmem_z⁄e_Æloc
(
z⁄e_t
 *, );

99 *
kmem_z⁄e_zÆloc
(
z⁄e_t
 *, );

100 
kmem_z⁄e_‰ì
(
z⁄e_t
 *, *);

101 
kmem_z⁄e_unôsize
(
z⁄e_t
 *);

103 
kmem_z⁄e_mösize
(
z⁄e_t
 *
z⁄e
, 
möunôs
);

104 
z⁄e_shake
(
z⁄e_t
 *, );

106 #i‡
NUMA_BASE


107 *
kmem_z⁄e_Æloc_node_höt
(
z⁄e_t
 *, 
˙odeid_t
, );

108 *
kmem_z⁄e_zÆloc_node_höt
(
z⁄e_t
 *, 
˙odeid_t
, );

109 
kmem_z⁄e_£t_deÁu…_node
(
˙odeid_t
);

110 
˙odeid_t
 
kmem_z⁄e_gë_deÁu…_node
();

112 
	#kmem_z⁄e_Æloc_node_höt
(
z
,
n
,
f
Ë
	`kmem_z⁄e_Æloc
(z,f)

	)

113 
	#kmem_z⁄e_zÆloc_node_höt
(
z
,
n
,
f
Ë
	`kmem_z⁄e_zÆloc
(z,f)

	)

114 
	#kmem_z⁄e_£t_deÁu…_node
(
n
)

	)

115 
	#kmem_z⁄e_gë_deÁu…_node
(
n
Ë
CNODEID_NONE


	)

121 *
kmem_c⁄tig_Æloc
(
size_t
, size_t, );

122 
kmem_c⁄tig_‰ì
(*, 
size_t
);

123 *
kmem_c⁄tig_Æloc_node
(
˙odeid_t
, 
size_t
, size_t, );

137 
z⁄e_t
 *
kmem_z⁄e_¥iv©e
(, *);

138 
kmem_z⁄e_¥iv©e_mode_nﬂŒoc
(
z⁄e_t
 *);

139 
kmem_z⁄e_íabÀ_shake
(
z⁄e_t
 *
z⁄e
);

140 
kmem_z⁄e_fûl
(
z⁄e_t
 *, *, );

141 
kmem_z⁄e_fûl_max
(
z⁄e_t
 *, *, , , *);

142 
kmem_z⁄e_ª£rve
(
z⁄e_t
 *, );

143 
kmem_z⁄e_ª£rve_node
(
˙odeid_t
, 
z⁄e_t
 *, );

144 
kmem_z⁄e_‰ìmem
(
z⁄e_t
 *);

158 #ifde‡
NUMA_BASE


160 
shake_ªgi°î
(, (*)(, 
˙odemask_t
));

161 
shake_shake
(, 
˙odemask_t
);

163 
	#SHAKE_DECL
(
x
Ë
	`x
(, 
˙odemask_t
)

	)

164 
	#SHAKE_FUNCTION
(
x
,
y
,
z
Ë
	`x
(y, 
˙odemask_t
 z)

	)

165 
	#SHAKE_SHAKE
(
x
Ë
	`shake_shake
(x,
	`CNODEMASK_FROM_NUMNODES
(
numnodes
))

	)

166 
	#SHAKE_SHAKE_NODES
(
x
,
y
Ë
	`shake_shake
(x, y)

	)

170 
shake_ªgi°î
(, (*)());

171 
shake_shake
();

173 
	#SHAKE_DECL
(
x
Ë
	`x
()

	)

174 
	#SHAKE_FUNCTION
(
x
,
y
,
z
Ë
	`x
(y)

	)

175 
	#SHAKE_SHAKE
(
x
Ë
	`shake_shake
(x)

	)

176 
	#SHAKE_SHAKE_NODES
(
x
,
y
Ë
	`shake_shake
(x)

	)

183 
	#SHAKEMGR_MEMORY
 1

	)

184 
	#SHAKEMGR_SWAP
 2

	)

185 
	#SHAKEMGR_VM
 3

	)

187 #ifde‡
__˝lu•lus


	@/usr/include/sys/ksynch.h

3 #i‚de‡
_SYS_KSYNCH_H


4 
	#_SYS_KSYNCH_H


	)

6 #ifde‡
__˝lu•lus


12 
	~<sys/£ma.h
>

15 *
lk_«me
;

16 
lk_Êags
;

17 
lk_∑d
[2];

18 } 
	tlköfo_t
;

20 
£ma_t
 
	t¶ìp_t
;

21 
mæock_t
 
	trwlock_t
;

23 
	#LOCK_ALLOC
 
lock_Æloc


	)

24 
	#LOCK_DEALLOC
 
lock_dóŒoc


	)

25 
	#LOCK_INIT
 
lock_öô


	)

26 
	#LOCK_DESTROY
 
lock_de°roy


	)

27 
	#LOCK
 
ddi_lock


	)

28 
	#UNLOCK
 
ddi_u∆ock


	)

29 
	#TRYLOCK
 
åylock


	)

31 
	#SLEEP_ALLOC
 
¶ìp_Æloc


	)

32 
	#SLEEP_INIT
 
¶ìp_öô


	)

33 
	#SLEEP_DEALLOC
 
¶ìp_dóŒoc


	)

34 
	#SLEEP_LOCK
 
¶ìp_lock


	)

35 
	#SLEEP_LOCK_SIG
 
¶ìp_lock_sig


	)

36 
	#SLEEP_TRYLOCK
 
¶ìp_åylock


	)

37 
	#SLEEP_UNLOCK
 
¶ìp_u∆ock


	)

38 
	#SLEEP_LOCKAVAIL
 
¶ìp_lockavaû


	)

40 
	#MUTEX_ALLOC
 
ddi_muãx_Æloc


	)

41 
	#MUTEX_INIT
 
muãx_öô


	)

42 
	#MUTEX_DEALLOC
 
muãx_dóŒoc


	)

43 
	#MUTEX_DESTROY
 
muãx_de°roy


	)

45 
	#MUTEX_LOCK
 
ddi_muãx_lock


	)

46 
	#MUTEX_TRYLOCK
 
muãx_åylock


	)

47 
	#MUTEX_UNLOCK
 
muãx_u∆ock


	)

49 
	#MUTEX_OWNED
 
muãx_ow√d


	)

50 
	#MUTEX_MINE
 
muãx_möe


	)

52 
	#SV_ALLOC
 
sv_Æloc


	)

53 
	#SV_INIT
 
sv_öô


	)

54 
	#SV_DEALLOC
 
sv_dóŒoc


	)

55 
	#SV_DESTROY
 
sv_de°roy


	)

56 
	#SV_SIGNAL
 
sv_sig«l


	)

57 
	#SV_BROADCAST
 
sv_brﬂdˇ°


	)

58 
	#SV_WAIT
 
ddi_sv_waô


	)

59 
	#SV_WAIT_SIG
 
ddi_sv_waô_sig


	)

61 
	#RW_ALLOC
 
rw_Æloc


	)

62 
	#RW_INIT
 
mröô


	)

63 
	#RW_DEALLOC
 
rw_dóŒoc


	)

64 
	#RW_DESTROY
 
mr‰ì


	)

65 
	#RW_RDLOCK
 
rw_rdlock


	)

66 
	#RW_TRYRDLOCK
 
rw_åyrdlock


	)

67 
	#RW_WRLOCK
 
rw_wæock


	)

68 
	#RW_TRYWRLOCK
 
rw_åywæock


	)

69 
	#RW_UNLOCK
 
mru∆ock


	)

71 
∂_t
 
∂ba£
;

72 
∂_t
 
∂ba£
;

73 
∂_t
 
∂timeout
;

74 
∂_t
 
∂disk
;

75 
∂_t
 
∂°r
;

76 
∂_t
 
∂hi
;

78 
muãx_t
 *
ddi_muãx_Æloc
(, , *);

79 
ddi_muãx_lock
(
muãx_t
 *, );

81 
lock_t
 *
lock_Æloc
(
uch¨_t
, 
∂_t
, 
lköfo_t
 *, );

82 
lock_öô
(
lock_t
 *, 
uch¨_t
, 
∂_t
, 
lköfo_t
 *);

83 
lock_dóŒoc
(
lock_t
 *);

84 
lock_de°roy
(
lock_t
 *);

85 
ddi_lock
(
lock_t
 *, 
∂_t
);

86 
ddi_u∆ock
(
lock_t
 *, );

87 
åylock
(
lock_t
 *, 
∂_t
);

89 
¶ìp_t
 *
¶ìp_Æloc
(, 
lköfo_t
 *, );

90 
¶ìp_dóŒoc
(
¶ìp_t
 *);

91 
¶ìp_lock
(
¶ìp_t
 *, );

92 
boﬁón_t
 
¶ìp_lock_sig
(
¶ìp_t
 *, );

93 
boﬁón_t
 
¶ìp_åylock
(
¶ìp_t
 *);

94 
¶ìp_u∆ock
(
¶ìp_t
 *);

95 
boﬁón_t
 
¶ìp_lockavaû
(
¶ìp_t
 *);

97 
ddi_sv_waô
(
sv_t
 *, *, );

98 
ddi_sv_waô_sig
(
sv_t
 *, *, );

100 
	#INVPL
 -1

	)

103 #ifde‡
__˝lu•lus


	@/usr/include/sys/mload.h

12 #i‚de‡
_MLOAD_H


13 
	#_MLOAD_H


	)

15 #ifde‡
__˝lu•lus


25 
	~<sys/ty≥s.h
>

26 
	~<sys/∑øm.h
>

27 
	~<sys/c⁄f.h
>

28 
	~<sys/f°yp.h
>

29 
	~<sys/°ªam.h
>

30 
	~<sys/£ma.h
>

37 
	smlﬂd_edt
 {

38 
edt
 *
edç
;

39 
mlﬂd_edt
 *
medt_√xt
;

40 } 
	tmedt_t
;

42 
	#DRV_MAXMAJORS
 32

	)

47 
	smod_drivî
 {

48 
medt_t
 *
d_edç
;

49 
d_˝ulock
;

50 
d_ty≥
;

51 
d_nmaj‹s
;

52 
maj‹_t
 
d_maj‹s
[
DRV_MAXMAJORS
];

53 } 
	tmod_drivî_t
;

56 
	#MDRV_CHAR
 0x1

	)

57 
	#MDRV_BLOCK
 0x2

	)

58 
	#MDRV_STREAM
 0x4

	)

63 
	smod_°ªams
 {

64 
s_«me
[
FMNAMESZ
+1];

65 } 
	tmod_°ªams_t
;

71 
	smod_idbg
 {

72 
i_vÆue
;

73 } 
	tmod_idbg_t
;

78 
	smod_fsys
 {

79 
vsw_«me
[
FSTYPSZ
+1];

80 } 
	tmod_fsys_t
;

85 
	smod_lib
 {

86 
id
;

87 } 
	tmod_lib_t
;

92 
	smod_symèb
 {

93 
id
;

94 
symèb_«me
[20];

95 
ty≥
;

96 } 
	tmod_symèb_t
;

98 
	#M_UNIXSYMTAB
 1

	)

103 
	smod_íë
 {

104 
id
;

105 
medt_t
 *
e_edç
;

106 } 
	tmod_íë_t
;

109 
	#M_PREFIXLEN
 16

	)

111 
	#M_CFG_CURRENT_VERSION
 6

	)

112 
	#M_ALPHA_CFG_CURRENT_VERSION
 1

	)

114 
	#M_VERSION
 "mlﬂd vîsi⁄ 7.0"

	)

115 
	#M_ALPHA_VERSION
 "mlﬂd vîsi⁄ 1.0"

	)

120 
	scfg_desc
 {

121 
m_cfg_vîsi⁄
;

122 
m_Æpha_cfg_vîsi⁄
;

123 *
m_‚ame
;

124 
m_‚amñí
;

125 *
m_d©a
;

126 
m_¥efix
[
M_PREFIXLEN
];

127 
˛ock_t
 
m_dñay
;

128 
m_id
;

129 
m_Êags
;

130 
m_tÊags
;

131 
m_ªf˙t
;

132 
ml_öfo
 *
m_öfo
;

133 
cfg_desc
 *
m_√xt
;

134 
m_ty≥
;

135 
m_timeoutid
;

136 
£ma_t
 
m_å™s£ma
;

137 
devi˚_drivî_s
 *
m_devi˚_drivî
;

138 
uöt64_t
 
m_¥iv_kid
;

139 } 
	tcfg_desc_t
;

144 
	umod_dï
 {

145 
mod_drivî_t
 
d
;

146 
mod_°ªams_t
 
s
;

147 
mod_fsys_t
 
f
;

148 
mod_idbg_t
 
i
;

149 
mod_lib_t
 
l
;

150 
mod_symèb_t
 
y
;

151 
mod_íë_t
 
e
;

157 
	smod_öfo
 {

158 
m_cfg_vîsi⁄
;

159 
m_Æpha_cfg_vîsi⁄
;

160 
m_‚ame
[
MAXPATHLEN
];

161 
m_¥efix
[
M_PREFIXLEN
];

162 
˛ock_t
 
m_dñay
;

163 
m_Êags
;

164 
m_id
;

165 
m_ty≥
;

166 
mod_dï
 
m_dï
;

167 } 
	tmod_öfo_t
;

169 
	#m_drivî
 
m_dï
.
d


	)

170 
	#m_°ªam
 
m_dï
.
s


	)

171 
	#m_fsys
 
m_dï
.
f


	)

172 
	#m_idbg
 
m_dï
.
i


	)

173 
	#m_lib
 
m_dï
.
l


	)

174 
	#m_symèb
 
m_dï
.
y


	)

177 
	#CF_LOAD
 1

	)

178 
	#CF_UNLOAD
 2

	)

179 
	#CF_REGISTER
 3

	)

180 
	#CF_UNREGISTER
 4

	)

181 
	#CF_LIST
 5

	)

182 
	#CF_DEBUG
 6

	)

185 
	#SYM_ADDR
 6

	)

186 
	#SYM_NAME
 7

	)

187 
	#SYM_ADDR_ALL
 8

	)

188 
	#SYM_NAME_ALL
 9

	)

191 
	#M_DRIVER
 1

	)

192 
	#M_STREAMS
 2

	)

193 
	#M_IDBG
 3

	)

194 
	#M_LIB
 4

	)

195 
	#M_FILESYS
 5

	)

196 
	#M_ENET
 6

	)

197 
	#M_SYMTAB
 7

	)

198 
	#M_OTHER
 99

	)

201 
	#M_NOINIT
 1

	)

202 
	#M_INITED
 2

	)

203 
	#M_SYMDEBUG
 4

	)

205 
	#M_REGISTERED
 0x10

	)

206 
	#M_LOADED
 0x20

	)

207 
	#M_TRANSITION
 0x40

	)

208 
	#M_UNLOADING
 0x80

	)

209 
	#M_NOAUTOUNLOAD
 0x100

	)

212 
	#M_EXPIRED
 0x1

	)

215 
	#M_NOUNLD
 -2

	)

216 
	#M_UNLDDEFAULT
 -1

	)

217 
	#M_UNLDVAL
 60*100

	)

219 
	#MAJOR_ANY
 0xfffffff‡

	)

227 
	#MERR_ENOENT
 2

	)

228 
	#MERR_ENAMETOOLONG
 3

	)

229 
	#MERR_VREG
 4

	)

232 
	#MERR_VOP_OPEN
 7

	)

234 
	#MERR_VOP_CLOSE
 9

	)

235 
	#MERR_COPY
 10

	)

238 
	#MERR_BADMAGIC
 11

	)

239 
	#MERR_BADFH
 12

	)

240 
	#MERR_BADAH
 13

	)

241 
	#MERR_BADSH
 14

	)

242 
	#MERR_BADTEXT
 15

	)

244 
	#MERR_BADDATA
 17

	)

245 
	#MERR_BADREL
 18

	)

246 
	#MERR_BADSYMHEAD
 19

	)

247 
	#MERR_BADEXSTR
 20

	)

248 
	#MERR_BADEXSYM
 21

	)

249 
	#MERR_NOSEC
 22

	)

250 
	#MERR_NOSTRTAB
 23

	)

251 
	#MERR_NOSYMS
 24

	)

254 
	#MERR_BADARCH
 25

	)

255 
	#MERR_SHSTR
 26

	)

256 
	#MERR_SYMTAB
 27

	)

257 
	#MERR_STRTAB
 28

	)

258 
	#MERR_NOTEXT
 29

	)

259 
	#MERR_SHNDX
 30

	)

261 
	#MERR_UNKNOWN_CFCMD
 31

	)

262 
	#MERR_UNKNOWN_SYMCMD
 32

	)

264 
	#MERR_FINDADDR
 33

	)

265 
	#MERR_FINDNAME
 34

	)

266 
	#MERR_SYMEFAULT
 35

	)

268 
	#MERR_NOELF
 36

	)

269 
	#MERR_UNSUPPORTED
 37

	)

270 
	#MERR_LOADOFF
 38

	)

272 
	#MERR_BADID
 39

	)

273 
	#MERR_NOTLOADED
 40

	)

274 
	#MERR_NOTREGED
 41

	)

275 
	#MERR_OPENBUSY
 42

	)

276 
	#MERR_UNLOADBUSY
 43

	)

277 
	#MERR_UNREGBUSY
 44

	)

278 
	#MERR_ILLDRVTYPE
 45

	)

279 
	#MERR_NOMAJOR
 46

	)

280 
	#MERR_NOMAJORS
 47

	)

281 
	#MERR_ILLMAJOR
 48

	)

282 
	#MERR_MAJORUSED
 49

	)

283 
	#MERR_SWTCHFULL
 50

	)

284 
	#MERR_UNLDFAIL
 51

	)

285 
	#MERR_DOLD
 52

	)

287 
	#MERR_NODEVFLAG
 53

	)

288 
	#MERR_NOINFO
 54

	)

289 
	#MERR_NOOPEN
 55

	)

290 
	#MERR_NOCLOSE
 56

	)

291 
	#MERR_NOMMAP
 57

	)

292 
	#MERR_NOSTRAT
 58

	)

293 
	#MERR_NOSIZE
 59

	)

294 
	#MERR_NOUNLD
 60

	)

295 
	#MERR_NOVFSOPS
 61

	)

296 
	#MERR_NOVNODEOPS
 62

	)

297 
	#MERR_NOINIT
 63

	)

298 
	#MERR_NOINTR
 64

	)

299 
	#MERR_NOEDTINIT
 65

	)

301 
	#MERR_NOSTRNAME
 66

	)

302 
	#MERR_STRDUP
 67

	)

303 
	#MERR_NOPREFIX
 68

	)

304 
	#MERR_NOMODTYPE
 69

	)

305 
	#MERR_BADMODTYPE
 70

	)

306 
	#MERR_BADCFGVERSION
 71

	)

307 
	#MERR_BADVERSION
 72

	)

308 
	#MERR_NOVERSION
 73

	)

310 
	#MERR_BADLINK
 74

	)

311 
	#MERR_BADJMP
 75

	)

312 
	#MERR_BADRTYPE
 76

	)

313 
	#MERR_BADADTYPE
 77

	)

314 
	#MERR_GP
 78

	)

315 
	#MERR_BADSC
 79

	)

316 
	#MERR_REFHI
 80

	)

317 
	#MERR_NORRECS
 81

	)

318 
	#MERR_SCNDATA
 82

	)

319 
	#MERR_COMMON
 83

	)

320 
	#MERR_JMP256
 84

	)

322 
	#MERR_LIBUNLD
 85

	)

323 
	#MERR_LIBREG
 86

	)

324 
	#MERR_NOLIBIDS
 87

	)

326 
	#MERR_IDBG
 88

	)

327 
	#MERR_IDBGREG
 89

	)

329 
	#MERR_NOENETIDS
 90

	)

330 
	#MERR_ENETREG
 91

	)

331 
	#MERR_ENETUNREG
 92

	)

332 
	#MERR_ENETUNLOAD
 93

	)

334 
	#MERR_NOFSYSNAME
 94

	)

335 
	#MERR_DUPFSYS
 95

	)

337 
	#MERR_VECINUSE
 96

	)

338 
	#MERR_BADADAP
 97

	)

339 
	#MERR_NOEDTDATA
 98

	)

341 
	#MERR_ELF64
 99

	)

342 
	#MERR_ELF32
 100

	)

343 
	#MERR_ELF64COFF
 101

	)

344 
	#MERR_ET_REL
 102

	)

346 
	#MERR_SYMTABREG
 103

	)

347 
	#MERR_NOSYMTABIDS
 104

	)

348 
	#MERR_NOSYMTAB
 105

	)

349 
	#MERR_DUPSYMTAB
 106

	)

350 
	#MERR_NOSYMTABAVAIL
 107

	)

351 
	#MERR_SYMTABMISMATCH
 108

	)

352 
	#MERR_NOIDBG
 109

	)

353 
	#MERR_ELFN32
 110

	)

354 
	#MERR_UNREGFAIL
 111

	)

356 
	#MAXSYMNAME
 128

	)

358 #ifdef 
_KERNEL


361 
°_födaddr
(*, 
__psunsig√d_t
 **);

362 
°_föd«me
(
__psunsig√d_t
 *, **);

364 
	~<sys/sy°m.h
>

365 
sgi_mc⁄fig
(, *, , 
rvÆ_t
 *);

366 
sgi_symèb
 (, *, *);

368 
mlqdëach
 (
queue_t
 *);

370 
moduÀ_u∆d_dñay
;

374 #ifde‡
__˝lu•lus


	@/usr/include/sys/param.h

33 #i‚de‡
_SYS_PARAM_H


34 
	#_SYS_PARAM_H


	)

38 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

39 
	~<sys/ty≥s.h
>

40 
	~<sys/sig«l.h
>

49 #i‚de‡
_POSIX_VERSION


50 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

51 
	#_POSIX_VERSION
 199506L

	)

54 #i‡
deföed
(
_LANGUAGE_FORTRAN
)

55 
	#_POSIX_VERSION
 199506

	)

59 #i‚de‡
_POSIX_VDISABLE


60 
	#_POSIX_VDISABLE
 0

	)

63 #i‚de‡
MAX_INPUT


64 
	#MAX_INPUT
 512

	)

67 #i‚de‡
MAX_CANON


68 
	#MAX_CANON
 256

	)

71 
	#UID_NOBODY
 60001

	)

72 
	#GID_NOBODY
 
UID_NOBODY


	)

74 
	#UID_NOACCESS
 60002

	)

75 
	#GID_NOACCESS
 
UID_NOACCESS


	)

82 
	#MAXPID
 0x7ffffff0

	)

84 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

85 
	#MAXUID
 0x7ffffff‡

	)

87 #i‡
deföed
(
_LANGUAGE_FORTRAN
)

88 
	#MAXUID
 
$7fffffff


	)

90 
	#MAXLINK
 30000

	)

92 
	#SSIZE
 1

	)

93 
	#SINCR
 1

	)

95 
	#KSTKSIZE
 1

	)

97 #if 
_PAGESZ
 == 4096

98 
	#EXTKSTKSIZE
 1

	)

99 
	#KSTKIDX
 0

	)

100 
	#KSTEIDX
 1

	)

102 
	#EXTKSTKSIZE
 0

	)

103 
	#KSTKIDX
 0

	)

106 
	#CANBSIZ
 256

	)

107 
	#HZ
 100

	)

108 
	#TICK
 10000000

	)

110 
	#NOFILE
 20

	)

119 
	#NGROUPS_UMIN
 0

	)

120 
	#NGROUPS_UMAX
 32

	)

126 
	#NGROUPS
 16

	)

132 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

133 
	#PMASK
 0177

	)

134 
	#PCATCH
 0400

	)

135 
	#PLTWAIT
 01000

	)

136 
	#PRECALC
 01000

	)

138 #i‡
deföed
(
_LANGUAGE_FORTRAN
)

139 
	#PMASK
 
O
'0177'

	)

140 
	#PCATCH
 
O
'0400'

	)

141 
	#PLTWAIT
 
O
'01000'

	)

142 
	#PRECALC
 
O
'01000'

	)

144 
	#PSWP
 0

	)

145 
	#PINOD
 10

	)

146 
	#PSNDD
 
PINOD


	)

147 
	#PRIBIO
 20

	)

148 
	#PZERO
 25

	)

149 
	#PMEM
 0

	)

150 #i‚de‡
NZERO


151 
	#NZERO
 20

	)

153 
	#PPIPE
 26

	)

154 
	#PVFS
 27

	)

155 
	#PWAIT
 30

	)

156 
	#PSLEP
 39

	)

157 
	#PUSER
 60

	)

162 
	#PBATCH_CRITICAL
 -1

	)

163 
	#PTIME_SHARE
 -2

	)

164 
	#PTIME_SHARE_OVER
 -3

	)

165 
	#PBATCH
 -4

	)

166 
	#PWEIGHTLESS
 -5

	)

168 
	#PIDLE
 (
PWEIGHTLESS
 + 
NDPLOMAX
 - 
NDPLOMIN
 - 1)

	)

175 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

176 
	#NBPS
 (
NCPS
*
NBPC
Ë

	)

177 
	#NBPW
 (Ë

	)

178 
	#NCPS
 (
NBPC
/((
±e_t
))Ë

	)

182 
	#IO_NBPC
 4096

	)

183 
	#IO_BPCSHIFT
 12

	)

185 
	#MIN_NBPC
 4096

	)

186 
	#MIN_BPCSHIFT
 12

	)

187 
	#MIN_CPSSHIFT
 10

	)

189 
	#NBPC
 
_PAGESZ


	)

191 #if 
NBPC
 == 4096

192 
	#BPCSHIFT
 12

	)

193 
	#CPSSHIFT
 10

	)

195 #if 
NBPC
 == 16384

196 
	#BPCSHIFT
 14

	)

197 #i‚def 
PTE_64BIT


198 
	#CPSSHIFT
 12

	)

200 
	#CPSSHIFT
 11

	)

204 
	#BPSSHIFT
 (
BPCSHIFT
+
CPSSHIFT
)

	)

206 #i‚de‡
NULL


207 
	#NULL
 0L

	)

209 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

210 
	#CMASK
 022

	)

211 
	#NODEV
 (
dev_t
)(-1)

	)

212 
	#NOPAGE
 (()-1)

	)

214 #i‡
deföed
(
_LANGUAGE_FORTRAN
)

215 
	#CMASK
 
O
'022'

	)

216 
	#NODEV
 (-1)

	)

217 
	#NOPAGE
 (-1)

	)

223 
	#NBPSCTR
 512

	)

224 
	#SCTRSHFT
 9

	)

228 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

229 #i‡
IP32


230 
	#BASEPRI
(
psw
Ë((’swË& 
SR_IMASK
Ë=
SR_IMASK0
)

	)

232 
	#BASEPRI
(
psw
Ë((’swË& 
SR_IMASK
Ë=SR_IMASK)

	)

235 
	#USERMODE
(
psw
Ë((’swË& 
SR_KSU_MSK
Ë=
SR_KSU_USR
)

	)

237 #i‡!
deföed
(
_LANGUAGE_ASSEMBLY
)

238 
	s∑ømc⁄°
 {

239 
	mp_usize
;

240 
	mp_extusize
;

244 #ifde‡
_MIPSEB


245 
	#lobyã
(
X
Ë(((*)&X)[1])

	)

246 
	#hibyã
(
X
Ë(((*)&X)[0])

	)

247 
	#low‹d
(
X
Ë(((
ush‹t
 *)&X)[1])

	)

248 
	#hiw‹d
(
X
Ë(((
ush‹t
 *)&X)[0])

	)

250 
	#lobyã
(
X
Ë(((*)&X)[0])

	)

251 
	#hibyã
(
X
Ë(((*)&X)[1])

	)

252 
	#low‹d
(
X
Ë(((
ush‹t
 *)&X)[0])

	)

253 
	#hiw‹d
(
X
Ë(((
ush‹t
 *)&X)[1])

	)

267 
	#MAXPATHLEN
 1024

	)

268 
	#MAXSYMLINKS
 30

	)

269 
	#MAXNAMELEN
 256

	)

276 #i‚de‡
PIPE_BUF


277 
	#PIPE_BUF
 10240

	)

280 #i‚de‡
PIPE_MAX


281 
	#PIPE_MAX
 10240

	)

284 #i‚def 
NBBY


285 
	#NBBY
 8

	)

293 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

294 
	#BBSHIFT
 9

	)

295 
	#BBSIZE
 (1<<
BBSHIFT
)

	)

296 
	#BBMASK
 (
BBSIZE
-1)

	)

297 
	#BTOBB
(
byãs
Ë((()(byãsË+ 
BBSIZE
 - 1Ë>> 
BBSHIFT
)

	)

298 
	#BTOBBT
(
byãs
Ë(()(byãsË>> 
BBSHIFT
)

	)

299 
	#BBTOB
(
bbs
Ë((bbsË<< 
BBSHIFT
)

	)

300 
	#OFFTOBB
(
byãs
Ë(((
__uöt64_t
)(byãsË+ 
BBSIZE
 - 1Ë>> 
BBSHIFT
)

	)

301 
	#OFFTOBBT
(
byãs
Ë((
off_t
)(byãsË>> 
BBSHIFT
)

	)

302 
	#BBTOOFF
(
bbs
Ë((
off_t
)(bbsË<< 
BBSHIFT
)

	)

305 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

306 
	#SEEKLIMIT32
 0x7fffffff

	)

307 
	#BBSEEKLIMIT32
 
	`BTOBBT
(
SEEKLIMIT32
)

	)

308 
	#SEEKLIMIT
 0x7fffffffffffffffLL

	)

309 
	#BBSEEKLIMIT
 
	`OFFTOBBT
(
SEEKLIMIT
)

	)

311 #i‡
deföed
(
_LANGUAGE_FORTRAN
)

312 
	#SEEKLIMIT32
 
$7fffffff


	)

313 
	#SEEKLIMIT
 
$7fffffffffffffff


	)

330 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

331 
	#MAXBSIZE
 8192

	)

332 
	#DEV_BSIZE
 
BBSIZE


	)

333 
	#DEV_BSHIFT
 
BBSHIFT


	)

335 
	#btodb
(
byãs
) \

336 ((
uöt64_t
)(
byãs
Ë>> 
DEV_BSHIFT
)

	)

337 
	#dbtob
(
db
) \

338 ((
uöt64_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)

344 
	#BLKDEV_IOSHIFT
 
BPCSHIFT


	)

345 
	#BLKDEV_IOSIZE
 (1<<
BLKDEV_IOSHIFT
)

	)

348 
	#BLKDEV_OFF
(
off
Ë((offË& (
BLKDEV_IOSIZE
 - 1))

	)

351 
	#BLKDEV_LBN
(
off
Ë((offË>> 
BLKDEV_IOSHIFT
)

	)

354 
	#BLKDEV_BB
 
	`BTOBB
(
BLKDEV_IOSIZE
)

	)

357 
	#BLKDEV_LTOP
(
bn
Ë((bnË* 
BLKDEV_BB
)

	)

365 
	#MAXHOSTNAMELEN
 256

	)

370 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

371 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

372 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

378 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

379 #i‚de‡
howm™y


380 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

382 
	#roundup
(
x
, 
y
Ë((((x)+((y)-1))/(y))*(y))

	)

385 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_STANDALONE
)

389 
	#DELAY
(
n
Ë
	`us_dñay
“)

	)

391 
	#DELAYBUS
(
n
Ë
	`us_dñaybus
“)

	)

395 
	#TIMEPOKE_NOW
 -100L

	)

396 
ngroups_max
;

	@/usr/include/sys/pio.h

13 #i‚de‡
_SYS_PIO_H_


14 
	#_SYS_PIO_H_


	)

16 
	~"sys/edt.h
"

17 
	~"sys/iobus.h
"

25 vﬁ©ûê
	tul⁄g
* 
	tpiﬂddr_t
;

35 
	spiom≠
 {

36 
uöt_t
 
	mpio_bus
;

37 
uöt_t
 
	mpio_ad≠
;

38 
io•a˚_t
 
	mpio_io•a˚
;

39 
	mpio_Êag
;

40 
	mpio_ªg
;

41 
	mpio_«me
[7];

42 
piom≠
 *
	mpio_√xt
;

43 
piom≠
 *
	mpio_¥ev
;

44 (*
	mpio_îrfunc
)();

47 
i›addr_t
 
	mpio_i›mask
;

48 
iobush_t
 
	mpio_bush™dÀ
;

49 } 
	tpiom≠_t
;

51 
	#pio_ty≥
 
pio_io•a˚
.
ios_ty≥


	)

52 
	#pio_i›addr
 
pio_io•a˚
.
ios_i›addr


	)

53 
	#pio_size
 
pio_io•a˚
.
ios_size


	)

54 
	#pio_vaddr
 
pio_io•a˚
.
ios_vaddr


	)

57 
	#pio_£ãºf
(
p
,
f
Ë’)->
pio_îrfunc
 = (f)

	)

58 
	#pio_gëîrf
(
p
Ë’)->
pio_îrfunc


	)

69 
piom≠_t
 *
pio_m≠Æloc
(
uöt_t
,uöt_t,
io•a˚_t
*,,*);

70 
pio_m≠‰ì
(
piom≠_t
*);

71 
ˇddr_t
 
pio_m≠addr
(
piom≠_t
*,
i›addr_t
);

72 
piom≠_t
 *
pio_iﬂddr
(, 
iobush_t
, 
i›addr_t
,Öiomap_t *);

77 
pio_badaddr
(
piom≠_t
*,
i›addr_t
,);

78 
pio_badaddr_vÆ
(
piom≠_t
*,
i›addr_t
,,*);

79 
pio_wbadaddr
(
piom≠_t
*,
i›addr_t
,);

80 
pio_wbadaddr_vÆ
(
piom≠_t
*,
i›addr_t
,,);

81 
pio_bc›yö
(
piom≠_t
*,
i›addr_t
,*,, , );

82 
pio_bc›yout
(
piom≠_t
*,
i›addr_t
,*,, , );

88 
pio_‹b_rmw
(
piom≠_t
*, 
i›addr_t
, );

89 
pio_‹h_rmw
(
piom≠_t
*, 
i›addr_t
, );

90 
pio_‹w_rmw
(
piom≠_t
*, 
i›addr_t
, );

91 
pio_™db_rmw
(
piom≠_t
*, 
i›addr_t
, );

92 
pio_™dh_rmw
(
piom≠_t
*, 
i›addr_t
, );

93 
pio_™dw_rmw
(
piom≠_t
*, 
i›addr_t
, );

99 
‹b_rmw
(volatile *, );

100 
‹h_rmw
(volatile *, );

101 
‹w_rmw
(volatile *, );

102 
™db_rmw
(volatile *, );

103 
™dh_rmw
(volatile *, );

104 
™dw_rmw
(volatile *, );

111 
	#PIOMAP_NTYPES
 7

	)

113 
	#PIOMAP_A16N
 
VME_A16NP


	)

114 
	#PIOMAP_A16S
 
VME_A16S


	)

115 
	#PIOMAP_A24N
 
VME_A24NP


	)

116 
	#PIOMAP_A24S
 
VME_A24S


	)

117 
	#PIOMAP_A32N
 
VME_A32NP


	)

118 
	#PIOMAP_A32S
 
VME_A32S


	)

119 
	#PIOMAP_A64
 6

	)

121 
	#PIOMAP_EISA_IO
 0

	)

122 
	#PIOMAP_EISA_MEM
 1

	)

124 
	#PIOMAP_PCI_IO
 0

	)

125 
	#PIOMAP_PCI_MEM
 1

	)

126 
	#PIOMAP_PCI_CFG
 2

	)

127 
	#PIOMAP_PCI_ID
 3

	)

130 
	#PIOMAP_FCI
 0

	)

134 
	#PIOMAP_GIO32
 0

	)

135 
	#PIOMAP_GIO64
 1

	)

137 
	#ET_MEM
 0

	)

138 
	#ET_IO
 1

	)

139 
	#LAN_RAM
 2

	)

140 
	#LAN_IO
 3

	)

142 
	#PIOREG_NULL
 -1

	)

148 
	#PIOMAP_UNFIXED
 0x0

	)

149 
	#PIOMAP_FIXED
 0x1

	)

150 
	#PIOMAP_NOSLEEP
 0x2

	)

151 
	#PIOMAP_INPLACE
 0x4

	)

152 #i‡
deföed
(
IP25
Ë|| deföed(
IP27
Ë|| deföed(
IP30
Ë|| deföed(
IP35
)

156 
	#PIOMAP_UNC_ACC
 0x8

	)

157 
	#PIOMAP_PIO_FLUSH
 0x10

	)

159 
	#PIOMAP_FLAGS
 0x1f

	)

161 
	#PIOMAP_UNC_ACC_SPACE
 (7uŒ << 59)

	)

163 
	#PIOMAP_FLAGS
 0x7

	)

	@/usr/include/sys/poll.h

21 #i‚de‡
_SYS_POLL_H


22 
	#_SYS_POLL_H


	)

26 #ifde‡
__˝lu•lus


30 
	tnfds_t
;

36 
	spﬁlfd
 {

37 
fd
;

38 
evíts
;

39 
ªvíts
;

45 
	#POLLIN
 0x0001

	)

46 
	#POLLPRI
 0x0002

	)

47 
	#POLLOUT
 0x0004

	)

48 
	#POLLRDNORM
 0x0040

	)

49 
	#POLLRDBAND
 0x0080

	)

50 
	#POLLWRBAND
 0x0100

	)

52 
	#POLLWRNORM
 
POLLOUT


	)

53 
	#POLLNORM
 
POLLRDNORM


	)

58 
	#POLLWAKEUPONE
 0x0200

	)

59 
	#POLLCONN
 
POLLWAKEUPONE


	)

65 
	#POLLERR
 0x0008

	)

66 
	#POLLHUP
 0x0010

	)

67 
	#POLLNVAL
 0x0020

	)

68 
	#POLLREMOVE
 0x0800

	)

70 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

71 
	~<sys/£ma.h
>

73 
	#POLLBLOCK
 0x1

	)

82 
	spﬁld©
 {

83 
pﬁld©
 *
pd_√xt
;

84 
pd_evíts
;

85 
pd_rŸ‹höt
;

86 
pﬁlhód
 *
pd_hódp
;

87 *
pd_¨g
;

107 
	spﬁlhód
 {

108 
pﬁld©
 *
ph_li°
;

109 
lock_t
 
ph_lock
;

110 vﬁ©ûê
ph_gí
;

111 
ph_evíts
;

112 
ph_u£r
;

113 
pﬁld©
 *
ph_√xt
;

123 
	#POLLGEN
(
php
Ë(’hp)->
ph_gí
)

	)

127 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

128 
	~<sys/uthªad.h
>

133 
	spﬁlvobj
 {

134 *
pv_vobj
;

135 
pv_vty≥
;

143 
	#NPOLLFILE
 64

	)

149 
pﬁlwakeup
 (
pﬁlhód
 *, );

150 
öôpﬁlhód
 (
pﬁlhód
 *);

151 
de°roypﬁlhód
 (
pﬁlhód
 *);

152 
di°ribuãd_pﬁœdd
(
pﬁlhód
 *, , );

153 
pﬁlwakeup_thªad
(
uthªad_t
 *, );

157 
pﬁl
(
pﬁlfd
 *, 
nfds_t
, );

161 #ifde‡
__˝lu•lus


	@/usr/include/sys/sbd.h

1 #i‚de‡
__SYS_SBD_H__


2 
	#__SYS_SBD_H__


	)

25 
	~<sys/mùs_addr•a˚.h
>

27 #i‡
TFP


28 
	~"sys/tÂ.h
"

29 #ñi‡
BEAST


30 
	~"sys/bó°.h
"

48 
	#SIZE_EXCVEC
 0x80

	)

49 
	#UT_VEC
 
COMPAT_K0BASE


	)

50 
	#K0_UT_VEC
 
K0BASE


	)

51 
	#R_VEC
 (
COMPAT_K1BASE
+0x1fc00000Ë

	)

53 #i‡
R4000
 || 
R10000


54 
	#XUT_VEC
 (
COMPAT_K0BASE
+0x80Ë

	)

55 
	#ECC_VEC
 (
COMPAT_K0BASE
+0x100Ë

	)

56 
	#E_VEC
 (
COMPAT_K0BASE
+0x180Ë

	)

60 #i‡
R4000


61 
	#MINCACHE
 0x20000

	)

62 
	#MAXCACHE
 0x400000

	)

63 
	#R4K_MAXCACHELINESIZE
 128

	)

64 
	#R4K_MAXPCACHESIZE
 0x8000

	)

65 #i‡
_PAGESZ
 > 
R4K_MAXPCACHESIZE


66 
	#CACHECOLORSIZE
 1

	)

68 
	#CACHECOLORSIZE
 (
R4K_MAXPCACHESIZE
/
NBPP
)

	)

70 
	#CACHECOLORMASK
 (
CACHECOLORSIZE
 - 1)

	)

72 #i‡
_PAGESZ
 >
R4K_MAXPCACHESIZE


73 
	#CACHECOLORSHIFT
 0

	)

75 #i‡
_PAGESZ
 == 16384

76 
	#CACHECOLORSHIFT
 1

	)

78 #i‡
_PAGESZ
 == 4096

79 
	#CACHECOLORSHIFT
 3

	)

81 #ifde‡
_KERNEL


82 <<
	gBOMB
 -- 
√ed
 
deföe
 
u«¡icù©ed
 
∑ge
 
	gsize
 >>

89 #i‡
R10000


90 #i‚de‡
R4000


91 
	#MINCACHE
 0x80000

	)

94 #ifde‡
R4000


95 #unde‡
MAXCACHE


97 
	#MAXCACHE
 0x1000000

	)

99 
	#R10K_MAXCACHELINESIZE
 128

	)

100 
	#R10K_MAXPCACHESIZE
 0x8000

	)

101 #i‚de‡
R4000


102 #i‡
_PAGESZ
 > 
R10K_MAXPCACHESIZE


103 
	#CACHECOLORSIZE
 1

	)

105 
	#CACHECOLORSIZE
 (
R10K_MAXPCACHESIZE
/
NBPP
)

	)

107 
	#CACHECOLORMASK
 (
CACHECOLORSIZE
 - 1)

	)

109 #i‡
_PAGESZ
 >
R10K_MAXPCACHESIZE


110 
	#CACHECOLORSHIFT
 0

	)

112 #i‡
_PAGESZ
 == 16384

113 
	#CACHECOLORSHIFT
 1

	)

115 #i‡
_PAGESZ
 == 4096

116 
	#CACHECOLORSHIFT
 3

	)

118 #ifde‡
_KERNEL


119 <<
	gBOMB
 -- 
√ed
 
deföe
 
u«¡icù©ed
 
∑ge
 
	gsize
 >>

131 #i‡
R10000
 && 
R4000


132 
	#R10K_NTLBENTRIES
 64

	)

133 
	#R4K_NTLBENTRIES
 48

	)

134 
	#R7K_NTLBENTRIES
 48

	)

135 
	#R7K_2MB_NTLBENTRIES
 64

	)

136 
	#MAX_NTLBENTRIES
 
R10K_NTLBENTRIES


	)

137 #ifde‡
_KERNEL


138 #ifde‡
_LANGUAGE_C


139 
¡lbíåõs
;

140 
	#NTLBENTRIES
 
¡lbíåõs


	)

146 #i‡
R10000


147 
	#NTLBENTRIES
 64

	)

149 #i‡
R4000


150 
	#NTLBENTRIES
 48

	)

152 
	#MAX_NTLBENTRIES
 
NTLBENTRIES


	)

155 #ifde‡
MAPPED_KERNEL


156 
	#NKMAPENTRIES
 1

	)

157 
	#KMAP_INX
 1

	)

159 #ifde‡
MH_R10000_SPECULATION_WAR


160 
	#NKMAPENTRIES
 2

	)

162 
	#NKMAPENTRIES
 0

	)

166 #i‡
_PAGESZ
 == 4096

167 
	#NWIREDENTRIES
 (8 + 
NKMAPENTRIES
Ë

	)

169 #i‡
_PAGESZ
 == 16384

170 
	#NWIREDENTRIES
 (6 + 
NKMAPENTRIES
Ë

	)

172 
	#TLBWIREDBASE
 (1 + 
NKMAPENTRIES
)

	)

173 
	#TLBRANDOMBASE
 
NWIREDENTRIES


	)

175 #i‡
R10000
 && 
R4000


176 
	#R10K_NRANDOMENTRIES
 (
R10K_NTLBENTRIES
 - 
NWIREDENTRIES
)

	)

177 
	#R4K_NRANDOMENTRIES
 (
R4K_NTLBENTRIES
 - 
NWIREDENTRIES
)

	)

178 
	#R7K_NRANDOMENTRIES
 (
R7K_NTLBENTRIES
 - 
NWIREDENTRIES
)

	)

179 
	#R7K_2MB_NRANDOMENTRIES
 (
R7K_2MB_NTLBENTRIES
 - 
NWIREDENTRIES
)

	)

180 
	#MAX_NRANDOMENTRIES
 
R10K_NRANDOMENTRIES


	)

181 #ifde‡
_KERNEL


182 #ifde‡
_LANGUAGE_C


183 
ƒ™domíåõs
;

184 
	#NRANDOMENTRIES
 
ƒ™domíåõs


	)

190 
	#NRANDOMENTRIES
 (
NTLBENTRIES
-
NWIREDENTRIES
)

	)

191 
	#MAX_NRANDOMENTRIES
 
NRANDOMENTRIES


	)

195 
	#TLBFLUSH_NONPDA
 
TLBWIREDBASE


	)

197 
	#TLBFLUSH_NONKERN
 (
TLBWIREDBASE
+
TLBKSLOTS
Ë

	)

198 
	#TLBFLUSH_RANDOM
 
TLBRANDOMBASE


	)

200 
	#TLBINX_PROBE
 0x80000000

	)

202 #i‡
R4000
 || 
R10000


203 #i‡
_PAGESZ
 == 4096

204 
	#TLBHI_VPNSHIFT
 12

	)

205 
	#TLBHI_VPNMASK
 
	`_S_EXT_
(0xfff„000)

	)

207 #i‡
_PAGESZ
 == 16384

208 
	#TLBHI_VPNSHIFT
 14

	)

209 
	#TLBHI_VPNMASK
 
	`_S_EXT_
(0xffff8000)

	)

211 #i‡
_MIPS_SIM
 !
_ABI64


212 
	#TLBHI_VPNZEROFILL
 0

	)

214 
	#TLBHI_VPNZEROFILL
 0x3fffff0000000000LL

	)

216 
	#TLBHI_VPN2MASK
 
TLBHI_VPNMASK


	)

217 
	#TLBHI_VPN2SHIFT
 (
TLBHI_VPNSHIFT
+1)

	)

218 
	#TLBHI_PIDMASK
 0xff

	)

219 
	#TLBHI_PIDSHIFT
 0

	)

220 
	#TLBHI_NPID
 255

	)

222 #i‡
deföed
(
R10000
Ë&& (! deföed(
R4000
)Ë&& (
_MIPS_SIM
 =
_ABI64
)

223 
	#TLBLO_PFNMASK
 0x3ffffffc0LL

	)

225 
	#TLBLO_PFNMASK
 0x3fffffc0

	)

227 
	#TLBLO_PFNSHIFT
 6

	)

228 
	#TLBLO_CACHMASK
 0x38

	)

229 
	#TLBLO_CACHSHIFT
 3

	)

230 
	#TLBLO_UNCACHED
 0x10

	)

231 #i‡
_RUN_UNCACHED


232 #ifde‡
R10000


235 
	#TLBLO_NONCOHRNT
 (
TLBLO_UNCACHED
 | 0xC000000000000000)

	)

236 
	#TLBLO_EXL
 (
TLBLO_UNCACHED
 | 0xC000000000000000)

	)

237 
	#TLBLO_EXLWR
 (
TLBLO_UNCACHED
 | 0xC000000000000000)

	)

239 
	#TLBLO_NONCOHRNT
 
TLBLO_UNCACHED


	)

240 
	#TLBLO_EXL
 
TLBLO_UNCACHED


	)

241 
	#TLBLO_EXLWR
 
TLBLO_UNCACHED


	)

244 
	#TLBLO_NONCOHRNT
 0x18

	)

245 
	#TLBLO_EXL
 0x20

	)

246 
	#TLBLO_EXLWR
 0x28

	)

248 #ifde‡
R10000


249 
	#TLBLO_UNCACHED_ACC
 0x38

	)

251 
	#TLBLO_D
 0x4

	)

252 
	#TLBLO_V
 0x2

	)

253 
	#TLBLO_G
 0x1

	)

258 #ifde‡
R10000


259 
	#TLBLO_UATTRMASK
 0xC000000000000000LL

	)

260 
	#TLBLO_UATTRSHIFT
 62

	)

263 
	#TLBRAND_RANDMASK
 0x3f

	)

264 
	#TLBRAND_RANDSHIFT
 0

	)

266 
	#TLBWIRED_WIREDMASK
 0x3f

	)

268 
	#TLBCTXT_BASEMASK
 0xff800000

	)

269 
	#TLBCTXT_BASESHIFT
 23

	)

270 
	#TLBCTXT_VPNMASK
 0x7ffff0

	)

271 
	#TLBCTXT_VPNNORMALIZE
 9

	)

272 
	#TLBCTXT_VPNSHIFT
 4

	)

274 #ifde‡
R10000


275 
	#TLBEXTCTXT_BASEMASK
 0xfffff„000000000LL

	)

276 
	#TLBEXTCTXT_BASESHIFT
 37

	)

277 
	#TLBEXTCTXT_VPNMASK
 0x7fffffff0LL

	)

278 
	#TLBEXTCTXT_REGIONMASK
 0x0000001800000000LL

	)

279 
	#TLBEXTCTXT_REGIONSHIFT
 27

	)

281 
	#TLBEXTCTXT_BASEMASK
 0xffffff„00000000LL

	)

282 
	#TLBEXTCTXT_BASESHIFT
 31

	)

283 
	#TLBEXTCTXT_VPNMASK
 0x7ffffff0

	)

284 
	#TLBEXTCTXT_REGIONMASK
 0x0000000180000000LL

	)

285 
	#TLBEXTCTXT_REGIONSHIFT
 31

	)

289 
	#TLBPGMASK_4K
 0x0

	)

290 
	#TLBPGMASK_16K
 0x0006000

	)

291 
	#TLBPGMASK_64K
 0x001e000

	)

292 
	#TLBPGMASK_4M
 0x07„000

	)

293 
	#TLBPGMASK_16M
 0x1f„000

	)

295 #i‡
_PAGESZ
 == 4096

296 
	#TLBPGMASK_MASK
 
TLBPGMASK_4K


	)

298 #i‡
_PAGESZ
 == 16384

299 
	#TLBPGMASK_MASK
 
TLBPGMASK_16K


	)

308 #ifde‡
R10000


309 
	#SR_CUMASK
 0x70000000

	)

310 #ifde‡
R4000


311 
	#SR_CU3
 
SR_XX


	)

314 
	#SR_CUMASK
 0xf0000000

	)

315 
	#SR_CU3
 0x80000000

	)

318 
	#SR_XX
 0x80000000

	)

319 
	#SR_CU2
 0x40000000

	)

320 
	#SR_CU1
 0x20000000

	)

321 
	#SR_CU0
 0x10000000

	)

325 #i‡
R4000
 || 
R10000


326 
	#SR_SR
 0x00100000

	)

327 
	#SR_CH
 0x00040000

	)

328 #ifde‡
R10000


329 
	#SR_NMI
 0x00080000

	)

332 #ifde‡
R4000


333 
	#SR_CE
 0x00020000

	)

335 
	#SR_DE
 0x00010000

	)

338 
	#SR_TS
 0x00200000

	)

339 
	#SR_BEV
 0x00400000

	)

345 #i‡
IP32


352 
	#SR_IMASK
 0x0000ff00

	)

353 
	#SR_IMASK8
 0x00000000

	)

354 
	#SR_IMASK7
 0x00008000

	)

355 
	#SR_IMASK6
 0x00000400

	)

356 
	#SR_IMASK5
 0x00008400

	)

357 
	#SR_IMASK4
 0x00008400

	)

358 
	#SR_IMASK3
 0x00008400

	)

359 
	#SR_IMASK2
 0x00008400

	)

360 
	#SR_IMASK1
 0x00008600

	)

361 
	#SR_IMASK0
 0x00008700

	)

363 
	#SR_IMASK
 0x0000ff00

	)

364 
	#SR_IMASK8
 0x00000000

	)

365 
	#SR_IMASK7
 0x00008000

	)

366 
	#SR_IMASK6
 0x0000c000

	)

367 
	#SR_IMASK5
 0x0000e000

	)

368 
	#SR_IMASK4
 0x0000f000

	)

369 
	#SR_IMASK3
 0x0000f800

	)

370 
	#SR_IMASK2
 0x0000fc00

	)

371 
	#SR_IMASK1
 0x0000„00

	)

372 
	#SR_IMASK0
 0x0000ff00

	)

375 
	#SR_IBIT8
 0x00008000

	)

376 
	#SR_IBIT7
 0x00004000

	)

377 
	#SR_IBIT6
 0x00002000

	)

378 
	#SR_IBIT5
 0x00001000

	)

379 
	#SR_IBIT4
 0x00000800

	)

380 
	#SR_IBIT3
 0x00000400

	)

381 
	#SR_IBIT2
 0x00000200

	)

382 
	#SR_IBIT1
 0x00000100

	)

385 #i‡
R4000
 || 
R10000


387 #ifde‡ 
R4000


388 
	#SR_RP
 0x08000000

	)

390 
	#SR_FR
 0x04000000

	)

391 
	#SR_RE
 0x02000000

	)

393 
	#SR_KX
 0x00000080

	)

394 
	#SR_SX
 0x00000040

	)

395 
	#SR_UX
 0x00000020

	)

396 
	#SR_KSU_MSK
 0x00000018

	)

397 
	#SR_KSU_USR
 0x00000010

	)

398 
	#SR_KSU_KS
 0x00000008

	)

399 
	#SR_ERL
 0x00000004

	)

400 
	#SR_EXL
 0x00000002

	)

401 
	#SR_IE
 0x00000001

	)

402 
	#SR_IEC
 
SR_IE


	)

403 
	#SR_PREVMODE
 
SR_KSU_MSK


	)

404 
	#SR_PAGESIZE
 0

	)

405 
	#SR_DM
 0

	)

406 
	#SR_DEFAULT
 0

	)

407 #i‡
R10000


408 
	#SR_KERN_SET
 
SR_KADDR
|
SR_UXADDR


	)

410 
	#SR_KERN_SET
 
SR_KADDR


	)

412 
	#SR_KERN_USRKEEP
 0

	)

419 #i‡
_MIPS_SIM
 =
_ABI64


420 
	#SR_KADDR
 
SR_KX


	)

421 
	#SR_UXADDR
 
SR_UX


	)

423 
	#SR_KADDR
 0

	)

424 
	#SR_UXADDR
 0

	)

428 
	#SR_IMASKSHIFT
 8

	)

430 #i‡
IP32


431 
	#SR_CRIME_INT_OFF
 0xfffffbff

	)

432 
	#SR_CRIME_INT_ON
 0x00000400

	)

435 #i‡
IP20
 || 
IP22
 || 
IP28
 || 
IP32
 || 
IPMHSIM


443 
	#OSPL_SPDBG
 0x00000040

	)

450 
	#CAUSE_BD
 0x80000000

	)

451 
	#CAUSE_CEMASK
 0x30000000

	)

452 
	#CAUSE_CESHIFT
 28

	)

455 
	#CAUSE_IP8
 0x00008000

	)

456 
	#CAUSE_IP7
 0x00004000

	)

457 
	#CAUSE_IP6
 0x00002000

	)

458 
	#CAUSE_IP5
 0x00001000

	)

459 
	#CAUSE_IP4
 0x00000800

	)

460 
	#CAUSE_IP3
 0x00000400

	)

461 
	#CAUSE_SW2
 0x00000200

	)

462 
	#CAUSE_SW1
 0x00000100

	)

464 
	#CAUSE_IPMASK
 0x0000FF00

	)

465 
	#CAUSE_IPSHIFT
 8

	)

467 #i‡
R4000
 || 
R10000


468 
	#CAUSE_EXCMASK
 0x0000007C

	)

470 
	#CAUSE_EXCSHIFT
 2

	)

472 
	#CAUSE_FMT
 "\20\40BD\36CE1\35CE0\20IP8\17IP7\16IP6\15IP5\14IP4\13IP3\12SW2\11SW1\1INT"

	)

474 
	#£tso·˛ock
(Ë
	`sú⁄
(
CAUSE_SW1
)

	)

475 
	#£tso·√t
(Ë
	`sú⁄
(
CAUSE_SW2
)

	)

476 
	#ackso·˛ock
(Ë
	`súoff
(
CAUSE_SW1
)

	)

477 
	#ackso·√t
(Ë
	`súoff
(
CAUSE_SW2
)

	)

481 
	#EXC_CODE
(
x
Ë((x)<<2)

	)

484 
	#EXC_INT
 
	`EXC_CODE
(0Ë

	)

485 
	#EXC_MOD
 
	`EXC_CODE
(1Ë

	)

486 
	#EXC_RMISS
 
	`EXC_CODE
(2Ë

	)

487 
	#EXC_WMISS
 
	`EXC_CODE
(3Ë

	)

488 
	#EXC_RADE
 
	`EXC_CODE
(4Ë

	)

489 
	#EXC_WADE
 
	`EXC_CODE
(5Ë

	)

490 
	#EXC_IBE
 
	`EXC_CODE
(6Ë

	)

491 
	#EXC_DBE
 
	`EXC_CODE
(7Ë

	)

492 
	#EXC_SYSCALL
 
	`EXC_CODE
(8Ë

	)

493 
	#EXC_BREAK
 
	`EXC_CODE
(9Ë

	)

494 
	#EXC_II
 
	`EXC_CODE
(10Ë

	)

495 
	#EXC_CPU
 
	`EXC_CODE
(11Ë

	)

496 
	#EXC_OV
 
	`EXC_CODE
(12Ë

	)

497 #i‡
R4000
 || 
R10000


498 
	#EXC_TRAP
 
	`EXC_CODE
(13Ë

	)

499 
	#EXC_VCEI
 
	`EXC_CODE
(14Ë

	)

500 
	#EXC_FPE
 
	`EXC_CODE
(15Ë

	)

501 
	#EXC_WATCH
 
	`EXC_CODE
(23Ë

	)

502 
	#EXC_VCED
 
	`EXC_CODE
(31Ë

	)

506 
	#SEXC_SEGV
 
	`EXC_CODE
(32Ë

	)

507 
	#SEXC_RESCHED
 
	`EXC_CODE
(33Ë

	)

508 
	#SEXC_PAGEIN
 
	`EXC_CODE
(34Ë

	)

509 
	#SEXC_CPU
 
	`EXC_CODE
(35Ë

	)

510 
	#SEXC_BUS
 
	`EXC_CODE
(36Ë

	)

511 
	#SEXC_KILL
 
	`EXC_CODE
(37Ë

	)

512 
	#SEXC_WATCH
 
	`EXC_CODE
(38Ë

	)

513 #i‡
R4000


514 
	#SEXC_EOP
 
	`EXC_CODE
(39Ë

	)

516 #ifde‡
_MEM_PARITY_WAR


517 
	#SEXC_ECC_EXCEPTION
 
	`EXC_CODE
(40Ë

	)

519 
	#SEXC_UTINTR
 
	`EXC_CODE
(41Ë

	)

524 
	#C0_READI
 0x1

	)

525 
	#C0_WRITEI
 0x2

	)

526 
	#C0_WRITER
 0x6

	)

527 
	#C0_PROBE
 0x8

	)

528 
	#C0_RFE
 0x10

	)

529 
	#C0_WAIT
 0x20

	)

531 #i‡
R4000


537 
	#CACH_PI
 0x0

	)

538 
	#CACH_PD
 0x1

	)

539 
	#CACH_SI
 0x2

	)

540 
	#CACH_SD
 0x3

	)

541 #ifde‡
RM7000


542 
	#CACH_L3
 0x2

	)

543 
	#CACH_L2
 0x3

	)

547 
	#C_IINV
 0x0

	)

548 
	#C_IWBINV
 0x0

	)

549 
	#C_ILT
 0x4

	)

550 
	#C_IST
 0x8

	)

551 
	#C_CDX
 0x¯

	)

552 
	#C_HINV
 0x10

	)

553 
	#C_HWBINV
 0x14

	)

554 
	#C_FILL
 0x14

	)

555 
	#C_HWB
 0x18

	)

556 
	#C_HSV
 0x1¯

	)

557 #ifde‡
TRITON


558 
	#C_INVALL
 0x0

	)

559 
	#C_INVPAGE
 0x14

	)

565 
	#CONFIG_CM
 0x80000000

	)

566 
	#CONFIG_EC
 0x70000000

	)

567 
	#CONFIG_EP
 0x0f000000

	)

568 
	#CONFIG_SB
 0x00c00000

	)

570 
	#CONFIG_SS
 0x00200000

	)

571 
	#CONFIG_SW
 0x00100000

	)

572 
	#CONFIG_EW
 0x000c0000

	)

573 
	#CONFIG_SC
 0x00020000

	)

574 
	#CONFIG_SM
 0x00010000

	)

575 
	#CONFIG_BE
 0x00008000

	)

576 
	#CONFIG_EM
 0x00004000

	)

577 
	#CONFIG_EB
 0x00002000

	)

579 
	#CONFIG_IC
 0x00000e00

	)

580 
	#CONFIG_DC
 0x000001c0

	)

581 
	#CONFIG_IB
 0x00000020

	)

582 
	#CONFIG_DB
 0x00000010

	)

583 
	#CONFIG_CU
 0x00000008

	)

584 
	#CONFIG_K0
 0x00000007

	)

587 #ifde‡
TRITON


588 
	#CONFIG_TR_SS
 0x00300000

	)

589 
	#CONFIG_TR_SC
 
CONFIG_SC


	)

590 
	#CONFIG_TR_SE
 0x00001000

	)

593 #ifde‡
RM7000


594 
	#CONFIG_R7_OC
 0x80000000

	)

595 
	#CONFIG_R7_SC
 
CONFIG_SC


	)

596 
	#CONFIG_R7_OE
 0x00000008

	)

597 
	#CONFIG_R7_SE
 
CONFIG_TR_SE


	)

600 
	#CONFIG_UNCACHED
 0x00000002

	)

601 #i‡
_RUN_UNCACHED


602 
	#CONFIG_NONCOHRNT
 
CONFIG_UNCACHED


	)

603 
	#CONFIG_COHRNT_EXLWR
 
CONFIG_UNCACHED


	)

604 
	#CONFIG_COHRNT_EXL
 
CONFIG_UNCACHED


	)

606 
	#CONFIG_NONCOHRNT
 0x00000003

	)

607 
	#CONFIG_COHRNT_EXLWR
 0x00000005

	)

608 
	#CONFIG_COHRNT_EXL
 0x00000004

	)

610 #ifde‡
R10000


611 
	#CONFIG_UNCACHED_ACC
 0x00000007

	)

613 
	#CONFIG_SB_SHFT
 22

	)

614 
	#CONFIG_IC_SHFT
 9

	)

615 
	#CONFIG_DC_SHFT
 6

	)

616 
	#CONFIG_BE_SHFT
 15

	)

617 
	#CONFIG_IB_SHFT
 5

	)

618 
	#CONFIG_DB_SHFT
 4

	)

619 #ifde‡
TRITON


620 
	#CONFIG_TR_SS_SHFT
 20

	)

626 
	#SADDRMASK
 0xFFFFE000

	)

627 
	#SVINDEXMASK
 0x00000380

	)

628 
	#SSTATEMASK
 0x00001c00

	)

629 
	#SINVALID
 0x00000000

	)

630 
	#SCLEANEXCL
 0x00001000

	)

631 
	#SDIRTYEXCL
 0x00001400

	)

632 
	#SECC_MASK
 0x0000007‡

	)

633 
	#SADDR_SHIFT
 4

	)

635 
	#PADDRMASK
 0xFFFFFF00

	)

636 
	#PADDR_SHIFT
 4

	)

637 
	#PSTATEMASK
 0x00C0

	)

638 
	#PINVALID
 0x0000

	)

639 
	#PCLEANEXCL
 0x0080

	)

640 
	#PDIRTYEXCL
 0x00C0

	)

641 
	#PPARITY_MASK
 0x0001

	)

642 #ifde‡
RM7000


644 
	#PINSTTYPE
 0xFFF00000

	)

645 
	#PSTATEPARITY
 0x0020

	)

646 
	#PLINEBYPASS
 0x0008

	)

647 
	#PLINELOCK
 0x0004

	)

648 
	#PLINEFILL
 0x0002

	)

652 
	#L2RM_HIADDRMASK
 0xFFFFF000

	)

653 
	#L2RM_HIADDR_SHIFT
 4

	)

654 
	#L2RM_STATEMASK
 0x01C0

	)

655 
	#L2RM_STATESHIFT
 7

	)

656 
	#L2RM_STATEPARITY
 0x0020

	)

657 
	#L2RM_LINELOCK
 0x0004

	)

658 
	#L2RM_LINEFILL
 0x0002

	)

659 
	#L2RM_PARITY
 0x0001

	)

662 
	#L2RM_INVALID
 0

	)

663 
	#L2RM_CLEAN
 4

	)

664 
	#L2RM_EXCLUSIVE
 4

	)

665 
	#L2RM_DIRTY
 5

	)

666 
	#L2RM_MODIFIED
 5

	)

667 
	#L2RM_SHARED
 6

	)

668 
	#L2RM_OLD
 7

	)

669 
	#L2RM_DCACHE_EXC
 7

	)

671 
	#L3RM_HIADDRMASK
 0xFFFF8000

	)

672 
	#L3RM_HIADDR_SHIFT
 4

	)

673 
	#L3RM_STATEMASK
 0x0100

	)

674 
	#L3RM_STATESHIFT
 8

	)

676 
	#L3RM_INVALID
 0

	)

677 
	#LRRM_VALID
 1

	)

684 
	#CACHERR_ER
 0x80000000

	)

685 
	#CACHERR_EC
 0x40000000

	)

686 
	#CACHERR_ED
 0x20000000

	)

687 
	#CACHERR_ET
 0x10000000

	)

688 
	#CACHERR_ES
 0x08000000

	)

689 
	#CACHERR_EE
 0x04000000

	)

690 
	#CACHERR_EB
 0x02000000

	)

691 
	#CACHERR_EI
 0x01000000

	)

692 #i‡
IP19


693 
	#CACHERR_EW
 0x00800000

	)

695 
	#CACHERR_SIDX_MASK
 0x003ffff8

	)

696 
	#CACHERR_PIDX_MASK
 0x00000007

	)

697 
	#CACHERR_PIDX_SHIFT
 12

	)

701 #i‡
R4000
 || 
R10000


714 
	#WATCHLO_WTRAP
 0x00000001

	)

715 
	#WATCHLO_RTRAP
 0x00000002

	)

716 
	#WATCHLO_ADDRMASK
 0xfffffff8

	)

717 
	#WATCHLO_VALIDMASK
 0xfffffffb

	)

718 #i‡
R4000
 && (! 
deföed
(
_NO_R4000
))

719 
	#WATCHHI_VALIDMASK
 0x0000000f

	)

720 #ñi‡
R10000


721 
	#WATCHHI_VALIDMASK
 0x000000ff

	)

730 #ifde‡
_LANGUAGE_ASSEMBLY


731 
	#C0_INX
 
$0


	)

732 
	#C0_RAND
 
$1


	)

733 
	#C0_TLBLO
 
$2


	)

734 
	#C0_CTXT
 
$4


	)

735 
	#C0_BADVADDR
 
$8


	)

736 
	#C0_TLBHI
 
$10


	)

737 
	#C0_SR
 
$12


	)

738 
	#C0_CAUSE
 
$13


	)

739 
	#C0_EPC
 
$14


	)

740 
	#C0_PRID
 
$15


	)

742 #i‡
R4000
 || 
R10000


743 
	#C0_TLBLO_0
 
$2


	)

744 
	#C0_TLBLO_1
 
$3


	)

745 
	#C0_PGMASK
 
$5


	)

746 
	#C0_TLBWIRED
 
$6


	)

747 
	#C0_COUNT
 
$9


	)

748 
	#C0_COMPARE
 
$11


	)

749 
	#C0_CONFIG
 
$16


	)

750 
	#C0_LLADDR
 
$17


	)

751 
	#C0_WATCHLO
 
$18


	)

752 
	#C0_WATCHHI
 
$19


	)

753 
	#C0_EXTCTXT
 
$20


	)

754 
	#C0_ECC
 
$26


	)

755 
	#C0_CACHE_ERR
 
$27


	)

756 
	#C0_TAGLO
 
$28


	)

757 
	#C0_TAGHI
 
$29


	)

758 
	#C0_ERROR_EPC
 
$30


	)

761 #ifde‡
R10000


762 
	#C0_FMMASK
 
$21


	)

763 
	#C0_BRDIAG
 
$22


	)

764 
	#C0_PRFCNT0
 
$25


	)

765 
	#C0_PRFCNT1
 
$25


	)

766 
	#C0_PRFCRTL0
 
$25


	)

767 
	#C0_PRFCRTL1
 
$25


	)

771 
	#C0_INX
 0

	)

772 
	#C0_RAND
 1

	)

773 
	#C0_TLBLO
 2

	)

774 
	#C0_CTXT
 4

	)

775 
	#C0_BADVADDR
 8

	)

776 
	#C0_TLBHI
 10

	)

777 
	#C0_SR
 12

	)

778 
	#C0_CAUSE
 13

	)

779 
	#C0_EPC
 14

	)

780 
	#C0_PRID
 15

	)

782 #i‡
R4000
 || 
R10000


783 
	#C0_TLBLO_0
 2

	)

784 
	#C0_TLBLO_1
 3

	)

785 
	#C0_PGMASK
 5

	)

786 
	#C0_TLBWIRED
 6

	)

787 
	#C0_COUNT
 9

	)

788 
	#C0_COMPARE
 11

	)

789 
	#C0_CONFIG
 16

	)

790 
	#C0_LLADDR
 17

	)

791 
	#C0_WATCHLO
 18

	)

792 
	#C0_WATCHHI
 19

	)

793 
	#C0_EXTCTXT
 20

	)

794 
	#C0_ECC
 26

	)

795 
	#C0_CACHE_ERR
 27

	)

796 
	#C0_TAGLO
 28

	)

797 
	#C0_TAGHI
 29

	)

798 
	#C0_ERROR_EPC
 30

	)

801 #ifde‡
R10000


802 
	#C0_FMMASK
 21

	)

803 
	#C0_BRDIAG
 22

	)

804 
	#C0_PRFCNT0
 25

	)

805 
	#C0_PRFCNT1
 25

	)

806 
	#C0_PRFCRTL0
 25

	)

807 
	#C0_PRFCRTL1
 25

	)

812 #ifde‡
R10000


813 
	~"sys/R10k.h
"

818 #i‡
_MIPS_SIM
 =
_ABIO32


819 
	#_S_EXT_
(
addr
Ë◊ddr)

	)

821 
	#_S_EXT_
(
addr
Ë(◊ddrË| 0xffffffff00000000LL)

	)

829 #ifde‡
_KERNEL


830 #ifde‡
_LANGUAGE_C


831 
	uªv_id
 {

832 
	mri_uöt
;

834 #ifde‡
MIPSEB


835 
	mRi_fûl
:16,

836 
	mRi_imp
:8,

837 
	mRi_majªv
:4,

838 
	mRi_möªv
:4;

840 #ifde‡
MIPSEL


841 
	mRi_möªv
:4,

842 
	mRi_majªv
:4,

843 
	mRi_imp
:8,

844 
	mRi_fûl
:16;

846 } 
	mRi
;

847 } 
	tªv_id_t
;

848 
	#ri_imp
 
Ri
.
Ri_imp


	)

849 
	#ri_majªv
 
Ri
.
Ri_majªv


	)

850 
	#ri_möªv
 
Ri
.
Ri_möªv


	)

854 
	#C0_IMPMASK
 0xff00

	)

855 
	#C0_IMPSHIFT
 8

	)

856 
	#C0_REVMASK
 0xff

	)

857 
	#C0_MAJREVMASK
 0xf0

	)

858 
	#C0_MAJREVSHIFT
 4

	)

859 
	#C0_MINREVMASK
 0xf

	)

860 
	#C0_MINREVSHIFT
 0

	)

862 
	#C0_IMP_UNDEFINED
 0x29

	)

863 
	#C0_IMP_RM5271
 0x28

	)

864 
	#C0_IMP_RM7000
 0x27

	)

865 
	#C0_IMP_R5000
 0x23

	)

866 
	#C0_IMP_TRITON
 
C0_IMP_R5000


	)

867 
	#C0_IMP_R4650
 0x22

	)

868 
	#C0_IMP_R4700
 0x21

	)

869 
	#C0_IMP_R4600
 0x20

	)

870 
	#C0_IMP_R8000
 0x10

	)

871 
	#C0_IMP_R10000
 0x09

	)

872 
	#C0_IMP_R12000
 0x0e

	)

873 
	#C0_IMP_R14000
 0x0f

	)

874 
	#C0_MAJREV_R16000
 0x3

	)

875 
	#C0_IMP_R6000A
 0x06

	)

876 
	#C0_IMP_R4400
 0x04

	)

877 
	#C0_MAJREVMIN_R4400
 0x04

	)

878 
	#C0_IMP_R4000
 0x04

	)

879 
	#C0_IMP_R6000
 0x03

	)

880 
	#C0_IMP_R3000A
 0x02

	)

881 
	#C0_MAJREVMIN_R3000A
 0x03

	)

882 
	#C0_IMP_R3000
 0x02

	)

883 
	#C0_MAJREVMIN_R3000
 0x02

	)

884 
	#C0_IMP_R2000A
 0x02

	)

885 
	#C0_MAJREVMIN_R2000A
 0x01

	)

886 
	#C0_IMP_R2000
 0x01

	)

888 
	#C0_MAKE_REVID
(
x
,
y
,
z
Ë(((xË<< 
C0_IMPSHIFT
) | \

889 ((
y
Ë<< 
C0_MAJREVSHIFT
) | \

890 ((
z
Ë<< 
C0_MINREVSHIFT
))

	)

894 #i‡
deföed
 (
R10000
Ë|| deföed (
R4000
)

895 
	#PGMASK_SHFT
 13

	)

901 
	#C0_BRDIAG_GHISTORY_SHFT
 23

	)

902 
	#C0_BRDIAG_GHISTORY_MASK
 (0x‡<< 
C0_BRDIAG_GHISTORY_SHFT
)

	)

903 
	#C0_BRDIAG_BTAC_SHFT
 27

	)

904 
	#C0_BRDIAG_BTAC_MASK
 (0x1 << 
C0_BRDIAG_BTAC_SHFT
)

	)

905 
	#C0_BRDIAG_BP_MODE_SHFT
 (16)

	)

906 
	#C0_BRDIAG_BP_MODE_MASK
 (0x3 << 
C0_BRDIAG_BP_MODE_SHFT
)

	)

909 #ifde‡
_KERNEL


910 #ifde‡
_LANGUAGE_C


911 #ifde‡
R10000


912 #ifde‡
R4000


913 
gë_˝u_úr
();

914 
	#IS_R10000
(Ë((
	`gë_˝u_úr
(Ë>> 
C0_IMPSHIFT
Ë< 
C0_IMP_R5000
)

	)

915 
	#IS_R12000
(Ë((
	`gë_˝u_úr
(Ë>> 
C0_IMPSHIFT
Ë=
C0_IMP_R12000
)

	)

916 
	#IS_R12KS
(Ë((
	`gë_˝u_úr
(Ë& (
C0_IMPMASK
 | 
C0_MAJREVMASK
)Ë=0xe30)

	)

917 
	#IS_R14000
(Ë((
	`gë_˝u_úr
(Ë>> 
C0_IMPSHIFT
Ë=
C0_IMP_R14000
)

	)

918 
	#IS_R16000
(Ë(
	`IS_R14000
() && \

919 ((
	`gë_˝u_úr
(Ë& 
C0_MAJREVMASK
Ë>> 
C0_MAJREVSHIFT
Ë>
C0_MAJREV_R16000
)

	)

922 
	#IS_R10000
(Ë(1)

	)

923 
gë_˝u_úr
();

924 
	#IS_R12000
(Ë((
	`gë_˝u_úr
(Ë>> 
C0_IMPSHIFT
Ë=
C0_IMP_R12000
)

	)

925 
	#IS_R12KS
(Ë((
	`gë_˝u_úr
(Ë& (
C0_IMPMASK
 | 
C0_MAJREVMASK
)Ë=0xe30)

	)

926 
	#IS_R14000
(Ë((
	`gë_˝u_úr
(Ë>> 
C0_IMPSHIFT
Ë=
C0_IMP_R14000
)

	)

927 
	#IS_R16000
(Ë(
	`IS_R14000
() && \

928 ((
	`gë_˝u_úr
(Ë& 
C0_MAJREVMASK
Ë>> 
C0_MAJREVSHIFT
Ë>
C0_MAJREV_R16000
)

	)

931 
	#IS_R10000
(Ë(0)

	)

932 
	#IS_R12000
(Ë(0)

	)

	@/usr/include/sys/sema.h

12 #i‚de‡
__SYS_SEMA_H__


13 
	#__SYS_SEMA_H__


	)

17 
	~<sys/ty≥s.h
>

18 
	~<sys/time•ec.h
>

19 
	~<sys/∑øm.h
>

21 
	gkthªad
;

22 
	g¥oc
;

23 
	guthªad_s
;

47 
	smuãx
 {

48 #ifde‡
SEMAINFOP


49 *
	mm_öfo
;

51 
__psunsig√d_t
 
	mm_bôs
;

52 
kthªad
 *
	mm_queue
;

53 } 
	tmuãx_t
;

58 
	#MUTEX_DEFAULT
 0x0

	)

60 #ifde‡
_KERNEL


70 
muãx_lock
(
muãx_t
 *, );

71 
muãx_åylock
(
muãx_t
 *);

72 
muãx_u∆ock
(
muãx_t
 *);

74 
	#METER_NAMSZ
 16

	)

75 
	#METER_NO_SEQ
 -1

	)

89 
	#muãx_öô
(
mp
, 
ty≥
, 
«me
Ë
	`öô_muãx
(mp,Åy≥,Çame, -1)

	)

90 
öô_muãx
(
muãx_t
 *, , *, );

91 
muãx_de°roy
(
muãx_t
 *);

92 
muãx_rm¥oc
(
muãx_t
 *, 
kthªad
 *);

100 
muãx_t
 *
muãx_Æloc
(, , *, );

101 
muãx_dóŒoc
(
muãx_t
 *);

110 *
muãx_ow√r
(
muãx_t
 *);

111 
muãx_ow√d
(
muãx_t
 *);

112 
muãx_möe
(
muãx_t
 *);

144 (*
	t•lfunc_t
)();

146 #ifde‡
_KERNEL


147 
lock_t
 *
	`•ölock_Æloc
(, *);

148 
	`•ölock_dóŒoc
(
lock_t
 *);

149 
	`•ölock_öô
(
lock_t
 *, *);

150 
	`öô_•ölock
(
lock_t
 *, *, );

151 
	`•ölock_de°roy
(
lock_t
 *);

152 
	`mëî_•ölock
(
lock_t
 *, *);

168 #i‡
MP


169 
	`muãx_•öåylock_•l
(
lock_t
 *, 
•lfunc_t
);

170 
	`muãx_•ölock
(
lock_t
 *);

171 
	`muãx_•öåylock
(
lock_t
 *);

172 
	`muãx_•öu∆ock
(
lock_t
 *, );

173 
	`muãx_•ölock_•l
(
lock_t
 *, 
•lfunc_t
);

174 
	`•ölock_i¶ocked
(
lock_t
 *);

175 
	`•ölock_öôülized
(
lock_t
 *);

177 
	`•lhi
();

178 
	`•lx
();

179 
	#muãx_•ölock
(
l
Ë
	`•lhi
()

	)

180 
	#muãx_•öåylock
(
l
Ë
	`•lhi
()

	)

181 
	#muãx_•öu∆ock
(
l
,
x
Ë
	`•lx
(x)

	)

182 
	#muãx_•ölock_•l
(
x
,
y
Ë
	`y
()

	)

183 
	#muãx_•öåylock_•l
(
x
,
y
Ë
	`y
()

	)

185 
	#•ölock_i¶ocked
(
l
Ë(!
	`is•l0
(
	`gë§
()))

	)

186 
	#•ölock_öôülized
(
l
Ë1

	)

196 
	ssv
 {

197 #ifde‡
SEMAINFOP


198 *
sv_öfo
;

200 
__psunsig√d_t
 
sv_queue
;

201 } 
	tsv_t
;

221 
	`sv_waô
(
sv_t
 *, , *, );

222 
	`sv_waô_sig
(
sv_t
 *, , *, );

233 
	`sv_sig«l
(
sv_t
 *);

234 
	`sv_f‹óch_wake
(
sv_t
 *,

235 (*)(
kthªad
 *, *), *);

236 
	`sv_brﬂdˇ°
(
sv_t
 *);

237 #ifde‡
_KERNEL


238 
	`sv_brﬂdˇ°_bounded
(
sv_t
 *);

250 
	#sv_öô
(
svp
, 
ty≥
, 
«me
Ë
	`öô_sv
(svp,Åy≥,Çame, -1)

	)

251 
	`öô_sv
(
sv_t
 *, , *, );

253 
	#SV_FIFO
 0x0

	)

254 
	#SV_LIFO
 0x2

	)

255 
	#SV_PRIO
 0x4

	)

256 
	#SV_KEYED
 0x6

	)

257 
	#SV_DEFAULT
 
SV_FIFO


	)

266 
sv_t
 *
	`sv_Æloc
(, , *);

272 
	`sv_de°roy
(
sv_t
 *);

273 
	`sv_dóŒoc
(
sv_t
 *);

281 
	`wsyncv_¥oc
(
sv_t
 *, 
¥oc
 *);

282 
	`wsyncv_uthªad
(
sv_t
 *, 
uthªad_s
 *);

283 
	`wsyncv
(
sv_t
 *, 
kthªad
 *);

284 
	`unsyncv
(
sv_t
 *, 
kthªad
 *);

291 
	`sv_waôq
(
sv_t
 *);

315 
	s£ma_s
 {

316 #ifde‡
SEMAINFOP


317 *
s_öfo
;

321 
cou¡
;

322 
Êags
;

323 } 
s_°
;

324 
uöt_t
 
s_lock
;

325 } 
s_un
;

326 
kthªad
 *
s_queue
;

327 } 
	t£ma_t
;

332 
	#SEMA_NOHIST
 0x0001

	)

333 
	#SEMA_LOCK
 0x0004

	)

335 #ifde‡
_KERNEL


346 
	#öô£ma
(
•
, 
vÆ
Ë
	`öô_£ma
(•, vÆ, 
NULL
, -1)

	)

347 
	#öôn£ma
(
•
, 
vÆ
, 
«me
Ë
	`öô_£ma
(•, vÆ,Çame, -1)

	)

348 
	`öô_£ma
(
£ma_t
 *, , *, );

349 
	`‰ì£ma
(
£ma_t
 *);

350 
£ma_t
 *
	`£ma_Æloc
(, , *);

351 
	`£ma_dóŒoc
(
£ma_t
 *);

352 
	`vÆu£ma
(
£ma_t
 *);

354 
	#öôn£ma_muãx
(
S
, 
N
Ë
	`öôn£ma
(S, 1, N)

	)

355 
	#öôn£ma_synch
(
S
, 
N
Ë
	`öôn£ma
(S, 0, N)

	)

370 
	`sv_£ma_waô
(
sv_t
 *, , 
£ma_t
 *);

371 
	`sv_£ma_waô_sig
(
sv_t
 *, , 
£ma_t
 *);

380 
	`£mamëî⁄
(
£ma_t
 *, *, );

381 
	`£mamëîoff
(
£ma_t
 *);

383 #ifde‡
DEBUG


384 
	`own£ma
(
£ma_t
 *);

396 
	`p£ma
(
£ma_t
 *, );

410 
	`ù£ma
(
£ma_t
 *);

421 
	`˝£ma
(
£ma_t
 *);

429 
	`v£ma
(
£ma_t
 *);

430 
	`cv£ma
(
£ma_t
 *);

437 
	`w£ma
(
£ma_t
 *, 
kthªad
 *);

443 
	`£mahi°off
(
£ma_t
 *);

444 
	`£mahi°⁄
(
£ma_t
 *);

452 
deÁu…£mamëî
;

457 
	#NSCHEDCLASS
 (-(
PWEIGHTLESS
)+1)

	)

459 
	s¥iq_s
 {

460 
mri_s
 *
pq_pq
[
NSCHEDCLASS
];

461 #ifde‡
DEBUG


462 
pq_¥i
;

464 } 
	t¥iq_t
;

474 
	sk¥iq_s
 {

475 
kthªad
 *
pq_pq
[
NSCHEDCLASS
];

476 #ifde‡
DEBUG


477 
pq_¥i
;

479 } 
	tk¥iq_t
;

484 
	smæock_s
 {

485 #ifde‡
SEMAINFOP


486 *
mr_öfo
;

488 
uöt_t
 
mr_lbôs
;

491 
qcou¡
;

492 
qÊags
;

493 } 
mr_°
;

494 
uöt_t
 
qbôs
;

495 } 
mr_un
;

497 
k¥iq_t
 
mr_waôîs
;

498 
¥iq_t
 
mr_hﬁdîs
;

499 #ifde‡
DEBUG


500 
mr_nhﬁdîs
;

502 } 
	tmæock_t
;

504 
	#mr_p˙t
 
mr_un
.
mr_°
.
qcou¡


	)

505 
	#mr_qbôs
 
mr_un
.
qbôs


	)

506 
	#mr_qlock
 
mr_un
.
qbôs


	)

515 
	#MR_ACCESS
 1

	)

516 
	#MR_UPDATE
 2

	)

531 
	#MRLOCK_BARRIER
 0x1

	)

532 
	#MRLOCK_BEHAVIOR
 0x2

	)

533 
	#MRLOCK_DBLTRIPPABLE
 0x4

	)

534 
	#MRLOCK_ALLOW_EQUAL_PRI
 0x8

	)

535 
	#MRLOCK_DIVEST_PRI_INHERIT
 0x10

	)

536 
	#MRLOCK_BACKOFF
 0x20

	)

537 
	#MRLOCK_NOBARRIER
 0x40

	)

538 
	#MRLOCK_NOEQUALPRI
 0x80

	)

540 
	#MRLOCK_DEFAULT
 0

	)

542 #ifde‡
_KERNEL


543 
	#mröô
(
mΩ
, 
«me
Ë
	`mæock_öô
(mΩ, 0,Çame, -1)

	)

544 
	#mrbhöô
(
mΩ
, 
«me
Ë
	`mæock_öô
(mΩ, 
MRLOCK_BARRIER
|
MRLOCK_BEHAVIOR
|
MRLOCK_DBLTRIPPABLE
|
MRLOCK_DIVEST_PRI_INHERIT
|
MRLOCK_NOEQUALPRI
,Çame, -1)

	)

546 
	`mæock_öô
(
mæock_t
 *, 
ty≥
, *
«me
, 
£quí˚
);

547 
	`mr‰ì
(
mæock_t
 *);

548 
	`mrmëî⁄
(
mæock_t
 *, *, );

549 
	`mrmëîoff
(
mæock_t
 *);

555 
	`møc˚ssf
(
mæock_t
 *, );

556 
	`mrupd©ef
(
mæock_t
 *, );

558 
	`mr•öac˚ss
(
mæock_t
 *);

559 
	`mr•öupd©e
(
mæock_t
 *);

560 
	`mπry•öac˚ss
(
mæock_t
 *, *);

561 
	`mπry•öupd©e
(
mæock_t
 *, *);

562 
	`mr•öu∆ock
(
mæock_t
 *, );

563 
	`mr•öac˚ss_upgøde
(
mæock_t
 *, );

564 
	`mr•öupd©e_upgøde
(
mæock_t
 *, );

566 
	#møc˚ss
(
mΩ
Ë
	`møc˚ssf
(mΩ, 0Ë

	)

567 
	#mrupd©e
(
mΩ
Ë
	`mrupd©ef
(mΩ, 0Ë

	)

569 
	`mæock
(
mæock_t
 *, , );

570 
	`cmæock
(
mæock_t
 *, );

571 
	`mπryac˚ss
(
mæock_t
 *);

572 
	`mπryupd©e
(
mæock_t
 *);

573 
	`møccu∆ock
(
mæock_t
 *);

574 
	`mru∆ock
(
mæock_t
 *);

575 
	`mrdemŸe
(
mæock_t
 *);

576 
	`mπry¥omŸe
(
mæock_t
 *);

577 
	`ismæocked
(
mæock_t
 *, );

578 
	`mri¶ocked_ac˚ss
(
mæock_t
 *);

579 
	`mri¶ocked_upd©e
(
mæock_t
 *);

580 
	`mri¶ocked_™y
(
mæock_t
 *);

581 
	`mrgënwaôîs
(
mæock_t
 *);

582 
	`mrdive°
(
mæock_t
 *);

583 
	`mæock_möe
(
mæock_t
 *, 
kthªad
 *);

584 
	`mΩromŸe_‹_u∆ock
(
mæock_t
 *
mΩ
);

592 
	`mr_ac˚ss
(
mæock_t
 *);

593 
	`mr_upd©e
(
mæock_t
 *);

594 
	`mr_åyac˚ss
(
mæock_t
 *);

595 
	`mr_åyupd©e
(
mæock_t
 *);

596 
	`mr_accu∆ock
(
mæock_t
 *);

597 
	`mr_u∆ock
(
mæock_t
 *);

598 
	`mr_demŸe
(
mæock_t
 *);

599 
	`mr_åy¥omŸe
(
mæock_t
 *);

600 
	`mr_¥omŸe_‹_u∆ock
(
mæock_t
 *);

606 
	`mr_åyac˚ss_noöhîô
(
mæock_t
 *);

607 
	`mr_åyupd©e_noöhîô
(
mæock_t
 *);

608 
	`mr_u∆ock_noöhîô
(
mæock_t
 *);

613 
mæock_num_mrü
;

626 
	`sv_mæock_waô
(
sv_t
 *, , 
mæock_t
 *);

627 
	`sv_mæock_waô_sig
(
sv_t
 *, , 
mæock_t
 *);

636 #ifde‡
_KERNEL


640 
	#mp_muãx_lock
(
m
,
f
Ë
	`muãx_lock
(m,f)

	)

641 
	#mp_muãx_u∆ock
(
m
Ë
	`muãx_u∆ock
(m)

	)

642 
	#mp_muãx_åylock
(
m
Ë
	`muãx_åylock
(m)

	)

643 
	#mp_sv_waô
(
sv
,
f
,
m
,
s
Ë
	`sv_waô
(sv,f,m,s)

	)

644 
	#mp_sv_waô_sig
(
sv
,
f
,
m
,
s
Ë
	`sv_waô_sig
(sv,f,m,s)

	)

645 
	#mp_muãx_•ölock
(
m
Ë
	`muãx_•ölock
(m)

	)

646 
	#mp_muãx_•öu∆ock
(
m
,
s
Ë
	`muãx_•öu∆ock
(m,s)

	)

654 
	`√°ed_•ölock
(
lock_t
 *);

655 
	`√°ed_•öåylock
(
lock_t
 *);

656 
	`√°ed_•öu∆ock
(
lock_t
 *);

674 
	`öô_bôlock
(
uöt
 *, uint, *, );

675 
	`de°roy_bôlock
(
uöt
 *);

676 
	`öô_64bôlock
(
__uöt64_t
 *, __uint64_t, *, );

677 
	`de°roy_64bôlock
(
__uöt64_t
 *);

678 
	`mëî_bôlock
(
uöt
 *, *);

679 
	`mëî_64bôlock
(
__uöt64_t
 *, *);

681 #i‡
MP


682 
	`muãx_bôlock
(
uöt
 *, uint);

683 
	`muãx_bôåylock
(
uöt
 *, uint);

684 
	`muãx_bôu∆ock
(
uöt
 *, uint, );

686 
	`muãx_64bôlock
(
__uöt64_t
 *, __uint64_t);

687 
	`muãx_64bôåylock
(
__uöt64_t
 *, __uint64_t);

688 
	`muãx_64bôu∆ock
(
__uöt64_t
 *, __uint64_t, );

690 
	`√°ed_bôlock
(
uöt
 *, uint);

691 
	`√°ed_bôåylock
(
uöt
 *, uint);

692 
	`√°ed_bôu∆ock
(
uöt
 *, uint);

694 
	`√°ed_64bôlock
(
__uöt64_t
 *, __uint64_t);

695 
	`√°ed_64bôåylock
(
__uöt64_t
 *, __uint64_t);

696 
	`√°ed_64bôu∆ock
(
__uöt64_t
 *, __uint64_t);

698 
	`bôlock_i¶ocked
(
uöt_t
 *, uint_t);

699 
	`bôlock64bô_i¶ocked
(
__uöt64_t
 *, 
uöt_t
);

700 
	`muãx_bôlock_•l
(
uöt_t
 *, uöt_t, 
•lfunc_t
);

708 
	#muãx_bôlock
(
l
,
b
Ë
	`•lhi
()

	)

709 
	#muãx_bôåylock
(
l
,
b
Ë
	`•lhi
()

	)

710 
	#muãx_bôu∆ock
(
l
,
b
,
x
Ë
	`•lx
(x)

	)

712 
	#muãx_64bôlock
(
l
,
b
Ë
	`•lhi
()

	)

713 
	#muãx_64bôåylock
(
l
,
b
Ë
	`•lhi
()

	)

714 
	#muãx_64bôu∆ock
(
l
,
b
,
x
Ë
	`•lx
(x)

	)

716 
	#√°ed_bôlock
(
l
,
b
Ë(()0)

	)

717 
	#√°ed_bôåylock
(
l
,
b
Ë1

	)

718 
	#√°ed_bôu∆ock
(
l
,
b
Ë(()0)

	)

720 
	#√°ed_64bôlock
(
l
,
b
Ë(()0)

	)

721 
	#√°ed_64bôåylock
(
l
,
b
Ë1

	)

722 
	#√°ed_64bôu∆ock
(
l
,
b
Ë(()0)

	)

724 
	#bôlock_i¶ocked
(
l
,
b
Ë
	`is•lhi
(
	`gë§
())

	)

725 
	#muãx_bôlock_•l
(
x
,
b
,
y
Ë
	`y
()

	)

729 
	#mp_muãx_bôlock
(
l
,
b
Ë
	`muãx_bôlock
÷,b)

	)

730 
	#mp_muãx_bôu∆ock
(
l
,
b
,
x
Ë
	`muãx_bôu∆ock
÷,b,x)

	)

732 #i‡(
_MIPS_SZPTR
 == 32)

733 
	#muãx_psbôlock
(
L
,
B
Ë
	`muãx_bôlock
(L,B)

	)

734 
	#muãx_psbôåylock
(
L
,
B
Ë
	`muãx_bôåylock
(L,B)

	)

735 
	#muãx_psbôu∆ock
(
L
,
B
,
X
Ë
	`muãx_bôu∆ock
(L,B,X)

	)

736 
	#√°ed_psbôlock
(
L
,
B
Ë
	`√°ed_bôlock
(L,B)

	)

737 
	#√°ed_psbôåylock
(
L
,
B
Ë
	`√°ed_bôåylock
(L,B)

	)

738 
	#√°ed_psbôu∆ock
(
L
,
B
Ë
	`√°ed_bôu∆ock
(L,B)

	)

741 #i‡(
_MIPS_SZPTR
 == 64)

742 
	#muãx_psbôlock
(
L
,
B
Ë
	`muãx_64bôlock
(L,B)

	)

743 
	#muãx_psbôåylock
(
L
,
B
Ë
	`muãx_64bôåylock
(L,B)

	)

744 
	#muãx_psbôu∆ock
(
L
,
B
,
X
Ë
	`muãx_64bôu∆ock
(L,B,X)

	)

745 
	#√°ed_psbôlock
(
L
,
B
Ë
	`√°ed_64bôlock
(L,B)

	)

746 
	#√°ed_psbôåylock
(
L
,
B
Ë
	`√°ed_64bôåylock
(L,B)

	)

747 
	#√°ed_psbôu∆ock
(
L
,
B
Ë
	`√°ed_64bôu∆ock
(L,B)

	)

761 
uöt_t
 
	`bôlock_˛r
(uint_t *, uint_t, uint_t);

762 
uöt_t
 
	`bôlock_£t
(uint_t *, uint_t, uint_t);

777 
	`sv_bôlock_waô
(
sv_t
 *, , 
uöt_t
 *, uint_t, );

778 
	`sv_bôlock_waô_sig
(
sv_t
 *, , 
uöt_t
 *, uint_t, );

780 
	#mp_sv_bôlock_waô
(
s
,
f
,
l
,
b
,
x
Ë
	`sv_bôlock_waô
(s,f,l,b,x)

	)

781 
	#mp_sv_bôlock_waô_sig
(
s
,
f
,
l
,
b
,
x
Ë
	`sv_bôlock_waô_sig
(s,f,l,b,x)

	)

784 
	~<sys/m⁄.h
>

789 
	sk_mºódî
 {

790 
uöt64_t
 
mr_tid
;

794 
uöt_t
 
mr_ts
;

795 
k_mrmëî
 *
the_mëî
;

796 
k_mºódî
 *
√xt
;

797 } 
	tk_mºódî_t
;

799 
	#MR_READER_BUCKETS
 13

	)

802 
	`mæock_b¨rõr
(
mæock_t
 *, );

803 
	`mrupd©e_b¨rõr
(
mæock_t
 *);

805 #i‡
_KERNEL
 && !
_STANDALONE


809 
	#•£ma
(
x
Ë
	`√°ed_•ölock
(&(x))

	)

810 
	#sv£ma
(
x
Ë
	`√°ed_•öu∆ock
(&(x))

	)

812 
	#öôlock
(
l
Ë
	`•ölock_öô
÷,0)

	)

813 
	#öô∆ock
(
l
,
n
Ë
	`•ölock_öô
÷,n)

	)

814 
	#‰ì•lock
(
l
Ë
	`•ölock_de°roy
(&÷))

	)

816 #ifde‡
MP


817 
	#ow∆ock
(
l
Ë
	`•ölock_i¶ocked
(&÷))

	)

818 
	`muãx_io_•öu∆ock
(
lock_t
 *, );

819 
	#_åylock
(
l
,
f
Ë
	`muãx_•öåylock_•l
(&÷),f)

	)

821 
	#ow∆ock
(
x
Ë1

	)

822 
	#muãx_io_•öu∆ock
(
l
,
y
Ë
	`•lx
(y)

	)

823 
	#_åylock
(
l
,
y
Ë
	`y
()

	)

826 
	#•lock•l
(
l
,
f
Ë
	`muãx_•ölock_•l
(&÷),f)

	)

827 
	#•u∆ock•l
(
l
,
s
Ë
	`muãx_•öu∆ock
(&÷),s)

	)

828 
	#•lock
(
l
Ë
	`muãx_•ölock
(&÷))

	)

829 
	#•u∆ock
(
l
,
s
Ë
	`muãx_•öu∆ock
(&÷),s)

	)

831 
	`muãx_io_•öu∆ock
(
lock_t
 *, );

832 
	#io_•lock
(
l
Ë
	`muãx_•ölock
(&÷))

	)

833 
	#io_•u∆ock
(
l
,
s
Ë
	`muãx_io_•öu∆ock
(&÷),s)

	)

834 
	#io_•lock•l
(
l
,
f
Ë
	`muãx_•ölock_•l
(&÷),f)

	)

835 
	#io_•u∆ock•l
(
l
,
s
Ë
	`muãx_io_•öu∆ock
(&÷),s)

	)

843 
	`sv_bôlock_timedwaô
(
sv_t
 *, , 
uöt
 *, uint, , ,

844 
time•ec_t
 *,Åimespec_t *);

845 
	`sv_bôlock_timedwaô_sig
(
sv_t
 *, , 
uöt
 *, uint, , ,

846 
time•ec_t
 *,Åimespec_t *);

847 
	`sv_timedwaô
(
sv_t
 *, , *, , ,

848 
time•ec_t
 *,Åimespec_t *);

849 
	`sv_timedwaô_nŸify
(
sv_t
 *, , *, , ,

850 
time•ec_t
 *,Åimespec_t *);

851 
	`sv_timedwaô_sig
(
sv_t
 *, , *, , ,

852 
time•ec
 *, timespec *);

853 
	`sv_timedwaô_sig_nŸify
(
sv_t
 *, , *, , ,

854 
time•ec
 *, timespec *);

860 
	`sv_thªshﬁd
(
sv_t
 *, );

865 
	#SVTIMER_FAST
 0x001

	)

866 
	#SVTIMER_TRUNC
 0x002

	)

872 
	#kmuãx_t
 
muãx_t


	)

873 
	#muãx_íãr
(
m
Ë
	`muãx_lock
(m, 
PZERO
)

	)

874 
	#muãx_åyíãr
(
m
Ë
	`muãx_åylock
(m)

	)

875 
	#muãx_exô
(
m
Ë
	`muãx_u∆ock
(m)

	)

877 
	#kc⁄dv¨_t
 
sv_t


	)

878 
	#cv_öô
(
cv
, 
nm
, 
f
, 
i
Ë
	`sv_öô
(cv, 
SV_DEFAULT
,Çm)

	)

879 
	#cv_waô
(
cv
, 
mp
) { \

880 
	`sv_waô
(
cv
, 
PZERO
, 
mp
, 0); \

881 
	`muãx_lock
(
mp
, 
PZERO
); \

882 
	}

	)
}

883 
	#cv_sig«l
(
cv
Ë
	`sv_sig«l
(cv)

	)

884 
	#cv_waô_sig
(
cv
,
mp
Ë
	`sv_waô_sig
(cv,
PZERO
,mp,0)

	)

885 
	#cv_brﬂdˇ°
(
cv
Ë
	`sv_brﬂdˇ°
(cv)

	)

886 
	#cv_de°roy
(
cv
Ë
	`sv_de°roy
(cv)

	)

892 
	#RW_READER
 
MR_ACCESS


	)

893 
	#RW_WRITER
 
MR_UPDATE


	)

895 
	#krwlock_t
 
mæock_t


	)

897 
	#rw_öô
(
r
, 
nm
, 
f
, 
i
Ë
	`mröô
‘,Çm)

	)

898 
	#rw_íãr
(
r
, 
a
Ë
	`mæock
‘,á, 
PZERO
)

	)

899 
	#rw_exô
(
r
Ë
	`mru∆ock
‘)

	)

900 
	#rw_åyupgøde
(
r
Ë
	`mπry¥omŸe
‘)

	)

901 
	#rw_downgøde
(
r
Ë
	`mrdemŸe
‘)

	)

902 
	#rw_de°roy
(
r
Ë
	`mr‰ì
‘)

	)

903 
	#RW_WRITE_HELD
(
r
Ë
	`ismæocked
‘, 
MR_UPDATE
)

	)

904 
	#RW_READ_HELD
(
r
Ë
	`ismæocked
‘, 
MR_ACCESS
)

	)

907 #i‡
_KERNEL


910 
	mms_mode
;

911 
	mms_˙t
;

912 
sv_t
 
	mms_sv
;

913 } 
	tm¶ock_t
;

915 
	#MS_FREE
 0

	)

916 
	#MS_UPD
 1

	)

917 
	#MS_ACC
 2

	)

918 
	#MS_WAITERS
 4

	)

920 
msöô
(
m¶ock_t
 *, *);

921 
msde°roy
(
m¶ock_t
 *);

922 
mßc˚ss
(
m¶ock_t
 *, 
muãx_t
 *);

923 
msupd©e
(
m¶ock_t
 *, 
muãx_t
 *);

924 
msu∆ock
(
m¶ock_t
 *);

925 
is_mßc˚ss
(
m¶ock_t
 *);

926 
is_msupd©e
(
m¶ock_t
 *);

	@/usr/include/sys/systm.h

19 #i‚de‡
__SYS_SYSTM_H__


20 
	#__SYS_SYSTM_H__


	)

21 #ifde‡
__˝lu•lus


27 #i‡
DISCONTIG_PHYSMEM


29 
ckphy•num
(
p‚_t
);

31 
	#CKPHYS
(
addr
Ë(
	`CKPHYSPNUM
(
	`bto˘
◊ddr)))

	)

32 
	#CKPHYSPNUM
(
p‚
Ë
	`ckphy•num
’‚)

	)

36 
	#CKPHYS
(
addr
Ë(((
ul⁄g
)◊ddrË>((ul⁄g)
	`˘ob
(
max˛ick
+1))) || \

37 ((
ul⁄g
)(
addr
Ë< ((ul⁄g)
	`˘ob
(
	`pmem_gëfú°˛ick
()))) || \

38 ((
ul⁄g
)(
addr
Ë>
kpba£
 && \

39 (
	`PG_ISHOLE
(
	`p‚t›fd©
(
	`btoc
(
addr
))))))

	)

40 
	#CKPHYSPNUM
(
p‚
Ë(((
ul⁄g
)’‚Ë> (ul⁄g)
max˛ick
) || \

41 ((
ul⁄g
)(
p‚
Ë< (ul⁄g)(
	`pmem_gëfú°˛ick
())) || \

42 (
	`˘ob
(
p‚
Ë>
kpba£
 && \

43 (
	`PG_ISHOLE
(
	`p‚t›fd©
(
p‚
)))))

	)

47 
	~"ªg.h
"

48 
	~<°d¨g.h
>

54 
˝uty≥
;

56 
dbgc⁄pﬁl
;

57 
kdebug
;

58 
time_t
 
lbﬁt
;

59 
time_t
 
time
;

60 
lock_t
 
timñock
;

62 
p‚_t
 
maxmem
;

63 
p‚_t
 
physmem
;

64 
p‚_t
 
max˛ick
;

65 
daddr_t
 
sw∂o
;

66 
nsw≠
;

67 
dev_t
 
roŸdev
;

68 
dev_t
 
sw≠dev
;

69 
dev_t
 
dumpdev
;

70 
dum∂o
;

71 *
∑nic°r
;

72 
showc⁄fig
;

73 
ª°ri˘ed_chown
;

74 
ˇchewrback
;

76 
	ge‰ame_s
;

77 
	gtu√
;

78 
	gvnode
;

79 
	g¥oc
;

80 
	gpfd©
;

81 
	gˇŒout
;

83 
kîn_‰ì
(*);

84 *
kîn_ˇŒoc
(
size_t
, size_t);

85 *
kîn_mÆloc
(
size_t
);

86 *
kîn_ªÆloc
(*, 
size_t
);

88 *
kîn_ˇŒoc_node
(
size_t
, size_t, 
˙odeid_t
);

89 *
kîn_mÆloc_node
(
size_t
, 
˙odeid_t
);

91 *
low_mem_Æloc
(, 
ˇddr_t
*, *);

93 
¶ìp
(*, );

94 
wakeup
(*);

96 #i‡
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION>=700)

97 
	#SYNCHRONIZE
(Ë
	`__synchr⁄ize
()

	)

98 
	#INLINE
 
__ölöe


	)

100 
	#SYNCHRONIZE
()

	)

101 
	#INLINE


	)

104 
	#dißbÀöå
(Ë
	`•lhi
()

	)

105 
	#íabÀöå
(
s
Ë
	`•lx
(s)

	)

107 
•lhi
();

108 
•l0
();

109 
•l1
();

110 
•l2
();

111 
•l3
();

112 
•l4
();

113 
•l5
();

114 
•l6
();

115 
•l65
();

116 
•l7
();

117 
•lvme
();

118 
• ë
();

119 
•…ty
();

120 
•limp
();

121 
•lgio1
();

122 
•Õrof
();

123 
•Àcc
();

124 
•Àº
();

125 
•lhi_ª ë
();

126 
•lx
();

127 
•lxecc
();

128 
£t§
(
ul⁄g
);

129 
ul⁄g
 
gë§
();

130 
£tˇu£
(
uöt
);

131 
uöt
 
gëˇu£
();

132 *
gëbadvaddr
();

133 #i‚de‡
_STANDALONE


135 *
gëpc
();

137 *
gë•
();

138 
gëpc•
(
__psunsig√d_t
 *, __psunsigned_t *);

139 
uöt
 
gë_r4k_cou¡î
();

140 
dñay_f‹_öå
();

141 
is•lhi
(
uöt
);

142 
is•l0
(
uöt
);

143 
is•Õrof
(
uöt
);

144 
is•l7
(
uöt
);

145 
sú⁄
(
uöt
);

146 
súoff
(
uöt
);

147 
•l£t
();

148 #ifde‡
SPLMETER


149 
uöt
 
øi£•l
(
ö°_t
 *, uint);

150 
lowî•l
(, 
ö°_t
 *);

151 
_•lhi
(
ö°_t
 *);

152 
__•lx
();

153 
__•l0
();

154 
_ˇn˚l•lhi
();

155 
°‹e_if_gª©î
(*, );

158 #i‡!
_STANDALONE


159 
˛ón_iˇche
(*, , 
p‚_t
, );

160 
˛ón_dˇche
(*, , 
p‚_t
, );

162 
ˇcheöô
();

163 
b˛ón_ˇches
(*, , , );

164 
_b˛ón_ˇches
(*, , 
p‚_t
, );

165 
Êush_ˇche
();

166 
wbÊush
();

167 
uöt
 
gëˇchesz
(
˝uid_t
);

169 #i‚de‡
iˇche_övÆ


170 
iˇche_övÆ
(*, );

172 
ˇche_›î©i⁄
(*, , );

173 
ˇche_›î©i⁄_p‚li°
(
p‚_t
 *
p‚_li°
, 
p‚_cou¡
, 
Êags
);

174 
˛ón_isﬁ©ed_iˇche
(
˝umask_t
);

175 
sync_dˇches
(*, , 
p‚_t
, );

176 
sync_dˇches_ex˛
(*, , 
p‚_t
, );

178 
	#dˇche_wb
(
X
,
Y
) \

179 
	`ˇche_›î©i⁄
(
X
,
Y
,
CACH_DCACHE
|
CACH_INVAL
|
CACH_WBACK
|
CACH_IO_COHERENCY
)

	)

180 
	#d©a_ˇche_wb
(
addr
, 
Àn
, 
Êags
) \

181 
	`ˇche_›î©i⁄
(
addr
, 
Àn
, \

182 
CACH_DCACHE
|
CACH_WBACK
|((
Êags
Ë& ~
CACH_OPMASK
))

	)

183 
	#d©a_ˇche_övÆ
(
addr
, 
Àn
, 
Êags
) \

184 
	`ˇche_›î©i⁄
(
addr
, 
Àn
, \

185 
CACH_DCACHE
|
CACH_WBACK
|
CACH_INVAL
|((
Êags
Ë& ~
CACH_OPMASK
))

	)

186 
	#d©a_ˇche_wbövÆ
(
addr
, 
Àn
, 
Êags
) \

187 
	`ˇche_›î©i⁄
(
addr
, 
Àn
, \

188 
CACH_DCACHE
|
CACH_WBACK
|
CACH_INVAL
|((
Êags
Ë& ~
CACH_OPMASK
))

	)

190 
	#ö°_ˇche_övÆ
(
addr
, 
Àn
, 
Êags
) \

191 
	`ˇche_›î©i⁄
(
addr
, 
Àn
, \

192 
CACH_ICACHE
|
CACH_INVAL
|((
Êags
Ë& ~
CACH_OPMASK
))

	)

194 
dki_dˇche_wb
(*, );

195 
dki_dˇche_övÆ
(*, );

196 
dki_dˇche_wbövÆ
(*, );

198 
xdki_dˇche_övÆ_ªad⁄ly
(*, );

199 
xdki_dˇche_wbövÆ_ªad⁄ly
(*, );

200 
xdki_dˇche_vÆid©e
(*, );

201 
xdki_dˇche_vÆid©e_ªad⁄ly
(*, );

203 
badaddr
(volatile *, );

204 
badaddr_vÆ
(volatile *, , volatile *);

205 
wbadaddr
(volatile *, );

206 
wbadaddr_vÆ
(volatile *, , volatile *);

208 
hw˝ö
(volatile *, *, );

209 
hw˝out
(*, volatile *, );

211 
c›yö°r
(*, *, 
size_t
, size_t *);

212 
c›y°r
(*, *, 
size_t
, size_t *);

213 
u∑th
(*, *, 
size_t
);

214 
bcmp
(c⁄° *, c⁄° *, 
size_t
);

215 
bc›y
(c⁄° *, *, 
size_t
);

216 
swbc›y
(const *, *, );

217 
ovbc›y
(c⁄° *, *, 
size_t
);

218 
bzîo
(*, 
size_t
);

219 
uzîo
(*, );

220 
gíc›y
(*, *, , );

221 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

222 *
mem˝y
(*, c⁄° *, 
size_t
);

223 *
mem£t
(*, , 
size_t
);

225 
c›yout
(*,*, );

226 
swc›yout
(*,*, );

227 
swc›yö
(*,*, );

228 
c›yö
(*, *, );

229 
__öt64_t
 
ful⁄g
(*);

230 
fuw‹d
(*);

231 
fuiw‹d
(*);

232 
fuibyã
(*);

233 
fubyã
(*);

234 
suw‹d
(*, 
uöt
);

235 
suiw‹d
(*, 
uöt
);

236 
suhÆf
(*, 
ush‹t
);

237 
subyã
(*, 
unch¨
);

238 
sfu32
(*, *);

239 
•u32
(*, *, 
uöt
);

240 
sfu32v
(*, *, *, 
uöt
);

241 
__öt64_t
 
sul⁄g
(*, __int64_t);

242 
fkiw‹d
(*);

245 
cmn_îr
(, *, ...);

246 #¥agm®
mùs_‰equícy_höt
 
NEVER
 
cmn_îr


247 
∑nic
(*, ...);

248 #¥agm®
mùs_‰equícy_höt
 
NEVER
 
∑nic


249 #i‡!
_STANDALONE


250 
≠tﬂrgs
(*, 
va_li°
, 
__psöt_t
[]);

251 
•rötf
(*, *, ...);

252 
v•rötf
(*, *, 
va_li°
);

253 
lo_•rötf
(*, *, ...);

254 
¥ötf
(*, ...);

255 
sync_¥ötf
(*, ...);

256 
¥öçutbuf
(, (*)(*, ...));

257 
¥öåegs
(
e‰ame_t
 *, (*)(*, ...));

258 
d¥ötf
(*, ...);

262 
dri_¥ötf
(*, ...);

263 
¥dev
(*, , ...);

264 
∑nic
(*, ...);

265 
c⁄buf_Êush
();

266 *
°d«me
(*, *, , , );

267 
¥om_ªboŸ
();

268 
nomemmsg
(*);

269 
_assÁû
(*, *, );

272 
exô
(, );

273 
f‹˚_ªsched
();

274 
Êushiˇche
();

275 
mö
(, );

276 
max
(, );

277 
nodev
();

278 
nuŒdev
();

279 
gëudev
();

280 
nosys
();

281 
n›kg
();

282 
n‹óch
();

283 
nuŒsys
();

284 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

285 
numtos
(, *);

286 
©oi
(*);

287 
°πouŒ
(const *, **, );

288 
øndom
();

290 
˚Œ_t
 
˚Œid
();

291 
bôÀn_t
 
b·°£t
(*, 
bônum_t
, bitlen_t);

292 
bôÀn_t
 
b·°˛r
(*, 
bônum_t
, bitlen_t);

293 
b£t
(*, 
bônum_t
);

294 
b˛r
(*, 
bônum_t
);

295 
bt°
(*, 
bônum_t
);

296 
bf£t
(*, 
bônum_t
, 
bôÀn_t
);

297 
bf˛r
(*, 
bônum_t
, 
bôÀn_t
);

298 
bôÀn_t
 
bb·°£t
(*, 
bônum_t
, bitlen_t);

299 
bôÀn_t
 
bb·°˛r
(*, 
bônum_t
, bitlen_t);

300 
bb£t
(*, 
bônum_t
);

301 
bb˛r
(*, 
bônum_t
);

302 
bbt°
(*, 
bônum_t
);

303 
bbf£t
(*, 
bônum_t
, 
bôÀn_t
);

304 
bbf˛r
(*, 
bônum_t
, 
bôÀn_t
);

305 
bôÀn_t
 
bfcou¡
(*, 
bônum_t
, bitlen_t);

306 
b£t_©omic
(*, 
bônum_t
);

307 
b˛r_©omic
(*, 
bônum_t
);

308 
debug
(*);

309 
grow
(
ˇddr_t
);

310 
is_bønch
(
ö°_t
);

311 
is_lﬂd
(
ö°_t
);

312 
is_°‹e
(
ö°_t
);

313 
ioöå_©_˝u
(, , );

314 
is_kmem_•a˚
(*, );

315 
˝u_isvÆid
();

316 
nfs_˙vt
(*, , *);

317 
nfs_˙vt3
(*, , *);

318 
so·Â_psig«l
(, , 
e‰ame_s
 *);

319 
sig«l
(
pid_t
, );

320 
hﬁd_n⁄Áèlsig
(
k_sig£t_t
 *);

321 
ªÀa£_n⁄Áèlsig
(
k_sig£t_t
 *);

322 
_hook_ex˚±i⁄s
();

323 
Ælowöås
();

324 
ª£t_Àds
();

326 
ªadad≠ãrs
(
uöt
);

327 
tu√_ßnôy
(
tu√
 *);

328 
gësysid
(*);

329 
p‚_t
 
∑gecﬁ‹Æign
’‚_t, 
__psunsig√d_t
);

330 
p‚_t
 
pmem_gëfú°˛ick
();

331 
p‚_t
 
node_gëfú°‰ì
(
˙odeid_t
);

332 
p‚_t
 
node_gëmax˛ick
(
˙odeid_t
);

333 #i‡
DISCONTIG_PHYSMEM


334 
p‚_t
 
¶Ÿ_gësize
(
˙odeid_t
, );

336 
p‚_t
 
£tupbadmem
(
pfd©
 *,Öfn_t,Öfn_t);

337 
pfd©
 *
pfd©_¥obe
(pfdat *, *);

339 
uida˘hash_öô
();

340 
uida˘_ö¸
(
uid_t
);

341 
uida˘_de¸
(
uid_t
);

342 
uida˘_swôch
(
uid_t
, uid_t);

344 
ªm≠f
(
vnode
 *, 
off_t
, );

345 
ªm≠fûe
(
vnode
 *, 
off_t
, );

346 
˙_lök
(
vnode
 *, );

347 
˙_öô
(, );

348 
˙_is_öôed
();

350 
öå
(
e‰ame_s
 *, 
uöt
, uint, uint);

351 
k_machªg_t
 
ld°_addr
(
e‰ame_s
 *);

352 
k_machªg_t
 
°‹e_d©a
(
e‰ame_s
 *);

353 
bu£º‹_öå
(
e‰ame_s
 *);

354 
dobu£ºe
(
e‰ame_s
 *, 
ö°_t
 *, 
uöt
);

355 
dobu£º
(
e‰ame_s
 *, 
ö°_t
 *, 
uöt
);

356 
idÀ_îr
(
ö°_t
 *, 
uöt
, *, *);

357 *
gë_badvaddr
();

358 
k_machªg_t
 
emuœã_bønch
(
e‰ame_s
 *, 
ö°_t
, 
__öt32_t
, *);

359 
machöe_îr‹_dump
(*);

360 
öô_mfhi_w¨
();

361 
sizememac˚ss
(
e‰ame_s
 *, *);

362 
kébfix
(
ˇddr_t
);

363 
óæynoÁu…
(
e‰ame_s
 *, 
uöt
);

364 
˝ubﬂrd
();

365 
mÃe£t
();

366 
mdboŸ
(, *);

367 
föd˝u‰eq
();

368 
föd˝u‰eq_øw
();

369 
ˇche_¥ìm±_limô
();

370 
c›roc_föd
();

371 
£t_Àds
();

372 
Êushbus
();

373 
bad_badva
(
e‰ame_t
 *);

374 
kicksched
();

377 
gl_£ç‹th™dÀr
(, (*
Â
)());

378 
du_keybﬂrd_p‹t
();

379 
du_gëch¨
();

380 
du_putch¨
(, );

381 
du_c⁄pﬁl
();

382 
du_öô
();

385 
˛k°¨t
();

386 
˛k£t
(
time_t
);

387 
˛kªld
();

388 
kthªad
 *
idÀ
();

389 
°¨åt˛ock
();

390 
°›˛ocks
();

391 
°¨tkg˛ock
();

392 
¶owkg˛ock
();

393 
toid_t
 
Á°_timeout
((*)(), *, , ...);

394 
toid_t
 
Á°_¥timeout
(
¥o˚ss‹id_t
, (*)(), *, , ...);

395 
toid_t
 
Á°_ôimeout
((*)(), *, , 
∂_t
, ...);

396 
toid_t
 
Á°_ôimeout_nŸhrd
((*)(), *, , 
∂_t
, ...);

397 
toid_t
 
˛ock_¥timeout
(
¥o˚ss‹id_t
, (*
fun
)(),

398 *, 
__öt64_t
, , ...);

399 
toid_t
 
˛ock_¥timeout_nŸhrd
(
¥o˚ss‹id_t
, (*
fun
)(),

400 *, 
__öt64_t
, ...);

401 
u¡imeout
(
toid_t
);

402 
u¡imeout_waô
(
toid_t
);

403 
timeö_íåy
(
ˇŒout
 *);

405 
toid_t
 
timeout
((*)(), *, , ...);

406 
toid_t
 
timeout_¥i
((*)(), *, , , ...);

407 
toid_t
 
timeout_nŸhrd
((*)(), *, , ...);

408 
toid_t
 
¥timeout
(
¥o˚ss‹id_t
, (*)(), *, , ...);

409 #i‡
RTINT_WAR


410 
toid_t
 
¥timeout_nŸhrd
(
¥o˚ss‹id_t
, (*)(), *, , ...);

412 
toid_t
 
ôimeout
((*)(), *, , 
∂_t
, ...);

413 
toid_t
 
ôimeout_nŸhrd
((*)(), *, , 
∂_t
, ...);

414 
migøã_timeouts
(
¥o˚ss‹id_t
,Örocessorid_t);

415 
us_dñay
(
uöt
);

416 
us_dñaybus
(
uöt
);

417 
˛r_r4kcou¡_öå
();

418 
dñay
();

419 
__psöt_t
 
gëgp
();

420 
öôtodr
(
time_t
);

421 
ª£âodr
();

422 
πodc
();

423 
wtodc
();

424 
toid_t
 
dŸimeout
(
¥o˚ss‹id_t
, (*)(), *, 
__öt64_t
,

425 , , 
va_li°
 
≠
);

426 
dev_t
 
blocktoch¨
(dev_t);

427 
dev_t
 
ch¨toblock
(dev_t);

429 
gë_cuºít_abi
();

431 #i‡
JUMP_WAR


432 
˛r_jump_w¨_wúed
();

433 
£xc_e›
(
e‰ame_s
 *, 
uöt
, *);

434 
£twúed
();

435 
gëwúed
();

438 
	#˝utimeout
 
timeout


	)

441 
	#ADDEXIT_CHECK_DUPS
 0x1

	)

442 
	#ADDEXIT_REMOVE
 0x2

	)

443 
add_exô_ˇŒback
(
pid_t
, , (*)(*), *);

444 
uthªad_add_exô_ˇŒback
(, (*)(*), *);

450 
	urvÆ
 {

452 
__öt64_t
 
	gr_v1
;

453 
__öt64_t
 
	gr_v2
;

454 } 
	gr_v
;

455 
off_t
 
	gr_off
;

457 
	gr_∑d0
;

458 
time_t
 
	gr_tm
;

459 } 
	gr_t
;

461 
	#r_vÆ1
 
r_v
.
r_v1


	)

462 
	#r_vÆ2
 
r_v
.
r_v2


	)

463 
	#r_time
 
r_t
.
r_tm


	)

465 
rvÆ
 
	trvÆ_t
;

467 #ifde‡
__˝lu•lus


	@/usr/include/sys/time.h

25 #i‚de‡
_SYS_TIME_H


26 
	#_SYS_TIME_H


	)

29 #ifde‡
__˝lu•lus


32 
	~<°™d¨ds.h
>

33 
	~<sgidefs.h
>

34 
	~<öã∫Æ/sgima¸os.h
>

40 
__SGI_LIBC_BEGIN_NAMESPACE_STD


42 #i‚de‡
_CLOCK_T


43 
	#_CLOCK_T


	)

44 #i‡
_MIPS_SZLONG
 == 32

45 
	t˛ock_t
;

47 #i‡
_MIPS_SZLONG
 == 64

48 
	t˛ock_t
;

53 #i‚de‡
_TIME_T


54 
	#_TIME_T


	)

55 #i‡
_MIPS_SZLONG
 == 32

56 
	ttime_t
;

58 #i‡
_MIPS_SZLONG
 == 64

59 
	ttime_t
;

63 
__SGI_LIBC_END_NAMESPACE_STD


64 
__SGI_LIBC_USING_FROM_STD
(
time_t
)

65 
__SGI_LIBC_USING_FROM_STD
(
˛ock_t
)

70 #i‚de‡
_STAMP_T


71 
	#_STAMP_T


	)

72 
__öt64_t
 
	t°amp_t
;

73 #i‡
_SGIAPI


74 
	sUSTMSC∑ú


76 
°amp_t
 
u°
;

77 
°amp_t
 
msc
;

78 } 
	tUSTMSC∑ú
;

82 #i‡
_XOPEN4UX
 || 
_XOPEN5
 || 
deföed
(
_BSD_TYPES
Ë|| deföed(
_BSD_COMPAT
)

88 #i‚de‡
_TIMEVAL_T


89 
	#_TIMEVAL_T


	)

90 
	stimevÆ
 {

91 #i‡
_MIPS_SZLONG
 == 64

92 
__öt32_t
 :32;

94 
time_t
 
tv_£c
;

95 
tv_u£c
;

103 
	s__úix5_timevÆ
 {

104 
__öt32_t
 
tv_£c
;

105 
__öt32_t
 
tv_u£c
;

113 
	#ITIMER_REAL
 0

	)

114 
	#ITIMER_VIRTUAL
 1

	)

115 
	#ITIMER_PROF
 2

	)

116 
	#ITIMER_MAX
 3

	)

118 
	sôimîvÆ
 {

119 
timevÆ
 
ô_öãrvÆ
;

120 
timevÆ
 
ô_vÆue
;

125 #i‡
_SGIAPI
 || 
deföed
(
_BSD_TYPES
Ë|| deföed(
_BSD_COMPAT
)

127 
	#úix5_timevÆ
 
__úix5_timevÆ


	)

134 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

135 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

136 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_sec || \

137 (
tvp
)->
tv_£c
 =(
uvp
)->tv_£¯&& (tvp)->
tv_u£c
 
	`cmp
 (uvp)->tv_u£c)

	)

138 
	#timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (
time_t
)0, (tvp)->
tv_u£c
 = 0L

	)

140 
	stimez⁄e
 {

141 
tz_möuãswe°
;

142 
tz_d°time
;

145 
	#DST_NONE
 0

	)

146 
	#DST_USA
 1

	)

147 
	#DST_AUST
 2

	)

148 
	#DST_WET
 3

	)

149 
	#DST_MET
 4

	)

150 
	#DST_EET
 5

	)

151 
	#DST_CAN
 6

	)

152 
	#DST_GB
 7

	)

153 
	#DST_RUM
 8

	)

154 
	#DST_TUR
 9

	)

155 
	#DST_AUSTALT
 10

	)

159 #i‡
_POSIX93


160 
	~<sys/time•ec.h
>

163 #i‡
_XOPEN5


164 
	~<sys/ty≥s.h
>

167 #i‡!
deföed
(
_KERNEL
)

169 #i‡
_XOPEN4UX
 || 
_XOPEN5


171 
gëôimî
(, 
ôimîvÆ
 *);

172 
£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

173 
utimes
(c⁄° *, c⁄° 
timevÆ
 [2]);

174 #i‡!
_SGIAPI
 && !
deföed
(
_BSD_TYPES
Ë&& !deföed(
_BSD_COMPAT
)

175 
gëtimeofday
(
timevÆ
 *, *);

178 
	~<sys/£À˘.h
>

179 #i‡(
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


180 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

183 
__xpg4_£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

186 
£À˘
(

187 
_nfds
,

188 
fd_£t
 *
_ªadfds
,

189 
fd_£t
 *
_wrôefds
,

190 
fd_£t
 *
_ex˚±fds
,

191 
timevÆ
 *
_timeout
)

193  
__xpg4_£À˘
(
_nfds
, 
_ªadfds
, 
_wrôefds
, 
_ex˚±fds
, 
_timeout
);

200 #i‡
_SGIAPI
 || 
deföed
(
_BSD_TYPES
Ë|| deföed(
_BSD_COMPAT
)

202 
adjtime
(
timevÆ
 *, timeval *);

203 
BSDgëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

204 
BSD£âimeofday
(
timevÆ
 *, 
timez⁄e
 *);

205 
utimës
(c⁄° *, c⁄° 
time•ec
 [2]);

206 #i‚de‡
utimës


208 #¥agm®
›ti⁄Æ
 
utimës


210 
gëtimeofday
(
timevÆ
 *,...);

211 
£âimeofday
(
timevÆ
 *,...);

230 #i‡
deföed
(
_BSD_TIME
Ë|| deföed(
_BSD_COMPAT
)

231 
	#gëtimeofday
 
BSDgëtimeofday


	)

232 
	#£âimeofday
 
BSD£âimeofday


	)

235 
	~<time.h
>

240 #i‡
deföed
(
_KERNEL
)

241 
	~"sys/ty≥s.h
"

242 
	~"sys/ktime.h
"

245 #ifde‡
__˝lu•lus


	@/usr/include/sys/types.h

24 #i‚de‡
_SYS_TYPES_H


25 
	#_SYS_TYPES_H


	)

29 
	~<°™d¨ds.h
>

30 
	~<sgidefs.h
>

31 
	~<öã∫Æ/sgima¸os.h
>

34 
	tuch¨_t
;

35 
	tush‹t_t
;

36 
	tuöt_t
;

37 
	tul⁄g_t
;

40 #i‡(
_POSIX1C
 || 
_XOPEN5
)

41 
	~<sys/±hªad.h
>

44 #i‡
_XOPEN5
 || 
_XOPEN4


45 
	tblksize_t
;

46 
	tsu£c⁄ds_t
;

48 #i‡(
_MIPS_SZLONG
 == 32)

49 
	txtisˇœr_t
;

50 
	txtiusˇœr_t
;

52 #i‡(
_MIPS_SZLONG
 == 64)

53 
	txtisˇœr_t
;

54 
	txtiusˇœr_t
;

57 
xtisˇœr_t
 
	tt_sˇœr_t
;

58 
xtiusˇœr_t
 
	tt_usˇœr_t
;

62 * 
	taddr_t
;

63 * 
	tˇddr_t
;

64 #i‡(
_MIPS_SIM
 =
_ABIN32
)

65 
__öt64_t
 
	tdaddr_t
;

67 
	tdaddr_t
;

69 
	tpgno_t
;

70 
__uöt32_t
 
	tp‚_t
;

71 
	t˙t_t
;

72 
	tbasi˘ime_t
;

73 
__öt64_t
 
	tmi¸o_t
;

78 
__öt32_t
 
	tpg˙t_t
;

79 #i‡
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5


80 íum { 
	mB_FALSE
, 
	mB_TRUE
 } 
	tboﬁón_t
;

91 #i‡(
_MIPS_SZLONG
 == 32)

92 
	tid_t
;

98 #i‡(
_MIPS_SZLONG
 == 64)

99 
__öt32_t
 
	tid_t
;

104 #i‡(
_MIPS_SZLONG
 == 32)

105 
ul⁄g_t
 
	tmaj‹_t
;

106 
ul⁄g_t
 
	tmö‹_t
;

108 #i‡(
_MIPS_SZLONG
 == 64)

109 
__uöt32_t
 
	tmaj‹_t
;

110 
__uöt32_t
 
	tmö‹_t
;

124 
ush‹t_t
 
	to_mode_t
;

125 
	to_dev_t
;

126 
ush‹t_t
 
	to_uid_t
;

127 
o_uid_t
 
	to_gid_t
;

128 
	to_∆ök_t
;

129 
	to_pid_t
;

130 
__uöt32_t
 
	to_öo_t
;

132 #i‡(
_MIPS_SZLONG
 == 32)

133 
	tmode_t
;

134 
	tdev_t
;

135 
	tuid_t
;

136 
	tgid_t
;

137 
	t∆ök_t
;

138 
	tpid_t
;

140 #i‡(
_MIPS_SZLONG
 == 64)

141 
__uöt32_t
 
	tmode_t
;

142 
__uöt32_t
 
	tdev_t
;

143 
__öt32_t
 
	tuid_t
;

144 
__öt32_t
 
	tgid_t
;

145 
__uöt32_t
 
	t∆ök_t
;

146 
__öt32_t
 
	tpid_t
;

149 
	ttid_t
;

151 
dev_t
 
	tvîãx_hdl_t
;

153 #i‡(
deföed
(
_KERNEL
Ë|| (
_MIPS_SIM
 =
_ABIN32
)Ë&& !deföed(
_STANDALONE
)

154 
__uöt64_t
 
	töo_t
;

156 
	töo_t
;

158 
__uöt64_t
 
	töo64_t
;

160 #i‚de‡
_OFF_T


161 
	#_OFF_T


	)

162 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

163 
__öt64_t
 
	toff_t
;

164 #ñi‡
deföed
(
_STANDALONE
)

165 
	toff_t
;

166 #ñi‡
_MIPS_SIM
 =
_ABIN32


167 
__öt64_t
 
	toff_t
;

169 
	toff_t
;

173 #i‚de‡
_OFF64_T


174 
	#_OFF64_T


	)

175 
__öt64_t
 
	toff64_t
;

178 
__scöt_t
 
	t__scoff_t
;

179 #i‡
deföed
(
_KERNEL
Ë|| (
_NO_XOPEN4
 && 
_NO_XOPEN5
 && 
_NO_POSIX
)

180 
__scoff_t
 
	tscoff_t
;

183 #i‡
_LFAPI


185 
__öt64_t
 
	tblk˙t64_t
;

186 
__uöt64_t
 
	tfsblk˙t64_t
;

187 
__uöt64_t
 
	tfsfû˙t64_t
;

190 #i‡((
_MIPS_SIM
 =
_ABIN32
Ë|| 
deföed
(
_KERNEL
))

191 
__öt64_t
 
	tblk˙t_t
;

192 
__uöt64_t
 
	tfsblk˙t_t
;

193 
__uöt64_t
 
	tfsfû˙t_t
;

195 
	tblk˙t_t
;

196 
ul⁄g_t
 
	tfsblk˙t_t
;

197 
ul⁄g_t
 
	tfsfû˙t_t
;

200 
	tswblk_t
;

201 
	t∑ddr_t
;

202 
	ti›addr_t
;

203 
	tkey_t
;

204 
	tu£_t
;

205 
	tsysid_t
;

206 
	tödex_t
;

208 sig√d 
	t«sid_t
;

209 sig√d 
	t˙odeid_t
;

210 sig√d 
	t∑πid_t
;

211 sig√d 
	tmoduÀid_t
;

212 sig√d 
	tcmoduÀid_t
;

213 
uch¨_t
 
	t˛u°îid_t
;

215 
	tlock_t
;

216 sig√d 
	t˝uid_t
;

217 
	t¥i_t
;

218 
__uöt64_t
 
	taccum_t
;

219 
__öt64_t
 
	t¥id_t
;

220 
__öt64_t
 
	tash_t
;

221 
	t˚Œ_t
;

222 
	t¸edid_t
;

223 
__öt64_t
 
	tjid_t
;

225 
__öt32_t
 
	tn˝us_t
;

226 
__uöt64_t
 
	tid_ty≥_t
;

228 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


230 #i‡!
deföed
(
_SIZE_T
Ë&& !deföed(
_SIZE_T_
)

231 
	#_SIZE_T


	)

232 #i‡(
_MIPS_SZLONG
 == 32)

233 
	tsize_t
;

235 #i‡(
_MIPS_SZLONG
 == 64)

236 
	tsize_t
;

240 
__SGI_LIBC_END_NAMESPACE_STD


241 
	$__SGI_LIBC_USING_FROM_STD
(
size_t
)

243 #i‚de‡
_SSIZE_T


244 
	#_SSIZE_T


	)

245 #i‡(
_MIPS_SZLONG
 == 32)

246 
	tssize_t
;

248 #i‡(
_MIPS_SZLONG
 == 64)

249 
	tssize_t
;

253 
__SGI_LIBC_BEGIN_NAMESPACE_STD


255 #i‚de‡
_TIME_T


256 
	#_TIME_T


	)

257 #i‡
_MIPS_SZLONG
 == 32

258 
	ttime_t
;

260 #i‡
_MIPS_SZLONG
 == 64

261 
	ttime_t
;

265 #i‚de‡
_CLOCK_T


266 
	#_CLOCK_T


	)

267 #i‡
_MIPS_SZLONG
 == 32

268 
	t˛ock_t
;

270 #i‡
_MIPS_SZLONG
 == 64

271 
	t˛ock_t
;

275 
__SGI_LIBC_END_NAMESPACE_STD


276 
	$__SGI_LIBC_USING_FROM_STD
(
time_t
)

277 
	$__SGI_LIBC_USING_FROM_STD
(
˛ock_t
)

279 #i‚de‡
_WCHAR_T


280 
	#_WCHAR_T


	)

281 #i‡(
_MIPS_SZLONG
 == 32)

282 
	twch¨_t
;

284 #i‡(
_MIPS_SZLONG
 == 64)

285 
__öt32_t
 
	twch¨_t
;

289 #i‚de‡
_CLOCK_ID_T


290 
	#_CLOCK_ID_T


	)

291 
	t˛ockid_t
;

293 #i‚de‡
_TIMER_T


294 
	#_TIMER_T


	)

295 
	ttimî_t
;

297 #i‚de‡
_USECONDS_T


298 
	#_USECONDS_T


	)

304 
	tu£c⁄ds_t
;

306 #i‡
	`deföed
(
__mùs
)

311 
__scunsig√d_t
 
	tbônum_t
;

312 
__scunsig√d_t
 
	tbôÀn_t
;

315 
	t¥o˚ss‹id_t
;

316 
	ttoid_t
;

317 *
	tqaddr_t
;

318 
__uöt32_t
 
	tö°_t
;

322 #i‡(
_MIPS_ISA
 =
_MIPS_ISA_MIPS1
 || _MIPS_ISA =
_MIPS_ISA_MIPS2
)

323 
	tmachªg_t
;

326 #i‡(
_MIPS_ISA
 =
_MIPS_ISA_MIPS3
 || _MIPS_ISA =
_MIPS_ISA_MIPS4
)

327 
__uöt64_t
 
	tmachªg_t
;

332 #i‡(
_MIPS_FPSET
 == 16)

333 
__uöt32_t
 
	tÂªg_t
;

336 #i‡(
_MIPS_FPSET
 == 32)

337 
__uöt64_t
 
	tÂªg_t
;

345 #i‚de‡
__öây≥s_INCLUDED


346 
	#__öây≥s_INCLUDED


	)

348 sig√d 
	töt8_t
;

349 
	tuöt8_t
;

350 sig√d 
	töt16_t
;

351 
	tuöt16_t
;

352 sig√d 
	töt32_t
;

353 
	tuöt32_t
;

354 
__öt64_t
 
	töt64_t
;

355 
__uöt64_t
 
	tuöt64_t
;

356 
__öt64_t
 
	tötmax_t
;

357 
__uöt64_t
 
	tuötmax_t
;

358 sig√d 
	töçå_t
;

359 
	tuöçå_t
;

366 
	tu_öt8_t
;

367 
	tu_öt16_t
;

368 
__uöt32_t
 
	tu_öt32_t
;

370 #i‡
	`deföed
(
_KERNEL
Ë|| (
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


376 
	#P_MYID
 (-1)

	)

379 #i‡
	`deföed
(
_KERNEL
Ë|| ( 
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
 )

380 
	#NOPID
 (
pid_t
)(-1)

	)

382 #i‚de‡
NODEV


383 
	#NODEV
 (
dev_t
)(-1)

	)

386 
	#P_MYPID
 ((
pid_t
)0)

	)

391 
	tho°id_t
;

397 
	#P_MYHOSTID
 (-1)

	)

401 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
	`deföed
(
_BSD_TYPES
Ë|| deföed(
_BSD_COMPAT
)

406 
	~<sys/bsd_ty≥s.h
>

409 #i‡(
_MIPS_SIM
 !
_ABIO32
)

410 
__uöt64_t
 
	tk_sig£t_t
;

413 
__uöt32_t
 
__sigbôs
[2];

414 } 
	tk_sig£t_t
;

415 #i‡
_SGIAPI


416 
	#sigbôs
 
__sigbôs


	)

420 #i‡
	`deföed
(
_KERNEL
Ë|| deföed(
_STANDALONE
Ë|| deföed(
_KMEMUSER
)

422 
__uöt32_t
 
	tk_Êt£t_t
;

441 
__öt32_t
 
	t≠p32_öt_t
;

442 
__uöt32_t
 
	t≠p32_uöt_t
;

443 
__öt32_t
 
	t≠p32_l⁄g_t
;

444 
__uöt32_t
 
	t≠p32_ul⁄g_t
;

445 
__öt64_t
 
	t≠p32_l⁄g_l⁄g_t
;

446 
__uöt64_t
 
	t≠p32_ul⁄g_l⁄g_t
;

447 
__öt32_t
 
	t≠p64_öt_t
;

448 
__uöt32_t
 
	t≠p64_uöt_t
;

449 
__öt64_t
 
	t≠p64_l⁄g_t
;

450 
__uöt64_t
 
	t≠p64_ul⁄g_t
;

451 
__uöt32_t
 
	t≠p32_±r_t
;

452 
__uöt64_t
 
	t≠p64_±r_t
;

458 #i‡
_MIPS_SIM
 =
_ABI64


459 
__öt64_t
 
	tsyßrg_t
;

460 
__uöt64_t
 
	tusyßrg_t
;

462 
	tsyßrg_t
;

463 
	tusyßrg_t
;

469 #ifde‡
_K64PROM32


470 
__öt32_t
 
	t__¥om±r_t
;

472 * 
	t__¥om±r_t
;

476 
__uöt64_t
 
	tk_machªg_t
;

477 
__öt64_t
 
	tk_smachªg_t
;

479 
__uöt64_t
 
	tk_Âªg_t
;

487 
	s__u£øbi
 {

488 
uabi_szöt
;

489 
uabi_szl⁄g
;

490 
uabi_sz±r
;

491 
uabi_szl⁄gl⁄g
;

492 } 
	t__u£øbi_t
;

498 
__SGI_LIBC_BEGIN_EXTERN_C


499 
__uöt32_t
 
	tsm_sw≠h™dÀ_t
;

500 
™⁄
 * 
	t™⁄_hdl
;

501 (*
	t∂_t
)();

502 
__SGI_LIBC_END_EXTERN_C


503 #i‡
__HARDTYPE


505 
__uvaddr_›aque
 *
	tuvaddr_t
;

507 *
	tuvaddr_t
;

509 
uch¨_t
 
	tm¥Ÿ_t
;

513 
__∑sid_›aque
 *
	ta•asid_t
;

515 
__as_›aque
 *
as_obj
;

516 
a•asid_t
 
as_∑sid
;

517 
uöt64_t
 
as_gí
;

518 } 
	tasid_t
;

525 
	skmem_iﬂddr
 {

526 
v_ba£
;

527 
v_Àngth
;

530 
	~<sys/˝umask.h
>

531 
	~<sys/nodemask.h
>

534 (
	t°_func_t
)(*);

	@/usr/include/time.h

1 #i‚de‡
__TIME_H__


2 
	#__TIME_H__


	)

4 
	~<öã∫Æ/time_c‹e.h
>

6 
	$__SGI_LIBC_USING_FROM_STD
(
size_t
)

7 
	$__SGI_LIBC_USING_FROM_STD
(
˛ock_t
)

8 
	$__SGI_LIBC_USING_FROM_STD
(
time_t
)

9 
	$__SGI_LIBC_USING_FROM_STD
(
˛ock
)

10 
	$__SGI_LIBC_USING_FROM_STD
(
dif·ime
)

11 
	$__SGI_LIBC_USING_FROM_STD
(
mktime
)

12 
	$__SGI_LIBC_USING_FROM_STD
(
time
)

13 
	$__SGI_LIBC_USING_FROM_STD
(
as˘ime
)

14 
	$__SGI_LIBC_USING_FROM_STD
(
˘ime
)

15 
	$__SGI_LIBC_USING_FROM_STD
(
gmtime
)

16 
	$__SGI_LIBC_USING_FROM_STD
(
loˇ…ime
)

17 
	$__SGI_LIBC_USING_FROM_STD
(
°r·ime
)

	@/usr/include/unistd.h

1 #i‚de‡
__UNISTD_H__


2 
	#__UNISTD_H__


	)

27 
	~<°™d¨ds.h
>

28 
	~<öã∫Æ/sgima¸os.h
>

30 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
Ë|| deföed(
_LANGUAGE_ASSEMBLY
)

33 #i‚de‡
F_OK


34 
	#R_OK
 004

	)

35 
	#W_OK
 002

	)

36 
	#X_OK
 001

	)

37 
	#F_OK
 000

	)

40 #i‡
_SGIAPI


41 
	#EFF_ONLY_OK
 010

	)

42 
	#EX_OK
 020

	)

46 #i‡
_XOPEN4UX
 || 
_XOPEN5


47 
	#F_ULOCK
 0

	)

48 
	#F_LOCK
 1

	)

49 
	#F_TLOCK
 2

	)

50 
	#F_TEST
 3

	)

53 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
Ë|| deföed(
_LANGUAGE_ASSEMBLY
)

56 
	#_DF_NOFORK
 0x1

	)

57 
	#_DF_NOCHDIR
 0x2

	)

58 
	#_DF_NOCLOSE
 0x4

	)

61 #i‚de‡
SEEK_SET


62 
	#SEEK_SET
 0

	)

63 
	#SEEK_CUR
 1

	)

64 
	#SEEK_END
 2

	)

67 #i‡
_SGIAPI


69 
	#GF_PATH
 "/ëc/group"

	)

70 
	#PF_PATH
 "/ëc/∑sswd"

	)

79 
	#_POSIX_JOB_CONTROL
 1

	)

80 
	#_POSIX_SAVED_IDS
 1

	)

82 #i‡
_POSIX93
 || 
_XOPEN5


84 
	#_XOPEN_REALTIME
 1

	)

86 
	#_POSIX_ASYNCHRONOUS_IO
 1

	)

87 
	#_POSIX_BARRIERS
 200112L

	)

88 
	#_POSIX_FSYNC
 1

	)

89 
	#_POSIX_MAPPED_FILES
 1

	)

90 
	#_POSIX_MEMLOCK
 1

	)

91 
	#_POSIX_MEMLOCK_RANGE
 1

	)

92 
	#_POSIX_MEMORY_PROTECTION
 1

	)

93 
	#_POSIX_MESSAGE_PASSING
 1

	)

94 
	#_POSIX_PRIORITY_SCHEDULING
 1

	)

95 
	#_POSIX_REALTIME_SIGNALS
 1

	)

96 
	#_POSIX_SEMAPHORES
 1

	)

97 
	#_POSIX_SHARED_MEMORY_OBJECTS
 1

	)

98 
	#_POSIX_SPIN_LOCKS
 200112L

	)

99 
	#_POSIX_SYNCHRONIZED_IO
 1

	)

100 
	#_POSIX_TIMERS
 1

	)

103 #i‡
_LFAPI


104 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

105 
	#_LFS_LARGEFILE
 1

	)

106 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

107 
	#_LFS64_LARGEFILE
 1

	)

108 
	#_LFS64_STDIO
 1

	)

111 #i‚de‡
_POSIX_VDISABLE


112 
	#_POSIX_VDISABLE
 0

	)

115 #i‚def 
NULL


116 
	#NULL
 0L

	)

119 
	#STDIN_FILENO
 0

	)

120 
	#STDOUT_FILENO
 1

	)

121 
	#STDERR_FILENO
 2

	)

124 #i‚de‡
_POSIX_VERSION


125 
	#_POSIX_VERSION
 199506L

	)

129 #i‚de‡
_XOPEN_VERSION


130 
	#_XOPEN_VERSION
 500

	)

133 #i‚de‡
_POSIX2_C_VERSION


134 
	#_POSIX2_C_VERSION
 199209L

	)

137 #i‚de‡
_POSIX2_VERSION


138 
	#_POSIX2_VERSION
 199209L

	)

141 #i‚de‡
_XOPEN_XCU_VERSION


142 
	#_XOPEN_XCU_VERSION
 4

	)

145 #i‚de‡
_XOPEN_XPG4


146 
	#_XOPEN_XPG4
 1

	)

149 #i‚de‡
_XOPEN_UNIX


150 
	#_XOPEN_UNIX
 1

	)

153 #i‚de‡
_POSIX2_C_BIND


154 
	#_POSIX2_C_BIND
 1

	)

157 #i‚de‡
_POSIX2_LOCALEDEF


158 
	#_POSIX2_LOCALEDEF
 1

	)

161 #i‚de‡
_POSIX2_C_DEV


162 
	#_POSIX2_C_DEV
 1

	)

165 #i‚de‡
_POSIX2_CHAR_TERM


166 
	#_POSIX2_CHAR_TERM
 1

	)

169 #i‚de‡
_POSIX2_FORT_DEV


170 
	#_POSIX2_FORT_DEV
 1

	)

173 #i‚de‡
_POSIX2_FORT_RUN


174 
	#_POSIX2_FORT_RUN
 1

	)

177 #i‚de‡
_POSIX2_SW_DEV


178 
	#_POSIX2_SW_DEV
 1

	)

181 #i‚de‡
_POSIX2_UPE


182 
	#_POSIX2_UPE
 1

	)

185 #i‚de‡
_XOPEN_ENH_I18N


186 
	#_XOPEN_ENH_I18N
 1

	)

189 #i‡
_XOPEN5


190 #i‚de‡
_XOPEN_SHM


191 
	#_XOPEN_SHM
 1

	)

196 
	#_CS_PATH
 1

	)

197 
	#_CS_HOSTNAME
 2

	)

198 
	#_CS_RELEASE
 3

	)

199 
	#_CS_VERSION
 4

	)

200 
	#_CS_MACHINE
 5

	)

201 
	#_CS_ARCHITECTURE
 6

	)

202 
	#_CS_HW_SERIAL
 7

	)

203 
	#_CS_HW_PROVIDER
 8

	)

204 
	#_CS_SRPC_DOMAIN
 9

	)

205 
	#_CS_INITTAB_NAME
 10

	)

206 
	#_CS_SYSNAME
 11

	)

207 #i‡
_LFAPI


208 
	#_CS_LFS_CFLAGS
 68

	)

209 
	#_CS_LFS_LDFLAGS
 69

	)

210 
	#_CS_LFS_LIBS
 70

	)

211 
	#_CS_LFS_LINTFLAGS
 71

	)

212 
	#_CS_LFS64_CFLAGS
 72

	)

213 
	#_CS_LFS64_LDFLAGS
 73

	)

214 
	#_CS_LFS64_LIBS
 74

	)

215 
	#_CS_LFS64_LINTFLAGS
 75

	)

217 #i‡
_XOPEN5
 || 
_SGIAPI


218 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 76

	)

219 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 77

	)

220 
	#_CS_XBS5_ILP32_OFF32_LIBS
 78

	)

221 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 79

	)

223 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 80

	)

224 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 81

	)

225 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 82

	)

226 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 83

	)

228 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 84

	)

229 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 85

	)

230 
	#_CS_XBS5_LP64_OFF64_LIBS
 86

	)

231 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 87

	)

233 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 88

	)

234 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 89

	)

235 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 90

	)

236 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 91

	)

239 #i‡
_ABIAPI
 || 
_SGIAPI


240 
	#_MIPS_CS_BASE
 100

	)

241 
	#_MIPS_CS_VENDOR
 (
_MIPS_CS_BASE
+0)

	)

242 
	#_MIPS_CS_OS_PROVIDER
 (
_MIPS_CS_BASE
+1)

	)

243 
	#_MIPS_CS_OS_NAME
 (
_MIPS_CS_BASE
+2)

	)

244 
	#_MIPS_CS_HW_NAME
 (
_MIPS_CS_BASE
+3)

	)

245 
	#_MIPS_CS_NUM_PROCESSORS
 (
_MIPS_CS_BASE
+4)

	)

246 
	#_MIPS_CS_HOSTID
 (
_MIPS_CS_BASE
+5)

	)

247 
	#_MIPS_CS_OSREL_MAJ
 (
_MIPS_CS_BASE
+6)

	)

248 
	#_MIPS_CS_OSREL_MIN
 (
_MIPS_CS_BASE
+7)

	)

249 
	#_MIPS_CS_OSREL_PATCH
 (
_MIPS_CS_BASE
+8)

	)

250 
	#_MIPS_CS_PROCESSORS
 (
_MIPS_CS_BASE
+9)

	)

251 
	#_MIPS_CS_AVAIL_PROCESSORS
 (
_MIPS_CS_BASE
+10)

	)

252 
	#_MIPS_CS_SERIAL
 (
_MIPS_CS_BASE
+11)

	)

255 #i‡
_POSIX1C


259 
	#_POSIX_THREADS
 1

	)

260 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 1

	)

261 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 1

	)

262 
	#_POSIX_THREAD_ATTR_STACKADDR
 1

	)

263 
	#_POSIX_THREAD_ATTR_STACKSIZE
 1

	)

264 
	#_POSIX_THREAD_PRIO_INHERIT
 1

	)

265 
	#_POSIX_THREAD_PRIO_PROTECT
 1

	)

266 
	#_POSIX_THREAD_PROCESS_SHARED
 1

	)

269 #i‡
_SGIAPI
 || 
_XOPEN5


273 
	#_XBS5_ILP32_OFF32
 1

	)

274 
	#_XBS5_ILP32_OFFBIG
 1

	)

278 
	~<sys/ty≥s.h
>

279 
	~<sys/uni°d.h
>

281 
__SGI_LIBC_BEGIN_EXTERN_C


286 
ac˚ss
(const *, );

287 
Æ¨m
();

288 
chdú
(const *);

289 
chown
(c⁄° *, 
uid_t
, 
gid_t
);

290 
˛o£
();

291 *
˘îmid
(*);

292 *
cu£rid
(*);

293 
dup
();

294 
dup2
(, );

295 
exe˛
(const *, const *, ...);

296 
exe˛e
(const *, const *, ...);

297 
exe˛p
(const *, const *, ...);

298 
execv
(const *, *const *);

299 
execve
(const *, *const *, *const *);

300 
execvp
(const *, *const *);

301 
_exô
();

302 
pid_t
 
f‹k
();

303 
Â©hc⁄f
(, );

305 *
gëcwd
(*, 
size_t
);

306 
gid_t
 
gëegid
();

307 
uid_t
 
gëeuid
();

308 
gid_t
 
gëgid
();

309 #i‡
deföed
(
_BSD_COMPAT
)

310 
gëgroups
(, *);

312 
gëgroups
(, 
gid_t
 *);

314 *
gëlogö
();

315 #i‡
deföed
(
_BSD_COMPAT
)

316 
gëpgΩ
();

318 
pid_t
 
gëpgΩ
();

320 
pid_t
 
gëpid
();

321 
pid_t
 
gëµid
();

322 
uid_t
 
gëuid
();

323 
ißây
();

324 #i‡
_SGIAPI
 || 
_ABIAPI


325 
lök
(const *, const *);

326 
lökfﬁlow
(const *, const *);

329 
_lökfﬁlow
(const *, const *);

333 
	$lök
(c⁄° *
__‰om
, c⁄° *
__to
)

335  
	`_lökfﬁlow
(
__‰om
, 
__to
);

336 
	}
}

338 
off_t
 
l£ek
(, off_t, );

339 
∑thc⁄f
(const *, );

340 
∑u£
();

341 
pùe
(*);

342 
ssize_t
 
ªad
(, *, 
size_t
);

343 
rmdú
(const *);

344 
£tgid
(
gid_t
);

345 
£çgid
(
pid_t
,Öid_t);

346 
pid_t
 
£tsid
();

347 
£tuid
(
uid_t
);

348 
¶ìp
();

349 
sysc⁄f
();

350 
pid_t
 
tcgëpgΩ
();

351 
tc£çgΩ
(, 
pid_t
);

352 *
ây«me
();

353 
u∆ök
(const *);

354 
ssize_t
 
wrôe
(, c⁄° *, 
size_t
);

356 #i‡
_POSIX93


360 
fd©async
();

363 #i‡
_POSIX93
 || 
_XOPEN4
 || 
_XOPEN5


367 
fsync
();

370 #i‡
_POSIX93
 || 
_XOPEN4UX
 || 
_XOPEN5


374 
·runˇã
(, 
off_t
);

377 #i‡
_POSIX1C


381 
gëlogö_r
(*, 
size_t
);

382 
ây«me_r
(, *, 
size_t
);

383 
±hªad_©f‹k
((*)(), (*)(), (*)());

386 #i‡
_POSIX2


391 
__SGI_LIBC_END_EXTERN_C


392 
	~<gë›t.h
>

393 
__SGI_LIBC_BEGIN_EXTERN_C


394 
size_t
 
	`c⁄f°r
(, *, size_t);

397 #i‡
_XOPEN4
 || 
_XOPEN5


401 
	`chroŸ
(const *);

402 
	`ni˚
();

403 *
	`¸y±
(const *, const *);

404 
	`í¸y±
(*, );

405 *
	`gë∑ss
(const *);

406 
	`swab
(c⁄° *, *, 
ssize_t
);

409 #i‡
_XOPEN4UX
 || 
_XOPEN5


413 
	`brk
(*);

414 
	`fchown
(, 
uid_t
, 
gid_t
);

415 
	`fchdú
();

416 
	`gëdèbÀsize
();

417 
	`gëho°id
();

418 
	`gëho°«me
(*, 
size_t
);

419 
	`gë∑gesize
();

420 
pid_t
 
	`gëpgid
(pid_t);

421 
pid_t
 
	`gësid
(pid_t);

422 *
	`gëwd
(*);

423 
	`lchown
(c⁄° *, 
uid_t
, 
gid_t
);

424 
	`lockf
(, , 
off_t
);

425 
	`ªadlök
(c⁄° *, *, 
size_t
);

426 *
	`sbrk
(
ssize_t
);

427 #i‡
	`deföed
(
_BSD_COMPAT
)

428 
	`£çgΩ
(, );

430 
pid_t
 
	`£çgΩ
();

433 #i‡(
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


434 
	`£åegid
(
gid_t
, gid_t);

437 
	`__xpg4_£åegid
(
gid_t
, gid_t);

440 
	$£åegid
(
gid_t
 
_rgid
, gid_à
_egid
)

442  
	`__xpg4_£åegid
(
_rgid
, 
_egid
);

443 
	}
}

446 
£åeuid
(
uid_t
, uid_t);

447 
symlök
(const *, const *);

448 
sync
();

449 
åunˇã
(c⁄° *, 
off_t
);

450 
u£c⁄ds_t
 
uÆ¨m
(useconds_t, useconds_t);

451 
u¶ìp
(
u£c⁄ds_t
);

452 #i‡!
_SGIAPI


454 
pid_t
 
_vf‹k
();

456 
pid_t
 
	$vf‹k
(Ë{  
	`_vf‹k
(); 
	}
}

459 #i‡
_XOPEN5


460 #i‡(
_MIPS_SIM
 =
_ABIO32
Ë&& !
deföed
(
_SGI_COMPILING_LIBC
)

461 
ssize_t
 
__¥ód32
(, *, 
size_t
, 
off_t
);

462 
ssize_t
 
__pwrôe32
(, c⁄° *, 
size_t
, 
off_t
);

463 
	#¥ód
 
__¥ód32


	)

464 
	#pwrôe
 
__pwrôe32


	)

466 
ssize_t
 
¥ód
(, *, 
size_t
, 
off_t
);

467 
ssize_t
 
pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

474 #i‡
_SGIAPI
 || 
deföed
(
_BSD_TYPES
Ë|| deföed(
_BSD_COMPAT
)

478 
	gtimevÆ
;

479 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

485 #i‡
_ABIAPI
 || 
_SGIAPI


486 
	g__SGI_LIBC_END_EXTERN_C


488 
	~<sys/uio.h
>

489 
	~<utime.h
>

490 
	~<ª_comp.h
>

492 
__SGI_LIBC_BEGIN_EXTERN_C


494 
ac˘
(const *);

495 
__SGI_LIBC_BEGIN_NAMESPACE_STD


496 
exô
();

497 
__SGI_LIBC_END_NAMESPACE_STD


498 *
gëtxt
(const *, const *);

499 
¥ofû
(*, , , );

500 #i‚de‡
_KERNEL


501 #i‡(
_MIPS_SZPTR
 !
_MIPS_SZINT
)

505 
±ø˚
(, 
pid_t
, *, );

507 
±ø˚
(, 
pid_t
, , );

510 
__SGI_LIBC_BEGIN_NAMESPACE_STD


511 
ª«me
(const *, const *);

512 
__SGI_LIBC_END_NAMESPACE_STD


513 
£ãuid
(
uid_t
);

514 
£ãgid
(
gid_t
);

515 
°ime
(c⁄° 
time_t
 *);

516 
off_t
 
ãŒ
();

519 #i‡
_SGIAPI


520 
	gac˘_•i
;

521 
©f‹k_chûd
((*
func
)());

522 
	`©f‹k_chûd_¥ïíd
((*
func
)());

523 
	`©f‹k_∑ª¡
((*
func
)(, ));

524 
	`©f‹k_¥e
((*
func
)());

525 
	`©•roc_chûd
((*
func
)());

526 
	`©•roc_∑ª¡
((*
func
)(, ));

527 
	`©•roc_¥e
((*
func
)());

528 
	`b£t
(*, 
bônum_t
);

529 
	`b˛r
(*, 
bônum_t
);

530 
	`bt°
(*, 
bônum_t
);

531 
	`bf£t
(*, 
bônum_t
, 
bôÀn_t
);

532 
	`bf˛r
(*, 
bônum_t
, 
bôÀn_t
);

533 
bôÀn_t
 
	`b·°£t
(*, 
bônum_t
, bitlen_t);

534 
bôÀn_t
 
	`b·°˛r
(*, 
bônum_t
, bitlen_t);

535 
	`BSDchown
(c⁄° *, 
uid_t
, 
gid_t
);

536 
	`BSDdup2
(, );

537 
	`BSDfchown
(, 
uid_t
, 
gid_t
);

538 
	`BSDgëpgΩ
();

539 
	`BSD£çgΩ
(, );

540 
	`BSD£tgroups
(, *);

541 
	`BSDgëgroups
(, *);

542 
	`_d´m⁄ize
(, , , );

543 
ash_t
 
	`gëash
();

544 
	`gëdèbÀhi
();

545 
	`gëdomaö«me
(*, );

546 
¥id_t
 
	`gë¥id
();

547 *
	`_gë±y
(*, , 
mode_t
, );

548 
	`gë•öfo
(
ac˘_•i
 *);

549 
	`möc‹e
(
ˇddr_t
, 
size_t
, *);

550 
	`mpö
(*, 
size_t
);

551 
	`mu≈ö
(*, 
size_t
);

552 
	`√w¨øy£ss
();

553 
pid_t
 
	`p¸óãl
(const *, const *, ...);

554 
pid_t
 
	`p¸óãÕ
(const *, const *, ...);

555 
pid_t
 
	`p¸óãv
(const *, *const *);

556 
pid_t
 
	`p¸óãve
(const *, *const *, *const *);

557 
pid_t
 
	`p¸óãvp
(const *, *const *);

558 #i‡!
	`deföed
(
_SGI_COMPILING_LIBC
)

559 
ssize_t
 
	`¥ód64
(, *, 
size_t
, 
off64_t
);

560 
ssize_t
 
	`pwrôe64
(, c⁄° *, 
size_t
, 
off64_t
);

562 
	`ªxe˛
(
˚Œ_t
, const *, const *, ...);

563 
	`ªxe˛e
(
˚Œ_t
, const *, const *, ...);

564 
	`ªxe˛p
(
˚Œ_t
, const *, const *, ...);

565 
	`ªxecv
(
˚Œ_t
, const *, *const *);

566 
	`ªxecve
(
˚Œ_t
, const *, *const *, *const *);

567 
	`ªxecvp
(
˚Œ_t
, const *, *const *);

568 
	`_sqπ_s
();

569 
	`_sqπ_d
();

570 
	`£èsh
(
ash_t
);

571 
	`£tdomaö«me
(const *, );

572 #i‡
	`deföed
(
_BSD_COMPAT
)

573 
	`£tgroups
(, *);

575 
	`£tgroups
(, c⁄° 
gid_t
 *);

577 
	`£tho°id
();

578 
	`£tho°«me
(const *, );

579 
	`£çrid
(
¥id_t
);

580 
	`£ågid
(
gid_t
);

581 
	`£åuid
(
uid_t
);

582 
	`£t•öfo
(
ac˘_•i
 *);

583 
	`sgik›t
(const *, *, );

584 
	`sgö≠
();

585 
off64_t
 
	`ãŒ64
();

586 
	`vh™gup
();

592 
	`Áâach
(, const *);

593 
	`fdëach
(const *);

594 
	`io˘l
(, , ...);

598 #i‡
_LFAPI


600 
	`·runˇã64
(, 
off64_t
);

601 
	`lockf64
(, , 
off64_t
);

602 
off64_t
 
	`l£ek64
(, off64_t, );

603 
	`åunˇã64
(c⁄° *, 
off64_t
);

608 
__SGI_LIBC_END_EXTERN_C


	@/usr/include/X11/X.h

7 #i‚de‡
X_H


8 
	#X_H


	)

56 
	#X_PROTOCOL
 11

	)

57 
	#X_PROTOCOL_REVISION
 0

	)

66 #i‚de‡
_XSERVER64


67 
	tXID
;

68 
	tMask
;

69 
	tAtom
;

70 
	tVisuÆID
;

71 
	tTime
;

73 
	~<X11/Xmd.h
>

74 
CARD32
 
	tXID
;

75 
CARD32
 
	tMask
;

76 
CARD32
 
	tAtom
;

77 
CARD32
 
	tVisuÆID
;

78 
CARD32
 
	tTime
;

81 
XID
 
	tWödow
;

82 
XID
 
	tDøwabÀ
;

83 
XID
 
	tF⁄t
;

84 
XID
 
	tPixm≠
;

85 
XID
 
	tCurs‹
;

86 
XID
 
	tCﬁ‹m≠
;

87 
XID
 
	tGC⁄ãxt
;

88 
XID
 
	tKeySym
;

90 
	tKeyCode
;

96 
	#N⁄e
 0L

	)

98 
	#P¨ítRñ©ive
 1L

	)

101 
	#C›yFromP¨ít
 0L

	)

106 
	#PoöãrWödow
 0L

	)

107 
	#I≈utFocus
 1L

	)

109 
	#PoöãrRoŸ
 1L

	)

111 
	#AnyPr›îtyTy≥
 0L

	)

113 
	#AnyKey
 0L

	)

115 
	#AnyBuâ⁄
 0L

	)

117 
	#AŒTemp‹¨y
 0L

	)

119 
	#CuºítTime
 0L

	)

121 
	#NoSymbﬁ
 0L

	)

130 
	#NoEvítMask
 0L

	)

131 
	#KeyPªssMask
 (1L<<0)

	)

132 
	#KeyRñó£Mask
 (1L<<1)

	)

133 
	#Buâ⁄PªssMask
 (1L<<2)

	)

134 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

135 
	#E¡îWödowMask
 (1L<<4)

	)

136 
	#LóveWödowMask
 (1L<<5)

	)

137 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

138 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

139 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

140 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

141 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

142 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

143 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

144 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

145 
	#Keym≠SèãMask
 (1L<<14)

	)

146 
	#ExposuªMask
 (1L<<15)

	)

147 
	#VisibûôyCh™geMask
 (1L<<16)

	)

148 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

149 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

150 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

151 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

152 
	#FocusCh™geMask
 (1L<<21)

	)

153 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

154 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

155 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

161 
	#KeyPªss
 2

	)

162 
	#KeyRñó£
 3

	)

163 
	#Buâ⁄Pªss
 4

	)

164 
	#Buâ⁄Rñó£
 5

	)

165 
	#MŸi⁄NŸify
 6

	)

166 
	#E¡îNŸify
 7

	)

167 
	#LóveNŸify
 8

	)

168 
	#FocusIn
 9

	)

169 
	#FocusOut
 10

	)

170 
	#Keym≠NŸify
 11

	)

171 
	#Expo£
 12

	)

172 
	#GøphicsExpo£
 13

	)

173 
	#NoExpo£
 14

	)

174 
	#VisibûôyNŸify
 15

	)

175 
	#Cª©eNŸify
 16

	)

176 
	#De°royNŸify
 17

	)

177 
	#Unm≠NŸify
 18

	)

178 
	#M≠NŸify
 19

	)

179 
	#M≠Reque°
 20

	)

180 
	#Rï¨ítNŸify
 21

	)

181 
	#C⁄figuªNŸify
 22

	)

182 
	#C⁄figuªReque°
 23

	)

183 
	#GøvôyNŸify
 24

	)

184 
	#ResizeReque°
 25

	)

185 
	#CúcuœãNŸify
 26

	)

186 
	#CúcuœãReque°
 27

	)

187 
	#Pr›îtyNŸify
 28

	)

188 
	#Sñe˘i⁄CÀ¨
 29

	)

189 
	#Sñe˘i⁄Reque°
 30

	)

190 
	#Sñe˘i⁄NŸify
 31

	)

191 
	#Cﬁ‹m≠NŸify
 32

	)

192 
	#Clõ¡Mesßge
 33

	)

193 
	#M≠pögNŸify
 34

	)

194 
	#LASTEvít
 35

	)

200 
	#Shi·Mask
 (1<<0)

	)

201 
	#LockMask
 (1<<1)

	)

202 
	#C⁄åﬁMask
 (1<<2)

	)

203 
	#Mod1Mask
 (1<<3)

	)

204 
	#Mod2Mask
 (1<<4)

	)

205 
	#Mod3Mask
 (1<<5)

	)

206 
	#Mod4Mask
 (1<<6)

	)

207 
	#Mod5Mask
 (1<<7)

	)

212 
	#Shi·M≠Index
 0

	)

213 
	#LockM≠Index
 1

	)

214 
	#C⁄åﬁM≠Index
 2

	)

215 
	#Mod1M≠Index
 3

	)

216 
	#Mod2M≠Index
 4

	)

217 
	#Mod3M≠Index
 5

	)

218 
	#Mod4M≠Index
 6

	)

219 
	#Mod5M≠Index
 7

	)

225 
	#Buâ⁄1Mask
 (1<<8)

	)

226 
	#Buâ⁄2Mask
 (1<<9)

	)

227 
	#Buâ⁄3Mask
 (1<<10)

	)

228 
	#Buâ⁄4Mask
 (1<<11)

	)

229 
	#Buâ⁄5Mask
 (1<<12)

	)

231 
	#AnyModifõr
 (1<<15Ë

	)

238 
	#Buâ⁄1
 1

	)

239 
	#Buâ⁄2
 2

	)

240 
	#Buâ⁄3
 3

	)

241 
	#Buâ⁄4
 4

	)

242 
	#Buâ⁄5
 5

	)

246 
	#NŸifyN‹mÆ
 0

	)

247 
	#NŸifyGøb
 1

	)

248 
	#NŸifyUngøb
 2

	)

249 
	#NŸifyWhûeGøbbed
 3

	)

251 
	#NŸifyHöt
 1

	)

255 
	#NŸifyAn˚°‹
 0

	)

256 
	#NŸifyVútuÆ
 1

	)

257 
	#NŸifyIn„ri‹
 2

	)

258 
	#NŸifyN⁄löór
 3

	)

259 
	#NŸifyN⁄löórVútuÆ
 4

	)

260 
	#NŸifyPoöãr
 5

	)

261 
	#NŸifyPoöãrRoŸ
 6

	)

262 
	#NŸifyDëaûN⁄e
 7

	)

266 
	#VisibûôyUnobscuªd
 0

	)

267 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

268 
	#VisibûôyFuŒyObscuªd
 2

	)

272 
	#Pœ˚OnT›
 0

	)

273 
	#Pœ˚OnBŸtom
 1

	)

277 
	#FamûyI¡î√t
 0

	)

278 
	#FamûyDEC√t
 1

	)

279 
	#FamûyChaos
 2

	)

283 
	#Pr›îtyNewVÆue
 0

	)

284 
	#Pr›îtyDñëe
 1

	)

288 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

289 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

293 
	#GøbModeSync
 0

	)

294 
	#GøbModeAsync
 1

	)

298 
	#GøbSuc˚ss
 0

	)

299 
	#AÃódyGøbbed
 1

	)

300 
	#GøbInvÆidTime
 2

	)

301 
	#GøbNŸVõwabÀ
 3

	)

302 
	#GøbFrozí
 4

	)

306 
	#AsyncPoöãr
 0

	)

307 
	#SyncPoöãr
 1

	)

308 
	#RïœyPoöãr
 2

	)

309 
	#AsyncKeybﬂrd
 3

	)

310 
	#SyncKeybﬂrd
 4

	)

311 
	#RïœyKeybﬂrd
 5

	)

312 
	#AsyncBŸh
 6

	)

313 
	#SyncBŸh
 7

	)

317 
	#RevîtToN⁄e
 ()
N⁄e


	)

318 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

319 
	#RevîtToP¨ít
 2

	)

325 
	#Suc˚ss
 0

	)

326 
	#BadReque°
 1

	)

327 
	#BadVÆue
 2

	)

328 
	#BadWödow
 3

	)

329 
	#BadPixm≠
 4

	)

330 
	#BadAtom
 5

	)

331 
	#BadCurs‹
 6

	)

332 
	#BadF⁄t
 7

	)

333 
	#BadM©ch
 8

	)

334 
	#BadDøwabÀ
 9

	)

335 
	#BadAc˚ss
 10

	)

344 
	#BadAŒoc
 11

	)

345 
	#BadCﬁ‹
 12

	)

346 
	#BadGC
 13

	)

347 
	#BadIDChoi˚
 14

	)

348 
	#BadName
 15

	)

349 
	#BadLígth
 16

	)

350 
	#BadIm∂emíèti⁄
 17

	)

352 
	#Fú°Exãnsi⁄Eº‹
 128

	)

353 
	#La°Exãnsi⁄Eº‹
 255

	)

362 
	#I≈utOuçut
 1

	)

363 
	#I≈utO∆y
 2

	)

367 
	#CWBackPixm≠
 (1L<<0)

	)

368 
	#CWBackPixñ
 (1L<<1)

	)

369 
	#CWB‹dîPixm≠
 (1L<<2)

	)

370 
	#CWB‹dîPixñ
 (1L<<3)

	)

371 
	#CWBôGøvôy
 (1L<<4)

	)

372 
	#CWWöGøvôy
 (1L<<5)

	)

373 
	#CWBackögSt‹e
 (1L<<6)

	)

374 
	#CWBackögPœ√s
 (1L<<7)

	)

375 
	#CWBackögPixñ
 (1L<<8)

	)

376 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

377 
	#CWSaveUndî
 (1L<<10)

	)

378 
	#CWEvítMask
 (1L<<11)

	)

379 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

380 
	#CWCﬁ‹m≠
 (1L<<13)

	)

381 
	#CWCurs‹
 (1L<<14)

	)

385 
	#CWX
 (1<<0)

	)

386 
	#CWY
 (1<<1)

	)

387 
	#CWWidth
 (1<<2)

	)

388 
	#CWHeight
 (1<<3)

	)

389 
	#CWB‹dîWidth
 (1<<4)

	)

390 
	#CWSiblög
 (1<<5)

	)

391 
	#CWSèckMode
 (1<<6)

	)

396 
	#F‹gëGøvôy
 0

	)

397 
	#N‹thWe°Gøvôy
 1

	)

398 
	#N‹thGøvôy
 2

	)

399 
	#N‹thEa°Gøvôy
 3

	)

400 
	#We°Gøvôy
 4

	)

401 
	#CíãrGøvôy
 5

	)

402 
	#Ea°Gøvôy
 6

	)

403 
	#SouthWe°Gøvôy
 7

	)

404 
	#SouthGøvôy
 8

	)

405 
	#SouthEa°Gøvôy
 9

	)

406 
	#SèticGøvôy
 10

	)

410 
	#Unm≠Gøvôy
 0

	)

414 
	#NŸU£ful
 0

	)

415 
	#WhíM≠≥d
 1

	)

416 
	#Always
 2

	)

420 
	#IsUnm≠≥d
 0

	)

421 
	#IsUnvõwabÀ
 1

	)

422 
	#IsVõwabÀ
 2

	)

426 
	#SëModeIn£π
 0

	)

427 
	#SëModeDñëe
 1

	)

431 
	#De°royAŒ
 0

	)

432 
	#RëaöPîm™ít
 1

	)

433 
	#RëaöTemp‹¨y
 2

	)

437 
	#Above
 0

	)

438 
	#Bñow
 1

	)

439 
	#T›If
 2

	)

440 
	#BŸtomIf
 3

	)

441 
	#Oµosôe
 4

	)

445 
	#Rai£Lowe°
 0

	)

446 
	#LowîHighe°
 1

	)

450 
	#Pr›ModeRïœ˚
 0

	)

451 
	#Pr›ModePª≥nd
 1

	)

452 
	#Pr›ModeAµíd
 2

	)

460 
	#GX˛ór
 0x0

	)

461 
	#GX™d
 0x1

	)

462 
	#GX™dRevî£
 0x2

	)

463 
	#GXc›y
 0x3

	)

464 
	#GX™dInvîãd
 0x4

	)

465 
	#GXno›
 0x5

	)

466 
	#GXx‹
 0x6

	)

467 
	#GX‹
 0x7

	)

468 
	#GXn‹
 0x8

	)

469 
	#GXequiv
 0x9

	)

470 
	#GXövît
 0x®

	)

471 
	#GX‹Revî£
 0xb

	)

472 
	#GXc›yInvîãd
 0x¯

	)

473 
	#GX‹Invîãd
 0xd

	)

474 
	#GX«nd
 0xê

	)

475 
	#GX£t
 0x‡

	)

479 
	#LöeSﬁid
 0

	)

480 
	#LöeOnOffDash
 1

	)

481 
	#LöeDoubÀDash
 2

	)

485 
	#C≠NŸLa°
 0

	)

486 
	#C≠Buâ
 1

	)

487 
	#C≠Round
 2

	)

488 
	#C≠Proje˘ög
 3

	)

492 
	#JoöMôî
 0

	)

493 
	#JoöRound
 1

	)

494 
	#JoöBevñ
 2

	)

498 
	#FûlSﬁid
 0

	)

499 
	#FûlTûed
 1

	)

500 
	#FûlStù∂ed
 2

	)

501 
	#FûlO∑queStù∂ed
 3

	)

505 
	#EvíOddRuÀ
 0

	)

506 
	#WödögRuÀ
 1

	)

510 
	#ClùByChûdªn
 0

	)

511 
	#In˛udeIn„ri‹s
 1

	)

515 
	#Uns‹ãd
 0

	)

516 
	#YS‹ãd
 1

	)

517 
	#YXS‹ãd
 2

	)

518 
	#YXB™ded
 3

	)

522 
	#Co‹dModeOrigö
 0

	)

523 
	#Co‹dModePªvious
 1

	)

527 
	#Com∂ex
 0

	)

528 
	#N⁄c⁄vex
 1

	)

529 
	#C⁄vex
 2

	)

533 
	#ArcCh‹d
 0

	)

534 
	#ArcPõSli˚
 1

	)

539 
	#GCFun˘i⁄
 (1L<<0)

	)

540 
	#GCPœ√Mask
 (1L<<1)

	)

541 
	#GCF‹eground
 (1L<<2)

	)

542 
	#GCBackground
 (1L<<3)

	)

543 
	#GCLöeWidth
 (1L<<4)

	)

544 
	#GCLöeStyÀ
 (1L<<5)

	)

545 
	#GCC≠StyÀ
 (1L<<6)

	)

546 
	#GCJoöStyÀ
 (1L<<7)

	)

547 
	#GCFûlStyÀ
 (1L<<8)

	)

548 
	#GCFûlRuÀ
 (1L<<9)

	)

549 
	#GCTûe
 (1L<<10)

	)

550 
	#GCStù∂e
 (1L<<11)

	)

551 
	#GCTûeStùXOrigö
 (1L<<12)

	)

552 
	#GCTûeStùYOrigö
 (1L<<13)

	)

553 
	#GCF⁄t
 (1L<<14)

	)

554 
	#GCSubwödowMode
 (1L<<15)

	)

555 
	#GCGøphicsExposuªs
 (1L<<16)

	)

556 
	#GCClùXOrigö
 (1L<<17)

	)

557 
	#GCClùYOrigö
 (1L<<18)

	)

558 
	#GCClùMask
 (1L<<19)

	)

559 
	#GCDashOff£t
 (1L<<20)

	)

560 
	#GCDashLi°
 (1L<<21)

	)

561 
	#GCArcMode
 (1L<<22)

	)

563 
	#GCLa°Bô
 22

	)

570 
	#F⁄tLe·ToRight
 0

	)

571 
	#F⁄tRightToLe·
 1

	)

573 
	#F⁄tCh™ge
 255

	)

581 
	#XYBôm≠
 0

	)

582 
	#XYPixm≠
 1

	)

583 
	#ZPixm≠
 2

	)

591 
	#AŒocN⁄e
 0

	)

592 
	#AŒocAŒ
 1

	)

597 
	#DoRed
 (1<<0)

	)

598 
	#DoGªí
 (1<<1)

	)

599 
	#DoBlue
 (1<<2)

	)

607 
	#Curs‹Sh≠e
 0

	)

608 
	#TûeSh≠e
 1

	)

609 
	#Stù∂eSh≠e
 2

	)

615 
	#AutoRïótModeOff
 0

	)

616 
	#AutoRïótModeOn
 1

	)

617 
	#AutoRïótModeDeÁu…
 2

	)

619 
	#LedModeOff
 0

	)

620 
	#LedModeOn
 1

	)

624 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

625 
	#KBBñlPî˚¡
 (1L<<1)

	)

626 
	#KBBñlPôch
 (1L<<2)

	)

627 
	#KBBñlDuøti⁄
 (1L<<3)

	)

628 
	#KBLed
 (1L<<4)

	)

629 
	#KBLedMode
 (1L<<5)

	)

630 
	#KBKey
 (1L<<6)

	)

631 
	#KBAutoRïótMode
 (1L<<7)

	)

633 
	#M≠pögSuc˚ss
 0

	)

634 
	#M≠pögBusy
 1

	)

635 
	#M≠pögFaûed
 2

	)

637 
	#M≠pögModifõr
 0

	)

638 
	#M≠pögKeybﬂrd
 1

	)

639 
	#M≠pögPoöãr
 2

	)

645 
	#D⁄tPª„rBœnkög
 0

	)

646 
	#Pª„rBœnkög
 1

	)

647 
	#DeÁu…Bœnkög
 2

	)

649 
	#DißbÀS¸ìnSavî
 0

	)

650 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

652 
	#D⁄tAŒowExposuªs
 0

	)

653 
	#AŒowExposuªs
 1

	)

654 
	#DeÁu…Exposuªs
 2

	)

658 
	#S¸ìnSavîRe£t
 0

	)

659 
	#S¸ìnSavîA˘ive
 1

	)

667 
	#Ho°In£π
 0

	)

668 
	#Ho°Dñëe
 1

	)

672 
	#E«bÀAc˚ss
 1

	)

673 
	#DißbÀAc˚ss
 0

	)

679 
	#SèticGøy
 0

	)

680 
	#GøySˇÀ
 1

	)

681 
	#SèticCﬁ‹
 2

	)

682 
	#P£udoCﬁ‹
 3

	)

683 
	#TrueCﬁ‹
 4

	)

684 
	#Dúe˘Cﬁ‹
 5

	)

689 
	#LSBFú°
 0

	)

690 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xfuncproto.h

30 #i‚de‡
_XFUNCPROTO_H_


31 
	#_XFUNCPROTO_H_


	)

33 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


34 #i‡
deföed
(
FUNCPROTO
Ë|| deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

35 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

37 
	#NìdFun˘i⁄PrŸŸy≥s
 0

	)

41 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


42 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
Ë|| (
FUNCPROTO
&2)

43 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

45 
	#NìdV¨¨gsPrŸŸy≥s
 0

	)

49 #i‡
NìdFun˘i⁄PrŸŸy≥s


51 #i‚de‡
NìdNe°edPrŸŸy≥s


52 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
Ë|| (
FUNCPROTO
&8)

53 
	#NìdNe°edPrŸŸy≥s
 1

	)

55 
	#NìdNe°edPrŸŸy≥s
 0

	)

59 #i‚de‡
_Xc⁄°


60 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
Ë|| (
FUNCPROTO
&4)

61 
	#_Xc⁄°
 c⁄°

	)

63 
	#_Xc⁄°


	)

67 #i‚de‡
NìdWidePrŸŸy≥s


68 #ifde‡
NARROWPROTO


69 
	#NìdWidePrŸŸy≥s
 0

	)

71 
	#NìdWidePrŸŸy≥s
 1

	)

77 #i‚de‡
_XFUNCPROTOBEGIN


78 #ifde‡
__˝lu•lus


79 
	#_XFUNCPROTOBEGIN
 "C" {

	)

80 
	#_XFUNCPROTOEND
 }

	)

82 
	#_XFUNCPROTOBEGIN


	)

83 
	#_XFUNCPROTOEND


	)

	@/usr/include/X11/Xosdefs.h

29 #i‚de‡
_XOSDEFS_H_


30 
	#_XOSDEFS_H_


	)

41 #ifde‡
NOSTDHDRS


42 
	#X_NOT_POSIX


	)

43 
	#X_NOT_STDC_ENV


	)

46 #ifde‡
s⁄y


47 #i‡!
deföed
(
SYSTYPE_SYSV
Ë&& !deföed(
_SYSTYPE_SYSV
)

48 
	#X_NOT_POSIX


	)

52 #ifde‡
UTEK


53 
	#X_NOT_POSIX


	)

54 
	#X_NOT_STDC_ENV


	)

57 #ifde‡
vax


58 #i‚de‡
u…rix


59 
	#X_NOT_POSIX


	)

60 
	#X_NOT_STDC_ENV


	)

64 #ifde‡
lu«


65 
	#X_NOT_POSIX


	)

66 
	#X_NOT_STDC_ENV


	)

69 #ifde‡
Mùs


70 
	#X_NOT_POSIX


	)

71 
	#X_NOT_STDC_ENV


	)

74 #ifde‡
USL


75 #ifde‡
SYSV


76 
	#X_NOT_POSIX


	)

77 
	#X_NOT_STDC_ENV


	)

81 #ifde‡
i386


82 #ifde‡
SYSV


83 #i‡!
deföed
(
Lynx
Ë&& !deföed(
ISC
Ë&& !deföed(
SCO
Ë&& !deföed(
_SEQUENT_
)

84 #i‡!
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_SCO_DS
)

85 
	#X_NOT_POSIX


	)

87 
	#X_NOT_STDC_ENV


	)

92 #ifde‡
MOTOROLA


93 #ifde‡
SYSV


94 
	#X_NOT_STDC_ENV


	)

98 #ifde‡
sun


99 #ifde‡
SVR4


101 
	#X_POSIX_C_SOURCE
 199300L

	)

105 #ifde‡
WIN32


106 #i‚de‡
_POSIX_


107 
	#X_NOT_POSIX


	)

111 #i‡
deföed
(
√c_ews_svr2
Ë|| deföed(
SX
Ë|| deföed(
PC_UX
)

112 
	#X_NOT_POSIX


	)

113 
	#X_NOT_STDC_ENV


	)

	@/usr/include/X11/Xw32defs.h

3 #i‚de‡
_XW32DEFS_H


4 
	#_XW32DEFS_H


	)

6 *
	tˇddr_t
;

8 
	#ac˚ss
 
_ac˚ss


	)

9 
	#Æloˇ
 
_Æloˇ


	)

10 
	#chdú
 
_chdú


	)

11 
	#chmod
 
_chmod


	)

12 
	#˛o£
 
_˛o£


	)

13 
	#¸ót
 
_¸ót


	)

14 
	#dup
 
_dup


	)

15 
	#dup2
 
_dup2


	)

16 
	#ívú⁄
 
_ívú⁄


	)

17 
	#exe˛
 
_exe˛


	)

18 
	#exe˛e
 
_exe˛e


	)

19 
	#exe˛p
 
_exe˛p


	)

20 
	#exe˛≥
 
_exe˛≥


	)

21 
	#execv
 
_execv


	)

22 
	#execve
 
_execve


	)

23 
	#execvp
 
_execvp


	)

24 
	#execv≥
 
_execv≥


	)

25 
	#fd›í
 
_fd›í


	)

26 
	#fûío
 
_fûío


	)

27 
	#f°©
 
_f°©


	)

28 
	#gëcwd
 
_gëcwd


	)

29 
	#gëpid
 
_gëpid


	)

30 
	#hypŸ
 
_hypŸ


	)

31 
	#ißscii
 
__ißscii


	)

32 
	#ißây
 
_ißây


	)

33 
	#l£ek
 
_l£ek


	)

34 
	#mkdú
 
_mkdú


	)

35 
	#mkãmp
 
_mkãmp


	)

36 
	#›í
 
_›í


	)

37 
	#puãnv
 
_puãnv


	)

38 
	#ªad
 
_ªad


	)

39 
	#rmdú
 
_rmdú


	)

40 
	#¶ìp
(
x
Ë
	`_¶ìp
((xË* 1000)

	)

41 
	#°©
 
_°©


	)

42 
	#sys_îæi°
 
_sys_îæi°


	)

43 
	#sys_√º
 
_sys_√º


	)

44 
	#umask
 
_umask


	)

45 
	#u∆ök
 
_u∆ök


	)

46 
	#wrôe
 
_wrôe


	)

47 
	#øndom
 
ønd


	)

48 
	#§™dom
 
§™d


	)

50 
	#O_RDONLY
 
_O_RDONLY


	)

51 
	#O_WRONLY
 
_O_WRONLY


	)

52 
	#O_RDWR
 
_O_RDWR


	)

53 
	#O_APPEND
 
_O_APPEND


	)

54 
	#O_CREAT
 
_O_CREAT


	)

55 
	#O_TRUNC
 
_O_TRUNC


	)

56 
	#O_EXCL
 
_O_EXCL


	)

57 
	#O_TEXT
 
_O_TEXT


	)

58 
	#O_BINARY
 
_O_BINARY


	)

59 
	#O_RAW
 
_O_BINARY


	)

61 
	#S_IFMT
 
_S_IFMT


	)

62 
	#S_IFDIR
 
_S_IFDIR


	)

63 
	#S_IFCHR
 
_S_IFCHR


	)

64 
	#S_IFREG
 
_S_IFREG


	)

65 
	#S_IREAD
 
_S_IREAD


	)

66 
	#S_IWRITE
 
_S_IWRITE


	)

67 
	#S_IEXEC
 
_S_IEXEC


	)

69 
	#F_OK
 0

	)

70 
	#X_OK
 1

	)

71 
	#W_OK
 2

	)

72 
	#R_OK
 4

	)

	@/usr/include/getopt.h

1 #i‚de‡
__GETOPT_H__


2 
	#__GETOPT_H__


	)

24 
	~<°™d¨ds.h
>

25 
	~<öã∫Æ/sgima¸os.h
>

27 
__SGI_LIBC_BEGIN_EXTERN_C


29 
gë›t
(, *const *, const *);

31 *
›èrg
;

32 
›ãº
;

33 
›töd
;

34 
›t›t
;

41 #i‚de‡
_PIC


42 #i‡
_MIPS_SIM
 !=
_ABIO32


43 #i‡!
deföed
 
›èrg


44 #¥agm®
£˘i⁄_n⁄_gp
 (
›èrg
)

45 #¥agm®
£˘i⁄_n⁄_gp
 (
›ãº
)

46 #¥agm®
£˘i⁄_n⁄_gp
 (
›töd
)

47 #¥agm®
£˘i⁄_n⁄_gp
 (
›t›t
)

49 #¥agm®
£˘i⁄_n⁄_gp
 (
_›èrg
)

50 #¥agm®
£˘i⁄_n⁄_gp
 (
_›ãº
)

51 #¥agm®
£˘i⁄_n⁄_gp
 (
_›töd
)

52 #¥agm®
£˘i⁄_n⁄_gp
 (
_›t›t
)

58 #i‡
_SGIAPI


59 
	#GETOPTDONE
 (-1)

	)

65 
	#GETOPTHUH
 '?'

	)

67 
gësub›t
(**, *const *, **);

68 
gë›åe£t
();

71 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/internal/ctype_core.h

1 #i‚de‡
__CTYPE_CORE_H__


2 
	#__CTYPE_CORE_H__


	)

33 
	~<öã∫Æ/sgima¸os.h
>

34 
	~<°™d¨ds.h
>

36 
	#_U
 0x00000001

	)

37 
	#_L
 0x00000002

	)

38 
	#_N
 0x00000004

	)

39 
	#_S
 0x00000008

	)

40 
	#_P
 0x00000010

	)

41 
	#_C
 0x00000020

	)

42 
	#_B
 0x00000040

	)

43 
	#_X
 0x00000080

	)

45 
	#_A
 0x00004000

	)

46 
	#_PR
 0x00008000

	)

47 
	#_G
 0x40000000

	)

48 
	#_BL
 0x80000000

	)

50 
	#_ISÆpha
 (
_U
 | 
_L
 | 
_A
)

	)

51 
	#_ISuµî
 (
_U
)

	)

52 
	#_ISlowî
 (
_L
)

	)

53 
	#_ISdigô
 (
_N
)

	)

54 
	#_ISxdigô
 (
_X
)

	)

55 
	#_ISÆnum
 (
_U
 | 
_L
 | 
_A
 | 
_N
)

	)

56 
	#_IS•a˚
 (
_S
 | 
_BL
)

	)

57 
	#_ISbœnk
 (
_BL
)

	)

58 
	#_ISpun˘
 (
_P
)

	)

59 
	#_IS¥öt
 (
_P
 | 
_U
 | 
_L
 | 
_N
 | 
_A
 | 
_X
 | 
_PR
)

	)

60 
	#_ISgøph
 (
_P
 | 
_U
 | 
_L
 | 
_N
 | 
_A
 | 
_X
 | 
_G
)

	)

61 
	#_IS˙ål
 (
_C
)

	)

63 
__SGI_LIBC_BEGIN_EXTERN_C


65 
__SGI_LIBC_BEGIN_NAMESPACE_STD


66 
iß um
();

67 
ißÕha
();

68 
	g__SGI_LIBC_END_NAMESPACE_STD


69 #i‡
deföed
(
__c99
Ë|| deföed(
_SGI_COMPILING_LIBC
)

70 
isbœnk
();

71 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

72 #¥agm®
›ti⁄Æ
 
isbœnk


75 
__isbœnk
();

76 
__SGI_LIBC_BEGIN_NAMESPACE_STD


77 
is˙ål
();

78 
isdigô
();

79 
isgøph
();

80 
i¶owî
();

81 
i•röt
();

82 
i•un˘
();

83 
is•a˚
();

84 
isuµî
();

85 
isxdigô
();

86 
tﬁowî
();

87 
touµî
();

88 
__SGI_LIBC_END_NAMESPACE_STD


91 
ißscii
();

92 
tﬂscii
();

93 #i‡(
_XOPEN4
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


94 
_tﬁowî
();

95 
_touµî
();

98 
	g__SGI_LIBC_END_EXTERN_C


100 #i‚de‡
_KERNEL


102 
	~<öã∫Æ/loˇÀ_©å_c‹e.h
>

104 #i‚de‡
_LINT


106 
	#iß um
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISÆnum
)

	)

107 
	#ißÕha
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISÆpha
)

	)

108 #i‡
deföed
(
__c99
Ë|| deföed(
_SGI_COMPILING_LIBC
)

109 
	#isbœnk
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISbœnk
)

	)

111 
	#__isbœnk
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISbœnk
)

	)

112 
	#is˙ål
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_IS˙ål
)

	)

113 
	#isdigô
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISdigô
)

	)

114 
	#isgøph
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISgøph
)

	)

115 
	#i¶owî
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISlowî
)

	)

116 
	#i•röt
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_IS¥öt
)

	)

117 
	#i•un˘
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISpun˘
)

	)

118 
	#is•a˚
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_IS•a˚
)

	)

119 
	#isuµî
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISuµî
)

	)

120 
	#isxdigô
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_˛ass
+1)[c] & 
_ISxdigô
)

	)

122 
	#ißscii
(
c
Ë(!((cË& ~0177))

	)

123 
	#tﬂscii
(
c
Ë((cË& 0177)

	)

124 #i‡(
_XOPEN4
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


125 
	#_touµî
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_uµî
+1)[c])

	)

126 
	#_tﬁowî
(
c
Ë((
__libc_©å
.
_˘y≥_tbl
->
_lowî
+1)[c])

	)

133 
__˘y≥
[];

135 #i‚de‡
_LINT


137 
	#iß um
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISÆnum
)

	)

138 
	#ißÕha
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISÆpha
)

	)

139 #i‡
deföed
(
__c99
Ë|| deföed(
_SGI_COMPILING_LIBC
)

140 
	#isbœnk
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISbœnk
)

	)

142 
	#__isbœnk
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISbœnk
)

	)

143 
	#is˙ål
(
c
Ë((
__˘y≥
 +1)[c] & 
_IS˙ål
)

	)

144 
	#isdigô
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISdigô
)

	)

145 
	#isgøph
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISgøph
)

	)

146 
	#i¶owî
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISlowî
)

	)

147 
	#i•röt
(
c
Ë((
__˘y≥
 +1)[c] & (
_IS¥öt
 | 
_B
))

	)

148 
	#i•un˘
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISpun˘
)

	)

149 
	#is•a˚
(
c
Ë((
__˘y≥
 +1)[c] & 
_IS•a˚
)

	)

150 
	#isuµî
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISuµî
)

	)

151 
	#isxdigô
(
c
Ë((
__˘y≥
 +1)[c] & 
_ISxdigô
)

	)

153 
	#ißscii
(
c
Ë(!((cË& ~0177))

	)

154 
	#tﬂscii
(
c
Ë((cË& 0177)

	)

155 #i‡(
_XOPEN4
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


156 
	#_touµî
(
c
Ë((
__˘y≥
 + 258)[c])

	)

157 
	#_tﬁowî
(
c
Ë((
__˘y≥
 + 258)[c])

	)

164 #ifde‡
__˝lu•lus


168 #unde‡
iß um


169 #unde‡
ißÕha


170 #i‡
deföed
(
__c99
Ë|| deföed(
_SGI_COMPILING_LIBC
)

171 #unde‡
isbœnk


173 #unde‡
__isbœnk


174 #unde‡
is˙ål


175 #unde‡
isdigô


176 #unde‡
isgøph


177 #unde‡
i¶owî


178 #unde‡
i•röt


179 #unde‡
i•un˘


180 #unde‡
is•a˚


181 #unde‡
isuµî


182 #unde‡
isxdigô


183 #unde‡
_touµî


184 #unde‡
_tﬁowî


185 #unde‡
tﬁowî


186 #unde‡
touµî


	@/usr/include/internal/errno_core.h

1 #i‚de‡
__ERRNO_CORE_H__


2 
	#__ERRNO_CORE_H__


	)

33 
	~<öã∫Æ/sgima¸os.h
>

35 
	~<sys/î∫o.h
>

37 #i‡(
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
))

38 
	g__SGI_LIBC_BEGIN_EXTERN_C


40 #i‡
_SGIAPI
 && 
_NO_ANSIMODE


41 * 
sys_îæi°
[];

42 
sys_√º
;

44 
o£º‹
();

45 
£to£º‹
();

46 
go£º‹
();

54 #i‡
deföed
(
_SGI_MP_SOURCE
Ë|| (
_POSIX_C_SOURCE
 >= 199506L) \

55 || (
	g_XOPEN_SOURCE
+0 >= 500)

56 #unde‡
î∫o


57 
	#î∫o
 (*
	`__o£º‹
())

	)

58 *
__o£º‹
();

60 
î∫o
;

61 #ifde‡
__˝lu•lus


63 
	#î∫o
 
î∫o


	)

67 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/internal/sgimacros.h

18 #i‚de‡
__SGIMACROS_H__


19 
	#__SGIMACROS_H__


	)

69 #ifde‡
__c99


70 
	#__ª°ri˘
 
ª°ri˘


	)

72 
	#__ª°ri˘


	)

75 #ifde‡
__˝lu•lus


76 
	#__SGI_LIBC_BEGIN_EXTERN_C
 "C" {

	)

77 
	#__SGI_LIBC_END_EXTERN_C
 }

	)

79 
	#__SGI_LIBC_BEGIN_EXTERN_C


	)

80 
	#__SGI_LIBC_END_EXTERN_C


	)

83 #i‡
deföed
(
__˝lu•lus
Ë&& deföed(
_LIBC_IN_NAMESPACE_STD_
)

84 
	#__SGI_LIBC_NAMESPACE
 
°d


	)

85 
	#__SGI_LIBC_NAMESPACE_QUALIFIER
 
°d
::

	)

86 
	#__SGI_LIBC_BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

87 
	#__SGI_LIBC_END_NAMESPACE_STD
 }

	)

88 
	#__SGI_LIBC_USING_FROM_STD
(
__FN
Ë
usög
 
°d
::__FN;

	)

89 
	#__SGI_LIBC_USING_FROM_GLOBAL
(
__FN
Ë
usög
 ::__FN;

	)

91 
	#__SGI_LIBC_NAMESPACE


	)

92 
	#__SGI_LIBC_NAMESPACE_QUALIFIER


	)

93 
	#__SGI_LIBC_BEGIN_NAMESPACE_STD


	)

94 
	#__SGI_LIBC_END_NAMESPACE_STD


	)

95 
	#__SGI_LIBC_USING_FROM_STD
(
__FN
)

	)

96 
	#__SGI_LIBC_USING_FROM_GLOBAL
(
__FN
)

	)

99 #i‡
deföed
(
__˝lu•lus
) && \

100 
deföed
(
_MIPS_SIM
Ë&& 
	g_MIPS_SIM
 !
_MIPS_SIM_ABI32
 && \

101 
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 720) && \

102 
deföed
(
__LIBC_OVERLOAD__
) && __LIBC_OVERLOAD__

103 
	#__SGI_LIBC_USE_STRING_OVERLOADS


	)

105 #unde‡
__SGI_LIBC_USE_STRING_OVERLOADS


	@/usr/include/internal/stdio_core.h

1 #i‚de‡
__STDIO_CORE_H__


2 
	#__STDIO_CORE_H__


	)

33 
	~<°™d¨ds.h
>

34 
	~<sgidefs.h
>

35 
	~<öã∫Æ/sgima¸os.h
>

37 
	g__SGI_LIBC_BEGIN_EXTERN_C


39 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

41 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


43 #i‡!
deföed
(
_SIZE_T
Ë&& !deföed(
_SIZE_T_
)

44 
	#_SIZE_T


	)

45 #i‡(
_MIPS_SZLONG
 == 32)

46 
	tsize_t
;

48 #i‡(
_MIPS_SZLONG
 == 64)

49 
	tsize_t
;

53 #i‡!
deföed
(
_SSIZE_T
Ë&& !deföed(
_SSIZE_T_
)

54 
	g__SGI_LIBC_END_NAMESPACE_STD


55 
	#_SSIZE_T


	)

56 #i‡(
_MIPS_SZLONG
 == 32)

57 
	tssize_t
;

59 #i‡(
_MIPS_SZLONG
 == 64)

60 
	tssize_t
;

62 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


65 #i‡
_MIPS_SIM
 =
_ABIN32


66 
__öt64_t
 
	tÂos_t
;

68 
	tÂos_t
;

71 
	g__SGI_LIBC_END_NAMESPACE_STD


73 #i‡
_NO_ANSIMODE


75 #i‚de‡
_OFF64_T


76 
	#_OFF64_T


	)

78 
__öt64_t
 
	toff64_t
;

81 #i‚de‡
_OFF_T


82 
	#_OFF_T


	)

83 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

84 
__öt64_t
 
	toff_t
;

85 #ñi‡
deföed
(
_STANDALONE
)

86 
	toff_t
;

87 #ñi‡
_MIPS_SIM
 =
_ABIN32


88 
__öt64_t
 
	toff_t
;

90 
	toff_t
;

95 #i‡(
_ABIAPI
 || 
_LFAPI
Ë&& 
_NO_ANSIMODE


96 #i‡
_MIPS_SIM
 =
_ABI64


97 
	tÂos64_t
;

100 
__öt64_t
 
	tÂos64_t
;

107 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


108 #i‚de‡
_VA_LIST_


109 
	#_VA_LIST_


	)

110 *
	tva_li°
;

112 
	g__SGI_LIBC_END_NAMESPACE_STD


114 #i‚de‡
NULL


115 
	#NULL
 0L

	)

119 
	#BUFSIZ
 4096

	)

120 #i‚de‡
_NFILE


121 
	#_NFILE
 100

	)

123 
	#_SBFSIZ
 8

	)

142 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

143 
	#_IOFBF
 0000

	)

144 
	#_IOLBF
 0100

	)

145 
	#_IONBF
 0004

	)

146 
	#_IOEOF
 0020

	)

147 
	#_IOERR
 0040

	)

149 
	#_IOREAD
 0001

	)

150 
	#_IOWRT
 0002

	)

151 
	#_IORW
 0200

	)

152 
	#_IOEXTND
 0010

	)

154 
	#_IOXMYBUF
 0001

	)

155 
	#_IOXORIENT
 0006

	)

156 
	#_IOXORNONE
 0000

	)

157 
	#_IOXORBYTE
 0002

	)

158 
	#_IOXORWIDE
 0004

	)

159 
	#_IOXORINVL
 0006

	)

161 #i‡
_MIPS_SIM
 =
_ABIO32


162 
	#_IOMYBUF
 0010

	)

167 #i‡
deföed
(
_LANGUAGE_FORTRAN
)

168 
	#_IOFBF
 '0000'
x


	)

169 
	#_IOLBF
 '0040'
x


	)

170 
	#_IONBF
 '0004'
x


	)

171 
	#_IOEOF
 '0010'
x


	)

172 
	#_IOERR
 '0020'
x


	)

173 
	#_IOREAD
 '0001'
x


	)

174 
	#_IOWRT
 '0002'
x


	)

175 
	#_IORW
 '0080'
x


	)

176 
	#_IOMYBUF
 '0008'
x


	)

179 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

181 #i‚de‡
EOF


182 
	#EOF
 (-1)

	)

185 
	#FOPEN_MAX
 
_NFILE


	)

186 
	#FILENAME_MAX
 1024

	)

188 #i‚de‡
SEEK_SET


189 
	#SEEK_SET
 0

	)

190 
	#SEEK_CUR
 1

	)

191 
	#SEEK_END
 2

	)

193 
	#TMP_MAX
 17576

	)

195 #i‡
_POSIX90
 && 
_NO_ANSIMODE


196 
	#L_˘îmid
 9

	)

197 
	#L_cu£rid
 9

	)

200 #i‡(
_XOPEN4
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


201 
	#P_tmpdú
 "/v¨/tmp/"

	)

204 
	#L_tm≤am
 25

	)

206 
	#°dö
 (&
__iob
[0])

	)

207 
	#°dout
 (&
__iob
[1])

	)

208 
	#°dîr
 (&
__iob
[2])

	)

211 #i‡(
_SGIAPI
 && 
	t_NO_ANSIMODE
Ë|| 
	tdeföed
(
	t_LANGUAGE_C_PLUS_PLUS
)

220 
	t__fûe_s


223 #i‡(
_MIPS_SZLONG
 == 32)

224 
	g_˙t
;

226 #i‡(
_MIPS_SZLONG
 == 64)

227 
	g_˙t
;

229 *
	g_±r
;

230 *
	g_ba£
;

231 #i‡
_MIPS_SIM
 =
_ABI64


232 
	g_ª£rved
;

233 
	g_xÊag
;

234 
	g_Êag
;

235 
	g_fûe
;

236 #ñi‡
_MIPS_SIM
 =
_ABIN32


237 
	g_Êag
;

238 
	g_xÊag
;

239 
	g_fûe
;

241 
	g_Êag
;

242 
	g_fûe
;

244 } 
	tFILE
;

246 
FILE
 
__iob
[
_NFILE
];

247 #i‡
_SGIAPI
 && 
_NO_ANSIMODE


248 
FILE
 *
_œ°buf
;

249 *
_bu„ndèb
[];

250 
_sibuf
[], 
_sobuf
[];

253 
__SGI_LIBC_BEGIN_NAMESPACE_STD


254 
ªmove
(const *);

255 
ª«me
(const *, const *);

256 
FILE
 *
tmpfûe
();

257 *
tm≤am
(*);

258 
f˛o£
(
FILE
 *);

259 
fÊush
(
FILE
 *);

260 
FILE
 *
f›í
(c⁄° * 
__ª°ri˘
, const * __restrict);

261 
FILE
 *
‰e›í
(c⁄° * 
__ª°ri˘
, const * __restrict, FILE * __restrict);

262 
£tbuf
(
FILE
 * 
__ª°ri˘
, * __restrict);

263 
£tvbuf
(
FILE
 * 
__ª°ri˘
, * __ª°ri˘, , 
size_t
);

265 
Ârötf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

267 
fsˇnf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

269 
¥ötf
(c⁄° * 
__ª°ri˘
, ...);

271 
sˇnf
(c⁄° * 
__ª°ri˘
, ...);

272 
	g__SGI_LIBC_END_NAMESPACE_STD


274 #i‡
deföed
(
__c99
Ë|| ((
_XOPEN5
 || 
_SGIAPI
Ë&& 
_NO_ANSIMODE
)

276 #i‡
_NO_XOPEN5


277 
v¢¥ötf
(* 
__ª°ri˘
,

278 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
,

279 c⁄° * 
__ª°ri˘
, *);

281 
_xpg5_v¢¥ötf
(* 
__ª°ri˘
,

282 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
,

283 c⁄° * 
__ª°ri˘
, *);

287 
	$v¢¥ötf
(*
_°rög
, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
 
_˙t
,

288 c⁄° *
_f‹m©
, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
va_li°
 
_≠
)

290 (
	`_xpg5_v¢¥ötf
(
_°rög
, 
_˙t
, 
_f‹m©
, 
_≠
));

291 
	}
}

292 
	#v¢¥ötf
 
_xpg5_v¢¥ötf


	)

295 #i‡
_NO_XOPEN5


297 
¢¥ötf
(* 
__ª°ri˘
,

298 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
,

299 c⁄° * 
__ª°ri˘
, ...);

302 
_xpg5_¢¥ötf
(* 
__ª°ri˘
,

303 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
,

304 c⁄° * 
__ª°ri˘
, ...);

308 
	$¢¥ötf
(*
_°rög
, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
 
_˙t
, c⁄° *
_f‹m©
, ...)

310 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
va_li°
 
_≠
;

313 
_≠
 = ((
__SGI_LIBC_NAMESPACE_QUALIFIER
 
va_li°
)&
_f‹m©
 + (_format));

315 (
	`_xpg5_v¢¥ötf
(
_°rög
, 
_˙t
, 
_f‹m©
, 
_≠
));

316 
	}
}

317 
	#¢¥ötf
 
_xpg5_¢¥ötf


	)

323 
__SGI_LIBC_BEGIN_NAMESPACE_STD


324 
•rötf
(* 
__ª°ri˘
, const * __restrict, ...);

326 
ssˇnf
(c⁄° * 
__ª°ri˘
, const * __restrict, ...);

327 
vÂrötf
(
FILE
 * 
__ª°ri˘
, const * __restrict, *);

328 
v¥ötf
(c⁄° * 
__ª°ri˘
, *);

329 
__SGI_LIBC_END_NAMESPACE_STD


331 
__SGI_LIBC_BEGIN_NAMESPACE_STD


332 
v•rötf
(* 
__ª°ri˘
, const * __restrict, *);

333 
	g__SGI_LIBC_END_NAMESPACE_STD


334 #i‡
deföed
(
__c99
)

335 
vssˇnf
(c⁄° * 
__ª°ri˘
, const * __restrict, *);

337 #i‡
deföed
(
__INLINE_INTRINSICS
Ë&& 
_NO_XOPEN4
 && 
_NO_XOPEN5


338 #i‡(
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 400))

339 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


340 #¥agm®
öåösic
 (
¥ötf
)

341 #¥agm®
öåösic
 (
Ârötf
)

342 #¥agm®
öåösic
 (
•rötf
)

343 #¥agm®
öåösic
 (
sˇnf
)

344 #¥agm®
öåösic
 (
fsˇnf
)

345 #¥agm®
öåösic
 (
ssˇnf
)

346 
	g__SGI_LIBC_END_NAMESPACE_STD


349 
__SGI_LIBC_BEGIN_NAMESPACE_STD


350 
fgëc
(
FILE
 *);

351 *
fgës
(* 
__ª°ri˘
, , 
FILE
 * __restrict);

352 
Âutc
(, 
FILE
 *);

353 
Âuts
(c⁄° * 
__ª°ri˘
, 
FILE
 * __restrict);

354 
gëc
(
FILE
 *);

355 
gëch¨
();

356 *
gës
(*);

357 
putc
(, 
FILE
 *);

358 
putch¨
();

359 
puts
(const *);

360 
ungëc
(, 
FILE
 *);

361 
size_t
 
‰ód
(* 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

362 #¥agm®
öt_to_unsig√d
 
‰ód


363 
size_t
 
fwrôe
(c⁄° * 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

364 #¥agm®
öt_to_unsig√d
 
fwrôe


365 
fgëpos
(
FILE
 * 
__ª°ri˘
, 
Âos_t
 * __restrict);

366 
f£ek
(
FILE
 *, , );

367 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

368 
·ñl
(
FILE
 *);

369 
ªwöd
(
FILE
 *);

370 
˛óªº
(
FILE
 *);

371 
„of
(
FILE
 *);

372 
„º‹
(
FILE
 *);

373 
≥º‹
(const *);

375 #i‡
deföed
(
__c99
Ë|| (
_SGIAPI
 && 
_NO_ANSIMODE
)

376 
vfsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
);

377 
vsˇnf
(c⁄° * 
__ª°ri˘
, 
va_li°
);

378 
vssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
);

379 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

380 #¥agm®
›ti⁄Æ
 
vfsˇnf


381 #¥agm®
›ti⁄Æ
 
vsˇnf


382 #¥agm®
›ti⁄Æ
 
vssˇnf


386 
__SGI_LIBC_END_NAMESPACE_STD


388 
__fûbuf
(
FILE
 *);

389 
__Êsbuf
(, 
FILE
 *);

391 #i‡
_POSIX90
 && 
_NO_ANSIMODE


393 
FILE
 *
fd›í
(, const *);

394 
fûío
(
FILE
 *);

397 #i‡
_POSIX1C
 && 
_NO_ANSIMODE


399 
Êockfûe
(
FILE
 *);

400 
·rylockfûe
(
FILE
 *);

401 
fu∆ockfûe
(
FILE
 *);

402 
gëc_u∆ocked
(
FILE
 *);

403 
putc_u∆ocked
(, 
FILE
 *);

404 
gëch¨_u∆ocked
();

405 
putch¨_u∆ocked
();

408 #i‡
_POSIX2
 && 
_NO_ANSIMODE


409 
FILE
 *
p›í
(const *, const *);

410 
p˛o£
(
FILE
 *);

412 #i‡(
_XOPEN4
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


414 
	g__SGI_LIBC_END_EXTERN_C


415 
	~<gë›t.h
>

416 
__SGI_LIBC_BEGIN_EXTERN_C


417 *
˘îmid
(*);

418 *
cu£rid
(*);

419 *
ãm≤am
(const *, const *);

420 
gëw
(
FILE
 *);

421 
putw
(, 
FILE
 *);

425 #i‡(
_SGIAPI
 || 
_ABIAPI
Ë&& 
_NO_ANSIMODE


427 *
mkãmp
(*);

428 
mk°emp
(*);

429 
£tbuf„r
(
FILE
 *, *, );

430 
£éöebuf
(
FILE
 *);

431 
__SGI_LIBC_BEGIN_NAMESPACE_STD


432 
sy°em
(const *);

433 
	g__SGI_LIBC_END_NAMESPACE_STD


436 #i‡(
_LFAPI
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


438 
off_t
 
·ñlo
(
FILE
 *);

439 
f£eko
(
FILE
 *, 
off_t
, );

442 #i‡
_LFAPI
 && 
_NO_ANSIMODE


444 
fgëpos64
(
FILE
 *, 
Âos64_t
 *);

445 
FILE
 *
f›í64
(const *, const *);

446 
FILE
 *
‰e›í64
(const *, const *, FILE *);

447 
f£ek64
(
FILE
 *, 
__öt64_t
, );

448 
f£eko64
(
FILE
 *, 
off64_t
, );

449 
f£ços64
(
FILE
 *, c⁄° 
Âos64_t
 *);

450 
__öt64_t
 
·ñl64
(
FILE
 *);

451 
off64_t
 
·ñlo64
(
FILE
 *);

452 
FILE
 *
tmpfûe64
();

455 #i‡(
_SGIAPI
 || 
deföed
(
_SGI_MP_SOURCE
Ë|| 
_POSIX1C
Ë&& 
_NO_ANSIMODE


456 
__£mputc
(, 
FILE
 *);

457 
__£mgëc
(
FILE
 *);

458 
__us_r°hªad_°dio
;

461 #i‡(
_SGIAPI
 || 
_REENTRANT_FUNCTIONS
Ë&& 
_NO_ANSIMODE


462 *
˘îmid_r
(*);

465 #i‚de‡
_LINT


467 #i‡((
_SGIAPI
 && 
_NO_ABIAPI
Ë|| 
deföed
(
_SGI_MP_SOURCE
)Ë&& 
_NO_ANSIMODE


480 
	#gëc
(
p
Ë
	`gëc_locked
’)

	)

481 
	#putc
(
x
, 
p
Ë
	`putc_locked
((x),Ö)

	)

482 
	#gëch¨
(Ë
	`gëc_locked
(
°dö
)

	)

483 
	#putch¨
(
x
Ë
	`putc_locked
((x), 
°dout
)

	)

484 #unde‡
˛óªº


486 
	#„of
(
p
Ë
	`„of_u∆ocked
’)

	)

487 
	#„º‹
(
p
Ë
	`„º‹_u∆ocked
’)

	)

488 
	#fûío
(
p
Ë
	`fûío_u∆ocked
’)

	)

491 
	#gëc_locked
(
p
Ë(
__us_r°hªad_°dio
 ? 
	`__£mgëc
(p) : \

492 (--(
p
)->
_˙t
 < 0 ? 
	`__fûbuf
’Ë: ()*’)->
_±r
++))

	)

493 
	#putc_locked
(
x
, 
p
Ë(
__us_r°hªad_°dio
 ? 
	`__£mputc
(x,p) : \

494 (--(
p
)->
_˙t
 < 0 ? 
	`__Êsbuf
((
x
), (p)) \

495 : ()(*(
p
)->
_±r
++ = ()(
x
))))

	)

496 
	#gëch¨_locked
(Ë
	`gëc_locked
(
°dö
)

	)

497 
	#putch¨_locked
(
x
Ë
	`putc_locked
((x), 
°dout
)

	)

498 
	#˛óªº_locked
(
p
Ë
	`˛óªº
’)

	)

499 
	#„of_locked
(
p
Ë
	`„of_u∆ocked
’)

	)

500 
	#„º‹_locked
(
p
Ë
	`„º‹_u∆ocked
’)

	)

501 
	#fûío_locked
(
p
Ë
	`fûío_u∆ocked
’)

	)

504 
	#gëc_u∆ocked
(
p
Ë(--’)->
_˙t
 < 0 ? 
	`__fûbuf
’Ë: ()*’)->
_±r
++)

	)

505 
	#putc_u∆ocked
(
x
, 
p
Ë(--’)->
_˙t
 < 0 ? 
	`__Êsbuf
((x), (p)) \

506 : ()(*(
p
)->
_±r
++ = ()(
x
)))

	)

507 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

508 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
((x), 
°dout
)

	)

509 
	#˛óªº_u∆ocked
(
p
Ë(()(’)->
_Êag
 &~(
_IOERR
 | 
_IOEOF
)))

	)

510 
	#„of_u∆ocked
(
p
Ë((()’)->
_Êag
Ë& 
_IOEOF
)

	)

511 
	#„º‹_u∆ocked
(
p
Ë((()’)->
_Êag
Ë& 
_IOERR
)

	)

512 
	#fûío_u∆ocked
(
p
Ë(’)->
_fûe
)

	)

514 #ñi‡
_POSIX1C
 && 
_NO_ANSIMODE


518 
	#gëc
(
p
Ë(
__us_r°hªad_°dio
 ? 
	`__£mgëc
(p) : \

519 (--(
p
)->
_˙t
 < 0 ? 
	`__fûbuf
’Ë: ()*’)->
_±r
++))

	)

520 
	#putc
(
x
, 
p
Ë(
__us_r°hªad_°dio
 ? 
	`__£mputc
(x,p) : \

521 (--(
p
)->
_˙t
 < 0 ? 
	`__Êsbuf
((
x
), (p)) \

522 : ()(*(
p
)->
_±r
++ = ()(
x
))))

	)

523 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

524 
	#putch¨
(
x
Ë
	`putc
((x), 
°dout
)

	)

527 
	#gëc_u∆ocked
(
p
Ë(--’)->
_˙t
 < 0 ? 
	`__fûbuf
’Ë: ()*’)->
_±r
++)

	)

528 
	#putc_u∆ocked
(
x
, 
p
Ë(--’)->
_˙t
 < 0 ? 
	`__Êsbuf
((x), (p)) \

529 : ()(*(
p
)->
_±r
++ = ()(
x
)))

	)

530 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

531 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
((x), 
°dout
)

	)

533 
	#˛óªº
(
p
Ë(()(’)->
_Êag
 &~(
_IOERR
 | 
_IOEOF
)))

	)

534 
	#„of
(
p
Ë((()’)->
_Êag
Ë& 
_IOEOF
)

	)

535 
	#„º‹
(
p
Ë((()’)->
_Êag
Ë& 
_IOERR
)

	)

536 
	#fûío
(
p
Ë(’)->
_fûe
)

	)

544 
	#gëc
(
p
Ë(--’)->
_˙t
 < 0 ? 
	`__fûbuf
’Ë: ()*’)->
_±r
++)

	)

545 
	#putc
(
x
, 
p
Ë(--’)->
_˙t
 < 0 ? 
	`__Êsbuf
((x), (p)) \

546 : ()(*(
p
)->
_±r
++ = ()(
x
)))

	)

547 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

548 
	#putch¨
(
x
Ë
	`putc
((x), 
°dout
)

	)

549 
	#˛óªº
(
p
Ë(()(’)->
_Êag
 &~(
_IOERR
 | 
_IOEOF
)))

	)

550 
	#„of
(
p
Ë((()’)->
_Êag
Ë& 
_IOEOF
)

	)

551 
	#„º‹
(
p
Ë((()’)->
_Êag
Ë& 
_IOERR
)

	)

553 #i‡
_POSIX90
 && 
_NO_ANSIMODE


554 
	#fûío
(
p
Ë(’)->
_fûe
)

	)

563 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/internal/stdlib_core.h

1 #i‚de‡
__STDLIB_CORE_H__


2 
	#__STDLIB_CORE_H__


	)

32 
	~<°™d¨ds.h
>

33 
	~<sgidefs.h
>

34 
	~<öã∫Æ/sgima¸os.h
>

36 #i‚def 
NULL


37 
	#NULL
 0L

	)

41 
	#EXIT_FAILURE
 1

	)

42 
	#EXIT_SUCCESS
 0

	)

45 
	#RAND_MAX
 32767

	)

47 #ifde‡
_LANGUAGE_ASSEMBLY


49 
	#_QUOT_OFFSET
 0

	)

50 
	#_REM_OFFSET
 4

	)

51 #i‡(
_MIPS_SZLONG
 == 32)

52 
	#_LQUOT_OFFSET
 0

	)

53 
	#_LREM_OFFSET
 4

	)

55 #i‡(
_MIPS_SZLONG
 == 64)

56 
	#_LQUOT_OFFSET
 0

	)

57 
	#_LREM_OFFSET
 8

	)

59 #i‡
_SGIAPI


60 
	#_LLQUOT_OFFSET
 0

	)

61 
	#_LLREM_OFFSET
 8

	)

65 #i‡(
_XOPEN4
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


71 #i‚de‡
_W_INT


72 
	#_W_INT
(
i
Ë(i)

	)

75 #i‚de‡
WUNTRACED


76 
	#WUNTRACED
 0004

	)

77 
	#WNOHANG
 0100

	)

78 
	#_WSTOPPED
 0177

	)

79 
	#WIFEXITED
(
°©
Ë((
	`_W_INT
(°©)&0377)==0)

	)

80 
	#WIFSIGNALED
(
°©
Ë((
	`_W_INT
(°©)&0377)>0&&((_W_INT(°©)>>8)&0377)==0)

	)

81 
	#WIFSTOPPED
(
°©
Ë((
	`_W_INT
(°©)&0377)==
_WSTOPPED
&&((_W_INT(°©)>>8)&0377)!=0)

	)

82 
	#WEXITSTATUS
(
°©
Ë((
	`_W_INT
(°©)>>8)&0377)

	)

83 
	#WTERMSIG
(
°©
Ë(
	`_W_INT
(°©)&0177)

	)

84 
	#WSTOPSIG
(
°©
Ë((
	`_W_INT
(°©)>>8)&0377)

	)

88 #i‡(
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
))

89 
__SGI_LIBC_BEGIN_EXTERN_C


91 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


93 #i‡!
deföed
(
_SIZE_T
Ë&& !deföed(
_SIZE_T_
)

94 
	#_SIZE_T


	)

95 #i‡(
_MIPS_SZLONG
 == 32)

96 
	tsize_t
;

98 #i‡(
_MIPS_SZLONG
 == 64)

99 
	tsize_t
;

103 #i‚de‡
_WCHAR_T


104 
	#_WCHAR_T


	)

105 #i‡(
_MIPS_SZLONG
 == 32)

106 
	twch¨_t
;

108 #i‡(
_MIPS_SZLONG
 == 64)

109 
__öt32_t
 
	twch¨_t
;

113 
__SGI_LIBC_END_NAMESPACE_STD


116 
	mquŸ
;

117 
	mªm
;

118 } 
	tdiv_t
;

121 
	mquŸ
;

122 
	mªm
;

123 } 
	tldiv_t
;

125 #i‡
deföed
(
__c99
Ë|| ((
_SGIAPI
 || 
_ABIAPI
Ë&& 
_NO_ANSIMODE
)

128 
	mquŸ
;

129 
	mªm
;

130 } 
	tŒdiv_t
;

134 #i‡
_NO_ANSIMODE


135 #i‚de‡
_SSIZE_T


136 
	#_SSIZE_T


	)

137 #i‡(
_MIPS_SZLONG
 == 32)

138 
	tssize_t
;

140 #i‡(
_MIPS_SZLONG
 == 64)

141 
	tssize_t
;

146 #i‚de‡
_KERNEL


147 
	g__SGI_LIBC_END_EXTERN_C


148 
	~<öã∫Æ/loˇÀ_©å_c‹e.h
>

149 
	g__SGI_LIBC_BEGIN_EXTERN_C


150 
	#MB_CUR_MAX
 (()(
__libc_©å
.
_csöfo
.
_mb_cur_max
))

	)

153 
__˘y≥
[];

155 
	#MB_CUR_MAX
 ()
__˘y≥
[520]

	)

159 
__SGI_LIBC_BEGIN_NAMESPACE_STD


163 
©of
(const *);

165 
©oi
(const *);

166 
©ﬁ
(const *);

167 #i‡
deföed
(
__c99
Ë|| ((
_SGIAPI
 || 
_ABIAPI
Ë&& 
_NO_ANSIMODE
)

168 
©ﬁl
(const *);

171 
°πod
(c⁄° * 
__ª°ri˘
, ** __restrict);

172 #i‡
deföed
(
__c99
)

173 
°πof
(c⁄° * 
__ª°ri˘
, ** __restrict);

174 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

175 #¥agm®
›ti⁄Æ
 
°πof


178 #i‡
deföed
(
__c99
Ë|| (
_MIPS_SIM
==
_MIPS_SIM_NABI32
 || _MIPS_SIM==
_MIPS_SIM_ABI64
)

179 
°πﬁd
(c⁄° * 
__ª°ri˘
, ** __restrict);

182 
°πﬁ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

183 #i‡
deföed
(
__c99
Ë|| ((
_SGIAPI
 || 
_ABIAPI
Ë&& 
_NO_ANSIMODE
)

184 
°πﬁl
(c⁄° * 
__ª°ri˘
, ** __restrict, );

186 
°πoul
(c⁄° * 
__ª°ri˘
, ** __restrict, );

187 #i‡
deföed
(
__c99
Ë|| ((
_SGIAPI
 || 
_ABIAPI
Ë&& 
_NO_ANSIMODE
)

188 #i‚de‡
_STANDALONE


189 
°πouŒ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

195 
ønd
();

197 
§™d
();

201 *
ˇŒoc
(
size_t
, size_t);

203 
‰ì
(*);

205 *
mÆloc
(
size_t
);

207 *
ªÆloc
(*, 
size_t
);

209 #i‡
_NO_XOPEN4
 && 
_NO_XOPEN5
 && (
deföed
(
__INLINE_INTRINSICS
) && \

210 
deföed
(
_COMPILER_VERSION
Ë&& (
	g_COMPILER_VERSION
 >= 710))

211 #¥agm®
öåösic
 (
ˇŒoc
)

212 #¥agm®
öåösic
 (
‰ì
)

213 #¥agm®
öåösic
 (
mÆloc
)

214 #¥agm®
öåösic
 (
ªÆloc
)

219 
ab‹t
();

221 
©exô
((*)());

223 
	`exô
();

224 #i‡
_NO_XOPEN4
 && 
_NO_XOPEN5
 && (
	`deföed
(
__INLINE_INTRINSICS
) && \

225 
	`deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 710))

226 #¥agm®
	`öåösic
 (
exô
)

229 #i‡
	`deföed
(
__c99
)

230 
	`_Exô
();

233 *
	`gëív
(const *);

235 
	`sy°em
(const *);

239 *
	`b£¨ch
(c⁄° *, c⁄° *, 
size_t
, size_t,

242 
	`qs‹t
(*, 
size_t
, size_t,

247 #ifde‡
__˝lu•lus


248 #i‚de‡
_ABS_


249 
	#_ABS_


	)

250 
ölöe
 
	$abs
(
x
Ë{ x > 0 ? x : -x;
	}
}

253 
abs
();

255 
œbs
();

256 #i‡
deföed
(
__c99
Ë|| ((
_SGIAPI
 || 
_ABIAPI
Ë&& 
_NO_ANSIMODE
)

257 
Œabs
();

259 #i‡
_NO_XOPEN4
 && 
_NO_XOPEN5
 && (
deföed
(
__INLINE_INTRINSICS
) && \

260 
deföed
(
_COMPILER_VERSION
Ë&& (
	g_COMPILER_VERSION
 >= 710))

261 #i‚de‡
__˝lu•lus


262 #¥agm®
öåösic
 (
abs
)

264 #¥agm®
öåösic
 (
œbs
)

265 #i‡
deföed
(
__c99
Ë|| ((
_SGIAPI
 || 
_ABIAPI
Ë&& 
_NO_ANSIMODE
)

266 #¥agm®
öåösic
 (
Œabs
)

270 
div_t
 
div
(, );

271 
ldiv_t
 
ldiv
(, );

272 #i‡
deföed
(
__c99
Ë|| ((
_SGIAPI
 || 
_ABIAPI
Ë&& 
_NO_ANSIMODE
)

273 
Œdiv_t
 
Œdiv
(, );

278 
mbÀn
(c⁄° *, 
size_t
);

280 
mbtowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

282 
w˘omb
(*, 
wch¨_t
);

286 
size_t
 
mb°owcs
(
wch¨_t
 * 
__ª°ri˘
, const * __restrict, size_t);

288 
size_t
 
wc°ombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t);

290 
	g__SGI_LIBC_END_NAMESPACE_STD


292 #i‡(
_XOPEN4
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


294 #i‡(
deföed
(
_XOPEN_SOURCE
) && (_XOPEN_SOURCE+0 >= 500))

295 
puãnv
(*);

297 
puãnv
(const *);

299 
dønd48
();

300 
î™d48
([3]);

301 
Ã™d48
();

302 
ƒ™d48
([3]);

303 
mønd48
();

304 
jønd48
([3]);

305 
§™d48
();

306 
lc⁄g48
([7]);

307 
£tkey
(const *);

308 * 
£ed48
([3]);

311 #i‡(
_XOPEN4UX
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


313 
a64l
(const *);

314 *
ecvt
(, , *, *);

315 *
fcvt
(, , *, *);

316 *
gcvt
(, , *);

317 
gësub›t
(**, * const *, **);

318 
gø¡±
();

319 *
öô°©e
(, *, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
);

320 *
l64a
();

321 *
mkãmp
(*);

322 
mk°emp
(*);

323 *
±¢ame
();

324 
øndom
();

325 *
ªÆ∑th
(const *, *);

326 *
£t°©e
(const *);

327 
§™dom
();

328 
ây¶Ÿ
();

329 
u∆ock±
();

330 *
vÆloc
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
);

331 #i‡
_NO_XOPEN4
 && 
_NO_XOPEN5
 && (
deföed
(
__INLINE_INTRINSICS
) && \

332 
deföed
(
_COMPILER_VERSION
Ë&& (
	g_COMPILER_VERSION
 >= 710))

333 #¥agm®
öåösic
 (
vÆloc
)

337 #i‡
_POSIX1C
 && 
_NO_ANSIMODE


338 
ønd_r
(*);

341 #i‡
_SGIAPI
 && 
_NO_ANSIMODE


343 
	g__SGI_LIBC_END_EXTERN_C


344 
	~<gë›t.h
>

345 
__SGI_LIBC_BEGIN_EXTERN_C


346 
©checkpoöt
((*)());

347 
	`©ª°¨t
((*)());

348 
	`dup2
(, );

349 
	`gëpw
(, *);

350 *
	`gëcwd
(*, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
);

351 *
	`gëlogö
();

352 *
	`gë∑ss
(const *);

353 
	`ißây
();

354 
	`l3tﬁ
(*, const *, );

355 
	`…ﬁ3
(*, const *, );

356 *
	`memÆign
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
, __SGI_LIBC_NAMESPACE_QUALIFIER size_t);

357 #i‡
_NO_XOPEN4
 && 
_NO_XOPEN5
 && (
	`deföed
(
__INLINE_INTRINSICS
) && \

358 
	`deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 710))

359 #¥agm®
	`öåösic
 (
memÆign
)

360 
	`swab
(c⁄° *, *, 
ssize_t
);

361 *
	`ây«me
();

365 #i‡
_COMPILER_VERSION
 >= 400

366 
	`©ﬁd
(const *);

367 *
	`qecvt
(, , *, *);

368 *
	`qfcvt
(, , *, *);

369 *
	`qgcvt
(, , *);

370 *
	`ecvé
(, , *, *);

371 *
	`fcvé
(, , *, *);

372 *
	`gcvé
(, , *);

376 #i‡
_ABIAPI
 && 
_NO_ANSIMODE


377 
__SGI_LIBC_END_EXTERN_C


378 
	~<öây≥s.h
>

379 
__SGI_LIBC_BEGIN_EXTERN_C


382 #i‡(
_SGIAPI
 || 
_REENTRANT_FUNCTIONS
Ë&& 
_NO_ANSIMODE


383 *
	`ecvt_r
(, , *, *, *);

384 *
	`fcvt_r
(, , *, *, *);

385 #i‡
_COMPILER_VERSION
 >= 400

386 *
	`qecvt_r
(, , *, *, *);

387 *
	`qfcvt_r
(, , *, *, *);

388 *
	`ecvé_r
(, , *, *, *);

389 *
	`fcvé_r
(, , *, *, *);

393 
__SGI_LIBC_END_EXTERN_C


396 #i‡
	`deföed
(
__˝lu•lus
) && \

397 
	`deföed
(
_MIPS_SIM
Ë&& _MIPS_SIM !
_MIPS_SIM_ABI32
 && \

398 
	`deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 720) && \

399 
	`deföed
(
__LIBC_OVERLOAD__
) && __LIBC_OVERLOAD__

401 
__SGI_LIBC_BEGIN_NAMESPACE_STD


402 #i‚de‡
__sgi_˝p_abs_l⁄g_deföed


403 
	#__sgi_˝p_abs_l⁄g_deföed


	)

404 
ölöe
 
	$abs
(
x
Ë{ x > 0 ? x : -x;
	}
}

405 #ifde‡
_LONGLONG


406 
ölöe
 
	$abs
(
x
Ë{ x > 0 ? x : -x;
	}
}

410 
ölöe
 
ldiv_t
 
	$div
(
x
, 
y
Ë{  
	`ldiv
(x,y); 
	}
}

411 
	g__SGI_LIBC_END_NAMESPACE_STD


	@/usr/include/internal/string_core.h

1 #i‚de‡
__STRING_CORE_H__


2 
	#__STRING_CORE_H__


	)

35 
	~<°™d¨ds.h
>

36 
	~<öã∫Æ/sgima¸os.h
>

38 
__SGI_LIBC_BEGIN_EXTERN_C


39 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


41 #i‡!
deföed
(
_SIZE_T
Ë&& !deföed(
_SIZE_T_
)

42 
	#_SIZE_T


	)

43 #i‡(
_MIPS_SZLONG
 == 32)

44 
	tsize_t
;

46 #i‡(
_MIPS_SZLONG
 == 64)

47 
	tsize_t
;

51 #i‚de‡
NULL


52 
	#NULL
 0L

	)

61 *
mem˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

62 *
memmove
(*, c⁄° *, 
size_t
);

63 *
°r˝y
(* 
__ª°ri˘
, const * __restrict);

64 *
°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

68 *
°rˇt
(* 
__ª°ri˘
, const * __restrict);

69 *
°∫ˇt
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

73 *
memc˝y
(*, c⁄° *, , 
size_t
);

74 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

75 
°rcmp
(const *, const *);

76 
°rcﬁl
(const *, const *);

77 
°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

78 
size_t
 
°rx‰m
(* 
__ª°ri˘
, const * __restrict, size_t);

82 #i‚de‡
__SGI_LIBC_USE_STRING_OVERLOADS


83 *
memchr
(c⁄° *, , 
size_t
);

84 *
°rchr
(const *, );

86 
size_t
 
°rc•n
(const *, const *);

87 #¥agm®
öt_to_unsig√d
 
°rc•n


88 #i‚de‡
__SGI_LIBC_USE_STRING_OVERLOADS


89 *
°Ωbrk
(const *, const *);

90 *
°ºchr
(const *, );

92 
size_t
 
°r•n
(const *, const *);

93 #¥agm®
öt_to_unsig√d
 
°r•n


94 #i‚de‡
__SGI_LIBC_USE_STRING_OVERLOADS


95 *
°r°r
(const *, const *);

97 *
°πok
(* 
__ª°ri˘
, const * __restrict);

101 *
mem£t
(*, , 
size_t
);

102 *
°ªº‹
();

103 
size_t
 
°æí
(const *);

104 #¥agm®
öt_to_unsig√d
 
°æí


106 
	g__SGI_LIBC_END_NAMESPACE_STD


108 #i‡
_SGIAPI
 && 
_NO_ANSIMODE


109 
ffs
();

111 
°rˇ£cmp
(const *, const *);

112 
°∫ˇ£cmp
(const *, const *,

113 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
);

116 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
 
°æˇt
(*, const *,

117 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
);

118 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
 
°æ˝y
(*, const *,

119 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
);

121 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

122 #¥agm®
›ti⁄Æ
 
°æˇt


123 #¥agm®
›ti⁄Æ
 
°æ˝y


128 #i‡(
_XOPEN4UX
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


129 *
°rdup
(const *);

132 #i‡(
_POSIX1C
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


133 *
°πok_r
(*, const *, **);

136 #ifde‡
__INLINE_INTRINSICS


137 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


141 #ifde‡
_CFE


142 #¥agm®
öåösic
 (
°r˝y
)

144 #i‡(
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 400))

145 #¥agm®
öåösic
 (
°r˝y
)

146 #¥agm®
öåösic
 (
°rcmp
)

147 #¥agm®
öåösic
 (
°æí
)

149 #i‡(
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 721))

150 #¥agm®
öåösic
 (
mem˝y
)

151 #¥agm®
öåösic
 (
memmove
)

152 #¥agm®
öåösic
 (
mem£t
)

154 #i‡(
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 740))

155 #¥agm®
öåösic
 (
memcmp
)

157 
	g__SGI_LIBC_END_NAMESPACE_STD


160 
	g__SGI_LIBC_END_EXTERN_C


162 #ifde‡
__SGI_LIBC_USE_STRING_OVERLOADS


175 
«me•a˚
 
	g__sgûib
 {

177 *
memchr
(c⁄° *, , 
size_t
);

178 *
°rchr
(const *, );

179 *
°Ωbrk
(const *, const *);

180 *
°ºchr
(const *, );

181 *
°r°r
(const *, const *);

185 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


187 #i‚de‡
__sgi_˝p_memchr_deföed


188 
	#__sgi_˝p_memchr_deföed


	)

190 
ölöe
 c⁄° * 
	$memchr
(c⁄° * 
s
, 
c
, 
size_t
 
n
) {

191  
__sgûib
::
	`memchr
(
s
, 
c
, 
n
);

192 
	}
}

194 
ölöe
 * 
	$memchr
(* 
s
, 
c
, 
size_t
 
n
) {

195  
__sgûib
::
	`memchr
(
s
, 
c
, 
n
);

196 
	}
}

199 
ölöe
 c⁄° * 
	$°rchr
(c⁄° * 
s
, 
c
) {

200  
__sgûib
::
	`°rchr
(
s
, 
c
);

201 
	}
}

203 
ölöe
 * 
	$°rchr
(* 
s
, 
c
) {

204  
__sgûib
::
	`°rchr
(
s
, 
c
);

205 
	}
}

207 
ölöe
 c⁄° * 
	$°Ωbrk
(c⁄° * 
s1
, c⁄° * 
s2
) {

208  
__sgûib
::
	`°Ωbrk
(
s1
, 
s2
);

209 
	}
}

211 
ölöe
 * 
	$°Ωbrk
(* 
s1
, c⁄° * 
s2
) {

212  
__sgûib
::
	`°Ωbrk
(
s1
, 
s2
);

213 
	}
}

215 
ölöe
 c⁄° * 
	$°ºchr
(c⁄° * 
s
, 
c
) {

216  
__sgûib
::
	`°ºchr
(
s
, 
c
);

217 
	}
}

219 
ölöe
 * 
	$°ºchr
(* 
s
, 
c
) {

220  
__sgûib
::
	`°ºchr
(
s
, 
c
);

221 
	}
}

223 
ölöe
 c⁄° * 
	$°r°r
(c⁄° * 
s1
, c⁄° * 
s2
) {

224  
__sgûib
::
	`°r°r
(
s1
, 
s2
);

225 
	}
}

227 
ölöe
 * 
	$°r°r
(* 
s1
, c⁄° * 
s2
) {

228  
__sgûib
::
	`°r°r
(
s1
, 
s2
);

229 
	}
}

231 
	g__SGI_LIBC_END_NAMESPACE_STD


	@/usr/include/internal/time_core.h

1 #i‚de‡
__TIME_CORE_H__


2 
	#__TIME_CORE_H__


	)

32 
	~<°™d¨ds.h
>

33 
	~<öã∫Æ/sgima¸os.h
>

34 
	~<sys/ty≥s.h
>

36 
__SGI_LIBC_BEGIN_EXTERN_C


38 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


40 #i‚de‡
NULL


41 
	#NULL
 0L

	)

44 #i‡!
deföed
(
_SIZE_T
Ë&& !deföed(
_SIZE_T_
)

45 
	#_SIZE_T


	)

46 #i‡(
_MIPS_SZLONG
 == 32)

47 
	tsize_t
;

49 #i‡(
_MIPS_SZLONG
 == 64)

50 
	tsize_t
;

54 #i‚de‡
_CLOCK_T


55 
	#_CLOCK_T


	)

56 #i‡(
_MIPS_SZLONG
 == 32)

57 
	t˛ock_t
;

59 #i‡(
_MIPS_SZLONG
 == 64)

60 
	t˛ock_t
;

64 #i‚de‡
_TIME_T


65 
	#_TIME_T


	)

66 #i‡(
_MIPS_SZLONG
 == 32)

67 
	ttime_t
;

69 #i‡(
_MIPS_SZLONG
 == 64)

70 
	ttime_t
;

74 
__SGI_LIBC_END_NAMESPACE_STD


76 
	g__SGI_LIBC_END_EXTERN_C


78 #i‡(
_POSIX93
 || 
_ABIAPI
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


80 #i‡!
deföed
(
_STANDALONE
)

81 
	~<sys/±imîs.h
>

85 #i‚de‡
_CLOCK_ID_T


86 
	#_CLOCK_ID_T


	)

87 
	t˛ockid_t
;

89 #i‚de‡
_TIMER_T


90 
	#_TIMER_T


	)

91 
	ttimî_t
;

94 #i‡
_SGIAPI
 && 
_NO_ANSIMODE


95 #i‚de‡
time•ec_to_timevÆ


96 
	#time•ec_to_timevÆ
(
t
, 
ts
) \

97 (
t
)->
tv_£c
 = (
ts
)->tv_sec; \

98 (
t
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000;

	)

100 
	#timevÆ_to_time•ec
(
ts
, 
t
) \

101 (
ts
)->
tv_£c
 = (
t
)->tv_sec; \

102 (
ts
)->
tv_n£c
 = (
t
)->
tv_u£c
 * 1000;

	)

105 #i‚de‡
NSEC_PER_SEC


106 
	#NSEC_PER_SEC
 1000000000L

	)

110 
	g__SGI_LIBC_BEGIN_EXTERN_C


112 
	#CLOCKS_PER_SEC
 1000000

	)

114 
	stm
 {

115 
	mtm_£c
;

116 
	mtm_mö
;

117 
	mtm_hour
;

118 
	mtm_mday
;

119 
	mtm_m⁄
;

120 
	mtm_yór
;

121 
	mtm_wday
;

122 
	mtm_yday
;

123 
	mtm_isd°
;

129 
__SGI_LIBC_BEGIN_NAMESPACE_STD


133 
˛ock_t
 
˛ock
();

134 
dif·ime
(
time_t
,Åime_t);

135 
time_t
 
mktime
(
tm
 *);

136 
time_t
 
time
(time_t *);

140 *
as˘ime
(c⁄° 
tm
 *);

141 *
˘ime
 (c⁄° 
time_t
 *);

142 
tm
 *
gmtime
(c⁄° 
time_t
 *);

143 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

144 
size_t
 
°r·ime
(* 
__ª°ri˘
, size_t, c⁄° * __ª°ri˘, c⁄° 
tm
 * __restrict);

147 #i‡
_NO_XOPEN4
 && 
_NO_XOPEN5


148 
uöt64_t
 
rdπc
();

149 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

150 #¥agm®
›ti⁄Æ
 
rdπc


154 
	g__SGI_LIBC_END_NAMESPACE_STD


156 #i‡(
_POSIX90
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


160 
tz£t
();

161 *
tz«me
[2];

163 #i‚de‡
CLK_TCK


164 
_sysc⁄f
();

165 
	#CLK_TCK
 
	`_sysc⁄f
(3Ë

	)

170 
	g__SGI_LIBC_END_EXTERN_C


172 #i‡((
_POSIX93
 || 
_XOPEN5
Ë&& !
deföed
(
_STANDALONE
)Ë&& 
_NO_ANSIMODE


176 
	~<sys/time•ec.h
>

177 
	g__SGI_LIBC_BEGIN_EXTERN_C


178 #i‡
deföed
(
_XOPEN_SOURCE
) && (_XOPEN_SOURCE+0 >= 500)

179 #i‚de‡
__TIMESPEC_DEFINED


180 
	#time•ec
 
__time•ec


	)

183 
	gsigevít
;

184 
˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec_t
 *);

185 
˛ock_gëtime
(
˛ockid_t
, 
time•ec_t
 *);

186 
˛ock_gëªs
(
˛ockid_t
, 
time•ec_t
 *);

187 
«no¶ìp
(c⁄° 
time•ec_t
 *,Åimespec_t *);

188 
timî_¸óã
(
˛ockid_t
, 
sigevít
 *, 
timî_t
 *);

189 
timî_dñëe
(
timî_t
);

190 
timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *, itimerspec *);

191 
timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

192 
timî_gëovîrun
(
timî_t
);

193 
	g__SGI_LIBC_END_EXTERN_C


195 #i‚de‡
_SGI_COMPILING_LIBC


196 #¥agm®
›ti⁄Æ
 
«no¶ìp


201 
	g__SGI_LIBC_BEGIN_EXTERN_C


203 #i‡(
_XOPEN4
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


207 
time_t
 
timez⁄e
;

208 
daylight
;

209 *
°Ωtime
(c⁄° *, c⁄° *, 
tm
 *);

212 #i‡(
_XOPEN4UX
 || 
_XOPEN5
Ë&& 
_NO_ANSIMODE


216 
tm
 *
gëd©e
(const *);

217 
gëd©e_îr
;

220 #i‡
_SGIAPI
 && 
_NO_ANSIMODE


221 
c·ime
(*, *, c⁄° 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
time_t
 *);

222 
asc·ime
(*, c⁄° *, c⁄° 
tm
 *);

223 
time_t
 
Ætz⁄e
;

226 #i‡
_POSIX1C
 && 
_NO_ANSIMODE


230 *
as˘ime_r
(c⁄° 
tm
 *, *);

231 *
˘ime_r
(c⁄° 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
time_t
 *, *);

232 
tm
 *
gmtime_r
(c⁄° 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
time_t
 *,

233 
tm
 *);

234 
tm
 *
loˇ…ime_r
(c⁄° 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
time_t
 *,

235 
tm
 *);

238 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/net/soioctl.h

1 #i‚de‡
__√t_soio˘l__


2 
	#__√t_soio˘l__


	)

10 #ifde‡
__˝lu•lus


17 
	~<sys/io˘l.h
>

20 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

21 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

22 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

23 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

24 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

25 
	#SIOCSPGRP
 
	`_IOW
('s', 8, Ë

	)

26 
	#SIOCGPGRP
 
	`_IOR
('s', 9, Ë

	)

33 
	#SIOCNREAD
 
	`_IOR
('s', 10, Ë

	)

35 #i‚de‡
sgi


36 
	#SIOCADDRT
 
	`_IOW
('r', 10, 
πíåy
Ë

	)

37 
	#SIOCDELRT
 
	`_IOW
('r', 11, 
πíåy
Ë

	)

38 
	#SIOCSETRTINFO
 
	`_IOWR
('r', 12, 
fuŒπíåy
Ë

	)

39 
	#SIOCGETRTINFO
 
	`_IOWR
('r', 13, 
fuŒπíåy
Ë

	)

43 
	#SIOCGETVIFCNT
 
	`_IOWR
('r', 15, 
sioc_vif_ªq
Ë

	)

44 
	#SIOCGETSGCNT
 
	`_IOWR
('r', 16, 
sioc_sg_ªq
Ë

	)

45 
	#_SIOCRTSYSCTL
 
	`_IOWR
('r', 99, 
πsys˘l
Ë

	)

47 
	#SIOCSIFADDR
 
	`_IOW
('i', 12, 
i‰eq
Ë

	)

48 
	#SIOCGIFADDR
 
	`_IOWR
('i',13, 
i‰eq
Ë

	)

49 
	#SIOCSIFDSTADDR
 
	`_IOW
('i', 14, 
i‰eq
Ë

	)

50 
	#SIOCGIFDSTADDR
 
	`_IOWR
('i',15, 
i‰eq
Ë

	)

51 
	#OSIOCSIFFLAGS
 
	`_IOW
('i', 16, 
i‰eq
Ë

	)

52 
	#OSIOCGIFFLAGS
 
	`_IOWR
('i',17, 
i‰eq
Ë

	)

53 
	#SIOCGIFCONF
 
	`_IOWR
('i',20, 
ifc⁄f
Ë

	)

55 
	#SIOCSIFPHYADDR
 
	`_IOW
('i', 130, 
iÁlü§eq
Ë

	)

56 
	#SIOCGIFPSRCADDR
 
	`_IOWR
('i', 131, 
i‰eq
Ë

	)

57 
	#SIOCGIFPDSTADDR
 
	`_IOWR
('i', 132, 
i‰eq
Ë

	)

58 
	#SIOCDIFPHYADDR
 
	`_IOW
('i', 133, 
i‰eq
Ë

	)

60 #ifde‡
_KERNEL


61 
	#SIOCGIFCONF_INTERNAL
 
	`_IOWR
('i', 20, 
i‰eq
Ë

	)

64 
	#SIOCSARP
 
	`_IOW
('i', 30, 
¨¥eq
Ë

	)

65 
	#SIOCGARP
 
	`_IOWR
('i',31, 
¨¥eq
Ë

	)

66 
	#SIOCDARP
 
	`_IOW
('i', 32, 
¨¥eq
Ë

	)

71 
	#SIOCSARPX
 
	`_IOW
('i', 30, 
¨¥eqx
Ë

	)

72 
	#SIOCGARPX
 
	`_IOWR
('i',31, 
¨¥eqx
Ë

	)

73 
	#SIOCDARPX
 
	`_IOW
('i', 32, 
¨¥eqx
Ë

	)

75 
	#SIOCAIFADDR
 
	`_IOW
('i', 33, 
iÁlü§eq
Ë

	)

76 
	#SIOCDIFADDR
 
	`_IOW
('i', 34, 
iÁlü§eq
Ë

	)

77 
	#SIOCLIFADDR
 
	`_IOWR
('i',35, 
iÁlü§eq
Ë

	)

79 
	#SIOCGIFBRDADDR
 
	`_IOWR
('i',23, 
i‰eq
Ë

	)

80 
	#SIOCSIFBRDADDR
 
	`_IOW
('i', 24, 
i‰eq
Ë

	)

81 
	#SIOCGIFNETMASK
 
	`_IOWR
('i',25, 
i‰eq
Ë

	)

82 
	#SIOCSIFNETMASK
 
	`_IOW
('i', 26, 
i‰eq
Ë

	)

83 
	#SIOCGIFMETRIC
 
	`_IOWR
('i',27, 
i‰eq
Ë

	)

84 
	#SIOCSIFMETRIC
 
	`_IOW
('i', 28, 
i‰eq
Ë

	)

86 
	#SIOCADDMULTI
 
	`_IOW
('i', 49, 
i‰eq
Ë

	)

87 
	#SIOCDELMULTI
 
	`_IOW
('i', 50, 
i‰eq
Ë

	)

88 
	#SIOCSIFSTATS
 
	`_IOW
('i', 100, 
i‰eq
Ë

	)

89 
	#SIOCGIFSTATS
 
	`_IOWR
('i',101, 
i‰eq
Ë

	)

90 
	#SIOCSIFHEAD
 
	`_IOW
('i', 102, 
i‰eq
Ë

	)

93 
	#SIOCGETLABEL
 
	`_IO
('i', 103Ë

	)

94 
	#SIOCSETLABEL
 
	`_IO
('i', 104Ë

	)

96 
	#SIOCSIFMEM
 
	`_IOW
('i', 18, 
i‰eq
Ë

	)

97 
	#SIOCGIFMEM
 
	`_IOWR
('i',19, 
i‰eq
Ë

	)

98 
	#SIOCSIFMTU
 
	`_IOW
('i', 21, 
i‰eq
Ë

	)

99 
	#SIOCGIFMTU
 
	`_IOWR
('i',22, 
i‰eq
Ë

	)

101 
	#SIOCUPPER
 
	`_IOW
('i', 40, 
i‰eq
Ë

	)

102 
	#SIOCLOWER
 
	`_IOW
('i', 41, 
i‰eq
Ë

	)

104 
	#SIOCSETSYNC
 
	`_IOW
('i', 44, 
i‰eq
Ë

	)

105 
	#SIOCGETSYNC
 
	`_IOWR
('i',45, 
i‰eq
Ë

	)

106 
	#SIOCSSDSTATS
 
	`_IOWR
('i',46, 
i‰eq
Ë

	)

107 
	#SIOCSSESTATS
 
	`_IOWR
('i',47, 
i‰eq
Ë

	)

108 
	#SIOCSPROMISC
 
	`_IOW
('i', 48, Ë

	)

111 
	#SIOCPROTO
 
	`_IOW
('s', 51, 
sock√w¥Ÿo
Ë

	)

112 
	#SIOCGETNAME
 
	`_IOR
('s', 52, 
sockaddr
Ë

	)

113 
	#SIOCGETPEER
 
	`_IOR
('s', 53, 
sockaddr
Ë

	)

114 
	#IF_UNITSEL
 
	`_IOW
('s', 54, Ë

	)

115 
	#SIOCXPROTO
 
	`_IO
('s', 55Ë

	)

117 
	#SIOCIFDETACH
 
	`_IOW
('i', 56, 
i‰eq
Ë

	)

118 
	#SIOCGENPSTATS
 
	`_IOWR
('i',57, 
i‰eq
Ë

	)

119 
	#SIOCX25XMT
 
	`_IOWR
('i',59, 
i‰eq
Ë

	)

120 
	#SIOCX25RCV
 
	`_IOWR
('i',60, 
i‰eq
Ë

	)

121 
	#SIOCX25TBL
 
	`_IOWR
('i',61, 
i‰eq
Ë

	)

122 
	#SIOCSLGETREQ
 
	`_IOWR
('i',71, 
i‰eq
Ë

	)

123 
	#SIOCSLSTAT
 
	`_IOW
('i', 72, 
i‰eq
Ë

	)

124 
	#SIOCSIFNAME
 
	`_IOW
('i', 73, 
i‰eq
Ë

	)

125 
	#SIOCGENADDR
 
	`_IOWR
('i',85, 
i‰eq
Ë

	)

126 
	#SIOCSOCKSYS
 
	`_IOW
('i', 86, 
socksy§eq
Ë

	)

132 
	#SIOCADDSTRIPE
 
	`_IOW
('i', 90, 
i‰eq
)

	)

134 
	#SIOCDELSTRIPE
 
	`_IOW
('i', 91, 
i‰eq
)

	)

139 
	#SIOCLISTLINK
 
	`_IOWR
('i', 92, 
if°rùîeq
)

	)

141 
	#SIOCADDLINK
 
	`_IOW
('i', 93, 
if°rùîeq
)

	)

143 
	#SIOCDELLINK
 
	`_IOW
('i', 94, 
if°rùîeq
)

	)

148 
	#SIOCTOSTREAM
 
	`_IO
('s', 99Ë

	)

151 
	#SIOCGETACL
 
	`_IOR
('s', 107, 
sﬂ˛
Ë

	)

152 
	#SIOCSETACL
 
	`_IOW
('s', 108, 
sﬂ˛
Ë

	)

153 
	#SIOCGETUID
 
	`_IOR
('s', 109, 
uid_t
Ë

	)

154 
	#SIOCSETUID
 
	`_IOW
('s', 110, 
uid_t
Ë

	)

155 
	#SIOCGETRCVUID
 
	`_IOR
('s', 113, 
uid_t
Ë

	)

156 
	#SIOCGIFUID
 
	`_IOWR
('i', 111, 
i‰eq
Ë

	)

157 
	#SIOCSIFUID
 
	`_IOW
('i', 112, 
i‰eq
Ë

	)

160 
	#SIOCVIF
 
	`_IOW
('i', 113, 
i‰eq
Ë

	)

161 
	#SIOCVIFMAP
 
	`_IOW
('i', 114, 
i‰eq
Ë

	)

162 
	#SIOCVIFSTAT
 
	`_IOW
('i', 115, 
i‰eq
Ë

	)

163 
	#SIOCGIFRECV
 
	`_IOWR
('i', 116, 
i‰eq
Ë

	)

164 
	#SIOCSIFRECV
 
	`_IOW
('i', 117, 
i‰eq
Ë

	)

165 
	#SIOCGIFSEND
 
	`_IOWR
('i', 118, 
i‰eq
Ë

	)

166 
	#SIOCSIFSEND
 
	`_IOW
('i', 119, 
i‰eq
Ë

	)

169 
	#SIOCSLSCONF
 
	`_IOW
('i', 120, 
ls_c⁄f
)

	)

170 
	#SIOCGLSCONF
 
	`_IOWR
('i', 121, 
ls_c⁄f
)

	)

172 
	#SIOCSIFFLAGS
 
	`_IOW
('i', 122, 
i‰eq
Ë

	)

173 
	#SIOCGIFFLAGS
 
	`_IOWR
('i', 123, 
i‰eq
Ë

	)

174 
	#SIOCGIFDATA
 
	`_IOWR
('i', 124, 
ifd©¨eq
Ë

	)

176 
	#SIOCATMARP
 
	`_IOWR
('i', 128, [
IOCPARM_MASK
])

	)

179 #ifde‡
__˝lu•lus


	@/usr/include/netinet/in_systm.h

15 #i‚de‡
__NETINET_IN_SYSM_H__


16 
	#__NETINET_IN_SYSM_H__


	)

17 #ifde‡
__˝lu•lus


34 
u_sh‹t
 
	tn_sh‹t
;

36 
__uöt32_t
 
	tn_l⁄g
;

37 
__uöt32_t
 
	tn_time
;

39 #ifde‡
_KERNEL


40 
n_time
 
ùtime
();

43 #ifde‡
__˝lu•lus


	@/usr/include/re_comp.h

1 #i‚de‡
__RE_COMP_H__


2 
	#__RE_COMP_H__


	)

22 
	~<öã∫Æ/sgima¸os.h
>

24 
__SGI_LIBC_BEGIN_EXTERN_C


26 *
ª_comp
(const *);

27 
ª_exec
(const *);

29 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/sgidefs.h

12 #i‚de‡
__SGIDEFS_H__


13 
	#__SGIDEFS_H__


	)

15 #ifde‡
__˝lu•lus


49 
	#_MIPS_ISA_MIPS1
 1

	)

50 
	#_MIPS_ISA_MIPS2
 2

	)

51 
	#_MIPS_ISA_MIPS3
 3

	)

52 
	#_MIPS_ISA_MIPS4
 4

	)

59 
	#_MIPS_SIM_ABI32
 1

	)

60 
	#_MIPS_SIM_NABI32
 2

	)

62 
	#_MIPS_SIM_ABI64
 3

	)

122 #i‡(
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
))

128 #i‡(
_MIPS_SZINT
 != 32)

129 #ifde‡
_MIPS_SZINT


130 
ERROR
 -- 
the
 
ma¸o
 "_MIPS_SZINT" 
is
 
£t
 
to
 
_MIPS_SZINT
 -- 
should
 
be
 32

132 
ERROR
 -- 
the
 
ma¸o
 "_MIPS_SZINT" 
is
 
un£t
 (
cuºíéy
, 
mu°
 
be
 
£t
 
to
 32)

136 
	t__öt32_t
;

137 
	t__uöt32_t
;

139 #i‡(
_MIPS_SZLONG
 == 64)

141 
	t__öt64_t
;

142 
	t__uöt64_t
;

181 #i‡
deföed
(
_LONGLONG
)

183 
	t__öt64_t
;

184 
	t__uöt64_t
;

187 #i‡(
deföed
(
__˝lu•lus
Ë&& !deföed(
__EDG
)Ë|| deföed(
m68000
)

194 
hi32
;

195 
lo32
;

196 } 
hûo
;

197 
Æign
;

198 } 
	t__öt64_t
;

201 
hi32
;

202 
lo32
;

203 } 
hûo
;

204 
Æign
;

205 } 
	t__uöt64_t
;

210 
__l⁄g_l⁄g
 
	t__öt64_t
;

211 
	t__l⁄g_l⁄g
 
	t__uöt64_t
;

218 #i‡(
_MIPS_SZPTR
 == 32)

219 
__öt32_t
 
	t__psöt_t
;

220 
__uöt32_t
 
	t__psunsig√d_t
;

223 #i‡(
_MIPS_SZPTR
 == 64)

224 
__öt64_t
 
	t__psöt_t
;

225 
__uöt64_t
 
	t__psunsig√d_t
;

232 #i‡(
_MIPS_SZPTR
 =64Ë|| (
_MIPS_SZLONG
 =64Ë|| (
_MIPS_SZINT
 == 64)

235 
__öt64_t
 
	t__scöt_t
;

236 
__uöt64_t
 
	t__scunsig√d_t
;

241 
__öt32_t
 
	t__scöt_t
;

242 
__uöt32_t
 
	t__scunsig√d_t
;

248 #ifde‡
__˝lu•lus


	@/usr/include/standards.h

1 #i‚de‡
__STANDARDS_H__


2 
	#__STANDARDS_H__


	)

77 
	#_ANSIMODE
 (!
	`deföed
(
__EXTENSIONS__
))

	)

78 
	#_NO_ANSIMODE
 (
	`deföed
(
__EXTENSIONS__
) || \

79 
	`deföed
(
_SGI_SOURCE
) || \

80 
	`deföed
(
_POSIX_SOURCE
) || \

81 
	`deföed
(
_POSIX_C_SOURCE
) || \

82 
	`deföed
(
_MIPSABI_SOURCE
) || \

83 
	`deföed
(
_LARGEFILE64_SOURCE
) || \

84 
	`deföed
(
_XOPEN_SOURCE
))

	)

102 
	#_POSIX90
 (
	`deföed
(
_POSIX_SOURCE
) || \

103 
	`deföed
(
_POSIX_C_SOURCE
) || \

104 
	`deföed
(
_XOPEN_SOURCE
) || \

105 
	`deföed
(
_SGI_SOURCE
) || \

106 
_ANSIMODE
)

	)

107 
	#_POSIX2
 ((
	`deföed
(
_POSIX_C_SOURCE
) && (_POSIX_C_SOURCE+0 > 1)) ||\

108 
	`deföed
(
_XOPEN_SOURCE
) || \

109 
	`deföed
(
_SGI_SOURCE
) || \

110 
_ANSIMODE
)

	)

124 
	#_POSIX93
 \

125 ((
	`deföed
(
_POSIX_C_SOURCE
) && (_POSIX_C_SOURCE+0 >= 199309L)) ||\

126 (
	`deföed
(
_SGI_SOURCE
Ë&& 
_NO_XOPEN4
 && 
_NO_XOPEN5
 && 
_NO_POSIX
) || \

127 (
_ANSIMODE
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
 && 
_NO_POSIX
))

	)

128 
	#_NO_POSIX
 (!
	`deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
))

	)

137 
	#_POSIX1C
 \

138 ((
	`deföed
(
_POSIX_C_SOURCE
) && (_POSIX_C_SOURCE+0 >= 199506L)) ||\

139 (
	`deföed
(
_SGI_SOURCE
Ë&& 
_NO_XOPEN4
 && 
_NO_POSIX
 && 
_NO_ABIAPI
) || \

140 
	`deföed
(
_SGI_REENTRANT_FUNCTIONS
) || \

141 
_XOPEN5
 || \

142 (
_ANSIMODE
 && 
_NO_XOPEN4
 && 
_NO_POSIX
 && 
_NO_ABIAPI
))

	)

151 
	#_XOPEN4
 (
	`deföed
(
_XOPEN_SOURCE
) || \

152 ((
	`deföed
(
_SGI_SOURCE
Ë&& 
_NO_POSIX
)) || \

153 (
_ANSIMODE
 && 
_NO_POSIX
))

	)

154 
	#_NO_XOPEN4
 (!
	`deföed
(
_XOPEN_SOURCE
) || \

155 (
	`deföed
(
_XOPEN_SOURCE
) && \

156 (
_XOPEN_SOURCE
+0 >500)))

	)

160 
	#_XOPEN4UX
 \

161 ((
	`deföed
(
_XOPEN_SOURCE
) && \

162 
	`deföed
(
_XOPEN_SOURCE_EXTENDED
) && \

163 
_XOPEN_SOURCE_EXTENDED
+0 == 1) || \

164 (
	`deföed
(
_SGI_SOURCE
Ë&& 
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
) || \

165 (
_ANSIMODE
 && 
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
))

	)

175 
	#_XOPEN5
 ((
	`deföed
(
_XOPEN_SOURCE
) && \

176 (
_XOPEN_SOURCE
+0 >= 500)) || \

177 ((
	`deföed
(
_SGI_SOURCE
Ë&& 
_NO_POSIX
 && 
_NO_XOPEN4
)) || \

178 (
_ANSIMODE
 && 
_NO_POSIX
))

	)

179 
	#_NO_XOPEN5
 (!
	`deföed
(
_XOPEN_SOURCE
) || \

180 (
	`deföed
(
_XOPEN_SOURCE
) && \

181 (
_XOPEN_SOURCE
+0 < 500)))

	)

191 
	#_XOPEN5_2
 ((
	`deföed
(
_XOPEN_SOURCE
) && \

192 (
_XOPEN_SOURCE
+0 >= 520)) || \

193 ((
	`deföed
(
_SGI_SOURCE
Ë&& 
_NO_POSIX
 && \

194 
_NO_XOPEN4
 && 
_NO_XOPEN5
)) || \

195 (
_ANSIMODE
 && 
_NO_POSIX
))

	)

197 
	#_NO_XOPEN5_2
 (!
	`deföed
(
_XOPEN_SOURCE
) || \

198 (
	`deföed
(
_XOPEN_SOURCE
) && \

199 (
_XOPEN_SOURCE
+0 < 520)))

	)

210 
	#_SGIAPI
 ((
	`deföed
(
_SGI_SOURCE
) && \

211 
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
) || \

212 (
_ANSIMODE
 && 
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
))

	)

229 
	#_ABIAPI
 \

230 ((
	`deföed
(
_MIPSABI_SOURCE
) && (_MIPSABI_SOURCE+0 >= 2)) || \

231 
	`deföed
(
_ABI_SOURCE
))

	)

232 
	#_NO_ABIAPI
 \

233 ((!
	`deföed
(
_MIPSABI_SOURCE
) || (_MIPSABI_SOURCE+0 < 2)) && \

234 !
	`deföed
(
_ABI_SOURCE
))

	)

243 
	#_LFAPI
 (
	`deföed
(
_LARGEFILE64_SOURCE
Ë|| 
_SGIAPI
)

	)

248 
	#_REENTRANT_FUNCTIONS
 (
	`deföed
(
_SGI_REENTRANT_FUNCTIONS
))

	)

	@/usr/include/stdarg.h

1 #i‚de‡
__STDARG_H__


2 
	#__STDARG_H__


	)

4 
	~<öã∫Æ/°d¨g_c‹e.h
>

6 
	$__SGI_LIBC_USING_FROM_STD
(
va_li°
)

	@/usr/include/stddef.h

1 #i‚de‡
__STDDEF_H__


2 
	#__STDDEF_H__


	)

4 
	~<öã∫Æ/°ddef_c‹e.h
>

6 
	$__SGI_LIBC_USING_FROM_STD
(
±rdiff_t
)

7 
	$__SGI_LIBC_USING_FROM_STD
(
size_t
)

	@/usr/include/strings.h

1 #i‚de‡
__STRINGS_H__


2 
	#__STRINGS_H__


	)

11 
	~<°™d¨ds.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<öã∫Æ/sgima¸os.h
>

15 #i‡
_SGIAPI


17 
	~<°rög.h
>

18 
	g__SGI_LIBC_BEGIN_EXTERN_C


21 
__SGI_LIBC_BEGIN_EXTERN_C


22 
ffs
();

24 
°rˇ£cmp
(const *, const *);

25 
°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

28 
bcmp
(c⁄° *, c⁄° *, 
size_t
);

29 
bc›y
(c⁄° *, *, 
size_t
);

30 
bzîo
(*, 
size_t
);

31 *
ödex
(const *, );

32 *
rödex
(const *, );

34 #ifde‡
__INLINE_INTRINSICS


38 #i‡(
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 721))

39 #¥agm®
öåösic
 (
bc›y
)

40 #¥agm®
öåösic
 (
bzîo
)

45 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/sys/EVEREST/IP19.h

17 #i‚de‡
__SYS_EVEREST_IP19_H__


18 
	#__SYS_EVEREST_IP19_H__


	)

22 
	#_ARCSPROM


	)

24 
	#EV_CPU_PER_BOARD
 0x04

	)

26 #ifde‡
_LANGUAGE_C


27 
	#SBUS_TO_KVU
(
x
Ë((
__psunsig√d_t
)(xË| 
K1BASE
)

	)

29 
	#SBUS_TO_KVU
(
x
Ë((xË| 
K1BASE
)

	)

36 
	#EV_SPNUM
 
	`SBUS_TO_KVU
(0x18000008Ë

	)

37 
	#EV_KZRESET
 
	`SBUS_TO_KVU
(0x18000010Ë

	)

38 
	#EV_SENDINT
 
	`SBUS_TO_KVU
(0x18000100Ë

	)

39 
	#EV_SYSCONFIG
 
	`SBUS_TO_KVU
(0x18000200Ë

	)

40 
	#EV_WGDST
 
	`SBUS_TO_KVU
(0x18000300Ë

	)

41 
	#EV_WGCNTRL
 
	`SBUS_TO_KVU
(0x18000308Ë

	)

42 
	#EV_WGCLEAR
 
	`SBUS_TO_KVU
(0x18000340Ë

	)

43 
	#EV_UART_BASE
 
	`SBUS_TO_KVU
(0x18000400Ë

	)

44 
	#EV_UART_CMD
 
	`SBUS_TO_KVU
(0x18000400Ë

	)

45 
	#EV_UART_DATA
 
	`SBUS_TO_KVU
(0x18000408Ë

	)

46 
	#EV_IP0
 
	`SBUS_TO_KVU
(0x18000800Ë

	)

47 
	#EV_IP1
 
	`SBUS_TO_KVU
(0x18000808Ë

	)

48 
	#EV_HPIL
 
	`SBUS_TO_KVU
(0x18000820Ë

	)

49 
	#EV_CEL
 
	`SBUS_TO_KVU
(0x18000828Ë

	)

50 
	#EV_CIPL0
 
	`SBUS_TO_KVU
(0x18000830Ë

	)

51 
	#EV_CIPL124
 
	`SBUS_TO_KVU
(0x18000850Ë

	)

52 
	#EV_IGRMASK
 
	`SBUS_TO_KVU
(0x18000838Ë

	)

53 
	#EV_ILE
 
	`SBUS_TO_KVU
(0x18000840Ë

	)

54 
	#EV_ERTOIP
 
	`SBUS_TO_KVU
(0x18000900Ë

	)

55 
	#EV_CERTOIP
 
	`SBUS_TO_KVU
(0x18000908Ë

	)

56 
	#EV_ECCSB_DIS
 
	`SBUS_TO_KVU
(0x18000910Ë

	)

57 
	#EV_RO_COMPARE
 
	`SBUS_TO_KVU
(0x18000a00Ë

	)

58 
	#EV_CONFIGREG_BASE
 
	`SBUS_TO_KVU
(0x18008000Ë

	)

59 
	#EV_RTC
 
	`SBUS_TO_KVU
(0x18020000Ë

	)

60 
	#EV_BUSTAG_BASE
 
	`SBUS_TO_KVU
(0x181c0000Ë

	)

61 
	#EV_WGINPUT_BASE
 
	`SBUS_TO_KVU
(0x18300000Ë

	)

62 
	#EV_WGCOUNT
 
	`SBUS_TO_KVU
(0x18300000Ë

	)

63 
	#EV_EAROM_BASE
 
	`SBUS_TO_KVU
(0x19000000Ë

	)

64 
	#EV_LED_BASE
 
	`SBUS_TO_KVU
(0x19004000Ë

	)

65 
	#EV_SYNC_SIGNAL
 
	`SBUS_TO_KVU
(0x1a000100Ë

	)

66 
	#EV_PROM_BASE
 
	`SBUS_TO_KVU
(0x1c000000Ë

	)

71 
	#EV_PROCNUM_MASK
 0x03

	)

72 
	#EV_SLOTNUM_MASK
 0x3¯

	)

73 
	#EV_SPNUM_MASK
 0x3‡

	)

74 
	#EV_PROCNUM_SHFT
 0

	)

75 
	#EV_SLOTNUM_SHFT
 2

	)

80 
	#EV_EBUSRATE0_LOC
 
	`SBUS_TO_KVU
(0x19000100Ë

	)

81 
	#EV_EBUSRATE1_LOC
 
	`SBUS_TO_KVU
(0x19000108Ë

	)

82 
	#EV_EBUSRATE2_LOC
 
	`SBUS_TO_KVU
(0x19000110Ë

	)

83 
	#EV_EBUSRATE3_LOC
 
	`SBUS_TO_KVU
(0x19000118Ë

	)

84 
	#EV_PGBRDEN_LOC
 
	`SBUS_TO_KVU
(0x19000120Ë

	)

85 
	#EV_CACHE_SZ_LOC
 
	`SBUS_TO_KVU
(0x19000128Ë

	)

86 
	#EV_IW_TRIG_LOC
 
	`SBUS_TO_KVU
(0x19000130Ë

	)

87 
	#EV_RR_TRIG_LOC
 
	`SBUS_TO_KVU
(0x19000138Ë

	)

88 
	#EV_EPROCRATE0_LOC
 
	`SBUS_TO_KVU
(0x19000140Ë

	)

89 
	#EV_EPROCRATE1_LOC
 
	`SBUS_TO_KVU
(0x19000148Ë

	)

90 
	#EV_EPROCRATE2_LOC
 
	`SBUS_TO_KVU
(0x19000150Ë

	)

91 
	#EV_EPROCRATE3_LOC
 
	`SBUS_TO_KVU
(0x19000158Ë

	)

92 
	#EV_RTCFREQ0_LOC
 
	`SBUS_TO_KVU
(0x19000160Ë

	)

93 
	#EV_RTCFREQ1_LOC
 
	`SBUS_TO_KVU
(0x19000168Ë

	)

94 
	#EV_RTCFREQ2_LOC
 
	`SBUS_TO_KVU
(0x19000170Ë

	)

95 
	#EV_RTCFREQ3_LOC
 
	`SBUS_TO_KVU
(0x19000178Ë

	)

96 
	#EV_WCOUNT0_LOC
 
	`SBUS_TO_KVU
(0x19000180Ë

	)

97 
	#EV_WCOUNT1_LOC
 
	`SBUS_TO_KVU
(0x19000188Ë

	)

98 
	#EV_ECCENB_LOC
 
	`SBUS_TO_KVU
(0x19000190Ë

	)

99 
	#EV_CKSUM0_LOC
 
	`SBUS_TO_KVU
(0x19000200Ë

	)

100 
	#EV_CKSUM1_LOC
 
	`SBUS_TO_KVU
(0x19000208Ë

	)

101 
	#EV_NCKSUM0_LOC
 
	`SBUS_TO_KVU
(0x19000210Ë

	)

102 
	#EV_NCKSUM1_LOC
 
	`SBUS_TO_KVU
(0x19000218Ë

	)

104 
	#EV_BE_LOC
 
	`SBUS_TO_KVU
(0x19000000Ë

	)

106 
	#EAROM_BE_MASK
 (1 << 2Ë

	)

107 
	#EAROM_SC_MASK
 (1 << 4Ë

	)

109 
	#EV_CHKSUM_LEN
 48

	)

111 
	#EV_EAROM_BYTE0
 0x0¯

	)

117 
	#EV_CONFIG1_BASE
 
	`SBUS_TO_KVU
(0x18008800Ë

	)

118 
	#EV_CONFIG2_BASE
 
	`SBUS_TO_KVU
(0x18009000Ë

	)

119 
	#EV_CONFIG3_BASE
 
	`SBUS_TO_KVU
(0x18009800)

	)

120 
	#EV_CONFIG4_BASE
 
	`SBUS_TO_KVU
(0x1800a000)

	)

121 
	#EV_CONFIG5_BASE
 
	`SBUS_TO_KVU
(0x1800a800)

	)

122 
	#EV_CONFIG6_BASE
 
	`SBUS_TO_KVU
(0x1800b000)

	)

123 
	#EV_CONFIG7_BASE
 
	`SBUS_TO_KVU
(0x1800b800)

	)

124 
	#EV_CONFIG8_BASE
 
	`SBUS_TO_KVU
(0x1800c000)

	)

125 
	#EV_CONFIG9_BASE
 
	`SBUS_TO_KVU
(0x1800c800)

	)

126 
	#EV_CONFIGa_BASE
 
	`SBUS_TO_KVU
(0x1800d000)

	)

127 
	#EV_CONFIGb_BASE
 
	`SBUS_TO_KVU
(0x1800d800)

	)

128 
	#EV_CONFIGc_BASE
 
	`SBUS_TO_KVU
(0x1800e000)

	)

129 
	#EV_CONFIGd_BASE
 
	`SBUS_TO_KVU
(0x1800e800)

	)

130 
	#EV_CONFIGe_BASE
 
	`SBUS_TO_KVU
(0x1800f000)

	)

131 
	#EV_CONFIGf_BASE
 
	`SBUS_TO_KVU
(0x1800f800)

	)

136 
	#EV_A_ENABLE
 0x0

	)

137 
	#EV_A_BOARD_TYPE
 0x1

	)

138 
	#EV_A_LEVEL
 0x2

	)

139 
	#EV_A_URGENT_TIMEOUT
 0x3

	)

140 
	#EV_A_RSC_TIMEOUT
 0x4

	)

141 
	#EV_A_ERROR
 0x6

	)

142 
	#EV_A_ERROR_CLEAR
 0x7

	)

147 
	#EV_CMPREG0
 0x10

	)

148 
	#EV_CMPREG1
 0x11

	)

149 
	#EV_CMPREG2
 0x12

	)

150 
	#EV_CMPREG3
 0x13

	)

151 
	#EV_PGBRDEN
 0x14

	)

152 
	#EV_ECCHKDIS
 0x15

	)

153 
	#EV_CPERIOD
 0x16

	)

154 
	#EV_PROC_DATARATE
 0x17

	)

155 
	#EV_WGRETRY_TOUT
 0x19

	)

157 
	#EV_CCREV_REG
 0x19

	)

158 
	#EV_IW_TRIG
 0x20

	)

159 
	#EV_RR_TRIG
 0x21

	)

160 
	#EV_CACHE_SZ
 0x3ê

	)

166 
	#EV_CCREV_1
 0x1‡

	)

167 
	#EV_CCREV_2
 0x1ê

	)

169 
	#EV_CERTOIP_MASK
 0x3ff

	)

177 
	#IP19_CACHESIZE
(
code
Ë(2 << (22-(code)))

	)

179 #i‡
LANGUAGE_ASSEMBLY


187 
	#EV_GET_SPNUM
(
¶Ÿ
,
¥oc
) \

188 
LI
 
¶Ÿ
, 
EV_SPNUM
 ; \

189 
ld
 
¶Ÿ
, 0(slot) ; \

190 
n›
 ; \

191 
™d
 
¥oc
, 
¶Ÿ
, 
EV_PROCNUM_MASK
 ; \

192 
§l
 
¶Ÿ
, 
EV_SLOTNUM_SHFT


	)

203 
	#EV_GET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

204 
¶l
 
k0
, 
¶Ÿ
, 11 ; \

205 
add
 
k0
, 
EV_CONFIGREG_BASE
 ; \

206 
add
 
vÆue
, 
zîo
, 
ªg
 ; \

207 
¶l
 
vÆue
, 3 ; \

208 
add
 
k0
, 
vÆue
 ; \

209 
ld
 
vÆue
, 0(
k0
) ; \

210 
n›


	)

212 
	#EV_SET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

213 
¶l
 
k0
, 
¶Ÿ
, 11 ; \

214 
add
 
k0
, 
EV_CONFIGREG_BASE
 ; \

215 
add
 
k1
, 
zîo
, 
ªg
 ; \

216 
¶l
 
k1
, 3 ; \

217 
add
 
k0
, 
k1
 ; \

218 
‹
 
k1
, 
zîo
, 
vÆue
 ; \

219 
sd
 
k1
, 0(
k0
) ; \

220 
n›


	)

229 
	#EV_GET_PROCREG
(
¶Ÿ
,
¥oc
,
ªg
,
vÆue
) \

230 
¶l
 
k1
, 
¥oc
, 6 ; \

231 
add
 
k1
, 
ªg
 ; \

232 
	`EV_GET_CONFIG
(
¶Ÿ
,
k1
,
vÆue
)

	)

234 
	#EV_SET_PROCREG
(
¶Ÿ
,
¥oc
,
ªg
,
vÆue
) \

235 
¶l
 
k1
, 
¥oc
, 6; \

236 
add
 
k1
, 
ªg
 ; \

237 
	`EV_SET_CONFIG
(
¶Ÿ
,
k1
,
vÆue
)

	)

248 #i‡
_LANGUAGE_C


250 
	#EV_GET_CONFIG
(
¶Ÿ
,
ªg
) \

251 
	`lﬂd_doubÀ_lo
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)))

	)

253 
	#EV_GET_CONFIG_HI
(
¶Ÿ
,
ªg
) \

254 
	`lﬂd_doubÀ_hi
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)))

	)

256 
	#EV_SET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

257 
	`°‹e_doubÀ_lo
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)), (
vÆue
))

	)

268 #ifde‡
_STANDALONE


269 
	#NORMAL_SR
 (
SR_KX
|
SR_FR
)

	)

275 
	#SRB_SWTIMO
 0x00000100

	)

276 
	#SRB_NET
 0x00000200

	)

277 
	#SRB_DEV
 0x00000400

	)

278 
	#SRB_TIMOCLK
 0x00000800

	)

279 
	#SRB_UART
 0x00001000

	)

280 
	#SRB_ERR
 0x00002000

	)

281 
	#SRB_WGTIMO
 0x00004000

	)

282 
	#SRB_SCHEDCLK
 0x00008000

	)

284 
	#II_SPL1
 
SRB_NET
|
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

285 
	#II_SPL3
 
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

286 
	#II_SPLNET
 
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

287 
	#II_SPLTTY
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

288 
	#II_SPLHI
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

289 
	#II_SPLTLB
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

290 
	#II_SPLPROF
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

291 
	#II_SPL7
 0

	)

293 
	#II_CEL1
 
EVINTR_LEVEL_BASE


	)

294 
	#II_CELNET
 
EVINTR_LEVEL_BASE


	)

295 
	#II_CEL3
 (
EVINTR_LEVEL_MAXLODEV
+1)

	)

296 
	#II_CELTTY
 (
EVINTR_LEVEL_MAXHIDEV
+1)

	)

297 
	#II_CELHI
 (
EVINTR_LEVEL_HIGH
+1)

	)

298 
	#II_CELTLB
 (
EVINTR_LEVEL_TLB
+1)

	)

299 
	#II_CELPROF
 (
EVINTR_LEVEL_EPC_PROFTIM
+1)

	)

300 
	#II_CEL7
 
EVINTR_LEVEL_MAX


	)

307 
	#TLBLO_HWBITS
 0xfffffff8

	)

308 
	#TLBLO_HWBITSHIFT
 3

	)

309 
	#TLBLO_PFNTOKDMSHFT
 3

	)

310 #i‡!
deföed
(
ECCF_CACHE_ERR
)

320 
	#ECCF_CACHE_ERR
 0

	)

321 
	#ECCF_TAGLO
 1

	)

322 
	#ECCF_ECC
 2

	)

323 
	#ECCF_ERROREPC
 3

	)

324 
	#ECCF_PADDR
 4

	)

325 
	#ECCF_PADDRHI
 5

	)

326 
	#ECCF_SIZE
 (6 * ())

	)

	@/usr/include/sys/EVEREST/IP21.h

17 #i‚de‡
__SYS_IP21_H__


18 
	#__SYS_IP21_H__


	)

22 
	#_ARCSPROM


	)

24 
	#EV_CPU_PER_BOARD
 0x02

	)

26 
	#GCACHE_LINESIZE
 128

	)

27 
	#GCACHE_LINEMASK
 127

	)

29 #ifde‡
_LANGUAGE_C


30 
	#SBUS_TO_KVU
(
x
Ë((
__psunsig√d_t
)(xË| 
K1BASE
)

	)

32 
	#SBUS_TO_KVU
(
x
Ë((xË| 
K1BASE
)

	)

39 
	#CC_ADDR
(
x
Ë(
	`SBUS_TO_KVU
((xË| 0x0000000400000000))

	)

44 
	#BB_STARTUP_CTRL
 
	`CC_ADDR
(0x18000018Ë

	)

45 
	#BB_BUSTAG_ADDR
 
	`CC_ADDR
(0x18080000Ë

	)

46 
	#BB_BUSTAG_ST
 
	`CC_ADDR
(0x180c0000Ë

	)

47 
	#BB_PTAG_E_ADDR
 
	`CC_ADDR
(0x18100000Ë

	)

48 
	#BB_PTAG_E_ST
 
	`CC_ADDR
(0x18140000Ë

	)

49 
	#BB_PTAG_O_ADDR
 
	`CC_ADDR
(0x18180000Ë

	)

50 
	#BB_PTAG_O_ST
 
	`CC_ADDR
(0x181c0000Ë

	)

51 
	#BB_SET_ALLOW
 
	`CC_ADDR
(0x18400000Ë

	)

55 
	#BB_GC_SET_0
 0x1

	)

56 
	#BB_GC_SET_1
 0x2

	)

57 
	#BB_GC_SET_2
 0x4

	)

58 
	#BB_GC_SET_3
 0x8

	)

59 
	#BB_GC_SET_NORM
 0xf

	)

67 
	#EV_SPNUM
 
	`CC_ADDR
(0x18000008Ë

	)

68 
	#EV_KZRESET
 
	`CC_ADDR
(0x18000010Ë

	)

69 
	#EV_SENDINT
 
	`CC_ADDR
(0x18000100Ë

	)

70 
	#EV_SYSCONFIG
 
	`CC_ADDR
(0x18000200Ë

	)

71 
	#EV_WGDST
 
	`CC_ADDR
(0x18000300Ë

	)

72 
	#EV_WGA
 
	`CC_ADDR
(0x18000310Ë

	)

73 
	#EV_WGB
 
	`CC_ADDR
(0x18000320Ë

	)

74 
	#EV_UART_BASE
 
	`CC_ADDR
(0x18000400Ë

	)

75 
	#EV_UART_CMD
 
	`CC_ADDR
(0x18000400Ë

	)

76 
	#EV_UART_DATA
 
	`CC_ADDR
(0x18000408Ë

	)

77 
	#EV_IP0
 
	`CC_ADDR
(0x18000800Ë

	)

78 
	#EV_IP1
 
	`CC_ADDR
(0x18000808Ë

	)

79 
	#EV_HPIL
 
	`CC_ADDR
(0x18000820Ë

	)

80 
	#EV_CEL
 
	`CC_ADDR
(0x18000828Ë

	)

81 
	#EV_CIPL0
 
	`CC_ADDR
(0x18000830Ë

	)

82 
	#EV_CIPL124
 
	`CC_ADDR
(0x18000850Ë

	)

83 
	#EV_IGRMASK
 
	`CC_ADDR
(0x18000838Ë

	)

84 
	#EV_ILE
 
	`CC_ADDR
(0x18000840Ë

	)

85 
	#EV_ERTOIP
 
	`CC_ADDR
(0x18000900Ë

	)

86 
	#EV_CERTOIP
 
	`CC_ADDR
(0x18000908Ë

	)

87 
	#EV_DIAGREG
 
	`CC_ADDR
(0x18000910Ë

	)

88 
	#EV_RO_COMPARE
 
	`CC_ADDR
(0x18000a00Ë

	)

89 
	#EV_CONFIGREG_BASE
 
	`CC_ADDR
(0x18008000Ë

	)

90 
	#EV_RTC
 
	`CC_ADDR
(0x18020000Ë

	)

91 
	#EV_VOLTAGE_CTRL
 
	`CC_ADDR
(0x19002000Ë

	)

94 
	#EV_LED_BASE
 
	`CC_ADDR
(0x19004000Ë

	)

99 
	#EV_CERTOIP_MASK
 0xffff

	)

113 
	#EV_D_ERROR
 
	`CC_ADDR
(0x19000000Ë

	)

114 
	#EV_IP21_REV
 
	`CC_ADDR
(0x19000000Ë

	)

116 
	#EV_IP21REV_MASK
 0xf0

	)

117 
	#EV_IP21REV_SHFT
 4

	)

118 
	#EV_DERR_MASK
 0x0‡

	)

119 
	#EV_IP21LOWREV
 0x60

	)

120 
	#EV_IP21REV_VCR
 0x70

	)

122 
	#EV_VCR_LOW3V
 0x1

	)

123 
	#EV_VCR_HIGH3V
 0x2

	)

124 
	#EV_VCR_LOW5V
 0x4

	)

125 
	#EV_VCR_HIGH5V
 0x8

	)

131 
	#EV_RTCFREQ
 47619048

	)

132 
	#EV_RSCTOUT
 5000000

	)

133 
	#EV_IO4ETOUT
 4000000

	)

134 
	#EV_AURGTOUT
 128

	)

136 
	#EV_CONFIG1_BASE
 
	`CC_ADDR
(0x18008800Ë

	)

137 
	#EV_CONFIG2_BASE
 
	`CC_ADDR
(0x18009000Ë

	)

138 
	#EV_CONFIG3_BASE
 
	`CC_ADDR
(0x18009800)

	)

139 
	#EV_CONFIG4_BASE
 
	`CC_ADDR
(0x1800a000)

	)

140 
	#EV_CONFIG5_BASE
 
	`CC_ADDR
(0x1800a800)

	)

141 
	#EV_CONFIG6_BASE
 
	`CC_ADDR
(0x1800b000)

	)

142 
	#EV_CONFIG7_BASE
 
	`CC_ADDR
(0x1800b800)

	)

143 
	#EV_CONFIG8_BASE
 
	`CC_ADDR
(0x1800c000)

	)

144 
	#EV_CONFIG9_BASE
 
	`CC_ADDR
(0x1800c800)

	)

145 
	#EV_CONFIGa_BASE
 
	`CC_ADDR
(0x1800d000)

	)

146 
	#EV_CONFIGb_BASE
 
	`CC_ADDR
(0x1800d800)

	)

147 
	#EV_CONFIGc_BASE
 
	`CC_ADDR
(0x1800e000)

	)

148 
	#EV_CONFIGd_BASE
 
	`CC_ADDR
(0x1800e800)

	)

149 
	#EV_CONFIGe_BASE
 
	`CC_ADDR
(0x1800f000)

	)

150 
	#EV_CONFIGf_BASE
 
	`CC_ADDR
(0x1800f800)

	)

152 
	#EV_SYNC_SIGNAL
 
	`CC_ADDR
(0x1a000100)

	)

154 
	#EV_WGINPUT_BASE
 (0x8000000018300000Ë

	)

155 
	#EV_WGSTATUS
 
	`CC_ADDR
(0x18300000Ë

	)

157 
	#EV_SYNC_SIGNAL
 
	`CC_ADDR
(0x1a000100Ë

	)

162 
	#EV_PROCNUM_MASK
 0x02

	)

163 
	#EV_SLOTNUM_MASK
 0x3¯

	)

164 
	#EV_SPNUM_MASK
 0x3ê

	)

165 
	#EV_PROCNUM_SHFT
 1

	)

166 
	#EV_SLOTNUM_SHFT
 2

	)

167 
	#EV_CCREVNUM_SHFT
 6

	)

176 
	#EV_A_ENABLE
 0x0

	)

177 
	#EV_A_BOARD_TYPE
 0x1

	)

178 
	#EV_A_LEVEL
 0x2

	)

179 
	#EV_A_URGENT_TIMEOUT
 0x3

	)

180 
	#EV_A_RSC_TIMEOUT
 0x4

	)

181 
	#EV_A_ERROR
 0x6

	)

182 
	#EV_A_ERROR_CLEAR
 0x7

	)

191 
	#EV_CMPREG0
 0x10

	)

192 
	#EV_CMPREG1
 0x11

	)

193 
	#EV_CMPREG2
 0x12

	)

194 
	#EV_CMPREG3
 0x13

	)

195 
	#EV_PGBRDEN
 0x14

	)

196 
	#EV_ECCHKDIS
 0x15

	)

197 
	#EV_CACHE_SZ
 0x3ê

	)

206 
	#SRB_SWTIMO
 0x00000100

	)

207 
	#SRB_NET
 0x00000200

	)

208 
	#SRB_DEV
 0x00000400

	)

209 
	#SRB_TIMOCLK
 0x00000800

	)

210 
	#SRB_UART
 0x00001000

	)

211 
	#SRB_ERR
 0x00002000

	)

212 
	#SRB_WGTIMO
 0x00004000

	)

213 
	#SRB_GPARITYE
 0x00010000

	)

214 
	#SRB_GPARITYO
 0x00020000

	)

215 
	#SRB_SCHEDCLK
 0x00040000

	)

217 
	#II_SPL1
 
SRB_NET
|
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

218 
	#II_SPL3
 
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

219 
	#II_SPLNET
 
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

220 
	#II_SPLTTY
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

221 
	#II_SPLHI
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

222 
	#II_SPLTLB
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

223 
	#II_SPLPROF
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

224 
	#II_SPL7
 0

	)

226 
	#II_CEL1
 
EVINTR_LEVEL_BASE


	)

227 
	#II_CELNET
 
EVINTR_LEVEL_BASE


	)

228 
	#II_CEL3
 (
EVINTR_LEVEL_MAXLODEV
+1)

	)

229 
	#II_CELTTY
 (
EVINTR_LEVEL_MAXHIDEV
+1)

	)

230 
	#II_CELHI
 (
EVINTR_LEVEL_HIGH
+1)

	)

231 
	#II_CELTLB
 (
EVINTR_LEVEL_TLB
+1)

	)

232 
	#II_CELPROF
 (
EVINTR_LEVEL_EPC_PROFTIM
+1)

	)

233 
	#II_CEL7
 
EVINTR_LEVEL_MAX


	)

235 #i‡
LANGUAGE_ASSEMBLY


243 
	#EV_GET_SPNUM
(
¶Ÿ
,
¥oc
) \

244 
dli
 
¶Ÿ
, 
EV_SPNUM
 ; \

245 
ld
 
¶Ÿ
, 0(slot) ; \

246 
n›
 ; \

247 
™di
 
¶Ÿ
, 
EV_SPNUM_MASK
; \

248 
™d
 
¥oc
, 
¶Ÿ
, 
EV_PROCNUM_MASK
 ; \

249 
§l
 
¥oc
, 
EV_PROCNUM_SHFT
 ; \

250 
§l
 
¶Ÿ
, 
EV_SLOTNUM_SHFT


	)

260 
	#EV_GET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

261 
¶l
 
k0
, 
¶Ÿ
, 11 ; \

262 
dadd
 
k0
, 
EV_CONFIGREG_BASE
 ; \

263 
dadd
 
vÆue
, 
zîo
, 
ªg
 ; \

264 
¶l
 
vÆue
, 3 ; \

265 
dadd
 
k0
, 
vÆue
 ; \

266 
ld
 
vÆue
, 0(
k0
) ; \

267 
n›


	)

269 
	#EV_SET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

270 
¶l
 
k0
, 
¶Ÿ
, 11 ; \

271 
dadd
 
k0
, 
EV_CONFIGREG_BASE
 ; \

272 
dadd
 
k1
, 
zîo
, 
ªg
 ; \

273 
¶l
 
k1
, 3 ; \

274 
dadd
 
k0
, 
k1
 ; \

275 
‹
 
k1
, 
zîo
, 
vÆue
 ; \

276 
sd
 
k1
, 0(
k0
) ; \

277 
n›


	)

286 
	#EV_GET_PROCREG
(
¶Ÿ
,
¥oc
,
ªg
,
vÆue
) \

287 
¶l
 
k1
, 
¥oc
, 7 ; \

288 
dadd
 
k1
, 
ªg
 ; \

289 
	`EV_GET_CONFIG
(
¶Ÿ
,
k1
,
vÆue
)

	)

291 
	#EV_SET_PROCREG
(
¶Ÿ
,
¥oc
,
ªg
,
vÆue
) \

292 
¶l
 
k1
, 
¥oc
, 7; \

293 
dadd
 
k1
, 
ªg
 ; \

294 
	`EV_SET_CONFIG
(
¶Ÿ
,
k1
,
vÆue
)

	)

303 #i‡
_LANGUAGE_C


305 
	#EV_GET_CONFIG
(
¶Ÿ
,
ªg
) \

306 
	`lﬂd_doubÀ_lo
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)))

	)

308 
	#EV_GET_CONFIG_HI
(
¶Ÿ
,
ªg
) \

309 
	`lﬂd_doubÀ_hi
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)))

	)

311 
	#EV_SET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

312 
	`°‹e_doubÀ_lo
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)), (
vÆue
))

	)

314 
	#EV_GET_CONFIG_NOWAR
(
¶Ÿ
,
ªg
) \

315 
	`lﬂd_doubÀ_lo_now¨
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)))

	)

317 
	#EV_GET_CONFIG_HI_NOWAR
(
¶Ÿ
,
ªg
) \

318 
	`lﬂd_doubÀ_hi_now¨
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)))

	)

328 #ifde‡
_STANDALONE


329 
	#NORMAL_SR
 (
SR_FR
 | 
SR_IE
)

	)

333 #i‚de‡
TFP_PTE64


337 
	#TLBLO_HWBITSHIFT
 3

	)

	@/usr/include/sys/EVEREST/IP25.h

17 #i‚de‡
__SYS_EVEREST_IP25_H_


18 
	#__SYS_EVEREST_IP25_H_


	)

22 
	#_ARCSPROM


	)

24 
	#EV_CPU_PER_BOARD
 0x04

	)

26 
	#SCACHE_LINESIZE
 128

	)

27 
	#SCACHE_LINEMASK
 127

	)

29 #ifde‡
_LANGUAGE_C


30 
	#SBUS_TO_KVU
(
x
Ë((
__psunsig√d_t
)(xË| 
K1BASE
)

	)

32 
	#SBUS_TO_KVU
(
x
Ë((xË| 
K1BASE
)

	)

39 
	#CC_ADDR
(
x
Ë(
	`SBUS_TO_KVU
((x)))

	)

44 
	#EV_SPNUM
 
	`CC_ADDR
(0x18000008Ë

	)

45 
	#EV_KZRESET
 
	`CC_ADDR
(0x18000010Ë

	)

46 
	#EV_SENDINT
 
	`CC_ADDR
(0x18000100Ë

	)

47 
	#EV_SYSCONFIG
 
	`CC_ADDR
(0x18000200Ë

	)

48 
	#EV_GRDST
 
	`CC_ADDR
(0x18000300Ë

	)

49 
	#EV_GRCNTL
 
	`CC_ADDR
(0x18000308Ë

	)

50 
	#EV_UART_BASE
 
	`CC_ADDR
(0x18000400Ë

	)

51 
	#EV_UART_CMD
 
	`CC_ADDR
(0x18000400Ë

	)

52 
	#EV_UART_DATA
 
	`CC_ADDR
(0x18000408Ë

	)

53 
	#EV_SCRATCH
 
	`CC_ADDR
(0x18000500Ë

	)

54 
	#EV_IP0
 
	`CC_ADDR
(0x18000800Ë

	)

55 
	#EV_IP1
 
	`CC_ADDR
(0x18000808Ë

	)

56 
	#EV_HPIL
 
	`CC_ADDR
(0x18000820Ë

	)

57 
	#EV_CEL
 
	`CC_ADDR
(0x18000828Ë

	)

58 
	#EV_CIPL0
 
	`CC_ADDR
(0x18000830Ë

	)

59 
	#EV_IGRMASK
 
	`CC_ADDR
(0x18000838Ë

	)

60 
	#EV_ILE
 
	`CC_ADDR
(0x18000840Ë

	)

61 
	#EV_CIPL124
 
	`CC_ADDR
(0x18000850Ë

	)

62 
	#EV_ERTOIP
 
	`CC_ADDR
(0x18000900Ë

	)

63 
	#EV_CERTOIP
 
	`CC_ADDR
(0x18000908Ë

	)

64 
	#EV_ECCSB
 
	`CC_ADDR
(0x18000910Ë

	)

65 
	#EV_ERADDR
 
	`CC_ADDR
(0x18000918Ë

	)

66 
	#EV_ERTAG
 
	`CC_ADDR
(0x18000920Ë

	)

67 
	#EV_ERSYSBUS_LO
 
	`CC_ADDR
(0x18000928Ë

	)

68 
	#EV_ERSYSBUS_HI
 
	`CC_ADDR
(0x18000930)

	)

69 
	#EV_DEBUG_BASE
 
	`CC_ADDR
(0x18000938Ë

	)

70 
	#EV_DEBUG0
 
	`CC_ADDR
(0x18000938Ë

	)

71 
	#EV_DEBUG1
 
	`CC_ADDR
(0x18000940Ë

	)

72 
	#EV_DEBUG2
 
	`CC_ADDR
(0x18000948Ë

	)

73 
	#EV_RO_COMPARE
 
	`CC_ADDR
(0x18000a00Ë

	)

74 
	#EV_BTRAM_BASE
 
	`CC_ADDR
(0x181c0000Ë

	)

75 
	#EV_BUSTAG_BASE
 
EV_BTRAM_BASE


	)

76 
	#EV_BTRAM_WAY
 0x8

	)

77 
	#EV_CONFIGREG_BASE
 
	`CC_ADDR
(0x18008000Ë

	)

78 
	#EV_RTC
 
	`CC_ADDR
(0x18020000Ë

	)

79 
	#EV_LED_BASE
 
	`CC_ADDR
(0x19004000Ë

	)

80 
	#EV_SYNC_SIGNAL
 
	`CC_ADDR
(0x1a000100Ë

	)

82 
	#EV_WGINPUT_BASE
 (0xbe00000018300000Ë

	)

87 
	#EV_PROCNUM_MASK
 0x03

	)

88 
	#EV_SLOTNUM_MASK
 0x3¯

	)

89 
	#EV_SPNUM_MASK
 0x3‡

	)

90 
	#EV_PROCNUM_SHFT
 0

	)

91 
	#EV_SLOTNUM_SHFT
 2

	)

92 
	#EV_CCREVNUM_SHFT
 6

	)

97 
	#EV_A_ENABLE
 0x0

	)

98 
	#EV_A_BOARD_TYPE
 0x1

	)

99 
	#EV_A_LEVEL
 0x2

	)

100 
	#EV_A_URGENT_TIMEOUT
 0x3

	)

101 
	#EV_A_RSC_TIMEOUT
 0x4

	)

102 
	#EV_A_ERROR
 0x6

	)

103 
	#EV_A_ERROR_CLEAR
 0x7

	)

110 
	#EV_CFG_CMPREG0
 0x10

	)

111 
	#EV_CFG_CMPREG1
 0x11

	)

112 
	#EV_CFG_CMPREG2
 0x12

	)

113 
	#EV_CFG_CMPREG3
 0x13

	)

114 
	#EV_CFG_PGBRDEN
 0x14

	)

115 
	#EV_CFG_ECCHKDIS
 0x15

	)

116 
	#EV_CFG_SCCREV
 0x19

	)

117 
	#EV_CFG_DEBUG0_MSW
 0x1®

	)

118 
	#EV_CFG_DEBUG0_LSW
 0x1b

	)

119 
	#EV_CFG_DEBUG1_MSW
 0x1¯

	)

120 
	#EV_CFG_DEBUG1_LSW
 0x1d

	)

121 
	#EV_CFG_DEBUG2_MSW
 0x1ê

	)

122 
	#EV_CFG_DEBUG2_LSW
 0x1‡

	)

123 
	#EV_CFG_IWTRIG
 0x20

	)

124 
	#EV_CFG_ERTOIP
 0x28

	)

125 
	#EV_CFG_CERTOIP
 0x29

	)

126 
	#EV_CFG_ERADDR_HI
 0x2®

	)

127 
	#EV_CFG_ERADDR_LO
 0x2b

	)

128 
	#EV_CFG_ERTAG
 0x2¯

	)

129 
	#EV_CFG_ERSYSBUS_HI
 0x2d

	)

130 
	#EV_CFG_ERSYSBUS_LO_HI
 0x2ê

	)

131 
	#EV_CFG_ERSYSBUS_LO_LO
 0x2‡

	)

132 
	#EV_CFG_FTOUT
 0x30

	)

133 
	#EV_CFG_CACHE_SZ
 0x3ê

	)

137 
	#EV_CMPREG0
 
EV_CFG_CMPREG0


	)

138 
	#EV_CMPREG1
 
EV_CFG_CMPREG1


	)

139 
	#EV_CMPREG2
 
EV_CFG_CMPREG2


	)

140 
	#EV_CMPREG3
 
EV_CFG_CMPREG3


	)

141 
	#EV_PGBRDEN
 
EV_CFG_PGBRDEN


	)

142 
	#EV_ECCHKDIS
 
EV_CFG_ECCHKDIS


	)

143 
	#EV_SCCREV
 
EV_CFG_SCCREV


	)

144 
	#EV_IWTRIG
 
EV_CFG_IWTRIG


	)

145 
	#EV_ERADDR_HI
 
EV_CFG_ERADDR_HI


	)

146 
	#EV_ERADDR_LO
 
EV_CFG_ERADDR_LO


	)

147 
	#EV_ERSYSBUS_LO_LO
 
EV_CFG_ERSYSBUS_LO_LO


	)

148 
	#EV_ERSYSBUS_LO_HI
 
EV_CFG_ERSYSBUS_LO_HI


	)

149 
	#EV_FTOUT
 
EV_CFG_FTOUT


	)

150 
	#EV_CACHE_SZ
 
EV_CFG_CACHE_SZ


	)

154 
	#EV_CERTOIP_MASK
 0x001fffff

	)

156 
	#EV_GRCNTL_IC
 0x4

	)

157 
	#EV_GRCNTL_WS
 0x2

	)

158 
	#EV_GRCNTL_ENABLE
 0x1

	)

160 
	#EV_ECCSB_SWM
 0x8

	)

161 
	#EV_ECCSB_ITP
 0x4

	)

162 
	#EV_ECCSB_GBTP
 0x2

	)

163 
	#EV_ECCSB_DIAL
 0x2

	)

164 
	#EV_ECCSB_DSBECC
 0x1

	)

170 
	#EV_ECCHKDIS_15_SHFT
 12

	)

171 
	#EV_ECCHKDIS_15_MASK
 (3<<
EV_ECCHKDIS_15_SHFT
)

	)

172 
	#EV_ECCHKDIS_50_SHFT
 10

	)

173 
	#EV_ECCHKDIS_50_MASK
 (3<<
EV_ECCHKDIS_50_SHFT
)

	)

174 
	#EV_ECCHKDIS_33_SHFT
 8

	)

175 
	#EV_ECCHKDIS_33_MASK
 (3<<
EV_ECCHKDIS_33_SHFT
)

	)

176 
	#EV_ECCHKDIS_RU_SGP
 0x4

	)

177 
	#EV_ECCHKDIS_W_SGP
 0x2

	)

178 
	#EV_ECCHKDIS_ECC
 0x1

	)

180 
	#EV_MGN_NOM
 0x0

	)

181 
	#EV_MGN_HI
 0x1

	)

182 
	#EV_MGN_LO
 0x2

	)

184 
	#EV_ERTAG_MASK
 0x7fff

	)

203 
	#CTD_STATE_SHFT
 22

	)

204 
	#CTD_STATE_MASK
 (0x3<<
CTD_STATE_SHFT
)

	)

205 
	#CTD_STATE_I
 0

	)

206 
	#CTD_STATE_S
 1

	)

207 
	#CTD_STATE_X
 3

	)

208 
	#CTD_TAG_SHFT
 0

	)

209 
	#CTD_TAG_MASK
 (0x1fffff<<
CTD_TAG_SHFT
)

	)

210 
	#CTD_SIZE
 8

	)

211 
	#CTD_MASK
 (
CTD_TAG_MASK
+
CDT_TAG_MASK
)

	)

219 
	#IP25_CACHESIZE
(
code
Ë(2 << (24-(code)))

	)

221 #i‡
LANGUAGE_ASSEMBLY


229 
	#EV_GET_SPNUM
(
¶Ÿ
,
¥oc
) \

230 
dli
 
¶Ÿ
, 
EV_SPNUM
 ; \

231 
ld
 
¶Ÿ
, 0(slot) ; \

232 
n›
 ; \

233 
™di
 
¶Ÿ
, 
EV_SPNUM_MASK
; \

234 
™d
 
¥oc
, 
¶Ÿ
, 
EV_PROCNUM_MASK
 ; \

235 
§l
 
¥oc
, 
EV_PROCNUM_SHFT
 ; \

236 
§l
 
¶Ÿ
, 
EV_SLOTNUM_SHFT


	)

246 
	#EV_GET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

247 
¶l
 
k0
, 
¶Ÿ
, 11 ; \

248 
dadd
 
k0
, 
EV_CONFIGREG_BASE
 ; \

249 
dadd
 
vÆue
, 
zîo
, 
ªg
 ; \

250 
¶l
 
vÆue
, 3 ; \

251 
dadd
 
k0
, 
vÆue
 ; \

252 
ld
 
vÆue
, 0(
k0
) ; \

253 
n›


	)

255 
	#EV_SET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

256 
¶l
 
k0
, 
¶Ÿ
, 11 ; \

257 
dadd
 
k0
, 
EV_CONFIGREG_BASE
 ; \

258 
dadd
 
k1
, 
zîo
, 
ªg
 ; \

259 
¶l
 
k1
, 3 ; \

260 
dadd
 
k0
, 
k1
 ; \

261 
‹
 
k1
, 
zîo
, 
vÆue
 ; \

262 
sd
 
k1
, 0(
k0
) ; \

263 
n›


	)

272 
	#EV_GET_PROCREG
(
¶Ÿ
,
¥oc
,
ªg
,
vÆue
) \

273 
¶l
 
k1
, 
¥oc
, 6; \

274 
dadd
 
k1
, 
ªg
 ; \

275 
	`EV_GET_CONFIG
(
¶Ÿ
,
k1
,
vÆue
)

	)

277 
	#EV_SET_PROCREG
(
¶Ÿ
,
¥oc
,
ªg
,
vÆue
) \

278 
¶l
 
k1
, 
¥oc
, 6; \

279 
dadd
 
k1
, 
ªg
 ; \

280 
	`EV_SET_CONFIG
(
¶Ÿ
,
k1
,
vÆue
)

	)

289 #i‡
_LANGUAGE_C


291 
	#EV_GET_CONFIG
(
¶Ÿ
,
ªg
) \

292 
	`lﬂd_doubÀ_lo
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)))

	)

294 
	#EV_GET_CONFIG_HI
(
¶Ÿ
,
ªg
) \

295 
	`lﬂd_doubÀ_hi
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)))

	)

297 
	#EV_SET_CONFIG
(
¶Ÿ
,
ªg
,
vÆue
) \

298 
	`°‹e_doubÀ_lo
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),0,(
ªg
)), (
vÆue
))

	)

307 #ifde‡
_STANDALONE


308 
	#NORMAL_SR
 (
SR_KX
|
SR_FR
)

	)

314 
	#SRB_SWTIMO
 0x00000100

	)

315 
	#SRB_NET
 0x00000200

	)

316 
	#SRB_DEV
 0x00000400

	)

317 
	#SRB_TIMOCLK
 0x00000800

	)

318 
	#SRB_UART
 0x00001000

	)

319 
	#SRB_ERR
 0x00002000

	)

320 
	#SRB_WGTIMO
 0x00004000

	)

321 
	#SRB_SCHEDCLK
 0x00008000

	)

323 
	#II_SPL1
 
SRB_NET
|
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

324 
	#II_SPL3
 
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

325 
	#II_SPLNET
 
SRB_DEV
|
SRB_UART
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

326 
	#II_SPLTTY
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO
|
SRB_SCHEDCLK


	)

327 
	#II_SPLHI
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

328 
	#II_SPLTLB
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

329 
	#II_SPLPROF
 
SRB_DEV
|
SRB_ERR
|
SRB_WGTIMO


	)

330 
	#II_SPL7
 0

	)

332 
	#II_CEL1
 
EVINTR_LEVEL_BASE


	)

333 
	#II_CELNET
 
EVINTR_LEVEL_BASE


	)

334 
	#II_CEL3
 (
EVINTR_LEVEL_MAXLODEV
+1)

	)

335 
	#II_CELTTY
 (
EVINTR_LEVEL_MAXHIDEV
+1)

	)

336 
	#II_CELHI
 (
EVINTR_LEVEL_HIGH
+1)

	)

337 
	#II_CELTLB
 (
EVINTR_LEVEL_TLB
+1)

	)

338 
	#II_CELPROF
 (
EVINTR_LEVEL_EPC_PROFTIM
+1)

	)

339 
	#II_CEL7
 
EVINTR_LEVEL_MAX


	)

346 
	#TLBLO_HWBITS
 0xfffffff‡

	)

347 
	#TLBLO_HWBITSHIFT
 0

	)

348 
	#TLBLO_PFNTOKDMSHFT
 0

	)

363 
	#LED_EVERROR
 0x20

	)

364 
	#LED_CACHERR
 0x10

	)

365 
	#LED_CYCLE_MASK
 0x0f

	)

366 
	#LED_CYCLE_SHFT
 4

	)

	@/usr/include/sys/EVEREST/everest.h

17 #i‚de‡
__SYS_EVEREST_H__


18 
	#__SYS_EVEREST_H__


	)

26 
	#EV_MAX_SLOTS
 16

	)

27 
	#EV_MAX_CPUS_BOARD
 4

	)

33 
	#EV_MAX_IPS
 13

	)

42 #i‡
LARGE_CPU_COUNT_EVEREST


43 
	#EV_MAX_CPUS
 128

	)

44 
	#REAL_EV_MAX_CPUS
 52

	)

46 
	#EV_MAX_CPUS
 52

	)

49 
	#EV_MAX_MC3S
 8

	)

50 
	#EV_MAX_IO4S
 8

	)

51 
	#EV_MAX_VMEADAPS
 5

	)

52 
	#EV_MAX_HIPADAPS
 8

	)

53 
	#EV_MAX_EPCADAPS
 3

	)

54 
	#EV_MAX_FCGADAPS
 3

	)

55 
	#EV_MAX_DANGADAPS
 12

	)

56 
	#EV_MAX_S1ADAPS
 16

	)

61 
	#EV_BOARDENB
 0x00

	)

62 
	#EV_BOARDTYPE
 0x01

	)

63 
	#EV_BOARDREVLVL
 0x02

	)

68 
	#EV_IP19_BOARD
 0x1

	)

69 
	#EV_IP21_BOARD
 0x2

	)

70 
	#EV_IP25_BOARD
 0x3

	)

75 
	#EV_CPU_R4000
 0x1

	)

76 
	#EV_CPU_TFP
 0x2

	)

77 
	#EV_CPU_R10000
 0x3

	)

78 
	#EV_CPU_NONE
 (-1Ë

	)

80 #i‡
_LANGUAGE_C
 && (
_KERNEL
 || 
_STANDALONE
)

87 
lﬂd_doubÀ_lo
(*);

88 
lﬂd_doubÀ_now¨
(*);

89 
lﬂd_doubÀ_scc
(*);

91 #i‡
_MIPS_SIM
 =
_ABI64
 && !
TFP


92 
	#lﬂd_doubÀ
(
ªg
Ë*(vﬁ©ûê*)‘eg)

	)

94 
lﬂd_doubÀ
(*);

96 #i‡
_MIPS_SIM
 =
_ABI64


97 
	#°‹e_doubÀ
(
ªg
, 
vÆ
Ë*(vﬁ©ûê*)‘egË()(vÆ)

	)

99 
°‹e_doubÀ
(*, );

115 
	#EV_GET_LOCAL
(
addªss
) \

116 ((
evªg_t
)
	`lﬂd_doubÀ
((*)(
addªss
)))

	)

118 
	#EV_GET_LOCAL_NOWAR
(
addªss
) \

119 ((
evªg_t
)
	`lﬂd_doubÀ_now¨
((*)(
addªss
)))

	)

121 
	#EV_SET_LOCAL
(
addªss
,
vÆue
) \

122 (
	`°‹e_doubÀ
((*)(
addªss
), (Ë
vÆue
))

	)

124 #i‡
IP25


125 
	#EV_GET_SYSCONFIG
() \

126 ((
evªg_t
)
	`lﬂd_doubÀ_scc
((*)(
EV_SYSCONFIG
)))

	)

128 
	#EV_GET_SYSCONFIG
() \

129 
	`EV_GET_LOCAL
(
EV_SYSCONFIG
)

	)

132 #i‡
_LANGUAGE_C
 && 
_KERNEL


133 #if 
deföed
(
MULTIPLE_CFG_WRITE_WAR
)

134 
lock_t
 
c⁄figLock
;

135 
	#EV_CONFIG_LOCK
(
s
Ë†
	`io_•lock•l
(
c⁄figLock
, 
•l7
)

	)

136 
	#EV_CONFIG_UNLOCK
(
s
Ë
	`io_•u∆ock•l
(
c⁄figLock
, s)

	)

137 
	#EV_INTR_LOCK
(
s
Ë
	`EV_CONFIG_LOCK
(s)

	)

138 
	#EV_INTR_UNLOCK
(
s
Ë
	`EV_CONFIG_UNLOCK
(s)

	)

140 
	#EV_CONFIG_LOCK
(
s
)

	)

141 
	#EV_CONFIG_UNLOCK
(
s
)

	)

142 
	#EV_INTR_LOCK
(
s
)

	)

143 
	#EV_INTR_UNLOCK
(
s
)

	)

146 #if 
deföed
(
MC3_CFG_READ_WAR
)

147 
lock_t
 
mc3_cfgLock
;

148 
˝umask_t
 
isﬁ©e_˝umask
;

149 
ign‹e_isﬁ©ed_˝u_w¨nög
;

151 
k_°›_Æl_˝us
();

152 
un°›_Æl_˝us
();

153 
•ecül_dﬂcvec
();

154 
•ecül_åylock
(
lock_t
 *, 
∂_t
);

155 
•ecül_u∆ock
(
lock_t
 *, );

157 
	#MC3_CONFIG_TRYLOCK
(
s
) \

159 
s
 = 
	`•ecül_åylock
(&
mc3_cfgLock
, 
•l7
); \

160 i‡(
s
 == -1) { \

161 
	`•ecül_dﬂcvec
(); \

166 } 1)

	)

167 
	#MC3_CONFIG_UNLOCK
(
s
Ë
	`•ecül_u∆ock
(&
mc3_cfgLock
, s)

	)

169 
	#MC3_CFG_LOCK_AND_STOP
(
o•l
) \

170 
	`MC3_CONFIG_TRYLOCK
(
o•l
); \

171 i‡(
isﬁ©e_˝umask
 && !
ign‹e_isﬁ©ed_˝u_w¨nög
) \

172 
	`cmn_îr
(
CE_WARN
,"MC3_CFG_READ_WARÉncountered isolated cpus"); \

173 
	`k_°›_Æl_˝us
()

	)

175 
	#MC3_CFG_UNLOCK_AND_RESUME
(
o•l
) \

176 
	`un°›_Æl_˝us
(); \

177 
	`MC3_CONFIG_UNLOCK
(
o•l
)

	)

181 
	#MC3_CONFIG_TRYLOCK
(
s
)

	)

182 
	#MC3_CONFIG_UNLOCK
(
s
)

	)

183 
	#MC3_CFG_LOCK_AND_STOP
(
o•l
)

	)

184 
	#MC3_CFG_UNLOCK_AND_RESUME
(
o•l
)

	)

188 #if 
deföed
(
IO4_CFG_READ_WAR
)

189 
lock_t
 
io4_cfgLock
;

190 
io4ü_w¨
;

191 
	#IO4_CONFIG_LOCK
(
s
) \

192 i‡(
io4ü_w¨
Ë
s
 = 
	`io_•lock•l
(
io4_cfgLock
, 
•l7
)

	)

193 
	#IO4_CONFIG_UNLOCK
(
s
Ëi‡(
io4ü_w¨
Ë
	`io_•u∆ock•l
(
io4_cfgLock
, s)

	)

195 
	#IO4_CONFIG_LOCK
(
s
)

	)

196 
	#IO4_CONFIG_UNLOCK
(
s
)

	)

207 #i‡
TFP_CC_REGISTER_READ_WAR


208 
	#EV_GET_LOCAL_RTC
 \

209 ((
evªg_t
)*(vﬁ©ûê*)(
EV_RTC
))

	)

210 
	#EV_GET_LOCAL_HPIL
 \

211 ((
evªg_t
)*(vﬁ©ûê*)(
EV_HPIL
))

	)

213 
	#EV_GET_LOCAL_RTC
 
	`EV_GET_LOCAL
(
EV_RTC
)

	)

214 
	#EV_GET_LOCAL_HPIL
 
	`EV_GET_LOCAL
(
EV_HPIL
)

	)

221 
	#NSEC_PER_CYCLE
 21

	)

222 
	#CYCLE_PER_SEC
 (
NSEC_PER_SEC
/
NSEC_PER_CYCLE
)

	)

227 
	#EV_BOARD_MAX
 16

	)

228 
	#EV_BOARD_MASK
 0x00000000fff‡

	)

229 
	#EV_CPU_MASK
 0x0000ffff0000

	)

230 
	#EV_MEM_MASK
 0xffff00000000

	)

231 
	#EV_BOARD_SHFT
 0

	)

232 
	#EV_CPU_SHFT
 16

	)

233 
	#EV_MEM_SHFT
 32

	)

239 
	#EV_EBUSINT_MASK
 0x1

	)

240 
	#EV_CMPINT_MASK
 0x2

	)

241 
	#EV_UARTINT_MASK
 0x4

	)

242 
	#EV_ERTOINT_MASK
 0x8

	)

243 
	#EV_WGINT_MASK
 0x10

	)

244 
	#EV_EBUSINT_SHFT
 0

	)

245 
	#EV_CMPINT_SHFT
 1

	)

246 
	#EV_UARTINT_SHFT
 2

	)

247 
	#EV_ERTOINT_SHFT
 3

	)

248 
	#EV_WGINT_SHFT
 4

	)

251 #i‡
_LANGUAGE_C


258 
	#EV_CONFIGADDR
(
¶Ÿ
,
¥oc
,
ªg
) \

259 ((
evªg_t
 *)(
EV_CONFIGREG_BASE
 + ((
¶Ÿ
)<<11Ë+ ((
ªg
+(0x40*(
¥oc
)))<<3)))

	)

261 
	#EV_SETCONFIG_REG
(
¶Ÿ
,
¥oc
,
ªg
,
vÆue
) \

262 (
	`°‹e_doubÀ
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),(
¥oc
),(
ªg
)), ()(
vÆue
)))

	)

264 
	#EV_GETCONFIG_REG
(
¶Ÿ
,
¥oc
,
ªg
) \

265 ((
evªg_t
)
	`lﬂd_doubÀ
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),(
¥oc
),(
ªg
))))

	)

267 
	#EV_GETCONFIG_REG_NOWAR
(
¶Ÿ
,
¥oc
,
ªg
) \

268 ((
evªg_t
)
	`lﬂd_doubÀ_now¨
((*)
	`EV_CONFIGADDR
((
¶Ÿ
),(
¥oc
),(
ªg
))))

	)

275 
	#EV_SETMYCONFIG_REG
(
ªg
,
vÆue
) \

276 
	`EV_SETCONFIG_REG
(
˝uid_to_¶Ÿ
[
	`˝uid
()], 
˝uid_to_˝u
[˝uid()]<<
EV_PROCNUM_SHFT
, (
ªg
), (
evªg_t
)(
vÆue
))

	)

278 
	#EV_GETMYCONFIG_REG
(
ªg
) \

279 (
evªg_t
)
	`EV_GETCONFIG_REG
(
˝uid_to_¶Ÿ
[
	`˝uid
()], 
˝uid_to_˝u
[˝uid()]<<
EV_PROCNUM_SHFT
, (
ªg
))

	)

281 
	#EV_SET_MYCMPREG
(
time
) { \

282 
	`EV_SETMYCONFIG_REG
(
EV_CMPREG0
, (
time
)); \

283 
	`EV_SETMYCONFIG_REG
(
EV_CMPREG1
, (
time
)>>8); \

284 
	`EV_SETMYCONFIG_REG
(
EV_CMPREG2
, (
time
)>>16); \

285 
	`EV_SETMYCONFIG_REG
(
EV_CMPREG3
, (
time
)>>24); \

286 }

	)

291 #i‡
R4000
 || 
R10000


292 
	#CAUSE_BERRINTR
 
CAUSE_IP7


	)

295 #i‡
_LANGUAGE_C


296 
	~<sys/ty≥s.h
>

298 
__uöt64_t
 
	tevªg_t
;

300 
	#EV_GET_REG
(
ªg
) \

301 (
evªg_t
)
	`lﬂd_doubÀ
((*)(
ªg
))

	)

303 
	#EV_GET_REG_NOWAR
(
ªg
) \

304 (
evªg_t
)
	`lﬂd_doubÀ_now¨
((*)(
ªg
))

	)

306 
	#EV_SET_REG
(
ªg
,
vÆue
) \

307 
	`°‹e_doubÀ
((*)(
ªg
), ()(
vÆue
))

	)

309 #i‡
_KERNEL


310 
˝uid_to_¶Ÿ
[];

311 
˝uid_to_˝u
[];

314 
	sscuzzy
 {

315 vﬁ©ûê
u_ch¨
 *
	md_addr
;

316 vﬁ©ûê
u_ch¨
 *
	md_d©a
;

317 vﬁ©ûê
u_ch¨
 *
	ms1_ba£
;

318 vﬁ©ûê
u_öt
 *
	mdma_wrôe
;

319 vﬁ©ûê
u_öt
 *
	mdma_ªad
;

320 vﬁ©ûê
u_öt
 *
	mdma_xœéo
;

321 vﬁ©ûê
u_öt
 *
	mdma_xœthi
;

322 vﬁ©ûê
u_öt
 *
	mdma_Êush
;

323 vﬁ©ûê
u_öt
 *
	mdma_ª£t
;

324 vﬁ©ûê
u_öt
 *
	m°©cmd
;

325 vﬁ©ûê
u_öt
 *
	mibu£º
;

326 
u_ch¨
 
	mch™√l
;

327 
u_ch¨
 
	mîrch™0
;

329 
u_ch¨
 
	mdm´º‹
;

330 
u_ch¨
 
	md_öôÊags
;

331 
u_ch¨
 
	md_˛ock
;

332 } 
	tscuzzy_t
;

340 
	#OSPL_CEL
 0x0000007‡

	)

341 
	#OSPL_TRY1
 0x00000080

	)

344 
	#OSPL_IMASK
 
SR_IMASK


	)

345 
	#OSPL_SPDBG
 0x00080000

	)

348 
	#OSPL_IMPSPIN
 0x000400000

	)

349 
	#OSPL_NETSPIN
 0x000200000

	)

350 
	#OSPL_NETSET
 0x000100000

	)

351 
	#OSPL_NETBITS
 (
OSPL_IMPSPIN
 | 
OSPL_NETSPIN
 | 
OSPL_NETSET
)

	)

354 #ifde‡
IP21


355 
	~<sys/EVEREST/IP21.h
>

356 #ñi‡
IP25


357 
	~<sys/EVEREST/IP25.h
>

359 
	~<sys/EVEREST/IP19.h
>

369 #i‡
_LANGUAGE_C


370 
io4ü_w¨
;

371 
io4_Êush_ˇche
(
∑ddr_t
);

	@/usr/include/sys/IP20.h

19 #i‚de‡
__SYS_IP20_H__


20 
	#__SYS_IP20_H__


	)

22 
	#_ARCSPROM


	)

24 
	#MCREGWBUG


	)

25 
	~"sys/mc.h
"

26 #i‡!
deföed
(
_STANDALONE
)

27 
	~"sys/ty≥s.h
"

33 #ifdef 
_MIPSEB


34 
	#LIO_0_ISR_ADDR
 0x1fb801c3

	)

35 
	#LIO_1_ISR_ADDR
 0x1fb801cb

	)

37 
	#LIO_0_ISR_ADDR
 0x1fb801c0

	)

38 
	#LIO_1_ISR_ADDR
 0x1fb801c8

	)

42 
	#LIO_FIFO
 0x01

	)

43 
	#LIO_GIO_0
 0x01

	)

44 
	#LIO_CENTR
 0x02

	)

45 
	#LIO_SCSI
 0x04

	)

46 
	#LIO_ENET
 0x08

	)

47 
	#LIO_GDMA
 0x10

	)

48 
	#LIO_DUART
 0x20

	)

49 
	#LIO_GIO_1
 0x40

	)

50 
	#LIO_VME0
 0x80

	)

53 
	#LIO_BIT0_UNUSED
 0x01

	)

54 
	#LIO_GR1MODE
 0x02

	)

55 
	#LIO_BIT2_UNUSED
 0x04

	)

56 
	#LIO_VME1
 0x08

	)

57 
	#LIO_DSP
 0x10

	)

58 
	#LIO_AC
 0x20

	)

59 
	#LIO_VIDEO
 0x40

	)

60 
	#LIO_GIO_2
 0x80

	)

65 #ifdef 
_MIPSEB


66 
	#LIO_0_MASK_ADDR
 0x1fb801c7

	)

67 
	#LIO_1_MASK_ADDR
 0x1fb801c‡

	)

69 
	#LIO_0_MASK_ADDR
 0x1fb801c4

	)

70 
	#LIO_1_MASK_ADDR
 0x1fb801c¯

	)

74 
	#LIO_FIFO_MASK
 0x01

	)

75 
	#LIO_CENTR_MASK
 0x02

	)

76 
	#LIO_SCSI_MASK
 0x04

	)

77 
	#LIO_ENET_MASK
 0x08

	)

78 
	#LIO_GDMA_MASK
 0x10

	)

79 
	#LIO_DUART_MASK
 0x20

	)

80 
	#LIO_GE_MASK
 0x40

	)

81 
	#LIO_VME0_MASK
 0x80

	)

84 
	#LIO_MASK_BIT0_UNUSED
 0x01

	)

85 
	#LIO_MASK_BIT1_UNUSED
 0x02

	)

86 
	#LIO_MASK_BIT2_UNUSED
 0x04

	)

87 
	#LIO_VME1_MASK
 0x08

	)

88 
	#LIO_DSP_MASK
 0x10

	)

89 
	#LIO_AC_MASK
 0x20

	)

90 
	#LIO_VIDEO_MASK
 0x40

	)

91 
	#LIO_VR_MASK
 0x80

	)

94 
	#VECTOR_GIO0
 0

	)

95 
	#VECTOR_PLP
 1

	)

96 
	#VECTOR_SCSI
 2

	)

97 
	#VECTOR_ENET
 3

	)

98 
	#VECTOR_GDMA
 4

	)

99 
	#VECTOR_DUART
 5

	)

100 
	#VECTOR_GIO1
 6

	)

101 
	#VECTOR_VME0
 7

	)

102 
	#VECTOR_ILOCK
 9

	)

103 
	#VECTOR_VME1
 11

	)

104 
	#VECTOR_DSP
 12

	)

105 
	#VECTOR_ACFAIL
 13

	)

106 
	#VECTOR_VIDEO
 14

	)

107 
	#VECTOR_GIO2
 15

	)

110 
	#LIO_ADDR
 0x1f000000

	)

111 
	#LIO_GFX_SIZE
 0x00400000

	)

112 
	#LIO_GIO_SIZE
 0x00600000

	)

115 
	#GIO_INTERRUPT_0
 0

	)

116 
	#GIO_INTERRUPT_1
 1

	)

117 
	#GIO_INTERRUPT_2
 2

	)

120 
	#GIO_SLOT_0
 0

	)

121 
	#GIO_SLOT_1
 1

	)

122 
	#GIO_SLOT_GFX
 2

	)

129 #ifdef 
_MIPSEB


130 
	#PORT_CONFIG
 0x1fb801d‡

	)

132 
	#PORT_CONFIG
 0x1fb801d¯

	)

135 
	#PCON_PARITY
 0x01

	)

136 
	#PCON_SERTCLK
 0x01

	)

137 
	#PCON_SER0RTS
 0x02

	)

138 
	#PCON_SER1RTS
 0x04

	)

139 
	#PCON_CLEARVRI
 0x08

	)

140 
	#PCON_POWER
 0x10

	)

142 
	#LED_MASK
 0x0ê

	)

143 
	#LED_HEART
 0x02

	)

144 
	#LED_IDLE
 0x04

	)

145 
	#LED_GFX
 0x08

	)

150 
	#PT_CLOCK_ADDR
 
	`PHYS_TO_K1
(0x1fb801f0Ë

	)

151 #ifdef 
_MIPSEB


152 
	#TIMER_ACK_ADDR
 
	`PHYS_TO_K1
(0x1fb801e3Ë

	)

154 
	#TIMER_ACK_ADDR
 
	`PHYS_TO_K1
(0x1fb801e0Ë

	)

157 
	#ACK_TIMER0
 0x1

	)

158 
	#ACK_TIMER1
 0x2

	)

163 
	#HPC_0_ID_ADDR
 0x1fb80000

	)

164 
	#HPC_1_ID_ADDR
 0x1fb00000

	)

165 
	#HPC_2_ID_ADDR
 0x1f980000

	)

166 
	#HPC_3_ID_ADDR
 0x1f900000

	)

171 #ifdef 
_MIPSEB


172 
	#HPC_ENDIAN
 0x1fb800c3

	)

174 
	#HPC_ENDIAN
 0x1fb800c0

	)

177 
	#HPC_CPU_LITTLE
 0x1

	)

178 
	#HPC_ENET_LITTLE
 0x2

	)

179 
	#HPC_SCSI_LITTLE
 0x4

	)

180 
	#HPC_PAR_LITTLE
 0x8

	)

181 
	#HPC_DSP_LITTLE
 0x10

	)

182 
	#HPC_REV_MASK
 0xc0

	)

183 
	#HPC_REV_SHIFT
 6

	)

185 
	#HPC_ALL_LITTLE
 (
HPC_CPU_LITTLE
|
HPC_ENET_LITTLE
|
HPC_SCSI_LITTLE
| \

186 
HPC_PAR_LITTLE
|
HPC_DSP_LITTLE
)

	)

187 
	#HPC_ALL_BIG
 (0)

	)

196 
	#SCSI0_BC_ADDR
 0x1fb80088

	)

197 
	#SCSI0_CBP_ADDR
 0x1fb8008¯

	)

198 
	#SCSI0_NBDP_ADDR
 0x1fb80090

	)

199 
	#SCSI0_CTRL_ADDR
 0x1fb80094

	)

202 #ifdef 
_MIPSEB


203 
	#SCSI0A_ADDR
 0x1fb80122

	)

204 
	#SCSI0D_ADDR
 0x1fb80126

	)

206 
	#SCSI0A_ADDR
 0x1fb80121

	)

207 
	#SCSI0D_ADDR
 0x1fb80125

	)

211 
	#SCSI0_PNTR_ADDR
 0x1fb80098

	)

212 
	#SCSI0_FIFO_ADDR
 0x1fb8009¯

	)

217 
	#SCSI1_BC_ADDR
 0x1fb00088

	)

218 
	#SCSI1_CBP_ADDR
 0x1fb0008¯

	)

219 
	#SCSI1_NBDP_ADDR
 0x1fb00090

	)

220 
	#SCSI1_CTRL_ADDR
 0x1fb00094

	)

223 #ifdef 
_MIPSEB


224 
	#SCSI1A_ADDR
 0x1fb00122

	)

225 
	#SCSI1D_ADDR
 0x1fb00126

	)

227 
	#SCSI1A_ADDR
 0x1fb00121

	)

228 
	#SCSI1D_ADDR
 0x1fb00125

	)

232 
	#SCSI1_PNTR_ADDR
 0x1fb00098

	)

233 
	#SCSI1_FIFO_ADDR
 0x1fb0009¯

	)

238 
	#SCSI2_BC_ADDR
 0x1f980088

	)

239 
	#SCSI2_CBP_ADDR
 0x1f98008¯

	)

240 
	#SCSI2_NBDP_ADDR
 0x1f980090

	)

241 
	#SCSI2_CTRL_ADDR
 0x1f980094

	)

244 #ifdef 
_MIPSEB


245 
	#SCSI2A_ADDR
 0x1f980122

	)

246 
	#SCSI2D_ADDR
 0x1f980126

	)

248 
	#SCSI2A_ADDR
 0x1f980121

	)

249 
	#SCSI2D_ADDR
 0x1f980125

	)

253 
	#SCSI2_PNTR_ADDR
 0x1f980098

	)

254 
	#SCSI2_FIFO_ADDR
 0x1f98009¯

	)

257 
	#SCSI_RESET
 0x01

	)

258 
	#SCSI_FLUSH
 0x02

	)

259 
	#SCSI_TO_MEM
 0x10

	)

260 
	#SCSI_STARTDMA
 0x80

	)

265 
	#PAR_OFFSET
 0xa8

	)

266 
	#PAR_BC_ADDR
 0x1fb800a8

	)

267 
	#PAR_CBP_ADDR
 0x1fb800a¯

	)

268 
	#PAR_NBDP_ADDR
 0x1fb800b0

	)

269 
	#PAR_CTRL_ADDR
 0x1fb800b4

	)

270 #ifdef 
_MIPSEB


271 
	#PAR_SR_ADDR
 0x1fb80135

	)

273 
	#PAR_SR_ADDR
 0x1fb80136

	)

277 
	#PAR_CTRL_RESET
 0x01

	)

278 
	#PAR_CTRL_INT
 0x02

	)

279 
	#PAR_CTRL_CLRINT
 0x02

	)

280 
	#PAR_CTRL_POLARITY
 0x04

	)

281 
	#PAR_CTRL_SOFTACK
 0x08

	)

282 
	#PAR_CTRL_PPTOMEM
 0x10

	)

283 
	#PAR_CTRL_MEMTOPP
 0x00

	)

284 
	#PAR_CTRL_IGNACK
 0x20

	)

285 
	#PAR_CTRL_FLUSH
 0x40

	)

286 
	#PAR_CTRL_STRTDMA
 0x80

	)

288 
	#PAR_STROBE_MIN_MASK
 0x7f000000

	)

289 
	#PAR_STROBE_LEAD_MASK
 0x007f0000

	)

290 
	#PAR_STROBE_TRAIL_MASK
 0x00007f00

	)

291 
	#PAR_STROBE_MASK
 0x7f7f7f00

	)

296 #ifdef 
_MIPSEB


297 
	#DUART0
 (0x1fb80d03 + 
K1BASE
)

	)

298 
	#DUART1
 (0x1fb80d13 + 
K1BASE
)

	)

299 
	#DUART2
 (0x1fb80d23 + 
K1BASE
)

	)

300 
	#DUART3
 (0x1fb80d33 + 
K1BASE
)

	)

302 
	#DUART0
 (0x1fb80d00 + 
K1BASE
)

	)

303 
	#DUART1
 (0x1fb80d10 + 
K1BASE
)

	)

304 
	#DUART2
 (0x1fb80d20 + 
K1BASE
)

	)

305 
	#DUART3
 (0x1fb80d30 + 
K1BASE
)

	)

308 
	#CHNA_DATA_OFFSET
 0xc

	)

309 
	#CHNA_CNTRL_OFFSET
 0x8

	)

310 
	#CHNB_DATA_OFFSET
 0x4

	)

311 
	#CHNB_CNTRL_OFFSET
 0x0

	)

313 
	#DUART0A_DATA
 (
DUART0
 + 
CHNA_DATA_OFFSET
)

	)

314 
	#DUART0B_DATA
 (
DUART0
 + 
CHNB_DATA_OFFSET
)

	)

315 
	#DUART1A_DATA
 (
DUART1
 + 
CHNA_DATA_OFFSET
)

	)

316 
	#DUART1B_DATA
 (
DUART1
 + 
CHNB_DATA_OFFSET
)

	)

317 
	#DUART2A_DATA
 (
DUART2
 + 
CHNA_DATA_OFFSET
)

	)

318 
	#DUART2B_DATA
 (
DUART2
 + 
CHNB_DATA_OFFSET
)

	)

320 
	#DUART0A_CNTRL
 (
DUART0
 + 
CHNA_CNTRL_OFFSET
)

	)

321 
	#DUART0B_CNTRL
 (
DUART0
 + 
CHNB_CNTRL_OFFSET
)

	)

322 
	#DUART1A_CNTRL
 (
DUART1
 + 
CHNA_CNTRL_OFFSET
)

	)

323 
	#DUART1B_CNTRL
 (
DUART1
 + 
CHNB_CNTRL_OFFSET
)

	)

324 
	#DUART2A_CNTRL
 (
DUART2
 + 
CHNA_CNTRL_OFFSET
)

	)

325 
	#DUART2B_CNTRL
 (
DUART2
 + 
CHNB_CNTRL_OFFSET
)

	)

330 
	#BOARD_REV_ADDR
 0x1fbd0000

	)

331 
	#REV_HP1
 0x8000

	)

332 
	#REV_MASK
 0x7000

	)

333 
	#REV_SHIFT
 12

	)

338 
	#HEADPHONE_MDAC_L
 (
DUART3
 + 
CHNB_CNTRL_OFFSET
)

	)

339 
	#HEADPHONE_MDAC_R
 (
DUART3
 + 
CHNB_DATA_OFFSET
)

	)

344 #ifde‡
LANGUAGE_C


345 
	#RT_CLOCK_ADDR
 (
dp8573_˛k
 *)
	`PHYS_TO_K1
(0x1fb80e00)

	)

347 
	#RT_CLOCK_ADDR
 
	`PHYS_TO_K1
(0x1fb80e00)

	)

353 #ifdef 
_MIPSEB


354 
	#CPU_AUX_CONTROL
 0x1fb801b‡

	)

356 
	#CPU_AUX_CONTROL
 0x1fb801b¯

	)

359 
	#SER_TO_CPU
 0x10

	)

360 
	#CPU_TO_SER
 0x08

	)

361 
	#SERCLK
 0x04

	)

362 
	#CONSOLE_CS
 0x02

	)

363 
	#CONSOLE_LED
 0x01

	)

364 
	#NVRAM_PRE
 0x01

	)

367 
	#HPC1DMAWDCNT
 0x1fb80180

	)

368 
	#HPC1GIOADDL
 0x1fb80184

	)

369 
	#HPC1GIOADDM
 0x1fb80188

	)

370 
	#HPC1PBUSADD
 0x1fb8018¯

	)

371 
	#HPC1DMACTRL
 0x1fb80190

	)

372 
	#HPC1COUNTER
 0x1fb80194

	)

373 
	#HPC1HANDTX
 0x1fb80198

	)

374 
	#HPC1HANDRX
 0x1fb8019¯

	)

375 
	#HPC1CINTSTAT
 0x1fb801a0

	)

376 
	#HPC1CINTMASK
 0x1fb801a4

	)

377 
	#HPC1MISCSR
 0x1fb801b0

	)

378 
	#HPC1BURSTCTL
 0x1fb801b4

	)

381 
	#HPC1DMA_GO
 0x1

	)

382 
	#HPC1DMA_DIR
 0x2

	)

383 
	#HPC1DMA_MODE
 0x4

	)

386 
	#HPC1CINT_DMA
 0x1

	)

387 
	#HPC1CINT_TX
 0x2

	)

388 
	#HPC1CINT_RX
 0x4

	)

391 
	#HPC1MISC_RESET
 0x1

	)

392 
	#HPC1MISC_IRQA
 0x2

	)

393 
	#HPC1MISC_POL
 0x4

	)

394 
	#HPC1MISC_32K
 0x8

	)

396 
	#HPC1MISC_8TO32
 0x70

	)

397 
	#HPC1MISC_16TO32
 0x60

	)

398 
	#HPC1MISC_24TO32
 0x40

	)

399 
	#HPC1MISC_NOSIGN
 0x0

	)

403 
	#HPC1MEMORY
 0x1fbe0000

	)

409 #ifdef 
_MIPSEB


410 
	#VME_ISR_ADDR
 0x1fb801d3

	)

411 
	#VME_ISR
 
VME_ISR_ADDR


	)

412 
	#VME_0_MASK_ADDR
 0x1fb801d7

	)

413 
	#VME_1_MASK_ADDR
 0x1fb801db

	)

415 
	#VME_ISR_ADDR
 0x1fb801d0

	)

416 
	#VME_ISR
 
VME_ISR_ADDR


	)

417 
	#VME_0_MASK_ADDR
 0x1fb801d4

	)

418 
	#VME_1_MASK_ADDR
 0x1fb801d8

	)

424 
	#VRSTAT_ADDR
 
VME_ISR_ADDR


	)

425 
	#VRSTAT_MASK
 0x01

	)

427 #ifde‡
LANGUAGE_C


430 
	sscuzzy
 {

431 vﬁ©ûê*
	md_addr
;

432 vﬁ©ûê*
	md_d©a
;

433 vﬁ©ûê*
	md_˘æ
;

434 vﬁ©ûê*
	md_b˙t
;

435 vﬁ©ûê*
	md_curbp
;

436 vﬁ©ûê*
	md_√xtbp
;

437 vﬁ©ûê*
	md_≤å
;

438 vﬁ©ûê*
	md_fifo
;

439 
	md_öôÊags
;

440 
	md_˛ock
;

441 } 
	tscuzzy_t
;

444 #ifdef 
_MIPSEB


445 
	sscsi_des¸
 {

446 
	mfûl
:19, 
	mb˙t
:13;

447 
	meox
:1, 
	mefûl
:3, 
	mcbp
:28;

448 
	mnfûl
:4, 
	mnbp
:28;

449 
	m›hyßddr
;

450 } 
	tscdes¸_t
;

452 
	sscsi_des¸
 {

453 
	mb˙t
:13, 
	mfûl
:19;

454 
	mcbp
:28, 
	mefûl
:3, 
	meox
:1;

455 
	mnbp
:28, 
	mnfûl
:4;

456 
	m›hyßddr
;

457 } 
	tscdes¸_t
;

461 
	#NSCSI_DMA_PGS
 64

	)

469 
	#K1_LIO_0_MASK_ADDR
 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_K1
(
LIO_0_MASK_ADDR
))

	)

470 
	#K1_LIO_1_MASK_ADDR
 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_K1
(
LIO_1_MASK_ADDR
))

	)

471 
	#K1_LIO_0_ISR_ADDR
 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_K1
(
LIO_0_ISR_ADDR
))

	)

472 
	#K1_LIO_1_ISR_ADDR
 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_K1
(
LIO_1_ISR_ADDR
))

	)

473 
	#K1_VME_ISR_ADDR
 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_K1
(
VME_ISR_ADDR
))

	)

474 
	#K1_VME_0_MASK_ADDR
 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_K1
(
VME_0_MASK_ADDR
))

	)

475 
	#K1_VME_1_MASK_ADDR
 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_K1
(
VME_1_MASK_ADDR
))

	)

479 
•Œöå
();

480 
•lhöå
();

481 
•Ãër
();

482 
•lgio2
();

483 
is_v50
();

487 #i‡
deföed
(
_STANDALONE
Ë|| deföed(
PROM
Ë|| deföed(
LOCORE
)

488 
	~<sys/IP20nvøm.h
>

489 
	#SR_PROMBASE
 
SR_CU0
|
SR_CU1


	)

	@/usr/include/sys/IP22.h

35 #i‚de‡
__SYS_IP22_H__


36 
	#__SYS_IP22_H__


	)

38 
	#_ARCSPROM


	)

40 #ifde‡
_MIPSEB


41 
	#IP22BOFF
(
X
Ë((X)|0x3)

	)

43 
	#IP22BOFF
(
X
)

	)

46 #i‡
IP22


47 
	~"sys/hpc1.h
"

49 
	~"sys/hpc3.h
"

50 
	~"sys/mc.h
"

51 
	~"sys/ds1286.h
"

56 
	#MAX_MEM_BANKS
 3

	)

61 
	#LIO_0_ISR_OFFSET
 
	`IP22BOFF
(0x0Ë

	)

62 
	#LIO_1_ISR_OFFSET
 
	`IP22BOFF
(0x8Ë

	)

63 
	#LIO_2_3_ISR_OFFSET
 
	`IP22BOFF
(0x10Ë

	)

65 #ifde‡
LANGUAGE_C


66 
	#LIO_0_ISR_ADDR
 (
HPC3_INT_ADDR
+
LIO_0_ISR_OFFSET
)

	)

67 
	#LIO_1_ISR_ADDR
 (
HPC3_INT_ADDR
+
LIO_1_ISR_OFFSET
)

	)

68 
	#LIO_2_3_ISR_ADDR
 (
HPC3_INT_ADDR
+
LIO_2_3_ISR_OFFSET
)

	)

72 
	#LIO_FIFO
 0x01

	)

73 
	#LIO_GIO_0
 0x01

	)

74 
	#LIO_SCSI_0
 0x02

	)

75 
	#LIO_SCSI_1
 0x04

	)

76 
	#LIO_ENET
 0x08

	)

77 
	#LIO_GDMA
 0x10

	)

78 
	#LIO_CENTR
 0x20

	)

79 
	#LIO_GIO_1
 0x40

	)

80 
	#LIO_LIO2
 0x80

	)

83 
	#LIO_ISDN_ISAC
 0x01

	)

84 
	#LIO_POWER
 0x02

	)

85 
	#LIO_ISDN_HSCX
 0x04

	)

86 
	#LIO_LIO3
 0x08

	)

87 
	#LIO_HPC3
 0x10

	)

88 
	#LIO_AC
 0x20

	)

89 
	#LIO_VIDEO
 0x40

	)

90 
	#LIO_GIO_2
 0x80

	)

93 
	#LIO_VERT_STAT
 0x01

	)

94 
	#LIO_PASSWD
 0x02

	)

95 
	#LIO_ISDN_POWER
 0x04

	)

96 
	#LIO_EISA
 0x08

	)

97 
	#LIO_KEYBD_MOUSE
 0x10

	)

98 
	#LIO_DUART
 0x20

	)

99 
	#LIO_DRAIN0
 0x40

	)

100 
	#LIO_DRAIN1
 0x80

	)

101 
	#LIO_GIO_EXP0
 0x40

	)

102 
	#LIO_GIO_EXP1
 0x80

	)

107 
	#LIO_0_MASK_OFFSET
 
	`IP22BOFF
(0x4Ë

	)

108 
	#LIO_1_MASK_OFFSET
 
	`IP22BOFF
(0xcË

	)

109 
	#LIO_2_MASK_OFFSET
 
	`IP22BOFF
(0x14Ë

	)

110 
	#LIO_3_MASK_OFFSET
 
	`IP22BOFF
(0x18Ë

	)

112 #ifde‡
LANGUAGE_C


113 
	#LIO_0_MASK_ADDR
 (
HPC3_INT_ADDR
+
LIO_0_MASK_OFFSET
)

	)

114 
	#LIO_1_MASK_ADDR
 (
HPC3_INT_ADDR
+
LIO_1_MASK_OFFSET
)

	)

115 
	#LIO_2_MASK_ADDR
 (
HPC3_INT_ADDR
+
LIO_2_MASK_OFFSET
)

	)

116 
	#LIO_3_MASK_ADDR
 (
HPC3_INT_ADDR
+
LIO_3_MASK_OFFSET
)

	)

120 
	#LIO_FIFO_MASK
 0x01

	)

121 
	#LIO_SCSI_0_MASK
 0x02

	)

122 
	#LIO_SCSI_1_MASK
 0x04

	)

123 
	#LIO_ENET_MASK
 0x08

	)

124 
	#LIO_GDMA_MASK
 0x10

	)

125 
	#LIO_CENTR_MASK
 0x20

	)

126 
	#LIO_GE_MASK
 0x40

	)

127 
	#LIO_LIO2_MASK
 0x80

	)

130 
	#LIO_MASK_BIT0_UNUSED
 0x01

	)

131 
	#LIO_ISDN_ISAC_MASK
 0x01

	)

132 
	#LIO_MASK_POWER
 0x02

	)

133 
	#LIO_MASK_BIT2_UNUSED
 0x04

	)

134 
	#LIO_ISDN_HSCX_MASK
 0x04

	)

135 
	#LIO_LIO3_MASK
 0x08

	)

136 
	#LIO_HPC3_MASK
 0x10

	)

137 
	#LIO_AC_MASK
 0x20

	)

138 
	#LIO_VIDEO_MASK
 0x40

	)

139 
	#LIO_VR_MASK
 0x80

	)

142 
	#LIO_DUART_MASK
 0x20

	)

148 
	#VECTOR_GIO0
 0

	)

149 
	#VECTOR_SCSI
 1

	)

150 
	#VECTOR_SCSI1
 2

	)

151 
	#VECTOR_ENET
 3

	)

152 
	#VECTOR_GDMA
 4

	)

153 
	#VECTOR_PLP
 5

	)

154 
	#VECTOR_GIO1
 6

	)

155 
	#VECTOR_LCL2
 7

	)

156 
	#VECTOR_ISDN_ISAC
 8

	)

157 
	#VECTOR_POWER
 9

	)

158 
	#VECTOR_ISDN_HSCX
 10

	)

159 
	#VECTOR_LCL3
 11

	)

160 
	#VECTOR_HPCDMA
 12

	)

161 
	#VECTOR_ACFAIL
 13

	)

162 
	#VECTOR_VIDEO
 14

	)

163 
	#VECTOR_GIO2
 15

	)

164 
	#VECTOR_EISA
 19

	)

165 
	#VECTOR_KBDMS
 20

	)

166 
	#VECTOR_DUART
 21

	)

167 
	#VECTOR_DRAIN0
 22

	)

168 
	#VECTOR_DRAIN1
 23

	)

169 
	#VECTOR_GIOEXP0
 22

	)

170 
	#VECTOR_GIOEXP1
 23

	)

171 
	#NUM_LCL_VEC
 24

	)

174 
	#GIO_INTERRUPT_0
 0

	)

175 
	#GIO_INTERRUPT_1
 1

	)

176 
	#GIO_INTERRUPT_2
 2

	)

179 
	#GIO_SLOT_0
 0

	)

180 
	#GIO_SLOT_1
 1

	)

181 
	#GIO_SLOT_GFX
 2

	)

192 
	#PORT_CONFIG
 
HPC3_INT2_ADDR
+
PORT_CONFIG_OFFSET


	)

193 
	#PORT_CONFIG_OFFSET
 
	`IP22BOFF
(0x1c)

	)

194 
	#PCON_DMA_SYNC_SEL
 0x01

	)

195 
	#PCON_SG_RESET_N
 0x02

	)

196 
	#PCON_S0_RESET_N
 0x04

	)

197 
	#PCON_CLR_SG_RETRACE_N
 0x08

	)

198 
	#PCON_CLR_S0_RETRACE_N
 0x10

	)

205 
	#PT_CLOCK_ADDR
 
	`PHYS_TO_COMPATK1
(
HPC3_INT_ADDR
+
PT_CLOCK_OFFSET
)

	)

206 
	#PT_CLOCK_OFFSET
 0x30

	)

209 
	#TIMER_ACK_ADDR
 
	`PHYS_TO_COMPATK1
(
HPC3_INT_ADDR
+
TIMER_ACK_OFFSET
)

	)

210 
	#TIMER_ACK_OFFSET
 
	`IP22BOFF
(0x20)

	)

211 
	#ACK_TIMER0
 0x1

	)

212 
	#ACK_TIMER1
 0x2

	)

217 
	#HPC_2_ID_ADDR
 0x1f980000

	)

218 
	#HPC_1_ID_ADDR
 0x1fb00000

	)

219 
	#HPC_0_ID_ADDR
 0x1fb80000

	)

220 
	#HPC_0_ID_PROM0
 0x1fc00000

	)

221 
	#HPC_0_ID_PROM1
 0x1„00000

	)

226 
	#SCSI0_BC_ADDR
 
HPC3_SCSI_BC0


	)

227 
	#SCSI0_CBP_ADDR
 
HPC3_SCSI_BUFFER_PTR0


	)

228 
	#SCSI0_NBDP_ADDR
 
HPC3_SCSI_BUFFER_NBDP0


	)

229 
	#SCSI0_CTRL_ADDR
 
HPC3_SCSI_CONTROL0


	)

232 
	#SCSI0A_ADDR
 
	`IP22BOFF
(
HPC3_SCSI_REG0
Ë

	)

233 
	#SCSI0D_ADDR
 
	`IP22BOFF
(
HPC3_SCSI_REG0
+0x4)

	)

238 
	#SCSI1_BC_ADDR
 
HPC3_SCSI_BC1


	)

239 
	#SCSI1_CBP_ADDR
 
HPC3_SCSI_BUFFER_PTR1


	)

240 
	#SCSI1_NBDP_ADDR
 
HPC3_SCSI_BUFFER_NBDP1


	)

241 
	#SCSI1_CTRL_ADDR
 
HPC3_SCSI_CONTROL1


	)

244 
	#SCSI1A_ADDR
 
	`IP22BOFF
(
HPC3_SCSI_REG1
Ë

	)

245 
	#SCSI1D_ADDR
 
	`IP22BOFF
(
HPC3_SCSI_REG1
+0x4)

	)

250 
	#SCSI2_BC_ADDR
 
HPC1_SCSI_BC2


	)

251 
	#SCSI2_CBP_ADDR
 
HPC1_SCSI_BUFFER_PTR2


	)

252 
	#SCSI2_NBDP_ADDR
 
HPC1_SCSI_BUFFER_NBDP2


	)

253 
	#SCSI2_CTRL_ADDR
 
HPC1_SCSI_CONTROL2


	)

256 
	#SCSI2A_ADDR
 
HPC1_SCSI_REG_A2


	)

257 
	#SCSI2D_ADDR
 
HPC1_SCSI_REG_D2


	)

262 
	#SCSI3_BC_ADDR
 
HPC1_SCSI_BC3


	)

263 
	#SCSI3_CBP_ADDR
 
HPC1_SCSI_BUFFER_PTR3


	)

264 
	#SCSI3_NBDP_ADDR
 
HPC1_SCSI_BUFFER_NBDP3


	)

265 
	#SCSI3_CTRL_ADDR
 
HPC1_SCSI_CONTROL3


	)

268 
	#SCSI3A_ADDR
 
HPC1_SCSI_REG_A3


	)

269 
	#SCSI3D_ADDR
 
HPC1_SCSI_REG_D3


	)

274 
	#SCSI4_BC_ADDR
 
HPC31_SCSI_BC0


	)

275 
	#SCSI4_CBP_ADDR
 
HPC31_SCSI_BUFFER_PTR0


	)

276 
	#SCSI4_NBDP_ADDR
 
HPC31_SCSI_BUFFER_NBDP0


	)

277 
	#SCSI4_CTRL_ADDR
 
HPC31_SCSI_CONTROL0


	)

280 
	#SCSI4A_ADDR
 
	`IP22BOFF
(
HPC31_SCSI_REG0
)

	)

281 
	#SCSI4D_ADDR
 
	`IP22BOFF
(
HPC31_SCSI_REG0
+0x8)

	)

286 
	#SCSI5_BC_ADDR
 
HPC31_SCSI_BC1


	)

287 
	#SCSI5_CBP_ADDR
 
HPC31_SCSI_BUFFER_PTR1


	)

288 
	#SCSI5_NBDP_ADDR
 
HPC31_SCSI_BUFFER_NBDP1


	)

289 
	#SCSI5_CTRL_ADDR
 
HPC31_SCSI_CONTROL1


	)

292 
	#SCSI5A_ADDR
 
	`IP22BOFF
(
HPC31_SCSI_REG1
)

	)

293 
	#SCSI5D_ADDR
 
	`IP22BOFF
(
HPC31_SCSI_REG1
+0x4)

	)

296 
	#SCSI_RESET
 
SCCH_RESET


	)

297 
	#SCSI_FLUSH
 
SCFLUSH


	)

298 
	#SCSI_STARTDMA
 
SCCH_ACTIVE


	)

303 
	#WD93_DMA_CFG_25MHZ
 0x34801

	)

304 
	#WD93_DMA_CFG_33MHZ
 0x34809

	)

305 
	#WD93_PIO_CFG_25MHZ
 0x4288

	)

306 
	#WD93_PIO_CFG_33MHZ
 0x42cd

	)

307 
	#WD95_DMA_CFG_25MHZ
 0x1801

	)

308 
	#WD95_DMA_CFG_33MHZ
 0x1841

	)

309 
	#WD95_PIO_CFG_25MHZ
 0xd4

	)

310 
	#WD95_PIO_CFG_33MHZ
 0x318

	)

315 
	#PAR_OFFSET
 0x8e000

	)

316 
	#PAR_BC_ADDR
 0x1fb800a8

	)

317 
	#PAR_CBP_ADDR
 (
	`HPC3_PBUS_BP
(7)Ë

	)

318 
	#PAR_NBDP_ADDR
 (
	`HPC3_PBUS_DP
(7)Ë

	)

319 
	#PAR_CTRL_ADDR
 
	`IP22BOFF
(
HPC3_PAR_CONTROL
Ë

	)

320 
	#PAR_SR_ADDR
 
	`IP22BOFF
(
HPC3_PAR_STAT
Ë

	)

323 
	#PAR_CTRL_RESET
 0x01

	)

324 
	#PAR_CTRL_INT
 0x02

	)

325 
	#PAR_CTRL_CLRINT
 0x02

	)

326 
	#PAR_CTRL_POLARITY
 0x04

	)

327 
	#PAR_CTRL_SOFTACK
 0x08

	)

328 
	#PAR_CTRL_PPTOMEM
 0x10

	)

329 
	#PAR_CTRL_MEMTOPP
 0x00

	)

330 
	#PAR_CTRL_IGNACK
 0x20

	)

331 
	#PAR_CTRL_FLUSH
 0x40

	)

332 
	#PAR_CTRL_STRTDMA
 0x80

	)

334 
	#PAR_STROBE_MIN_MASK
 0x7f000000

	)

335 
	#PAR_STROBE_LEAD_MASK
 0x007f0000

	)

336 
	#PAR_STROBE_TRAIL_MASK
 0x00007f00

	)

337 
	#PAR_STROBE_MASK
 0x7f7f7f00

	)

342 
	#CHNA_DATA_OFFSET
 
	`PHYS_TO_K1
(
	`IP22BOFF
(
HPC3_SERIAL0_DATA
))

	)

343 
	#CHNA_CNTRL_OFFSET
 
	`PHYS_TO_K1
(
	`IP22BOFF
(
HPC3_SERIAL0_CMD
))

	)

344 
	#CHNB_DATA_OFFSET
 
	`PHYS_TO_K1
(
	`IP22BOFF
(
HPC3_SERIAL1_DATA
))

	)

345 
	#CHNB_CNTRL_OFFSET
 
	`PHYS_TO_K1
(
	`IP22BOFF
(
HPC3_SERIAL1_CMD
))

	)

347 
	#DUART1A_DATA
 
CHNA_DATA_OFFSET


	)

348 
	#DUART1B_DATA
 
CHNB_DATA_OFFSET


	)

349 
	#DUART1A_CNTRL
 
CHNA_CNTRL_OFFSET


	)

350 
	#DUART1B_CNTRL
 
CHNB_CNTRL_OFFSET


	)

355 #ifde‡
LANGUAGE_C


356 
	#RT_CLOCK_ADDR
 (
ds1286_˛k
 *)
	`PHYS_TO_COMPATK1
(
HPC3_PBUS_RTC_1286
)

	)

358 
	#RT_CLOCK_ADDR
 
	`PHYS_TO_K1
(
HPC3_PBUS_RTC_1286
)

	)

360 
	#RTC_RAM_ADDR
(
off
Ë
	`IP22BOFF
(
HPC3_PBUS_RTC_1286
+
DS1286_RAMOFFSET
+ \

361 (4*(
off
)))

	)

362 
	#RT_RAM_FLAGS
 0

	)

363 
	#RT_FLAGS_INVALID
 0x01

	)

364 
	#IP26_GCACHE_SIZE
 1

	)

365 
	#IP26_GCACHE_SIZE_ADDR
 
	`RTC_RAM_ADDR
(
IP26_GCACHE_SIZE
)

	)

366 
	#MC_IN_RESET
 2

	)

371 
	#NVRAM_DATA
(
off£t
Ë((
ds1386_˛k_t
 *)
RT_CLOCK_ADDR
)->
nvøm
[off£t]

	)

372 
	#NVRAM_ADRS
(
off£t
Ë&
	`NVRAM_DATA
(off£t)

	)

378 
	#CPU_AUX_CONTROL
 
	`IP22BOFF
(
HPC3_EEPROM_ADDR
)

	)

379 
	#SER_TO_CPU
 0x10

	)

380 
	#CPU_TO_SER
 0x08

	)

381 
	#SERCLK
 0x04

	)

382 
	#CONSOLE_CS
 0x02

	)

383 
	#NVRAM_PRE
 0x01

	)

390 
	#EISA_CTL_RG
 0x04

	)

391 
	#EISA_CTL_SQ
 0x06

	)

392 
	#EISA_CTL_LM
 0x30

	)

393 
	#EISA_CTL_C1
 0x40

	)

394 
	#EISA_CTL_C2
 0x80

	)

395 
	#EISA_C2_ENB
 0x01

	)

396 
	#EISA_SPK_ENB
 0x02

	)

401 
	#EISAIO_TO_PHYS
(
ªg
Ë(0x00080000|ªg)

	)

402 
	#EISAIO_TO_K1
(
ªg
Ë
	`PHYS_TO_K1
(
	`EISAIO_TO_PHYS
‘eg))

	)

403 
	#EISAIO_TO_COMPATK1
(
ªg
Ë
	`PHYS_TO_COMPATK1
(
	`EISAIO_TO_PHYS
‘eg))

	)

404 
	#EISAMEM_TO_PHYS
(
ªg
Ë‘eg)

	)

405 
	#EISAMEM_TO_K1
(
ªg
Ë
	`PHYS_TO_K1
‘eg)

	)

407 
	#EIU_MODE_REG
 0x0009ffc0

	)

408 
	#EIU_STAT_REG
 0x0009ffc4

	)

409 
	#EIU_PREMPT_REG
 0x0009ffc8

	)

410 
	#EIU_QUIET_REG
 0x0009ffc¯

	)

411 
	#EIU_INTRPT_ACK
 0x00090004

	)

414 
	#HSCX_VSTR_B1REG
 0xbfbd90bb

	)

415 
	#HSCX_VSTR_B2REG
 0xbfbd91bb

	)

420 
	#VINO_PHYS_BASE1
 0x00080000

	)

421 
	#VINO_CHIP_ID
 0xB

	)

422 
	#VINO_REV_NUM
(
ªg
Ë(‘egË& 0x0F)

	)

423 
	#VINO_ID_VALUE
(
ªg
Ë((‘egË& 0xF0Ë>> 4)

	)

425 #ifde‡
LANGUAGE_C


428 
	sscuzzy
 {

429 vﬁ©ûê*
	md_addr
;

430 vﬁ©ûê*
	md_d©a
;

431 vﬁ©ûê*
	md_˘æ
;

432 vﬁ©ûê*
	md_b˙t
;

433 vﬁ©ûê*
	md_curbp
;

434 vﬁ©ûê*
	md_√xtbp
;

435 vﬁ©ûê*
	md_dmacfg
;

436 vﬁ©ûê*
	md_piocfg
;

437 
	md_öôÊags
;

438 
	md_˛ock
;

439 #i‡
IP22


440 
	md_ª£t
;

441 
	md_Êush
;

442 
	md_busy
;

443 
	md_r°¨t
;

444 
	md_w°¨t
;

445 
	md_cbpoff
;

446 
	md_˙toff
;

447 
	md_nbpoff
;

449 
	md_ve˘‹
;

450 } 
	tscuzzy_t
;

457 
	#NSCSI_DMA_PGS
 64

	)

461 
	#K1_LIO_0_MASK_ADDR
 \

462 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_COMPATK1
(
LIO_0_MASK_ADDR
))

	)

463 
	#K1_LIO_1_MASK_ADDR
 \

464 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_COMPATK1
(
LIO_1_MASK_ADDR
))

	)

465 
	#K1_LIO_2_MASK_ADDR
 \

466 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_COMPATK1
(
LIO_2_MASK_ADDR
))

	)

467 
	#K1_LIO_3_MASK_ADDR
 \

468 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_COMPATK1
(
LIO_3_MASK_ADDR
))

	)

469 
	#K1_LIO_0_ISR_ADDR
 \

470 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_COMPATK1
(
LIO_0_ISR_ADDR
))

	)

471 
	#K1_LIO_1_ISR_ADDR
 \

472 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_COMPATK1
(
LIO_1_ISR_ADDR
))

	)

473 
	#K1_LIO_2_ISR_ADDR
 \

474 ((vﬁ©ûê
unch¨
 *)
	`PHYS_TO_COMPATK1
(
LIO_2_3_ISR_ADDR
))

	)

478 
•l1
();

479 
• ë
();

480 
•l3
();

481 
•lgio2
();

482 
•Œöå
();

483 
•lhöå
();

484 
•Ãër
();

486 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

487 
£thpcdmaöå
(,(*)(
__psöt_t
,
e‰ame_s
 *),__psint_t);

488 
	`£tgiogfxvec
(c⁄° 
uöt
, 
l˛_öå_func_t
 *, );

489 
	`hpcdma_öå
(
__psöt_t
, 
e‰ame_s
 *);

490 
	`kbdbñl_öô
();

491 
	`pckbd_bñl
(, , );

492 
	`eiß_ª‰esh_⁄
();

493 
	`eiß_öô
();

496 #ifde‡
R4600SC


497 
	`_r4600sc_íabÀ_sˇche
();

498 
	`_r4600sc_dißbÀ_sˇche
();

501 
	`is_fuŒhou£
(),
	`is_ioc1
(),
	`bﬂrd_ªv
(),
	`is_ödyñ™
();

502 
	`ù22_addr_to_b™k
();

506 #i‡
	`deföed
(
_STANDALONE
Ë|| deföed(
PROM
Ë|| deföed(
LOCORE
)

507 
	~<sys/IP22nvøm.h
>

510 #i‡!
	`deföed
(
IS_IOC1
)

511 
	#IS_FULLHOUSE
(
t
) \

512 
lw
 
t
, 
HPC3_SYS_ID
|
K1BASE
; \

513 
™di
 
t
, 
BOARD_IP22


	)

516 
	#IS_IOC1
(
t
) \

517 
lw
 
t
, 
HPC3_SYS_ID
|
K1BASE
; \

518 
™di
 
t
, 
CHIP_IOC1
;

	)

521 #i‡
IP22


522 #i‡
_MIPS_SIM
 =
_ABI64


523 
	#SR_PROMBASE
 
SR_CU0
|
SR_CU1
|
SR_KX


	)

525 
	#SR_PROMBASE
 
SR_CU0
|
SR_CU1


	)

527 #ñi‡
IP28


528 
	#SR_PROMBASE
 
SR_CU0
|
SR_CU1
|
SR_FR
|
SR_KX
|
SR_IE
|
SR_BERRBIT


	)

537 
	#VOLUMEINC
 0x01

	)

538 
	#VOLUMEDEC
 0x02

	)

539 
	#VOLUMEMUTE
 0x03

	)

541 #i‡
IP26
 || 
IP28


545 
	#ECC_CTRL_BASE
 0x60000000

	)

547 
	#ECC_CTRL_REG
 0x60000000

	)

548 
	#ECC_MEMCFG
 (0x2000|(
ECC_CTRL_BASE
>>24))

	)

551 
	#ECC_ECC_FLOW
 0x2

	)

552 
	#ECC_ECC_NORMAL
 0x3

	)

555 
	#ECC_CTRL_ENABLE
 0x00000

	)

556 
	#ECC_CTRL_DISABLE
 0x10000

	)

557 
	#ECC_CTRL_WR_ECC
 0x20000

	)

558 
	#ECC_CTRL_CLR_INT
 0x30000

	)

559 
	#ECC_CTRL_CHK_ON
 0x50000

	)

560 
	#ECC_CTRL_CHK_OFF
 0x60000

	)

562 
	#ECC_DEFAULT
 (
ECC_ECC_NORMAL
 | 
ECC_CTRL_WR_ECC
)

	)

563 
	#ECC_FLOWTHRU
 (
ECC_ECC_FLOW
 | 
ECC_CTRL_WR_ECC
)

	)

565 #ifde‡
IP28


566 
	#ECC_STATUS
 
HPC3_READ


	)

567 
	#K1_ECC_STATUS
 ((vﬁ©ûê
uöt
 *)
	`PHYS_TO_COMPATK1
(
HPC3_READ
))

	)

568 
	#ECC_STATUS_BANK
 0x0300

	)

569 
	#ECC_BANK_SHIFT
 8

	)

570 
	#ECC_STATUS_LOW
 0x0400

	)

571 
	#ECC_STATUS_HIGH
 0x0800

	)

572 
	#ECC_STATUS_UC_WR
 0x1000

	)

573 
	#ECC_STATUS_GIO
 0x2000

	)

574 
	#ECC_STATUS_SSRAMx36
 0x4000

	)

575 
	#ECC_STATUS_MASK
 0xff00

	)

578 
	#IP26_UC_WRITE_MSG
 \

579 "IRIX dëe˘ed iŒegÆ wrôêtÿunˇched mem‹y. Thi†ödiˇãs\n\
 o‡kî√»devi˚ drivî which make†u£ o‡unˇched\n\
 wôhouàusög ip26_íabÀ_ucmem(). Sì /u§/ö˛ude/sys/IP26.h\n\
 m‹êdëaûs."

	)

585 
	#EGUN_MODE
 1

	)

586 
	#EGUN_UC_WRITE
 2

	)

587 
	#EGUN_UC_WRITE_I
 3

	)

588 
	#EGUN_1BIT_INT
 4

	)

589 
	#EGUN_UC_WRITE_D
 5

	)

593 
	#ECC_FAST_UC_WRITE
 0x01

	)

594 
	#ECC_MULTI_BIT_ERR
 0x02

	)

595 
	#ECC_MUST_BE_ZERO
 0xf¯

	)

601 
	#IP26P_ECCSYSID
 0x12

	)

602 
	#IP26_ECCSYSID
 0x18

	)

603 
	#IP28_ECCSYSID
 0x19

	)

605 #i‡
_STANDALONE


606 #i‡
IP26


607 
	#ù26_i£cc
(Ë(
	`ù22_bﬂrd_ªv
(Ë>(
IP26_ECCSYSID
>>
BOARD_REV_SHIFT
))

	)

609 
	#ù26_i£cc
(Ë1

	)

614 #i‡
_LANGUAGE_C


616 
	`ù26_íabÀ_ucmem
();

617 
	`ù26_ªtu∫_ucmem
(
¥evious
);

618 
	`ù26_dißbÀ_ucmem
();

620 
	`ù28_íabÀ_ucmem
();

621 
	`ù28_ªtu∫_ucmem
(
¥evious
);

622 
	`ù28_dißbÀ_ucmem
();

623 #i‡
IP28


624 #ifde‡
_STANDALONE


625 
	`ù28_s§am_swizzÀ
(
d©a
);

626 *
	`ù28_s§am
(*, , );

629 
	`is_ù26bb
();

630 
	`is_ù26pbb
();

631 
	#is_ù28bb
(Ë(!
	`is_ù26bb
())

	)

632 
	`ù28_íabÀ_ec˚º
();

633 
	`ù28_dißbÀ_ec˚º
();

634 
	`ù28_ecc_îr‹
();

635 
	`ù28_ecc_Êowthru
();

636 
	`ù28_ecc_c‹ª˘
();

639 
	`__dˇche_löe_wb_övÆ
(*);

640 
	`__dˇche_övÆ
(*, );

641 #ifde‡
R10000_SPECULATION_WAR


642 
•ec_udma_w¨_⁄
;

643 
	`•ecw¨_Á°_u£rdma
(
ˇddr_t
, 
size_t
, *);

644 
	`•ecw¨_Á°_undma
(
ˇddr_t
, 
size_t
, *);

649 #ifde‡
SEG1_BASE


650 
	#CPU_MEMACC_BIGALIAS
 0

	)

652 
	#CPU_MEMACC_BIGALIAS
 
MEMACC_BIGALIAS


	)

654 
	#CPU_MEMACC_NORMAL_IP26
 (0x11453444|
CPU_MEMACC_BIGALIAS
)

	)

655 
	#CPU_MEMACC_SLOW_IP26
 (0x11453446|
CPU_MEMACC_BIGALIAS
)

	)

656 #ifde‡
IP28


657 
	#CPU_MEMACC_NORMAL
 (0x11453434|
CPU_MEMACC_BIGALIAS
)

	)

658 
	#CPU_MEMACC_SLOW
 (0x11453436|
CPU_MEMACC_BIGALIAS
)

	)

660 
	#CPU_MEMACC_NORMAL
 
CPU_MEMACC_NORMAL_IP26


	)

661 
	#CPU_MEMACC_SLOW
 
CPU_MEMACC_SLOW_IP26


	)

689 
	#GIO_SLOT_0_UPPER
 1

	)

690 
	#GIO_SLOT_0_LOWER
 0

	)

692 #i‡
	`deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
Ë&& deföed(
LANGUAGE_C
)

702 
	`£tgiosh¨edve˘‹
(
posôi⁄
, (*
func
)(
__psöt_t
, 
e‰ame_s
 *),

703 
__psöt_t
 
¨g
);

	@/usr/include/sys/IP26.h

48 #i‚de‡
__SYS_IP26_H__


49 
	#__SYS_IP26_H__


	)

51 
	~<sys/IP22.h
>

55 
	#TCC_BASE
 0x18000000

	)

56 
	#TCC_FIFO
 0x18000000

	)

57 
	#TCC_GCACHE
 0x18000008

	)

58 
	#TCC_INTR
 0x18000010

	)

59 
	#TCC_BE_ADDR
 0x18000018

	)

60 
	#TCC_ERROR
 0x18000020

	)

61 
	#TCC_PARITY
 0x18000028

	)

62 
	#TCC_COUNT
 0x18000030

	)

63 
	#TCC_COMPARE
 0x18000038

	)

64 
	#TCC_CAM0
 0x18010000

	)

65 
	#TCC_CAM1
 0x18010008

	)

66 
	#TCC_CAM2
 0x18010010

	)

67 
	#TCC_CAM3
 0x18010018

	)

68 
	#TCC_CAM4
 0x18010020

	)

69 
	#TCC_PREFETCH_A
 0x18010028

	)

70 
	#TCC_PREFETCH_B
 0x18010030

	)

71 
	#TCC_PREFETCH
 0x18010038

	)

72 
	#TCC_ETAG_DA
 0x18100000

	)

73 
	#TCC_OTAG_DA
 0x18200000

	)

74 
	#TCC_ETAG_ST
 0x18300000

	)

75 
	#TCC_OTAG_ST
 0x18400000

	)

79 
	#FIFO_INPUT_EN
 0x00000001

	)

80 
	#FIFO_OUTPUT_EN
 0x00000002

	)

81 
	#FIFO_HW
 0x000003f0

	)

82 
	#FIFO_HW_SHIFT
 4

	)

83 
	#FIFO_LW
 0x0003f000

	)

84 
	#FIFO_LW_SHIFT
 12

	)

85 
	#FIFO_LEVEL
 0x03f00000

	)

86 
	#FIFO_LEVEL_SHIFT
 20

	)

90 
	#GCACHE_SETALLOW
 0x0000000‡

	)

91 
	#GCACHE_SET0
 0x00000001

	)

92 
	#GCACHE_SET1
 0x00000002

	)

93 
	#GCACHE_SET2
 0x00000004

	)

94 
	#GCACHE_SET3
 0x00000008

	)

95 
	#GCACHE_FORCE_SET3
 0x00000010

	)

96 
	#GCACHE_WBACK_INH
 0x00000020

	)

97 
	#GCACHE_RR_FULL
 0x000003c0

	)

98 
	#GCACHE_RR_FULL_SHIFT
 6

	)

99 
	#GCACHE_WB_RESTART
 0x00003c00

	)

100 
	#GCACHE_WB_RESTART_SHIFT
 10

	)

101 
	#GCACHE_REL_DELAY
 0x0003c000

	)

102 
	#GCACHE_REL_DELAY_SHIFT
 14

	)

103 
	#GCACHE_REV
 0x003c0000

	)

104 
	#GCACHE_REV_SHIFT
 18

	)

108 
	#INTR_PENDING
 0x0000003‡

	)

109 
	#INTR_FIFO_HW
 0x00000040

	)

110 
	#INTR_FIFO_LW
 0x00000080

	)

111 
	#INTR_TIMER
 0x00000100

	)

112 
	#INTR_BUSERROR
 0x00000200

	)

113 
	#INTR_MACH_CHECK
 0x00000400

	)

114 
	#INTR_FIFO_HW_EN
 0x00000800

	)

115 
	#INTR_FIFO_LW_EN
 0x00001000

	)

116 
	#INTR_TIMER_EN
 0x00002000

	)

117 
	#INTR_BUSERROR_EN
 0x00004000

	)

118 
	#INTR_MACH_CHECK_EN
 0x00008000

	)

122 
	#ERROR_NESTED_BE
 0x00000001

	)

123 
	#ERROR_NESTED_MC
 0x00000002

	)

124 
	#ERROR_TYPE
 0x0000001¯

	)

125 
	#ERROR_TYPE_SHIFT
 2

	)

126 
	#ERROR_OFFSET
 0x000001e0

	)

127 
	#ERROR_OFFSET_SHIFT
 5

	)

128 
	#ERROR_INDEX
 0x001f„00

	)

129 
	#ERROR_INDEX_SHIFT
 9

	)

130 
	#ERROR_PARITY_SET
 0x00C00000

	)

131 
	#ERROR_PARITY_SET_SHIFT
 22

	)

132 
	#ERROR_SYSCMD
 0xff000000

	)

133 
	#ERROR_SYSCMD_SHIFT
 24

	)

137 
	#ERROR_SYSAD_TDB
 0x00

	)

138 
	#ERROR_SYSAD_TCC
 0x01

	)

139 
	#ERROR_SYSAD_CMD
 0x02

	)

140 
	#ERROR_SYSAD_UFO
 0x03

	)

141 
	#ERROR_GCACHE_PARITY
 0x04

	)

142 
	#ERROR_TBUS_UFO
 0x05

	)

146 
	#PAR_TDB_EN
 0x00000001

	)

147 
	#PAR_TCC_EN
 0x00000002

	)

148 
	#PAR_DATA_TDB_EN
 0x00000004

	)

149 
	#PAR_SYSAD_PS_TCC
 0x00000008

	)

150 
	#PAR_SYSAD_PS_DB0
 0x00000010

	)

151 
	#PAR_SYSAD_PS_DB1
 0x00100000

	)

152 
	#PAR_SYSAD_SYND_TCC
 0x000f0000

	)

153 
	#PAR_SYSAD_SYND_DB0
 0x0000f000

	)

154 
	#PAR_SYSAD_SYND_DB1
 0xf0000000

	)

155 
	#PAR_DATA_PS_DB0
 0x00000020

	)

156 
	#PAR_DATA_PS_DB1
 0x00200000

	)

157 
	#PAR_DATA_SYND_DB0
 0x00000c00

	)

158 
	#PAR_DATA_SYND_DB1
 0x0c000000

	)

159 
	#PAR_REV_DB0
 0x000003c0

	)

160 
	#PAR_REV_DB1
 0x03c00000

	)

165 
	#PRE_VALID
 0x00000001

	)

166 
	#PRE_ADDRESS
 0xffffff80

	)

170 
	#PRE_INV
 0x00000001

	)

171 
	#PRE_TIMEOUT
 0x0000001ê

	)

172 
	#PRE_TIMEOUT_SHIFT
 1

	)

173 
	#PRE_A_EN
 0x00000020

	)

174 
	#PRE_B_EN
 0x00000040

	)

175 
	#PRE_CAM_DEPTH
 0x00000380

	)

176 
	#PRE_CAM_DEPTH_SHIFT
 7

	)

177 
	#PRE_A_VALID
 0x00001000

	)

178 
	#PRE_B_VALID
 0x00002000

	)

179 
	#PRE_CAM0_VALID
 0x00010000

	)

180 
	#PRE_CAM1_VALID
 0x00020000

	)

181 
	#PRE_CAM2_VALID
 0x00040000

	)

182 
	#PRE_CAM3_VALID
 0x00080000

	)

183 
	#PRE_CAM4_VALID
 0x00100000

	)

184 
	#PRE_A_AGE
 0x0f000000

	)

185 
	#PRE_B_AGE
 0xf0000000

	)

186 
	#PRE_DEFAULT
 ((3<<
PRE_TIMEOUT_SHIFT
)|
PRE_A_EN
|
PRE_B_EN
|
PRE_CAM_DEPTH
)

	)

190 
	#GCACHE_TAG
 0xfff80000

	)

191 
	#GCACHE_INDEX
 0x0003ff80

	)

192 
	#GCACHE_OFFSET
 0x0000007f

	)

193 
	#GCACHE_TAG_SHIFT
 19

	)

194 
	#GCACHE_INDEX_SHIFT
 7

	)

198 
	#GCACHE_DIRTY
 0x00100000

	)

199 
	#GCACHE_VSYN_EN
 0x00200000

	)

200 
	#GCACHE_STATE_EN
 0x00400000

	)

201 
	#GCACHE_STATE
 0x01800000

	)

202 
	#GCACHE_STATE_SHIFT
 23

	)

203 
	#GCACHE_VSYN
 0x1e000000

	)

204 
	#GCACHE_INITSTATE
 (
GCACHE_VSYN_EN
|
GCACHE_STATE_EN
)

	)

208 
	#GCACHE_INVALID
 0

	)

209 
	#GCACHE_VALID
 2

	)

213 
	#TAGADDR_INDEX_SHIFT
 7

	)

214 
	#TAGADDR_SET_SHIFT
 5

	)

215 
	#tcc_ègaddr
(
ba£
,
ödex
,
£t
) \

216 (
ba£
 | (
ödex
 << 
TAGADDR_INDEX_SHIFT
Ë| (
£t
 << 
TAGADDR_SET_SHIFT
))

	)

220 
	#TCC_INDEX_OP
 0x00000004

	)

221 
	#TCC_DIRTY_WB
 0x00000008

	)

222 
	#TCC_INVALIDATE
 0x00000010

	)

223 
	#TCC_CACHE_SET
 0x00000060

	)

224 
	#TCC_CACHE_SET_SHIFT
 5

	)

225 
	#TCC_CACHE_INDEX
 0x0007ff80

	)

226 
	#TCC_CACHE_INDEX_SHIFT
 7

	)

227 
	#TCC_PHYSADDR
 0x7fffff80

	)

228 
	#TCC_CACHE_OP
 0x100000000

	)

229 
	#TCC_LINESIZE
 128

	)

231 
	#CACHE_SLINE_SIZE
 
TCC_LINESIZE


	)

235 
	#SAQ_INIT_ADDRESS
 0x18180000

	)

236 
	#SAQ_DEPTH
 32

	)

238 
	#OSPL_SPDBG
 0x0080

	)

246 
	#KGBASE
 0x8000000000000000

	)

247 
	#KG_TO_K1
(
x
Ë
	`PHYS_TO_K1
(x)

	)

248 
	#KG_TO_PHYS
(
x
Ë
	`KDM_TO_PHYS
(x)

	)

249 #i‡
_LANGUAGE_ASSEMBLY


250 
	#PHYS_TO_KG
(
x
Ë((xË| 
KGBASE
)

	)

251 
	#K1_TO_KG
(
x
Ë
	`PHYS_TO_KG
((xË& 
TO_PHYS_MASK
)

	)

253 
	#PHYS_TO_KG
(
x
Ë((
__psunsig√d_t
)(xË| 
KGBASE
)

	)

254 
	#K1_TO_KG
(
x
Ë
	`PHYS_TO_KG
((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
)

	)

260 
	#VECTOR_TCCHW
 1000

	)

261 
	#VECTOR_TCCLW
 1001

	)

265 #i‡
_LANGUAGE_C


266 
£âccfifos
(
lw
, 
hw
);

267 
íabÀtccöås
(
mask
);

268 
˛óπccöås
(
mask
);

269 
tu√_tcc_gˇche
();

272 #i‡
_STANDALONE


274 #i‡
LANGUAGE_ASSEMBLY


277 
	#TETON_BEV
 
C0_WORK0


	)

278 
	#TETON_GERROR
 
C0_WORK1


	)

281 
	#GERROR_PARITY
 0x000000000000ffff

	)

282 
	#GERROR_TAG
 0x00000000ffff0000

	)

283 
	#GERROR_DATA
 0x0000ffff00000000

	)

284 
	#GERROR_SET0
 0x1000000000000000

	)

285 
	#GERROR_SET1
 0x2000000000000000

	)

286 
	#GERROR_SET2
 0x4000000000000000

	)

287 
	#GERROR_SET3
 0x8000000000000000

	)

288 
	#GERROR_MAXPONERR
 50

	)

290 
	#GERROR_TAG_SHIFT
 16

	)

291 
	#GERROR_DATA_SHIFT
 32

	)

292 
	#GERROR_SET_SHIFT
 60

	)

297 
	#SR_PROMBASE
 
SR_CU0
|
SR_CU1
|
SR_FR
|
SR_PAGESIZE
|
SR_IE
|
SR_IBIT7
|
SR_IBIT9
|
SR_IBIT10


	)

	@/usr/include/sys/IP32.h

1 #i‚de‡
__SYS_IP32_H__


2 
	#__SYS_IP32_H__


	)

4 
	#_ARCSPROM


	)

6 #ifde‡
_STANDALONE


7 
	~<sys/mùs_addr•a˚.h
>

9 
	~<sys/¸ime.h
>

10 
	~<sys/ma˚.h
>

12 
	#SPLMIN
 0

	)

13 
	#SPLMAX
 5

	)

18 
	#VICE_CPU_INTR
 31

	)

19 
	#MEMERR_INTR
 21

	)

20 
	#CRMERR_INTR
 20

	)

21 
	#SOFT_INTR
(
x
Ë(28 + (x)Ë

	)

22 
	#RE_INTR
(
x
Ë(22 + (x)Ë

	)

23 
	#GBE_INTR
(
x
Ë(16 + (x)Ë

	)

24 
	#MACE_INTR
(
x
Ë(xË

	)

26 
	#SPL0
 0

	)

27 
	#SPL1
 1

	)

28 
	#SPL3
 1

	)

29 
	#SPL5
 1

	)

30 
	#SPLHINTR
 1

	)

31 
	#SPL6
 1

	)

32 
	#SPL65
 2

	)

33 
	#SPL7
 3

	)

34 
	#SPLECC
 4

	)

36 
	#CRM_EXCL
 0x1

	)

37 
	#CRM_CHKSTAT
 0x2

	)

39 
	#CRM_DRVENB
 0x4

	)

41 
	#TLBLO_HWBITS
 0x0ffffff‡

	)

42 
	#TLBLO_PFNTOKDMSHFT
 4

	)

43 
	#TLBLO_HWBITSHIFT
 4

	)

45 
	#PHYS_RAMBASE
 0x00000000

	)

46 
	#LINEAR_BASE
 0x40000000

	)

47 
	#SEG0_BASE
 0x00000000

	)

48 
	#SEG0_SIZE
 0x10000000

	)

49 
	#SEG1_BASE
 (
LINEAR_BASE
+
SEG0_SIZE
)

	)

53 
	#MINMEMSIZE
 0x2000000

	)

54 
	#K0_RAMBASE
 
	`PHYS_TO_K0
(
PHYS_RAMBASE
)

	)

55 
	#K1_RAMBASE
 
	`PHYS_TO_K1
(
PHYS_RAMBASE
)

	)

57 
	#PHYS_TO_K0_RAM
(
x
Ë
	`PHYS_TO_K0
((x)+
K0_RAMBASE
)

	)

58 
	#PHYS_TO_K1_RAM
(
x
Ë
	`PHYS_TO_K1
((x)+
K1_RAMBASE
)

	)

59 
	#SYMMON_STACK
 
	`PHYS_TO_K0_RAM
(0x6000)

	)

60 
	#SYMMON_STACK_ADDR
(
x
Ë
SYMMON_STACK


	)

61 #i‡
_MIPS_SIM
 =
_ABI64


62 
	#SYMMON_STACK_SIZE
 0x2000

	)

64 
	#SYMMON_STACK_SIZE
 0x1000

	)

66 
	#RESTART_ADDR
 
	`PHYS_TO_K0_RAM
(0x400)

	)

68 
	#ECCBYPASS_BASE
 0x80000000

	)

70 #i‚de‡
_STANDALONE


71 
	~<sys/IP32Êash.h
>

74 #ifde‡
_LANGUAGE_C


75 
	#RT_CLOCK_ADDR
 \

76 (
ds17287_˛k
 *)
	`PHYS_TO_K1
(
ISA_RTC_BASE
+7)

	)

78 
	#RT_CLOCK_ADDR
 
	`PHYS_TO_K1
(
ISA_RTC_BASE
+7)

	)

81 
	#RT_RAM_FLAGS
 0x0

	)

82 
	#RT_FLAGS_INVALID
 0x1

	)

83 
	#RT_RAM_BASE
 0x1

	)

86 
	#PROM_RAMBASE
 
	`PHYS_TO_K0_RAM
(0x400000)

	)

87 
	#PROM_STACK
 
	`PHYS_TO_K1_RAM
(0x800000)

	)

88 
	#PROM_TILE_BASE
 
	`PHYS_TO_K1_RAM
(0x500000)

	)

89 
	#PROM_TILE_CNT
 21

	)

91 
	#PROM_RAMBASE
 
	`PHYS_TO_K0_RAM
(0x1000000)

	)

92 
	#PROM_STACK
 
	`PHYS_TO_K1_RAM
(0x1400000)

	)

93 
	#PROM_TILE_BASE
 
	`PHYS_TO_K1_RAM
(0x1100000)

	)

94 
	#PROM_TILE_CNT
 21

	)

101 
	#RTC_BASE
 
	`PHYS_TO_K1
(
ISA_RTC_BASE
+7)

	)

106 
	#RTC_SAVE_UST
 37

	)

107 
	#RTC_SAVE_REG
 41

	)

108 
	#RTC_RESET_CTR
 49

	)

114 
	#N16550PORTS
 2

	)

115 
	#SERIAL_PORT0_BASE
 
	`PHYS_TO_K1
(
ISA_SER1_BASE
 + 7)

	)

116 
	#SERIAL_PORT1_BASE
 
	`PHYS_TO_K1
(
ISA_SER2_BASE
 + 7)

	)

117 
	#SERIAL_CLOCK_FREQ
 (1843200)

	)

123 
	#FLASH_BASE
 0x1fc00000

	)

124 
	#FLASH_PAGE_SIZE
 0x200

	)

125 
	#FLASH_PROTECTED
 0x4000

	)

126 
	#FLASH_SIZE
 (512*1024)

	)

127 
	#FLASH_PROGRAMABLE
 (
FLASH_BASE
+
FLASH_PROTECTED
)

	)

134 
	#MAC110_BASE
 
	`PHYS_TO_K1
(
MACE_ENET
)

	)

141 
	#FW_HARD_RESET
 0

	)

142 
	#FW_SOFT_RESET
 1

	)

143 
	#FW_EIM
 2

	)

144 
	#FW_HALT
 3

	)

145 
	#FW_POWERDOWN
 4

	)

146 
	#FW_RESTART
 5

	)

147 
	#FW_REBOOT
 6

	)

148 
	#FW_INIT
 7

	)

151 #ifde‡
LANGUAGE_C


154 
	sscuzzy
 {

155 vﬁ©ûê*
	md_addr
;

156 vﬁ©ûê*
	md_d©a
;

157 vﬁ©ûê*
	md_˘æ
;

158 vﬁ©ûê*
	md_b˙t
;

159 vﬁ©ûê*
	md_curbp
;

160 vﬁ©ûê*
	md_√xtbp
;

161 vﬁ©ûê*
	md_dmacfg
;

162 vﬁ©ûê*
	md_piocfg
;

163 
	md_öôÊags
;

164 } 
	tscuzzy_t
;

173 #i‡
R4000


174 
	#CACHE_ERR_EFRAME
 (0x1000 - 
EF_SIZE
)

	)

175 
	#CACHE_ERR_ECCFRAME
 (
CACHE_ERR_EFRAME
 - 
ECCF_SIZE
)

	)

178 
	#CACHE_ERR_SP
 (
CACHE_ERR_ECCFRAME
 - 4 * ())

	)

181 
	#CACHE_ERR_K1_SAVE
 0x0ff8

	)

182 
	#CACHE_ERR_FRAMEPTR
 0x0ff0

	)

183 
	#ECC_SCRATCH_LINE
 0x0f00

	)

194 
	#ECCF_CACHE_ERR
 0

	)

195 
	#ECCF_TAGLO
 1

	)

196 
	#ECCF_ECC
 2

	)

197 
	#ECCF_ERROREPC
 3

	)

198 
	#ECCF_PADDRHI
 4

	)

199 
	#ECCF_PADDR
 5

	)

200 
	#ECCF_CES_DATA
 6

	)

201 
	#ECCF_CPU_ERR_STAT
 7

	)

202 
	#ECCF_MEM_ERR_STAT
 8

	)

203 
	#ECCF_CPU_ERR_ADDRHI
 9

	)

204 
	#ECCF_CPU_ERR_ADDR
 10

	)

205 
	#ECCF_MEM_ERR_ADDR
 11

	)

206 
	#ECCF_SIZE
 (12 * ())

	)

209 
	#MAXCPU
 1

	)

211 
	#CAUSE_BERRINTR
 0x100000

	)

214 
	#EGUN_PHYS
 1

	)

215 
	#EGUN_PHYS_WORD
 2

	)

216 
	#EGUN_PROCVIRT
 3

	)

218 #ifde‡
LANGUAGE_C


219 
	segun_cmd
 {

220 
	maddr
;

221 
	mecc_ª∂
;

222 
pid_t
 
	mpid
;

226 #i‚de‡
STANDALONE


227 #i‡
_SYSTEM_SIMULATION


228 
	~<sys/MHSIM.h
>

233 #ifde‡
LANGUAGE_C


234 
	#MAXNVNAMELEN
 32

	)

237 
	snvøm_íåy
 {

238 
	m¡_«me
[
MAXNVNAMELEN
];

239 *
	m¡_vÆue
;

244 (*
	tötvec_func_t
)(
	te‰ame_t
 *, 
	t__psöt_t
);

247 #i‚de‡
_STANDALONE


252 
	`£t¸imeve˘‹
(, , 
ötvec_func_t
, 
__psöt_t
, );

253 
	`un£t¸imeve˘‹
(, 
ötvec_func_t
);

254 
	`¸ime_öå_íabÀ
();

255 
	`¸ime_öå_dißbÀ
();

257 
__uöt64_t
 
	t_ma˚ªg_t
;

259 
	`£tma˚ißve˘‹
(
öå
, 
_ma˚ªg_t
 
ma˚bôs
, 
ötvec_func_t
 
i§
);

260 
	`un£tma˚ißve˘‹
(
öå
, 
_ma˚ªg_t
 
ma˚bôs
);

262 
	`ma˚_mask_wrôe
(
_ma˚ªg_t
 
m_mask
);

263 
_ma˚ªg_t
 
	`ma˚_mask_ªad
();

264 
	`ma˚_mask_íabÀ
(
_ma˚ªg_t
 
drivî_mask
);

265 
	`ma˚_mask_dißbÀ
(
_ma˚ªg_t
 
drivî_mask
);

266 
	`ma˚_mask_upd©e
(
_ma˚ªg_t
 
drivî_mask
,

267 
_ma˚ªg_t
 
cuºít_mask
);

271 
∑ddr_t
 
	`gë_iß_dma_buf_addr
();

272 
	`iß_dma_buf_öô
();

273 
	`•löt
();

274 
	`•lhöå
();

275 
	`£t_aut›owî⁄
();

276 
	`s¸ub_mem‹y
(
ˇddr_t
);

277 
	`addr_to_b™k
(
∑ddr_t
);

278 
	`vi˚_îr
(
_¸mªg_t
, _crmreg_t);

279 
	`b™k_size
(
_¸mªg_t
);

280 
	`lﬂd_nvøm_èb
();

281 *
	`ëoh
(*);

282 
	`Êash_wrôe_ív
();

283 #ifde‡
TILES_TO_LPAGES


284 
	`•Ãër
();

288 
	`fûl_u°_highbôs
(
ma˚32
, *
ma˚64
);

291 
	`_r4600sc_dißbÀ_sˇche
();

292 
	`_r4600sc_íabÀ_sˇche
();

293 
	`_ªad_èg
(, 
ˇddr_t
, *);

294 
	`éb_to_phys
(
k_machªg_t
 , 
∑ddr_t
 *, *);

295 
	`r_phys_w‹d
(
∑ddr_t
);

296 
	`r_phys_w‹d_îl
(
∑ddr_t
);

297 
	`ecc_ßme_ˇche_block
(,
∑ddr_t
,paddr_t);

298 
	`decode_ö°
(
e‰ame_t
 *, , *, 
k_machªg_t
 *, *);

299 
	`ecc_memöô
(
p‚_t
,Öfn_t);

300 
	`ecc_íabÀ
();

301 
	`ecc_dißbÀ
();

302 
p‚_t
 
	`œ°_phys_p‚
();

303 
ecc_memöôed
;

304 
	`óæy_mã_zîo
(
∑ddr_t
, 
size_t
);

307 #i‡(
_MIPS_ISA
 == 3 || _MIPS_ISA == 4)

308 
	#WRITE_REG64
(
vÆ
, 
addr
, 
ty≥
) \

309 (*(vﬁ©ûê
uöt64_t
 *)(
addr
Ë(
vÆ
))

	)

311 
	#WRITE_REG64
(
vÆ
, 
addr
, 
ty≥
) \

312 
	`wrôe_ªg64
(()(
vÆ
), (
__psunsig√d_t
)(
addr
))

	)

315 #i‡(
_MIPS_ISA
 == 3 || _MIPS_ISA == 4)

316 
	#READ_REG64
(
addr
, 
ty≥
) \

317 ((
ty≥
)(*(vﬁ©ûê*)(
addr
)))

	)

319 
	#READ_REG64
(
addr
, 
ty≥
) \

320 ((
ty≥
)
	`ªad_ªg64
((
__psunsig√d_t
)(
addr
)))

	)

323 
	#REG_RDANDWR8
(
_a
, 
_m
Ë
	`pciio_pio_wrôe8
(
	`pciio_pio_ªad8
((_a))&(_m),(_a))

	)

324 
	#REG_RDORWR8
(
_a
, 
_m
Ë
	`pciio_pio_wrôe8
(
	`pciio_pio_ªad8
((_a))|(_m),(_a))

	)

327 
	#CRM_TEX_MAX_RESIDENT
 128

	)

328 
	#CRM_TEX_TLB_SIZE
 28

	)

329 
	#CRM_TEX_FIFOMAX
 24

	)

330 
	#CRM_TEX_FIFOSRL
 18

	)

331 
	#CRM_TEX_FIFOMASK
 0x7‡

	)

332 
	#CRM_TEX_IBSTAT_ADDR
 0xb5004000

	)

333 
	#CRM_TEX_TLB_FIRST_ADDR
 0xb5001600

	)

334 
	#CRM_TEX_TLB_LAST_ADDR
 0xb50016d8

	)

335 
	sCrmTexTlb
 {

336 
ébAddr
;

338 
u_sh‹t
 
èddr
[4];

339 
u_l⁄g
 
œddr
[2];

340 
dw
;

341 }
ébD©a
;

344 #ifde‡
MH_R10000_SPECULATION_WAR


350 
	#EXTK0_OFFSET
 0x1800000

	)

351 
	#EXTK0_BASE
 (
K2BASE
 + 
EXTK0_OFFSET
)

	)

356 #ifde‡
R10000


358 
	#CACHE_TMP_EMASK
 0x3e00

	)

359 
	#CACHE_TMP_EFRAME1
 0x0c00

	)

360 
	#CACHE_TMP_EFRAME2
 0x0e00

	)

	@/usr/include/sys/R10k.h

1 #i‚def 
__SYS_R10K_H__


2 
	#__SYS_R10K_H__


	)

18 #i‡
deföed
(
_LANGUAGE_C
)

19 
	~<sys/ty≥s.h
>

25 #i‚de‡
R4000


26 
	#CONFIG_IC
 0xe0000000

	)

27 
	#CONFIG_IC_SHFT
 29

	)

28 
	#CONFIG_DC
 0x1c000000

	)

29 
	#CONFIG_DC_SHFT
 26

	)

30 
	#CONFIG_SC
 0x00380000

	)

31 
	#CONFIG_SC_SHFT
 19

	)

32 
	#CONFIG_SS
 0x00070000

	)

33 
	#CONFIG_SS_SHFT
 16

	)

34 
	#CONFIG_BE
 0x00008000

	)

35 
	#CONFIG_BE_SHFT
 15

	)

36 
	#CONFIG_SK
 0x00004000

	)

37 
	#CONFIG_SB
 0x00002000

	)

38 
	#CONFIG_SB_SHFT
 13

	)

39 
	#CONFIG_EC
 0x00001e00

	)

40 
	#CONFIG_EC_SHFT
 9

	)

41 
	#CONFIG_PM
 0x00000180

	)

42 
	#CONFIG_PM_SHFT
 7

	)

43 
	#CONFIG_PE
 0x00000040

	)

44 
	#CONFIG_CT
 0x00000020

	)

45 
	#CONFIG_DN
 0x00000018

	)

46 
	#CONFIG_DN_SHFT
 3

	)

47 
	#CONFIG_K0
 0x00000007

	)

50 #i‡
deföed
 (
SN
)

59 
	#R10KC_KSEG0CA
(
x
Ë((x & 0x7Ë<< 0Ë

	)

60 
	#R10KC_DEVNR
(
x
Ë((x & 0x3Ë<< 3Ë

	)

61 
	#R10KC_COHPRCRRQTAR
(
x
Ë((x & 0x1Ë<< 5Ë

	)

62 
	#R10KC_PRCELMREQ
(
x
Ë((x & 0x1Ë<< 6Ë

	)

63 
	#R10KC_PRCREQMAX
(
x
Ë((x & 0x3Ë<< 7Ë

	)

64 
	#R10KC_SYSCLKDIV
(
x
Ë((x & 0xfË<< 9Ë

	)

65 
	#R10KC_SCBLKSIZE
(
x
Ë((x & 0x1Ë<< 13Ë

	)

66 
	#R10KC_SCCOREN
(
x
Ë((x & 0x1Ë<< 14Ë

	)

67 
	#R10KC_MEMEND
(
x
Ë((x & 0x1Ë<< 15Ë

	)

68 
	#R10KC_SCSIZE
(
x
Ë((x & 0x7Ë<< 16Ë

	)

69 
	#R10KC_SCCLKDIV
(
x
Ë((x & 0x7Ë<< 19Ë

	)

71 
	#R10KC_DDR
(
x
Ë((x & 0x1Ë<< 23Ë

	)

73 
	#R10KC_TAP
(
x
Ë((x & 0xfË<< 25Ë

	)

75 
	#R10KC_ODRAINSYS
(
x
Ë((x & 0x1Ë<< 30Ë

	)

76 
	#R10KC_CTM
(
x
Ë((x & 0x1Ë<< 31Ë

	)

82 
	#R10KC_DEF
 (
	`R10KC_KSEG0CA
(5) |\

83 
	`R10KC_DEVNR
(0) |\

84 
	`R10KC_COHPRCRRQTAR
(0) |\

85 
	`R10KC_PRCELMREQ
(0) |\

86 
	`R10KC_PRCREQMAX
(3) |\

87 
	`R10KC_SCBLKSIZE
(1) |\

88 
	`R10KC_SCCOREN
(0) |\

89 
	`R10KC_MEMEND
(1) |\

90 
	`R10KC_ODRAINSYS
(0) |\

91 
	`R10KC_CTM
(0) \

92 )

	)

102 
	#CONFIG_R10K_IC
 0xe0000000

	)

103 
	#CONFIG_R10K_IC_SHFT
 29

	)

104 
	#CONFIG_R10K_DC
 0x1c000000

	)

105 
	#CONFIG_R10K_DC_SHFT
 26

	)

106 
	#CONFIG_R10K_SC
 0x00380000

	)

107 
	#CONFIG_R10K_SC_SHFT
 19

	)

108 
	#CONFIG_R10K_SS
 0x00070000

	)

109 
	#CONFIG_R10K_SS_SHFT
 16

	)

110 
	#CONFIG_R10K_SK
 0x00004000

	)

111 
	#CONFIG_R10K_SB
 0x00002000

	)

112 
	#CONFIG_R10K_SB_SHFT
 13

	)

113 
	#CONFIG_R10K_EC
 0x00001e00

	)

114 
	#CONFIG_R10K_EC_SHFT
 9

	)

115 
	#CONFIG_R10K_PM
 0x00000180

	)

116 
	#CONFIG_R10K_PM_SHFT
 7

	)

117 
	#CONFIG_R10K_PE
 0x00000040

	)

118 
	#CONFIG_R10K_CT
 0x00000020

	)

119 
	#CONFIG_R10K_DN
 0x00000018

	)

120 
	#CONFIG_R10K_DN_SHFT
 3

	)

122 
	#CONFIG_UNCACHED
 0x00000002

	)

123 #i‡
_RUN_UNCACHED


124 
	#CONFIG_NONCOHRNT
 
CONFIG_UNCACHED


	)

125 
	#CONFIG_COHRNT_EXL
 
CONFIG_UNCACHED


	)

126 
	#CONFIG_COHRNT_EXLWR
 
CONFIG_UNCACHED


	)

128 
	#CONFIG_NONCOHRNT
 0x00000003

	)

129 
	#CONFIG_COHRNT_EXL
 0x00000004

	)

130 
	#CONFIG_COHRNT_EXLWR
 0x00000005

	)

132 
	#CONFIG_UNCACHED_ACC
 0x00000007

	)

134 
	#CONFIG_PCACHE_POW2_BASE
 12

	)

135 
	#CONFIG_SCACHE_POW2_BASE
 19

	)

142 
	#CACHE_ILINE_SIZE
 64

	)

143 
	#CACHE_ILINE_MASK
 ~(
CACHE_ILINE_SIZE
-1)

	)

144 
	#CACHE_DLINE_SIZE
 32

	)

145 
	#CACHE_DLINE_MASK
 ~(
CACHE_DLINE_SIZE
-1)

	)

146 #ifde‡
IP32


147 
	#CACHE_SLINE_SIZE
 64

	)

149 
	#CACHE_SLINE_SIZE
 128

	)

151 
	#CACHE_SLINE_MASK
 ~(
CACHE_SLINE_SIZE
-1)

	)

152 
	#CACHE_SLINE_SUBSIZE
 16

	)

170 
	#CTP_TAGPARITY_MASK
 0x0000000000000001

	)

171 
	#CTP_TAGPARITY_SHFT
 0

	)

172 
	#CTP_SCW
 0x0000000000000002

	)

173 
	#CTP_STATEPARITY_MASK
 0x0000000000000004

	)

174 
	#CTP_STATEPARITY_SHFT
 2

	)

175 
	#CTP_LRU
 0x0000000000000008

	)

176 
	#CTP_STATE_MASK
 0x00000000000000c0

	)

177 
	#CTP_STATE_SHFT
 6

	)

178 
	#CTP_STATE_I
 0

	)

179 
	#CTP_STATE_S
 1

	)

180 
	#CTP_STATE_CE
 2

	)

181 
	#CTP_STATE_DE
 3

	)

182 
	#CTP_STATEMOD_SHFT
 61

	)

183 
	#CTP_STATEMOD_MASK
 (0x7LL<<
CTP_STATEMOD_SHFT
)

	)

184 
	#CTP_STATEMOD_N
 1

	)

185 
	#CTP_STATEMOD_I
 2

	)

186 
	#CTP_STATEMOD_R
 4

	)

187 
	#CTP_TAG_MASK
 0x0000000fffffff00LL

	)

188 
	#CTP_TAG_SHFT
 8

	)

192 
	#CTP_ICACHE_TAG_MASK
 (
CTP_TAGPARITY_MASK
+
CTP_STATEPARITY_MASK
+ \

193 
CTP_STATEPARITY_MASK
+
CTP_LRU
+
CTP_STATE_I
+\

194 
CTP_TAG_MASK
+
CTP_STATEMOD_MASK
)

	)

195 
	#CTP_DCACHE_TAG_MASK
 (
CTP_TAGPARITY_MASK
+
CTP_STATEPARITY_MASK
+ \

196 
CTP_STATEPARITY_MASK
+
CTP_LRU
+ \

197 
CTP_STATE_MASK
+
CTP_TAG_MASK
+ \

198 
CTP_STATEMOD_MASK
)

	)

200 
	#CTP_ICACHE_TAGHI_MASK
 0x0000000f

	)

201 
	#CTP_ICACHE_TAGLO_MASK
 0xffffff4d

	)

203 
	#CTP_DCACHE_TAGHI_MASK
 0xe000000f

	)

204 
	#CTP_DCACHE_TAGLO_MASK
 0xffffffcf

	)

216 
	#CTS_MRU
 0x8000000000000000LL

	)

217 
	#CTS_TAG_MASK
 0x0000000fffffc000LL

	)

218 
	#CTS_TAG_SHFT
 14

	)

219 
	#CTS_STATE_MASK
 0x0000000000000c00

	)

220 
	#CTS_STATE_SHFT
 10

	)

221 
	#CTS_STATE_I
 0

	)

222 
	#CTS_STATE_S
 1

	)

223 
	#CTS_STATE_CE
 2

	)

224 
	#CTS_STATE_DE
 3

	)

225 
	#CTS_VIDX_MASK
 0x0000000000000180

	)

226 
	#CTS_VIDX_SHFT
 7

	)

227 
	#CTS_ECC_MASK
 0x000000000000007f

	)

231 
	#CTS_MASK
 (
CTS_MRU
+
CTS_TAG_MASK
+
CTS_STATE_MASK
+ \

232 
CTS_VIDX_MASK
+
CTS_ECC_MASK
)

	)

233 
	#CTS_TAGHI_MASK
 0x8000000f

	)

234 
	#CTS_TAGLO_MASK
 0xffffcdff

	)

238 
	#CE_TYPE_SHFT
 30

	)

239 
	#CE_TYPE_MASK
 (3U<<
CE_TYPE_SHFT
)

	)

240 
	#CE_TYPE_I
 (0Ë

	)

241 
	#CE_TYPE_D
 (1U<<
CE_TYPE_SHFT
)

	)

242 
	#CE_TYPE_S
 (2U<<
CE_TYPE_SHFT
)

	)

243 
	#CE_TYPE_SIE
 (3U<<
CE_TYPE_SHFT
)

	)

245 
	#CE_EW
 (1<<29)

	)

246 
	#CE_EE
 (1<<28)

	)

252 
	#CE_D_WAY1
 (1<<27)

	)

253 
	#CE_D_WAY0
 (1<<26)

	)

254 
	#CE_D_MASK
 (
CE_D_WAY1
+
CE_D_WAY0
)

	)

260 
	#CE_TA_WAY1
 (1<<25)

	)

261 
	#CE_TA_WAY0
 (1<<24)

	)

262 
	#CE_TA_MASK
 (
CE_TA_WAY1
+
CE_TA_WAY0
)

	)

268 
	#CE_TS_WAY1
 (1<<23)

	)

269 
	#CE_TS_WAY0
 (1<<22)

	)

270 
	#CE_TS_MASK
 (
CE_TS_WAY1
+
CE_TS_WAY0
)

	)

275 
	#CE_TM_WAY1
 (1<<21)

	)

276 
	#CE_TM_WAY0
 (1<<20)

	)

277 
	#CE_TM_MASK
 (
CE_TM_WAY1
+
CE_TM_WAY0
)

	)

282 
	#CE_SA
 (1<<25)

	)

283 
	#CE_SC
 (1<<24)

	)

284 
	#CE_SR
 (1<<23)

	)

288 
	#CE_SINDX_MASK
 (0x007fffc0)

	)

289 
	#CE_PINDX_MASK
 (0x00003ff8)

	)

294 
	#CACHERR_SRC_MSK
 
CE_TYPE_MASK


	)

295 
	#CACHERR_SRC_PI
 
CE_TYPE_I


	)

296 
	#CACHERR_SRC_PD
 
CE_TYPE_D


	)

297 
	#CACHERR_SRC_SD
 
CE_TYPE_S


	)

298 
	#CACHERR_SRC_SYSAD
 
CE_TYPE_SIE


	)

300 
	#CACHERR_EW
 
CE_EW


	)

302 #i‚de‡
R4000


303 
	#CACHERR_EE
 
CE_EE


	)

308 
	#CACHERR_R10K_EE
 
CE_EE


	)

313 
	#CACHERR_D
 
CE_D_MASK


	)

314 
	#CACHERR_TA
 
CE_TA_MASK


	)

315 
	#CACHERR_TS
 
CE_TS_MASK


	)

316 
	#CACHERR_TM
 
CE_TM_MASK


	)

317 
	#CACHERR_SA
 
CE_SA


	)

318 
	#CACHERR_SC
 
CE_SC


	)

319 
	#CACHERR_SR
 
CE_SR


	)

320 #i‚de‡
R4000


321 
	#CACHERR_PIDX_MASK
 
CE_PINDX_MASK


	)

322 
	#CACHERR_SIDX_MASK
 
CE_SINDX_MASK


	)

324 
	#CACHERR_R10K_PIDX_MASK
 
CE_PINDX_MASK


	)

325 
	#CACHERR_R10K_SIDX_MASK
 
CE_SINDX_MASK


	)

330 
	#CACH_PI
 0x0

	)

331 
	#CACH_PD
 0x1

	)

332 
	#CACH_S
 0x3

	)

333 #i‚de‡
R4000


334 
	#CACH_SD
 
CACH_S


	)

336 #ifdef 
R4000


337 #unde‡
CACH_SI


339 
	#CACH_SI
 
CACH_S


	)

340 
	#CACH_BARRIER
 0x14

	)

344 #i‚de‡
R4000


345 
	#C_IINV
 0x00

	)

346 
	#C_IWBINV
 0x00

	)

347 
	#C_ILT
 0x04

	)

348 
	#C_IST
 0x08

	)

349 
	#C_HINV
 0x10

	)

350 
	#C_HWBINV
 0x14

	)

352 
	#C_ILD
 0x18

	)

353 
	#C_ISD
 0x1¯

	)

354 #i‚de‡
R4000


355 
	#C_HWB
 
C_HWBINV


	)

358 
	#PCACHE_WAYS
 2

	)

359 
	#SCACHE_WAYS
 2

	)

361 
	#R10K_DCACHE_LINES
 \

362 (
R10K_MAXPCACHESIZE
 / (
CACHE_DLINE_SIZE
 * 
PCACHE_WAYS
))

	)

363 
	#R10K_ICACHE_LINES
 \

364 (
R10K_MAXPCACHESIZE
 / (
CACHE_ILINE_SIZE
 * 
PCACHE_WAYS
))

	)

366 #i‡
deföed
(
_LANGUAGE_C
)

368 
	sˇche›_s
 {

369 
__uöt64_t
 
	mc›_addªss
;

370 
__uöt32_t
 
	mc›_›î©i⁄
;

371 
__uöt32_t
 
	mc›_èghi
;

372 
__uöt32_t
 
	mc›_èglo
;

373 
__uöt32_t
 
	mc›_ecc
;

374 } 
	tˇche›_t
;

381 
	#DR_BP_MOD_SHF
 16

	)

382 
	#DR_BP_MOD_MASK
 (0x3 << 
DR_BP_MOD_SHF
)

	)

383 
	#DR_BP_2BITS_COUNTER
 (0x0 << 
DR_BP_MOD_SHF
)

	)

384 
	#DR_BP_NONE_TAKEN
 (0x1 << 
DR_BP_MOD_SHF
)

	)

385 
	#DR_BP_ALL_TAKEN
 (0x2 << 
DR_BP_MOD_SHF
)

	)

386 
	#DR_BP_BACK_TAKEN
 (0x3 << 
DR_BP_MOD_SHF
)

	)

393 
	#SCACHE_ERROR_ADDR
(
_˚r
, 
_èg
) \

394 (((
_˚r
Ë& 
CE_SINDX_MASK
Ë| (((
_èg
Ë& 
CTS_TAG_MASK
Ë<< 4))

	)

396 
	#PCACHE_ERROR_ADDR
(
_˚r
, 
_èg
) \

397 (((
_˚r
Ë& 
CE_PINDX_MASK
Ë| (((
_èg
Ë& 
CTP_TAG_MASK
Ë<< 4))

	)

399 #i‡
deföed
(
_LANGUAGE_ASSEMBLY
)

407 
	#ICACHE
(
›
, 
va
Ë
ˇche
 op+
CACH_PI
, 
	)
va

408 
	#DCACHE
(
›
, 
va
Ë
ˇche
 op+
CACH_PD
, 
	)
va

409 
	#SCACHE
(
›
, 
∑
Ë
ˇche
 op+
CACH_S
, 
	)
∑

428 
	#ECCF_STACK_SIZE
 4096

	)

429 
	#ECCF_TRACE_CNT
 16

	)

431 #i‡
deföed
(
_LANGUAGE_C
)

433 
	secc‰ame_s
 {

434 
__uöt64_t
 
	meccf_îr‹EPC
;

435 
__uöt64_t
 
	meccf_èg
[2];

436 
__uöt32_t
 
	meccf_ˇche_îr
;

437 
__uöt32_t
 
	meccf_èglo
;

438 
__uöt32_t
 
	meccf_èghi
;

439 
	meccf_ecc
;

440 
	meccf_°©us
;

441 
uöt
 
	meccf_icou¡
;

442 
uöt
 
	meccf_dcou¡
;

443 
uöt
 
	meccf_scou¡
;

444 
uöt
 
	meccf_sicou¡
;

446 
__uöt32_t
 
	mec˘_˚r
;

447 
__uöt64_t
 
	mec˘_èg
[2];

448 
__uöt64_t
 
	mec˘_îªpc
;

449 #i‡
deföed
 (
EVEREST
Ë|| deföed (
SN
)

450 
__uöt64_t
 
	mec˘_πc
;

452 } 
	meccf_åa˚
[
ECCF_TRACE_CNT
];

453 
uöt
 
	meccf_åa˚_idx
;

454 
uöt
 
	meccf_putbuf_idx
;

455 
__uöt64_t
 
	mec˘_ªcovî_πc
;

456 
ush‹t
 
	mec˘_ªcovî_iˇche_cou¡
;

457 
ush‹t
 
	mec˘_ªcovî_dˇche_cou¡
;

458 
ush‹t
 
	mec˘_ªcovî_sˇche_cou¡
;

459 
ush‹t
 
	mec˘_ªcovî_sõ_cou¡
;

460 } 
	tecc‰ame_t
;

474 
	u˝u_mode_u
 {

475 
	mvÆ
;

477 
	munu£d
 : 1,

478 
	mSCClkET≠
 : 1,

479 
	mSysClkDiv
 : 4,

480 
	mSCC‹En
 : 1,

481 
	mSCClkDiv
 : 4,

482 
	mSCClkT≠
 : 4,

483 
	mDDR
 : 1;

484 } 
	mr10kmode
;

485 } 
	t˝u_mode_t
;

489 #i‡
deföed
 (
SN
)

491 
	t__uöt16_t
;

494 
	#IL_ENTRIES
 (
CACHE_ILINE_SIZE
/(
__uöt32_t
))

	)

495 
	#IL_ENTRIES
 (
CACHE_ILINE_SIZE
/(
__uöt32_t
))

	)

496 
	#ICACHE_ADDR
(
löe
, 
way
Ë((÷öeË* 
CACHE_ILINE_SIZE
Ë+ 
CACHEOP_K0BASE
 + (way))

	)

498 
	#DL_ENTRIES
 
CACHE_DLINE_SIZE
 /  (
__uöt32_t
)

	)

499 
	#DCACHE_ADDR
(
löe
, 
way
Ë((÷öeË* 
CACHE_DLINE_SIZE
Ë+ 
CACHEOP_K0BASE
 + (way))

	)

501 
	#SL_ENTRIES
 (
CACHE_SLINE_SIZE
 / (2 *  (
__uöt64_t
)))

	)

502 
	#SCACHE_ADDR
(
löe
, 
way
Ë((÷öeË* 
CACHE_SLINE_SIZE
Ë+ 
CACHEOP_K0BASE
 + (way))

	)

504 
	#R10K_ICACHESIZE
 0x008000

	)

505 
	#R10K_ICACHELINES
 (
R10K_ICACHESIZE
 / 
CACHE_ILINE_SIZE
)

	)

506 
	#R10K_DCACHESIZE
 0x008000

	)

507 
	#R10K_DCACHELINES
 (
R10K_DCACHESIZE
 / 
CACHE_DLINE_SIZE
)

	)

508 
	#R10K_SCACHELINES
 (
	`sCacheSize
(Ë/ 
CACHE_SLINE_SIZE
)

	)

510 
	#R10K_CACHERR_PIC
 0x0

	)

511 
	#R10K_CACHERR_PDC
 0x1

	)

512 
	#R10K_CACHERR_SC
 0x2

	)

513 
	#R10K_CACHERR_SYSAD
 0x3

	)

516 
	ur10k_c⁄f_u
 {

517 
__uöt32_t
 
	mvÆ
;

519 
__uöt32_t
 
	mICSize
 :3,

520 
	mDCSize
 :3,

521 
	mrsv1
 :4,

522 
	mSCClkDiv
 :3,

523 
	mSCSize
 :3,

524 
	mMemEnd
 :1,

525 
	mSCC‹En
 :1,

526 
	mSCBlkSize
 :1,

527 
	mSySClKDiv
 :4,

528 
	mPrcReqMax
 :2,

529 
	mPrcElMReq
 :1,

530 
	mCohPrcReqT¨
 :1,

531 
	mDevNr
 :2,

532 
	mCacheAlg
 :3;

533 } 
	m˙f
;

534 } 
	tr10k_c⁄f_t
;

537 
	ur10k_ˇchîr_syndrome
 {

538 
__uöt32_t
 
	mvÆ
;

540 
__uöt32_t
 
	msyndrome
 : 9,

541 
	mrsv
 :23;

542 } 
	mx
;

543 } 
	tr10k_ˇchîr_syndrome_t
;

546 
	ur10k_ˇchîr
 {

547 
__uöt32_t
 
	mvÆ
;

550 
__uöt32_t
 
	mîr
 : 2,

551 
	mrsv
 :30;

552 } 
	mîr‹_ty≥
;

559 
__uöt32_t
 
	mîπy≥
 : 2,

560 
	mew
 : 1,

561 
	mrsv1
 : 1,

562 
	md©a_¨øy_îr
 : 2,

563 
	mèg_addr_îr
 : 2,

564 
	mèg_°©e_îr
 : 2,

565 
	mrsv2
 : 8,

566 
	mpidx
 : 8,

567 
	mrsv3
 : 6;

568 } 
	mpic
;

574 
__uöt32_t
 
	mîπy≥
 : 2,

575 
	mew
 : 1,

576 
	mì
 : 1,

577 
	md©a_¨øy_îr
 : 2,

578 
	mèg_addr_îr
 : 2,

579 
	mèg_°©e_îr
 : 2,

580 
	mèg_mod_¨øy_îr
: 2,

581 
	mrsv1
 : 6,

582 
	mpidx
 :11,

583 
	mrsv2
 : 3;

584 } 
	mpdc
;

590 
__uöt32_t
 
	mîπy≥
 : 2,

591 
	mew
 : 1,

592 
	mrsv1
 : 1,

593 
	md©a_¨øy_îr
 : 2,

594 
	mèg_¨øy_îr
 : 2,

595 
	mrsv2
 : 1,

596 
	msidx
 :17,

597 
	mrsv3
 : 6;

598 } 
	msc
;

599 } 
	tr10k_ˇchîr_t
;

602 
	uû_èg_u
 {

603 
__uöt64_t
 
	mv
;

605 
__uöt64_t
 
	mrsv4
 :28,

607 
	mèg
 :28,

608 
	mrsv3
 : 1,

609 
	m°©e
 : 1,

610 
	mrsv2
 : 2,

611 
	mÃu
 : 1,

612 
	m°©ï¨
: 1,

613 
	mrsv1
 : 1,

614 
	mèg∑r
 : 1;

615 } 
	mt
;

616 } 
	tû_èg_t
;

619 
	udl_èg_u
 {

620 
__uöt64_t
 
	mv
;

622 
__uöt64_t
 
	m°©emod
: 3,

623 
	mrsv2
 :25,

625 
	mèg
 :28,

626 
	m°©e
 : 2,

627 
	mrsv1
 : 2,

628 
	mÃu
 : 1,

629 
	m°©ï¨
: 1,

630 
	mscway
 : 1,

631 
	mèg∑r
 : 1;

632 } 
	mt
;

633 } 
	tdl_èg_t
;

635 
	u¶_èg_u
 {

636 
__uöt64_t
 
	mv
;

638 
__uöt64_t
 
	mmru
 : 1,

639 
	mrsv3
 :27,

641 
	mèg
 :22,

642 
	mrsv2
 : 2,

643 
	m°©e
 : 2,

644 
	mrsv1
 : 1,

645 
	mvútöd
 : 2,

646 
	mecc
 : 7;

647 } 
	mt
;

648 } 
	t¶_èg_t
;

652 
	u¶_d©a_ecc_u
 {

653 
__uöt16_t
 
	mv
;

655 
__uöt16_t
 
	mrsv
 :6,

656 
	m∑rôy
 :1,

657 
	mecc
 :9;

658 } 
	mt
;

659 } 
	t¶_d©a_ecc_t
;

664 
	sr10k_û_s
 {

665 
û_èg_t
 
	mû_èg
;

666 
__uöt64_t
 
	mû_d©a
 [
IL_ENTRIES
];

667 
	mû_∑rôy
[
IL_ENTRIES
];

668 } 
	tr10k_û_t
;

670 
	sr10k_dl_s
 {

671 
dl_èg_t
 
	mdl_èg
;

672 
__uöt32_t
 
	mdl_d©a
 [
DL_ENTRIES
];

673 
	mdl_∑rôy
[
DL_ENTRIES
];

675 } 
	tr10k_dl_t
;

678 
	sr10k_¶_s
 {

679 
¶_èg_t
 
	m¶_èg
;

680 
__uöt64_t
 
	m¶_d©a
[
SL_ENTRIES
 * 2];

681 
¶_d©a_ecc_t
 
	m¶_ecc
 [
SL_ENTRIES
 ];

682 } 
	tr10k_¶_t
;

689 
	s¢_ecc‰ame_s
 {

691 
__uöt32_t
 
	m¢_eccf_îr‹ïc
;

692 
__uöt32_t
 
	m¢_eccf_èghi
;

693 
__uöt32_t
 
	m¢_eccf_èglo
;

694 
r10k_ˇchîr_t
 
	m¢_eccf_ˇche_îr
;

695 
__uöt32_t
 
	m¢_eccf_Áû_˝u
;

696 
__uöt32_t
 
	m¢_eccf_h™d_˝u
;

698 
__uöt64_t
 
	m¢_ec˘_πc
;

707 
__uöt32_t
 
	m¢_eccf_˙t
 [4];

708 
__uöt32_t
 
	m¢_eccf_˙t_ªcov_i
[4];

710 
__uöt32_t
 
	m¢_eccf_˙t_ªcov_k
[4];

714 
û_èg_t
 
	m¢_eccf_û_èg
;

715 
dl_èg_t
 
	m¢_eccf_dl_èg
;

716 
¶_èg_t
 
	m¢_eccf_¶_èg
;

719 
pid_t
 
	m¢_eccf_pid
;

720 
__uöt64_t
 
	m¢_eccf_addr
;

727 
__uöt64_t
 *
	m¢_eccf_Êags
;

729 } 
	t¢_ecc‰ame_t
;

735 
	#ECCF_ADD
(
a
,
b
Ë((◊Ë+ (b)Ë% 
ECCF_TRACE_CNT
)

	)

737 
	#ECCF_RECOVERABLE_THRESHOLD
(
_ef
, 
_eccf
, 
_˚r
) \

738 
	`eccf_ªcovîabÀ_thªshﬁd
(
_ef
, 
_eccf
, 
_˚r
)

	)

740 
	#CERR_RECOVER_TIME
 60000000

	)

741 
	#CERR_RECOVER_COUNT
 100

	)

745 
	#ECCF_STATUS_NORMAL
 0

	)

746 
	#ECCF_STATUS_ACTIVE
 1

	)

747 
	#ECCF_STATUS_PANIC
 2

	)

755 
	#R10000_KSEG0CA_SHFT
 0

	)

756 
	#R10000_KSEG0CA_MASK
 (7 << 
R10000_KSEG0CA_SHFT
)

	)

757 
	#R10000_KSEG0CA
(
_B
Ë((_BË<< 
R10000_KSEG0CA_SHFT
)

	)

759 
	#R10000_DEVNUM_SHFT
 3

	)

760 
	#R10000_DEVNUM_MASK
 (0x3 << 
R10000_DEVNUM_SHFT
)

	)

761 
	#R10000_DEVNUM
(
_B
Ë((_BË<< 
R10000_DEVNUM_SHFT
)

	)

763 
	#R10000_CRPT_SHFT
 5

	)

764 
	#R10000_CRPT_MASK
 (1<<
R10000_CRPT_SHFT
)

	)

765 
	#R10000_CPRT
(
_B
Ë((_B)<<
R10000_CRPT_SHFT
)

	)

767 
	#R10000_PER_SHFT
 6

	)

768 
	#R10000_PER_MASK
 (1 << 
R10000_PER_SHFT
)

	)

769 
	#R10000_PER
(
_B
Ë((_BË<< 
R10000_PER_SHFT
)

	)

771 
	#R10000_PRM_SHFT
 7

	)

772 
	#R10000_PRM_MASK
 (3 << 
R10000_PRM_SHFT
)

	)

773 
	#R10000_PRM
(
_B
Ë((_BË<< 
R10000_PRM_SHFT
)

	)

775 
	#R10000_SCD_SHFT
 9

	)

776 
	#R10000_SCD_MASK
 (0x‡<< 
R10000_SCD_SHFT
)

	)

777 
	#R10000_SCD
(
_B
Ë((_BË<< 
R10000_SCD_SHFT
)

	)

779 
	#R10000_SCBS_SHFT
 13

	)

780 
	#R10000_SCBS_MASK
 (1<<
R10000_SCBS_SHFT
)

	)

781 
	#R10000_SCBS
(
_B
Ë(((_B)Ë<< 
R10000_SCBS_SHFT
)

	)

783 
	#R10000_SCCE_SHFT
 14

	)

784 
	#R10000_SCCE_MASK
 (1 << 
R10000_SCCE_SHFT
)

	)

785 
	#R10000_SCCE
(
_B
Ë((_BË<< 
R10000_SCCE_SHFT
)

	)

787 
	#R10000_ME_SHFT
 15

	)

788 
	#R10000_ME_MASK
 (1 << 
R10000_ME_SHFT
)

	)

789 
	#R10000_ME
(
_B
Ë((_BË<< 
R10000_ME_SHFT
)

	)

791 
	#R10000_SCS_SHFT
 16

	)

792 
	#R10000_SCS_MASK
 (0x7 << 
R10000_SCS_SHFT
)

	)

793 
	#R10000_SCS
(
_B
Ë((_BË<< 
R10000_SCS_SHFT
)

	)

795 
	#R10000_SCCD_SHFT
 19

	)

796 
	#R10000_SCCD_MASK
 (0x7 << 
R10000_SCCD_SHFT
)

	)

797 
	#R10000_SCCD
(
_B
Ë((_BË<< 
R10000_SCCD_SHFT
)

	)

799 
	#R16000_EXT_SCCT_SHFT
 22

	)

800 
	#R16000_EXT_SCCT_MASK
 (1 << 
R16000_EXT_SCCT_SHFT
)

	)

801 
	#R16000_EXT_SCCT
(
_B
Ë((_BË<< 
R16000_EXT_SCCT_SHFT
)

	)

803 
	#R10000_DDR_SHFT
 23

	)

804 
	#R10000_DDR_MASK
 (0x1 << 
R10000_DDR_SHFT
)

	)

805 
	#R10000_DDR
(
_B
Ë((_BË<< 
R10000_DDR_SHFT
)

	)

807 
	#R10000_SCCT_SHFT
 25

	)

808 
	#R10000_SCCT_MASK
 (0x‡<< 
R10000_SCCT_SHFT
)

	)

809 
	#R16000_SCCT_MASK
 ((0x‡<< 
R10000_SCCT_SHFT
Ë| (1 << 22))

	)

810 
	#R10000_SCCT
(
_B
Ë((_BË<< 
R10000_SCCT_SHFT
)

	)

811 
	#R16000_SCCT
(
_B
Ë(((_B & 0x‡Ë<< 
R10000_SCCT_SHFT
) | \

812 ((
_B
 & 0x10Ë<< 18))

	)

814 
	#R10000_ODSC_SHFT
 29

	)

815 
	#R10000_ODSC_MASK
 (1 << 
R10000_ODSC_SHFT
)

	)

816 
	#R10000_ODSC
(
_B
Ë((_BË<< 
R10000_ODSC_SHFT
)

	)

818 
	#R10000_ODSYS_SHFT
 30

	)

819 
	#R10000_ODSYS_MASK
 (1 << 
R10000_ODSYS_SHFT
)

	)

820 
	#R10000_ODSYS
(
_B
Ë((_BË<< 
R10000_ODSYS_SHFT
)

	)

822 
	#R10000_CTM_SHFT
 31

	)

823 
	#R10000_CTM_MASK
 (1 << 
R10000_CTM_SHFT
)

	)

824 
	#R10000_CTM
(
_B
Ë((_BË<< 
R10000_CTM_SHFT
)

	)

826 #i‡
deföed
 (
_LANGUAGE_C
)

829 
	ssc_d©a
 {

830 
__uöt64_t
 
	msc_d©a
[2];

831 
ush‹t
 
	msc_cb
;

832 
ush‹t
 
	msc_ecc
;

833 
ush‹t
 
	msc_syn
;

835 
	spic_d©a
 {

836 
__uöt64_t
 
	mpic_d©a
;

837 
ush‹t
 
	mpic_cb
;

838 
ush‹t
 
	mpic_ecc
;

839 
ush‹t
 
	mpic_syn
;

842 
	spdc_d©a
 {

843 
__uöt32_t
 
	mpdc_d©a
;

844 
ush‹t
 
	mpdc_cb
;

845 
ush‹t
 
	mpdc_ecc
;

846 
ush‹t
 
	mpdc_syn
;

849 
	#SCACHE_LINE_FRAGMENTS
 8

	)

850 
	#PICACHE_LINE_FRAGMENTS
 16

	)

851 
	#PDCACHE_LINE_FRAGMENTS
 8

	)

853 
	st5_ˇche_löe
 {

854 
__uöt64_t
 
	mc_addr
;

855 
__uöt64_t
 
	mc_èg
;

857 
sc_d©a
 
	msc_bôs
[
SCACHE_LINE_FRAGMENTS
];

858 
pic_d©a
 
	mpic_bôs
[
PICACHE_LINE_FRAGMENTS
];

859 
pdc_d©a
 
	mpdc_bôs
[
PDCACHE_LINE_FRAGMENTS
];

860 } 
	mc_d©a
;

861 
	mc_°©e
;

862 
	mc_way
;

863 
	mc_ty≥
;

864 
uöt
 
	mc_idx
;

865 } 
	tt5_ˇche_löe_t
;

868 
ecc_ˇche›_gë
(
__uöt32_t
, 
__psunsig√d_t
, 
ˇche›_t
 *);

869 
ecc_bôcou¡
(
__uöt64_t
 
w‹d
);

876 
	#E9_8H
 0xFF03FFE306FF0721LL

	)

877 
	#E9_8L
 0x62D0B0D000202080LL

	)

879 
	#E9_7H
 0xFFFF030FFF0703B2LL

	)

880 
	#E9_7L
 0x100848C802909020LL

	)

882 
	#E9_6H
 0x83FFFF030503FF5CLL

	)

883 
	#E9_6L
 0x808404C438484850LL

	)

885 
	#E9_5H
 0x42808012FCFBFC3FLL

	)

886 
	#E9_5L
 0xFD6202228504C408LL

	)

888 
	#E9_4H
 0x214043FF808084FFLL

	)

889 
	#E9_4L
 0xFF210101FFC20284LL

	)

891 
	#E9_3H
 0x10232081444046BFLL

	)

892 
	#E9_3L
 0xFC3FDF3F4C010142LL

	)

894 
	#E9_2H
 0x0A12121823202100LL

	)

895 
	#E9_2L
 0xBAFFC0A0D0FFFFC1LL

	)

897 
	#E9_1H
 0x0409094413121008LL

	)

898 
	#E9_1L
 0x4DC0E0FFE0C0FFFFLL

	)

900 
	#E9_0H
 0x010404200B0D0B47LL

	)

901 
	#E9_0L
 0x04E0FF60C3FFC0FFLL

	)

908 
	#E7_6W_ST
 0x0A8F888

	)

909 
	#E7_5W_ST
 0x114FF04

	)

910 
	#E7_4W_ST
 0x2620F42

	)

911 
	#E7_3W_ST
 0x29184F0

	)

912 
	#E7_2W_ST
 0x10A40FF

	)

913 
	#E7_1W_ST
 0x245222F

	)

914 
	#E7_0W_ST
 0x1FF1111

	)

917 
	#SCDATA_ECC_BITS
 9

	)

918 
	#SCDATA_BITS
 64

	)

919 
	#SC_ECC_PARITY_MASK
 0x200

	)

921 
	#SCTAG_ECC_BITS
 7

	)

922 
	#SCTAG_BITS
 26

	)

925 
	#SCTAG_MASK
 ((1 << 
SCTAG_BITS
Ë- 1)

	)

930 
	#R10K_MFHI_WAR_DISABLE
 0x1

	)

	@/usr/include/sys/RACER/IP30.h

12 #i‚de‡
__RACER_IP30_H__


13 
	#__RACER_IP30_H__


	)

28 
	#_ARCSPROM


	)

30 #i‡
LANGUAGE_C


31 
	~<sys/ty≥s.h
>

34 #i‡
_KERNEL
 || 
_STANDALONE


35 
	~<sys/RACER/hóπ.h
>

36 
	~<sys/PCI/bridge.h
>

37 
	~<sys/PCI/ioc3.h
>

38 
	~<sys/xèlk/xbow.h
>

45 
	#XBOW_ID
 
XBOW_WIDGET_ID


	)

46 
	#HEART_ID
 
XBOW_PORT_8


	)

47 
	#BRIDGE_ID
 
XBOW_PORT_F


	)

49 
	#XBOW_BASE
 
	`MAIN_WIDGET
(
XBOW_ID
)

	)

50 
	#XBOW_K1PTR
 ((
xbow_t
 *)
	`K1_MAIN_WIDGET
(
XBOW_ID
))

	)

52 
	#HEART_BASE
 
	`MAIN_WIDGET
(
HEART_ID
)

	)

53 
	#HEART_CFG_K1PTR
 ((
hóπ_cfg_t
 *)
	`K1_MAIN_WIDGET
(
HEART_ID
))

	)

57 
	#BRIDGE_BASE
 
	`MAIN_WIDGET
(
BRIDGE_ID
)

	)

58 
	#BRIDGE_K1PTR
 ((
bridge_t
 *)
	`K1_MAIN_WIDGET
(
BRIDGE_ID
))

	)

63 
	#BRIDGE_SCSI0_ID
 0

	)

64 
	#BRIDGE_SCSI1_ID
 1

	)

65 
	#BRIDGE_IOC3_ETH_ID
 2

	)

66 
	#BRIDGE_RAD_ID
 3

	)

67 
	#BRIDGE_IOC3_SPKM_ID
 4

	)

68 
	#BRIDGE_PASSWD
 5

	)

69 
	#BRIDGE_POWER
 6

	)

70 
	#BRIDGE_ACFAIL
 7

	)

72 
	#BRIDGE_IOC3_ID
 
BRIDGE_IOC3_ETH_ID


	)

74 
	#SCSI0_PCI_CFG_BASE
 (
BRIDGE_BASE
+
	`BRIDGE_TYPE0_CFG_DEV
(
BRIDGE_SCSI0_ID
))

	)

75 
	#SCSI1_PCI_CFG_BASE
 (
BRIDGE_BASE
+
	`BRIDGE_TYPE0_CFG_DEV
(
BRIDGE_SCSI1_ID
))

	)

76 
	#IOC3_PCI_CFG_BASE
 (
BRIDGE_BASE
+
	`BRIDGE_TYPE0_CFG_DEV
(
BRIDGE_IOC3_ID
))

	)

77 
	#RAD_PCI_CFG_BASE
 (
BRIDGE_BASE
+
	`BRIDGE_TYPE0_CFG_DEV
(
BRIDGE_RAD_ID
))

	)

79 
	#SCSI0_PCI_DEVIO_BASE
 (
BRIDGE_BASE
+
	`BRIDGE_DEVIO
(
BRIDGE_SCSI0_ID
))

	)

80 
	#SCSI1_PCI_DEVIO_BASE
 (
BRIDGE_BASE
+
	`BRIDGE_DEVIO
(
BRIDGE_SCSI1_ID
))

	)

81 
	#RAD_PCI_DEVIO_BASE
 (
BRIDGE_BASE
+
	`BRIDGE_DEVIO
(
BRIDGE_RAD_ID
))

	)

85 
	#IOC3_PCI_DEVIO_BASE
 (
BRIDGE_BASE
+
BRIDGE_DEVIO2
)

	)

87 
	#IOC3_PCI_CFG_K1PTR
 
	`PHYS_TO_K1
(
IOC3_PCI_CFG_BASE
)

	)

88 
	#IOC3_PCI_DEVIO_K1PTR
 
	`PHYS_TO_K1
(
IOC3_PCI_DEVIO_BASE
)

	)

98 
	#FLASH_MEM_BASE
 (
BRIDGE_BASE
+
BRIDGE_EXTERNAL_FLASH
)

	)

99 
	#FLASH_MEM_ALT_BASE
 (
FLASH_MEM_BASE
 + 0x00200000)

	)

105 
	#IP30_HVEC_WIDERR_XBOW
 58

	)

106 
	#IP30_HVEC_WIDERR_BASEIO
 57

	)

107 
	#IP30_HVEC_POWER
 41

	)

108 
	#IP30_HVEC_ACFAIL
 
IP30_HVEC_WIDERR_BASEIO


	)

109 
	#IP30_HVEC_IOC3_ETHERNET
 17

	)

110 
	#IP30_HVEC_IOC3_SERIAL
 16

	)

112 
	#IP30_BVEC_IOC3_ETHERNET
 
BRIDGE_IOC3_ETH_ID


	)

113 
	#IP30_BVEC_IOC3_SERIAL
 
BRIDGE_IOC3_SPKM_ID


	)

114 
	#IP30_BVEC_POWER
 
BRIDGE_POWER


	)

115 
	#IP30_BVEC_ACFAIL
 
BRIDGE_ACFAIL


	)

121 
	#PCI_MAPPED_MEM_BASE
(
x
Ë((xË* 0x200000)

	)

124 
	#IOC3_UART_A
 (
IOC3_PCI_DEVIO_BASE
+
IOC3_SIO_UA_BASE
)

	)

125 
	#IOC3_UART_B
 (
IOC3_PCI_DEVIO_BASE
+
IOC3_SIO_UB_BASE
)

	)

131 #i‡
LANGUAGE_C


132 
	#IP30_VOLTAGE_CTRL
 (vﬁ©ûê
uch¨_t
 *) \

133 (
IOC3_PCI_DEVIO_K1PTR
 + 
IOC3_BYTEBUS_DEV0
)

	)

135 
	#IP30_VOLTAGE_CTRL
 (
IOC3_PCI_DEVIO_K1PTR
 + 
IOC3_BYTEBUS_DEV0
)

	)

137 
	#CPU_MARGIN_LO
 (0x1 << 0)

	)

138 
	#CPU_MARGIN_HI
 (0x1 << 1)

	)

139 
	#VTERM_MARGIN_LO
 (0x1 << 2)

	)

140 
	#VTERM_MARGIN_HI
 (0x1 << 3)

	)

141 
	#PWR_SUPPLY_MARGIN_LO_NORMAL
 (0x1 << 4)

	)

142 
	#PWR_SUPPLY_MARGIN_HI_NORMAL
 (0x1 << 5)

	)

143 
	#FAN_SPEED_HI
 (0x1 << 6)

	)

144 
	#FAN_SPEED_LO
 (0x1 << 7)

	)

148 
	#FAN_SPEED_HI_LOADS
 3

	)

155 #i‡
LANGUAGE_C


156 
	#RTC_ADDR_PORT
 (vﬁ©ûê
uch¨_t
 *) \

157 (
IOC3_PCI_DEVIO_K1PTR
 + 
IOC3_BYTEBUS_DEV1
)

	)

158 
	#RTC_DATA_PORT
 (vﬁ©ûê
uch¨_t
 *) \

159 (
IOC3_PCI_DEVIO_K1PTR
 + 
IOC3_BYTEBUS_DEV2
)

	)

161 
	#RTC_ADDR_PORT
 (
IOC3_PCI_DEVIO_K1PTR
 + 
IOC3_BYTEBUS_DEV1
)

	)

162 
	#RTC_DATA_PORT
 (
IOC3_PCI_DEVIO_K1PTR
 + 
IOC3_BYTEBUS_DEV2
)

	)

166 
	#PROM_PASSWD_DISABLE
 (0x1 << 
BRIDGE_PASSWD
)

	)

167 
	#PWR_SWITCH_INTR
 (0x1 << 
BRIDGE_POWER
)

	)

168 
	#PWR_SUPPLY_AC_FAIL_INTR
 (0x1 << 
BRIDGE_ACFAIL
)

	)

171 
	#XBOW_VEC
 58

	)

174 
	#LED_OFF
 0

	)

175 
	#LED_GREEN
 1

	)

176 
	#LED_AMBER
 2

	)

178 
	#ARCS_RESET
 0

	)

179 
	#ARCS_HALT
 1

	)

180 
	#ARCS_POWERDOWN
 2

	)

181 
	#ARCS_RESTART
 3

	)

182 
	#ARCS_REBOOT
 4

	)

183 
	#ARCS_IMODE
 5

	)

185 #i‡
MP
 || 
_STANDALONE


186 
	#MAXCPU
 2

	)

188 
	#MAXCPU
 1

	)

191 
	#OSPL_SPDBG
 0x00080000

	)

197 
	#TLBLO_HWBITSHIFT
 0

	)

199 
	#SYMMON_STACK_SIZE
 0x2000

	)

200 
	#SYMMON_STACK_ADDR
(
x
Ë(
	`PHYS_TO_K0_RAM
(0x6000)+(x)*
SYMMON_STACK_SIZE
)

	)

201 
	#SYMMON_STACK
 
	`SYMMON_STACK_ADDR
(0)

	)

203 
	#PROM_STACK
 
	`PHYS_TO_K1_RAM
(0x1000000)

	)

204 
	#PROM_BSS
 
	`PHYS_TO_K1_RAM
(0x0f00000)

	)

206 
	#PROM_CHILD_STACK
 (
PROM_BSS
-8)

	)

212 
	#CACHE_ERR_FRAMEPTR
 (0x1000 - 
MAXCPU
 * 0x8)

	)

214 
	#SN10
 0

	)

215 
	#SN10_NODE
(
«sid
Ë0

	)

216 
	#SN11
 0

	)

217 
	#SN11_NODE
(
«sid
Ë0

	)

218 
	#SN12
 0

	)

219 
	#SN12_NODE
(
«sid
Ë0

	)

220 
	#SN12_WS
 0

	)

221 
	#SN12_2U
 0

	)

222 
	#SN12_GB
 0

	)

223 
	#SN12_RWS
 0

	)

224 
	#SN12_WS_NODE
(
«sid
Ë0

	)

225 
	#SN12_2U_NODE
(
«sid
Ë0

	)

226 
	#SN12_GB_NODE
(
«sid
Ë0

	)

227 
	#SN12_RWS_NODE
(
«sid
Ë0

	)

229 #i‡
deföed
(
_STANDALONE
)

230 
	#SR_PROMBASE
 
SR_CU0
|
SR_CU1
|
SR_KX
|
SR_FR


	)

231 
	#SR_POWER
 
SR_IBIT5


	)

233 #i‡
LANGUAGE_C


234 *
ù30_s§am
(*, 
__uöt64_t
, __uint64_t, );

235 *
ù30_èg_s§am
();

236 
__uöt64_t
 
ù30_s§am_swizzÀ
(__uint64_t);

237 
ù30_powî_swôch_⁄
();

238 
ù30_£tup_powî
();

239 
ù30_dißbÀ_powî
();

240 
ù30_checköås
(
__psunsig√d_t
, __psunsigned_t);

241 
powî•ö
();

243 
hóπ_w¨m_Œp_ª£t
(vﬁ©ûê
hóπªg_t
*, heartreg_t, heartreg_t, volatile heartreg_t*);

244 
w¨m_ª£t_ù30_xio
();

245 
öô_ù30_chùs
();

246 
öô_xbow_widgë
(
xbow_t
 *,,
widgë_cfg_t
 *);

247 
öô_xbow
(
xbow_t
 *);

248 
xèlk_¥obe
(
xbow_t
 *,);

250 
œunch_¶ave
(, (*)(*), *, (*)(*), *,

253 
	`p⁄_öôio
();

254 
	`p⁄_puthex64
(
__uöt64_t
);

255 
	`p⁄_puthex
(
__uöt32_t
);

256 
	`p⁄_puts
(*);

257 
	`p⁄_putc
();

259 
	`ù30_addr_to_b™k
(
__uöt64_t
);

261 
ioc3ªg_t
 
	`¥öt_ioc3_°©us
(
__psunsig√d_t
,);

262 
	`¥öt_bridge_°©us
(
bridge_t
 *,);

263 
hóπªg_t
 
	`¥öt_hóπ_°©us
();

264 
	`dump_hóπ_ªgs
();

265 
	`dump_bridge_ªgs
(
bridge_t
 *);

267 
	`ù30_£t_˝uÀd
();

268 
	`˝u_¥obe_Æl
();

269 
	`˝u_¥obe
();

271 
__psunsig√d_t
 
	`kv_to_bridge32_dúm≠
(*
pbridge
, __psunsig√d_à
kvaddr
);

272 
__psunsig√d_t
 
	`bridge32_dúm≠_to_phys
(*
pbridge
, 
__uöt32_t
 
daddr
);

276 #ifde‡
LANGUAGE_C


277 
	`ba£io_qlßve
(
vîãx_hdl_t
);

278 
	`˝u_so·_powîdown
();

279 
	`£t_aut›owî⁄
();

280 
	`pckbd_bñl
(, , );

282 #ifde‡
_KERNEL


283 
˝uid_t
 
	`öå_•øy_heuri°ic
(
devi˚_desc_t
);

284 
	`hóπ_£t_˝u_öå
(
i§_bô
);

285 
	`block_is_ö_maö_mem‹y
(
i›addr_t
, 
size_t
);

286 
	`ù30_öå_maöt
();

288 
	`pckbd_bñl
(, , );

289 
is_o˘™e_lx
;

292 #ifde‡
HEART_COHERENCY_WAR


293 
	`hóπ_dˇche_wb_övÆ
(*,);

294 
	`hóπ_dˇche_övÆ
(*,);

295 
	`hóπ_wrôe_dˇche_wb_övÆ
(*,);

296 
	`hóπ_wrôe_dˇche_övÆ
(*,);

297 
	`hóπ_√ed_Êush
(
ªad
);

299 #ifde‡
HEART_INVALIDATE_WAR


300 
	`hóπ_övÆid©e_w¨
(*,);

301 
	`hóπ_√ed_övÆid©e
();

302 
buf
;

303 
	`bp_hóπ_övÆid©e_w¨
(
buf
 *
bp
);

	@/usr/include/sys/SN/SN0/IP27.h

13 #i‚de‡
__SYS_SN_SN0_IP27_H__


14 
	#__SYS_SN_SN0_IP27_H__


	)

20 
	#TLBLO_HWBITSHIFT
 0

	)

22 #i‡!
_LANGUAGE_ASSEMBLY


24 
	#CAUSE_BERRINTR
 
CAUSE_IP7


	)

26 
	#ECCF_CACHE_ERR
 0

	)

27 
	#ECCF_TAGLO
 1

	)

28 
	#ECCF_ECC
 2

	)

29 
	#ECCF_ERROREPC
 3

	)

30 
	#ECCF_PADDR
 4

	)

31 
	#ECCF_SIZE
 (5 * ())

	)

35 #i‡
_LANGUAGE_ASSEMBLY


42 
	#KL_GET_CPUNUM
(
¥oc
) \

43 
dli
 
¥oc
, 
	`LOCAL_HUB
(0); \

44 
ld
 
¥oc
, 
	`PI_CPU_NUM
’roc)

	)

54 #ifde‡
_STANDALONE


55 
	#NORMAL_SR
 (
SR_KX
|
SR_FR
|
SR_BEV
|
SR_CU1
)

	)

61 
	#SRB_SWTIMO
 
CAUSE_SW1


	)

62 
	#SRB_NET
 
CAUSE_SW2


	)

63 
	#SRB_DEV0
 
CAUSE_IP3


	)

64 
	#SRB_DEV1
 
CAUSE_IP4


	)

65 
	#SRB_TIMOCLK
 
CAUSE_IP5


	)

66 
	#SRB_PROFCLK
 
CAUSE_IP6


	)

67 
	#SRB_ERR
 
CAUSE_IP7


	)

68 
	#SRB_SCHEDCLK
 
CAUSE_IP8


	)

70 
	#SPLHI_DISABLED_INTS
 
SRB_SWTIMO
|
SRB_NET
|
SRB_TIMOCLK
|
SRB_SCHEDCLK
|
SRB_DEV0


	)

71 
	#SPLPROF_DISABLED_INTS
 
SRB_SWTIMO
|
SRB_NET
|
SRB_TIMOCLK
|
SRB_SCHEDCLK
|
SRB_DEV0
|
SRB_PROFCLK


	)

72 
	#SPL7_DISABLED_INTS
 
SRB_SWTIMO
|
SRB_NET
|
SRB_TIMOCLK
|
SRB_SCHEDCLK
|
SRB_DEV0
|
SRB_PROFCLK
|
SRB_DEV1
|
SRB_ERR


	)

74 
	#SR_HI_MASK
 (
SRB_DEV1
 | 
SRB_PROFCLK
 | 
SRB_ERR
)

	)

75 
	#SR_PROF_MASK
 (
SRB_DEV1
 | 
SRB_ERR
)

	)

76 
	#SR_ALL_MASK
 (0)

	)

78 
	#SR_IBIT_HI
 
SRB_DEV0


	)

79 
	#SR_IBIT_PROF
 
SRB_PROFCLK


	)

81 
	#SRB_SWTIMO_IDX
 0

	)

82 
	#SRB_NET_IDX
 1

	)

83 
	#SRB_DEV0_IDX
 2

	)

84 
	#SRB_DEV1_IDX
 3

	)

85 
	#SRB_TIMOCLK_IDX
 4

	)

86 
	#SRB_PROFCLK_IDX
 5

	)

87 
	#SRB_ERR_IDX
 6

	)

88 
	#SRB_SCHEDCLK_IDX
 7

	)

90 
	#NUM_CAUSE_INTRS
 8

	)

92 
	#SCACHE_LINESIZE
 128

	)

93 
	#SCACHE_LINEMASK
 (
SCACHE_LINESIZE
 - 1)

	)

95 
	~<sys/SN/addrs.h
>

97 
	#LED_CYCLE_MASK
 0x0f

	)

98 
	#LED_CYCLE_SHFT
 4

	)

100 
	#SEND_NMI
(
_«sid
, 
_¶i˚
) \

101 
	`REMOTE_HUB_S
((
_«sid
), (
PI_NMI_A
 + ((
_¶i˚
Ë* 
PI_NMI_OFFSET
)), 1)

	)

103 
	#SN10
 0

	)

104 
	#SN10_NODE
(
«sid
Ë0

	)

105 
	#SN11
 0

	)

106 
	#SN11_NODE
(
«sid
Ë0

	)

107 
	#SN12
 0

	)

108 
	#SN12_NODE
(
«sid
Ë0

	)

109 
	#SN12_WS
 0

	)

110 
	#SN12_2U
 0

	)

111 
	#SN12_GB
 0

	)

112 
	#SN12_RWS
 0

	)

113 
	#SN12_WS_NODE
(
«sid
Ë0

	)

114 
	#SN12_2U_NODE
(
«sid
Ë0

	)

115 
	#SN12_GB_NODE
(
«sid
Ë0

	)

116 
	#SN12_RWS_NODE
(
«sid
Ë0

	)

	@/usr/include/sys/SN/SN0/hub.h

13 #i‚de‡
__SYS_SN_SN0_HUB_H__


14 
	#__SYS_SN_SN0_HUB_H__


	)

17 
	#HUB_PASSWORD
 0x53474972756c6573uŒ

	)

19 
	#CHIPID_HUB
 0

	)

20 
	#CHIPID_ROUTER
 1

	)

22 
	#HUB_REV_1_0
 1

	)

23 
	#HUB_REV_2_0
 2

	)

24 
	#HUB_REV_2_1
 3

	)

25 
	#HUB_REV_2_2
 4

	)

26 
	#HUB_REV_2_3
 5

	)

27 
	#HUB_REV_2_4
 6

	)

29 
	#MAX_HUB_PATH
 80

	)

31 #i‡
deföed
(
IP27
)

33 
	~<sys/SN/SN0/addrs.h
>

34 
	~<sys/SN/SN0/hubpi.h
>

35 
	~<sys/SN/SN0/hubmd.h
>

36 
	~<sys/SN/SN0/hubio.h
>

37 
	~<sys/SN/SN0/hubni.h
>

38 
	~<sys/SN/SN0/hubc‹e.h
>

40 #ifde‡
SABLE


41 
	#IP27_NO_HUBUART_INT
 1

	)

46 << 
	gBOMB
! 
SN0
 
is
 
⁄ly
 
deföed
 
	gIP27
 >>

51 
	#UATTR_HSPEC
 0

	)

52 
	#UATTR_IO
 1

	)

53 
	#UATTR_MSPEC
 2

	)

54 
	#UATTR_UNCAC
 3

	)

56 #i‡
_LANGUAGE_ASSEMBLY


61 
	#GET_NASID_ASM
(
r
) \

62 
dli
 
r
, 
	`LOCAL_HUB_ADDR
(
NI_STATUS_REV_ID
); \

63 
ld
 
r
, (r); \

64 
™d
 
r
, 
NSRI_NODEID_MASK
; \

65 
d§l
 
r
, 
NSRI_NODEID_SHFT


	)

69 #i‡
_LANGUAGE_C


71 
	~<sys/xèlk/xwidgë.h
>

72 
	~<sys/£ma.h
>

75 
v_hub_s
 *
	tv_hub_t
;

77 
	gnodïda_s
;

78 
hub_check_pci_equiv
(*
addø
, *
addrb
);

79 
ˇ±uª_hub_°©s
(
˙odeid_t
, 
nodïda_s
 *);

80 
öô_hub_°©s
(
˙odeid_t
, 
nodïda_s
 *);

	@/usr/include/sys/SN/SN1/IP35.h

13 #i‚de‡
__SYS_SN_SN1_IP35_H__


14 
	#__SYS_SN_SN1_IP35_H__


	)

16 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_STANDALONE
)

21 
	#TLBLO_HWBITSHIFT
 0

	)

23 #i‡!
_LANGUAGE_ASSEMBLY


25 
	#CAUSE_BERRINTR
 
CAUSE_IP7


	)

27 
	#ECCF_CACHE_ERR
 0

	)

28 
	#ECCF_TAGLO
 1

	)

29 
	#ECCF_ECC
 2

	)

30 
	#ECCF_ERROREPC
 3

	)

31 
	#ECCF_PADDR
 4

	)

32 
	#ECCF_SIZE
 (5 * ())

	)

43 #ifde‡
_STANDALONE


44 
	#NORMAL_SR
 (
SR_KX
|
SR_FR
|
SR_BEV
|
SR_CU1
)

	)

50 
	#SRB_SWTIMO
 
CAUSE_SW1


	)

51 
	#SRB_NET
 
CAUSE_SW2


	)

52 
	#SRB_DEV0
 
CAUSE_IP3


	)

53 
	#SRB_DEV1
 
CAUSE_IP4


	)

54 
	#SRB_TIMOCLK
 
CAUSE_IP5


	)

55 
	#SRB_PROFCLK
 
CAUSE_IP6


	)

56 
	#SRB_ERR
 
CAUSE_IP7


	)

57 
	#SRB_SCHEDCLK
 
CAUSE_IP8


	)

59 
	#SPLHI_DISABLED_INTS
 
SRB_SWTIMO
|
SRB_NET
|
SRB_TIMOCLK
|
SRB_SCHEDCLK
|
SRB_DEV0


	)

60 
	#SPLPROF_DISABLED_INTS
 
SRB_SWTIMO
|
SRB_NET
|
SRB_TIMOCLK
|
SRB_SCHEDCLK
|
SRB_DEV0
|
SRB_PROFCLK


	)

61 
	#SPL7_DISABLED_INTS
 
SRB_SWTIMO
|
SRB_NET
|
SRB_TIMOCLK
|
SRB_SCHEDCLK
|
SRB_DEV0
|
SRB_PROFCLK
|
SRB_DEV1
|
SRB_ERR


	)

63 
	#SR_HI_MASK
 (
SRB_DEV1
 | 
SRB_PROFCLK
 | 
SRB_ERR
)

	)

64 
	#SR_PROF_MASK
 (
SRB_DEV1
 | 
SRB_ERR
)

	)

65 
	#SR_ALL_MASK
 (0)

	)

66 
	#SR_IBIT_HI
 
SRB_DEV0


	)

67 
	#SR_IBIT_PROF
 
SRB_PROFCLK


	)

69 
	#SRB_SWTIMO_IDX
 0

	)

70 
	#SRB_NET_IDX
 1

	)

71 
	#SRB_DEV0_IDX
 2

	)

72 
	#SRB_DEV1_IDX
 3

	)

73 
	#SRB_TIMOCLK_IDX
 4

	)

74 
	#SRB_PROFCLK_IDX
 5

	)

75 
	#SRB_ERR_IDX
 6

	)

76 
	#SRB_SCHEDCLK_IDX
 7

	)

78 
	#NUM_CAUSE_INTRS
 8

	)

80 
	#SCACHE_LINESIZE
 128

	)

81 
	#SCACHE_LINEMASK
 (
SCACHE_LINESIZE
 - 1)

	)

83 
	~<sys/SN/addrs.h
>

85 
	#LED_CYCLE_MASK
 0x0f

	)

86 
	#LED_CYCLE_SHFT
 4

	)

88 
	#SEND_NMI
(
_«sid
, 
_¶i˚
) \

89 
	`REMOTE_HUB_PI_S
((
_«sid
), 
	`SUBNODE
(
_¶i˚
), (
PI_NMI_A
 + 
PI_NMI_OFFSET
 * 
	`LOCALCPU
(_¶i˚)), 1)

	)

103 
	#PIMM_NOT_PRESENT
 0xf

	)

104 
	#PIMM_2__400__R12__1_08__4__270
 0x0

	)

105 
	#PIMM_2__500__R14__1_08__8__250
 0x1

	)

106 
	#PIMM_2__300__R12__2_60__4__200
 0xê

	)

108 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_STANDALONE
)

118 
	#SN10
 \

119 ((
	`LOCAL_HSPEC_L
(
HSPEC_SYNERGY0_0
Ë& 
HS_NON_CBRICK_MASK
) \

120 =
HS_SN10_BITS
)

	)

121 
	#SN10_NODE
(
«sid
) \

122 ((
	`REMOTE_HSPEC_L
(
«sid
, 
HSPEC_SYNERGY0_0
Ë& 
HS_NON_CBRICK_MASK
) \

123 =
HS_SN10_BITS
)

	)

132 
	#SN11
 \

133 ((
	`LOCAL_HSPEC_L
(
HSPEC_SYNERGY0_0
Ë& 
HS_NON_CBRICK_MASK
) \

134 =
HS_SN11_BITS
)

	)

135 
	#SN11_NODE
(
«sid
) \

136 ((
	`REMOTE_HSPEC_L
(
«sid
, 
HSPEC_SYNERGY0_0
Ë& 
HS_NON_CBRICK_MASK
) \

137 =
HS_SN11_BITS
)

	)

144 
	#IP53
 \

145 ((
	`LOCAL_HSPEC_L
(
HSPEC_SYNERGY0_0
Ë& 
HS_NON_CBRICK_MASK
) \

146 =
HS_IP53_BITS
)

	)

147 
	#IP53_NODE
(
«sid
) \

148 ((
	`REMOTE_HSPEC_L
(
«sid
, 
HSPEC_SYNERGY0_0
Ë& 
HS_NON_CBRICK_MASK
) \

149 =
HS_IP53_BITS
)

	)

160 
	#PEBRICK_NODE
(
«sid
) \

161 ((
	`REMOTE_HSPEC_L
(
«sid
, 
HSPEC_SYNERGY0_0
Ë& 
HS_NON_CBRICK_MASK
) \

162 =
HS_PEBRICK_BITS
)

	)

172 
	#PIMM_PSC
(
«sid
, 
subnode
) \

173 (
	`IP53_NODE
(
«sid
) ? \

174 ((
	`REMOTE_HSPEC_L
(
«sid
, 
HSPEC_SYNERGY0_0
Ë& 
HS_IP53_PSC_MASK
) >> \

175 
HS_IP53_PSC_SHFT
) + 48 : \

176 (
	`SN11_NODE
(
«sid
) ? \

177 ((
	`REMOTE_HSPEC_L
(
«sid
, 
HSPEC_SYNERGY0_0
Ë& 
HS_SN11_PSC_MASK
) >> \

178 
HS_SN11_PSC_SHFT
) + 32 : \

179 (
	`SN10_NODE
(
«sid
) ? \

180 ((
	`REMOTE_HSPEC_L
(
«sid
, 
HSPEC_SYNERGY0_0
Ë& 
HS_SN10_PSC_MASK
) >> \

181 
HS_SN10_PSC_SHFT
) + 16 : \

182 ((
	`REMOTE_HSPEC_L
(
«sid
, 
HSPEC_SYNERGY0_0
Ë& 
	`HS_PIMM_PSC_MASK
(
subnode
)) >> \

183 
	`HS_PIMM_PSC_SHFT
(
subnode
)))))

	)

185 
	#PIMM_PRESENT
(
«sid
, 
subnode
) \

186 (
	`PIMM_PSC
(
«sid
, 
subnode
Ë!
PIMM_NOT_PRESENT
)

	)

190 #i‡!
_LANGUAGE_ASSEMBLY


226 
	#SN12_TYPE_UNKNOWN
 -1

	)

227 
	#SN12_2U_TYPE
 1

	)

228 
	#SN12_GB_TYPE
 2

	)

229 
	#SN12_WS_TYPE
 3

	)

230 
	#SN12_CGN_TYPE
 4

	)

231 
	#SN12_RWS_TYPE
 5

	)

233 
	#SN12
 (
	`gë_chimîa_ty≥
(
	`gë_«sid
()Ë!0)

	)

234 
	#SN12_2U
 (
	`gë_chimîa_ty≥
(
	`gë_«sid
()Ë=
SN12_2U_TYPE
)

	)

235 
	#SN12_GB
 (
	`gë_chimîa_ty≥
(
	`gë_«sid
()Ë=
SN12_GB_TYPE
)

	)

236 
	#SN12_WS
 (
	`gë_chimîa_ty≥
(
	`gë_«sid
()Ë=
SN12_WS_TYPE
)

	)

237 
	#SN12_CGN
 (
	`gë_chimîa_ty≥
(
	`gë_«sid
()Ë=
SN12_CGN_TYPE
)

	)

238 
	#SN12_RWS
 (
	`gë_chimîa_ty≥
(
	`gë_«sid
()Ë=
SN12_RWS_TYPE
)

	)

239 
	#SN12_NODE
(
«sid
Ë((
	`gë_chimîa_ty≥
“asid)Ë!0)

	)

240 
	#SN12_2U_NODE
(
«sid
Ë((
	`gë_chimîa_ty≥
“asid)Ë=
SN12_2U_TYPE
)

	)

241 
	#SN12_GB_NODE
(
«sid
Ë((
	`gë_chimîa_ty≥
“asid)Ë=
SN12_GB_TYPE
)

	)

242 
	#SN12_WS_NODE
(
«sid
Ë((
	`gë_chimîa_ty≥
“asid)Ë=
SN12_WS_TYPE
)

	)

243 
	#SN12_CGN_NODE
(
«sid
Ë((
	`gë_chimîa_ty≥
“asid)Ë=
SN12_CGN_TYPE
)

	)

244 
	#SN12_RWS_NODE
(
«sid
Ë((
	`gë_chimîa_ty≥
“asid)Ë=
SN12_RWS_TYPE
)

	)

246 #i‡
deföed
(
_STANDALONE
)

247 
gë_chimîa_ty≥
(
«sid_t
 
«sid
);

249 
gë_chimîa_ty≥
(
«sid_t
 
«sid
);

250 
£t_¢12_ty≥
(
«sid_t
 
«sid
);

	@/usr/include/sys/SN/SN1/bedrock.h

13 #i‚de‡
__SYS_SN_SN1_BEDROCK_H__


14 
	#__SYS_SN_SN1_BEDROCK_H__


	)

17 
	#HUB_PASSWORD
 0x53474972756c6573uŒ

	)

19 
	#CHIPID_HUB
 0x3012

	)

20 
	#CHIPID_ROUTER
 0x3017

	)

22 
	#BEDROCK_REV_1_0
 1

	)

23 
	#BEDROCK_REV_1_1
 2

	)

25 
	#MAX_HUB_PATH
 80

	)

27 #i‡
deföed
(
IP35
)

28 
	~<sys/SN/¨ch.h
>

29 
	~<sys/SN/SN1/addrs.h
>

30 
	~<sys/SN/SN1/hubpi.h
>

31 
	~<sys/SN/SN1/hubmd.h
>

32 
	~<sys/SN/SN1/hubio.h
>

33 
	~<sys/SN/SN1/hubni.h
>

34 
	~<sys/SN/SN1/hublb.h
>

35 
	~<sys/SN/SN1/hubxb.h
>

36 
	~<sys/SN/SN1/hubpi_√xt.h
>

37 
	~<sys/SN/SN1/hubmd_√xt.h
>

38 
	~<sys/SN/SN1/hubio_√xt.h
>

39 
	~<sys/SN/SN1/hubni_√xt.h
>

40 
	~<sys/SN/SN1/hublb_√xt.h
>

41 
	~<sys/SN/SN1/hubxb_√xt.h
>

42 
	~<sys/SN/SN1/bdrkh•e¸egs.h
>

43 
	~<sys/SN/SN1/bdrkh•e¸egs_√xt.h
>

45 #i‡
deföed
(
SABLE
Ë|| deföed(
DIRECT_L1_CONSOLE
)

46 
	#IP27_NO_HUBUART_INT
 1

	)

51 << 
	gBOMB
! 
SN1
 
is
 
⁄ly
 
deföed
 
	gIP35
 >>

56 
	#UATTR_HSPEC
 0

	)

57 
	#UATTR_IO
 1

	)

58 
	#UATTR_MSPEC
 2

	)

59 
	#UATTR_UNCAC
 3

	)

61 #i‡
_LANGUAGE_ASSEMBLY


66 
	#GET_NASID_ASM
(
r
) \

67 
dli
 
r
, 
	`LOCAL_HUB_ADDR
(
LB_REV_ID
); \

68 
ld
 
r
, (r); \

69 
™d
 
r
, 
LRI_NODEID_MASK
; \

70 
d§l
 
r
, 
LRI_NODEID_SHFT


	)

74 #i‡
_LANGUAGE_C


76 
	~<sys/xèlk/xwidgë.h
>

77 
	~<sys/£ma.h
>

80 
v_hub_s
 *
	tv_hub_t
;

81 
__uöt64_t
 
	tπc_time_t
;

83 
	gnodïda_s
;

84 
hub_check_pci_equiv
(*
addø
, *
addrb
);

85 
ˇ±uª_hub_°©s
(
˙odeid_t
, 
nodïda_s
 *);

86 
öô_hub_°©s
(
˙odeid_t
, 
nodïda_s
 *);

96 
	#LB_KERNEL_FLAGS
 
MD_BIST_DATA


	)

98 
	#LB_KFLAGS_PANIC_SHFT
 0

	)

99 
	#LB_KFLAGS_PANIC
 1<<
LB_KFLAGS_PANIC_SHFT


	)

	@/usr/include/sys/SN/router.h

13 #i‚def 
__SYS_SN_ROUTER_H__


14 
	#__SYS_SN_ROUTER_H__


	)

19 #ifde‡
SN1


20 
	~<sys/SN/SN1/rouãr.h
>

22 
	~<sys/SN/SN0/rouãr.h
>

	@/usr/include/sys/alenlist.h

1 #i‚de‡
__SYS_ALENLIST_H


2 
	#__SYS_ALENLIST_H


	)

29 #ifde‡
__˝lu•lus


38 
__öt64_t
 
	tÆíaddr_t
;

40 
Æíli°_s
 *
	tÆíli°_t
;

45 
Æíli°_curs‹_s
 *
	tÆíli°_curs‹_t
;

49 
	#ALENLIST_FAILURE
 -1

	)

50 
	#ALENLIST_SUCCESS
 0

	)

54 
	#AL_NOSLEEP
 0x01

	)

55 
	#AL_NOCOMPACT
 0x02

	)

56 
	#AL_LEAVE_CURSOR
 0x04

	)

57 
	#AL_UNALIGNED_OK
 0x08

	)

61 
Æíli°_t
 
Æíli°_¸óã
(
Êags
);

64 
Æíli°_grow
(
Æíli°_t
, 
size_t
 
≈aús
);

67 
Æíli°_˛ór
(
Æíli°_t
 
Æíli°
);

75 
Æíli°_t


76 
Æí∑ú_öô
–
Æíaddr_t
 
addªss
,

77 
size_t
 
Àngth
);

84 
Æí∑ú_gë
–
Æíli°_t
 
Æíli°
,

85 
Æíaddr_t
 *
addªss
,

86 
size_t
 *
Àngth
);

89 
Æíli°_de°roy
(
Æíli°_t
 
Æíli°
);

96 
Æíli°_d⁄e
(
Æíli°_t
 
Æíli°
);

99 
Æíli°_≠≥nd
(
Æíli°_t
 
Æíli°
,

100 
Æíaddr_t
 
addªss
,

101 
size_t
 
Àngth
,

102 
Êags
);

109 
Æíli°_ª∂a˚
–
Æíli°_t
 
Æíli°
,

110 
Æíli°_curs‹_t
 
curs‹p
,

111 
Æíaddr_t
 *
addΩ
,

112 
size_t
 *
Àngthp
,

113 
Êags
);

117 
Æíli°_gë
(
Æíli°_t
 
Æíli°
,

118 
Æíli°_curs‹_t
 
curs‹p
,

119 
size_t
 
maxÀngth
,

120 
Æíaddr_t
 *
addr
,

121 
size_t
 *
Àngth
,

122 
Êags
);

126 
Æíli°_size
(
Æíli°_t
 
Æíli°
);

129 
Æíli°_c⁄ˇt
–
Æíli°_t
 
‰om
,

130 
Æíli°_t
 
to
);

133 
Æíli°_t
 
Æíli°_˛⁄e
◊À∆i°_à
ﬁd
,

134 
Êags
);

138 
Æíli°_curs‹_t
 
Æíli°_curs‹_¸óã
(
Æíli°_t
 
Æíli°
, 
Êags
);

141 
Æíli°_curs‹_de°roy
(
Æíli°_curs‹_t
 
curs‹p
);

147 
Æíli°_curs‹_öô
(
Æíli°_t
 
Æíli°
,

148 
size_t
 
off£t
,

149 
Æíli°_curs‹_t
 
curs‹p
);

152 
Æíli°_curs‹_˛⁄e
(
Æíli°_t
 
Æíli°
,

153 
Æíli°_curs‹_t
 
curs‹p_ö
,

154 
Æíli°_curs‹_t
 
curs‹p_out
);

160 
size_t
 
Æíli°_curs‹_off£t
(
Æíli°_t
 
Æíli°
, 
Æíli°_curs‹_t
 
curs‹p
);

165 
Æíli°_t
 
Æíli°_curs‹_to_Æíli°
(
Æíli°_curs‹_t
 
curs‹p
);

171 
Æíli°_t
 
kvaddr_to_Æíli°
–Æíli°_à
Æíli°
,

172 
ˇddr_t
 
kvaddr
,

173 
size_t
 
Àngth
,

174 
Êags
);

177 
Æíli°_t
 
uvaddr_to_Æíli°
–Æíli°_à
Æíli°
,

178 
uvaddr_t
 
vaddr
,

179 
size_t
 
Àngth
,

180 
Êags
);

183 
	gbuf
;

184 
Æíli°_t
 
buf_to_Æíli°
–Æíli°_à
Æíli°
,

185 
buf
 *buf,

186 
Êags
);

193 
	sÆíli°_curs‹_s
 {

194 
Æíli°_s
 *
	gÆ_Æíli°
;

195 
size_t
 
	gÆ_off£t
;

196 
Æíli°_chunk_s
 *
	gÆ_chunk
;

197 
	gÆ_ödex
;

198 
size_t
 
	gÆ_bcou¡
;

201 #ifde‡
__˝lu•lus


	@/usr/include/sys/bsd_types.h

18 #i‚de‡
_SYS_BSD_TYPES_H


19 
	#_SYS_BSD_TYPES_H


	)

28 °ru˘ { 
	mr
[1]; } * 
	tphyßdr
;

29 
	tunch¨
;

30 
	tu_ch¨
;

31 
	tush‹t
;

32 
	tu_sh‹t
;

33 
	tuöt
;

34 
	tu_öt
;

35 
	tul⁄g
;

36 
	tu_l⁄g
;

37 
	s_quad
 { 
	mvÆ
[2]; } 
	tquad
;

39 #i‡
deföed
(
_BSD_COMPAT
)

41 
	~<sys/mkdev.h
>

44 
	~<sys/£À˘.h
>

	@/usr/include/sys/capability.h

13 #i‚de‡
__SYS_CAPABILITY_H__


14 
	#__SYS_CAPABILITY_H__


	)

16 #ifde‡
__˝lu•lus


28 
	#SGI_CAP_FILE
 "SGI_CAP_FILE"

	)

29 
	#SGI_CAP_PROCESS
 "SGI_CAP_PROCESS"

	)

30 
	#SGI_CAP_PROCESS_FLAGS
 "SGI_CAP_PROCESS_FLAGS"

	)

31 
	#SGI_CAP_REQUEST
 "SGI_CAP_REQUEST"

	)

32 
	#SGI_CAP_SURRENDER
 "SGI_CAP_SURRENDER"

	)

33 
	#SGI_CAP_DISABLED
 "SGI_CAP_DISABLED"

	)

34 
	#SGI_CAP_SUPERUSER
 "SGI_CAP_SUPERUSER"

	)

35 
	#SGI_CAP_NO_SUPERUSER
 "SGI_CAP_NO_SUPERUSER"

	)

37 
	#SGI_CAP_FILE_SIZE
 ( (
SGI_CAP_FILE
Ë- 1)

	)

38 
	#SGI_CAP_PROCESS_SIZE
 ( (
SGI_CAP_PROCESS
Ë- 1)

	)

39 
	#SGI_CAP_PROCESS_FLAGS_SIZE
 ( (
SGI_CAP_PROCESS_FLAGS
Ë- 1)

	)

40 
	#SGI_CAP_REQUEST_SIZE
 ( (
SGI_CAP_REQUEST
Ë- 1)

	)

41 
	#SGI_CAP_SURRENDER_SIZE
 ( (
SGI_CAP_SURRENDER
Ë- 1)

	)

46 
	#CAP_SYS_DISABLED
 0

	)

47 
	#CAP_SYS_SUPERUSER
 1

	)

48 
	#CAP_SYS_NO_SUPERUSER
 2

	)

53 
	#CAP_NOT_A_CID
 0LL

	)

54 
	#CAP_CHOWN
 (0x01LL << 1)

	)

55 
	#CAP_DAC_WRITE
 (0x01LL << 2)

	)

56 
	#CAP_DAC_READ_SEARCH
 (0x01LL << 3)

	)

57 
	#CAP_FOWNER
 (0x01LL << 4)

	)

62 
	#CAP_DAC_OVERRIDE
 (
CAP_DAC_WRITE
|
CAP_DAC_READ_SEARCH
|
CAP_FOWNER
)

	)

63 
	#CAP_FSETID
 (0x01LL << 5)

	)

64 
	#CAP_KILL
 (0x01LL << 6)

	)

65 
	#CAP_LINK_DIR
 (0x01LL << 7)

	)

66 
	#CAP_SETFPRIV
 (0x01LL << 8)

	)

67 
	#CAP_SETFCAP
 
CAP_SETFPRIV


	)

68 
	#CAP_SETPPRIV
 (0x01LL << 9)

	)

69 
	#CAP_SETPCAP
 
CAP_SETPPRIV


	)

70 
	#CAP_SETGID
 (0x01LL << 10Ë

	)

71 
	#CAP_SETUID
 (0x01LL << 11)

	)

73 
	#CAP_MAC_DOWNGRADE
 (0x01LL << 12)

	)

74 
	#CAP_MAC_READ
 (0x01LL << 13)

	)

75 
	#CAP_MAC_RELABEL_SUBJ
 (0x01LL << 14)

	)

76 
	#CAP_MAC_WRITE
 (0x01LL << 15)

	)

77 
	#CAP_MAC_UPGRADE
 (0x01LL << 16)

	)

79 
	#CAP_INF_NOFLOAT_OBJ
 (0x01LL << 17Ë

	)

80 
	#CAP_INF_NOFLOAT_SUBJ
 (0x01LL << 18Ë

	)

81 
	#CAP_INF_DOWNGRADE
 (0x01LL << 19Ë

	)

82 
	#CAP_INF_UPGRADE
 (0x01LL << 20Ë

	)

83 
	#CAP_INF_RELABEL_SUBJ
 (0x01LL << 21Ë

	)

85 
	#CAP_AUDIT_CONTROL
 (0x01LL << 22)

	)

86 
	#CAP_AUDIT_WRITE
 (0x01LL << 23)

	)

88 
	#CAP_MAC_MLD
 (0x01LL << 24)

	)

89 
	#CAP_MEMORY_MGT
 (0x01LL << 25)

	)

90 
	#CAP_SWAP_MGT
 (0x01LL << 26)

	)

91 
	#CAP_TIME_MGT
 (0x01LL << 27)

	)

92 
	#CAP_SYSINFO_MGT
 (0x01LL << 28)

	)

93 
	#CAP_NVRAM_MGT
 
CAP_SYSINFO_MGT


	)

94 
	#CAP_MOUNT_MGT
 (0x01LL << 29)

	)

95 
	#CAP_QUOTA_MGT
 (0x01LL << 30)

	)

96 
	#CAP_PRIV_PORT
 (0x01LL << 31)

	)

97 
	#CAP_STREAMS_MGT
 (0x01LL << 32)

	)

98 
	#CAP_SCHED_MGT
 (0x01LL << 33)

	)

99 
	#CAP_PROC_MGT
 (0x01LL << 34)

	)

100 
	#CAP_SVIPC_MGT
 (0x01LL << 35)

	)

101 
	#CAP_NETWORK_MGT
 (0x01LL << 36)

	)

102 
	#CAP_DEVICE_MGT
 (0x01LL << 37)

	)

103 
	#CAP_MKNOD
 
CAP_DEVICE_MGT


	)

104 
	#CAP_ACCT_MGT
 (0x01LL << 38)

	)

105 
	#CAP_SHUTDOWN
 (0x01LL << 39)

	)

106 
	#CAP_CHROOT
 (0x01LL << 40)

	)

108 
	#CAP_DAC_EXECUTE
 (0x01LL << 41)

	)

109 
	#CAP_MAC_RELABEL_OPEN
 (0x01LL << 42)

	)

111 
	#CAP_SIGMASK
 (0x01LL << 43Ë

	)

113 
	#CAP_XTCB
 (0x01LL << 44Ë

	)

115 
	#CAP_GL_OK
 (0x01LL << 45Ë

	)

117 
	#CAP_MAX_ID
 45

	)

119 
	#CAP_FLAG_PURE_RECALC
 (0x01LL << 63)

	)

124 
	#CAP_FLAGS
 0xf000000000000000LL

	)

125 
	#CAP_ALL_ON
 0x0fffffffffffff„LL

	)

126 
	#CAP_INVALID
 0x0000000000000001LL

	)

127 
	#CAP_ALL_OFF
 0x0000000000000000LL

	)

129 
__uöt64_t
 
	tˇp_vÆue_t
;

130 
__uöt64_t
 
	tˇp_Êag_t
;

131 
__uöt64_t
 
	tˇp_Êag_vÆue_t
;

133 
	sˇp_£t
 {

134 
ˇp_vÆue_t
 
ˇp_ef„˘ive
;

135 
ˇp_vÆue_t
 
ˇp_≥rmôãd
;

136 
ˇp_vÆue_t
 
ˇp_öhîôabÀ
;

138 
ˇp_£t
 
	tˇp_£t_t
;

139 
ˇp_£t
 * 
	tˇp_t
;

144 
	#CAP_EFFECTIVE
 0

	)

145 
	#CAP_PERMITTED
 1

	)

146 
	#CAP_INHERITABLE
 2

	)

151 
	#CAP_CLEAR
 0

	)

152 
	#CAP_SET
 1

	)

158 
	#CAP_ID_CLEAR
(
c
,
s
Ë((sË&(~(c)))

	)

159 
	#CAP_ID_SET
(
c
,
s
Ë((sË|(c))

	)

160 
	#CAP_ID_ISSET
(
c
,
s
Ë(((sË& (c)Ë=c)

	)

162 
	#_CAP_NUM
(
c
Ë((c)/(
ˇp_vÆue_t
))

	)

167 
	#CAP_ENV_SETUID
 0x001

	)

168 
	#CAP_ENV_RECALC
 0x002

	)

172 #ifde‡
_KERNEL


173 
vfs
;

174 
vnode
;

175 
¥oc
;

176 
¸ed
;

177 
xfs_öode
;

179 
ˇp_empowî_¸ed
–
¸ed
 * );

181 
ˇp_abÀ
–
ˇp_vÆue_t
 );

182 
ˇp_ªque°
–
ˇp_vÆue_t
 );

183 
ˇp_suºídî
–
ˇp_vÆue_t
 );

184 
ˇp_abÀ_¸ed
–
¸ed
 *, 
ˇp_vÆue_t
 );

185 
ˇp_abÀ_™y
–
¸ed
 *);

186 
ˇp_ªˇlc
–c⁄° 
ˇp_£t
 * );

187 
ˇp_exec_√wˇp
–c⁄° 
ˇp_£t
 *, const cap_set *, cap_set *);

188 
ˇp_vtoˇp
–
vnode
 *, 
ˇp_t
 );

189 
ˇp_£çˇp
–
ˇp_t
, 
ˇp_vÆue_t
 *);

190 
ˇp_gë
–*, , 
ˇp_t
 );

191 
ˇp_£t
–*, , 
ˇp_t
 );

192 
ˇp_°yÀ
( );

195 
ˇp_íabÀd
;

197 
	#_CAP_ABLE
(
c
Ë(
	`ˇp_abÀ
(c))

	)

198 
	#_CAP_CRABLE
(
¸
,
c
Ë(
	`ˇp_abÀ_¸ed
(¸,c))

	)

203 
ˇp_˛ór
 (
ˇp_t
);

204 
ssize_t
 
ˇp_c›y_ext
 (*, 
ˇp_t
, ssize_t);

205 
ˇp_t
 
ˇp_c›y_öt
 (const *);

206 
ˇp_t
 
ˇp_dup
 (cap_t);

207 
ˇp_‰ì
 (*);

208 
ˇp_t
 
ˇp_‰om_ãxt
 (const *);

209 
ˇp_t
 
ˇp_gë_fd
 ();

210 
ˇp_t
 
ˇp_gë_fûe
 (const *);

211 
ˇp_gë_Êag
 (
ˇp_t
, 
ˇp_vÆue_t
, 
ˇp_Êag_t
, 
ˇp_Êag_vÆue_t
 *);

212 
ˇp_t
 
ˇp_gë_¥oc
 ();

213 
ˇp_t
 
ˇp_öô
 ();

214 
ˇp_£t_fd
 (, 
ˇp_t
);

215 
ˇp_£t_fûe
 (c⁄° *, 
ˇp_t
);

216 
ˇp_£t_Êag
 (
ˇp_t
, 
ˇp_Êag_t
, , 
ˇp_vÆue_t
 *, 
ˇp_Êag_vÆue_t
);

217 
ˇp_£t_¥oc
 (
ˇp_t
);

218 
ˇp_£t_¥oc_Êags
 (
ˇp_vÆue_t
);

219 
ssize_t
 
ˇp_size
 (
ˇp_t
);

220 *
ˇp_to_ãxt
 (
ˇp_t
, 
size_t
 *);

223 
ˇp_t
 
ˇp_acquúe
 (, c⁄° 
ˇp_vÆue_t
 *);

224 
ˇp_suºídî
 (
ˇp_t
);

225 *
ˇp_vÆue_to_ãxt
 (
ˇp_vÆue_t
);

226 
ˇp_ívl
 (, ...);

227 
ˇp_ívp
 (, 
size_t
, c⁄° 
ˇp_vÆue_t
 *);

231 #ifde‡
__˝lu•lus


	@/usr/include/sys/conf.h

22 #i‚de‡
_IO_CONF_H


23 
	#_IO_CONF_H


	)

32 
	g¸ed
;

33 
	guio
;

34 
	gpﬁlhód
;

35 
	gdevi˚_drivî_s
;

36 
	gvh™dl
;

37 
	gbuf
;

38 
	sbdevsw
 {

39 *
	md_Êags
;

40 
	md_˝ulock
;

41 (*
	md_›í
)(
	mdev_t
 *, , , 
	m¸ed
 *);

42 (*
	md_˛o£
)(
	mdev_t
, , , 
	m¸ed
 *);

43 (*
	md_°øãgy
)(
	mbuf
 *);

44 (*
	md_¥öt
)(
	mdev_t
, *);

45 (*
	md_m≠
)(
	mvh™dl
 *, 
	moff_t
, 
	msize_t
, 
	muöt_t
);

46 (*
	md_unm≠
)(
	mvh™dl
 *);

47 (*
	md_dump
)(
	mdev_t
, , 
	mdaddr_t
, 
	mˇddr_t
, );

48 (*
	md_size
)(
	mdev_t
);

49 (*
	md_size64
)(
	mdev_t
, 
	mdaddr_t
 *);

50 
cfg_desc
 *
	md_desc
;

51 
devi˚_drivî_s
 *
	md_drivî
;

57 
	scdevsw
 {

58 *
	md_Êags
;

59 
	md_˝ulock
;

60 (*
	md_›í
)(
	mdev_t
 *, , , 
	m¸ed
 *);

61 (*
	md_˛o£
)(
	mdev_t
, , , 
	m¸ed
 *);

62 (*
	md_ªad
)(
dev_t
 
	mdev
, 
uio
 *
	mui›
, 
¸ed
 *
	m¸p
);

63 (*
	md_wrôe
)(
dev_t
 
	mdev
, 
uio
 *
	mui›
, 
¸ed
 *
	m¸p
);

64 (*
	md_io˘l
)();

65 (*
	md_mm≠
)(
	mdev_t
, 
	moff_t
, );

66 (*
	md_m≠
)();

67 (*
	md_unm≠
)();

68 (*
	md_pﬁl
)();

69 (*
	md_©èch
)(
	mdev_t
);

70 (*
	md_dëach
)(
	mdev_t
);

71 (*
	md_íabÀ
)(
	mdev_t
);

72 (*
	md_dißbÀ
)(
	mdev_t
);

73 
ây
 *
	md_âys
;

74 
°ªamèb
 *
	md_°r
;

75 
cfg_desc
 *
	md_desc
;

76 
devi˚_drivî_s
 *
	md_drivî
;

79 
	#DC_OPEN
 1

	)

80 
	#DC_CLOSE
 2

	)

81 
	#DC_READ
 3

	)

82 
	#DC_WRITE
 4

	)

83 
	#DC_IOCTL
 5

	)

84 
	#DC_PRINT
 6

	)

85 
	#DC_STRAT
 7

	)

86 
	#DC_DUMP
 8

	)

87 
	#DC_SIZE
 9

	)

88 
	#DC_MAP
 10

	)

89 
	#DC_UNMAP
 11

	)

90 
	#DC_POLL
 12

	)

91 
	#DC_MMAP
 13

	)

92 
	#DC_ATTACH
 14

	)

93 
	#DC_DETACH
 15

	)

94 
	#DC_ENABLE
 16

	)

95 
	#DC_DISABLE
 17

	)

96 
	#DC_SIZE64
 18

	)

98 #ifde‡
_KERNEL


100 
bd°øt
(
bdevsw
 *, 
buf
 *);

102 
	#bd›í
(
devsw
,
devp
,
a2
,
a3
,
a4
Ë
	`bdrv
(devsw,
DC_OPEN
,devp,a2,a3,a4)

	)

103 
	#bd¥öt
(
devsw
,
a1
,
a2
Ë
	`bdrv
(devsw,
DC_PRINT
,a1,a2)

	)

104 
	#bd˛o£
(
devsw
,
a1
,
a2
,
a3
,
a4
Ë
	`bdrv
(devsw,
DC_CLOSE
,a1,a2,a3,a4)

	)

105 
	#bddump
(
devsw
,
a1
,
a2
,
a3
,
a4
,
a5
Ë
	`bdrv
(devsw,
DC_DUMP
,a1,a2,a3,a4,a5)

	)

106 
	#bdsize
(
devsw
,
a1
Ë
	`bdrv
(devsw,
DC_SIZE
,a1)

	)

107 
	#bdsize64
(
devsw
,
a1
,
a2
Ë
	`bdrv
(devsw,
DC_SIZE64
,a1,a2)

	)

108 
	#cd›í
(
devsw
,
devp
,
a2
,
a3
,
a4
Ë
	`cdrv
(devsw,
DC_OPEN
,devp,a2,a3,a4)

	)

109 
	#cd˛o£
(
devsw
,
dev
,
a2
,
a3
,
a4
Ë
	`cdrv
(devsw,
DC_CLOSE
,dev,a2,a3,a4)

	)

110 
	#cdªad
(
devsw
,
dev
,
uio
,
¸
Ë
	`cdrv
(devsw,
DC_READ
,dev,uio,¸)

	)

111 
	#cdwrôe
(
devsw
,
dev
,
uio
,
¸
Ë
	`cdrv
(devsw,
DC_WRITE
,dev,uio,¸)

	)

112 
	#cdio˘l
(
devsw
,
dev
,
a2
,
a3
,
a4
,
a5
,
a6
Ë
	`cdrv
(devsw,
DC_IOCTL
,dev,a2,a3,a4,a5,a6)

	)

113 
	#cdpﬁl
(
devsw
,
dev
,
a2
,
a3
,
a4
,
a5
,
a6
Ë
	`cdrv
(devsw,
DC_POLL
,dev,a2,a3,a4,a5,a6)

	)

114 
	#cd©èch
(
devsw
,
dev
Ë
	`cdrv
(devsw,
DC_ATTACH
,dev)

	)

115 
	#cddëach
(
devsw
,
dev
Ë
	`cdrv
(devsw,
DC_DETACH
,dev)

	)

116 
	#cdíabÀ
(
devsw
,
dev
Ë
	`cdrv
(devsw,
DC_ENABLE
,dev)

	)

117 
	#cddißbÀ
(
devsw
,
dev
Ë
	`cdrv
(devsw,
DC_DISABLE
,dev)

	)

119 
	g__vh™dl_s
;

120 
bdm≠
(
bdevsw
 *, 
__vh™dl_s
 *, 
off_t
, 
size_t
, 
uöt_t
);

121 
bdunm≠
(
bdevsw
 *, 
__vh™dl_s
 *);

122 
cdm≠
(
cdevsw
 *, 
dev_t
, 
__vh™dl_s
 *, 
off_t
, 
size_t
, 
uöt_t
);

123 
cdunm≠
(
cdevsw
 *, 
dev_t
, 
__vh™dl_s
 *);

124 
cdmm≠
(
cdevsw
 *, 
dev_t
, 
off_t
, 
uöt_t
);

130 
	#DLOCK_MASK
 0x7

	)

131 
	#D_PROCESSOR
 0x0

	)

132 
	#D_MP
 0x1

	)

133 
	#D_MT
 0x2

	)

135 
	#D_WBACK
 0x8

	)

143 
	#D_OBSOLD
 0x10

	)

147 
	#D_SEEKNEG
 0x20

	)

148 
	#D_TAPE
 0x40

	)

152 
	#D_NOBRKUP
 0x80

	)

153 
	#D_ASYNC_ATTACH
 0x100

	)

157 
	#D_PCI_HOT_PLUG_ATTACH
 0x200

	)

158 
	#D_PCI_HOT_PLUG_DETACH
 0x400

	)

162 
	#D_ADD_ATTR_LAYER
 0x800

	)

164 #i‡
_KERNEL


168 
	#D_IPV6
 0x1000

	)

171 
	#FMNAMESZ
 8

	)

173 
	sfmodsw
 {

174 
	mf_«me
[
FMNAMESZ
+1];

175 
°ªamèb
 *
	mf_°r
;

176 *
	mf_Êags
;

179 
	#GROUPNAMESZ
 20

	)

184 
	stu√èbÀ
 {

185 
	mt_«me
[
GROUPNAMESZ
+1];

186 
	mt_Êag
;

187 (*
	mt_ßnôy
)();

190 
	#N_STATIC
 1

	)

191 
	#N_RUN
 2

	)

193 
	#TUNENAMESZ
 63

	)

197 
	stu√«me
 {

198 
	mt_«me
[
TUNENAMESZ
 + 1];

199 *
	mt_addr
;

200 
	mt_size
;

201 
	mt_group
;

207 
	#MAXDEVNAME
 256

	)

210 #ifde‡
_KERNEL


212 
bdevsw
 bdevsw[];

213 
cdevsw
 cdevsw[];

214 
fmodsw
 fmodsw[];

216 
bdev˙t
;

217 
cdev˙t
;

218 
fmod˙t
;

219 
bdevmax
;

220 
cdevmax
;

221 
fmodmax
;

222 
vfsmax
;

223 
nf°y≥
;

224 
bdrv
(
bdevsw
 *, , ...);

225 
cdrv
(
cdevsw
 *, , ...);

227 
	#bd°©ic
(
b
Ë((b)->
d_desc
 =
NULL
)

	)

228 
	#cd°©ic
(
c
Ë((c)->
d_desc
 =
NULL
)

	)

229 
	#fm°©ic
(
fmaj
Ë((fmaj)< 
fmod˙t
)

	)

231 
	#bdvÆid
(
b
Ë((bË!
NULL
)

	)

232 
	#cdvÆid
(
c
Ë((cË!
NULL
)

	)

233 
	#fmvÆid
(
fm
Ë(
	`fm°©ic
(fmË|| ((fm)< 
fmodmax
 && 
fmodsw
[fm].
f_Êags
))

	)

235 
cdhﬁd
(
cdevsw
 *);

236 
cdªÀ
(
cdevsw
 *);

237 
bdhﬁd
(
bdevsw
 *);

238 
bdªÀ
(
bdevsw
 *);

239 
fmhﬁd
();

240 
fmªÀ
();

242 
tu√«me
Åunename[];

243 
tu√èbÀ
Åunetable[];

244 
tu√èbÀföd
(*);

246 *
dev_to_«me
(
dev_t
, *, 
uöt
);

248 
	~<sys/hwgøph.h
>

251 
	#gë_bdevsw
(
dev
Ë(
	`dev_is_vîãx
(dev) ? \

252 
	`hwgøph_bdevsw_gë
(
	`dev_to_vhdl
(
dev
)) : \

253 (((
	`maj‹
(
dev
Ë< 
bdev˙t
) || \

254 ((
	`maj‹
(
dev
Ë< 
bdevmax
Ë&& 
bdevsw
[maj‹(dev)].
d_Êags
)) ? \

255 &(
bdevsw
[
	`maj‹
(
dev
)]Ë: 
NULL
))

	)

259 
	#gë_cdevsw
(
dev
Ë(
	`dev_is_vîãx
(dev) ? \

260 
	`hwgøph_cdevsw_gë
(
	`dev_to_vhdl
(
dev
)) : \

261 (((
	`maj‹
(
dev
Ë< 
cdev˙t
) || \

262 ((
	`maj‹
(
dev
Ë< 
cdevmax
Ë&& 
cdevsw
[maj‹(dev)].
d_Êags
)) ? \

263 &(
cdevsw
[
	`maj‹
(
dev
)]Ë: 
NULL
))

	)

266 
cdevsw
 * 
˛⁄e_gë_cdevsw
(
dev_t
);

	@/usr/include/sys/cpumask.h

18 #i‚de‡
_SYS_CPUMASK_H


19 
	#_SYS_CPUMASK_H


	)

23 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_STANDALONE
Ë|| deföed(
_KMEMUSER
)

25 #i‡(
SN0
)

26 
	~<sys/SN/SN0/¨ch.h
>

28 #i‡(
SN1
)

29 
	~<sys/SN/SN1/¨ch.h
>

32 #i‚de‡
MAXCPUS


33 #ifde‡
MAXCPU


34 
	#MAXCPUS
 
MAXCPU


	)

36 
	#MAXCPUS
 128

	)

40 #i‡
LARGE_CPU_COUNT


42 
	#CPUMASK_SIZE
 (
MAXCPUS
 / 
_MIPS_SZLONG
)

	)

45 
	m_bôs
[
CPUMASK_SIZE
];

46 } 
	t˝umask_t
;

55 #i‡((
_MIPS_SZLONG
 =32Ë&& (
CPUMASK_SIZE
 < 2))

56 #îr‹ 
ma¸os
 
cuºíéy
 
⁄ly
 
deföed
 64 
bô
 
kî√ls


59 #i‡(
MAXCPUS
 <= 128)

60 
	#CPUMASK_CLRALL
(
p
Ë’).
_bôs
[0] = 0, (p)._bôs[1] = 0

	)

61 
	#CPUMASK_IS_ZERO
(
p
Ë(’).
_bôs
[0] =0 && (p)._bôs[1] =0)

	)

62 
	#CPUMASK_IS_NONZERO
(
p
Ë(’).
_bôs
[0] !0 || (p)._bôs[1] !0)

	)

63 
	#CPUMASK_NOTEQ
(
p
, 
q
Ë((’).
_bôs
[0] != (q)._bits[0]) || \

64 ((
p
).
_bôs
[1] !(
q
)._bôs[1]))

	)

65 
	#CPUMASK_SETM
(
p
, 
q
Ë’).
_bôs
[0] |= (q)._bits[0], \

66 (
p
).
_bôs
[1] |(
q
)._bôs[1]

	)

67 
	#CPUMASK_CLRM
(
p
, 
q
Ë’).
_bôs
[0] &= ~((q)._bits[0]), \

68 (
p
).
_bôs
[1] &~((
q
)._bôs[1])

	)

69 
	#CPUMASK_ANDM
(
p
, 
q
Ë’).
_bôs
[0] &= ((q)._bits[0]), \

70 (
p
).
_bôs
[1] &((
q
)._bôs[1])

	)

71 
	#CPUMASK_TSTM
(
p
, 
q
Ë((’).
_bôs
[0] & (q)._bits[0]) || \

72 ((
p
).
_bôs
[1] & (
q
)._bôs[1]))

	)

73 
	#CPUMASK_CPYNOTM
(
p
, 
q
Ë’).
_bôs
[0] = ~((q)._bits[0]), \

74 (
p
).
_bôs
[1] = ~((
q
)._bôs[1])

	)

75 
	#CPUMASK_ORNOTM
(
p
, 
q
Ë’).
_bôs
[0] |= ~((q)._bits[0]), \

76 (
p
).
_bôs
[1] |~((
q
)._bôs[1])

	)

77 
	#CPUMASK_COPY
(
p
, 
q
Ë’).
_bôs
[0] = ((q)._bits[0]), \

78 (
p
).
_bôs
[1] = ((
q
)._bôs[1])

	)

85 
	#CPUMASK_ATOMSET
(
p
, 
q
) \

87 
	`ASSERT
(!(
q
).
_bôs
[0] || !(q)._bits[1]); \

88 i‡((
q
).
_bôs
[0]) \

89 
	`©omicSëCpumask
((
˝umask_t
 *)&(
p
).
_bôs
[0], \

90 (
˝umask_t
 *)&(
q
).
_bôs
[0]); \

92 
	`©omicSëCpumask
((
˝umask_t
 *)&(
p
).
_bôs
[1], \

93 (
˝umask_t
 *)&(
q
).
_bôs
[1]); \

94 }

	)

96 
	#CPUMASK_ATOMCLR
(
p
, 
q
) \

98 
	`ASSERT
(!(
q
).
_bôs
[0] || !(q)._bits[1]); \

99 i‡((
q
).
_bôs
[0]) \

100 
	`©omicCÀ¨Cpumask
((
˝umask_t
 *)&(
p
).
_bôs
[0], \

101 (
˝umask_t
 *)&(
q
).
_bôs
[0]); \

103 
	`©omicCÀ¨Cpumask
((
˝umask_t
 *)&(
p
).
_bôs
[1], \

104 (
˝umask_t
 *)&(
q
).
_bôs
[1]); \

105 }

	)

111 #i‡(
_MIPS_SZLONG
 != 32)

113 
	#CPUMASK_CLRALL
(
p
) { \

114 
_i
; \

116 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) \

117 (
p
).
_bôs
[
_i
] = 0; \

118 }

	)

120 
	#CPUMASK_SETM
(
p
,
q
) { \

121 
_i
; \

123 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) \

124 (
p
).
_bôs
[
_i
] |((
q
)._bits[_i]); \

125 }

	)

127 
	#CPUMASK_CLRM
(
p
,
q
) { \

128 
_i
; \

130 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) \

131 (
p
).
_bôs
[
_i
] &~((
q
)._bits[_i]); \

132 }

	)

134 
	#CPUMASK_ANDM
(
p
,
q
) { \

135 
_i
; \

137 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) \

138 (
p
).
_bôs
[
_i
] &((
q
)._bits[_i]); \

139 }

	)

141 
	#CPUMASK_CPYNOTM
(
p
,
q
) { \

142 
_i
; \

144 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) \

145 (
p
).
_bôs
[
_i
] = ~((
q
)._bits[_i]); \

146 }

	)

148 
	#CPUMASK_ORNOTM
(
p
,
q
) { \

149 
_i
; \

151 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) \

152 (
p
).
_bôs
[
_i
] |~((
q
)._bits[_i]); \

153 }

	)

155 
	#CPUMASK_COPY
(
p
,
q
) { \

156 
_i
; \

158 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) \

159 (
p
).
_bôs
[
_i
] = ((
q
)._bits[_i]); \

160 }

	)

163 
	#CPUMASK_ATOMSET
(
p
,
q
) { \

164 
_i
; \

166 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) { \

167 i‡((
q
).
_bôs
[
_i
]) { \

168 
	`©omicSëCpumask
((
˝umask_t
 *)&(
p
).
_bôs
[
_i
], \

169 (
˝umask_t
 *)&(
q
).
_bôs
[
_i
]); \

173 }

	)

176 
	#CPUMASK_ATOMCLR
(
p
,
q
) { \

177 
_i
; \

179 
_i
 = 0 ; _ò< 
CPUMASK_SIZE
 ; _i++) { \

180 i‡((
q
).
_bôs
[
_i
]) { \

181 
	`©omicCÀ¨Cpumask
((
˝umask_t
 *)&(
p
).
_bôs
[
_i
], \

182 (
˝umask_t
 *)&(
q
).
_bôs
[
_i
]); \

186 }

	)

190 
__ölöe
 
	$CPUMASK_IS_ZERO
 (
˝umask_t
 
p
)

192 
i
;

194 
i
 = 0 ; i < 
CPUMASK_SIZE
 ; i++)

195 i‡(
p
.
_bôs
[
i
] != 0)

198 
	}
}

200 
__ölöe
 
	$CPUMASK_IS_NONZERO
 (
˝umask_t
 
p
)

202 
i
;

204 
i
 = 0 ; i < 
CPUMASK_SIZE
 ; i++)

205 i‡(
p
.
_bôs
[
i
] != 0)

208 
	}
}

210 
__ölöe
 
	$CPUMASK_NOTEQ
 (
˝umask_t
 
p
, cpumask_à
q
)

212 
i
;

214 
i
 = 0 ; i < 
CPUMASK_SIZE
 ; i++)

215 i‡(
p
.
_bôs
[
i
] !
q
._bits[i])

218 
	}
}

220 
__ölöe
 
	$CPUMASK_TSTM
 (
˝umask_t
 
p
, cpumask_à
q
)

222 
i
;

224 
i
 = 0 ; i < 
CPUMASK_SIZE
 ; i++)

225 i‡(
p
.
_bôs
[
i
] & 
q
._bits[i])

228 
	}
}

235 #i‡
TFP


240 
	#CPUMASK_SETB
(
p
, 
bô
) { \

241 i‡(
	`CPUMASK_INDEX
(
bô
)) \

242 (
p
).
_bôs
[1] |(1ULL << 
	`CPUMASK_SHFT
(
bô
)); \

243 (
p
).
_bôs
[0] |(1ULL << 
	`CPUMASK_SHFT
(
bô
));}

	)

245 
	#CPUMASK_CLRB
(
p
, 
bô
) { \

246 i‡(
	`CPUMASK_INDEX
(
bô
)) \

247 (
p
).
_bôs
[1] &~(1ULL << 
	`CPUMASK_SHFT
(
bô
)); \

248 (
p
).
_bôs
[0] &~(1ULL << 
	`CPUMASK_SHFT
(
bô
));}

	)

250 
	#CPUMASK_TSTB
(
p
, 
bô
) \

251 (
	`CPUMASK_INDEX
(
bô
) ? \

252 (
p
).
_bôs
[1] & (1ULL << 
	`CPUMASK_SHFT
(
bô
)) : \

253 (
p
).
_bôs
[0] & (1ULL << 
	`CPUMASK_SHFT
(
bô
)))

	)

257 
	#CPUMASK_SETB
(
p
, 
bô
Ë’).
_bôs
[
	`CPUMASK_INDEX
(bit)] |= \

258 (1ULL << 
	`CPUMASK_SHFT
(
bô
))

	)

259 
	#CPUMASK_CLRB
(
p
, 
bô
Ë’).
_bôs
[
	`CPUMASK_INDEX
(bit)] &= \

260 ~(1ULL << 
	`CPUMASK_SHFT
(
bô
))

	)

261 
	#CPUMASK_TSTB
(
p
, 
bô
Ë(’).
_bôs
[
	`CPUMASK_INDEX
(bit)] & \

262 (1ULL << 
	`CPUMASK_SHFT
(
bô
)))

	)

266 
	#CPUMASK_INDEX
(
bô
Ë((bôË>> 6)

	)

267 
	#CPUMASK_SHFT
(
bô
Ë((bôË& 0x3f)

	)

273 
	#CPUMASK_ATOMTSTSETB
(
p
, 
bô
) \

274 (
	`©omicSëUöt64
(&(
p
).
_bôs
[
	`CPUMASK_INDEX
(
bô
)], \

275 (1ULL<<
	`CPUMASK_SHFT
(
bô
))) & \

276 (1ULL<<
	`CPUMASK_SHFT
(
bô
)))

	)

278 
	#CPUMASK_ATOMTSTCLRB
(
p
, 
bô
) \

279 (
	`©omicCÀ¨Uöt64
(&(
p
).
_bôs
[
	`CPUMASK_INDEX
(
bô
)], \

280 (1ULL<<
	`CPUMASK_SHFT
(
bô
))) & \

281 (1ULL<<
	`CPUMASK_SHFT
(
bô
)))

	)

283 
	#CPUMASK_ATOMSETB
(
p
, 
bô
) \

284 
	`©omicSëUöt64
(&(
p
).
_bôs
[
	`CPUMASK_INDEX
(
bô
)], \

285 (1ULL<<
	`CPUMASK_SHFT
(
bô
)))

	)

287 
	#CPUMASK_ATOMCLRB
(
p
, 
bô
) \

288 
	`©omicCÀ¨Uöt64
(&(
p
).
_bôs
[
	`CPUMASK_INDEX
(
bô
)], \

289 (1ULL<<
	`CPUMASK_SHFT
(
bô
)))

	)

293 #ifde‡
EVEREST


294 
	t˝umask_t
;

295 
	#CPUMASK_SETB
(
p
, 
bô
Ë’Ë|1ULL << (bô)

	)

296 
	#CPUMASK_CLRB
(
p
, 
bô
Ë’Ë&~(1ULL << (bô))

	)

297 
	#CPUMASK_TSTB
(
p
, 
bô
Ë(’Ë& (1ULL << (bô)))

	)

299 
	#CPUMASK_ATOMTSTSETB
(
p
, 
bô
) \

300 (
	`©omicSëUöt64
(&(
p
), (1ULL<<(
bô
))Ë& (1ULL<<(bô)))

	)

302 
	#CPUMASK_ATOMTSTCLRB
(
p
, 
bô
) \

303 (
	`©omicCÀ¨Uöt64
(&(
p
), (1ULL<<(
bô
)Ë& (1ULL<<(bô))))

	)

305 
	#CPUMASK_ATOMSETB
(
p
, 
bô
) \

306 
	`©omicSëUöt64
(&(
p
), (1ULL<<(
bô
)))

	)

308 
	#CPUMASK_ATOMCLRB
(
p
, 
bô
) \

309 
	`©omicCÀ¨Uöt64
(&(
p
), (1ULL<<(
bô
)))

	)

312 
	t˝umask_t
;

313 
	#CPUMASK_SETB
(
p
, 
bô
Ë’Ë|1 << (bô)

	)

314 
	#CPUMASK_CLRB
(
p
, 
bô
Ë’Ë&~(1 << (bô))

	)

315 
	#CPUMASK_TSTB
(
p
, 
bô
Ë(’Ë& (1 << (bô)))

	)

317 
	#CPUMASK_ATOMTSTSETB
(
p
, 
bô
) \

318 (
	`©omicSëUöt
(&(
p
), (1<<(
bô
))Ë& (1<<(bô)))

	)

320 
	#CPUMASK_ATOMTSTCLRB
(
p
, 
bô
) \

321 (
	`©omicCÀ¨Uöt
(&(
p
), (1<<(
bô
))Ë& (1<<(bô)))

	)

323 
	#CPUMASK_ATOMSETB
(
p
, 
bô
) \

324 
	`©omicSëUöt
(&(
p
), (1<<(
bô
)))

	)

326 
	#CPUMASK_ATOMCLRB
(
p
, 
bô
) \

327 
	`©omicCÀ¨Uöt
(&(
p
), (1<<(
bô
)))

	)

331 
	#CPUMASK_CLRALL
(
p
Ë’Ë0

	)

332 
	#CPUMASK_IS_ZERO
(
p
Ë(’Ë=0)

	)

333 
	#CPUMASK_IS_NONZERO
(
p
Ë(’Ë!0)

	)

334 
	#CPUMASK_NOTEQ
(
p
, 
q
Ë(’Ë!(q))

	)

336 
	#CPUMASK_SETM
(
p
, 
q
Ë’Ë|(q)

	)

337 
	#CPUMASK_CLRM
(
p
, 
q
Ë’Ë&~(q)

	)

338 
	#CPUMASK_ANDM
(
p
, 
q
Ë’Ë&(q)

	)

339 
	#CPUMASK_TSTM
(
p
, 
q
Ë(’Ë& (q))

	)

341 
	#CPUMASK_CPYNOTM
(
p
, 
q
Ë’Ë~(q)

	)

342 
	#CPUMASK_ORNOTM
(
p
, 
q
Ë’Ë|~(q)

	)

344 
	#CPUMASK_ATOMSET
(
p
, 
q
Ë
	`©omicSëCpumask
((
˝umask_t
 *)&(p), \

345 (
˝umask_t
 *)&(
q
))

	)

346 
	#CPUMASK_ATOMCLR
(
p
, 
q
Ë
	`©omicCÀ¨Cpumask
((
˝umask_t
 *)&(p), \

347 (
˝umask_t
 *)&(
q
))

	)

351 
˝umask_t
 
Æl˛r_˝umask
;

352 
˝umask_t
 
Æl£t_˝umask
;

	@/usr/include/sys/driver.h

12 #i‚de‡
_DRIVER_H


13 
	#_DRIVER_H


	)

24 
devi˚_drivî_s
 *
	tdevi˚_drivî_t
;

25 
	#DEVICE_DRIVER_NONE
 (
devi˚_drivî_t
)
NULL


	)

28 
	tûvl_t
;

30 
	#DRIVER_THREAD_PRI_DEFAULT
 (
ûvl_t
)230

	)

32 
	#DRIVER_THREAD_PRI_INVALID
 (
ûvl_t
)-1

	)

35 
devi˚_drivî_thªad_¥i_£t
(
devi˚_drivî_t
 
drivî
,

36 
ûvl_t
 
¥i
);

39 
ûvl_t
 
devi˚_drivî_thªad_¥i_gë
(
devi˚_drivî_t
 
drivî
);

42 
ûvl_t
 
devi˚_drivî_sysgí_thªad_¥i_gë
(*
drivî_¥efix
);

45 
devi˚_drivî_öô
();

49 
devi˚_drivî_t
 
devi˚_drivî_Æloc
(*
¥efix
);

53 
devi˚_drivî_‰ì
(
devi˚_drivî_t
 
drivî
);

57 
devi˚_drivî_t
 
devi˚_drivî_gë
(*
¥efix
);

60 
devi˚_drivî_t
 
devi˚_drivî_gëbydev
(
dev_t
 
devi˚
);

62 
	gcdevsw
;

63 
	gbdevsw
;

67 
devi˚_drivî_devsw_put
(
devi˚_drivî_t
 
drivî
,

68 
bdevsw
 *
my_bdevsw
,

69 
cdevsw
 *
my_cdevsw
);

74 
devi˚_drivî_devsw_gë
–
devi˚_drivî_t
 
drivî
,

75 
bdevsw
 **
bdevswp
,

76 
cdevsw
 **
cdevswp
);

79 
devi˚_drivî_«me_gë
(
devi˚_drivî_t
 
drivî
, *
buf„r
, 
Àngth
);

88 
	s°©ic_devi˚_drivî_desc_s
 {

89 *
	msdd_¥efix
;

90 
bdevsw
 *
	msdd_bdevsw
;

91 
cdevsw
 *
	msdd_cdevsw
;

92 } *
	t°©ic_devi˚_drivî_desc_t
;

94 
°©ic_devi˚_drivî_desc_s
 
°©ic_devi˚_drivî_èbÀ
[];

95 
°©ic_devsw_cou¡
;

102 
	sdev_admö_öfo_s
 {

103 *
	mdai_«me
;

106 *
	mdai_∑øm_«me
;

107 *
	mdai_∑øm_vÆ
;

108 } 
	tdev_admö_öfo_t
;

112 
devi˚_admö_öfo_upd©e
(
vîãx_hdl_t
 
dev_vhdl
);

115 
devi˚_drivî_admö_öfo_upd©e
(
devi˚_drivî_t
 
drivî
);

118 *
devi˚_admö_öfo_gë
(
vîãx_hdl_t
 
dev_vhdl
,

119 *
öfo_lbl
);

122 
devi˚_admö_öfo_£t
(
vîãx_hdl_t
 
dev_vhdl
,

123 *
öfo_lbl
,

124 *
öfo_vÆ
);

127 *
devi˚_drivî_admö_öfo_gë
(*
drivî_¥efix
,

128 *
öfo_«me
);

131 
devi˚_drivî_admö_öfo_£t
(*
drivî_¥efix
,

132 *
drivî_öfo_lbl
,

133 *
drivî_öfo_vÆ
);

136 
devi˚_admö_èbÀ_öô
();

141 
devi˚_admö_èbÀ_upd©e
(*
dev_«me
,

142 *
∑øm_«me
,

143 *
∑øm_vÆ
);

146 
devi˚_drivî_admö_èbÀ_öô
();

151 
devi˚_drivî_admö_èbÀ_upd©e
(*
drv_¥efix
,

152 *
∑øm_«me
,

153 *
∑øm_vÆ
);

	@/usr/include/sys/fcntl.h

1 #i‚de‡
_SYS_FNCTL_H


2 
	#_SYS_FNCTL_H


	)

20 #i‚de‡
_SYS_TYPES_H


21 
	~<sys/ty≥s.h
>

24 #i‡
_SGIAPI
 && !
deföed
(
_F_FLAGS
)

26 
	#_F_FLAGS


	)

30 
	#FNDELAY
 0x04

	)

31 
	#FAPPEND
 0x08

	)

32 
	#FSYNC
 0x10

	)

33 
	#FDSYNC
 0x20

	)

34 
	#FRSYNC
 0x40

	)

35 
	#FNONBLOCK
 0x80

	)

36 
	#FASYNC
 0x1000

	)

37 
	#FLARGEFILE
 0x2000

	)

38 
	#FNONBLK
 
FNONBLOCK


	)

39 
	#FDIRECT
 0x8000

	)

40 
	#FBULK
 0x10000

	)

41 
	#FLCINVAL
 0x20000

	)

42 
	#FLCFLUSH
 0x40000

	)

43 #ifde‡
_KERNEL


44 
	#FDIRENT64
 0x8000

	)

47 
	#FNFSREADDIR
 0x100000

	)

48 
	#FNFSREADDIR_REPLY
 0x200000

	)

54 
	#FCREAT
 0x0100

	)

55 
	#FTRUNC
 0x0200

	)

56 
	#FEXCL
 0x0400

	)

57 
	#FNOCTTY
 0x0800

	)

64 
	#O_RDONLY
 0

	)

65 
	#O_WRONLY
 1

	)

66 
	#O_RDWR
 2

	)

67 
	#O_NDELAY
 0x04

	)

68 
	#O_APPEND
 0x08

	)

69 
	#O_SYNC
 0x10

	)

70 
	#O_DSYNC
 0x20

	)

71 
	#O_RSYNC
 0x40

	)

72 
	#O_NONBLOCK
 0x80

	)

73 
	#O_LARGEFILE
 0x2000

	)

74 
	#O_DIRECT
 0x8000

	)

75 
	#O_BULK
 0x10000

	)

76 
	#O_LCINVAL
 0x20000

	)

77 
	#O_LCFLUSH
 0x40000

	)

81 
	#O_CREAT
 0x100

	)

82 
	#O_TRUNC
 0x200

	)

83 
	#O_EXCL
 0x400

	)

84 
	#O_NOCTTY
 0x800

	)

87 
	#F_DUPFD
 0

	)

88 
	#F_GETFD
 1

	)

89 
	#F_SETFD
 2

	)

90 
	#F_GETFL
 3

	)

91 
	#F_SETFL
 4

	)

93 
	#F_SETLK
 6

	)

94 
	#F_SETLKW
 7

	)

95 
	#F_CHKFL
 8

	)

97 
	#F_CLOSEM
 9

	)

99 
	#F_ALLOCSP
 10

	)

100 
	#F_FREESP
 11

	)

101 
	#F_SETBSDLK
 12

	)

102 
	#F_SETBSDLKW
 13

	)

103 
	#F_GETLK
 14

	)

104 
	#F_CHKLK
 15

	)

105 
	#F_CHKLKW
 16

	)

106 
	#F_CLNLK
 17

	)

108 
	#F_RSETLK
 20

	)

109 
	#F_RGETLK
 21

	)

110 
	#F_RSETLKW
 22

	)

111 
	#F_GETOWN
 23

	)

112 
	#F_SETOWN
 24

	)

114 
	#F_DIOINFO
 30

	)

115 
	#F_FSGETXATTR
 31

	)

116 
	#F_FSSETXATTR
 32

	)

117 
	#F_GETLK64
 33

	)

118 
	#F_SETLK64
 34

	)

119 
	#F_SETLKW64
 35

	)

120 
	#F_ALLOCSP64
 36

	)

121 
	#F_FREESP64
 37

	)

122 
	#F_GETBMAP
 38

	)

123 
	#F_FSSETDM
 39

	)

124 
	#F_RESVSP
 40

	)

127 
	#F_UNRESVSP
 41

	)

128 
	#F_RESVSP64
 42

	)

129 
	#F_UNRESVSP64
 43

	)

130 
	#F_GETBMAPA
 44

	)

131 
	#F_FSGETXATTRA
 45

	)

132 
	#F_SETBIOSIZE
 46

	)

133 
	#F_GETBIOSIZE
 47

	)

135 
	#F_GETOPS
 50

	)

136 
	#F_DMAPI
 51

	)

137 
	#F_FSYNC
 52

	)

138 
	#F_FSYNC64
 53

	)

140 
	#F_GETBDSATTR
 54

	)

141 
	#F_SETBDSATTR
 55

	)

142 
	#F_GETBMAPX
 56

	)

143 
	#F_SETPRIO
 57

	)

144 
	#F_GETPRIO
 58

	)

146 
	#F_OPLKREG
 59

	)

147 
	#F_OPLKSTAT
 60

	)

148 
	#F_OPLKACK
 61

	)

150 #i‡!
deföed
(
LANGUAGE_C_PLUS_PLUS
Ë|| !deföed(
_BSD_COMPAT
)

154 
	sÊock
 {

155 
	ml_ty≥
;

156 
	ml_whí˚
;

157 
off_t
 
	ml_°¨t
;

158 
off_t
 
	ml_Àn
;

159 
	ml_sysid
;

160 
pid_t
 
	ml_pid
;

161 
	ml_∑d
[4];

162 } 
	tÊock_t
;

164 #ifde‡
_KERNEL


165 
	#l_nodeid
 
l_∑d
[0]

	)

168 #i‡
_LFAPI


172 
	sÊock64
 {

173 
	ml_ty≥
;

174 
	ml_whí˚
;

175 
off64_t
 
	ml_°¨t
;

176 
off64_t
 
	ml_Àn
;

177 
	ml_sysid
;

178 
pid_t
 
	ml_pid
;

179 
	ml_∑d
[4];

180 } 
	tÊock64_t
;

183 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

184 
	so_Êock
 {

185 
	ml_ty≥
;

186 
	ml_whí˚
;

187 
	ml_°¨t
;

188 
	ml_Àn
;

189 
	ml_sysid
;

190 
o_pid_t
 
	ml_pid
;

191 } 
	to_Êock_t
;

199 
	#F_RDLCK
 01

	)

200 
	#F_WRLCK
 02

	)

201 
	#F_UNLCK
 03

	)

207 
	#O_ACCMODE
 3

	)

208 
	#FD_CLOEXEC
 1

	)

210 #i‡
_SGIAPI


216 
	#FD_NODUP_FORK
 4

	)

218 
	sbiosize
 {

219 
__uöt32_t
 
	mbiosz_Êags
;

220 
__öt32_t
 
	mbiosz_ªad
;

221 
__öt32_t
 
	mbiosz_wrôe
;

222 
__öt32_t
 
	mdÊ_biosz_ªad
;

223 
__öt32_t
 
	mdÊ_biosz_wrôe
;

231 
	sdiﬂâr
 {

232 
	md_mem
;

233 
	md_möiosz
;

234 
	md_maxiosz
;

240 
	sfsx©å
 {

241 
__uöt32_t
 
	mfsx_xÊags
;

242 
__uöt32_t
 
	mfsx_extsize
;

243 
__uöt32_t
 
	mfsx_√xã¡s
;

244 
__uöt32_t
 
	mfsx_¥ojid
;

245 
	mfsx_∑d
[12];

255 
	sgëbm≠
 {

256 
__öt64_t
 
	mbmv_off£t
;

257 
__öt64_t
 
	mbmv_block
;

258 
__öt64_t
 
	mbmv_Àngth
;

259 
__öt32_t
 
	mbmv_cou¡
;

260 
__öt32_t
 
	mbmv_íåõs
;

271 
	sgëbm≠x
 {

272 
__öt64_t
 
	mbmv_off£t
;

273 
__öt64_t
 
	mbmv_block
;

274 
__öt64_t
 
	mbmv_Àngth
;

275 
__öt32_t
 
	mbmv_cou¡
;

276 
__öt32_t
 
	mbmv_íåõs
;

277 
__öt32_t
 
	mbmv_iÊags
;

278 
__öt32_t
 
	mbmv_oÊags
;

279 
__öt32_t
 
	mbmv_unu£d1
;

280 
__öt32_t
 
	mbmv_unu£d2
;

285 
	#BMV_IF_ATTRFORK
 0x1

	)

286 
	#BMV_IF_NO_DMAPI_READ
 0x2

	)

287 
	#BMV_IF_PREALLOC
 0x4

	)

289 
	#BMV_IF_VALID
 (
BMV_IF_ATTRFORK
|
BMV_IF_NO_DMAPI_READ
|
BMV_IF_PREALLOC
)

	)

293 
	#BMV_OF_PREALLOC
 0x1

	)

297 
	#GETBMAP_CONVERT
(
p1
,
p2
) { \

298 
p2
.
bmv_off£t
 = 
p1
.bmv_offset; \

299 
p2
.
bmv_block
 = 
p1
.bmv_block; \

300 
p2
.
bmv_Àngth
 = 
p1
.bmv_length; \

301 
p2
.
bmv_cou¡
 = 
p1
.bmv_count; \

302 
p2
.
bmv_íåõs
 = 
p1
.bmv_íåõs; }

	)

304 #ifdef 
_KERNEL


307 
	#BMV_IF_EXTENDED
 0x40000000

	)

308 
	#BMV_IF_KERNEL
 0x20000000

	)

319 
	sfsdmid©a
 {

320 
__öt32_t
 
	mfsd_dmevmask
;

321 
	mfsd_∑ddög
;

322 
	mfsd_dm°©e
;

330 
	s›lock_°©
 {

331 
__öt32_t
 
	mos_°©e
;

332 
__uöt32_t
 
	mos_dev
;

333 
__uöt64_t
 
	mos_öo
;

334 } 
	t›lock_°©_t
;

336 
	#OP_NONE
 0

	)

337 
	#OP_REVOKE
 1

	)

338 
	#OP_LEVELII
 2

	)

339 
	#OP_BREAKDOWN
 3

	)

340 
	#OP_EXCLUSIVE
 4

	)

	@/usr/include/sys/file.h

10 #i‚de‡
_FS_FILE_H


11 
	#_FS_FILE_H


	)

13 #ifde‡
__˝lu•lus


20 
	~<°™d¨ds.h
>

21 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

22 
	~<sys/ty≥s.h
>

23 
	~<sys/£ma.h
>

26 #i‚de‡
_KERNEL


27 
	~<sys/f˙é.h
>

31 
	#FMASK
 0x790FF

	)

33 
	#FOPEN
 0xFFFFFFFF

	)

34 
	#FREAD
 0x01

	)

35 
	#FWRITE
 0x02

	)

37 #i‚def 
_F_FLAGS


38 
	#_F_FLAGS


	)

39 
	#FNDELAY
 0x04

	)

40 
	#FAPPEND
 0x08

	)

41 
	#FSYNC
 0x10

	)

42 
	#FDSYNC
 0x20

	)

43 
	#FRSYNC
 0x40

	)

44 
	#FNONBLOCK
 0x80

	)

45 
	#FASYNC
 0x1000

	)

46 #i‡
_SGIAPI


47 
	#FNONBLK
 
FNONBLOCK


	)

51 
	#FLARGEFILE
 0x2000

	)

52 
	#FDIRECT
 0x8000

	)

53 
	#FBULK
 0x10000

	)

54 
	#FLCINVAL
 0x20000

	)

55 
	#FLCFLUSH
 0x40000

	)

59 
	#FCREAT
 0x0100

	)

60 
	#FTRUNC
 0x0200

	)

61 
	#FEXCL
 0x0400

	)

62 
	#FNOCTTY
 0x0800

	)

65 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

68 
	#FINVIS
 0x0100

	)

69 
	#FSOCKET
 0x0200

	)

70 
	#FINPROGRESS
 0x0400

	)

71 
	#FPRIORITY
 0x0800

	)

72 
	#FPRIO
 0x4000

	)

73 
	#FDEVPOLL
 0x80000

	)

78 
	#FDIRENT64
 0x8000

	)

81 
	#FNFSREADDIR
 0x100000

	)

82 
	#FNFSREADDIR_REPLY
 0x200000

	)

86 
	#FCLOSEXEC
 0x01

	)

88 #i‚de‡
_KERNEL


94 
	#LOCK_SH
 1

	)

95 
	#LOCK_EX
 2

	)

96 
	#LOCK_NB
 4

	)

97 
	#LOCK_UN
 8

	)

99 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
_BSD_COMPAT
)

104 
Êock
(, );

110 #i‚de‡
L_SET


111 
	#L_SET
 0

	)

113 #i‚de‡
L_INCR


114 
	#L_INCR
 1

	)

116 #i‚de‡
L_XTND


117 
	#L_XTND
 2

	)

125 #i‚de‡
F_OK


126 
	#F_OK
 0

	)

127 
	#X_OK
 1

	)

128 
	#W_OK
 2

	)

129 
	#R_OK
 4

	)

132 #ifde‡
__˝lu•lus


	@/usr/include/sys/fstyp.h

13 #i‚de‡
_FS_FSTYP_H


14 
	#_FS_FSTYP_H


	)

16 #ifde‡
__˝lu•lus


20 
	#FSTYPSZ
 16

	)

25 
	#GETFSIND
 1

	)

26 
	#GETFSTYP
 2

	)

27 
	#GETNFSTYP
 3

	)

29 #i‚de‡
_KERNEL


30 
sysfs
(, ...);

33 #ifde‡
__˝lu•lus


	@/usr/include/sys/graph.h

12 #i‚de‡
_GRAPH_H


13 
	#_GRAPH_H


	)

17 #i‡
_KERNEL
 || 
_USER_MODE_TEST


23 
	#LABEL_LENGTH_MAX
 256

	)

28 
	t¨bôøry_öfo_t
;

29 
gøph_s
 *
	tgøph_hdl_t
;

30 
	tgøph_edge_∂a˚_t
;

31 
	tgøph_öfo_∂a˚_t
;

32 
	tgøph_vîãx_∂a˚_t
;

37 
	egøph_îr‹_e
 { 
	mGRAPH_SUCCESS
,

38 
	mGRAPH_DUP
,

39 
	mGRAPH_NOT_FOUND
,

40 
	mGRAPH_BAD_PARAM
,

41 
	mGRAPH_HIT_LIMIT
,

42 
	mGRAPH_CANNOT_ALLOC
,

43 
	mGRAPH_ILLEGAL_REQUEST
,

44 
	mGRAPH_IN_USE


45 } 
	tgøph_îr‹_t
;

47 
	sgøph_©å
 {

49 *
	mga_«me
;

51 
	mga_£∑øt‹
;

53 
	mga_num_ödex
;

55 
	mga_ª£rved_∂a˚s
;

61 
	mga_gíî©i⁄
;

64 
	mga_num_vîãx
;

67 
	mga_num_vîãx_max
;

74 
	mga_num_buckës
;

75 } 
	tgøph_©å_t
;

77 
	#GRAPH_VERTEX_NONE
 ((
vîãx_hdl_t
)-1)

	)

78 
	#GRAPH_EDGE_PLACE_NONE
 ((
gøph_edge_∂a˚_t
)0)

	)

79 
	#GRAPH_INFO_PLACE_NONE
 ((
gøph_öfo_∂a˚_t
)0)

	)

80 
	#GRAPH_VERTEX_PLACE_NONE
 ((
gøph_vîãx_∂a˚_t
)0)

	)

83 
gøph_îr‹_t
 
gøph_¸óã
(
gøph_©å_t
 *, 
gøph_hdl_t
 *, );

84 
gøph_îr‹_t
 
gøph_de°roy
(
gøph_hdl_t
);

85 
gøph_îr‹_t
 
gøph_summ¨y_gë
(
gøph_hdl_t
, 
gøph_©å_t
 *);

86 
gøph_îr‹_t
 
gøph_vîãx_visô
(
gøph_hdl_t
, (*)(*, 
vîãx_hdl_t
), *, *, vertex_hdl_t *);

89 
gøph_îr‹_t
 
	`gøph_vîãx_¸óã
(
gøph_hdl_t
, 
vîãx_hdl_t
 *);

90 
gøph_îr‹_t
 
	`gøph_vîãx_de°roy
(
gøph_hdl_t
, 
vîãx_hdl_t
);

91 #i‡
NOTDEF


92 
gøph_îr‹_t
 
	`gøph_vîãx_comböe
(
gøph_hdl_t
, 
vîãx_hdl_t
, vertex_hdl_t);

94 
gøph_îr‹_t
 
	`gøph_vîãx_˛⁄e
(
gøph_hdl_t
, 
vîãx_hdl_t
, vertex_hdl_t *);

95 
gøph_îr‹_t
 
	`gøph_vîãx_gë_√xt
(
gøph_hdl_t
, 
vîãx_hdl_t
 *, 
gøph_vîãx_∂a˚_t
 *);

96 
	`gøph_vîãx_ªf˙t
(
gøph_hdl_t
, 
vîãx_hdl_t
);

97 
gøph_îr‹_t
 
	`gøph_vîãx_ªf
(
gøph_hdl_t
, 
vîãx_hdl_t
);

98 
gøph_îr‹_t
 
	`gøph_vîãx_uƒef
(
gøph_hdl_t
, 
vîãx_hdl_t
);

101 
gøph_îr‹_t
 
	`gøph_edge_add
(
gøph_hdl_t
, 
vîãx_hdl_t
, vertex_hdl_t, *);

102 
gøph_îr‹_t
 
	`gøph_edge_ªmove
(
gøph_hdl_t
, 
vîãx_hdl_t
, *, vertex_hdl_t *);

103 
gøph_îr‹_t
 
	`gøph_edge_gë
(
gøph_hdl_t
, 
vîãx_hdl_t
, *, vertex_hdl_t *);

104 
gøph_îr‹_t
 
	`gøph_edge_gë_√xt
(
gøph_hdl_t
, 
vîãx_hdl_t
, *, vîãx_hdl_à*, 
gøph_edge_∂a˚_t
 *);

107 
uöçå_t
 
	t¨b_öfo_desc_t
;

108 
gøph_îr‹_t
 
	`gøph_öfo_add_LBL
(
gøph_hdl_t
, 
vîãx_hdl_t
, *, 
¨b_öfo_desc_t
, 
¨bôøry_öfo_t
);

110 
gøph_îr‹_t
 
	`gøph_öfo_ªmove_LBL
(
gøph_hdl_t
, 
vîãx_hdl_t
, *, 
¨b_öfo_desc_t
 *, 
¨bôøry_öfo_t
 *);

112 
gøph_îr‹_t
 
	`gøph_öfo_ª∂a˚_LBL
(
gøph_hdl_t
, 
vîãx_hdl_t
, *,

113 
¨b_öfo_desc_t
, 
¨bôøry_öfo_t
,árb_info_desc_t *,árbitrary_info_t *);

115 
gøph_îr‹_t
 
	`gøph_öfo_gë_LBL
(
gøph_hdl_t
, 
vîãx_hdl_t
, *, 
¨b_öfo_desc_t
 *, 
¨bôøry_öfo_t
 *);

117 
gøph_îr‹_t
 
	`gøph_öfo_gë_√xt_LBL
(
gøph_hdl_t
, 
vîãx_hdl_t
, *,

118 
¨b_öfo_desc_t
 *, 
¨bôøry_öfo_t
 *, 
gøph_öfo_∂a˚_t
 *);

121 
gøph_îr‹_t
 
	`gøph_öfo_ª∂a˚_IDX
(
gøph_hdl_t
, 
vîãx_hdl_t
, , 
¨bôøry_öfo_t
,árbitrary_info_t *);

122 
gøph_îr‹_t
 
	`gøph_öfo_gë_IDX
(
gøph_hdl_t
, 
vîãx_hdl_t
, , 
¨bôøry_öfo_t
 *);

125 
gøph_îr‹_t
 
	`gøph_∑th_gë_comp⁄ít
(
gøph_hdl_t
, *, *, *, *);

	@/usr/include/sys/ioccom.h

10 #i‚de‡
_FS_IOCCOM_H


11 
	#_FS_IOCCOM_H


	)

44 
	#IOCPARM_MASK
 0xf‡

	)

45 
	#IOC_VOID
 0x20000000

	)

46 
	#IOC_OUT
 0x40000000

	)

47 
	#IOC_IN
 0x80000000

	)

48 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

50 
	#_IOC
(
f
,
n
,
x
,
y
Ë(()((f)|((“)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y)))

	)

51 
	#_IO
(
x
,
y
Ë
	`_IOC
(
IOC_VOID
, 0, x, y)

	)

52 
	#_IOR
(
x
,
y
,
t
Ë
	`_IOC
(
IOC_OUT
, —), x, y)

	)

53 
	#_IORN
(
x
,
y
,
n
Ë
	`_IOC
(
IOC_OUT
,Ç, x, y)

	)

54 
	#_IOW
(
x
,
y
,
t
Ë
	`_IOC
(
IOC_IN
, —), x, y)

	)

55 
	#_IOWN
(
x
,
y
,
n
Ë
	`_IOC
(
IOC_IN
,Ç, x, y)

	)

57 
	#_IOWR
(
x
,
y
,
t
Ë
	`_IOC
(
IOC_INOUT
, —), x, y)

	)

	@/usr/include/sys/ioerror.h

1 #i‚def 
_SYS_IOERROR_H


2 
	#_SYS_IOERROR_H


	)

33 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

57 
	#IOECODE_UNSPEC
 0

	)

58 
	#IOECODE_READ
 1

	)

59 
	#IOECODE_WRITE
 2

	)

60 
	#IOECODE_PIO
 4

	)

61 
	#IOECODE_DMA
 8

	)

63 
	#IOECODE_PIO_READ
 (
IOECODE_PIO
|
IOECODE_READ
)

	)

64 
	#IOECODE_PIO_WRITE
 (
IOECODE_PIO
|
IOECODE_WRITE
)

	)

65 
	#IOECODE_DMA_READ
 (
IOECODE_DMA
|
IOECODE_READ
)

	)

66 
	#IOECODE_DMA_WRITE
 (
IOECODE_DMA
|
IOECODE_WRITE
)

	)

72 
	#PIO_READ_ERROR
 
IOECODE_PIO_READ


	)

73 
	#PIO_WRITE_ERROR
 
IOECODE_PIO_WRITE


	)

74 
	#DMA_READ_ERROR
 
IOECODE_DMA_READ


	)

75 
	#DMA_WRITE_ERROR
 
IOECODE_DMA_WRITE


	)

81 
	#IOERROR_HANDLED
 0

	)

82 
	#IOERROR_NODEV
 0x1

	)

83 
	#IOERROR_BADHANDLE
 0x2

	)

84 
	#IOERROR_BADWIDGETNUM
 0x3

	)

85 
	#IOERROR_BADERRORCODE
 0x4

	)

86 
	#IOERROR_INVALIDADDR
 0x5

	)

88 
	#IOERROR_WIDGETLEVEL
 0x6

	)

89 
	#IOERROR_XTALKLEVEL
 0x7

	)

91 
	#IOERROR_HWGRAPH_LOOKUP
 0x8

	)

92 
	#IOERROR_UNHANDLED
 0x9

	)

94 
	#IOERROR_PANIC
 0xA

	)

104 
	#IOERROR_DEV_NOTFOUND
 0x10

	)

105 
	#IOERROR_DEV_SHUTDOWN
 0x11

	)

111 
	#IOERROR_ADDR_PIO
 1

	)

112 
	#IOERROR_ADDR_DMA
 2

	)

141 
	sio_îr‹_s
 {

145 
	mõvb_îr‹ty≥
:1;

146 
	mõvb_widgënum
:1;

147 
	mõvb_widgëdev
:1;

148 
	mõvb_§c˝u
:1;

149 
	mõvb_§˙ode
:1;

150 
	mõvb_î∫ode
:1;

151 
	mõvb_sysiﬂddr
:1;

152 
	mõvb_xèlkaddr
:1;

153 
	mõvb_bus•a˚
:1;

154 
	mõvb_bußddr
:1;

155 
	mõvb_vaddr
:1;

156 
	mõvb_memaddr
:1;

157 
	mõvb_ïc
:1;

158 
	mõvb_ef
:1;

159 
	mõvb_äum
:1;

160 } 
	mõv_b
;

161 
	mõv_a
;

162 } 
	mõ_v
;

164 
	mõ_îr‹ty≥
;

165 
	mõ_widgënum
;

166 
	mõ_widgëdev
;

167 
˝uid_t
 
	mõ_§c˝u
;

168 
˙odeid_t
 
	mõ_§˙ode
;

169 
˙odeid_t
 
	mõ_î∫ode
;

170 
i›addr_t
 
	mõ_sysiﬂddr
;

171 
i›addr_t
 
	mõ_xèlkaddr
;

172 
i›addr_t
 
	mõ_bus•a˚
;

173 
i›addr_t
 
	mõ_bußddr
;

174 
ˇddr_t
 
	mõ_vaddr
;

175 
∑ddr_t
 
	mõ_memaddr
;

176 
ˇddr_t
 
	mõ_ïc
;

177 
ˇddr_t
 
	mõ_ef
;

178 
	mõ_äum
;

180 } 
	ti€º‹_t
;

182 
	#IOERROR_INIT
(
e
Ëdÿ{ (e)->
õ_v
.
õv_a
 = 0; } 0)

	)

183 
	#IOERROR_SETVALUE
(
e
,
f
,
v
Ëdÿ{ (e)->
õ_
 ## f = (v); (e)->
õ_v
.
õv_b
.
õvb_
 ## f = 1; } 0)

	)

184 
	#IOERROR_FIELDVALID
(
e
,
f
Ë((”)->
õ_v
.
õv_b
.
õvb_
 ## fË!0)

	)

185 
	#IOERROR_GETVALUE
(
e
,
f
Ë(
	`ASSERT
(
	`IOERROR_FIELDVALID
”,f)),(”)->
õ_
 ## f))

	)

187 #if 
IP27
 || 
IP35


189 
	#õ_hubaddr
 
õ_sysiﬂddr


	)

190 
	#õvb_hubaddr
 
õvb_sysiﬂddr


	)

197 
	mMODE_DEVPROBE
,

198 
	mMODE_DEVERROR
,

199 
	mMODE_DEVUSERERROR
,

200 
	mMODE_DEVREENABLE


201 } 
	ti€º‹_mode_t
;

205 
	tîr‹_h™dÀr_f
(*, , 
	ti€º‹_mode_t
, 
	ti€º‹_t
 *);

206 *
	tîr‹_h™dÀr_¨g_t
;

208 
i€º‹_dump
(*, , , 
i€º‹_t
 *);

210 #ifdef 
ERROR_DEBUG


211 
	#IOERROR_DUMP
(
x
, 
y
, 
z
, 
t
Ë
	`i€º‹_dump
((x), (y), (z), (t))

	)

212 
	#IOERR_PRINTF
(
x
Ë(x)

	)

214 
	#IOERROR_DUMP
(
x
, 
y
, 
z
, 
t
)

	)

215 
	#IOERR_PRINTF
(
x
)

	)

	@/usr/include/sys/ktime.h

12 #i‚de‡
_SYS_KTIME_H


13 
	#_SYS_KTIME_H


	)

15 #ifde‡
__˝lu•lus


19 
	~"sys/time.h
"

20 
	~"sys/£ma.h
"

21 
	~"sys/ˇ∑bûôy.h
"

22 
	~<sys/xœã.h
>

39 
	súix5_ôimîvÆ
 {

40 
úix5_timevÆ
 
ô_öãrvÆ
;

41 
úix5_timevÆ
 
ô_vÆue
;

45 
	#timevÆ_to_úix5
(
t
,
i5
) \

46 (
i5
)->
tv_£c
 = (
≠p32_l⁄g_t
)(
t
)->tv_sec; \

47 (
i5
)->
tv_u£c
 = (
≠p32_l⁄g_t
)(
t
)->tv_u£c;

	)

49 
	#úix5_to_timevÆ
(
t
,
i5
) \

50 (
t
)->
tv_£c
 = (
i5
)->tv_sec; \

51 (
t
)->
tv_u£c
 = (
i5
)->tv_u£c;

	)

52 
	#TIMESPEC_TO_IRIX5
(
t
,
i5
) \

53 (
i5
)->
tv_£c
 = (
t
)->tv_sec; \

54 (
i5
)->
tv_n£c
 = (
t
)->tv_n£c;

	)

56 
	#IRIX5_TO_TIMESPEC
(
i5
,
t
) \

57 (
t
)->
tv_£c
 = (
i5
)->tv_sec; \

58 (
t
)->
tv_n£c
 = (
i5
)->tv_n£c;

	)

60 
≠p32_l⁄g_t
 
	túix5_time_t
;

61 
≠p64_öt_t
 
	túix5_64_time_t
;

63 
	súix5_time•ec
 {

64 
úix5_time_t
 
tv_£c
;

65 
≠p32_l⁄g_t
 
tv_n£c
;

66 } 
	túix5_time•ec_t
;

68 
	súix5_64_time•ec
 {

69 
≠p64_öt_t
 
tv_£c
;

70 
≠p64_l⁄g_t
 
tv_n£c
;

71 } 
	túix5_64_time•ec_t
;

73 
	#USEC_PER_SEC
 1000000L

	)

74 
	#NSEC_PER_SEC
 1000000000L

	)

75 
	#USEC_PER_TICK
 (
USEC_PER_SEC
/
HZ
)

	)

76 
	#NSEC_PER_TICK
 (
NSEC_PER_SEC
/
HZ
)

	)

77 
	#NSEC_PER_USEC
 1000L

	)

79 #ifde‡
_KERNEL


81 
	#have_Á°¥iv
(
µ
Ë(
	`KT_ISBASERT
(
	`UT_TO_KT
’p->
p_¥oxy
.
¥xy_thªads
)) && \

82 !
	`KT_ISNBASEPRMPT
(
	`UT_TO_KT
(
µ
->
p_¥oxy
.
¥xy_thªads
)))

	)

84 
	#kt_has_Á°¥iv
(
kt
Ë(
	`KT_ISBASERT
(ktË&& !
	`KT_ISNBASEPRMPT
(kt))

	)

90 
	#√ed_Á°imî
(
tvp
, 
µ
Ë(
	`have_Á°¥iv
’p))

	)

91 
	#kt_√eds_Á°imî
(
tvp
, 
kt
Ë(
	`kt_has_Á°¥iv
(kt))

	)

93 
	#ˇ∑bÀ_of_Á°imî
(
kt
Ë(
	`kt_has_Á°¥iv
(ktË|| 
	`ˇp_abÀ
(
CAP_TIME_MGT
))

	)

99 
	#RNDTIMVAL
(
t
) \

101 
timevÆ
 *
ç
 = (
t
); \

102 
round
; \

103 if–
ç
->
tv_u£c
 >
USEC_PER_SEC
 ) \

105 
round
 = 
ç
->
tv_u£c
 / 
USEC_PER_SEC
; \

106 
ç
->
tv_u£c
 =ç->tv_u£¯- 
round
 * 
USEC_PER_SEC
; \

107 
ç
->
tv_£c
 +
round
; \

109 }

	)

111 
	#RND_TIMESPEC_VAL
(
t
) \

113 
time•ec_t
 *
ç
 = (
t
); \

114 
round
; \

115 if(
ç
->
tv_n£c
 >
NSEC_PER_SEC
){ \

116 
round
 = 
ç
->
tv_n£c
 / 
NSEC_PER_SEC
; \

117 
ç
->
tv_£c
 +
round
; \

118 
ç
->
tv_n£c
 =Åp->tv_n£¯- 
round
* 
NSEC_PER_SEC
; \

120 }

	)

125 
	#TIMESPEC_TO_TIMEVAL
(
ts
, 
tv
) \

127 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

128 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
/1000; \

129 }

	)

130 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) \

132 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

133 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
*1000; \

134 }

	)

136 
¥oc
;

137 
e‰ame_s
;

138 
rußge
;

140 
time•ec
;

141 
timevÆ
;

142 
ôimîvÆ
;

143 
ˇŒout
;

144 
uthªad_s
;

145 
ˇŒout_öfo
;

147 
Á°ick
;

148 
time_t
 
œ°adjtime
;

149 
time_t
 
œ°adjtod
;

150 
	#DIDADJTIME
 (3600*
HZ
Ë

	)

152 
ªÆôexpúe
(
¥oc
 *);

153 
dﬂdjtime
();

154 
«nŸime
(
time•ec
 *);

155 
«nŸime_sysˇŒ
(
time•ec
 *);

156 
mi¸Ÿime
(
timevÆ
 *);

157 
úix5_mi¸Ÿime
(
úix5_timevÆ
 *);

158 
tick_to_timevÆ
(, 
timevÆ
 *, );

159 
tick_to_time•ec
(
öt64_t
, 
time•ec
 *, );

160 
time_t
 
Á°hzto
(
timevÆ
 *);

161 
time_t
 
hzto
(
timevÆ
 *);

162 
__öt64_t
 
time•ec_to_tick
(
time•ec
 *, );

163 
timevÆfix
(
timevÆ
 *);

164 
timevÆsub
(
timevÆ
 *, timeval *);

165 
timevÆadd
(
timevÆ
 *, timeval *);

166 
ôimîfix
(
timevÆ
 *);

167 
ôimîde¸emít
(, 
time•ec_t
 *,Åimespec_t *);

168 
ôimîde¸
(
ôimîvÆ
 *, );

169 
time•ec_add
(
time•ec
 *, timespec *);

170 
time•ec_sub
(
time•ec
 *, timespec *);

172 
__psöt_t
 
quîy_cy˛e˙å
(
uöt
 *);

173 
quîy_cy˛e˙å_size
();

174 
quîy_Á°timî
();

175 
__öt64_t
 
chktimeout_tick
(, 
toid_t
, (*)(), *);

176 
__öt64_t
 
do_chktimeout_tick
(
ˇŒout_öfo
 *, 
toid_t
 , (*)(), *);

177 
chktimedri·
();

178 
ackπ˛ock
();

179 
ackkg˛ock
();

180 
bump_Àds
();

181 
lo˛kok
(
e‰ame_s
 *);

182 
£t_timî_öå
(
¥o˚ss‹id_t
, 
__öt64_t
, );

183 
£âime
(, );

184 
loˇl_£âime
(, );

185 
íabÀ_Á°˛ock
();

186 
do£tôimî
(, 
ôimîvÆ
 *, itimerval *,

187 
uthªad_s
 *);

188 
£tôimî_vÆue
(, 
timevÆ
 *, timeval *);

190 
time_t
 
gë_ªÆtime_ticks
();

191 
ˇŒout_time_to_hz
(
__öt64_t
, , );

192 
£âimërim
();

193 
gëtimërim
();

194 
__öt64_t
 
tvto˛ock
(
timevÆ
 *
tv
, );

195 
__öt64_t
 
t°o˛ock
(
time•ec
 *, );

196 
dñëe_±imîs
();

197 
«no_dñay
(
time•ec
 *);

199 
	#TIME_REL
 0

	)

200 
	#TIME_ABS
 1

	)

202 
°¨çrf˛k
();

203 
°›¥f˛k
();

208 
u°_vÆ
;

210 
u°_‰eq
;

211 
upd©e_u°
();

212 
upd©e_u°_i
();

213 
gë_u°_«no
(*);

214 
gë_u°
(*);

215 
u°_to_«no
(, *);

217 
£tkgve˘‹
((*)());

219 #i‡
_MIPS_SIM
 =
_ABI64


220 
úix5_to_timevÆ_xœã
(
xœã_mode
, *,

221 , 
xœã_öfo_s
 *);

222 
timevÆ_to_úix5_xœã
(*, , 
xœã_öfo_s
 *);

230 
Á°ick_ˇŒback_ªquúed_Êags
;

232 
	#FASTICK_CALLBACK_REQUIRED_PRF_MASK
 0x00000001

	)

233 
	#FASTICK_CALLBACK_REQUIRED_KDSP_MASK
 0x00000002

	)

234 
	#FASTICK_CALLBACK_REQUIRED_ISDNAUDIO_MASK
 0x00000004

	)

235 
	#FASTICK_CALLBACK_REQUIRED_MIDI_MASK
 0x00000008

	)

236 
	#FASTICK_CALLBACK_REQUIRED_TSERIALIO_MASK
 0x00000010

	)

240 #ifde‡
__˝lu•lus


	@/usr/include/sys/mips_addrspace.h

2 #i‚de‡
__SYS_MIPS_ADDRSPACE_H


3 
	#__SYS_MIPS_ADDRSPACE_H


	)

20 #i‡
_MIPS_SIM
 =
_ABI64


22 
	#KUBASE
 0

	)

23 
	#KUSIZE_32
 0x0000000080000000

	)

25 #i‡
deföed
(
_RUN_UNCACHED
)

26 
	#K0BASE
 0x9600000000000000

	)

27 
	#CACHEOP_K0BASE
 0xa800000000000000

	)

29 
	#K0BASE
 0xa800000000000000

	)

30 
	#CACHEOP_K0BASE
 
K0BASE


	)

33 
	#K0BASE_EXL_WR
 
K0BASE


	)

34 
	#K0BASE_NONCOH
 0x9800000000000000

	)

35 
	#K0BASE_EXL
 0xa000000000000000

	)

37 #ifde‡
SN


38 
	#K1BASE
 0x9600000000000000

	)

40 
	#K1BASE
 0x9000000000000000

	)

42 
	#K2BASE
 0xc000000000000000

	)

44 #i‡
R4000


45 
	#KUSIZE
 0x0000010000000000

	)

46 
	#KUSIZE_64
 0x0000010000000000

	)

47 
	#K0SIZE
 0x0000001000000000

	)

48 
	#K1SIZE
 0x0000001000000000

	)

49 
	#K2SIZE
 0x000000ff80000000

	)

50 
	#KSEGSIZE
 0x000000ff80000000

	)

51 
	#TO_PHYS_MASK
 0x0000000ffffffff‡

	)

52 #ñi‡
TFP


54 
	#KUSIZE
 0x0000010000000000

	)

55 
	#KUSIZE_64
 0x0000010000000000

	)

56 
	#K0SIZE
 0x0000010000000000

	)

57 
	#K1SIZE
 0x0000010000000000

	)

58 
	#K2SIZE
 0x0001000000000000

	)

59 
	#KSEGSIZE
 0x0000010000000000

	)

60 
	#TO_PHYS_MASK
 0x000000fffffffff‡

	)

61 #ñi‡
R10000


62 #i‡
deföed
(
SN0XXL
Ë|| deföed(
SN1
)

63 
	#KUSIZE
 0x0000100000000000

	)

64 
	#KUSIZE_64
 0x0000100000000000

	)

66 
	#KUSIZE
 0x0000010000000000

	)

67 
	#KUSIZE_64
 0x0000010000000000

	)

69 
	#K0SIZE
 0x0000010000000000

	)

70 
	#K1SIZE
 0x0000010000000000

	)

71 
	#K2SIZE
 0x00000fff80000000

	)

72 
	#KSEGSIZE
 0x00000fff80000000

	)

73 
	#TO_PHYS_MASK
 0x000000fffffffff‡

	)

74 #ñi‡
BEAST


80 
	#KUSIZE
 0x0000010000000000

	)

81 
	#KUSIZE_64
 0x0000010000000000

	)

82 
	#K0SIZE
 0x0000100000000000

	)

83 
	#K1SIZE
 0x0000100000000000

	)

84 
	#K2SIZE
 0x00000fff80000000

	)

85 
	#KSEGSIZE
 0x00000fff80000000

	)

86 
	#TO_PHYS_MASK
 0x00000ffffffffff‡

	)

89 
	#KREGION_MASK
 0xc000000000000000

	)

90 
	#COMPAT_K0BASE
 0xffffffff80000000

	)

91 
	#COMPAT_K1BASE
 0xfffffffÁ0000000

	)

92 
	#COMPAT_KSIZE
 0x20000000

	)

93 
	#TO_COMPAT_PHYS_MASK
 0x1fffffff

	)

95 #i‚de‡
TFP


96 
	#COMPAT_K0BASE32
 0xffffffff80000000

	)

97 
	#COMPAT_K1BASE32
 0xfffffffÁ0000000

	)

101 
	#KUBASE
 0

	)

102 
	#KUSIZE
 0x80000000

	)

103 
	#KUSIZE_32
 0x80000000

	)

104 
	#KUSIZE_64
 0x80000000

	)

105 
	#K0BASE
 0x80000000

	)

106 
	#K0SIZE
 0x20000000

	)

107 
	#K1BASE
 0xA0000000

	)

108 
	#K1SIZE
 0x20000000

	)

109 
	#K2BASE
 0xC0000000

	)

110 #i‡
EVEREST


111 
	#KSEGSIZE
 0x18000000

	)

113 
	#KSEGSIZE
 0x10000000

	)

115 
	#K2SIZE
 0x20000000

	)

116 
	#TO_K0_MASK
 0x9fffffff

	)

117 
	#TO_PHYS_MASK
 0x1fffffff

	)

118 
	#COMPAT_K0BASE
 
K0BASE


	)

119 
	#COMPAT_K1BASE
 
K1BASE


	)

122 #i‡
_MIPS_SIM
 =
_ABIN32


123 
	#SEXT_K0BASE
 
	`_S_EXT_
(
K0BASE
)

	)

124 
	#SEXT_K1BASE
 
	`_S_EXT_
(
K1BASE
)

	)

126 
	#SEXT_K0BASE
 
K0BASE


	)

127 
	#SEXT_K1BASE
 
K1BASE


	)

142 #i‡
_MIPS_SIM
 !
_ABI64


144 #ifde‡
_LANGUAGE_ASSEMBLY


145 
	#K0_TO_K1
(
x
Ë((xË| 
K1BASE
Ë

	)

146 
	#K1_TO_K0
(
x
Ë((xË& 
TO_K0_MASK
Ë

	)

147 
	#K0_TO_PHYS
(
x
Ë((xË& 
TO_PHYS_MASK
Ë

	)

148 
	#K1_TO_PHYS
(
x
Ë((xË& 
TO_PHYS_MASK
Ë

	)

149 
	#KDM_TO_PHYS
(
x
Ë((xË& 
TO_PHYS_MASK
Ë

	)

150 
	#PHYS_TO_K0
(
x
Ë((xË| 
K0BASE
Ë

	)

151 #i‡!
deföed
(
EVEREST
Ë|| deföed(
_STANDALONE
)

152 
	#PHYS_TO_K1
(
x
Ë((xË| 
K1BASE
Ë

	)

156 #i‡(
deföed
(
EVEREST
Ë|| deföed(
SN
)Ë&& !deföed(
_STANDALONE
)

166 
	#K0_TO_K1
(
x
Ë((
__psunsig√d_t
)(xË| 
K0BASE
)

	)

167 
	#PHYS_TO_K1
(
x
Ë((
__psunsig√d_t
)(xË| 
K0BASE
)

	)

169 
	#K0_TO_K1
(
x
Ë((
__psunsig√d_t
)(xË| 
K1BASE
Ë

	)

170 
	#PHYS_TO_K1
(
x
Ë((
__psunsig√d_t
)(xË| 
K1BASE
Ë

	)

173 
	#K1_TO_K0
(
x
Ë((
__psunsig√d_t
)(xË& 
TO_K0_MASK
)

	)

175 
	#K0_TO_PHYS
(
x
Ë((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
)

	)

177 
	#K1_TO_PHYS
(
x
Ë((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
)

	)

179 
	#KDM_TO_PHYS
(
x
Ë((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
)

	)

181 
	#PHYS_TO_K0
(
x
Ë((
__psunsig√d_t
)(xË| 
K0BASE
)

	)

184 
	#PHYS_TO_COMPATK0
(
x
Ë
	`PHYS_TO_K0
(xË

	)

185 
	#PHYS_TO_COMPATK1
(
x
Ë
	`PHYS_TO_K1
(xË

	)

187 #ñi‡
_MIPS_SIM
 =
_ABI64


189 #ifde‡
_LANGUAGE_ASSEMBLY


190 
	#K0_TO_K1
(
x
Ë(((xË& 
TO_PHYS_MASK
Ë| 
K1BASE
Ë

	)

191 
	#K1_TO_K0
(
x
Ë(((xË& 
TO_PHYS_MASK
Ë| 
K0BASE
Ë

	)

192 
	#K0_TO_PHYS
(
x
Ë((xË& 
TO_PHYS_MASK
Ë

	)

193 
	#K1_TO_PHYS
(
x
Ë((xË& 
TO_PHYS_MASK
Ë

	)

194 
	#KDM_TO_PHYS
(
x
Ë((xË& 
TO_PHYS_MASK
Ë

	)

196 
	#PHYS_TO_K0
(
x
Ë((xË| 
K0BASE
Ë

	)

197 
	#PHYS_TO_K1
(
x
Ë((xË| 
K1BASE
Ë

	)

199 #ifde‡
COMPAT_K0BASE32


200 
	#PHYS_TO_COMPATK0
(
x
Ë((xË| 
COMPAT_K0BASE32
Ë

	)

201 
	#PHYS_TO_COMPATK1
(
x
Ë((xË| 
COMPAT_K1BASE32
Ë

	)

206 
	#K0_TO_K1
(
x
Ë(((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
Ë| 
K1BASE
)

	)

208 
	#K1_TO_K0
(
x
Ë(((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
Ë| 
K0BASE
)

	)

210 
	#K0_TO_PHYS
(
x
Ë((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
)

	)

212 
	#K1_TO_PHYS
(
x
Ë((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
)

	)

214 
	#KDM_TO_PHYS
(
x
Ë((
__psunsig√d_t
)(xË& 
TO_PHYS_MASK
)

	)

216 
	#PHYS_TO_K0
(
x
Ë((
__psunsig√d_t
)(xË| 
K0BASE
)

	)

218 
	#PHYS_TO_K1
(
x
Ë((
__psunsig√d_t
)(xË| 
K1BASE
)

	)

220 #ifde‡
COMPAT_K0BASE32


221 
	#PHYS_TO_COMPATK0
(
x
) \

222 ((
__psöt_t
)(
__öt32_t
)((
__uöt32_t
)(
x
)|
COMPAT_K0BASE32
))

	)

223 
	#PHYS_TO_COMPATK1
(
x
) \

224 ((
__psöt_t
)(
__öt32_t
)((
__uöt32_t
)(
x
)|
COMPAT_K1BASE32
))

	)

232 #i‚de‡
COMPAT_K0BASE32


233 
	#PHYS_TO_COMPATK0
(
x
Ë
	`PHYS_TO_K0
(x)

	)

234 
	#PHYS_TO_COMPATK1
(
x
Ë
	`PHYS_TO_K1
(x)

	)

249 #ifde‡
_LANGUAGE_C


250 #i‡
_MIPS_SIM
 =
_ABIN32


251 
	#PTR_EXT
(
addr
Ë((
__psöt_t
)◊ddr))

	)

253 
	#PTR_EXT
(
addr
Ë◊ddr)

	)

262 #i‡
_MIPS_SIM
 =
_ABI64


263 
	#IS_KUREGION
(
x
Ë(((
__psunsig√d_t
)(xË& 
KREGION_MASK
Ë=0)

	)

265 
	#IS_KUREGION
(
x
Ë
	`IS_KUSEG
(x)

	)

277 #i‡
_MIPS_SIM
 =
_ABI64
 && (
deföed
(
R10000
Ë&& deföed(
SN
))

279 
	#K1ATTR_SHFT
 57

	)

280 
	#K1ATTR_MASK
 (3LL << 
K1ATTR_SHFT
)

	)

281 
	#K1MASK
(
x
Ë((
__psunsig√d_t
)(xË& ~(
K1ATTR_MASK
))

	)

283 
	#K1MASK
(
x
Ë(x)

	)

286 #i‡
_MIPS_SIM
 =
_ABI64
 && (
deföed
(
R10000
))

287 
	#UATTR_SHFT
 57

	)

288 
	#UATTR_MASK
 (3L << 
UATTR_SHFT
)

	)

289 
	#UNCACHED_ATTR
(
_x
Ë(((
__psunsig√d_t
)(_xË& (
UATTR_MASK
)Ë>> 
UATTR_SHFT
)

	)

291 
	#CALGO_SHFT
 59

	)

292 
	#CALGO_MASK
 (7L << 
CALGO_SHFT
)

	)

293 
	#CACHE_ALGO
(
_x
Ë(((
__psunsig√d_t
)(_xË& (
CALGO_MASK
)Ë>> 
CALGO_SHFT
)

	)

300 
	#IS_KPHYS
(
x
Ë!((
__psunsig√d_t
)(xË& ~
TO_PHYS_MASK
)

	)

301 
	#IS_KSEG0
(
x
Ë((
__psunsig√d_t
)(xË>
K0BASE
 && \

302 (
__psunsig√d_t
)(
x
Ë< 
K0BASE
 + 
K0SIZE
)

	)

303 
	#IS_KSEG1
(
x
Ë(((
__psunsig√d_t
)(
	`K1MASK
(x)Ë>K1MASK(
K1BASE
))\

304 && ((
__psunsig√d_t
)(
	`K1MASK
(
x
)Ë< K1MASK(
K1BASE
Ë+ 
K1SIZE
))

	)

305 
	#IS_KSEGDM
(
x
Ë(
	`IS_KSEG0
(xË|| 
	`IS_KSEG1
(x))

	)

306 
	#IS_KPTESEG
(
x
Ë((
__psunsig√d_t
)(xË>
KPTE_SHDUBASE
 && \

307 (
__psunsig√d_t
)(
x
Ë< 
KPTEBASE
 + 
KPTE_USIZE
)

	)

308 
	#IS_KUSEG
(
x
Ë((
__psunsig√d_t
)(xË< 
KUBASE
 + 
KUSIZE
)

	)

309 
	#IS_KUSEG32
(
x
Ë((
__psunsig√d_t
)(xË< 
KUBASE
 + 
KUSIZE_32
)

	)

310 
	#IS_KUSEG64
(
x
Ë((
__psunsig√d_t
)(xË< 
KUBASE
 + 
KUSIZE_64
)

	)

312 #i‡
_MIPS_SIM
 =
_ABI64


313 
	#IS_COMPATK0
(
_x
Ë((
__psunsig√d_t
)(_xË>
COMPAT_K0BASE
 &&\

314 (
__psunsig√d_t
)(
_x
Ë< (
COMPAT_K0BASE
 + 
COMPAT_KSIZE
))

	)

316 
	#IS_COMPATK1
(
_x
Ë((
__psunsig√d_t
)(_xË>
COMPAT_K1BASE
 &&\

317 (
__psunsig√d_t
)(
_x
Ë< (
COMPAT_K1BASE
 + 
COMPAT_KSIZE
))

	)

319 
	#IS_COMPAT_PHYS
(
_x
Ë(
	`IS_COMPATK0
(_xË|| 
	`IS_COMPATK1
(_x))

	)

320 
	#COMPAT_TO_PHYS
(
_x
Ë((
__psunsig√d_t
)(_xË& 
TO_COMPAT_PHYS_MASK
)

	)

322 
	#IS_XKPHYS
(
_x
Ë(((
__psunsig√d_t
)(_x) >= 0x8000000000000000)\

323 && ((
__psunsig√d_t
)(
_x
Ë< 0xC000000000000000))

	)

325 
	#XKPHYS_TO_PHYS
(
_x
Ë((
__psunsig√d_t
)(_xË& 
TO_PHYS_MASK
)

	)

328 
	#IS_COMPAT_PHYS
(
_x
Ë(0)

	)

329 
	#COMPAT_TO_PHYS
(
_x
Ë((
__psunsig√d_t
)(_xË& 
TO_PHYS_MASK
)

	)

332 #i‡
TFP


333 
	#IS_KSEG2
(
x
Ë((
__psunsig√d_t
)(xË>
K2BASE
 && \

334 (
__psunsig√d_t
)(
x
Ë< 
K2BASE
 + 
K2SIZE
)

	)

336 
	#IS_KSEG2
(
x
Ë((
__psunsig√d_t
)(xË>
K2BASE
 && \

337 (
__psunsig√d_t
)(
x
Ë< 
KPTE_SHDUBASE
)

	)

341 #ifde‡
_STANDALONE


342 
	#KDM_TO_LOWPHYS
(
x
Ë(
	`KDM_TO_PHYS
(x))

	)

	@/usr/include/sys/mon.h

12 #i‚de‡
__SYS_MON_H__


13 
	#__SYS_MON_H__


	)

18 
	gm⁄ô‹
;

19 
	gm⁄_°©e
;

21 
	sm⁄_func
 {

22 (*
	mmf_öô
)(
	mm⁄ô‹
 *);

23 (*
	mmf_£rvi˚
)(*);

24 (*
	mmf_p_m⁄
)(
	mm⁄ô‹
 *);

25 (*
	mmf_v_m⁄
)(
	mm⁄ô‹
 *);

26 (*
	mmf_q_m⁄_ßv
)(
	mm⁄ô‹
 *, **);

27 (*
	mmf_q_m⁄_r°
)(
	mm⁄ô‹
 *, *);

28 (*
	mmf_r_m⁄
)(
	mm⁄ô‹
 *, 
	mm⁄_°©e
 *);

29 (*
	mmf_a_m⁄
)(
	mm⁄ô‹
 *, 
	mm⁄_°©e
 *);

30 } 
	tm⁄_func_t
;

32 
	#MON_LOCKED
 0x01

	)

33 
	#MON_WAITING
 0x02

	)

34 
	#MON_TIMEOUT
 0x04

	)

35 
	#MON_DOSRV
 0x08

	)

36 
	#MON_RUN
 0x10

	)

38 
	sm⁄ô‹
 {

39 
m⁄ô‹
 *
	mm⁄_√xt
;

40 
m⁄ô‹
 *
	mm⁄_¥ev
;

41 
lock_t
 
	mm⁄_lock
;

42 
uch¨_t
 
	mm⁄_lock_Êags
;

43 
sv_t
 
	mm⁄_waô
;

44 
m⁄ô‹
 **
	mm⁄_m⁄µ
;

45 
lock_t
 *
	mm⁄_m⁄p_lock
;

46 
uöt64_t
 
	mm⁄_id
;

47 
	mm⁄_åùs
;

48 *
	mm⁄_p_¨g
;

49 **
	mm⁄_queue
;

50 
m⁄_func_t
 *
	mm⁄_fun˝
;

51 *
	mm⁄_¥iv©e
;

52 
sv_t
 
	mm⁄_sv
;

53 } 
	tm⁄_t
;

55 
	sm⁄_°©e
 {

56 
m⁄_t
 *
	mms_m⁄
;

57 
m⁄_t
 **
	mms_m⁄µ
;

58 
lock_t
 *
	mms_m⁄p_lock
;

59 
uöt64_t
 
	mms_id
;

60 
	mms_åùs
;

61 *
	mms_p_¨g
;

63 } 
	tm⁄_°©e_t
;

70 #ifde‡
_KERNEL


71 
öôm⁄ô‹
(
m⁄_t
 *, *, 
m⁄_func_t
 *);

72 
pm⁄ô‹
(
m⁄_t
 *, , *);

73 
qm⁄ô‹
(
m⁄_t
 *, *, *);

74 
vm⁄ô‹
(
m⁄_t
 *);

75 
am⁄ô‹
(
m⁄_°©e_t
 *);

76 
rm⁄ô‹
(
m⁄_t
 *, 
m⁄_°©e_t
 *);

77 
m⁄_t
 *
Ælocm⁄ô‹
(*, 
m⁄_func_t
 *);

78 
‰ìm⁄ô‹
(
m⁄_t
 *);

81 #i‡
_KERNEL
 && !
_STANDALONE


82 
•öu∆ock_pm⁄ô‹
(
lock_t
 *, , 
m⁄_t
 **, , *);

83 
•öu∆ock_qm⁄ô‹
(
lock_t
 *, , 
m⁄_t
 **, *, *, );

	@/usr/include/sys/nodemask.h

1 #i‚de‡
_SYS_NODEMASK_H


2 
	#_SYS_NODEMASK_H


	)

40 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_STANDALONE
Ë|| deföed(
_KMEMUSER
)

42 #i‡(
SN0
)

43 
	~<sys/SN/SN0/¨ch.h
>

45 #i‡(
SN1
)

46 
	~<sys/SN/SN1/¨ch.h
>

49 
	#CNODEMASK_BOOTED_MASK
 
boŸ_˙odemask


	)

50 
	#CNODEMASK_BIPW
 64

	)

52 #i‡!
deföed
(
SN0XXL
Ë&& !deföed(
SN1
)

54 
	#CNODEMASK_SIZE
 1

	)

55 
__uöt64_t
 
	t˙odemask_t
;

57 
	#CNODEMASK_WORD
(
p
,
w
Ë’)

	)

58 
	#CNODEMASK_SET_WORD
(
p
,
w
,
vÆ
Ë’Ë
	)
vÆ

59 
	#CNODEMASK_CLRALL
(
p
Ë’Ë0

	)

60 
	#CNODEMASK_SETALL
(
p
Ë’Ë~((
˙odemask_t
)0)

	)

61 
	#CNODEMASK_IS_ZERO
(
p
Ë(’Ë=0)

	)

62 
	#CNODEMASK_IS_NONZERO
(
p
Ë(’Ë!0)

	)

63 
	#CNODEMASK_NOTEQ
(
p
, 
q
Ë(’Ë!(q))

	)

64 
	#CNODEMASK_EQ
(
p
, 
q
Ë(’Ë=(q))

	)

65 
	#CNODEMASK_LSB_ISONE
(
p
Ë(’Ë& 0x1ULL)

	)

67 
	#CNODEMASK_ZERO
(Ë((
˙odemask_t
)0)

	)

68 
	#CNODEMASK_CVTB
(
bô
Ë(1ULL << (bô))

	)

69 
	#CNODEMASK_SETB
(
p
, 
bô
Ë(’Ë|1ULL << (bô))

	)

70 
	#CNODEMASK_CLRB
(
p
, 
bô
Ë(’Ë&~(1ULL << (bô)))

	)

71 
	#CNODEMASK_TSTB
(
p
, 
bô
Ë(’Ë& (1ULL << (bô)))

	)

73 
	#CNODEMASK_SETM
(
p
, 
q
Ë(’Ë|(q))

	)

74 
	#CNODEMASK_CLRM
(
p
, 
q
Ë(’Ë&~(q))

	)

75 
	#CNODEMASK_ANDM
(
p
, 
q
Ë(’Ë&(q))

	)

76 
	#CNODEMASK_TSTM
(
p
, 
q
Ë(’Ë& (q))

	)

78 
	#CNODEMASK_CPYNOTM
(
p
, 
q
Ë(’Ë~(q))

	)

79 
	#CNODEMASK_CPY
(
p
, 
q
Ë(’Ë(q))

	)

80 
	#CNODEMASK_ORNOTM
(
p
, 
q
Ë(’Ë|~(q))

	)

81 
	#CNODEMASK_SHIFTL
(
p
Ë(’Ë<<1)

	)

82 
	#CNODEMASK_SHIFTR
(
p
Ë(’Ë>>1)

	)

83 
	#CNODEMASK_SHIFTL_PTR
(
p
Ë(*’Ë<<1)

	)

84 
	#CNODEMASK_SHIFTR_PTR
(
p
Ë(*’Ë>>1)

	)

87 
	#CNODEMASK_ATOMSET_BIT
(
p
, 
bô
Ë
	`©omicSëUl⁄g
((
˙odemask_t
 *)&’), (1ULL<<(bô)))

	)

88 
	#CNODEMASK_ATOMCLR_BIT
(
p
, 
bô
Ë
	`©omicCÀ¨Ul⁄g
((
˙odemask_t
 *)&’), (1ULL<<(bô)))

	)

91 
	#CNODEMASK_ATOMSET
(
p
, 
q
Ë
	`©omicSëUl⁄g
((
˙odemask_t
 *)&’), q)

	)

92 
	#CNODEMASK_ATOMCLR
(
p
, 
q
Ë
	`©omicCÀ¨Ul⁄g
((
˙odemask_t
 *)&’), q)

	)

95 
	#CNODEMASK_ATOMSET_MASK
(
__ﬁd
, 
p
, 
q
) { \

96 (
__ﬁd
Ë
	`©omicSëUl⁄g
((
˙odemask_t
 *)&(
p
), 
q
); \

97 }

	)

98 
	#CNODEMASK_ATOMCLR_MASK
(
__ﬁd
, 
p
, 
q
) { \

99 (
__ﬁd
Ë
	`©omicCÀ¨Ul⁄g
((
˙odemask_t
 *)&(
p
),
q
); \

100 }

	)

102 
	#CNODEMASK_FROM_NUMNODES
(
n
Ë((~(
˙odemask_t
)0)>>(
CNODEMASK_BIPW
-“)))

	)

106 
	#CNODEMASK_SIZE
 (
MAX_COMPACT_NODES
 / 
CNODEMASK_BIPW
)

	)

109 
__uöt64_t
 
	m_bôs
[
CNODEMASK_SIZE
];

110 } 
	t˙odemask_t
;

112 
	#CNODEMASK_WORD
(
p
,
w
) \

113 ((
w
 >0 && w < 
CNODEMASK_SIZE
Ë? (
p
).
_bôs
[(w)] : 0)

	)

114 
	#CNODEMASK_SET_WORD
(
p
,
w
,
vÆ
) { \

115 i‡(
w
 >0 && w < 
CNODEMASK_SIZE
) \

116 (
p
).
_bôs
[(
w
)] = 
vÆ
; \

117 }

	)

119 
	#CNODEMASK_CLRALL
(
p
) { \

120 (
p
).
_bôs
[0] = 0; \

121 (
p
).
_bôs
[1] = 0; \

122 }

	)

124 
	#CNODEMASK_SETALL
(
p
) { \

125 (
p
).
_bôs
[0] = ~(0); \

126 (
p
).
_bôs
[1] = ~(0); \

127 }

	)

129 
	#CNODEMASK_LSB_ISONE
(
p
Ë(’).
_bôs
[0] & 0x1ULL)

	)

132 
	#CNODEMASK_SETM
(
p
,
q
) { \

133 (
p
).
_bôs
[0] |((
q
)._bits[0]); \

134 (
p
).
_bôs
[1] |((
q
)._bits[1]); \

135 }

	)

137 
	#CNODEMASK_CLRM
(
p
,
q
) { \

138 (
p
).
_bôs
[0] &~((
q
)._bits[0]); \

139 (
p
).
_bôs
[1] &~((
q
)._bits[1]); \

140 }

	)

142 
	#CNODEMASK_ANDM
(
p
,
q
) { \

143 (
p
).
_bôs
[0] &((
q
)._bits[0]); \

144 (
p
).
_bôs
[1] &((
q
)._bits[1]); \

145 }

	)

147 
	#CNODEMASK_CPY
(
p
, 
q
) { \

148 (
p
).
_bôs
[0] = (
q
)._bits[0]; \

149 (
p
).
_bôs
[1] = (
q
)._bits[1]; \

150 }

	)

152 
	#CNODEMASK_CPYNOTM
(
p
,
q
) { \

153 (
p
).
_bôs
[0] = ~((
q
)._bits[0]); \

154 (
p
).
_bôs
[1] = ~((
q
)._bits[1]); \

155 }

	)

157 
	#CNODEMASK_ORNOTM
(
p
,
q
) { \

158 (
p
).
_bôs
[0] |~((
q
)._bits[0]); \

159 (
p
).
_bôs
[1] |~((
q
)._bits[1]); \

160 }

	)

162 
	#CNODEMASK_INDEX
(
bô
Ë((bôË>> 6)

	)

163 
	#CNODEMASK_SHFT
(
bô
Ë((bôË& 0x3f)

	)

166 
	#CNODEMASK_SETB
(
p
, 
bô
) \

167 (
p
).
_bôs
[
	`CNODEMASK_INDEX
(
bô
)] |(1ULL << 
	`CNODEMASK_SHFT
(bô))

	)

170 
	#CNODEMASK_CLRB
(
p
, 
bô
) \

171 (
p
).
_bôs
[
	`CNODEMASK_INDEX
(
bô
)] &~(1ULL << 
	`CNODEMASK_SHFT
(bô))

	)

174 
	#CNODEMASK_TSTB
(
p
, 
bô
) \

175 ((
p
).
_bôs
[
	`CNODEMASK_INDEX
(
bô
)] & (1ULL << 
	`CNODEMASK_SHFT
(bô)))

	)

180 
	#CNODEMASK_ATOMSET_BIT
(
p
, 
bô
) \

181 (
	`©omicSëUl⁄g
((*)&(
p
).
_bôs
[
	`CNODEMASK_INDEX
(
bô
)], (1ULL << 
	`CNODEMASK_SHFT
(bô))));

	)

182 
	#CNODEMASK_ATOMCLR_BIT
(
p
, 
bô
) \

183 (
	`©omicCÀ¨Ul⁄g
((*)&(
p
).
_bôs
[
	`CNODEMASK_INDEX
(
bô
)], (1ULL << 
	`CNODEMASK_SHFT
(bô))));

	)

186 
	#CNODEMASK_ATOMSET
(
p
, 
q
) { \

187 
i
; \

189 
i
 = 0 ; i < 
CNODEMASK_SIZE
 ; i++) { \

190 
	`©omicSëUl⁄g
((*)&(
p
).
_bôs
[
i
], (
q
)._bits[i]); \

192 }

	)

193 
	#CNODEMASK_ATOMCLR
(
p
, 
q
) { \

194 
i
; \

196 
i
 = 0 ; i < 
CNODEMASK_SIZE
 ; i++) { \

197 
	`©omicCÀ¨Ul⁄g
((*)&(
p
).
_bôs
[
i
], (
q
)._bits[i]); \

199 }

	)

202 
	#CNODEMASK_ATOMSET_MASK
(
__ﬁd
, 
p
, 
q
) { \

203 (
__ﬁd
).
_bôs
[0] = \

204 
	`©omicSëUl⁄g
((*)&(
p
).
_bôs
[0], (
q
)._bits[0]); \

205 (
__ﬁd
).
_bôs
[1] = \

206 
	`©omicSëUl⁄g
((*)&(
p
).
_bôs
[1], (
q
)._bits[1]); \

207 }

	)

208 
	#CNODEMASK_ATOMCLR_MASK
(
__ﬁd
, 
p
, 
q
) { \

209 (
__ﬁd
).
_bôs
[0] = \

210 
	`©omicCÀ¨Ul⁄g
((*)&(
p
).
_bôs
[0], (
q
)._bits[0]); \

211 (
__ﬁd
).
_bôs
[1] = \

212 
	`©omicCÀ¨Ul⁄g
((*)&(
p
).
_bôs
[1], (
q
)._bits[1]); \

213 }

	)

215 
__ölöe
 
˙odemask_t
 
	$CNODEMASK_CVTB
(
bô
)

217 
˙odemask_t
 
__tmp
;

218 
	`CNODEMASK_CLRALL
(
__tmp
);

219 
	`CNODEMASK_SETB
(
__tmp
,
bô
);

220 (
__tmp
);

221 
	}
}

224 
__ölöe
 
˙odemask_t
 
	$CNODEMASK_ZERO
()

226 
˙odemask_t
 
__tmp
;

227 
	`CNODEMASK_CLRALL
(
__tmp
);

228 (
__tmp
);

229 
	}
}

231 
__ölöe
 
	$CNODEMASK_IS_ZERO
 (
˙odemask_t
 
p
)

233 
i
;

235 
i
 = 0 ; i < 
CNODEMASK_SIZE
 ; i++)

236 i‡(
p
.
_bôs
[
i
] != 0)

239 
	}
}

241 
__ölöe
 
	$CNODEMASK_IS_NONZERO
 (
˙odemask_t
 
p
)

243 
i
;

245 
i
 = 0 ; i < 
CNODEMASK_SIZE
 ; i++)

246 i‡(
p
.
_bôs
[
i
] != 0)

249 
	}
}

251 
__ölöe
 
	$CNODEMASK_NOTEQ
 (
˙odemask_t
 
p
, cnodemask_à
q
)

253 
i
;

255 
i
 = 0 ; i < 
CNODEMASK_SIZE
 ; i++)

256 i‡(
p
.
_bôs
[
i
] !
q
._bits[i])

259 
	}
}

261 
__ölöe
 
	$CNODEMASK_EQ
 (
˙odemask_t
 
p
, cnodemask_à
q
)

263 
i
;

265 
i
 = 0 ; i < 
CNODEMASK_SIZE
 ; i++)

266 i‡(
p
.
_bôs
[
i
] !
q
._bits[i])

269 
	}
}

272 
__ölöe
 
	$CNODEMASK_TSTM
 (
˙odemask_t
 
p
, cnodemask_à
q
)

274 
i
;

276 
i
 = 0 ; i < 
CNODEMASK_SIZE
 ; i++)

277 i‡(
p
.
_bôs
[
i
] & 
q
._bits[i])

280 
	}
}

282 
__ölöe
 
	$CNODEMASK_SHIFTL_PTR
 (
˙odemask_t
 *
p
)

284 
i
;

285 
__uöt64_t
 
uµî
;

293 
i
=(
CNODEMASK_SIZE
-1); i > 0; --i) {

294 
uµî
 = (
p
->
_bôs
[
i
-1] & (1ULL<<(
CNODEMASK_BIPW
-1))) ? 1 : 0;

295 
p
->
_bôs
[
i
] <<= 1;

296 
p
->
_bôs
[
i
] |
uµî
;

298 
p
->
_bôs
[
i
] <<= 1;

299 
	}
}

301 
__ölöe
 
	$CNODEMASK_SHIFTR_PTR
 (
˙odemask_t
 *
p
)

303 
i
;

304 
__uöt64_t
 
lowî
;

312 
i
=0; i < (
CNODEMASK_SIZE
-2); ++i) {

313 
lowî
 = (
p
->
_bôs
[
i
+1] & (0x1)) ? 1 : 0;

314 
p
->
_bôs
[
i
] >>= 1;

315 
p
->
_bôs
[
i
] |(
lowî
<<((
CNODEMASK_BIPW
-1)));

317 
p
->
_bôs
[
i
] >>= 1;

318 
	}
}

320 
__ölöe
 
˙odemask_t
 
	$CNODEMASK_FROM_NUMNODES
(
n
)

322 
˙odemask_t
 
__tmp
;

323 
i
;

324 
	`CNODEMASK_CLRALL
(
__tmp
);

325 
i
=0; i<
n
; i++) {

326 
	`CNODEMASK_SETB
(
__tmp
, 
i
);

328 (
__tmp
);

329 
	}
}

333 
˙odemask_t
 
boŸ_˙odemask
;

	@/usr/include/sys/pthread.h

1 #i‚de‡
_SYS_PTHREAD_H_


2 
	#_SYS_PTHREAD_H_


	)

4 #ifde‡
__˝lu•lus


11 
	t±hªad_t
;

13 #i‚de‡
_PTHREAD_EXECUTIVE


14 °ru˘ { 
__D
[5]; } 
	t±hªad_©å_t
;

15 °ru˘ { 
__D
[8]; } 
	t±hªad_muãx_t
;

16 °ru˘ { 
__D
[2]; } 
	t±hªad_muãx©å_t
;

17 °ru˘ { 
__D
[8]; } 
	t±hªad_c⁄d_t
;

18 °ru˘ { 
__D
[2]; } 
	t±hªad_c⁄d©å_t
;

19 °ru˘ { 
__D
[16]; } 
	t±hªad_rwlock_t
;

20 °ru˘ { 
__D
[4]; } 
	t±hªad_rwlock©å_t
;

21 
	t±hªad_key_t
;

22 
	t±hªad_⁄˚_t
;

23 °ru˘ { 
__D
[2]; } 
	t±hªad_b¨rõøâr_t
;

24 °ru˘ { 
__D
[16]; } 
	t±hªad_b¨rõr_t
;

25 °ru˘ { 
__D
[4]; } 
	t±hªad_•ölock_t
;

29 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

26 #i‚de‡
_SYS_SELECT_H


27 
	#_SYS_SELECT_H


	)

31 #ifde‡
__˝lu•lus


35 
	~<°™d¨ds.h
>

48 #i‚def 
FD_SETSIZE


49 
	#FD_SETSIZE
 1024

	)

52 
	#__NBBY
 8

	)

54 #i‡(
_MIPS_SZLONG
 == 32)

55 
	tfd_mask_t
;

56 
	tufd_mask_t
;

58 #i‡(
_MIPS_SZLONG
 == 64)

59 
	tfd_mask_t
;

60 
	tufd_mask_t
;

63 
	#__NFDBITS
 ()((
fd_mask_t
Ë* 
__NBBY
Ë

	)

64 
	#__howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

66 #i‡
_SGIAPI


67 
	sfd_£t
 {

71 
fd_mask_t
 
fds_bôs
[
__howm™y
(
FD_SETSIZE
, 
__NFDBITS
)];

72 } 
	tfd_£t
;

74 
	#FD_SET
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
__NFDBITS
] |(
fd_mask_t
Ë(1 << (“Ë% __NFDBITS)))

	)

75 
	#FD_CLR
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
__NFDBITS
] &(
fd_mask_t
Ë~(1 << (“Ë% __NFDBITS)))

	)

76 
	#FD_ISSET
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
__NFDBITS
] & (
fd_mask_t
Ë(1 << (“Ë% __NFDBITS)))

	)

79 #i‡
_SGIAPI


80 
	~<°rög.h
>

83 
__SGI_LIBC_BEGIN_NAMESPACE_STD


85 #i‡!
deföed
(
_SIZE_T
Ë&& !deföed(
_SIZE_T_
)

86 
	#_SIZE_T


	)

87 #i‡(
_MIPS_SZLONG
 == 32)

88 
	tsize_t
;

90 #i‡(
_MIPS_SZLONG
 == 64)

91 
	tsize_t
;

95 
__SGI_LIBC_END_NAMESPACE_STD


97 
__SGI_LIBC_USING_FROM_STD
(
size_t
)

100 #i‡
_SGIAPI


101 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’), 0, (*’)))

	)

103 *
__mem£t
(*, , 
size_t
);

104 
	#FD_ZERO
(
p
Ë
	`__mem£t
((*)’), 0, (*’)))

	)

107 #i‡
_SGIAPI
 || 
deföed
(
_BSD_TYPES
)

112 #i‚de‡
NBBY


113 
	#NBBY
 8

	)

116 #i‚def 
howm™y


117 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

120 
	#NFDBITS
 
__NFDBITS


	)

122 #i‡(
_MIPS_SZLONG
 == 32)

123 
	tfd_mask
;

125 #i‡(
_MIPS_SZLONG
 == 64)

126 
	tfd_mask
;

131 #ifde‡
__˝lu•lus


	@/usr/include/sys/signal.h

19 #i‚de‡
_SYS_SIGNAL_H


20 
	#_SYS_SIGNAL_H


	)

22 
	~<°™d¨ds.h
>

23 
	~<öã∫Æ/sgima¸os.h
>

34 
	#SIGHUP
 1

	)

35 
	#SIGINT
 2

	)

36 
	#SIGQUIT
 3

	)

37 
	#SIGILL
 4

	)

38 
	#SIGTRAP
 5

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGABRT
 6

	)

41 
	#SIGEMT
 7

	)

42 
	#SIGFPE
 8

	)

43 
	#SIGKILL
 9

	)

44 
	#SIGBUS
 10

	)

45 
	#SIGSEGV
 11

	)

46 
	#SIGSYS
 12

	)

47 
	#SIGPIPE
 13

	)

48 
	#SIGALRM
 14

	)

49 
	#SIGTERM
 15

	)

50 
	#SIGUSR1
 16

	)

51 
	#SIGUSR2
 17

	)

52 
	#SIGCLD
 18

	)

53 
	#SIGCHLD
 18

	)

54 
	#SIGPWR
 19

	)

55 
	#SIGWINCH
 20

	)

56 
	#SIGURG
 21

	)

57 
	#SIGPOLL
 22

	)

58 
	#SIGIO
 22

	)

59 
	#SIGSTOP
 23

	)

60 
	#SIGTSTP
 24

	)

61 
	#SIGCONT
 25

	)

62 
	#SIGTTIN
 26

	)

63 
	#SIGTTOU
 27

	)

64 
	#SIGVTALRM
 28

	)

65 
	#SIGPROF
 29

	)

66 
	#SIGXCPU
 30

	)

67 
	#SIGXFSZ
 31

	)

68 
	#SIGK32
 32

	)

69 
	#SIGFAILSOFT
 32

	)

70 
	#SIGCKPT
 33

	)

71 
	#SIGRESTART
 34

	)

72 
	#SIGUME
 35

	)

74 
	#SIGPTINTR
 47

	)

75 
	#SIGPTRESCHED
 48

	)

77 
	#SIGRTMIN
 49

	)

78 
	#SIGRTMAX
 64

	)

80 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

81 
	~<sys/ty≥s.h
>

82 
	g__SGI_LIBC_BEGIN_EXTERN_C


86 #i‡
deföed
(
_LANGUAGE_C_PLUS_PLUS
Ë|| !
_SGIAPI


87 
	#__sig¨gs
 

	)

89 
	#__sig¨gs


	)

96 #i‚de‡
__sigªt_t


97 
	#__sigªt_t
 

	)

100 #i‚de‡
SIG_ERR


102 
	$__sigªt_t
 (*
	tSIG_PF
Ë(
	t__sig¨gs
);

104 
	#SIG_ERR
 ((
SIG_PF
)-1L)

	)

105 
	#SIG_IGN
 ((
SIG_PF
)1L)

	)

106 
	#SIG_DFL
 ((
SIG_PF
)0L)

	)

108 
	#SIG_HOLD
 ((
SIG_PF
)2L)

	)

110 
__SGI_LIBC_END_EXTERN_C


112 #i‡
_POSIX93
 || 
_ABIAPI
 || 
_XOPEN5


116 
	~<sys/sigevít.h
>

119 #i‡
_POSIX93
 || 
_XOPEN4UX
 || 
_XOPEN5


123 
	~<sys/sigöfo.h
>

126 
__SGI_LIBC_BEGIN_EXTERN_C


131 #i‡!
	`deföed
(
_SIGSET_T
)

132 
	#_SIGSET_T


	)

134 
__uöt32_t
 
__sigbôs
[4];

135 } 
	tsig£t_t
;

139 
	u__sigh™dÀr
 {

140 
	`__sigªt_t
 (*
ß_h™dÀr1
)(
__sig¨gs
);

141 #i‡
_POSIX93
 || 
_XOPEN4UX
 || 
_XOPEN5


142 (*
ß_siga˘i⁄1
)(, 
sigöfo_t
 *, *);

144 } 
	t__sigh™dÀr_t
;

145 #i‡
_SGIAPI


146 
	#__ß_h™dÀr
 
ß_h™dÀr1


	)

147 
	#__ß_siga˘i⁄
 
ß_siga˘i⁄1


	)

150 
	ssiga˘i⁄
 {

151 
ß_Êags
;

152 
__sigh™dÀr_t
 
ß_sigh™dÀr
;

153 
sig£t_t
 
ß_mask
;

155 
ß_ªsv
[2];

156 } 
	tsiga˘i⁄_t
;

162 
	#ß_h™dÀr
 
ß_sigh™dÀr
.
ß_h™dÀr1


	)

163 
	#ß_siga˘i⁄
 
ß_sigh™dÀr
.
ß_siga˘i⁄1


	)

172 
	#SIG_NOP
 0

	)

173 
	#SIG_BLOCK
 1

	)

174 
	#SIG_UNBLOCK
 2

	)

175 
	#SIG_SETMASK
 3

	)

176 
	#SIG_SETMASK32
 256

	)

183 
	#SA_ONSTACK
 0x00000001

	)

184 
	#SA_RESETHAND
 0x00000002

	)

185 
	#SA_RESTART
 0x00000004

	)

186 
	#SA_SIGINFO
 0x00000008

	)

187 
	#SA_NODEFER
 0x00000010

	)

189 
	#SA_NOCLDWAIT
 0x00010000

	)

190 
	#SA_NOCLDSTOP
 0x00020000

	)

194 
	#_SA_BSDCALL
 0x10000000

	)

198 
__SGI_LIBC_END_EXTERN_C


199 #i‡
_XOPEN4UX
 || 
_XOPEN5
 || 
	`deföed
(
_BSD_COMPAT
Ë|| deföed(
_BSD_SIGNALS
)

203 
__SGI_LIBC_BEGIN_EXTERN_C


204 
	ssig°ack
 {

205 *
ss_•
;

206 
ss_⁄°ack
;

210 
	#MINSIGSTKSZ
 512

	)

211 
	#SIGSTKSZ
 8192

	)

219 
	#SS_ONSTACK
 0x00000001

	)

220 
	#SS_DISABLE
 0x00000002

	)

221 
__SGI_LIBC_END_EXTERN_C


223 
	~<sys/uc⁄ãxt.h
>

227 
__SGI_LIBC_BEGIN_EXTERN_C


228 #i‡
	`deföed
(
_BSD_COMPAT
Ë|| deföed(
_BSD_SIGNALS
)

249 
	ssigvec
 {

250 
	`__sigªt_t
 (*
sv_h™dÀr
)(
__sig¨gs
);

251 
sv_mask
;

252 
sv_Êags
;

256 
	#SV_ONSTACK
 0x0001

	)

257 
	#SV_INTERRUPT
 0x0002

	)

258 
	#sv_⁄°ack
 
sv_Êags


	)

260 
	#NUMBSDSIGS
 (32Ë

	)

262 #i‡
_NO_XOPEN5


263 
	#sigmask
(
sig
Ë(1L << ((sig)-1))

	)

266 
	#sig«l
 
BSDsig«l


	)

267 
	#sig∑u£
 
BSDsig∑u£


	)

269 
	`sig∑u£
();

270 
	`sigvec
(,
sigvec
 *, sigvec *);

271 
	`sig°ack
(
sig°ack
 *, sigstack *);

272 
	`sigblock
();

273 
	`sig£tmask
();

274 
	`kûÕg
(
pid_t
, );

275 
	`kûl
(
pid_t
, );

278 #i‚de‡
_KERNEL


279 #i‡(
_XOPEN4UX
 || 
_XOPEN5
Ë&& (!
	`deföed
(
_BSD_COMPAT
Ë&& !deföed(
_BSD_SIGNALS
))

283 #i‡
_NO_XOPEN5


284 
	#sigmask
(
sig
Ë(1L << ((sig)-1))

	)

286 (*
	`bsd_sig«l
(, (*)()))();

287 
	`kûÕg
(
pid_t
, );

288 
	`sig°ack
(
sig°ack
 *, sigstack *);

293 #i‚de‡
_KERNEL


294 
__SGI_LIBC_BEGIN_NAMESPACE_STD


295 
	`__sigªt_t
 (*
	`sig«l
(,
	$__sigªt_t
 (*)(
__sig¨gs
)))(__sigargs);

296 
__SGI_LIBC_END_NAMESPACE_STD


299 #i‡
_SGIAPI


320 
	ssigc⁄ãxt
 {

321 
__uöt32_t
 
sc_ªgmask
;

322 
__uöt32_t
 
sc_°©us
;

323 
__uöt64_t
 
sc_pc
;

327 
__uöt64_t
 
sc_ªgs
[32];

331 
__uöt64_t
 
sc_Âªgs
[32];

332 
__uöt32_t
 
sc_ow√dÂ
;

333 
__uöt32_t
 
sc_Âc_c§
;

334 
__uöt32_t
 
sc_Âc_eú
;

336 
__uöt32_t
 
sc_ssÊags
;

337 
__uöt64_t
 
sc_mdhi
;

338 
__uöt64_t
 
sc_mdlo
;

342 
__uöt64_t
 
sc_ˇu£
;

343 
__uöt64_t
 
sc_badvaddr
;

344 
__uöt64_t
 
sc_åiggîßve
;

345 
sig£t_t
 
sc_sig£t
;

346 
__uöt64_t
 
sc_Â_rounded_ªsu…
;

347 
__uöt64_t
 
sc_∑d
[31];

348 } 
	tsigc⁄ãxt_t
;

354 
	#SC_CAUSE_BD
 0x8000000080000000LL

	)

357 #i‡!
	`deföed
(
_KERNEL
Ë&& !deföed(
_KMEMUSER
)

359 
	#sc_mask
 
sc_sig£t
.
__sigbôs
[0]

	)

362 #ifde‡
_LINT


363 #unde‡
SIG_ERR


364 
	#SIG_ERR
 ((*)())0

	)

365 #unde‡
SIG_IGN


366 
	#SIG_IGN
 ((*)())0

	)

367 #unde‡
SIG_HOLD


368 
	#SIG_HOLD
 ((*)())0

	)

373 
__SGI_LIBC_END_EXTERN_C


377 
	#SIG_ERR
 (-1)

	)

378 
	#SIG_IGN
 (1)

	)

379 
	#SIG_HOLD
 (2)

	)

380 
	#SIG_DFL
 (0)

	)

384 #i‡
_SGIAPI
 || 
_ABIAPI


385 
	#NSIG
 65

	)

386 
	#MAXSIG
 (
NSIG
-1Ë

	)

387 
	#NUMSIGS
 (
NSIG
-1Ë

	)

389 
	#BRK_USERBP
 0

	)

390 
	#BRK_KERNELBP
 1

	)

391 
	#BRK_ABORT
 2

	)

392 
	#BRK_BD_TAKEN
 3

	)

393 
	#BRK_BD_NOTTAKEN
 4

	)

394 
	#BRK_SSTEPBP
 5

	)

395 
	#BRK_OVERFLOW
 6

	)

396 
	#BRK_DIVZERO
 7

	)

397 
	#BRK_RANGE
 8

	)

399 
	#BRK_PSEUDO_OP_BIT
 0x80

	)

400 
	#BRK_PSEUDO_OP_MAX
 0x3

	)

402 
	#BRK_CACHE_SYNC
 0x80

	)

404 
	#BRK_MULOVF
 1023

	)

	@/usr/include/sys/stream.h

14 #i‚de‡
_SYS_STREAM_H


15 
	#_SYS_STREAM_H


	)

19 #ifde‡
__˝lu•lus


23 
	~<sys/°rmdï.h
>

25 
	#_EAGER_RUNQUEUES


	)

27 #ifde‡
_IRIX_LATER


28 
	~<sys/pﬁl.h
>

30 
	~<sys/cdefs.h
>

32 #ifde‡
_KERNEL


33 
	#‰ì
 
kîn_‰ì


	)

34 
	#mÆloc
 
kîn_mÆloc


	)

35 
	#ˇŒoc
 
kîn_ˇŒoc


	)

38 
¸ed
;

39 
m⁄ô‹
;

44 
	squeue
 {

45 
qöô
 *
q_qöfo
;

46 
msgb
 *
q_fú°
;

47 
msgb
 *
q_œ°
;

48 
queue
 *
q_√xt
;

49 
queue
 *
q_lök
;

50 *
q_±r
;

51 
ul⁄g_t
 
q_cou¡
;

52 
ul⁄g_t
 
q_Êag
;

53 
q_möpsz
;

55 
q_maxpsz
;

57 
ul⁄g_t
 
q_hiw©
;

58 
ul⁄g_t
 
q_low©
;

59 
qb™d
 *
q_b™dp
;

60 
q_nb™d
;

61 
q_blocked
;

62 
q_∑d1
[2];

63 
m⁄ô‹
 **
q_m⁄µ
;

65 
ul⁄g_t
 
q_ªf˙t
;

66 
°d©a
 *
q_°rh
;

67 
ul⁄g_t
 
q_pÊag
;

68 #ifde‡
_STRQ_TRACING


69 
kåa˚
 *
q_åa˚
;

73 
queue
 
	tqueue_t
;

78 
	#QENAB
 0x001

	)

79 
	#QWANTR
 0x002

	)

80 
	#QWANTW
 0x004

	)

81 
	#QFULL
 0x008

	)

82 
	#QREADR
 0x010

	)

83 
	#QUSE
 0x020

	)

84 
	#QNOENB
 0x040

	)

85 
	#QBACK
 0x100

	)

86 
	#QHLIST
 0x200

	)

88 #ifde‡
_STRQ_TRACING


89 
	#QTRC
 0x800

	)

96 
	sqb™d
 {

97 
qb™d
 *
qb_√xt
;

98 
ul⁄g_t
 
qb_cou¡
;

99 
msgb
 *
qb_fú°
;

100 
msgb
 *
qb_œ°
;

101 
ul⁄g_t
 
qb_hiw©
;

102 
ul⁄g_t
 
qb_low©
;

103 
ul⁄g_t
 
qb_Êag
;

104 
qb_∑d1
;

107 
qb™d
 
	tqb™d_t
;

112 
	#QB_FULL
 0x01

	)

113 
	#QB_WANTW
 0x02

	)

114 
	#QB_BACK
 0x04

	)

119 
	#NBAND
 256

	)

124 
	eqfõlds
 {

125 
QHIWAT
 = 0,

126 
QLOWAT
 = 1,

127 
QMAXPSZ
 = 2,

128 
QMINPSZ
 = 3,

129 
QCOUNT
 = 4,

130 
QFIRST
 = 5,

131 
QLAST
 = 6,

132 
QFLAG
 = 7,

133 
QBAD
 = 8

134 } 
	tqfõlds_t
;

139 
	smoduÀ_öfo
 {

140 
ush‹t_t
 
mi_idnum
;

141 *
mi_id«me
;

142 
mi_möpsz
;

143 
mi_maxpsz
;

144 
ul⁄g_t
 
mi_hiw©
;

145 
ul⁄g_t
 
mi_low©
;

146 
ush‹t_t
 
mi_lockög
;

150 
	#SINGLE_THREADED
 0

	)

151 
	#MULTI_THREADED
 1

	)

153 
qöô
;

159 
	s°ªamèb
 {

160 
qöô
 *
°_rdöô
;

161 
qöô
 *
°_wröô
;

162 
qöô
 *
°_muxröô
;

163 
qöô
 *
°_muxwöô
;

169 
	slökblk
 {

170 
queue_t
 *
l_qt›
;

172 
queue_t
 *
l_qbŸ
;

173 
l_ödex
;

174 
l_∑d
[5];

180 
	s‰ì_πn
 {

181 (*
‰ì_func
)(*);

182 *
‰ì_¨g
;

188 
	s‰ìext_πn
 {

189 (*
‰ì_func
)(*, );

190 *
‰ì_¨g
;

191 
size_¨g
;

194 #ifde‡
STREAMS_MEM_TRACE


209 #ifde‡
DEBUG


211 #i‡
_MIPS_SIM
 =
_ABI64


212 
	#MEM_TRACE_LOG_SIZE
 11

	)

214 
	#MEM_TRACE_LOG_SIZE
 7

	)

219 #i‡
_MIPS_SIM
 =
_ABI64


220 
	#MEM_TRACE_LOG_SIZE
 13

	)

222 
	#MEM_TRACE_LOG_SIZE
 7

	)

227 
	s°r_mem_åa˚_íåy
 {

228 
ty≥
;

229 *
¨g1
;

230 *
¨g2
;

231 
ã_∑d
;

234 
	s°r_mem_åa˚_log
 {

235 
woff
;

236 
é_∑d
[3];

237 
°r_mem_åa˚_íåy
 
íåy
[
MEM_TRACE_LOG_SIZE
];

245 
	#STR_MAXBSIZE
 
NBPP


	)

252 
	sd©ab
 {

254 
d©ab
 *
‰ìp
;

255 
‰ì_πn
 *
‰äp
;

256 
‰ìext_πn
 *
‰ä_exç
;

257 } 
db_f
;

258 *
db_ba£
;

259 *
db_lim
;

261 
db_ªf
;

262 
db_size
;

263 
db_ty≥
;

264 
db_ödex
;

266 
db_˝uid
;

267 
db_buf_˝uid
;

268 
db_∑d
;

270 
msgb
 *
db_msgaddr
;

271 
‰ì_πn
 
db_‰ä
;

273 #i‡
_MIPS_SIM
 !
_ABI64


274 
db_∑d2
[6];

277 #ifde‡
STREAMS_MEM_TRACE


278 
°r_mem_åa˚_log
 
åa˚log
;

285 
	#db_‰ìp
 
db_f
.
‰ìp


	)

286 
	#db_‰äp
 
db_f
.
‰äp


	)

287 
	#db_‰ä_exç
 
db_f
.
‰ä_exç


	)

294 
	smsgb
 {

295 
msgb
 *
b_√xt
;

296 
msgb
 *
b_¥ev
;

297 
msgb
 *
b_c⁄t
;

299 *
b_Ωå
;

300 *
b_w±r
;

302 
d©ab
 *
b_d©≠
;

304 
b_b™d
;

305 
b_∑d1
;

306 
b_Êag
;

308 
b_˝uid
;

309 
b_m›sÊag
;

311 
b_mbuf_ªf˘
;

312 #i‡
_MIPS_SIM
 =
_ABI64


313 
b_mbuf_∑d
;

315 
b_∑d3
[7];

318 #ifde‡
STREAMS_MEM_TRACE


319 
°r_mem_åa˚_log
 
åa˚log
;

323 
msgb
 
	tmblk_t
;

324 
d©ab
 
	tdblk_t
;

325 
‰ì_πn
 
	t‰ä_t
;

327 #ifde‡
_STRQ_TRACING


328 
	~<sys/¥oc.h
>

329 
	~<sys/kåa˚.h
>

335 
	#QUEUE_TRACE_SIZE
 1024

	)

336 
	#QUEUE_KTRACE_PUTQ
 1

	)

337 
	#QUEUE_KTRACE_GETQ
 2

	)

338 
	#QUEUE_KTRACE_ADD1
 3

	)

339 
	#QUEUE_KTRACE_ADD2
 4

	)

340 
	#QUEUE_KTRACE_SUB1
 5

	)

341 
	#QUEUE_KTRACE_SUB2
 6

	)

342 
	#QUEUE_KTRACE_ZERO
 7

	)

343 
	#QUEUE_KTRACE_PUTBQ
 8

	)

344 
	#QUEUE_KTRACE_INSQ
 9

	)

345 
	#QUEUE_KTRACE_RMVQ
 0xa

	)

346 
__°r_msgsize
(
mblk_t
 *);

347 
q_åa˚_putq
(
queue_t
 *, 
mblk_t
 *, 
ö°_t
 *);

348 
q_åa˚_putbq
(
queue_t
 *, 
mblk_t
 *, 
ö°_t
 *);

349 
q_åa˚_ösq
(
queue_t
 *, 
mblk_t
 *, mblk_à*, 
ö°_t
 *);

350 
q_åa˚_gëq
(
queue_t
 *, 
mblk_t
 *, 
ö°_t
 *);

351 
q_åa˚_rmvq
(
queue_t
 *, 
mblk_t
 *, 
ö°_t
 *);

352 
q_åa˚_add_1
(
queue_t
 *, 
ö°_t
 *);

353 
q_åa˚_add_2
(
queue_t
 *, 
ö°_t
 *);

354 
q_åa˚_sub_1
(
queue_t
 *, 
ö°_t
 *);

355 
q_åa˚_sub_2
(
queue_t
 *, 
ö°_t
 *);

356 
q_åa˚_zîo
(
queue_t
 *, 
ö°_t
 *);

362 
	#MSGMARK
 0x01

	)

363 
	#MSGNOLOOP
 0x02

	)

365 
	#MSGDELIM
 0x04

	)

366 
	#MSGNOGET
 0x08

	)

372 
	#M_DATA
 0x00

	)

373 
	#M_PROTO
 0x01

	)

378 
	#M_BREAK
 0x08

	)

379 
	#M_PASSFP
 0x09

	)

380 
	#M_EVENT
 0x0®

	)

381 
	#M_SIG
 0x0b

	)

382 
	#M_DELAY
 0x0¯

	)

383 
	#M_CTL
 0x0d

	)

384 
	#M_IOCTL
 0x0ê

	)

385 
	#M_SETOPTS
 0x10

	)

386 
	#M_RSE
 0x11

	)

391 
	#M_IOCACK
 0x81

	)

392 
	#M_IOCNAK
 0x82

	)

393 
	#M_PCPROTO
 0x83

	)

394 
	#M_PCSIG
 0x84

	)

395 
	#M_READ
 0x85

	)

396 
	#M_FLUSH
 0x86

	)

397 
	#M_STOP
 0x87

	)

398 
	#M_START
 0x88

	)

399 
	#M_HANGUP
 0x89

	)

400 
	#M_ERROR
 0x8®

	)

401 
	#M_COPYIN
 0x8b

	)

402 
	#M_COPYOUT
 0x8¯

	)

403 
	#M_IOCDATA
 0x8d

	)

404 
	#M_PCRSE
 0x8ê

	)

405 
	#M_STOPI
 0x8‡

	)

406 
	#M_STARTI
 0x90

	)

407 
	#M_PCEVENT
 0x91

	)

412 
	#QNORM
 0x00

	)

413 
	#QPCTL
 0x80

	)

418 
	siocblk
 {

419 
	gioc_cmd
;

420 
¸ed
 *
	gioc_¸
;

421 
uöt
 
	gioc_id
;

422 
uöt
 
	gioc_cou¡
;

423 
	gioc_îr‹
;

424 
	gioc_rvÆ
;

425 #i‡
_MIPS_SIM
 =
_ABI64


426 
	gioc_64bô
;

427 
	gioc_fûÀr
[3];

429 
	gioc_fûÀr
[4];

433 
	#ioc_uid
 
ioc_¸
->
¸_uid


	)

434 
	#ioc_gid
 
ioc_¸
->
¸_gid


	)

439 
	sc›yªq
 {

440 
	gcq_cmd
;

441 
¸ed
 *
	gcq_¸
;

442 
uöt
 
	gcq_id
;

443 
ˇddr_t
 
	gcq_addr
;

444 
uöt
 
	gcq_size
;

445 
	gcq_Êag
;

446 
mblk_t
 *
	gcq_¥iv©e
;

447 
	gcq_fûÀr
[4];

450 
	#cq_uid
 
cq_¸
->
¸_uid


	)

451 
	#cq_gid
 
cq_¸
->
¸_gid


	)

455 
	#STRCANON
 0x01

	)

457 
	#RECOPY
 0x02

	)

460 
	#STRCOPYTRANS
 0x10000000

	)

466 
	sc›yª•
 {

467 
	g˝_cmd
;

468 
¸ed
 *
	g˝_¸
;

469 
uöt
 
	g˝_id
;

470 
ˇddr_t
 
	g˝_rvÆ
;

472 
uöt
 
	g˝_∑d1
;

473 
	g˝_∑d2
;

474 
mblk_t
 *
	g˝_¥iv©e
;

475 #i‡
_MIPS_SIM
 =
_ABI64


476 
	g˝_64bô
;

477 
	g˝_fûÀr
[3];

479 
	g˝_fûÀr
[4];

483 
	#˝_uid
 
˝_¸
->
¸_uid


	)

484 
	#˝_gid
 
˝_¸
->
¸_gid


	)

490 
	s°r›ti⁄s
 {

491 
ul⁄g_t
 
	gso_Êags
;

492 
	gso_ªad›t
;

493 
ush‹t_t
 
	gso_wroff
;

494 
	gso_möpsz
;

495 
	gso_maxpsz
;

496 
ul⁄g_t
 
	gso_hiw©
;

497 
ul⁄g_t
 
	gso_low©
;

498 
	gso_b™d
;

499 #i‚de‡
_IRIX_LATER


500 
	gso_vtime
;

501 
	gso_to°›
;

508 
	#SO_ALL
 0x003‡

	)

509 
	#SO_READOPT
 0x0001

	)

510 
	#SO_WROFF
 0x0002

	)

511 
	#SO_MINPSZ
 0x0004

	)

512 
	#SO_MAXPSZ
 0x0008

	)

513 
	#SO_HIWAT
 0x0010

	)

514 
	#SO_LOWAT
 0x0020

	)

515 
	#SO_MREADON
 0x0040

	)

516 
	#SO_MREADOFF
 0x0080

	)

517 
	#SO_NDELON
 0x0100

	)

518 
	#SO_NDELOFF
 0x0200

	)

519 
	#SO_ISTTY
 0x0400

	)

520 
	#SO_ISNTTY
 0x0800

	)

521 
	#SO_TOSTOP
 0x1000

	)

522 
	#SO_TONSTOP
 0x2000

	)

523 
	#SO_BAND
 0x4000

	)

524 
	#SO_DELIM
 0x8000

	)

525 
	#SO_NODELIM
 0x010000

	)

526 
	#SO_STRHOLD
 0x020000

	)

527 
	#SO_NOSTRHOLD
 0x080000

	)

528 #i‚de‡
_IRIX_LATER


529 
	#SO_VTIME
 0x040000

	)

538 
	s°r_evmsg
 {

539 
	gsv_evít
;

540 
vnode
 *
	gsv_vp
;

541 
	gsv_eid
;

542 
	gsv_ev¥i
;

543 
	gsv_Êags
;

544 
uid_t
 
	gsv_uid
;

545 
pid_t
 
	gsv_pid
;

546 
ho°id_t
 
	gsv_ho°id
;

547 
	gsv_∑d
[4];

553 
	sqöô
 {

554 (*
	gqi_puç
)(
	gqueue_t
 *, 
	gmblk_t
 *);

555 (*
	gqi_§vp
)(
	gqueue_t
 *);

556 (*
	gqi_q›í
)(
	gqueue_t
 *, 
	gdev_t
 *, , ,

557 
	g¸ed
 *);

558 (*
	gqi_q˛o£
)(
	gqueue_t
 *, , 
	g¸ed
 *);

560 (*
	gqi_qadmö
)();

561 
moduÀ_öfo
 *
	gqi_möfo
;

562 
moduÀ_°©
 *
	gqi_m°©
;

570 
	#NOERROR
 (()-1)

	)

575 
	#MODOPEN
 0x1

	)

576 
	#CLONEOPEN
 0x2

	)

581 
	#BPRI_LO
 1

	)

582 
	#BPRI_MED
 2

	)

583 
	#BPRI_HI
 3

	)

588 
	#INFPSZ
 -1

	)

593 
	#FLUSHALL
 1

	)

594 
	#FLUSHDATA
 0

	)

599 
	#TRANSPARENT
 ()(-1)

	)

604 
	#STIPRI
 
PZERO
+3

	)

605 
	#STOPRI
 
PZERO
+3

	)

610 
	#STRHIGH
 5120

	)

611 
	#STRLOW
 1024

	)

616 
	#MAXIOCBSZ
 1024

	)

618 
°rhﬁdtime
;

626 
•l°r
();

631 
	#ˇ√«bÀ
(
q
Ë!((q)->
q_Êag
 & 
QNOENB
)

	)

636 
	#OTHERQ
(
q
Ë((q)->
q_Êag
&
QREADR
? (q)+1: (q)-1)

	)

637 
	#WR
(
q
Ë((q)+1)

	)

638 
	#RD
(
q
Ë((q)-1)

	)

639 
	#SAMESTR
(
q
Ë(((q)->
q_√xt
Ë&& (((q)->
q_Êag
&
QREADR
Ë=((q)->q_√xt->q_Êag&QREADR)))

	)

641 #i‚de‡
SAVE_PUTNEXT_Q_ADDRESS


642 #ifde‡
DEBUG


643 
	#SAVE_PUTNEXT_Q_ADDRESS
(
mp
, 
addr
) \

644 ((
mböfo
 *)(
mp
))->
puäext_q
 = ((*)())(
addr
)

	)

646 
	#SAVE_PUTNEXT_Q_ADDRESS
(
mp
, 
addr
)

	)

650 #i‚de‡
SAVE_PUTNEXT_QIPUTP_ADDRESS


651 #ifde‡
DEBUG


652 
	#SAVE_PUTNEXT_QIPUTP_ADDRESS
(
mp
, 
addr
) \

653 ((
mböfo
 *)(
mp
))->
puäext_qi_puç
 = ((*)())(
addr
)

	)

655 
	#SAVE_PUTNEXT_QIPUTP_ADDRESS
(
mp
, 
addr
)

	)

662 #ifde‡
STREAMS_DEBUG


663 
puäext_debug
(
queue_t
 *, 
mblk_t
 *);

665 
	#puäext
(
q
, 
mp
Ë
	`puäext_debug
(q, mp)

	)

667 
	#puäext
(
q
, 
mp
Ë((*(q)->
q_√xt
->
q_qöfo
->
qi_puç
)((q)->q_√xt, (mp)))

	)

674 
	#d©amsg
(
ty≥
Ë(—y≥Ë=
M_DATA
 || (ty≥Ë=
M_PROTO
 || (ty≥Ë=
M_PCPROTO
 || (ty≥Ë=
M_DELAY
)

	)

679 
	#que˛ass
(
bp
Ë(((bp)->
b_d©≠
->
db_ty≥
 >
QPCTL
Ë? QPCTL : 
QNORM
)

	)

684 
	#°ø 
(
a
Ë(
ˇddr_t
)((
__psöt_t
)◊Ë& ~((__psöt_t)-1))

	)

689 
	#bpsize
(
bp
Ë(()(bp->
b_d©≠
->
db_lim
 - bp->b_d©≠->
db_ba£
))

	)

694 
mblk_t
 *
Ælocb
(, 
uöt
);

695 
mblk_t
 *
esbÆloc
(*, , , 
‰ä_t
 *);

696 
toid_t
 
esbbˇŒ
(, (*)(), );

697 
ã°b
(, 
uöt
);

698 
toid_t
 
bufˇŒ
(
uöt
, , (*)(), );

699 
unbufˇŒ
(
toid_t
);

700 
‰ìb
(
mblk_t
 *);

701 
‰ìmsg
(
mblk_t
 *);

702 
mblk_t
 *
dupb
(mblk_t *);

703 
mblk_t
 *
dupmsg
(mblk_t *);

704 
mblk_t
 *
c›yb
(mblk_t *);

705 
mblk_t
 *
c›ymsg
(mblk_t *);

706 
lökb
(
mblk_t
 *, mblk_t *);

707 
mblk_t
 *
u∆ökb
(mblk_t *);

708 
mblk_t
 *
rmvb
(mblk_t *, mblk_t *);

709 
puŒupmsg
(
mblk_t
 *, );

710 
mblk_t
 *
msgpuŒup
(mblk_t *, );

711 
adjmsg
(
mblk_t
 *, );

712 
msgdsize
(
mblk_t
 *);

713 
mblk_t
 *
gëq
(
queue_t
 *);

714 
rmvq
(
queue_t
 *, 
mblk_t
 *);

715 
Êushq
(
queue_t
 *, );

716 
Êushb™d
(
queue_t
 *, , );

717 
ˇ≈ut
(
queue_t
 *);

718 
ˇ≈uäext
(
queue_t
 *);

719 
bˇ≈ut
(
queue_t
 *, );

720 
bˇ≈uäext
(
queue_t
 *, );

721 
put
(
queue_t
 *, 
mblk_t
 *);

722 
putq
(
queue_t
 *, 
mblk_t
 *);

723 
putbq
(
queue_t
 *, 
mblk_t
 *);

724 
ösq
(
queue_t
 *, 
mblk_t
 *, mblk_t *);

725 
put˘l
(
queue_t
 *, );

726 
puäext˘l
(
queue_t
 *, );

727 
put˘l1
(
queue_t
 *, , );

728 
puäext˘l1
(
queue_t
 *, , );

729 
queue_t
 *
backq
(queue_t *);

730 
qª∂y
(
queue_t
 *, 
mblk_t
 *);

731 
qíabÀ
(
queue_t
 *);

732 
qsize
(
queue_t
 *);

733 
n€«bÀ
(
queue_t
 *);

734 
íabÀok
(
queue_t
 *);

735 
°rq£t
(
queue_t
 *, 
qfõlds_t
, , );

736 
°rqgë
(
queue_t
 *, 
qfõlds_t
, , *);

737 
‰ìze°r
(
queue_t
 *);

738 
un‰ìze°r
(
queue_t
 *, );

739 
q¥ocs⁄
(
queue_t
 *);

740 
q¥ocsoff
(
queue_t
 *);

741 
pcmsg
();

743 #i‚de‡
_IRIX_LATER


744 
°rdrv_push
(
queue_t
 *, *, 
dev_t
 *, 
¸ed
 *);

745 
sdrv_îr‹
(
queue_t
 *, 
mblk_t
 *);

746 
sdrv_Êush
(
queue_t
 *, 
mblk_t
 *);

747 
mblk_t
 *
°r_Ælocb
(, 
queue_t
 *, 
uöt
);

748 
°r_unbˇŒ
(
queue_t
 *);

749 
°r_c⁄msg
(
mblk_t
 **, mblk_t **, mblk_t *);

755 
n°Ωush
;

756 
°r°©
 
°r°
;

758 #ifde‡
__˝lu•lus


	@/usr/include/sys/syslog.h

1 #i‚de‡
_SYS_SYSLOG_H


2 
	#_SYS_SYSLOG_H


	)

35 
	#LOG_EMERG
 0

	)

36 
	#LOG_ALERT
 1

	)

37 
	#LOG_CRIT
 2

	)

38 
	#LOG_ERR
 3

	)

39 
	#LOG_WARNING
 4

	)

40 
	#LOG_NOTICE
 5

	)

41 
	#LOG_INFO
 6

	)

42 
	#LOG_DEBUG
 7

	)

44 
	#LOG_PRIMASK
 0x07

	)

46 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

47 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë(((ÁcË<< 3Ë| (¥i))

	)

49 #i‡
_SGIAPI
 && 
deföed
(
SYSLOG_NAMES
)

50 
	#INTERNAL_NOPRI
 0x10

	)

52 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
, 0)

	)

53 
	s_code
 {

54 *
	mc_«me
;

55 
	mc_vÆ
;

56 } 
	tCODE
;

58 
CODE
 
	g¥i‹ôy«mes
[] = {

59 "Æît", 
LOG_ALERT
,

60 "¸ô", 
LOG_CRIT
,

61 "debug", 
LOG_DEBUG
,

62 "emîg", 
LOG_EMERG
,

63 "îr", 
LOG_ERR
,

64 "îr‹", 
LOG_ERR
,

65 "öfo", 
LOG_INFO
,

66 "n⁄e", 
INTERNAL_NOPRI
,

67 "nŸi˚", 
LOG_NOTICE
,

68 "∑nic", 
LOG_EMERG
,

69 "w¨n", 
LOG_WARNING
,

70 "w¨nög", 
LOG_WARNING
,

71 
NULL
, -1,

76 
	#LOG_KERN
 (0<<3Ë

	)

77 
	#LOG_USER
 (1<<3Ë

	)

78 
	#LOG_MAIL
 (2<<3Ë

	)

79 
	#LOG_DAEMON
 (3<<3Ë

	)

80 
	#LOG_AUTH
 (4<<3Ë

	)

81 
	#LOG_SYSLOG
 (5<<3Ë

	)

82 
	#LOG_LPR
 (6<<3Ë

	)

83 
	#LOG_NEWS
 (7<<3Ë

	)

84 
	#LOG_UUCP
 (8<<3Ë

	)

85 
	#LOG_CRON
 (9<<3Ë

	)

86 
	#LOG_AUDIT
 (13<<3Ë

	)

87 
	#LOG_LFMT
 (14<<3Ë

	)

89 
	#LOG_LOCAL0
 (16<<3Ë

	)

90 
	#LOG_LOCAL1
 (17<<3Ë

	)

91 
	#LOG_LOCAL2
 (18<<3Ë

	)

92 
	#LOG_LOCAL3
 (19<<3Ë

	)

93 
	#LOG_LOCAL4
 (20<<3Ë

	)

94 
	#LOG_LOCAL5
 (21<<3Ë

	)

95 
	#LOG_LOCAL6
 (22<<3Ë

	)

96 
	#LOG_LOCAL7
 (23<<3Ë

	)

98 
	#LOG_NFACILITIES
 24

	)

99 
	#LOG_FACMASK
 0x03f8

	)

101 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

103 #i‡
_SGIAPI
 && 
deföed
(
SYSLOG_NAMES
)

104 
CODE
 
	gÁcûôy«mes
[] = {

105 "audô", 
LOG_AUDIT
,

106 "auth", 
LOG_AUTH
,

107 "¸⁄", 
LOG_CRON
,

108 "d´m⁄", 
LOG_DAEMON
,

109 "kîn", 
LOG_KERN
,

110 "Õr", 
LOG_LPR
,

111 "maû", 
LOG_MAIL
,

112 "m¨k", 
INTERNAL_MARK
,

113 "√ws", 
LOG_NEWS
,

114 "ßt", 
LOG_AUDIT
,

115 "£curôy", 
LOG_AUTH
,

116 "sy¶og", 
LOG_SYSLOG
,

117 "u£r", 
LOG_USER
,

118 "uu˝", 
LOG_UUCP
,

119 "loˇl0", 
LOG_LOCAL0
,

120 "loˇl1", 
LOG_LOCAL1
,

121 "loˇl2", 
LOG_LOCAL2
,

122 "loˇl3", 
LOG_LOCAL3
,

123 "loˇl4", 
LOG_LOCAL4
,

124 "loˇl5", 
LOG_LOCAL5
,

125 "loˇl6", 
LOG_LOCAL6
,

126 "loˇl7", 
LOG_LOCAL7
,

127 
NULL
, -1,

135 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

136 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

144 
	#LOG_PID
 0x01

	)

145 
	#LOG_CONS
 0x02

	)

146 
	#LOG_ODELAY
 0x04

	)

147 
	#LOG_NDELAY
 0x08

	)

148 
	#LOG_NOWAIT
 0x10

	)

149 
	#LOG_PERROR
 0x20

	)

	@/usr/include/sys/sysmacros.h

21 #i‚de‡
__SYSMACROS_H__


22 
	#__SYSMACROS_H__


	)

24 
	~<sys/∑øm.h
>

33 #ifde‡
CPSSHIFT


34 
	#˘os
(
x
Ë(((xË+ (
NCPS
-1)Ë>> 
CPSSHIFT
)

	)

35 
	#˘o°
(
x
Ë((xË>> 
CPSSHIFT
)

	)

36 
	#°oc
(
x
Ë((xË<< 
CPSSHIFT
)

	)

38 
	#˘os
(
x
Ë(((xË+ (
NCPS
-1)Ë/ NCPS)

	)

39 
	#˘o°
(
x
Ë((xË/ 
NCPS
)

	)

40 
	#°oc
(
x
Ë((xË* 
NCPS
)

	)

44 
	#btŸp
(
x
Ë(–
__psunsig√d_t
)(x)>>
BPTSHFT
)

	)

47 #ifde‡
BPSSHIFT


48 
	#°ob
(
x
Ë((
__psunsig√d_t
)(xË<< 
BPSSHIFT
)

	)

49 
	#btos
(
x
Ë(((
__psunsig√d_t
)(xË+ (
NBPS
-1)Ë>> 
BPSSHIFT
)

	)

50 
	#bto°
(
x
Ë((
__psunsig√d_t
)(xË>> 
BPSSHIFT
)

	)

52 
	#°ob
(
x
Ë((
__psunsig√d_t
)(xË* 
NBPS
)

	)

53 
	#btos
(
x
Ë(((
__psunsig√d_t
)(xË+ (
NBPS
-1)Ë/ NBPS)

	)

54 
	#bto°
(
x
Ë(((
__psunsig√d_t
)(x)Ë/ 
NBPS
)

	)

58 
	#ßme£gmít
(
a
,
b
) \

59 (((
__psunsig√d_t
)(
a
Ë& ~
SOFFMASK
Ë=((__psunsig√d_t)(
b
Ë& ~SOFFMASK))

	)

62 
	#num∑ges
(
v
,
l
Ë
	`btoc
((((
__psunsig√d_t
)(v)Ë& (
NBPC
 - 1)Ë+ (l))

	)

63 
	#io_num∑ges
(
v
,
l
Ë
	`io_btoc
((((
__psunsig√d_t
)(v)Ë& (
IO_NBPC
 - 1)Ë+ (l))

	)

66 #ifde‡
INOSHIFT


67 
	#ôod
(
x
Ë(
daddr_t
)((()(x)+(2*
INOPB
-1))>>
INOSHIFT
)

	)

69 
	#ôod
(
x
Ë(
daddr_t
)((()(x)+(2*
INOPB
-1))/INOPB)

	)

73 #ifde‡
INOSHIFT


74 
	#ôoo
(
x
Ë()((()(x)+(2*
INOPB
-1))&(INOPB-1))

	)

76 
	#ôoo
(
x
Ë()((()(x)+(2*
INOPB
-1))%INOPB)

	)

80 #ifde‡
BPCSHIFT


81 
	#˘ob
(
x
Ë((
__psunsig√d_t
)(x)<<
BPCSHIFT
)

	)

82 
	#˘ob64
(
x
Ë((
__uöt64_t
)(x)<<
BPCSHIFT
)

	)

83 
	#io_˘ob
(
x
Ë((
__psunsig√d_t
)(x)<<
IO_BPCSHIFT
)

	)

85 
	#˘ob
(
x
Ë((
__psunsig√d_t
)(x)*
NBPC
)

	)

86 
	#˘ob64
(
x
Ë((
__uöt64_t
)(x)*
NBPC
)

	)

87 
	#io_˘ob
(
x
Ë((
__psunsig√d_t
)(x)*
IO_NBPC
)

	)

91 #ifde‡
BPCSHIFT


92 
	#btoc
(
x
Ë(((
__psunsig√d_t
)(x)+(
NBPC
-1))>>
BPCSHIFT
)

	)

93 
	#bto˘
(
x
Ë((
__psunsig√d_t
)(x)>>
BPCSHIFT
)

	)

94 
	#btoc64
(
x
Ë(((
__uöt64_t
)(x)+(
NBPC
-1))>>
BPCSHIFT
)

	)

95 
	#bto˘64
(
x
Ë((
__uöt64_t
)(x)>>
BPCSHIFT
)

	)

96 
	#io_btoc
(
x
Ë(((
__psunsig√d_t
)(x)+(
IO_NBPC
-1))>>
IO_BPCSHIFT
)

	)

97 
	#io_bto˘
(
x
Ë((
__psunsig√d_t
)(x)>>
IO_BPCSHIFT
)

	)

99 
	#btoc
(
x
Ë(((
__psunsig√d_t
)(x)+(
NBPC
-1))/NBPC)

	)

100 
	#bto˘
(
x
Ë((
__psunsig√d_t
)(x)/
NBPC
)

	)

101 
	#btoc64
(
x
Ë(((
__uöt64_t
)(x)+(
NBPC
-1))/NBPC)

	)

102 
	#bto˘64
(
x
Ë((
__uöt64_t
)(x)/
NBPC
)

	)

103 
	#io_btoc
(
x
Ë(((
__psunsig√d_t
)(x)+(
IO_NBPC
-1))/IO_NBPC)

	)

104 
	#io_bto˘
(
x
Ë((
__psunsig√d_t
)(x)/
IO_NBPC
)

	)

108 #ifde‡
BPCSHIFT


109 
	#of·oc
(
x
Ë(((
__uöt64_t
)(x)+(
NBPC
-1))>>
BPCSHIFT
)

	)

110 
	#of·o˘
(
x
Ë((
off_t
)(x)>>
BPCSHIFT
)

	)

112 
	#of·oc
(
x
Ë(((
__uöt64_t
)(x)+(
NBPC
-1))/NBPC)

	)

113 
	#of·o˘
(
x
Ë((
off_t
)(x)/
NBPC
)

	)

117 #ifde‡
BPCSHIFT


118 
	#˘ooff
(
x
Ë((
off_t
)(x)<<
BPCSHIFT
)

	)

120 
	#˘ooff
(
x
Ë((
off_t
)(x)*
NBPC
)

	)

123 
	#O_BITSMAJOR
 7

	)

124 
	#O_BITSMINOR
 8

	)

125 
	#O_MAXMAJ
 0x7‡

	)

126 
	#O_MAXMIN
 0xf‡

	)

128 
	#L_BITSMAJOR
 14

	)

129 
	#L_BITSMINOR
 18

	)

130 
	#L_MAXMAJ
 0x1f‡

	)

135 
	#L_MAXMIN
 0x3fff‡

	)

137 #ifde‡
_KERNEL


144 
MAJOR
[];

145 
	#maj‹
(
x
Ë()(
MAJOR
[()((x)>>
L_BITSMINOR
Ë& 
L_MAXMAJ
])

	)

146 
	#bmaj‹
(
x
Ë()(
MAJOR
[()((x)>>
L_BITSMINOR
Ë& 
L_MAXMAJ
])

	)

152 
	#maj‹
(
x
Ë()((()(x)>>
L_BITSMINOR
Ë& 
L_MAXMAJ
)

	)

157 
	#mö‹
(
x
Ë()((x)&
L_MAXMIN
)

	)

160 
	#makedev
(
x
,
y
Ë(
dev_t
)(((x)<<
L_BITSMINOR
Ë| (y&
L_MAXMIN
))

	)

167 
	#emaj‹
(
x
Ë()((()(x)>>
L_BITSMINOR
Ë& 
L_MAXMAJ
)

	)

168 
	#emö‹
(
x
Ë()((x)&
L_MAXMIN
)

	)

	@/usr/include/sys/termio.h

7 #i‚de‡
_SYS_TERMIO_H


8 
	#_SYS_TERMIO_H


	)

10 
	~<°™d¨ds.h
>

11 
	~<sys/ãrmios.h
>

22 
	#CLNEXT
 
	`CTRL
('v')

	)

23 
	#CWERASE
 
	`CTRL
('w')

	)

24 
	#CFLUSHO
 
	`CTRL
('o')

	)

25 
	#CFLUSH
 
CFLUSHO


	)

26 
	#CRPRNT
 
	`CTRL
('r')

	)

27 
	#CDSUSP
 
	`CTRL
('y'Ë

	)

29 
	#__OLD_SSPEED
 
__OLD_B9600


	)

30 
	#__NEW_SSPEED
 
__NEW_B9600


	)

31 
	#SSPEED
 
B9600


	)

38 
	sãrmio
 {

39 
tcÊag_t
 
	mc_iÊag
;

40 
tcÊag_t
 
	mc_oÊag
;

41 
tcÊag_t
 
	mc_cÊag
;

42 
tcÊag_t
 
	mc_lÊag
;

43 #i‡!
deföed
(
_OLD_TERMIOS
Ë&& 
_NO_ABIAPI


44 
•ìd_t
 
	mc_o•ìd
;

45 
•ìd_t
 
	mc_i•ìd
;

47 
	mc_löe
;

48 
cc_t
 
	mc_cc
[
NCCS
];

51 
	s__√w_ãrmio
 {

52 
tcÊag_t
 
	mc_iÊag
;

53 
tcÊag_t
 
	mc_oÊag
;

54 
tcÊag_t
 
	mc_cÊag
;

55 
tcÊag_t
 
	mc_lÊag
;

56 
•ìd_t
 
	mc_o•ìd
;

57 
•ìd_t
 
	mc_i•ìd
;

58 
	mc_löe
;

59 
cc_t
 
	mc_cc
[
NCCS
];

62 
	s__ﬁd_ãrmio
 {

63 
tcÊag_t
 
	mc_iÊag
;

64 
tcÊag_t
 
	mc_oÊag
;

65 
tcÊag_t
 
	mc_cÊag
;

66 
tcÊag_t
 
	mc_lÊag
;

67 
	mc_löe
;

68 
cc_t
 
	mc_cc
[
NCCS
];

74 
	#TERM_NONE
 0

	)

75 
	#TERM_TEC
 1

	)

76 
	#TERM_V61
 2

	)

77 
	#TERM_V10
 3

	)

78 
	#TERM_TEX
 4

	)

79 
	#TERM_D40
 5

	)

80 
	#TERM_H45
 6

	)

81 
	#TERM_D42
 7

	)

86 
	#TM_NONE
 0000

	)

87 
	#TM_SNL
 0001

	)

88 
	#TM_ANL
 0002

	)

89 
	#TM_LCF
 0004

	)

90 
	#TM_CECHO
 0010

	)

91 
	#TM_CINVIS
 0020

	)

92 
	#TM_SET
 0200

	)

98 #unde‡
°_Êgs


99 #unde‡
°_ãrmt


100 #unde‡
°_¸ow


101 #unde‡
°_ccﬁ


102 #unde‡
°_vrow


103 #unde‡
°_Ãow


105 
	sãrmcb
 {

106 
	m°_Êgs
;

107 
	m°_ãrmt
;

108 
	m°_¸ow
;

109 
	m°_ccﬁ
;

110 
	m°_vrow
;

111 
	m°_Ãow
;

	@/usr/include/sys/tfp.h

1 #i‚de‡
__SYS_TFP_H__


2 
	#__SYS_TFP_H__


	)

25 
	~<sys/mùs_addr•a˚.h
>

27 #i‡
SABLE_RTL
 && !
SABLE_CCUART_INT


31 
	#IP21_NO_CCUART_INT
 1

	)

42 
	#KV0BASE
 0x4000000000000000

	)

43 
	#KPBASE
 0x8000000000000000

	)

44 
	#KPUNCACHED_BASE
 0x9000000000000000

	)

45 
	#KPCACHED_BASE
 0xa800000000000000

	)

46 
	#KV1BASE
 0xc000000000000000

	)

51 
	#SIZE_EXCVEC
 0x400

	)

52 
	#R_VEC
 (
K1BASE
+0x1fc00000Ë

	)

54 #ifde‡
_LANGUAGE_ASSEMBLY


55 
	#UT_VEC
 "nŸáà®c⁄°™àaddªss.Ñód C0_TøpBa£Ñegi°î."

	)

56 
	#KV0T_VEC
 "nŸáà®c⁄°™àaddªss.Ñód C0_TøpBa£Ñegi°î."

	)

57 
	#KV1T_VEC
 "nŸáà®c⁄°™àaddªss.Ñód C0_TøpBa£Ñegi°î."

	)

58 
	#E_VEC
 "nŸáà®c⁄°™àaddªss.Ñód C0_TøpBa£Ñegi°î."

	)

61 #ifde‡
_LANGUAGE_C


63 
	~<sys/ty≥s.h
>

65 
__psunsig√d_t
 
gë_å≠ba£
();

66 
£t_å≠ba£
(
__psunsig√d_t
);

67 
£t_k±bl
(
__psunsig√d_t
);

69 
	#UT_VEC
 (
	`gë_å≠ba£
()+0x000Ë

	)

70 
	#KV0T_VEC
 (
	`gë_å≠ba£
()+0x400Ë

	)

71 
	#KV1T_VEC
 (
	`gë_å≠ba£
()+0x800Ë

	)

72 
	#E_VEC
 (
	`gë_å≠ba£
()+0xc00Ë

	)

79 
	#MINCACHE
 (2*1024*1024)

	)

80 
	#MAXCACHE
 (4*1024*1024)

	)

82 
	#MAXPCACHESIZE
 (16*1024)

	)

83 #if 
_PAGESZ
 > 
MAXPCACHESIZE


84 
	#CACHECOLORSIZE
 1

	)

86 
	#CACHECOLORSIZE
 (
MAXPCACHESIZE
/
NBPP
)

	)

88 
	#CACHECOLORMASK
 (
CACHECOLORSIZE
 - 1)

	)

93 
	#NTLBENTRIES
 128

	)

94 
	#NTLBSETS
 3

	)

104 
	#TLBRANDOMBASE
 0

	)

105 
	#NRANDOMENTRIES
 
NTLBENTRIES


	)

107 
	#TLBFLUSH_NONPDA
 1

	)

108 
	#TLBFLUSH_NONKERN
 0

	)

109 
	#TLBFLUSH_RANDOM
 0

	)

111 
	#TLBINDEX
(
vaddr
,
pid
Ë((
	`≤um
(vaddrË^ (pid)Ë& (
NTLBENTRIES
-1))

	)

117 #i‡
_PAGESZ
==4096

118 
	#TLBHI_VPNMASK
 0xfffffffffffff000

	)

119 
	#TLBHI_VPNSHIFT
 12

	)

121 #i‡
_PAGESZ
==16384

122 
	#TLBHI_VPNMASK
 0xffffffffffffc000

	)

123 
	#TLBHI_VPNSHIFT
 14

	)

125 
	#TLBHI_PIDMASK
 0xff0

	)

126 
	#TLBHI_PIDSHIFT
 4

	)

127 
	#TLBHI_NPID
 255

	)

128 
	#TLBHI_REGIONSHIFT
 62

	)

129 #ifde‡
_LANGUAGE_C


130 
	#TLBHI_REGIONMASK
 (3L<<
TLBHI_REGIONSHIFT
)

	)

132 
	#TLBHI_REGIONMASK
 (3<<
TLBHI_REGIONSHIFT
)

	)

135 
	#TLBLO_PFNMASK
 0xfffffff000

	)

136 
	#TLBLO_PFNSHIFT
 12

	)

137 
	#TLBLO_CACHMASK
 0xe00

	)

138 
	#TLBLO_CACHSHIFT
 9

	)

139 
	#TLBLO_UNC_PROCORD
 0x0

	)

140 
	#TLBLO_UNC_SEQORD
 0x400

	)

141 
	#TLBLO_NONCOHRNT
 0x600

	)

142 
	#TLBLO_COHRNT_EXL
 0x800

	)

143 
	#TLBLO_COHRNT_EXLWR
 0xA00

	)

144 
	#TLBLO_D
 0x100

	)

145 
	#TLBLO_V
 0x80

	)

146 
	#TLBLO_G
 0

	)

149 
	#TLBLO_UNCACHED
 
TLBLO_UNC_SEQORD


	)

151 
	#TLBSET_PROBE
 0x8000000000000000

	)

152 
	#TLBSET_MASK
 0x3

	)

154 
	#ICACHE_NPID
 255

	)

156 
	#SHIFTAMT_MASK
 0xf

	)

158 
	#WIRED_MASK
 0x7f

	)

159 
	#WIRED_VMASK
 0x80

	)

160 
	#WIRED_SHIFT0
 0

	)

161 
	#WIRED_SHIFT1
 8

	)

162 
	#WIRED_SHIFT2
 16

	)

163 
	#WIRED_SHIFT3
 24

	)

165 
	#BADPADDR_PAMASK
 0xffffffffff

	)

166 
	#BADPADDR_SYNSHIFT
 60

	)

167 
	#BADPADDR_SYNMASK
 (0xf<<
BADPADDR_SYNSHIFT
)

	)

172 
	#SR_DM
 0x10000000000

	)

173 
	#SR_KPSSHIFT
 36

	)

174 
	#SR_KPSMASK
 (0xfLL<<
SR_KPSSHIFT
Ë

	)

175 
	#SR_UPSSHIFT
 32

	)

176 
	#SR_UPSMASK
 (0xfLL<<
SR_UPSSHIFT
Ë

	)

177 
	#SR_CUMASK
 0x30000000

	)

178 
	#SR_CU1
 0x20000000

	)

179 
	#SR_CU0
 0x10000000

	)

180 
	#SR_FR
 0x04000000

	)

181 
	#SR_RE
 0x02000000

	)

185 
	#SR_UPS_4K
 0x0000000000000000

	)

186 
	#SR_UPS_8K
 0x0000000100000000

	)

187 
	#SR_UPS_16K
 0x0000000200000000

	)

188 
	#SR_UPS_64K
 0x0000000300000000

	)

189 
	#SR_UPS_1M
 0x0000000400000000

	)

190 
	#SR_UPS_4M
 0x0000000500000000

	)

191 
	#SR_UPS_16M
 0x0000000600000000

	)

192 
	#SR_KPS_4K
 0x0000000000000000

	)

193 
	#SR_KPS_8K
 0x0000001000000000

	)

194 
	#SR_KPS_16K
 0x0000002000000000

	)

195 
	#SR_KPS_64K
 0x0000003000000000

	)

196 
	#SR_KPS_1M
 0x0000004000000000

	)

197 
	#SR_KPS_4M
 0x0000005000000000

	)

198 
	#SR_KPS_16M
 0x0000006000000000

	)

200 #i‡
_PAGESZ
==4096

201 
	#SR_PAGESIZE
 (
SR_UPS_4K
|
SR_KPS_4K
)

	)

203 #i‡
_PAGESZ
==16384

204 
	#SR_PAGESIZE
 (
SR_UPS_16K
|
SR_KPS_16K
)

	)

213 
	#SR_DEFAULT
 (
SR_PAGESIZE
|
SR_CU1
)

	)

214 
	#SR_KERN_USRKEEP
 (
SR_DM
|
SR_FR
)

	)

215 
	#SR_KERN_SET
 (
SR_PAGESIZE
|
SR_CU1
)

	)

221 
	#SR_IMASK
 0x0007ff00

	)

222 
	#SR_IMASK11
 0x00000000

	)

223 
	#SR_IMASK10
 0x00040000

	)

224 
	#SR_IMASK9
 0x00060000

	)

225 
	#SR_IMASK8
 0x00070000

	)

226 
	#SR_IMASK7
 0x00078000

	)

227 
	#SR_IMASK6
 0x0007c000

	)

228 
	#SR_IMASK5
 0x0007e000

	)

229 
	#SR_IMASK4
 0x0007f000

	)

230 
	#SR_IMASK3
 0x0007f800

	)

231 
	#SR_IMASK2
 0x0007fc00

	)

232 
	#SR_IMASK1
 0x0007„00

	)

233 
	#SR_IMASK0
 0x0007ff00

	)

234 #i‡
IP21_NO_CCUART_INT


235 #unde‡
SR_IMASK


236 #unde‡
SR_IMASK4


237 #unde‡
SR_IMASK3


238 #unde‡
SR_IMASK2


239 #unde‡
SR_IMASK1


240 #unde‡
SR_IMASK0


241 
	#SR_IMASK
 0x0007ef00

	)

242 
	#SR_IMASK4
 0x0007e000

	)

243 
	#SR_IMASK3
 0x0007e800

	)

244 
	#SR_IMASK2
 0x0007ec00

	)

245 
	#SR_IMASK1
 0x0007ì00

	)

246 
	#SR_IMASK0
 0x0007ef00

	)

249 
	#SR_IBIT11
 0x00040000

	)

250 
	#SR_IBIT10
 0x00020000

	)

251 
	#SR_IBIT9
 0x00010000

	)

252 
	#SR_IBIT8
 0x00008000

	)

253 
	#SR_IBIT7
 0x00004000

	)

254 
	#SR_IBIT6
 0x00002000

	)

255 
	#SR_IBIT5
 0x00001000

	)

256 
	#SR_IBIT4
 0x00000800

	)

257 
	#SR_IBIT3
 0x00000400

	)

258 
	#SR_IBIT2
 0x00000200

	)

259 
	#SR_IBIT1
 0x00000100

	)

261 
	#SR_XX
 0x00000040

	)

262 
	#SR_UX
 0x00000020

	)

263 
	#SR_KU
 0x00000010

	)

264 
	#SR_PREVMODE
 
SR_KU


	)

265 
	#SR_KSU_MSK
 
SR_KU


	)

266 
	#SR_KSU_USR
 
SR_KU


	)

267 
	#SR_EXL
 0x00000002

	)

268 
	#SR_IE
 0x00000001

	)

269 
	#SR_IEC
 
SR_IE


	)

270 
	#SR_UXADDR
 
SR_UX


	)

271 
	#SR_IMASKSHIFT
 8

	)

272 
	#SR_KADDR
 0

	)

273 
	#SR_KX
 0

	)

278 
	#CAUSE_BD
 0x8000000000000000

	)

279 
	#CAUSE_CEMASK
 0x10000000

	)

280 
	#CAUSE_CESHIFT
 28

	)

281 
	#CAUSE_NMI
 0x08000000

	)

282 
	#CAUSE_BE
 0x04000000

	)

283 
	#CAUSE_VCI
 0x02000000

	)

284 
	#CAUSE_FPI
 0x01000000

	)

287 
	#CAUSE_IP11
 0x00040000

	)

288 
	#CAUSE_IP10
 0x00020000

	)

289 
	#CAUSE_IP9
 0x00010000

	)

290 
	#CAUSE_IP8
 0x00008000

	)

291 
	#CAUSE_IP7
 0x00004000

	)

292 
	#CAUSE_IP6
 0x00002000

	)

293 
	#CAUSE_IP5
 0x00001000

	)

294 
	#CAUSE_IP4
 0x00000800

	)

295 
	#CAUSE_IP3
 0x00000400

	)

296 
	#CAUSE_SW2
 0x00000200

	)

297 
	#CAUSE_SW1
 0x00000100

	)

299 
	#CAUSE_IPMASK
 0x0007FF00

	)

300 
	#CAUSE_IPSHIFT
 8

	)

302 
	#CAUSE_EXCMASK
 0x000000f8

	)

303 
	#CAUSE_EXCSHIFT
 3

	)

305 
	#CAUSE_BERRINTR
 
CAUSE_BE


	)

307 
	#£tso·˛ock
(Ë
	`sú⁄
(
CAUSE_SW1
)

	)

308 
	#£tso·√t
(Ë
	`sú⁄
(
CAUSE_SW2
)

	)

309 
	#ackso·˛ock
(Ë
	`súoff
(
CAUSE_SW1
)

	)

310 
	#ackso·√t
(Ë
	`súoff
(
CAUSE_SW2
)

	)

314 
	#EXC_CODE
(
x
Ë((x)<<3)

	)

317 
	#EXC_INT
 
	`EXC_CODE
(0Ë

	)

318 
	#EXC_MOD
 
	`EXC_CODE
(1Ë

	)

319 
	#EXC_RMISS
 
	`EXC_CODE
(2Ë

	)

320 
	#EXC_WMISS
 
	`EXC_CODE
(3Ë

	)

321 
	#EXC_RADE
 
	`EXC_CODE
(4Ë

	)

322 
	#EXC_WADE
 
	`EXC_CODE
(5Ë

	)

323 
	#EXC_IBE
 
	`EXC_CODE
(6Ë

	)

324 
	#EXC_DBE
 
	`EXC_CODE
(7Ë

	)

325 
	#EXC_SYSCALL
 
	`EXC_CODE
(8Ë

	)

326 
	#EXC_BREAK
 
	`EXC_CODE
(9Ë

	)

327 
	#EXC_II
 
	`EXC_CODE
(10Ë

	)

328 
	#EXC_CPU
 
	`EXC_CODE
(11Ë

	)

329 
	#EXC_OV
 
	`EXC_CODE
(12Ë

	)

330 
	#EXC_TRAP
 
	`EXC_CODE
(13Ë

	)

331 
	#EXC_TLBX
 
	`EXC_CODE
(30Ë

	)

334 
	#SEXC_SEGV
 
	`EXC_CODE
(32Ë

	)

335 
	#SEXC_RESCHED
 
	`EXC_CODE
(33Ë

	)

336 
	#SEXC_PAGEIN
 
	`EXC_CODE
(34Ë

	)

337 
	#SEXC_CPU
 
	`EXC_CODE
(35Ë

	)

338 
	#SEXC_BUS
 
	`EXC_CODE
(36Ë

	)

339 
	#SEXC_KILL
 
	`EXC_CODE
(37Ë

	)

340 
	#SEXC_WATCH
 
	`EXC_CODE
(38Ë

	)

341 
	#SEXC_UTINTR
 
	`EXC_CODE
(41Ë

	)

344 
	#TRAPBASE_BMASK
 0xfffffffff000

	)

345 
	#TRAPBASE_CACHSHIFT
 59

	)

346 
	#TRAPBASE_CACHMASK
 (0x7<<
TRAPBASE_CACHSHIFT
Ë

	)

347 
	#TRAPBASE_REGSHIFT
 62

	)

348 
	#TRAPBASE_REGMASK
 (0x3<<
TRAPBASE_REGSHIFT
Ë

	)

350 
	#ICACHE_ASIDSHIFT
 40

	)

351 
	#ICACHE_ASIDMASK
 (0xff<<
ICACHE_ASIDSHIFT
)

	)

352 
	#ICACHE_NASID
 256

	)

353 
	#ICACHE_SIZE
 16384

	)

354 
	#ICACHE_LINESIZE
 32

	)

355 
	#ICACHE_LINEMASK
 31

	)

357 
	#DCACHE_HIT
 (1<<63Ë

	)

358 
	#DCACHE_VMASK
 (0xf<<55Ë

	)

359 
	#DCACHE_TAGMASK
 0xfffffff000

	)

360 
	#DCACHE_E
 0x800

	)

361 
	#DCACHE_LINESIZE
 32

	)

362 
	#DCACHE_LINEMASK
 31

	)

364 
	#CONFIG_SMM
 0x400000000

	)

365 
	#CONFIG_ICE
 0x200000000

	)

366 
	#CONFIG_PM
 0x100000000

	)

367 
	#CONFIG_BE
 0x00008000

	)

368 
	#CONFIG_IC
 0x00000e00

	)

369 
	#CONFIG_DC
 0x000001c0

	)

370 
	#CONFIG_IB
 0x00000020

	)

371 
	#CONFIG_DB
 0x00000010

	)

372 
	#CONFIG_IC_SHFT
 9

	)

373 
	#CONFIG_DC_SHFT
 6

	)

374 
	#CONFIG_BE_SHFT
 15

	)

377 
	#C0_IMPMASK
 0xff00

	)

378 
	#C0_IMPSHIFT
 8

	)

379 
	#C0_REVMASK
 0xff

	)

380 
	#C0_MAJREVMASK
 0xf0

	)

381 
	#C0_MAJREVSHIFT
 4

	)

382 
	#C0_MINREVMASK
 0xf

	)

389 
	#C0_COM
 0x01000000

	)

390 
	#C0_READ
 
C0_COM
 | 0x01

	)

391 
	#C0_WRITE
 
C0_COM
 | 0x02

	)

392 
	#C0_PROBE
 
C0_COM
 | 0x08

	)

398 
	#C0_WRITEI
 
C0_WRITE


	)

399 
	#C0_WRITER
 
C0_WRITE


	)

400 
	#C0_READI
 
C0_READ


	)

406 #ifde‡
_LANGUAGE_ASSEMBLY


407 
	#C0_TLBSET
 
$0


	)

408 
	#C0_TLBLO
 
$2


	)

409 
	#C0_UBASE
 
$4


	)

410 
	#C0_SHIFTAMT
 
$5


	)

411 
	#C0_TRAPBASE
 
$6


	)

412 
	#C0_BADPADDR
 
$7


	)

413 
	#C0_BADVADDR
 
$8


	)

414 
	#C0_COUNT
 
$9


	)

415 
	#C0_TLBHI
 
$10


	)

416 
	#C0_SR
 
$12


	)

417 
	#C0_CAUSE
 
$13


	)

418 
	#C0_EPC
 
$14


	)

419 
	#C0_PRID
 
$15


	)

420 
	#C0_CONFIG
 
$16


	)

421 
	#C0_WORK0
 
$18


	)

422 
	#C0_WORK1
 
$19


	)

423 
	#C0_PBASE
 
$20


	)

424 
	#C0_GBASE
 
$21


	)

425 
	#C0_WIRED
 
$24


	)

426 
	#C0_DCACHE
 
$28


	)

427 
	#C0_ICACHE
 
$29


	)

430 
	#C0_TLBSET
 0

	)

431 
	#C0_TLBLO
 2

	)

432 
	#C0_UBASE
 4

	)

433 
	#C0_SHIFTAMT
 5

	)

434 
	#C0_TRAPBASE
 6

	)

435 
	#C0_BADPADDR
 7

	)

436 
	#C0_BADVADDR
 8

	)

437 
	#C0_COUNT
 9

	)

438 
	#C0_TLBHI
 10

	)

439 
	#C0_SR
 12

	)

440 
	#C0_CAUSE
 13

	)

441 
	#C0_EPC
 14

	)

442 
	#C0_PRID
 15

	)

443 
	#C0_CONFIG
 16

	)

444 
	#C0_WORK0
 18

	)

445 
	#C0_WORK1
 19

	)

446 
	#C0_PBASE
 20

	)

447 
	#C0_GBASE
 21

	)

448 
	#C0_WIRED
 24

	)

449 
	#C0_DCACHE
 28

	)

450 
	#C0_ICACHE
 29

	)

453 
	#C0_CEL
 
C0_WORK0


	)

454 
	#C0_KPTBL
 
C0_GBASE


	)

455 
	#C0_KPTEBASE
 
C0_PBASE


	)

	@/usr/include/sys/timeb.h

1 #i‚de‡
_SYS_TIMEB_H


2 
	#_SYS_TIMEB_H


	)

4 #ifde‡
__˝lu•lus


27 
	~<sys/ty≥s.h
>

32 
	stimeb
 {

33 
time_t
 
time
;

34 
mûlôm
;

35 
timez⁄e
;

36 
d°Êag
;

39 
·ime
(
timeb
 *);

41 #ifde‡
__˝lu•lus


	@/usr/include/sys/timespec.h

17 #i‚de‡
_SYS_TIMESPEC_H


18 
	#_SYS_TIMESPEC_H


	)

40 
	~<°™d¨ds.h
>

41 
	~<sys/ty≥s.h
>

43 #i‡
_POSIX93
 || 
_ABIAPI
 || (
_XOPEN5
 && 
deföed
(
__TIME_H__
))

48 
	#__time•ec
 
time•ec


	)

49 #i‚de‡
__TIMESPEC_DEFINED


50 
	#__TIMESPEC_DEFINED


	)

54 
	s__time•ec
 {

55 #ifde‡
tv_£c


56 
time_t
 
	m__tv_£c
;

58 
time_t
 
	mtv_£c
;

60 #ifde‡
tv_n£c


61 
	m__tv_n£c
;

63 
	mtv_n£c
;

65 } 
	ttime•ec_t
;

	@/usr/include/sys/uio.h

10 #i‚de‡
_IO_UIO_H


11 
	#_IO_UIO_H


	)

15 #ifde‡
__˝lu•lus


26 
	~<sys/ty≥s.h
>

28 #i‡!
deföed
(
_IOVEC_T
)

29 
	#_IOVEC_T


	)

30 
	siovec
 {

31 *
iov_ba£
;

32 
size_t
 
iov_Àn
;

33 } 
	tiovec_t
;

36 #i‡!
deföed
(
_KERNEL
)

37 
ssize_t
 
ªadv
(, c⁄° 
iovec
 *, );

38 
ssize_t
 
wrôev
(, c⁄° 
iovec
 *, );

41 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

43 
	#_MAX_IOVEC
 (
NBPP
/(
iovec_t
))

	)

45 
	gpm
;

46 
	gvfûe
;

48 
	suio
 {

49 
iovec_t
 *
	guio_iov
;

50 
	guio_iov˙t
;

51 
	guio_fmode
;

52 
off_t
 
	guio_off£t
;

53 
	guio_£gÊg
;

54 
	guio_pio
;

55 
	guio_sigpùe
;

56 
uch¨_t
 
	guio_ªadiﬁog
;

57 
uch¨_t
 
	guio_wrôeiﬁog
;

58 
ssize_t
 
	guio_ªsid
;

59 
off_t
 
	guio_limô
;

60 
pm
 *
	guio_pmp
;

61 
buf
 *
	guio_pbuf
;

62 
vfûe
 *
	guio_Â
;

63 } 
	tuio_t
;

68 
	euio_rw
 { 
	gUIO_READ
, 
	gUIO_WRITE
 } 
	tuio_rw_t
;

73 
	euio_£g
 {

74 
	gUIO_NOSPACE
 = -1,

75 
	gUIO_USERSPACE
,

76 
	gUIO_SYSSPACE
,

77 
	gUIO_USERISPACE


78 } 
	tuio_£g_t
;

80 
	#IS_USERSPACE
(
f
Ë((fË=
UIO_USERSPACE
 || (fË=
UIO_USERISPACE
)

	)

82 #i‡
CELL_CAPABLE


83 
	euio_ba£
 { 
	gUIO_LOCAL
, 
	gUIO_REMOTE
 } 
	tuio_ba£_t
;

84 
£t_loˇl_uio_£gÊg
(
uio_t
 *, 
uio_£g_t
, 
uio_ba£_t
);

87 
uiomove
(*, 
size_t
, 
uio_rw_t
, 
uio_t
 *);

88 
uªadc
(, 
uio_t
 *);

89 
uwrôec
(
uio_t
 *);

90 
uiomvuio
(
uio_t
 *, uio_t *);

91 
uioskù
(
uio_t
 *, 
size_t
);

92 
uioupd©e
(
uio
 *, 
ssize_t
);

93 
gë_loˇl_uio_£gÊg
(
uio_t
 *);

97 #ifde‡
__˝lu•lus


	@/usr/include/sys/unistd.h

13 #i‚de‡
_SYS_UNISTD_H


14 
	#_SYS_UNISTD_H


	)

19 
	#_SC_ARG_MAX
 1

	)

20 
	#_SC_CHILD_MAX
 2

	)

21 
	#_SC_CLK_TCK
 3

	)

22 
	#_SC_NGROUPS_MAX
 4

	)

23 
	#_SC_OPEN_MAX
 5

	)

24 
	#_SC_JOB_CONTROL
 6

	)

25 
	#_SC_SAVED_IDS
 7

	)

26 
	#_SC_VERSION
 8

	)

27 
	#_SC_PASS_MAX
 9

	)

28 
	#_SC_LOGNAME_MAX
 10

	)

29 
	#_SC_PAGESIZE
 11

	)

30 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

31 
	#_SC_XOPEN_VERSION
 12

	)

32 
	#_SC_NACLS_MAX
 13

	)

33 
	#_SC_NPROC_CONF
 14

	)

34 
	#_SC_NPROC_ONLN
 15

	)

35 
	#_SC_STREAM_MAX
 16

	)

36 
	#_SC_TZNAME_MAX
 17

	)

37 
	#_SC_RTSIG_MAX
 20

	)

38 
	#_SC_SIGQUEUE_MAX
 21

	)

39 
	#_SC_REALTIME_SIGNALS
 23

	)

40 
	#_SC_PRIORITIZED_IO
 24

	)

41 
	#_SC_ACL
 25

	)

42 
	#_SC_AUDIT
 26

	)

43 
	#_SC_INF
 27

	)

44 
	#_SC_MAC
 28

	)

45 
	#_SC_CAP
 29

	)

46 
	#_SC_IP_SECOPTS
 30

	)

47 
	#_SC_KERN_POINTERS
 31

	)

48 
	#_SC_DELAYTIMER_MAX
 32

	)

49 
	#_SC_MQ_OPEN_MAX
 33

	)

50 
	#_SC_MQ_PRIO_MAX
 34

	)

51 
	#_SC_SEM_NSEMS_MAX
 35

	)

52 
	#_SC_SEM_VALUE_MAX
 36

	)

53 
	#_SC_TIMER_MAX
 37

	)

54 
	#_SC_FSYNC
 38

	)

55 
	#_SC_MAPPED_FILES
 39

	)

56 
	#_SC_MEMLOCK
 40

	)

57 
	#_SC_MEMLOCK_RANGE
 41

	)

58 
	#_SC_MEMORY_PROTECTION
 42

	)

59 
	#_SC_MESSAGE_PASSING
 43

	)

60 
	#_SC_PRIORITY_SCHEDULING
 44

	)

61 
	#_SC_SEMAPHORES
 45

	)

62 
	#_SC_SHARED_MEMORY_OBJECTS
 46

	)

63 
	#_SC_SYNCHRONIZED_IO
 47

	)

64 
	#_SC_TIMERS
 48

	)

66 
	#_SC_ASYNCHRONOUS_IO
 64

	)

67 
	#_SC_ABI_ASYNCHRONOUS_IO
 65

	)

68 
	#_SC_AIO_LISTIO_MAX
 66

	)

69 
	#_SC_AIO_MAX
 67

	)

70 
	#_SC_AIO_PRIO_DELTA_MAX
 68

	)

72 
	#_SC_XOPEN_SHM
 75

	)

73 
	#_SC_XOPEN_CRYPT
 76

	)

74 
	#_SC_BC_BASE_MAX
 77

	)

75 
	#_SC_BC_DIM_MAX
 78

	)

76 
	#_SC_BC_SCALE_MAX
 79

	)

77 
	#_SC_BC_STRING_MAX
 80

	)

78 
	#_SC_COLL_WEIGHTS_MAX
 81

	)

79 
	#_SC_EXPR_NEST_MAX
 82

	)

80 
	#_SC_LINE_MAX
 83

	)

81 
	#_SC_RE_DUP_MAX
 84

	)

82 
	#_SC_2_C_BIND
 85

	)

83 
	#_SC_2_C_DEV
 86

	)

84 
	#_SC_2_C_VERSION
 87

	)

85 
	#_SC_2_FORT_DEV
 88

	)

86 
	#_SC_2_FORT_RUN
 89

	)

87 
	#_SC_2_LOCALEDEF
 90

	)

88 
	#_SC_2_SW_DEV
 91

	)

89 
	#_SC_2_UPE
 92

	)

90 
	#_SC_2_VERSION
 93

	)

91 
	#_SC_2_CHAR_TERM
 94

	)

92 
	#_SC_XOPEN_ENH_I18N
 95

	)

93 
	#_SC_IOV_MAX
 96

	)

94 
	#_SC_ATEXIT_MAX
 97

	)

95 
	#_SC_XOPEN_UNIX
 98

	)

96 
	#_SC_XOPEN_XCU_VERSION
 99

	)

99 
	#_SC_GETGR_R_SIZE_MAX
 100

	)

100 
	#_SC_GETPW_R_SIZE_MAX
 101

	)

101 
	#_SC_LOGIN_NAME_MAX
 102

	)

102 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 103

	)

103 
	#_SC_THREAD_KEYS_MAX
 104

	)

104 
	#_SC_THREAD_STACK_MIN
 105

	)

105 
	#_SC_THREAD_THREADS_MAX
 106

	)

106 
	#_SC_TTY_NAME_MAX
 107

	)

107 
	#_SC_THREADS
 108

	)

108 
	#_SC_THREAD_ATTR_STACKADDR
 109

	)

109 
	#_SC_THREAD_ATTR_STACKSIZE
 110

	)

110 
	#_SC_THREAD_PRIORITY_SCHEDULING
 111

	)

111 
	#_SC_THREAD_PRIO_INHERIT
 112

	)

112 
	#_SC_THREAD_PRIO_PROTECT
 113

	)

113 
	#_SC_THREAD_PROCESS_SHARED
 114

	)

114 
	#_SC_THREAD_SAFE_FUNCTIONS
 115

	)

116 
	#_SC_KERN_SIM
 116

	)

117 
	#_SC_MMAP_FIXED_ALIGNMENT
 117

	)

118 
	#_SC_SOFTPOWER
 118

	)

120 
	#_SC_XBS5_ILP32_OFF32
 119

	)

121 
	#_SC_XBS5_ILP32_OFFBIG
 120

	)

122 
	#_SC_XBS5_LP64_OFF64
 121

	)

123 
	#_SC_XBS5_LPBIG_OFFBIG
 122

	)

124 
	#_SC_XOPEN_LEGACY
 123

	)

125 
	#_SC_XOPEN_REALTIME
 124

	)

126 
	#_SC_XOPEN_REALTIME_THREADS
 125

	)

131 
	#_PC_LINK_MAX
 1

	)

132 
	#_PC_MAX_CANON
 2

	)

134 
	#_PC_MAX_INPUT
 3

	)

136 
	#_PC_NAME_MAX
 4

	)

137 
	#_PC_PATH_MAX
 5

	)

138 
	#_PC_PIPE_BUF
 6

	)

140 
	#_PC_CHOWN_RESTRICTED
 7

	)

141 
	#_PC_NO_TRUNC
 8

	)

142 
	#_PC_VDISABLE
 9

	)

143 
	#_PC_SYNC_IO
 10

	)

144 
	#_PC_PRIO_IO
 11

	)

146 
	#_PC_ASYNC_IO
 64

	)

147 
	#_PC_ABI_ASYNC_IO
 65

	)

148 
	#_PC_ABI_AIO_XFER_MAX
 66

	)

149 #i‡
_LFAPI
 || 
_XOPEN5


150 
	#_PC_FILESIZEBITS
 67

	)

156 #i‚de‡
_POSIX_VERSION


157 
	#_POSIX_VERSION
 199506L

	)

160 #i‚de‡
_POSIX_VDISABLE


161 
	#_POSIX_VDISABLE
 0

	)

164 #i‚de‡
_XOPEN_VERSION


165 
	#_XOPEN_VERSION
 500

	)

167 #i‚de‡ 
_POSIX_ASYNCHRONOUS_IO


168 
	#_POSIX_ASYNCHRONOUS_IO
 1

	)

170 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

176 
	s∑thc⁄Á
 {

177 *
	m‚ame
;

178 
syßrg_t
 
	m«me
;

181 
	sÂ©hc⁄Á
 {

182 
syßrg_t
 
	mfdes
;

183 
syßrg_t
 
	m«me
;

186 
	grvÆ
;

187 
∑thc⁄f
(
∑thc⁄Á
 *, 
rvÆ
 *);

188 
Â©hc⁄f
(
Â©hc⁄Á
 *, 
rvÆ
 *);

189 
sysc⁄f
(, 
rvÆ
 *);

	@/usr/include/sys/uthread.h

13 #i‚de‡
__SYS_UTHREAD_H__


14 
	#__SYS_UTHREAD_H__


	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/ksig«l.h
>

20 
	~<sys/Êock.h
>

21 
	~<sys/kabi.h
>

22 
	~<sys/kthªad.h
>

23 
	~<sys/ªsour˚.h
>

25 
	#curuthªad
 (
¥iv©e
.
p_curuthªad
)

	)

27 
	#KT_TO_UT
(
kt
Ë(
	`ASSERT
(
	`KT_ISUTHREAD
(kt)), (
uthªad_t
 *)(kt))

	)

28 
	#UT_TO_KT
(
ut
Ë((
kthªad_t
 *)(ut))

	)

29 
	#UT_TO_PROC
(
ut
Ë((ut)->
ut_¥oc
)

	)

30 
	#UT_TO_VPROC
(
ut
Ë((ut)->
ut_v¥oc
)

	)

32 
	#PSCOMSIZ
 32

	)

33 
	#PSARGSZ
 80

	)

35 
	gpde
;

40 
	tébpid_t
;

41 
	tiˇchïid_t
;

42 
	#ébpid
(
u
Ë(*((u)->
uès_ébpid
 + 
	`˝uid
()))

	)

43 #i‡
TFP


44 
	#iˇchïid
(
u
Ë(*((u)->
uès_iˇchïid
 + 
	`˝uid
()))

	)

46 #i‡
_MIPS_SIM
 =
_ABI64


50 
	#uès_£gtbl_wúed
 
uès_£gtbl


	)

51 
	#uès_shrd£gtbl_wúed
 
uès_shrd£gtbl


	)

55 
	#PSEG_SEG
 0x1

	)

56 
	#PSEG_TRILEVEL
 0x2

	)

58 
	suès_s
 {

59 
öt64_t
 
	muès_ébid
;

60 
ébpid_t
 *
	muès_ébpid
;

61 
iˇchïid_t
 *
	muès_iˇchïid
;

62 
pde
 **
	muès_£gtbl
;

63 
pde
 **
	muès_shrd£gtbl
;

64 #i‡
_MIPS_SIM
 !
_ABI64


65 
pde
 **
	muès_£gtbl_wúed
;

66 
pde
 **
	muès_shrd£gtbl_wúed
;

68 
ush‹t
 
	muès_£gÊags
;

69 
	muès_éb˙t
;

71 
uöt_t
 
	muès_Êag
;

72 
	muès_uébmissswtch
;

73 
uthªad_s
 *
	muès_ut
;

74 } 
	tuès_t
;

77 
	#UTAS_LCK
 0x0001

	)

78 
	#UTAS_LPG_TLBMISS_SWTCH
 0x0002

	)

80 
	#UTAS_TLBMISS
 0x0004

	)

81 
	#UTAS_ULI
 0x0008

	)

83 
	#uès_lock
(
p
Ë
	`muãx_bôlock
(&’)->
uès_Êag
, 
UTAS_LCK
)

	)

84 
	#uès_u∆ock
(
p
,
rv
Ë
	`muãx_bôu∆ock
(&’)->
uès_Êag
, 
UTAS_LCK
,Ñv)

	)

85 
	#uès_Êag£t
(
p
,
b
Ë
	`bôlock_£t
(&’)->
uès_Êag
, 
UTAS_LCK
, b)

	)

86 
	#uès_Êag˛r
(
p
,
b
Ë
	`bôlock_˛r
(&’)->
uès_Êag
, 
UTAS_LCK
, b)

	)

91 
	#TLB_NOSLEEP
 0x01

	)

92 
	#STEAL_PHYSMEM
 0x02

	)

93 
	#NO_VADDR
 0x04

	)

94 
	#FLUSH_MAPPINGS
 0x08

	)

95 
	#ISOLATED_ONLY
 0x10

	)

96 
	#FLUSH_WIRED
 0x20

	)

98 #ifde‡
_KERNEL


99 
	#ITIMER_UTNORMALIZE
 1

	)

100 
	#UT_ITIMER_VIRTUAL
 (
ITIMER_VIRTUAL
 - 
ITIMER_UTNORMALIZE
)

	)

101 
	#UT_ITIMER_PROF
 (
ITIMER_PROF
 - 
ITIMER_UTNORMALIZE
)

	)

104 
√w_ébpid
(
uès_s
 *, );

105 
öt64_t
 
√wébid
();

107 #i‡
TFP


108 
√w_iˇchïid
(
uès_s
 *, );

109 
iˇcheöfo_öô
();

110 
iˇchïid_is_ußbÀ
(
uès_s
 *);

111 
iˇchïid_u£
(
uès_s
 *, 
ébpid_t
);

112 
iˇchïid_t
 *
iˇchïid_memÆloc
();

113 
iˇchïid_mem‰ì
(
iˇchïid_t
 *);

116 
Êushéb_cuºít
();

117 
ébsync
(
uöt64_t
, 
˝umask_t
, );

118 
ébdúty
(
uès_s
 *);

119 
£t_ébpids
(
uès_s
 *, );

120 
éböfo_öô
();

121 
ébpid_is_ußbÀ
(
uès_s
 *);

122 
ébpid_u£
(
uès_s
 *, 
ébpid_t
, );

123 
éb_⁄e£c_a˘i⁄s
();

124 
éb_tick_a˘i⁄s
();

125 
ébpid_t
 *
ébpid_memÆloc
();

126 
ébpid_mem‰ì
(
ébpid_t
 *);

127 
ébövÆ_skù_my_˝u
(
uès_s
 *);

128 
z≠£gtbl
(
uès_s
 *);

131 #ifde‡
ULI


132 
ébpid_t
 
Æloc_¥iv©e_ébpid
();

133 
‰ì_¥iv©e_ébpid
(
ébpid_t
);

135 #ifde‡
TFP


136 
iˇchïid_t
 
Æloc_¥iv©e_iˇchïid
();

137 
‰ì_¥iv©e_iˇchïid
(
iˇchïid_t
);

146 
	ss¶ìp_s
 {

147 
	ms_waô˙t
;

148 
	ms_¶p˙t
;

149 
sv_t
 
	ms_waô
;

150 } 
	ts¶ìp_t
;

152 
ush‹t_t
 
	tuthªadid_t
;

154 
	sut_ac˘_s
 {

155 
u_l⁄g
 
	mua_mem
;

156 
u_l⁄g
 
	mua_ioch
;

157 
__uöt64_t
 
	mua_bªad
;

158 
__uöt64_t
 
	mua_bwrô
;

159 
u_l⁄g
 
	mua_sysc
;

160 
u_l⁄g
 
	mua_sys¸
;

161 
u_l⁄g
 
	mua_syscw
;

162 
u_l⁄g
 
	mua_sys˝s
;

163 
u_l⁄g
 
	mua_sysci
;

164 
u_l⁄g
 
	mua_gøphfifo
;

165 
u_l⁄g
 
	mua_tÁu…s
;

166 
u_l⁄g
 
	mua_vÁu…s
;

167 
u_l⁄g
 
	mua_uÁu…s
;

168 
u_l⁄g
 
	mua_kÁu…s
;

169 } 
	tut_ac˘_t
;

171 
	sut_cßac˘_s
 {

172 
accum_t
 
	mcß_vmem1
;

173 
accum_t
 
	mcß_vmem2
;

174 
accum_t
 
	mcß_vmem3
;

175 
accum_t
 
	mcß_mem2
;

176 
accum_t
 
	mcß_mem3
;

177 
accum_t
 
	mcß_vhimem
;

178 
accum_t
 
	mcß_pgsw≠s
;

179 } 
	tut_cßac˘_t
;

181 
	sôimîœ°
 {

182 
timevÆ
 
	môl_u§
;

183 
timevÆ
 
	môl_sys
;

186 
	#MAX_IOCH
 ((
u_l⁄g
)(((u_l⁄g)(1L<<((u_l⁄g)*
NBBY
-1)))-1))

	)

187 
	#INCR_IOCH
(
ioch
,
ö¸
) \

188 ((
ioch
Ë+((((iochË+ (
ö¸
)Ë> 
MAX_IOCH
Ë? 0 : (ö¸)))

	)

189 
	#UPDATE_IOCH
(
ut
,
ö¸
) \

190 
	`INCR_IOCH
((
ut
)->
ut_ac˘
.
ua_ioch
, 
ö¸
)

	)

192 
	suthªad_s
 {

193 
kthªad_t
 
	mut_kthªad
;

194 
¥oc
 * 
	mut_¥oc
;

195 
v¥oc
 *
	mut_v¥oc
;

196 
uthªad_s
 *
	mut_¥ev
;

197 
uthªad_s
 *
	mut_√xt
;

198 
vfûe
 *
	mut_›íÂ
;

199 
¥oc_¥oxy_s
 *
	mut_µroxy
;

200 
Êid_t
 
	mut_Êid
;

202 
uöt_t
 
	mut_Êags
;

203 
uöt_t
 
	mut_upd©e
;

204 
uthªadid_t
 
	mut_id
;

206 
	mut_cmask
;

208 
¥da
 *
	mut_¥da
;

215 
job_s
 *
	mut_job
;

216 
ush‹t
 
	mut_t¶i˚
;

217 
ush‹t
 
	mut_πicks
;

218 
uch¨_t
 
	mut_pﬁicy
;

219 
uch¨_t
 
	mut_n⁄¥ìm±s
;

224 
lock_t
 
	mut_‰¶ock
;

225 
ush‹t
 
	mut_‰sÊags
;

226 
ush‹t
 
	mut_‰§efs
;

227 *
	mut_‰s
;

230 
ôimîvÆ
 
	mut_timî
[
ITIMER_MAX
-
ITIMER_UTNORMALIZE
];

232 #i‡
deföed
(
IP19
Ë|| deföed (
IP21
Ë|| deföed(
IP25
Ë|| deföed(
IP27
)

233 *
	mut_sh¨e_∑d
;

239 
	#ut_sig
 
ut_sig≥nd
.
s_sig


	)

240 
	#ut_sigqueue
 
ut_sig≥nd
.
s_sigqueue


	)

242 
u_öt
 
	mut_cursig
;

243 
sigqueue
 *
	mut_curöfo
;

244 
sig≥nd_t
 
	mut_sig≥nd
;

245 
k_sig£t_t
 * 
	mut_sighﬁd
;

246 
k_sig£t_t
 
	mut_sigwaô
;

247 
k_sig£t_t
 
	mut_su•mask
;

249 
ex˚±i⁄
 *
	mut_ex˚±i⁄
;

250 
pde_t
 
	mut_k°kpgs
[
KSTKSIZE
+
EXTKSTKSIZE
];

252 
u_öt
 
	mut_sysˇŒno
;

253 
syßrg_t
 
	mut_sˇŒ¨gs
[8];

254 
pﬁld©
 *
	mut_pﬁld©
;

255 
lock_t
 
	mut_pﬁÃŸ‹lock
;

256 
ush‹t
 
	mut_pﬁÃŸ‹
;

258 
ush‹t
 
	mut_v∆ock
;

260 
ßt_¥oc
 *
	mut_ßt_¥oc
;

261 
ßt_ev_mask
 *
	mut_ßtmask
;

263 
¸ed
 * 
	mut_¸ed
;

264 
vnode
 * 
	mut_cdú
;

265 
vnode
 * 
	mut_rdú
;

266 
time_t
 
	mut_¥·ime
;

267 #i‡
R10000


268 
≥rf_m⁄_t
 
	mut_≥rfm⁄
;

269 
	#ut_˝um⁄
 
ut_≥rfm⁄
.
pm_˝u_m⁄


	)

271 
ut_ac˘_t
 
	mut_ac˘
;

273 
	mut_code
;

275 
	mwhy°›wh©°›
;

277 
ush‹t
 
	mwhy°›
;

278 
ush‹t
 
	mwh©°›
;

279 } 
	mut_ww°
;

280 } 
	mut_wwun
;

282 
	mut_fdöu£
;

283 *
	mut_fdm™y
;

284 
	mut_fdm™ysz
;

285 
	mut_fdm™ymax
;

290 
k_machªg_t
 
	mut_Êt_ˇu£
;

291 
k_machªg_t
 
	mut_Êt_badvaddr
;

293 #ifde‡
ULI


294 
uli
 *
	mut_uli
;

296 
exô_ˇŒback
 *
	mut_ecbli°
;

301 *
	mut_ex˝t_‰_±r
;

302 
öt32_t
 
	mut_Â_íabÀs
;

303 
öt32_t
 
	mut_Â_c§
;

304 
ö°_t
 
	mut_ïcö°
;

305 
ö°_t
 
	mut_bdö°
;

306 
	mut_Â_c§_rm
;

307 
	mut_so·Â_Êags
;

308 
	mut_rdnum
;

309 
	mut_g°©e
;

310 
öt16_t
 
	mut_gbödög
;

311 
uès_t
 
	mut_as
;

312 
asid_t
 
	mut_asid
;

313 
pw©ch_s
 *
	mut_w©ch
;

315 
s¶ìp_s
 
	mut_pblock
;

319 
kush¨ía
 *
	mut_sh¨ía
;

320 
uöt16_t
 
	mut_maxrßid
;

321 
	mut_rß_ru«bÀ
;

322 
	mut_rß_≈gs
;

323 
	mut_rß_loc‹e
;

324 
	mut_rß_∑d
[3];

326 #i‡
JUMP_WAR


327 
	#JUMP_WAR_SETS
 3

	)

328 
	#NWIREDJUMP
 3

	)

329 
u_ch¨
 
	mut_jump_w¨_£t
;

330 
u_ch¨
 
	mut_max_jump_w¨_wúed
;

331 #ifde‡
DEBUG


332 
uöt
 
	mut_jump_w¨_°ﬁí
;

333 
uöt
 
	mut_jump_w¨_°©s
[
NWIREDJUMP
*2];

334 
uöt
 
	mut_jump_w¨_£t_°©s
[
JUMP_WAR_SETS
];

344 
	mut_î∫o
;

345 
__öt64_t
 
	mut_rvÆ1
;

346 
__öt64_t
 
	mut_rvÆ2
;

348 
ut_cßac˘_t
 
	mut_cßac˘
;

354 
ôimîœ°
 *
	mut_timîlu
;

356 } 
	tuthªad_t
;

358 
	#ut_why°›
 
ut_wwun
.
ut_ww°
.
why°›


	)

359 
	#ut_wh©°›
 
ut_wwun
.
ut_ww°
.
wh©°›


	)

360 
	#ut_whywh©°›
 
ut_wwun
.
why°›wh©°›


	)

362 
uthªadid_t
 
gë_cuºít_utid
();

363 
	#cuºít_utid
(Ë(
curuthªad
 ? curuthªad->
ut_id
 : \

364 
	`gë_cuºít_utid
())

	)

366 
gë_cuºít_Êid
(
Êid_t
 *);

370 
	#UT_SRIGHT
 0x00000002

	)

372 
	#UT_PRSTOPX
 0x00000004

	)

373 
	#UT_SXBRK
 0x00000008

	)

374 
	#UT_STOP
 0x00000010

	)

375 
	#UT_PRSTOPJ
 0x00000020

	)

376 
	#UT_STEP
 0x00000040

	)

377 
	#UT_WSYS
 0x00000080

	)

378 
	#UT_SIGSUSPEND
 0x00000100

	)

379 
	#UT_PTHREAD
 0x00000200

	)

381 
	#UT_INKERNEL
 0x00000400

	)

382 
	#UT_TRWAIT
 0x00000800

	)

383 
	#UT_INACTIVE
 0x00001000

	)

384 
	#UT_NULL3
 0x00002000

	)

385 
	#UT_EVENTPR
 0x00004000

	)

387 
	#UT_HOLDJS
 0x00008000

	)

389 
	#UT_NULL1
 0x00010000

	)

390 
	#UT_CLRHALT
 0x00020000

	)

391 
	#UT_ISOLATE
 0x00080000

	)

392 
	#UT_MUSTRUNLCK
 0x00100000

	)

393 
	#UT_NOMRUNINH
 0x00200000

	)

394 
	#UT_OWEUPC
 0x00400000

	)

395 
	#UT_FIXADE
 0x00800000

	)

396 
	#UT_NULL2
 0x01000000

	)

397 
	#UT_SYSABORT
 0x02000000

	)

398 
	#UT_BLOCK
 0x04000000

	)

399 
	#UT_PTPSCOPE
 0x08000000

	)

400 
	#UT_BLKONENTRY
 0x10000000

	)

401 
	#UT_CKPT
 0x20000000

	)

403 
	#UT_PTSTEP
 0x80000000

	)

405 
	#UT_PRSTOPBITS
 (
UT_PRSTOPX
 | 
UT_PRSTOPJ
Ë

	)

409 
	#UT_UPDDIR
 0x00000001

	)

410 
	#UT_UPDUID
 0x00000002

	)

411 
	#UT_UPDULIMIT
 0x00000004

	)

412 
	#UT_UPDUMASK
 0x00000008

	)

413 
	#UT_UPDCRED
 0x00000010

	)

414 
	#UT_UPDSIG
 0x00000020

	)

415 
	#UT_UPDSIGVEC
 0x00000040

	)

416 
	#UT_SAT_CWD
 0x00000100

	)

417 
	#UT_SAT_CRD
 0x00000200

	)

418 
	#UT_UPDLOCK
 0x80000000

	)

420 
	#UT_UPDATE
(
ut
Ë((ut)->
ut_upd©e
)

	)

421 
	#UTSYNCFLAGS
 \

422 (
UT_UPDDIR
|
UT_UPDUID
|
UT_UPDULIMIT
|
UT_UPDUMASK
|
UT_UPDSIG
|
UT_UPDSIGVEC
|
UT_UPDCRED
|
UT_SAT_CWD
|
UT_SAT_CRD
)

	)

426 
	#UT_FSNESTED
 0x8000

	)

427 
	#UT_FSNESTED_MAX
 0xFFFF

	)

429 
	#ut_lock
(
ut
Ë
	`kt_lock
(
	`UT_TO_KT
(ut))

	)

430 
	#ut_u∆ock
(
ut
,
s
Ë
	`kt_u∆ock
(
	`UT_TO_KT
(ut),s)

	)

432 
	#ut_√°ed_lock
(
ut
Ë
	`kt_√°ed_lock
(
	`UT_TO_KT
(ut))

	)

433 
	#ut_√°ed_u∆ock
(
ut
Ë
	`kt_√°ed_u∆ock
(
	`UT_TO_KT
(ut))

	)

434 
	#ut_i¶ocked
(
ut
Ë
	`kt_i¶ocked
(
	`UT_TO_KT
(ut))

	)

436 
	#ut_¶ìp
(
ut
,
s
,
f
,
rv
) \

437 
	`sv_bôlock_waô
(
s
, 
f
, &(
	`UT_TO_KT
(
ut
))->
k_Êags
, 
KT_LOCK
, 
rv
)

	)

438 
	#ut_¶ìpsig
(
ut
,
s
,
f
,
rv
) \

439 
	`sv_bôlock_waô_sig
(
s
, 
f
, &(
	`UT_TO_KT
(
ut
))->
k_Êags
, 
KT_LOCK
, 
rv
)

	)

440 
	#ut_timed¶ìp
(
ut
,
s
,
f
,
rv
,
svtimî_Êags
,
ts
) \

441 
	`sv_bôlock_timedwaô
(
s
, 
f
, &(
	`UT_TO_KT
(
ut
))->
k_Êags
, 
KT_LOCK
, \

442 
rv
, 
svtimî_Êags
, 
ts
, 
NULL
)

	)

443 
	#ut_timed¶ìpsig
(
ut
,
s
,
f
,
rv
,
svtimî_Êags
,
ts
,
πs
) \

444 
	`sv_bôlock_timedwaô_sig
(
s
, 
f
, \

445 &(
	`UT_TO_KT
(
ut
))->
k_Êags
, 
KT_LOCK
, \

446 
rv
, 
svtimî_Êags
, 
ts
, 
πs
)

	)

450 
	#ut_Êag£t
(
ut
,
b
Ë{ 
_s
 = 
	`ut_lock
(ut); \

451 (
ut
)->
ut_Êags
 |(
b
); \

452 
	`ut_u∆ock
(
ut
, 
_s
); }

	)

454 
	#ut_Êag˛r
(
ut
,
b
Ë{ 
_s
 = 
	`ut_lock
(ut); \

455 (
ut
)->
ut_Êags
 &~(
b
); \

456 
	`ut_u∆ock
(
ut
, 
_s
); }

	)

458 
	#ut_upd£t
(
ut
,
b
Ë
	`bôlock_£t
(&(ut)->
ut_upd©e
, 
UT_UPDLOCK
, b);

	)

459 
	#ut_upd˛r
(
ut
,
b
Ë
	`bôlock_˛r
(&(ut)->
ut_upd©e
, 
UT_UPDLOCK
, b);

	)

464 
	#UTHREAD_FLAG_OFF
 0x0

	)

465 
	#UTHREAD_FLAG_ON
 0x1

	)

469 
	#THRD_EXIT
 1

	)

470 
	#THRD_EXEC
 2

	)

473 
	#UT_DETACHSTK
 0x1

	)

474 
	#UT_VPROC_DESTROY
 0x2

	)

477 
	#UT_ID_NULL
 ((
uthªadid_t
)-1)

	)

479 #i‡
EXTKSTKSIZE
 == 1

481 
	#STACKEXT_NON_CRITICAL
 0x1

	)

482 
	#STACKEXT_CRITICAL
 0x2

	)

485 #ifde‡
_KERNEL


486 
	g¥oc
;

487 
	gsigvec_s
;

489 
uthªad_¸óã
(
¥oc
 *
p
, 
uöt_t
 
shmash
, 
uthªad_t
 **
uç
,

490 
uthªadid_t
);

491 
uthªad_de°roy
(
uthªad_t
 *
ut
);

492 
uthªad_exô
(
uthªad_t
 *
ut
, 
Êags
);

493 
uthªad_ª≠
();

494 
uthªad_£tsigmask
(
uthªad_t
 *, 
k_sig£t_t
 *);

495 
uthªad_kûl
(
ush‹t_t
, );

496 
uthªads_kûl
();

497 
uthªad_sched_£tscheduÀr
(
uthªad_t
 *, *);

498 #ifde‡
CKPT


499 
uthªad_sched_gëscheduÀr
(
uthªad_t
 *, *);

501 
uthªad_t
* 
uthªad_lookup
(
¥oc_¥oxy_s
 *, 
uthªadid_t
);

502 
uthªad_≠∂y
(
¥oc_¥oxy_s
 *, 
uthªadid_t
,

503 (*)(
uthªad_t
 *, *), *);

505 
	`£tup_wúed_éb
();

506 
	`£tup_wúed_éb_nŸme
(
uès_t
 *, );

507 
	`cursigöfo‰ì
(
uthªad_t
 *);

508 
	`isÁèlsig
(
uthªad_t
 *, 
sigvec_s
 *);

509 
	`dump_timîs_to_¥oxy
(
uthªad_t
 *);

510 
	`uthªad_ac˘
(
uthªad_t
 *, *);

511 
	`uthªad_cßac˘
(
uthªad_t
 *, *);

512 
	`blockme
();

513 
	`block£t
(
uthªad_t
 *, , , , );

514 
	`block˙t
(
uthªad_t
 *, *, *);

516 #i‡
EXTKSTKSIZE
 == 1

517 
uöt
 
	`°ackext_Æloc
();

518 
	`°ackext_‰ì
(
uöt
);

519 
	`£tup_°ackext
(
uthªad_t
 *);

	@/usr/include/sys/xtalk/xbow.h

12 #i‚de‡
__XTALK_XBOW_H__


13 
	#__XTALK_XBOW_H__


	)

21 
	~<sys/xèlk/xèlk.h
>

22 
	~<sys/xèlk/xwidgë.h
>

23 #i‚de‡
_STANDALONE


24 
	~<sys/xèlk/xswôch.h
>

26 #ifde‡
LANGUAGE_C


27 
	~<sys/xèlk/xbow_öfo.h
>

30 
	#XBOW_DRV_PREFIX
 "xbow_"

	)

35 
	#XBOW_PORT_0
 0x0

	)

36 
	#XBOW_PORT_8
 0x8

	)

37 
	#XBOW_PORT_9
 0x9

	)

38 
	#XBOW_PORT_A
 0xa

	)

39 
	#XBOW_PORT_B
 0xb

	)

40 
	#XBOW_PORT_C
 0xc

	)

41 
	#XBOW_PORT_D
 0xd

	)

42 
	#XBOW_PORT_E
 0xe

	)

43 
	#XBOW_PORT_F
 0xf

	)

45 
	#MAX_XBOW_PORTS
 8

	)

46 
	#BASE_XBOW_PORT
 
XBOW_PORT_8


	)

47 
	#MAX_PORT_NUM
 0x10

	)

48 
	#XBOW_WIDGET_ID
 0

	)

51 #ifde‡
SN1


52 
	#XBOW_HUBLINK_LOW
 0xa

	)

53 
	#XBOW_HUBLINK_HIGH
 0xb

	)

55 
	#XBOW_HUBLINK_LOW
 0x9

	)

56 
	#XBOW_HUBLINK_HIGH
 0xa

	)

58 
	#XBOW_PEER_LINK
(
lök
Ë÷ök =
XBOW_HUBLINK_LOW
) ? \

59 
XBOW_HUBLINK_HIGH
 : 
XBOW_HUBLINK_LOW


	)

61 
	#XBOW_CREDIT
 4

	)

63 
	#MAX_XBOW_NAME
 16

	)

65 #i‡
LANGUAGE_C


66 
__uöt32_t
 
	txbowªg_t
;

68 
	#XBOWCONST
 (
xbowªg_t
)

	)

71 
	#XBOW_REG_PTR
(
ba£
, 
off£t
Ë((vﬁ©ûê
xbowªg_t
*) \

72 ((
__psunsig√d_t
)(
ba£
Ë+ (__psunsig√d_t)(
off£t
)))

	)

75 vﬁ©ûê
	sxb_lökªgs_s
 {

76 
xbowªg_t
 
	mfûÀr0
;

77 
xbowªg_t
 
	mlök_ibf
;

78 
xbowªg_t
 
	mfûÀr1
;

79 
xbowªg_t
 
	mlök_c⁄åﬁ
;

80 
xbowªg_t
 
	mfûÀr2
;

81 
xbowªg_t
 
	mlök_°©us
;

82 
xbowªg_t
 
	mfûÀr3
;

83 
xbowªg_t
 
	mlök_¨b_uµî
;

84 
xbowªg_t
 
	mfûÀr4
;

85 
xbowªg_t
 
	mlök_¨b_lowî
;

86 
xbowªg_t
 
	mfûÀr5
;

87 
xbowªg_t
 
	mlök_°©us_˛r
;

88 
xbowªg_t
 
	mfûÀr6
;

89 
xbowªg_t
 
	mlök_ª£t
;

90 
xbowªg_t
 
	mfûÀr7
;

91 
xbowªg_t
 
	mlök_aux_°©us
;

92 } 
	txb_lökªgs_t
;

94 vﬁ©ûê
	sxbow_s
 {

96 
widgë_cfg_t
 
	mxb_widgë
;

100 
	#xb_wid_id
 
xb_widgë
.
w_id


	)

101 
	#xb_wid_°©
 
xb_widgë
.
w_°©us


	)

102 
	#xb_wid_îr_uµî
 
xb_widgë
.
w_îr_uµî_addr


	)

103 
	#xb_wid_îr_lowî
 
xb_widgë
.
w_îr_lowî_addr


	)

104 
	#xb_wid_c⁄åﬁ
 
xb_widgë
.
w_c⁄åﬁ


	)

105 
	#xb_wid_ªq_timeout
 
xb_widgë
.
w_ªq_timeout


	)

106 
	#xb_wid_öt_uµî
 
xb_widgë
.
w_ötde°_uµî_addr


	)

107 
	#xb_wid_öt_lowî
 
xb_widgë
.
w_ötde°_lowî_addr


	)

108 
	#xb_wid_îr_cmdw‹d
 
xb_widgë
.
w_îr_cmd_w‹d


	)

109 
	#xb_wid_Œp
 
xb_widgë
.
w_Œp_cfg


	)

110 
	#xb_wid_°©_˛r
 
xb_widgë
.
w_tÊush


	)

113 
xbowªg_t
 
	m_∑d_000058
;

114 
xbowªg_t
 
	mxb_wid_¨b_ªlﬂd
;

115 
xbowªg_t
 
	m_∑d_000060
;

116 
xbowªg_t
 
	mxb_≥rf_˘r_a
;

117 
xbowªg_t
 
	m_∑d_000068
;

118 
xbowªg_t
 
	mxb_≥rf_˘r_b
;

119 
xbowªg_t
 
	m_∑d_000070
;

120 
xbowªg_t
 
	mxb_nic
;

123 
xbowªg_t
 
	m_∑d_000078
;

124 
xbowªg_t
 
	mxb_w0_r°_‚c
;

125 
xbowªg_t
 
	m_∑d_000080
;

126 
xbowªg_t
 
	mxb_l8_r°_‚c
;

127 
xbowªg_t
 
	m_∑d_000088
;

128 
xbowªg_t
 
	mxb_l9_r°_‚c
;

129 
xbowªg_t
 
	m_∑d_000090
;

130 
xbowªg_t
 
	mxb_œ_r°_‚c
;

131 
xbowªg_t
 
	m_∑d_000098
;

132 
xbowªg_t
 
	mxb_lb_r°_‚c
;

133 
xbowªg_t
 
	m_∑d_0000a0
;

134 
xbowªg_t
 
	mxb_lc_r°_‚c
;

135 
xbowªg_t
 
	m_∑d_0000a8
;

136 
xbowªg_t
 
	mxb_ld_r°_‚c
;

137 
xbowªg_t
 
	m_∑d_0000b0
;

138 
xbowªg_t
 
	mxb_À_r°_‚c
;

139 
xbowªg_t
 
	m_∑d_0000b8
;

140 
xbowªg_t
 
	mxb_lf_r°_‚c
;

141 
xbowªg_t
 
	m_∑d_0000c0
;

142 
xbowªg_t
 
	mxb_lock
;

143 
xbowªg_t
 
	m_∑d_0000c8
;

144 
xbowªg_t
 
	mxb_lock_˛r
;

146 
xbowªg_t
 
	m_∑d_0000d0
[12];

149 
xb_lökªgs_t
 
	mxb_lök_øw
[
MAX_XBOW_PORTS
];

150 
	#xb_lök
(
p
Ë
xb_lök_øw
[’Ë& (
MAX_XBOW_PORTS
 - 1)]

	)

152 } 
	txbow_t
;

155 
	sxbow_cfg_s
 {

156 
	mxb_p‹t
;

157 
	mxb_Êags
;

158 
	mxb_shi·
;

159 
	mxb_ul
;

160 
	mxb_∑d
;

161 
xb_lökªgs_t
 *
	mxb_lökªgs
;

162 
widgë_cfg_t
 *
	mxb_widgë
;

163 
	mxb_«me
[
MAX_XBOW_NAME
];

164 
xbowªg_t
 
	mxb_sh_¨b_uµî
;

165 
xbowªg_t
 
	mxb_sh_¨b_lowî
;

166 } 
	txbow_cfg_t
;

168 
	#XB_FLAGS_EXISTS
 0x1

	)

169 
	#XB_FLAGS_MASTER
 0x2

	)

170 
	#XB_FLAGS_SLAVE
 0x0

	)

171 
	#XB_FLAGS_GBR
 0x4

	)

172 
	#XB_FLAGS_16BIT
 0x8

	)

173 
	#XB_FLAGS_8BIT
 0x0

	)

176 
	#XB_CONFIG
(
p
Ë
xbow_cfg
[
xb_p‹ts
[p]]

	)

179 
	#XBOW_WIDGET_IS_VALID
(
wid
Ë((widË>
XBOW_PORT_8
 && (widË<
XBOW_PORT_F
)

	)

182 
	#XBOW_ARB_IS_UPPER
(
wid
Ë((widË>
XBOW_PORT_8
 && (widË<
XBOW_PORT_B
)

	)

183 
	#XBOW_ARB_IS_LOWER
(
wid
Ë((widË>
XBOW_PORT_C
 && (widË<
XBOW_PORT_F
)

	)

186 
	#XBOW_ARB_OFF
(
wid
Ë(
	`XBOW_ARB_IS_UPPER
(widË? 0x1¯: 0x24)

	)

190 
	#XBOW_WID_ID
 
WIDGET_ID


	)

191 
	#XBOW_WID_STAT
 
WIDGET_STATUS


	)

192 
	#XBOW_WID_ERR_UPPER
 
WIDGET_ERR_UPPER_ADDR


	)

193 
	#XBOW_WID_ERR_LOWER
 
WIDGET_ERR_LOWER_ADDR


	)

194 
	#XBOW_WID_CONTROL
 
WIDGET_CONTROL


	)

195 
	#XBOW_WID_REQ_TO
 
WIDGET_REQ_TIMEOUT


	)

196 
	#XBOW_WID_INT_UPPER
 
WIDGET_INTDEST_UPPER_ADDR


	)

197 
	#XBOW_WID_INT_LOWER
 
WIDGET_INTDEST_LOWER_ADDR


	)

198 
	#XBOW_WID_ERR_CMDWORD
 
WIDGET_ERR_CMD_WORD


	)

199 
	#XBOW_WID_LLP
 
WIDGET_LLP_CFG


	)

200 
	#XBOW_WID_STAT_CLR
 
WIDGET_TFLUSH


	)

201 
	#XBOW_WID_ARB_RELOAD
 0x5c

	)

202 
	#XBOW_WID_PERF_CTR_A
 0x64

	)

203 
	#XBOW_WID_PERF_CTR_B
 0x6c

	)

204 
	#XBOW_WID_NIC
 0x74

	)

207 
	#XBOW_W0_RST_FNC
 0x00007C

	)

208 
	#XBOW_L8_RST_FNC
 0x000084

	)

209 
	#XBOW_L9_RST_FNC
 0x00008c

	)

210 
	#XBOW_LA_RST_FNC
 0x000094

	)

211 
	#XBOW_LB_RST_FNC
 0x00009c

	)

212 
	#XBOW_LC_RST_FNC
 0x0000a4

	)

213 
	#XBOW_LD_RST_FNC
 0x0000ac

	)

214 
	#XBOW_LE_RST_FNC
 0x0000b4

	)

215 
	#XBOW_LF_RST_FNC
 0x0000bc

	)

216 
	#XBOW_RESET_FENCE
(
x
) ((x) > 7 && (x) < 16) ? \

217 (
XBOW_W0_RST_FNC
 + ((
x
) - 7) * 8) : \

218 ((
x
Ë=0Ë? 
XBOW_W0_RST_FNC
 : 0

	)

219 
	#XBOW_LOCK
 0x0000c4

	)

220 
	#XBOW_LOCK_CLR
 0x0000cc

	)

225 
	#XBOW_WID_UNDEF
 0xe4

	)

228 
	#XBOW_PRIO_ARBREG_PTR
(
ba£
, 
d°_wid
, 
§c_wid
) \

229 
	`XBOW_REG_PTR
(
	`XBOW_PRIO_LINKREGS_PTR
(
ba£
, 
d°_wid
), 
	`XBOW_ARB_OFF
(
§c_wid
))

	)

232 
	#XBOW_PRIO_LINKREGS_PTR
(
ba£
, 
d°_wid
Ë(
xb_lökªgs_t
*) \

233 
	`XBOW_REG_PTR
(
ba£
, 
	`XB_LINK_REG_BASE
(
d°_wid
))

	)

236 
	#XB_LINK_BASE
 0x100

	)

237 
	#XB_LINK_OFFSET
 0x40

	)

238 
	#XB_LINK_REG_BASE
(
x
Ë(
XB_LINK_BASE
 + ((xË& (
MAX_XBOW_PORTS
 - 1)Ë* 
XB_LINK_OFFSET
)

	)

240 
	#XB_LINK_IBUF_FLUSH
(
x
Ë(
	`XB_LINK_REG_BASE
(xË+ 0x4)

	)

241 
	#XB_LINK_CTRL
(
x
Ë(
	`XB_LINK_REG_BASE
(xË+ 0xc)

	)

242 
	#XB_LINK_STATUS
(
x
Ë(
	`XB_LINK_REG_BASE
(xË+ 0x14)

	)

243 
	#XB_LINK_ARB_UPPER
(
x
Ë(
	`XB_LINK_REG_BASE
(xË+ 0x1c)

	)

244 
	#XB_LINK_ARB_LOWER
(
x
Ë(
	`XB_LINK_REG_BASE
(xË+ 0x24)

	)

245 
	#XB_LINK_STATUS_CLR
(
x
Ë(
	`XB_LINK_REG_BASE
(xË+ 0x2c)

	)

246 
	#XB_LINK_RESET
(
x
Ë(
	`XB_LINK_REG_BASE
(xË+ 0x34)

	)

247 
	#XB_LINK_AUX_STATUS
(
x
Ë(
	`XB_LINK_REG_BASE
(xË+ 0x3c)

	)

250 
	#XB_CTRL_LINKALIVE_IE
 0x80000000

	)

252 
	#XB_CTRL_PERF_CTR_MODE_MSK
 0x30000000

	)

253 
	#XB_CTRL_IBUF_LEVEL_MSK
 0x0e000000

	)

254 
	#XB_CTRL_8BIT_MODE
 0x01000000

	)

255 
	#XB_CTRL_BAD_LLP_PKT
 0x00800000

	)

256 
	#XB_CTRL_WIDGET_CR_MSK
 0x007c0000

	)

257 
	#XB_CTRL_WIDGET_CR_SHFT
 18

	)

258 
	#XB_CTRL_ILLEGAL_DST_IE
 0x00020000

	)

259 
	#XB_CTRL_OALLOC_IBUF_IE
 0x00010000

	)

261 
	#XB_CTRL_BNDWDTH_ALLOC_IE
 0x00000100

	)

262 
	#XB_CTRL_RCV_CNT_OFLOW_IE
 0x00000080

	)

263 
	#XB_CTRL_XMT_CNT_OFLOW_IE
 0x00000040

	)

264 
	#XB_CTRL_XMT_MAX_RTRY_IE
 0x00000020

	)

265 
	#XB_CTRL_RCV_IE
 0x00000010

	)

266 
	#XB_CTRL_XMT_RTRY_IE
 0x00000008

	)

268 
	#XB_CTRL_MAXREQ_TOUT_IE
 0x00000002

	)

269 
	#XB_CTRL_SRC_TOUT_IE
 0x00000001

	)

272 
	#XB_STAT_LINKALIVE
 
XB_CTRL_LINKALIVE_IE


	)

274 
	#XB_STAT_MULTI_ERR
 0x00040000

	)

275 
	#XB_STAT_ILLEGAL_DST_ERR
 
XB_CTRL_ILLEGAL_DST_IE


	)

276 
	#XB_STAT_OALLOC_IBUF_ERR
 
XB_CTRL_OALLOC_IBUF_IE


	)

277 
	#XB_STAT_BNDWDTH_ALLOC_ID_MSK
 0x0000ff00

	)

278 
	#XB_STAT_RCV_CNT_OFLOW_ERR
 
XB_CTRL_RCV_CNT_OFLOW_IE


	)

279 
	#XB_STAT_XMT_CNT_OFLOW_ERR
 
XB_CTRL_XMT_CNT_OFLOW_IE


	)

280 
	#XB_STAT_XMT_MAX_RTRY_ERR
 
XB_CTRL_XMT_MAX_RTRY_IE


	)

281 
	#XB_STAT_RCV_ERR
 
XB_CTRL_RCV_IE


	)

282 
	#XB_STAT_XMT_RTRY_ERR
 
XB_CTRL_XMT_RTRY_IE


	)

284 
	#XB_STAT_MAXREQ_TOUT_ERR
 
XB_CTRL_MAXREQ_TOUT_IE


	)

285 
	#XB_STAT_SRC_TOUT_ERR
 
XB_CTRL_SRC_TOUT_IE


	)

288 
	#XB_AUX_STAT_RCV_CNT
 0xff000000

	)

289 
	#XB_AUX_STAT_XMT_CNT
 0x00ff0000

	)

290 
	#XB_AUX_STAT_TOUT_DST
 0x0000ff00

	)

291 
	#XB_AUX_LINKFAIL_RST_BAD
 0x00000040

	)

292 
	#XB_AUX_STAT_PRESENT
 0x00000020

	)

293 
	#XB_AUX_STAT_PORT_WIDTH
 0x00000010

	)

300 
	#XB_ARB_GBR_MSK
 0x1f

	)

301 
	#XB_ARB_RR_MSK
 0x7

	)

302 
	#XB_ARB_GBR_SHFT
(
x
Ë(((xË& 0x3Ë* 8)

	)

303 
	#XB_ARB_RR_SHFT
(
x
Ë(((xË& 0x3Ë* 8 + 5)

	)

304 
	#XB_ARB_GBR_CNT
(
ªg
,
x
Ë(‘egË>> 
	`XB_ARB_GBR_SHFT
(xË& 
XB_ARB_GBR_MSK
)

	)

305 
	#XB_ARB_RR_CNT
(
ªg
,
x
Ë(‘egË>> 
	`XB_ARB_RR_SHFT
(xË& 
XB_ARB_RR_MSK
)

	)

308 
	#XB_WID_STAT_LINK_INTR_SHFT
 (24)

	)

309 
	#XB_WID_STAT_LINK_INTR_MASK
 (0xFF << 
XB_WID_STAT_LINK_INTR_SHFT
)

	)

310 
	#XB_WID_STAT_LINK_INTR
(
x
Ë(0x1 << (((x)&7Ë+ 
XB_WID_STAT_LINK_INTR_SHFT
))

	)

311 
	#XB_WID_STAT_WIDGET0_INTR
 0x00800000

	)

312 
	#XB_WID_STAT_SRCID_MASK
 0x000003c0

	)

313 
	#XB_WID_STAT_REG_ACC_ERR
 0x00000020

	)

314 
	#XB_WID_STAT_RECV_TOUT
 0x00000010

	)

315 
	#XB_WID_STAT_ARB_TOUT
 0x00000008

	)

316 
	#XB_WID_STAT_XTALK_ERR
 0x00000004

	)

317 
	#XB_WID_STAT_DST_TOUT
 0x00000002

	)

318 
	#XB_WID_STAT_MULTI_ERR
 0x00000001

	)

320 
	#XB_WID_STAT_SRCID_SHFT
 6

	)

323 
	#XB_WID_CTRL_REG_ACC_IE
 
XB_WID_STAT_REG_ACC_ERR


	)

324 
	#XB_WID_CTRL_RECV_TOUT
 
XB_WID_STAT_RECV_TOUT


	)

325 
	#XB_WID_CTRL_ARB_TOUT
 
XB_WID_STAT_ARB_TOUT


	)

326 
	#XB_WID_CTRL_XTALK_IE
 
XB_WID_STAT_XTALK_ERR


	)

332 #ifde‡
SABLE


333 
	#XBOW_WIDGET_PART_NUM
 0xc111

	)

334 
	#XXBOW_WIDGET_PART_NUM
 0xc112

	)

335 
	#XBOW_WIDGET_MFGR_NUM
 0x0

	)

336 
	#XXBOW_WIDGET_MFGR_NUM
 0x0

	)

338 
	#XBOW_WIDGET_PART_NUM
 0x0

	)

339 
	#XXBOW_WIDGET_PART_NUM
 0xd000

	)

340 
	#XBOW_WIDGET_MFGR_NUM
 0x0

	)

341 
	#XXBOW_WIDGET_MFGR_NUM
 0x0

	)

342 
	#PXBOW_WIDGET_PART_NUM
 0xd100

	)

345 
	#XBOW_REV_1_0
 0x1

	)

346 
	#XBOW_REV_1_1
 0x2

	)

347 
	#XBOW_REV_1_2
 0x3

	)

348 
	#XBOW_REV_1_3
 0x4

	)

349 
	#XBOW_REV_2_0
 0x5

	)

351 
	#XXBOW_PART_REV_1_0
 (
XXBOW_WIDGET_PART_NUM
 << 4 | 0x1 )

	)

352 
	#XXBOW_PART_REV_2_0
 (
XXBOW_WIDGET_PART_NUM
 << 4 | 0x2 )

	)

355 
	#XBOW_WID_ARB_RELOAD_INT
 0x3‡

	)

358 
	#«sid_has_xbridge
(
«sid
) \

359 (
	`XWIDGET_PART_NUM
(
	`XWIDGET_ID_READ
(
«sid
, 0)Ë=
XXBOW_WIDGET_PART_NUM
)

	)

361 
	#IS_XBRIDGE_XBOW
(
wid
) \

362 (
	`XWIDGET_PART_NUM
(
wid
Ë=
XXBOW_WIDGET_PART_NUM
 && \

363 
	`XWIDGET_MFG_NUM
(
wid
Ë=
XXBOW_WIDGET_MFGR_NUM
)

	)

364 
	#IS_PIC_XBOW
(
wid
) \

365 (
	`XWIDGET_PART_NUM
(
wid
Ë=
PXBOW_WIDGET_PART_NUM
 && \

366 
	`XWIDGET_MFG_NUM
(
wid
Ë=
XXBOW_WIDGET_MFGR_NUM
)

	)

368 
	#XBOW_WAR_ENABLED
(
pv
, 
widid
Ë((1 << 
	`XWIDGET_REV_NUM
(widid)Ë&Öv)

	)

369 
	#PV854827
 (~0Ë

	)

370 
	#PV863579
 (1 << 1Ë

	)

372 #ifde‡
_LANGUAGE_C


384 
	uxbw0_cmdw‹d_u
 {

385 
xbowªg_t
 
	mcmdw‹d
;

387 
__uöt32_t
 
	mde°id
:4,

388 
	m§cid
:4,

389 
	m∑˘yp
:4,

390 
	mäum
:5,

391 
	m˘
:1,

392 
	mds
:2,

393 
	mgbr
:1,

394 
	mvbpm
:1,

395 
	mîr‹
:1,

396 
	mb¨r
:1,

397 
	mrsvd
:8;

398 } 
	mxbw0_cmdfõld
;

399 } 
	txbw0_cmdw‹d_t
;

401 
	#xbcmd_de°id
 
xbw0_cmdfõld
.
de°id


	)

402 
	#xbcmd_§cid
 
xbw0_cmdfõld
.
§cid


	)

403 
	#xbcmd_∑˘yp
 
xbw0_cmdfõld
.
∑˘yp


	)

404 
	#xbcmd_äum
 
xbw0_cmdfõld
.
äum


	)

405 
	#xbcmd_˘
 
xbw0_cmdfõld
.
˘


	)

406 
	#xbcmd_ds
 
xbw0_cmdfõld
.
ds


	)

407 
	#xbcmd_gbr
 
xbw0_cmdfõld
.
gbr


	)

408 
	#xbcmd_vbpm
 
xbw0_cmdfõld
.
vbpm


	)

409 
	#xbcmd_îr‹
 
xbw0_cmdfõld
.
îr‹


	)

410 
	#xbcmd_b¨r
 
xbw0_cmdfõld
.
b¨r


	)

415 
	#XBCMDTYP_READREQ
 0

	)

416 
	#XBCMDTYP_READRESP
 1

	)

417 
	#XBCMDTYP_WRREQ_RESP
 2

	)

418 
	#XBCMDTYP_WRRESP
 3

	)

419 
	#XBCMDTYP_WRREQ_NORESP
 4

	)

420 
	#XBCMDTYP_FETCHOP
 6

	)

421 
	#XBCMDTYP_STOREOP
 8

	)

422 
	#XBCMDTYP_SPLPKT_REQ
 0xE

	)

423 
	#XBCMDTYP_SPLPKT_RESP
 0xF

	)

428 
	#XBCMDSZ_DOUBLEWORD
 0

	)

429 
	#XBCMDSZ_QUARTRCACHE
 1

	)

430 
	#XBCMDSZ_FULLCACHE
 2

	)

435 
	uxbw0_°©us_u
 {

436 
xbowªg_t
 
	m°©usw‹d
;

438 
__uöt32_t
 
	mlökXöå
:8,

439 
	mwid0öå
:1,

440 
	mªsvd1
:13,

441 
	m§c_id
:4,

442 
	mªgacc_îr
:1,

444 
	mw0_ªcv_tout
:1,

445 
	mw0_¨b_tout
:1,

447 
	mxèlk_îr
:1,

448 
	mc⁄√˘_tout
:1,

449 
	mmu…_îr
:1;

450 } 
	mxbw0_°fõld
;

451 } 
	txbw0_°©us_t
;

453 
	#xb°_lökXöå
 
xbw0_°fõld
.
lökXöå


	)

454 
	#xb°_w0öå
 
xbw0_°fõld
.
wid0öå


	)

455 
	#xb°_ªgacc_îr
 
xbw0_°fõld
.
ªgacc_îr


	)

456 
	#xb°_xèlk_îr
 
xbw0_°fõld
.
xèlk_îr


	)

457 
	#xb°_c⁄√˘_tout
 
xbw0_°fõld
.
c⁄√˘_tout


	)

458 
	#xb°_mu…_îr
 
xbw0_°fõld
.
mu…_îr


	)

459 
	#xb°_§c_id
 
xbw0_°fõld
.
§c_id


	)

460 
	#xb°_w0_ªcv_tout
 
xbw0_°fõld
.
w0_ªcv_tout


	)

461 
	#xb°_w0_¨b_tout
 
xbw0_°fõld
.
w0_¨b_tout


	)

466 
	uxbw0_˘æ_u
 {

467 
xbowªg_t
 
	m˘æw‹d
;

469 
__uöt32_t


470 
	mªsvd1
:24,

471 
	míabÀ_w©chdog
:1,

472 
	míabÀ_w0_tout_˙å
:1,

473 
	mac˚º_öå
:1,

474 
	mw0_ªcv_tout_öå
:1,

475 
	mw0_¨g_tout_öå
:1,

476 
	mxèlkîr_öå
:1,

477 
	mc⁄¡out_öå
:1,

478 
	mªsvd3
:1;

479 } 
	mxbw0_˘æfõld
;

480 } 
	txbw0_˘æ_t
;

482 
	uxbow_lök˘æ_u
 {

483 
xbowªg_t
 
	mxbl_˘æw‹d
;

485 
__uöt32_t
 
	mÆive_öå
:1, 
	mrsvd1
:1, 
	m≥rf_mode
:2,

486 
	möbuf_Àvñ
:3, 
	m£nd_bm8
:1, 
	mf‹˚_badŒp
:1,

487 
	mŒp_¸edô
:5, 
	mide°_öå
:1, 
	mobuf_öå
:1,

488 
	mrsvd2
:7, 
	mbwÆloc_öå
:1, 
	mrcvov_öå
:1,

489 
	måxov_öå
:1, 
	måx_max_ªåy_öå
:1,

490 
	mrcv_îr_öå
:1, 
	måx_ªåy_öå
:1, 
	mrsvd3
:1,

491 
	mmaxto_öå
:1, 
	m§˘o_öå
:1;

492 } 
	mxb_lökc⁄åﬁ
;

493 } 
	txbow_lök˘æ_t
;

496 
	#xb˘l_ac˚º_öå
 (
xbw0_˘æfõld
.
ac˚º_öå
)

	)

497 
	#xb˘l_xèlkîr_öå
 (
xbw0_˘æfõld
.
xèlkîr_öå
)

	)

498 
	#xb˘l_˙¡out_öå
 (
xbw0_˘æfõld
.
c⁄¡out_öå
)

	)

500 
	#XBW0_CTRL_ACCERR_INTR
 (1 << 5)

	)

501 
	#XBW0_CTRL_XTERR_INTR
 (1 << 2)

	)

502 
	#XBW0_CTRL_CONNTOUT_INTR
 (1 << 1)

	)

508 
	uxbow_lökX_°©us_u
 {

509 
xbowªg_t
 
	mlök°©us
;

511 
__uöt32_t
 
	mÆive
:1,

512 
	mªsvd1
:12,

513 
	mmîr‹
:1,

514 
	mûlde°
:1,

515 
	mi€
:1,

516 
	mbw_îΩ‹t
:8,

517 
	mŒp_rxovÊow
:1,

518 
	mŒp_txovÊow
:1,

519 
	mŒp_maxtxªåy
:1,

520 
	mŒp_rcvîr‹
:1,

521 
	mŒp_xmôªåy
:1,

522 
	mpkt_toutde°
:1,

523 
	mpkt_toutc⁄n
:1,

524 
	mpkt_tout§c
:1;

525 } 
	mxb_lök°©us
;

526 } 
	txbwX_°©_t
;

528 
	#lök_Æive
 
xb_lök°©us
.
Æive


	)

529 
	#lök_mu…õº‹
 
xb_lök°©us
.
mîr‹


	)

530 
	#lök_ûÀgÆ_de°
 
xb_lök°©us
.
ûlde°


	)

531 
	#lök_i€
 
xb_lök°©us
.
i€


	)

532 
	#lök_max_ªq_tout
 
xb_lök°©us
.
pkt_toutc⁄n


	)

533 
	#lök_pkt_toutc⁄n
 
xb_lök°©us
.
pkt_toutc⁄n


	)

534 
	#lök_pkt_toutde°
 
xb_lök°©us
.
pkt_toutde°


	)

535 
	#lök_pkt_tout§c
 
xb_lök°©us
.
pkt_tout§c


	)

537 
	uxbow_aux_lökX_°©us_u
 {

538 
xbowªg_t
 
	maux_lök°©us
;

540 
__uöt32_t
 
	mrx_îr_˙t
:8,

541 
	mtx_ªåy_˙t
:8,

542 
	mto_§c_loc
:8,

543 
	mrsvd1
:1,

544 
	mÁû_mode
:1,

545 
	mwid_¥e£¡
:1,

546 
	mbô_mode_8
:1,

547 
	mrsvd2
:4;

548 } 
	mxb_aux_lök°©us
;

549 } 
	txbow_aux_lök_°©us_t
;

552 
	uxbow_≥rf_cou¡_u
 {

553 
xbowªg_t
 
	mxb_cou¡î_vÆ
;

555 
__uöt32_t
 
	mrsvd
:9, 
	mlök_£À˘
:3, 
	mcou¡
:20;

556 } 
	mxb_≥rf
;

557 } 
	txbow_≥rfcou¡_t
;

559 
	#XBOW_COUNTER_MASK
 0xFFFFF

	)

561 
xbow_widgë_¥e£¡
(
xbow_t
 * 
xbow
, 
p‹t
);

563 #ifde‡
SN1


564 
xbow_b¨rõr
(
xbow_t
 *, , );

567 #i‚de‡
_STANDALONE


568 
xwidgë_öå_¥e£t_f
 
xbow_öå_¥e£t
;

569 
xswôch_ª£t_lök_f
 
xbow_ª£t_lök
;

570 
xbow_mÃe£t
(
xbow_t
 *);

572 
xbowªg_t
 
¥öt_xbow_°©us
(
__psunsig√d_t
, );

578 #ifdef 
MACROFIELD_LINE


586 #i‚de‡
MACROFIELD_LINE_BITFIELD


587 
	#MACROFIELD_LINE_BITFIELD
(
m
Ë

	)

590 
ma¸ofõld_s
 
	gxbow_ma¸ofõld
[] =

593 
MACROFIELD_LINE
(
XBOW_WID_ID
, 
xb_wid_id
)

594 
MACROFIELD_LINE
(
XBOW_WID_STAT
, 
xb_wid_°©
)

595 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_LINK_INTR
(0xF))

596 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_LINK_INTR
(0xE))

597 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_LINK_INTR
(0xD))

598 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_LINK_INTR
(0xC))

599 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_LINK_INTR
(0xB))

600 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_LINK_INTR
(0xA))

601 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_LINK_INTR
(0x9))

602 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_LINK_INTR
(0x8))

603 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_WIDGET0_INTR
)

604 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_REG_ACC_ERR
)

605 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_XTALK_ERR
)

606 
MACROFIELD_LINE_BITFIELD
(
XB_WID_STAT_MULTI_ERR
)

607 
MACROFIELD_LINE
(
XBOW_WID_ERR_UPPER
, 
xb_wid_îr_uµî
)

608 
MACROFIELD_LINE
(
XBOW_WID_ERR_LOWER
, 
xb_wid_îr_lowî
)

609 
MACROFIELD_LINE
(
XBOW_WID_CONTROL
, 
xb_wid_c⁄åﬁ
)

610 
MACROFIELD_LINE_BITFIELD
(
XB_WID_CTRL_REG_ACC_IE
)

611 
MACROFIELD_LINE_BITFIELD
(
XB_WID_CTRL_XTALK_IE
)

612 
MACROFIELD_LINE
(
XBOW_WID_REQ_TO
, 
xb_wid_ªq_timeout
)

613 
MACROFIELD_LINE
(
XBOW_WID_INT_UPPER
, 
xb_wid_öt_uµî
)

614 
MACROFIELD_LINE
(
XBOW_WID_INT_LOWER
, 
xb_wid_öt_lowî
)

615 
MACROFIELD_LINE
(
XBOW_WID_ERR_CMDWORD
, 
xb_wid_îr_cmdw‹d
)

616 
MACROFIELD_LINE
(
XBOW_WID_LLP
, 
xb_wid_Œp
)

617 
MACROFIELD_LINE
(
XBOW_WID_STAT_CLR
, 
xb_wid_°©_˛r
)

618 
MACROFIELD_LINE
(
XBOW_WID_ARB_RELOAD
, 
xb_wid_¨b_ªlﬂd
)

619 
MACROFIELD_LINE
(
XBOW_WID_PERF_CTR_A
, 
xb_≥rf_˘r_a
)

620 
MACROFIELD_LINE
(
XBOW_WID_PERF_CTR_B
, 
xb_≥rf_˘r_b
)

621 
MACROFIELD_LINE
(
XBOW_WID_NIC
, 
xb_nic
)

622 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(8), 
xb_lök
(8))

623 
MACROFIELD_LINE
(
XB_LINK_IBUF_FLUSH
(8), 
xb_lök
(8).
lök_ibf
)

624 
MACROFIELD_LINE
(
XB_LINK_CTRL
(8), 
xb_lök
(8).
lök_c⁄åﬁ
)

625 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_LINKALIVE_IE
)

626 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_PERF_CTR_MODE_MSK
)

627 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_IBUF_LEVEL_MSK
)

628 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_8BIT_MODE
)

629 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_BAD_LLP_PKT
)

630 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_WIDGET_CR_MSK
)

631 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_ILLEGAL_DST_IE
)

632 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_OALLOC_IBUF_IE
)

633 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_BNDWDTH_ALLOC_IE
)

634 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_RCV_CNT_OFLOW_IE
)

635 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_XMT_CNT_OFLOW_IE
)

636 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_XMT_MAX_RTRY_IE
)

637 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_RCV_IE
)

638 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_XMT_RTRY_IE
)

639 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_MAXREQ_TOUT_IE
)

640 
MACROFIELD_LINE_BITFIELD
(
XB_CTRL_SRC_TOUT_IE
)

641 
MACROFIELD_LINE
(
XB_LINK_STATUS
(8), 
xb_lök
(8).
lök_°©us
)

642 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_LINKALIVE
)

643 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_MULTI_ERR
)

644 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_ILLEGAL_DST_ERR
)

645 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_OALLOC_IBUF_ERR
)

646 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_BNDWDTH_ALLOC_ID_MSK
)

647 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_RCV_CNT_OFLOW_ERR
)

648 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_XMT_CNT_OFLOW_ERR
)

649 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_XMT_MAX_RTRY_ERR
)

650 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_RCV_ERR
)

651 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_XMT_RTRY_ERR
)

652 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_MAXREQ_TOUT_ERR
)

653 
MACROFIELD_LINE_BITFIELD
(
XB_STAT_SRC_TOUT_ERR
)

654 
MACROFIELD_LINE
(
XB_LINK_ARB_UPPER
(8), 
xb_lök
(8).
lök_¨b_uµî
)

655 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_RR_MSK
 << 
XB_ARB_RR_SHFT
(0xb))

656 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_GBR_MSK
 << 
XB_ARB_GBR_SHFT
(0xb))

657 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_RR_MSK
 << 
XB_ARB_RR_SHFT
(0xa))

658 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_GBR_MSK
 << 
XB_ARB_GBR_SHFT
(0xa))

659 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_RR_MSK
 << 
XB_ARB_RR_SHFT
(0x9))

660 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_GBR_MSK
 << 
XB_ARB_GBR_SHFT
(0x9))

661 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_RR_MSK
 << 
XB_ARB_RR_SHFT
(0x8))

662 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_GBR_MSK
 << 
XB_ARB_GBR_SHFT
(0x8))

663 
MACROFIELD_LINE
(
XB_LINK_ARB_LOWER
(8), 
xb_lök
(8).
lök_¨b_lowî
)

664 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_RR_MSK
 << 
XB_ARB_RR_SHFT
(0xf))

665 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_GBR_MSK
 << 
XB_ARB_GBR_SHFT
(0xf))

666 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_RR_MSK
 << 
XB_ARB_RR_SHFT
(0xe))

667 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_GBR_MSK
 << 
XB_ARB_GBR_SHFT
(0xe))

668 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_RR_MSK
 << 
XB_ARB_RR_SHFT
(0xd))

669 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_GBR_MSK
 << 
XB_ARB_GBR_SHFT
(0xd))

670 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_RR_MSK
 << 
XB_ARB_RR_SHFT
(0xc))

671 
MACROFIELD_LINE_BITFIELD
(
XB_ARB_GBR_MSK
 << 
XB_ARB_GBR_SHFT
(0xc))

672 
MACROFIELD_LINE
(
XB_LINK_STATUS_CLR
(8), 
xb_lök
(8).
lök_°©us_˛r
)

673 
MACROFIELD_LINE
(
XB_LINK_RESET
(8), 
xb_lök
(8).
lök_ª£t
)

674 
MACROFIELD_LINE
(
XB_LINK_AUX_STATUS
(8), 
xb_lök
(8).
lök_aux_°©us
)

675 
MACROFIELD_LINE_BITFIELD
(
XB_AUX_STAT_RCV_CNT
)

676 
MACROFIELD_LINE_BITFIELD
(
XB_AUX_STAT_XMT_CNT
)

677 
MACROFIELD_LINE_BITFIELD
(
XB_AUX_LINKFAIL_RST_BAD
)

678 
MACROFIELD_LINE_BITFIELD
(
XB_AUX_STAT_PRESENT
)

679 
MACROFIELD_LINE_BITFIELD
(
XB_AUX_STAT_PORT_WIDTH
)

680 
MACROFIELD_LINE_BITFIELD
(
XB_AUX_STAT_TOUT_DST
)

681 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(0x8), 
xb_lök
(0x8))

682 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(0x9), 
xb_lök
(0x9))

683 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(0xA), 
xb_lök
(0xA))

684 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(0xB), 
xb_lök
(0xB))

685 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(0xC), 
xb_lök
(0xC))

686 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(0xD), 
xb_lök
(0xD))

687 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(0xE), 
xb_lök
(0xE))

688 
MACROFIELD_LINE
(
XB_LINK_REG_BASE
(0xF), 
xb_lök
(0xF))

	@/usr/include/utime.h

1 #i‚de‡
__UTIME_H__


2 
	#__UTIME_H__


	)

31 
	~<sys/utime.h
>

32 
	~<öã∫Æ/sgima¸os.h
>

34 
__SGI_LIBC_BEGIN_EXTERN_C


36 
utime
(c⁄° *, c⁄° 
utimbuf
 *);

38 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

57 #ifde‡
CRAY


58 
	#WORD64


	)

60 #ifde‡
__Æpha


61 
	#LONG64


	)

63 #ifde‡
__sgi


64 #i‡(
_MIPS_SZLONG
 == 64)

65 #unde‡
LONG64


66 
	#LONG64


	)

74 #ifde‡
WORD64


75 
	#MUSTCOPY


	)

93 #i‡((
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)Ë&& !deföed(
UNIXCPP
)Ë|| deföed(
ANSICPP
)

94 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

95 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

97 
	#SIZEOF
(
x
Ë
sz_
 
	)
x

105 #ifde‡
WORD64


106 
	tINT64
;

107 
	tCARD64
;

108 
	#B32
 :32

	)

109 
	#B16
 :16

	)

110 #ifde‡
UNSIGNEDBITFIELDS


111 
	tINT32
;

112 
	tINT16
;

114 #ifde‡
__STDC__


115 sig√d 
	tINT32
;

116 sig√d 
	tINT16
;

118 
	tINT32
;

119 
	tINT16
;

123 
	#B32


	)

124 
	#B16


	)

125 #ifde‡
LONG64


126 
	tINT64
;

127 
	tINT32
;

129 
	tINT32
;

131 
	tINT16
;

134 #i‡
deföed
(
__STDC__
Ë|| deföed(
sgi
Ë|| deföed(
AIXV3
)

135 sig√d 
	tINT8
;

137 
	tINT8
;

140 #ifde‡
LONG64


141 
	tCARD64
;

142 
	tCARD32
;

144 
	tCARD32
;

146 
	tCARD16
;

147 
	tCARD8
;

149 
CARD32
 
	tBITS32
;

150 
CARD16
 
	tBITS16
;

151 
CARD8
 
	tBYTE
;

153 
CARD8
 
	tBOOL
;

159 #i‡
deföed
(
WORD64
Ë&& deföed(
UNSIGNEDBITFIELDS
)

160 
	#cvtINT8toI¡
(
vÆ
Ë(((vÆË& 0x00000080Ë? ((vÆË| 0xffffffffffffff00Ë: (vÆ))

	)

161 
	#cvtINT16toI¡
(
vÆ
Ë(((vÆË& 0x00008000Ë? ((vÆË| 0xffffffffffff0000Ë: (vÆ))

	)

162 
	#cvtINT32toI¡
(
vÆ
Ë(((vÆË& 0x80000000Ë? ((vÆË| 0xffffffff00000000Ë: (vÆ))

	)

163 
	#cvtINT8toSh‹t
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

164 
	#cvtINT16toSh‹t
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

165 
	#cvtINT32toSh‹t
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

166 
	#cvtINT8toL⁄g
(
vÆ
Ë
	`cvtINT8toI¡
(vÆ)

	)

167 
	#cvtINT16toL⁄g
(
vÆ
Ë
	`cvtINT16toI¡
(vÆ)

	)

168 
	#cvtINT32toL⁄g
(
vÆ
Ë
	`cvtINT32toI¡
(vÆ)

	)

170 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

171 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

172 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

173 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

174 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

175 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

176 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

177 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

178 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

183 #ifde‡
MUSTCOPY


187 
	#NEXTPTR
(
p
,
t
Ë(((*ËpË+ 
	`SIZEOF
—))

	)

193 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/internal/locale_attr_core.h

13 #i‚de‡
__LOCALE_ATTR_CORE_H__


14 
	#__LOCALE_ATTR_CORE_H__


	)

16 
	~<sgidefs.h
>

17 
	~<öã∫Æ/sgima¸os.h
>

43 
__SGI_LIBC_BEGIN_EXTERN_C


47 
	m_˛ass
 [ 257 ];

48 sig√d 
	m_lowî
 [ 257 ];

49 sig√d 
	m_uµî
 [ 257 ];

51 
	m_cswidth
 [ 7 ];

52 
	m_fûl
 [ 1 ];

56 } 
	t__˘y≥_t
;

59 (*
	t__is£t_func_t
)();

61 
__SGI_LIBC_BEGIN_NAMESPACE_STD


62 #i‚de‡
_WINT_T


63 
	#_WINT_T


	)

64 #i‡(
_MIPS_SZLONG
 == 32)

65 
	twöt_t
;

67 #i‡(
_MIPS_SZLONG
 == 64)

68 
__öt32_t
 
	twöt_t
;

71 
__SGI_LIBC_END_NAMESPACE_STD


74 (*
	t__iscode£t_func_t
)(, 
	t__SGI_LIBC_NAMESPACE_QUALIFIER
 
	twöt_t
);

77 
	s__©å
 {

79 
__˘y≥_t
 * 
_˘y≥_tbl
;

81 
	s_csöfo
 {

82 
_eucwidth
[3];

83 
_s¸width
[3];

84 
_mb_cur_max
;

85 } 
_csöfo
;

87 
	s_euc_func
 {

88 
_is_euc
;

89 
__is£t_func_t
 
_is£t2
;

90 
__is£t_func_t
 
_is£t3
;

91 
__iscode£t_func_t
 
_iscode£t
;

92 } 
_euc_func
;

94 
	s_cﬁœã_ªs
 {

95 
_cﬁl_as_cmp
;

96 } 
_cﬁœã_ªs
;

98 * 
_fûl
[15];

99 } 
	t__©å_t
;

101 
	#_IS_EUC_LOCALE
 (
__libc_©å
.
_euc_func
.
_is_euc
)

	)

104 
__©å_t
 
__libc_©å
;

106 
__SGI_LIBC_END_EXTERN_C


	@/usr/include/internal/stdarg_core.h

1 #i‚de‡
__STDARG_CORE_H__


2 
	#__STDARG_CORE_H__


	)

61 
	~<sgidefs.h
>

62 
	~<öã∫Æ/sgima¸os.h
>

64 
	#_INT
 0

	)

65 
	#_FP
 1

	)

66 
	#_STRUCT
 2

	)

69 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


70 #i‚de‡
_VA_LIST_


71 
	#_VA_LIST_


	)

72 *
	tva_li°
;

75 
	g__SGI_LIBC_END_NAMESPACE_STD


78 
	#va_íd
(
__li°
)

	)

80 #i‡(
_MIPS_SIM
==
_MIPS_SIM_NABI32
 || _MIPS_SIM==
_MIPS_SIM_ABI64
)

83 #i‡(
_MIPS_SIM
==
_MIPS_SIM_NABI32
 || _MIPS_SIM==
_MIPS_SIM_ABI64
)

84 
	#__VA_REGBYTES
 8

	)

90 #ifde‡
_MIPSEB


91 
	#__VA_PADJUST
(
mode
) \

92 (
	`__NO_CFOLD_WARNING
( \

93 ((
	`__buûtö_˛assof
(
mode
Ë=
_INT
) && \

94 ((
mode
Ë< 
__VA_REGBYTES
)) \

95 ? 
__VA_REGBYTES
-(
mode
Ë: 0 ))

	)

97 
	#__VA_PADJUST
(
mode
Ë0

	)

100 
	#__VA_REGBYTES
 4

	)

104 
	#__VA_PADJUST
(
mode
Ë0

	)

108 
	t__va_ùå_t
;

112 
	#__VA_MALIGN
(
mode
) \

113 (
	`__NO_CFOLD_WARNING
( \

114 (
	`__buûtö_Æignof
(
mode
Ë> 
__VA_REGBYTES
) \

115 ? (
__va_ùå_t
)
	`__buûtö_Æignof
(
mode
) \

116 : (
__va_ùå_t
)
__VA_REGBYTES
 ))

	)

118 
	#__VA_PALIGN
(
p
,
mode
) \

119 ––((
__va_ùå_t
)
p
)+(
	`__VA_MALIGN
(
mode
)-1ËË& (-__VA_MALIGN(mode)Ë)

	)

122 
	#va_°¨t
(
vp
, 
∑rmN
Ë(v∞((
__SGI_LIBC_NAMESPACE_QUALIFIER
 
va_li°
)&∑rmN + ’¨mN)))

	)

127 
	#va_¨g
(
vp
,
mode
Ë((modê*)(*)–v∞(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
va_li°
) \

128 (
	`__VA_PALIGN
(
vp
,
mode
)+
	`__VA_PADJUST
(mode)+(mode)Ë)Ë[-1]

	)

130 #i‡
deföed
(
__c99
)

132 
	#va_c›y
(
de°
, 
§c
Ë(de° = src)

	)

139 #i‡
deföed
(
_CFE
)

140 #i‡
deföed
(
__STDC__
) && (__STDC__ != 0 )

142 
	#va_°¨t
(
li°
, 
∑rmN
Ë÷i° = ((*)&∑rmN + ’¨mN)))

	)

144 
	#va_°¨t
(
li°
, 
«me
Ë(Ë÷i° = (*)((*)&...))

	)

149 
	#_VA_ALIGN
(
p
,
a
Ë((()(((*Ì)+(◊)>4?◊):4)-1)Ë& -(◊)>4?◊):4))

	)

155 
	#__va_°ack_¨g
(
li°
,
mode
)\

157 ((
li°
)=(*)
	`_VA_ALIGN
÷i°,
	`__buûtö_Æignof
(
mode
))+ \

158 
	`_VA_ALIGN
((
mode
),4)), \

159 (((*)
li°
Ë- (
	`_VA_ALIGN
((
mode
),4) - (mode))) \

160 )

	)

168 
	#__va_doubÀ_¨g
(
li°
,
mode
) (\

169 ((()
li°
 & 0x1) \

170 ?(
li°
 = (*)((Ói° + 7),(*)((Ói°-6-
_VA_FP_SAVE_AREA
))\

171 :((()
li°
 & 0x2) \

172 ?(
li°
 = (*)((Ói° +10),(*)((Ói°-24-
_VA_FP_SAVE_AREA
)Ë:
	`__va_°ack_¨g
÷i°,
mode
Ë)))

	)

174 
	#va_¨g
(
li°
,
mode
) ((mode*)(\

175 ((
	`__buûtö_˛assof
(
mode
)==
_FP
 && \

176 
	`__buûtö_Æignof
(
mode
)==()) \

177 ? 
	`__va_doubÀ_¨g
(
li°
,
mode
)\

178 : 
	`__va_°ack_¨g
(
li°
,
mode
))))[-1]

	)

183 
	#va_°¨t
(
__li°
, 
__∑rmN
) (__list = (*) \

185 (
	`__buûtö_Æignof
(
__∑rmN
) == 8) ? \

186 ((()&
__∑rmN
 + ()(__parmN) + 8 - 1) & -8L ) : \

187 ((()&
__∑rmN
 + ((()(__parmN) > 4)?()(__parmN):4) + 4 - 1) & () -4L) \

189 )

	)

191 
	#va_¨g
(
__li°
, 
__mode
) ((__mode *)(__list = (*) \

193 (
	`__buûtö_Æignof
(
__mode
) == 8) ? \

194 ((()
__li°
 + ()(
__mode
) + 8 - 1) & -8 ) : \

195 ((()
__li°
 + ((()(
__mode
) > 4)?(__mode):4) + 4 - 1)\

198 )Ë[-1]

	)

	@/usr/include/internal/stddef_core.h

26 #i‚de‡
__STDDEF_CORE_H__


27 
	#__STDDEF_CORE_H__


	)

30 
	~<sgidefs.h
>

31 
	~<öã∫Æ/sgima¸os.h
>

33 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


35 #i‡(
_MIPS_SZPTR
 == 32)

36 
	t±rdiff_t
;

38 #i‡(
_MIPS_SZPTR
 == 64)

39 
__öt64_t
 
	t±rdiff_t
;

42 #i‡!
deföed
(
_SIZE_T
Ë&& !deföed(
_SIZE_T_
)

43 
	#_SIZE_T


	)

44 #i‡(
_MIPS_SZLONG
 == 32)

45 
	tsize_t
;

47 #i‡(
_MIPS_SZLONG
 == 64)

48 
	tsize_t
;

52 #i‚de‡
NULL


53 
	#NULL
 0L

	)

56 #i‚de‡
_WCHAR_T


57 
	#_WCHAR_T


	)

58 #i‡(
_MIPS_SZLONG
 == 32)

59 
	twch¨_t
;

61 #i‡(
_MIPS_SZLONG
 == 64)

62 
__öt32_t
 
	twch¨_t
;

66 
	g__SGI_LIBC_END_NAMESPACE_STD


68 #i‡
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 400)

69 
	#off£tof
(
t
, 
memb
Ë((
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
)
	`__INTADDR__
(&((— *)0)->memb)))

	)

71 
	#off£tof
(
s
, 
m
Ë(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
)(&(((†*)0)->m))

	)

	@/usr/include/inttypes.h

33 #i‚de‡
__INTTYPES_H__


34 
	#__INTTYPES_H__


	)

41 
	#__INTTYPES_MAJOR
 0

	)

42 
	#__INTTYPES_MINOR
 1

	)

61 
	~<°™d¨ds.h
>

62 
	~<sgidefs.h
>

63 
	~<öã∫Æ/sgima¸os.h
>

65 #i‡!(
deföed
(
__c99
))

67 #i‚de‡
__öây≥s_INCLUDED


68 
	#__öây≥s_INCLUDED


	)

73 sig√d 
	töt8_t
;

74 
	tuöt8_t
;

75 sig√d 
	töt16_t
;

76 
	tuöt16_t
;

77 sig√d 
	töt32_t
;

78 
	tuöt32_t
;

79 
__öt64_t
 
	töt64_t
;

80 
__uöt64_t
 
	tuöt64_t
;

81 
__öt64_t
 
	tötmax_t
;

82 
__uöt64_t
 
	tuötmax_t
;

83 sig√d 
	töçå_t
;

84 
	tuöçå_t
;

88 #i‡
_SGIAPI


90 
	#INT8_MIN
 (-127-1)

	)

91 
	#INT8_MAX
 (127)

	)

92 
	#UINT8_MAX
 (255u)

	)

93 
	#INT16_MIN
 (-32767-1)

	)

94 
	#INT16_MAX
 (32767)

	)

95 
	#UINT16_MAX
 (65535u)

	)

96 
	#INT32_MIN
 (-2147483647-1)

	)

97 
	#INT32_MAX
 (2147483647)

	)

98 
	#UINT32_MAX
 (4294967295u)

	)

99 
	#INT64_MIN
 (-9223372036854775807LL-1)

	)

100 
	#INT64_MAX
 (9223372036854775807LL)

	)

101 
	#UINT64_MAX
 (18446744073709551615uLL)

	)

102 
	#INTMAX_MIN
 (-9223372036854775807LL-1)

	)

103 
	#INTMAX_MAX
 (9223372036854775807LL)

	)

104 
	#UINTMAX_MAX
 (18446744073709551615uLL)

	)

138 
	#__CONCAT__
(
A
,
B
ËA ## 
	)
B

140 
	#INT8_C
(
c
Ë((
öt8_t
Ëc)

	)

141 
	#UINT8_C
(
c
Ë((
uöt8_t
Ë
	`__CONCAT__
(c,
u
))

	)

142 
	#INT16_C
(
c
Ë((
öt16_t
Ëc)

	)

143 
	#UINT16_C
(
c
Ë((
uöt16_t
Ë
	`__CONCAT__
(c,
u
))

	)

144 
	#INT32_C
(
c
Ë((
öt32_t
Ëc)

	)

145 
	#UINT32_C
(
c
Ë((
uöt32_t
Ë
	`__CONCAT__
(c,
u
))

	)

146 
	#INT64_C
(
c
Ë((
öt64_t
Ë
	`__CONCAT__
(c,
Œ
))

	)

147 
	#UINT64_C
(
c
Ë((
uöt64_t
Ë
	`__CONCAT__
(c,
uŒ
))

	)

148 
	#INTMAX_C
(
c
Ë((
öt64_t
Ë
	`__CONCAT__
(c,
Œ
))

	)

149 
	#UINTMAX_C
(
c
Ë((
uöt64_t
Ë
	`__CONCAT__
(c,
uŒ
))

	)

187 
	~<°d¨g.h
>

188 
	~<°dio.h
>

190 
i_Ârötf
 ( 
FILE
 *
°ªam
, c⁄° *
f‹m©
, ... );

191 
i_vÂrötf
 ( 
FILE
 *
°ªam
, c⁄° *
f‹m©
, 
va_li°
 
va
 );

192 
i_¥ötf
 ( c⁄° *
f‹m©
, ... );

193 
i_v¥ötf
 ( c⁄° *
f‹m©
, 
va_li°
 
va
 );

194 
i_•rötf
 ( *
s
, c⁄° *
f‹m©
, ... );

195 
i_v•rötf
 ( *
s
, c⁄° *
f‹m©
, 
va_li°
 
va
 );

197 
i_fsˇnf
 ( 
FILE
 *
°ªam
, c⁄° *
f‹m©
, ... );

198 
i_sˇnf
 ( c⁄° *
f‹m©
, ... );

199 
i_ssˇnf
 ( *
s
, c⁄° *
f‹m©
, ... );

209 
öt8_t
 
°πoi8
 (const *, **, );

210 
öt16_t
 
°πoi16
 (const *, **, );

211 
öt32_t
 
°πoi32
 (const *, **, );

212 
öt64_t
 
°πoi64
 (const *, **, );

213 
ötmax_t
 
°πoimax
 (const *, **, );

214 
uöt8_t
 
°πou8
 (const *, **, );

215 
uöt16_t
 
°πou16
 (const *, **, );

216 
uöt32_t
 
°πou32
 (const *, **, );

217 
uöt64_t
 
°πou64
 (const *, **, );

218 
uötmax_t
 
°πoumax
 (const *, **, );

228 
öt32_t
 
abs_32
 ( int32_t );

229 
öt64_t
 
abs_64
 ( int64_t );

230 
ötmax_t
 
abs_max
 ( intmax_t );

232 °ru˘ { 
öt32_t
 
	mquŸ
; i¡32_à
	mªm
; } 
	tdiv32_t
;

233 °ru˘ { 
öt64_t
 
	mquŸ
; i¡64_à
	mªm
; } 
	tdiv64_t
;

234 °ru˘ { 
ötmax_t
 
	mquŸ
; i¡max_à
	mªm
; } 
	tdivmax_t
;

235 
div32_t
 
div_32
 ( 
öt32_t
 
numî
, i¡32_à
díom
 );

236 
div64_t
 
div_64
 ( 
öt64_t
 
numî
, i¡64_à
díom
 );

237 
divmax_t
 
div_max
 ( 
ötmax_t
 
numî
, i¡max_à
díom
 );

242 
	~<°döt.h
>

243 
	~<wch¨.h
>

246 
ötmax_t
 
	mquŸ
;

247 
ötmax_t
 
	mªm
;

248 } 
	timaxdiv_t
;

252 
	#PRId8
 "hhd"

	)

253 
	#PRId16
 "hd"

	)

254 
	#PRId32
 "d"

	)

255 
	#PRId64
 "Œd"

	)

257 
	#PRIi8
 "hhi"

	)

258 
	#PRIi16
 "hi"

	)

259 
	#PRIi32
 "i"

	)

260 
	#PRIi64
 "Œi"

	)

262 
	#PRIdLEAST8
 
PRId8


	)

263 
	#PRIdLEAST16
 
PRId16


	)

264 
	#PRIdLEAST32
 
PRId32


	)

265 
	#PRIdLEAST64
 
PRId64


	)

267 
	#PRIiLEAST8
 
PRIi8


	)

268 
	#PRIiLEAST16
 
PRIi16


	)

269 
	#PRIiLEAST32
 
PRIi32


	)

270 
	#PRIiLEAST64
 
PRIi64


	)

272 
	#PRIdFAST8
 
PRId8


	)

273 
	#PRIdFAST16
 
PRId16


	)

274 
	#PRIdFAST32
 
PRId32


	)

275 
	#PRIdFAST64
 
PRId64


	)

277 
	#PRIiFAST8
 
PRIi8


	)

278 
	#PRIiFAST16
 
PRIi16


	)

279 
	#PRIiFAST32
 
PRIi32


	)

280 
	#PRIiFAST64
 
PRIi64


	)

282 
	#PRIdMAX
 
PRId64


	)

283 
	#PRIiMAX
 
PRIi64


	)

285 #i‡(
_MIPS_SZLONG
 == 32)

286 
	#PRIdPTR
 
PRId32


	)

287 
	#PRIiPTR
 
PRIi32


	)

289 #i‡(
_MIPS_SZLONG
 == 64)

290 
	#PRIdPTR
 
PRId64


	)

291 
	#PRIiPTR
 
PRIi64


	)

296 
	#PRIo8
 "hho"

	)

297 
	#PRIo16
 "ho"

	)

298 
	#PRIo32
 "o"

	)

299 
	#PRIo64
 "Œo"

	)

301 
	#PRIu8
 "hhu"

	)

302 
	#PRIu16
 "hu"

	)

303 
	#PRIu32
 "u"

	)

304 
	#PRIu64
 "Œu"

	)

306 
	#PRIx8
 "hhx"

	)

307 
	#PRIx16
 "hx"

	)

308 
	#PRIx32
 "x"

	)

309 
	#PRIx64
 "Œx"

	)

311 
	#PRIX8
 "hhX"

	)

312 
	#PRIX16
 "hX"

	)

313 
	#PRIX32
 "X"

	)

314 
	#PRIX64
 "ŒX"

	)

316 
	#PRIoLEAST8
 
PRIo8


	)

317 
	#PRIoLEAST16
 
PRIo16


	)

318 
	#PRIoLEAST32
 
PRIo32


	)

319 
	#PRIoLEAST64
 
PRIo64


	)

321 
	#PRIuLEAST8
 
PRIu8


	)

322 
	#PRIuLEAST16
 
PRIu16


	)

323 
	#PRIuLEAST32
 
PRIu32


	)

324 
	#PRIuLEAST64
 
PRIu64


	)

326 
	#PRIxLEAST8
 
PRIx8


	)

327 
	#PRIxLEAST16
 
PRIx16


	)

328 
	#PRIxLEAST32
 
PRIx32


	)

329 
	#PRIxLEAST64
 
PRIx64


	)

331 
	#PRIXLEAST8
 
PRIX8


	)

332 
	#PRIXLEAST16
 
PRIX16


	)

333 
	#PRIXLEAST32
 
PRIX32


	)

334 
	#PRIXLEAST64
 
PRIX64


	)

336 
	#PRIoFAST8
 
PRIo8


	)

337 
	#PRIoFAST16
 
PRIo16


	)

338 
	#PRIoFAST32
 
PRIo32


	)

339 
	#PRIoFAST64
 
PRIo64


	)

341 
	#PRIuFAST8
 
PRIu8


	)

342 
	#PRIuFAST16
 
PRIu16


	)

343 
	#PRIuFAST32
 
PRIu32


	)

344 
	#PRIuFAST64
 
PRIu64


	)

346 
	#PRIxFAST8
 
PRIx8


	)

347 
	#PRIxFAST16
 
PRIx16


	)

348 
	#PRIxFAST32
 
PRIx32


	)

349 
	#PRIxFAST64
 
PRIx64


	)

351 
	#PRIXFAST8
 
PRIX8


	)

352 
	#PRIXFAST16
 
PRIX16


	)

353 
	#PRIXFAST32
 
PRIX32


	)

354 
	#PRIXFAST64
 
PRIX64


	)

356 
	#PRIoMAX
 
PRIo64


	)

357 
	#PRIuMAX
 
PRIu64


	)

358 
	#PRIxMAX
 
PRIx64


	)

359 
	#PRIXMAX
 
PRIX64


	)

361 #i‡(
_MIPS_SZLONG
 == 32)

362 
	#PRIoPTR
 
PRIo32


	)

363 
	#PRIuPTR
 
PRIu32


	)

364 
	#PRIxPTR
 
PRIx32


	)

365 
	#PRIXPTR
 
PRIX32


	)

367 #i‡(
_MIPS_SZLONG
 == 64)

368 
	#PRIoPTR
 
PRIo64


	)

369 
	#PRIuPTR
 
PRIu64


	)

370 
	#PRIxPTR
 
PRIx64


	)

371 
	#PRIXPTR
 
PRIX64


	)

376 
	#SCNd8
 "hhd"

	)

377 
	#SCNd16
 "hd"

	)

378 
	#SCNd32
 "d"

	)

379 
	#SCNd64
 "Œd"

	)

381 
	#SCNi8
 "hhi"

	)

382 
	#SCNi16
 "hi"

	)

383 
	#SCNi32
 "i"

	)

384 
	#SCNi64
 "Œi"

	)

386 
	#SCNdLEAST8
 
SCNd8


	)

387 
	#SCNdLEAST16
 
SCNd16


	)

388 
	#SCNdLEAST32
 
SCNd32


	)

389 
	#SCNdLEAST64
 
SCNd64


	)

391 
	#SCNiLEAST8
 
SCNi8


	)

392 
	#SCNiLEAST16
 
SCNi16


	)

393 
	#SCNiLEAST32
 
SCNi32


	)

394 
	#SCNiLEAST64
 
SCNi64


	)

396 
	#SCNdFAST8
 
SCNd8


	)

397 
	#SCNdFAST16
 
SCNd16


	)

398 
	#SCNdFAST32
 
SCNd32


	)

399 
	#SCNdFAST64
 
SCNd64


	)

401 
	#SCNiFAST8
 
SCNi8


	)

402 
	#SCNiFAST16
 
SCNi16


	)

403 
	#SCNiFAST32
 
SCNi32


	)

404 
	#SCNiFAST64
 
SCNi64


	)

406 
	#SCNdMAX
 
SCNd64


	)

407 
	#SCNiMAX
 
SCNi64


	)

409 #i‡(
_MIPS_SZLONG
 == 32)

410 
	#SCNdPTR
 
SCNd32


	)

411 
	#SCNiPTR
 
SCNi32


	)

413 #i‡(
_MIPS_SZLONG
 == 64)

414 
	#SCNdPTR
 
SCNd64


	)

415 
	#SCNiPTR
 
SCNi64


	)

420 
	#SCNo8
 "hho"

	)

421 
	#SCNo16
 "ho"

	)

422 
	#SCNo32
 "o"

	)

423 
	#SCNo64
 "Œo"

	)

425 
	#SCNu8
 "hhu"

	)

426 
	#SCNu16
 "hu"

	)

427 
	#SCNu32
 "u"

	)

428 
	#SCNu64
 "Œu"

	)

430 
	#SCNx8
 "hhx"

	)

431 
	#SCNx16
 "hx"

	)

432 
	#SCNx32
 "x"

	)

433 
	#SCNx64
 "Œx"

	)

435 
	#SCNX8
 "hhX"

	)

436 
	#SCNX16
 "hX"

	)

437 
	#SCNX32
 "X"

	)

438 
	#SCNX64
 "ŒX"

	)

440 
	#SCNoLEAST8
 
SCNo8


	)

441 
	#SCNoLEAST16
 
SCNo16


	)

442 
	#SCNoLEAST32
 
SCNo32


	)

443 
	#SCNoLEAST64
 
SCNo64


	)

445 
	#SCNuLEAST8
 
SCNu8


	)

446 
	#SCNuLEAST16
 
SCNu16


	)

447 
	#SCNuLEAST32
 
SCNu32


	)

448 
	#SCNuLEAST64
 
SCNu64


	)

450 
	#SCNxLEAST8
 
SCNx8


	)

451 
	#SCNxLEAST16
 
SCNx16


	)

452 
	#SCNxLEAST32
 
SCNx32


	)

453 
	#SCNxLEAST64
 
SCNx64


	)

455 
	#SCNXLEAST8
 
SCNX8


	)

456 
	#SCNXLEAST16
 
SCNX16


	)

457 
	#SCNXLEAST32
 
SCNX32


	)

458 
	#SCNXLEAST64
 
SCNX64


	)

460 
	#SCNoFAST8
 
SCNo8


	)

461 
	#SCNoFAST16
 
SCNo16


	)

462 
	#SCNoFAST32
 
SCNo32


	)

463 
	#SCNoFAST64
 
SCNo64


	)

465 
	#SCNuFAST8
 
SCNu8


	)

466 
	#SCNuFAST16
 
SCNu16


	)

467 
	#SCNuFAST32
 
SCNu32


	)

468 
	#SCNuFAST64
 
SCNu64


	)

470 
	#SCNxFAST8
 
SCNx8


	)

471 
	#SCNxFAST16
 
SCNx16


	)

472 
	#SCNxFAST32
 
SCNx32


	)

473 
	#SCNxFAST64
 
SCNx64


	)

475 
	#SCNXFAST8
 
SCNX8


	)

476 
	#SCNXFAST16
 
SCNX16


	)

477 
	#SCNXFAST32
 
SCNX32


	)

478 
	#SCNXFAST64
 
SCNX64


	)

480 
	#SCNoMAX
 
SCNo64


	)

481 
	#SCNuMAX
 
SCNu64


	)

482 
	#SCNxMAX
 
SCNx64


	)

483 
	#SCNXMAX
 
SCNX64


	)

485 #i‡(
_MIPS_SZLONG
 == 32)

486 
	#SCNoPTR
 
SCNo32


	)

487 
	#SCNuPTR
 
SCNu32


	)

488 
	#SCNxPTR
 
SCNx32


	)

489 
	#SCNXPTR
 
SCNX32


	)

491 #i‡(
_MIPS_SZLONG
 == 64)

492 
	#SCNoPTR
 
SCNo64


	)

493 
	#SCNuPTR
 
SCNu64


	)

494 
	#SCNxPTR
 
SCNx64


	)

495 
	#SCNXPTR
 
SCNX64


	)

500 
ötmax_t
 
imaxabs
(ötmax_à
j
);

501 
imaxdiv_t
 
imaxdiv
(
ötmax_t
 
numî
, i¡max_à
díom
);

502 
ötmax_t
 
°πoimax
(c⁄° * 
__ª°ri˘
 
≈å
,

503 ** 
__ª°ri˘
 
íd±r
,

504 
ba£
);

505 
uötmax_t
 
°πoumax
(c⁄° * 
__ª°ri˘
 
≈å
,

506 ** 
__ª°ri˘
 
íd±r
,

507 
ba£
);

508 
ötmax_t
 
wc°oimax
(c⁄° 
wch¨_t
 * 
__ª°ri˘
 
≈å
,

509 
wch¨_t
 ** 
__ª°ri˘
 
íd±r
,

510 
ba£
);

511 
uötmax_t
 
wc°oumax
(c⁄° 
wch¨_t
 * 
__ª°ri˘
 
≈å
,

512 
wch¨_t
 ** 
__ª°ri˘
 
íd±r
,

513 
ba£
);

515 #¥agm®
›ti⁄Æ
 
imaxabs


516 #¥agm®
›ti⁄Æ
 
imaxdiv


517 #¥agm®
›ti⁄Æ
 
°πoimax


518 #¥agm®
›ti⁄Æ
 
°πoumax


519 #¥agm®
›ti⁄Æ
 
wc°oimax


520 #¥agm®
›ti⁄Æ
 
wc°oumax


	@/usr/include/sys/IP20nvram.h

7 #i‚de‡
__SYS_IP20NVRAM_H__


8 
	#__SYS_IP20NVRAM_H__


	)

13 
	#NVLEN_MAX
 256

	)

18 
	#NVOFF_CHECKSUM
 0

	)

19 
	#NVLEN_CHECKSUM
 1

	)

24 
	#NVOFF_REVISION
 (
NVOFF_CHECKSUM
 + 
NVLEN_CHECKSUM
)

	)

25 
	#NVLEN_REVISION
 1

	)

30 
	#NV_CURRENT_REV
 6

	)

35 
	#NVOFF_CONSOLE
 (
NVOFF_REVISION
 + 
NVLEN_REVISION
)

	)

36 
	#NVLEN_CONSOLE
 2

	)

41 
	#NVOFF_SYSPART
 (
NVOFF_CONSOLE
 + 
NVLEN_CONSOLE
)

	)

42 
	#NVLEN_SYSPART
 48

	)

47 
	#NVOFF_OSLOADER
 (
NVOFF_SYSPART
 + 
NVLEN_SYSPART
)

	)

48 
	#NVLEN_OSLOADER
 18

	)

53 
	#NVOFF_OSFILE
 (
NVOFF_OSLOADER
 + 
NVLEN_OSLOADER
)

	)

54 
	#NVLEN_OSFILE
 28

	)

59 
	#NVOFF_OSOPTS
 (
NVOFF_OSFILE
 + 
NVLEN_OSFILE
)

	)

60 
	#NVLEN_OSOPTS
 12

	)

65 
	#NVOFF_PGCOLOR
 (
NVOFF_OSOPTS
 + 
NVLEN_OSOPTS
)

	)

66 
	#NVLEN_PGCOLOR
 6

	)

71 
	#NVOFF_LBAUD
 (
NVOFF_PGCOLOR
 + 
NVLEN_PGCOLOR
)

	)

72 
	#NVLEN_LBAUD
 5

	)

77 
	#NVOFF_DISKLESS
 (
NVOFF_LBAUD
 + 
NVLEN_LBAUD
)

	)

78 
	#NVLEN_DISKLESS
 1

	)

84 
	#NVOFF_OLDEADDR
 (
NVOFF_DISKLESS
 + 
NVLEN_DISKLESS
)

	)

85 
	#NVLEN_OLDEADDR
 6

	)

86 #i‡(
NVOFF_OLDEADDR
 != 122)

87 
	~"îr‹ -- ﬁdÉthî√àaddªs†© wr⁄g off£t
"

95 
	#NVOFF_TZ
 (
NVOFF_OLDEADDR
 + 
NVLEN_OLDEADDR
)

	)

96 
	#NVLEN_TZ
 8

	)

101 
	#NVOFF_OSPART
 (
NVOFF_TZ
 + 
NVLEN_TZ
)

	)

102 
	#NVLEN_OSPART
 48

	)

107 
	#NVOFF_AUTOLOAD
 (
NVOFF_OSPART
 + 
NVLEN_OSPART
)

	)

108 
	#NVLEN_AUTOLOAD
 1

	)

113 
	#NVOFF_DIAGMODE
 (
NVOFF_AUTOLOAD
 + 
NVLEN_AUTOLOAD
)

	)

114 
	#NVLEN_DIAGMODE
 2

	)

121 
	#NVOFF_NETADDR
 (
NVOFF_DIAGMODE
 + 
NVLEN_DIAGMODE
)

	)

122 
	#NVLEN_NETADDR
 4

	)

127 
	#NVOFF_NOKBD
 (
NVOFF_NETADDR
 + 
NVLEN_NETADDR
)

	)

128 
	#NVLEN_NOKBD
 1

	)

134 
	#NVOFF_KEYBD
 (
NVOFF_NOKBD
 + 
NVLEN_NOKBD
)

	)

135 
	#NVLEN_KEYBD
 5

	)

136 
	#NVOFF_LANG
 (
NVOFF_KEYBD
 + 
NVLEN_KEYBD
)

	)

137 
	#NVLEN_LANG
 6

	)

140 
	#PASSWD_LEN
 8

	)

145 
	#NVOFF_PASSWD_KEY
 (
NVOFF_LANG
+
NVLEN_LANG
)

	)

146 
	#NVLEN_PASSWD_KEY
 (2*
PASSWD_LEN
+1)

	)

147 
	#NVOFF_NETPASSWD_KEY
 (
NVOFF_PASSWD_KEY
+
NVLEN_PASSWD_KEY
)

	)

148 
	#NVLEN_NETPASSWD_KEY
 (2*
PASSWD_LEN
+1)

	)

154 
	#NVOFF_SCSIRT
 (
NVOFF_NETPASSWD_KEY
+
NVLEN_NETPASSWD_KEY
)

	)

155 
	#NVLEN_SCSIRT
 1

	)

163 
	#NVOFF_VOLUME
 (
NVOFF_SCSIRT
+
NVLEN_SCSIRT
)

	)

164 
	#NVLEN_VOLUME
 3

	)

171 
	#NVOFF_SCSIHOSTID
 (
NVOFF_VOLUME
+
NVLEN_VOLUME
)

	)

172 
	#NVLEN_SCSIHOSTID
 1

	)

178 
	#NVOFF_SGILOGO
 (
NVOFF_SCSIHOSTID
+
NVLEN_SCSIHOSTID
)

	)

179 
	#NVLEN_SGILOGO
 1

	)

180 
	#NVOFF_NOGUI
 (
NVOFF_SGILOGO
+
NVLEN_SGILOGO
)

	)

181 
	#NVLEN_NOGUI
 1

	)

184 
	#NVOFF_RBAUD
 (
NVOFF_NOGUI
+
NVLEN_NOGUI
)

	)

185 
	#NVLEN_RBAUD
 1

	)

188 
	#NVOFF_FREE
 (
NVOFF_RBAUD
+
NVLEN_RBAUD
)

	)

189 
	#NVLEN_FREE
 5

	)

191 
	#NVOFF_LAST
 (
NVOFF_FREE
+
NVLEN_FREE
)

	)

194 
	#NVRW_TOTAL
 (
NVOFF_LAST
)

	)

206 
	#NVLEN_ENET
 6

	)

207 
	#NVOFF_ENET
 (
NVLEN_MAX
-
NVLEN_ENET
)

	)

212 
	#NVFUSE_START
 
NVOFF_ENET


	)

214 #i‡(
NVOFF_LAST
 !
NVFUSE_START
)

215 
	~"îr‹ --Ç⁄-vﬁ©ûêømÅabÀ ovîÊow/undîÊow
"

219 
	#SER_READ
 0xc000

	)

220 
	#SER_WEN
 0x9800

	)

221 
	#SER_WRITE
 0xa000

	)

222 
	#SER_WRALL
 0x8800

	)

223 
	#SER_WDS
 0x8000

	)

224 
	#SER_PRREAD
 0xc000

	)

225 
	#SER_PREN
 0x9800

	)

226 
	#SER_PRCLEAR
 0xfff‡

	)

227 
	#SER_PRWRITE
 0xa000

	)

228 
	#SER_PRDS
 0x8000

	)

230 #ifde‡
LANGUAGE_C


231 
	#MAXNVNAMELEN
 32

	)

234 
	snvøm_íåy
 {

235 
	m¡_«me
[
MAXNVNAMELEN
];

236 *
	m¡_vÆue
;

238 
	m¡_nvaddr
;

239 
	m¡_nvÀn
;

	@/usr/include/sys/IP22nvram.h

6 #i‚de‡
__SYS_IP22NVRAM_H__


7 
	#__SYS_IP22NVRAM_H__


	)

12 
	#NVLEN_MAX
 256

	)

17 
	#NVOFF_CHECKSUM
 0

	)

18 
	#NVLEN_CHECKSUM
 1

	)

23 
	#NVOFF_REVISION
 (
NVOFF_CHECKSUM
 + 
NVLEN_CHECKSUM
)

	)

24 
	#NVLEN_REVISION
 1

	)

29 #i‡
IP26
 || 
IP28


30 
	#NV_CURRENT_REV
 9

	)

32 
	#NV_CURRENT_REV
 8

	)

38 
	#NVOFF_CONSOLE
 (
NVOFF_REVISION
 + 
NVLEN_REVISION
)

	)

39 
	#NVLEN_CONSOLE
 2

	)

44 
	#NVOFF_SYSPART
 (
NVOFF_CONSOLE
 + 
NVLEN_CONSOLE
)

	)

45 
	#NVLEN_SYSPART
 48

	)

50 
	#NVOFF_OSLOADER
 (
NVOFF_SYSPART
 + 
NVLEN_SYSPART
)

	)

51 
	#NVLEN_OSLOADER
 18

	)

56 
	#NVOFF_OSFILE
 (
NVOFF_OSLOADER
 + 
NVLEN_OSLOADER
)

	)

57 
	#NVLEN_OSFILE
 28

	)

62 
	#NVOFF_OSOPTS
 (
NVOFF_OSFILE
 + 
NVLEN_OSFILE
)

	)

63 
	#NVLEN_OSOPTS
 12

	)

68 
	#NVOFF_PGCOLOR
 (
NVOFF_OSOPTS
 + 
NVLEN_OSOPTS
)

	)

69 
	#NVLEN_PGCOLOR
 6

	)

74 
	#NVOFF_LBAUD
 (
NVOFF_PGCOLOR
 + 
NVLEN_PGCOLOR
)

	)

75 
	#NVLEN_LBAUD
 5

	)

80 
	#NVOFF_DISKLESS
 (
NVOFF_LBAUD
 + 
NVLEN_LBAUD
)

	)

81 
	#NVLEN_DISKLESS
 1

	)

88 
	#NVOFF_TZ
 (
NVOFF_DISKLESS
 + 
NVLEN_DISKLESS
)

	)

89 
	#NVLEN_TZ
 8

	)

94 
	#NVOFF_OSPART
 (
NVOFF_TZ
 + 
NVLEN_TZ
)

	)

95 
	#NVLEN_OSPART
 48

	)

100 
	#NVOFF_AUTOLOAD
 (
NVOFF_OSPART
 + 
NVLEN_OSPART
)

	)

101 
	#NVLEN_AUTOLOAD
 1

	)

106 
	#NVOFF_DIAGMODE
 (
NVOFF_AUTOLOAD
 + 
NVLEN_AUTOLOAD
)

	)

107 
	#NVLEN_DIAGMODE
 2

	)

114 
	#NVOFF_NETADDR
 (
NVOFF_DIAGMODE
 + 
NVLEN_DIAGMODE
)

	)

115 
	#NVLEN_NETADDR
 4

	)

120 
	#NVOFF_NOKBD
 (
NVOFF_NETADDR
 + 
NVLEN_NETADDR
)

	)

121 
	#NVLEN_NOKBD
 1

	)

127 
	#NVOFF_KEYBD
 (
NVOFF_NOKBD
 + 
NVLEN_NOKBD
)

	)

128 
	#NVLEN_KEYBD
 5

	)

133 
	#NVOFF_DLIF
 (
NVOFF_KEYBD
 + 
NVLEN_KEYBD
)

	)

134 
	#NVLEN_DLIF
 6

	)

137 
	#PASSWD_LEN
 8

	)

142 
	#NVOFF_PASSWD_KEY
 (
NVOFF_DLIF
+
NVLEN_DLIF
)

	)

143 
	#NVLEN_PASSWD_KEY
 (2*
PASSWD_LEN
+1)

	)

144 
	#NVOFF_NETPASSWD_KEY
 (
NVOFF_PASSWD_KEY
+
NVLEN_PASSWD_KEY
)

	)

145 
	#NVLEN_NETPASSWD_KEY
 (2*
PASSWD_LEN
+1)

	)

151 
	#NVOFF_SCSIRT
 (
NVOFF_NETPASSWD_KEY
+
NVLEN_NETPASSWD_KEY
)

	)

152 
	#NVLEN_SCSIRT
 1

	)

160 
	#NVOFF_VOLUME
 (
NVOFF_SCSIRT
+
NVLEN_SCSIRT
)

	)

161 
	#NVLEN_VOLUME
 3

	)

168 
	#NVOFF_SCSIHOSTID
 (
NVOFF_VOLUME
+
NVLEN_VOLUME
)

	)

169 
	#NVLEN_SCSIHOSTID
 1

	)

175 
	#NVOFF_SGILOGO
 (
NVOFF_SCSIHOSTID
+
NVLEN_SCSIHOSTID
)

	)

176 
	#NVLEN_SGILOGO
 1

	)

177 
	#NVOFF_NOGUI
 (
NVOFF_SGILOGO
+
NVLEN_SGILOGO
)

	)

178 
	#NVLEN_NOGUI
 1

	)

181 
	#NVOFF_RBAUD
 (
NVOFF_NOGUI
+
NVLEN_NOGUI
)

	)

182 
	#NVLEN_RBAUD
 1

	)

185 
	#NVOFF_AUTOPOWER
 (
NVOFF_RBAUD
+
NVLEN_RBAUD
)

	)

186 
	#NVLEN_AUTOPOWER
 1

	)

189 
	#NVOFF_MONITOR
 (
NVOFF_AUTOPOWER
+
NVLEN_AUTOPOWER
)

	)

190 
	#NVLEN_MONITOR
 1

	)

193 
	#NVOFF_REBOUND
 (
NVOFF_MONITOR
+
NVLEN_MONITOR
)

	)

194 
	#NVLEN_REBOUND
 1

	)

195 
	#REBOUND_DEFAULT
 ""

	)

197 #i‡
IP26
 || 
IP28


199 
	#NVOFF_BOOTTUNE
 (
NVOFF_REBOUND
+
NVLEN_REBOUND
)

	)

200 
	#NVLEN_BOOTTUNE
 1

	)

204 #i‡
IP26
 || 
IP28


205 
	#NVOFF_FREE
 (
NVOFF_BOOTTUNE
+
NVLEN_BOOTTUNE
)

	)

206 
	#NVLEN_FREE
 7

	)

208 
	#NVOFF_FREE
 (
NVOFF_REBOUND
+
NVLEN_REBOUND
)

	)

209 
	#NVLEN_FREE
 8

	)

212 
	#NVOFF_LAST
 (
NVOFF_FREE
+
NVLEN_FREE
)

	)

215 
	#NVRW_TOTAL
 (
NVOFF_LAST
)

	)

227 
	#NVLEN_ENET
 6

	)

228 
	#NVOFF_ENET
 (
NVLEN_MAX
-
NVLEN_ENET
)

	)

233 
	#NVFUSE_START
 
NVOFF_ENET


	)

235 #i‡(
NVOFF_LAST
 !
NVFUSE_START
)

236 
	~"îr‹ --Ç⁄-vﬁ©ûêømÅabÀ ovîÊow/undîÊow
"

240 
	#SER_READ
 0xc000

	)

241 
	#SER_WEN
 0x9800

	)

242 
	#SER_WRITE
 0xa000

	)

243 
	#SER_WRALL
 0x8800

	)

244 
	#SER_WDS
 0x8000

	)

245 
	#SER_PRREAD
 0xc000

	)

246 
	#SER_PREN
 0x9800

	)

247 
	#SER_PRCLEAR
 0xfff‡

	)

248 
	#SER_PRWRITE
 0xa000

	)

249 
	#SER_PRDS
 0x8000

	)

251 #ifde‡
LANGUAGE_C


252 
	#MAXNVNAMELEN
 32

	)

255 
	snvøm_íåy
 {

256 
	m¡_«me
[
MAXNVNAMELEN
];

257 *
	m¡_vÆue
;

259 
	m¡_nvaddr
;

260 
	m¡_nvÀn
;

262 #i‡
_K64PROM32


263 
	snvøm_íåy32
 {

264 
	m¡_«me
[
MAXNVNAMELEN
];

265 
	m¡_vÆue
;

267 
	m¡_nvaddr
;

268 
	m¡_nvÀn
;

	@/usr/include/sys/IP32flash.h

1 #i‚de‡
_SYS_IP32FLASH_H_


2 
	#_SYS_IP32FLASH_H_


	)

3 
	~<sys/IP32.h
>

6 #i‚de‡
_STANDALONE


7 
	#SEG_MAX_NAME
 32

	)

8 
	#SEG_MAX_VSN
 8

	)

10 
	#FLASH_SEGMENT_MAGIC
 'SHDR'

	)

11 
	#FLASH_SEGMENT_MAGICx
 0x53484452

	)

13 
	#__RUP
(
x
,
t
Ë(—)((()(x)+3)&~3))

	)

14 
	#«me
(
f
Ë(f->
«me
)

	)

15 
	#vîsi⁄
(
f
Ë(f->
vîsi⁄
)

	)

16 
	#chksum
(
f
Ë(&f->
chksum
)

	)

17 
	#body
(
f
Ë(
	`chksum
(f)+1)

	)

18 
	#£gChksum
(
f
Ë(
	`__RUP
(((*)f)+f->
£gLí
,*)-1)

	)

19 
	#√wSegChksum
(
f
,
n
Ë(
	`__RUP
(((*)f)+n->
£gLí
,*)-1)

	)

20 
	#hdrSize
(
f
Ë()((
FœshSegmít
))

	)

21 
	#bodySize
(
f
Ë(f->
£gLí
 - 
	`hdrSize
(f))

	)

24 
	mª£rved
;

25 
	mmagic
;

26 
	m£gLí
;

28 
	m«meLí
 : 8,

29 
	mv¢Lí
 : 8,

30 
	m£gTy≥
 : 8,

31 
	m∑d
 : 8;

32 
	m«me
[
SEG_MAX_NAME
];

33 
	mvîsi⁄
[
SEG_MAX_VSN
];

34 
	mchksum
;

35 } 
	tFœshSegmít
;

41 
	#PROM_CPU_R4600
 0x1

	)

42 
	#PROM_CPU_R4600SC
 0x2

	)

43 
	#PROM_CPU_R5000
 0x4

	)

44 
	#PROM_CPU_R5000SC
 0x8

	)

45 
	#PROM_CPU_R5000LM
 0x10

	)

46 
	#PROM_CPU_R5000SCLM
 0x20

	)

47 
	#PROM_CPU_R10000
 0x40

	)

48 
	#PROM_CPU_R10000MP
 0x80

	)

49 
	#PROM_CPU_R10000LM
 0x100

	)

50 
	#PROM_CPU_R10000MPLM
 0x200

	)

55 
	#FLASH_PHYS_BASE
 0x1fc00000

	)

56 
	#FLASH_ROM_BASE
 
FLASH_PHYS_BASE


	)

57 
	#FLASH_K1BASE
 
	`PHYS_TO_K1
(
FLASH_PHYS_BASE
)

	)

58 
	#FLASH_PAGE_SIZE
 0x100

	)

59 
	#FLASH_PROTECTED
 0x4000

	)

60 
	#FLASH_SIZE
 (512*1024)

	)

61 
	#FLASH_PROGRAMABLE
 (
FLASH_PHYS_BASE
+
FLASH_PROTECTED
)

	)

62 
	#FLASH_WENABLE
 
	`PHYS_TO_K1
(
ISA_FLASH_NIC_REG
)

	)

64 
	#FLASH_WP_OFF
 1

	)

65 
	#FLASH_WP_ON
 ~
FLASH_WP_OFF


	)

67 
	#NVLEN_MAX
 256

	)

68 
	#NVOFF_CHECKSUM
 0

	)

69 
	#NVLEN_CHECKSUM
 1

	)

71 
	#PASSWD_LEN
 8

	)

72 
	#NVLEN_PASSWD_KEY
 8

	)

73 
	#NVOFF_PASSWD_KEY
 0

	)

75 *
Êash_gëív
(*);

76 #i‡(
_KERNEL
)

77 
Êash_vîsi⁄
();

79 
Êash_vîsi⁄
(, *, );

81 
Êash_wrôe_£˘‹
(volatile *, *);

82 
Êash_£t_nvøm_ch™ged
();

83 #ifde‡
RESET_DUMPSYS


84 
Êash_jump_ve˘‹
();

85 
Êash_dump_£t
;

87 
Êash_sync_globÆs
();

88 #i‡
DEBUG


89 
Êash_dump_globÆs
();

93 
	#FLASHPROM_MAJOR
 0

	)

94 
	#FLASHPROM_MINOR
 1

	)

96 #i‚de‡
_STANDALONE


110 
	#PROM_MAGIC
 (('P' << 24)|('R' << 16)|('O' << 8)|('M'))

	)

112 
	mmagic
;

113 
	mcksum
;

114 
	moff£t
;

115 
	mÀn
;

116 
	mvîsi⁄
[2];

117 
	m˝uty≥s
;

118 
	m∑d
[
FLASH_PAGE_SIZE
 - (7 * ())];

119 } 
	t¥omhdr_t
;

	@/usr/include/sys/PCI/bridge.h

13 #i‚de‡
__PCI_BRIDGE_H__


14 
	#__PCI_BRIDGE_H__


	)

46 
	~<sys/xèlk/xwidgë.h
>

48 
	~"sys/PCI/pic.h
"

52 #i‡
_PAGESZ
 == 4096

53 
	#IOPFNSHIFT
 12

	)

55 
	#IOPFNSHIFT
 14

	)

58 
	#IOPGSIZE
 (1 << 
IOPFNSHIFT
)

	)

59 
	#IOPG
(
x
Ë((xË>> 
IOPFNSHIFT
)

	)

60 
	#IOPGOFF
(
x
Ë((xË& (
IOPGSIZE
-1))

	)

64 
	#BRIDGE_INTERNAL_ATES
 128

	)

65 
	#XBRIDGE_INTERNAL_ATES
 1024

	)

67 
	#BRIDGE_ATE_RAM_SIZE
 (
BRIDGE_INTERNAL_ATES
<<3Ë

	)

68 
	#XBRIDGE_ATE_RAM_SIZE
 (
XBRIDGE_INTERNAL_ATES
<<3Ë

	)

70 
	#PIC_WR_REQ_BUFSIZE
 256

	)

72 
	#BRIDGE_CONFIG_BASE
 0x20000

	)

75 
	#BRIDGE_CONFIG1_BASE
 0x28000

	)

76 
	#BRIDGE_CONFIG_END
 0x30000

	)

77 
	#BRIDGE_CONFIG_SLOT_SIZE
 0x1000

	)

79 
	#BRIDGE_SSRAM_512K
 0x00080000

	)

80 
	#BRIDGE_SSRAM_128K
 0x00020000

	)

81 
	#BRIDGE_SSRAM_64K
 0x00010000

	)

82 
	#BRIDGE_SSRAM_0K
 0x00000000

	)

88 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

90 #ifde‡
__˝lu•lus


98 
uöt32_t
 
	tbridgîeg_t
;

100 
uöt64_t
 
	tbridge_©e_t
;

105 vﬁ©ûê
	tbridge_©e_t
 *
	tbridge_©e_p
;

115 vﬁ©ûê
	spic_widgë_cfg_s
 {

116 
bridgîeg_t
 
_∑d_000000
;

117 
bridgîeg_t
 
_b_wid_id
;

120 
pi¸eg_t
 
_p_wid_°©
;

122 
bridgîeg_t
 
_b_∑d_000008
;

123 
bridgîeg_t
 
_b_wid_°©
;

124 } 
_b
;

125 } 
u_wid_°©
;

126 
	#__p_wid_°©_64
 
u_wid_°©
.
_p_wid_°©


	)

127 
	#__b_wid_°©
 
u_wid_°©
.
_b
.
_b_wid_°©


	)

129 
bridgîeg_t
 
_∑d_000010
;

130 
bridgîeg_t
 
_b_wid_îr_uµî
;

133 
pi¸eg_t
 
_p_wid_îr_lowî
;

135 
bridgîeg_t
 
_b_∑d_000018
;

136 
bridgîeg_t
 
_b_wid_îr_lowî
;

137 } 
_b
;

138 } 
u_wid_îr_lowî
;

139 
	#__p_wid_îr_64
 
u_wid_îr_lowî
.
_p_wid_îr_lowî


	)

140 
	#__b_wid_îr_lowî
 
u_wid_îr_lowî
.
_b
.
_b_wid_îr_lowî


	)

143 
pi¸eg_t
 
_p_wid_c⁄åﬁ
;

145 
bridgîeg_t
 
_b_∑d_000020
;

146 
bridgîeg_t
 
_b_wid_c⁄åﬁ
;

147 } 
_b
;

148 } 
u_wid_c⁄åﬁ
;

149 
	#__p_wid_c⁄åﬁ_64
 
u_wid_c⁄åﬁ
.
_p_wid_c⁄åﬁ


	)

150 
	#__b_wid_c⁄åﬁ
 
u_wid_c⁄åﬁ
.
_b
.
_b_wid_c⁄åﬁ


	)

152 
bridgîeg_t
 
_∑d_000028
;

153 
bridgîeg_t
 
_b_wid_ªq_timeout
;

155 
bridgîeg_t
 
_∑d_000030
;

156 
bridgîeg_t
 
_b_wid_öt_uµî
;

159 
pi¸eg_t
 
_p_wid_öt_lowî
;

161 
bridgîeg_t
 
_b_∑d_000038
;

162 
bridgîeg_t
 
_b_wid_öt_lowî
;

163 } 
_b
;

164 } 
u_wid_öt_lowî
;

165 
	#__p_wid_öt_64
 
u_wid_öt_lowî
.
_p_wid_öt_lowî


	)

166 
	#__b_wid_öt_lowî
 
u_wid_öt_lowî
.
_b
.
_b_wid_öt_lowî


	)

168 
bridgîeg_t
 
_∑d_000040
;

169 
bridgîeg_t
 
_b_wid_îr_cmdw‹d
;

171 
bridgîeg_t
 
_∑d_000048
;

172 
bridgîeg_t
 
_b_wid_Œp
;

174 
bridgîeg_t
 
_∑d_000050
;

175 
bridgîeg_t
 
_b_wid_tÊush
;

176 } 
	tpic_widgë_cfg_t
;

192 vﬁ©ûê
	sbridge_s
 {

198 
widgë_cfg_t
 
xèlk_widgë_def
;

199 
pic_widgë_cfg_t
 
loˇl_widgë_def
;

200 } 
u_wid
;

203 
	#b_widgë
 
u_wid
.
xèlk_widgë_def


	)

206 
	#b_wid_id
 
u_wid
.
loˇl_widgë_def
.
_b_wid_id


	)

207 
	#b_wid_°©
 
u_wid
.
loˇl_widgë_def
.
__b_wid_°©


	)

208 
	#b_wid_îr_uµî
 
u_wid
.
loˇl_widgë_def
.
_b_wid_îr_uµî


	)

209 
	#b_wid_îr_lowî
 
u_wid
.
loˇl_widgë_def
.
__b_wid_îr_lowî


	)

210 
	#b_wid_c⁄åﬁ
 
u_wid
.
loˇl_widgë_def
.
__b_wid_c⁄åﬁ


	)

211 
	#b_wid_ªq_timeout
 
u_wid
.
loˇl_widgë_def
.
_b_wid_ªq_timeout


	)

212 
	#b_wid_öt_uµî
 
u_wid
.
loˇl_widgë_def
.
_b_wid_öt_uµî


	)

213 
	#b_wid_öt_lowî
 
u_wid
.
loˇl_widgë_def
.
__b_wid_öt_lowî


	)

214 
	#b_wid_îr_cmdw‹d
 
u_wid
.
loˇl_widgë_def
.
_b_wid_îr_cmdw‹d


	)

215 
	#b_wid_Œp
 
u_wid
.
loˇl_widgë_def
.
_b_wid_Œp


	)

216 
	#b_wid_tÊush
 
u_wid
.
loˇl_widgë_def
.
_b_wid_tÊush


	)

219 
	#p_wid_°©_64
 
u_wid
.
loˇl_widgë_def
.
__p_wid_°©_64


	)

220 
	#p_wid_îr_64
 
u_wid
.
loˇl_widgë_def
.
__p_wid_îr_64


	)

221 
	#p_wid_c⁄åﬁ_64
 
u_wid
.
loˇl_widgë_def
.
__p_wid_c⁄åﬁ_64


	)

222 
	#p_wid_öt_64
 
u_wid
.
loˇl_widgë_def
.
__p_wid_öt_64


	)

225 
bridgîeg_t
 
_∑d_000058
;

226 
bridgîeg_t
 
b_wid_aux_îr
;

228 
bridgîeg_t
 
_∑d_000060
;

229 
bridgîeg_t
 
b_wid_ª•_uµî
;

232 
pi¸eg_t
 
_p_wid_ª•_lowî
;

234 
bridgîeg_t
 
_b_∑d_000068
;

235 
bridgîeg_t
 
_b_wid_ª•_lowî
;

236 } 
_b
;

237 } 
u_wid_ª•_lowî
;

238 
	#p_wid_ª•_64
 
u_wid_ª•_lowî
.
_p_wid_ª•_lowî


	)

239 
	#b_wid_ª•_lowî
 
u_wid_ª•_lowî
.
_b
.
_b_wid_ª•_lowî


	)

241 
bridgîeg_t
 
_∑d_000070
;

242 
bridgîeg_t
 
b_wid_t°_pö_˘æ
;

245 
pi¸eg_t
 
_p_addr_lkîr
;

247 
bridgîeg_t
 
_b_∑d_000078
;

248 
bridgîeg_t
 
_b_∑d_00007C
;

249 } 
_b
;

250 } 
u_addr_lkîr
;

251 
	#p_addr_lkîr_64
 
u_addr_lkîr
.
_p_addr_lkîr


	)

254 
bridgîeg_t
 
_∑d_000080
;

255 
bridgîeg_t
 
b_dú_m≠
;

257 
bridgîeg_t
 
_∑d_000088
;

258 
bridgîeg_t
 
_∑d_00008C
;

261 
bridgîeg_t
 
_∑d_000090
;

262 
bridgîeg_t
 
b_øm_≥º_‹_m≠_Áu…
;

263 
	#b_øm_≥º
 
b_øm_≥º_‹_m≠_Áu…


	)

264 
	#b_m≠_Áu…
 
b_øm_≥º_‹_m≠_Áu…


	)

266 
bridgîeg_t
 
_∑d_000098
;

267 
bridgîeg_t
 
_∑d_00009C
;

270 
bridgîeg_t
 
_∑d_0000A0
;

271 
bridgîeg_t
 
b_¨b
;

273 
bridgîeg_t
 
_∑d_0000A8
;

274 
bridgîeg_t
 
_∑d_0000AC
;

278 
pi¸eg_t
 
_p_©e_∑rôy_îr
;

280 
bridgîeg_t
 
_b_∑d_0000B0
;

281 
bridgîeg_t
 
_b_nic
;

282 } 
_b
;

283 } 
u_©e_∑rôy_îr_‹_nic
;

284 
	#p_©e_∑rôy_îr_64
 
u_©e_∑rôy_îr_‹_nic
.
_p_©e_∑rôy_îr


	)

285 
	#b_nic
 
u_©e_∑rôy_îr_‹_nic
.
_b
.
_b_nic


	)

287 
bridgîeg_t
 
_∑d_0000B8
;

288 
bridgîeg_t
 
_∑d_0000BC
;

291 
bridgîeg_t
 
_∑d_0000C0
;

292 
bridgîeg_t
 
b_bus_timeout
;

293 
	#b_pci_bus_timeout
 
b_bus_timeout


	)

295 
bridgîeg_t
 
_∑d_0000C8
;

296 
bridgîeg_t
 
b_pci_cfg
;

298 
bridgîeg_t
 
_∑d_0000D0
;

299 
bridgîeg_t
 
b_pci_îr_uµî
;

300 
	#b_gio_îr_uµî
 
b_pci_îr_uµî


	)

303 
pi¸eg_t
 
_p_pci_îr_lowî
;

305 
bridgîeg_t
 
_b_∑d_0000D8
;

306 
bridgîeg_t
 
_b_pci_îr_lowî
;

307 } 
_b
;

308 } 
u_pci_îr_lowî
;

309 
	#p_pci_îr_64
 
u_pci_îr_lowî
.
_p_pci_îr_lowî


	)

310 
	#b_pci_îr_lowî
 
u_pci_îr_lowî
.
_b
.
_b_pci_îr_lowî


	)

311 
	#b_gio_îr_lowî
 
b_pci_îr_lowî


	)

313 
bridgîeg_t
 
_∑d_0000E0
[8];

317 
pi¸eg_t
 
_p_öt_°©us
;

319 
bridgîeg_t
 
_b_∑d_000100
;

320 
bridgîeg_t
 
_b_öt_°©us
;

321 } 
_b
;

322 } 
u_öt_°©us
;

323 
	#p_öt_°©us_64
 
u_öt_°©us
.
_p_öt_°©us


	)

324 
	#b_öt_°©us
 
u_öt_°©us
.
_b
.
_b_öt_°©us


	)

327 
pi¸eg_t
 
_p_öt_íabÀ
;

329 
bridgîeg_t
 
_b_∑d_000108
;

330 
bridgîeg_t
 
_b_öt_íabÀ
;

331 } 
_b
;

332 } 
u_öt_íabÀ
;

333 
	#p_öt_íabÀ_64
 
u_öt_íabÀ
.
_p_öt_íabÀ


	)

334 
	#b_öt_íabÀ
 
u_öt_íabÀ
.
_b
.
_b_öt_íabÀ


	)

337 
pi¸eg_t
 
_p_öt_r°_°©
;

339 
bridgîeg_t
 
_b_∑d_000110
;

340 
bridgîeg_t
 
_b_öt_r°_°©
;

341 } 
_b
;

342 } 
u_öt_r°_°©
;

343 
	#p_öt_r°_°©_64
 
u_öt_r°_°©
.
_p_öt_r°_°©


	)

344 
	#b_öt_r°_°©
 
u_öt_r°_°©
.
_b
.
_b_öt_r°_°©


	)

346 
bridgîeg_t
 
_∑d_000118
;

347 
bridgîeg_t
 
b_öt_mode
;

349 
bridgîeg_t
 
_∑d_000120
;

350 
bridgîeg_t
 
b_öt_devi˚
;

352 
bridgîeg_t
 
_∑d_000128
;

353 
bridgîeg_t
 
b_öt_ho°_îr
;

356 
pi¸eg_t
 
_p_öt_addr
[8];

358 
bridgîeg_t
 
_b_∑d
;

359 
bridgîeg_t
 
addr
;

360 } 
_b
[8];

361 } 
u_öt_addr
;

362 
	#p_öt_addr_64
 
u_öt_addr
.
_p_öt_addr


	)

363 
	#b_öt_addr
 
u_öt_addr
.
_b


	)

366 
pi¸eg_t
 
_p_îr_öt_võw
;

368 
bridgîeg_t
 
_b_∑d_000170
;

369 
bridgîeg_t
 
_b_îr_öt_võw
;

370 } 
_b
;

371 } 
u_îr_öt_võw
;

372 
	#p_îr_öt_võw_64
 
u_îr_öt_võw
.
_p_îr_öt_võw


	)

373 
	#b_îr_öt_võw
 
u_îr_öt_võw
.
_b
.
_b_îr_öt_võw


	)

376 
pi¸eg_t
 
_p_mu…_öt
;

378 
bridgîeg_t
 
_b_∑d_000178
;

379 
bridgîeg_t
 
_b_mu…_öt
;

380 } 
_b
;

381 } 
u_mu…_öt
;

382 
	#p_mu…_öt_64
 
u_mu…_öt
.
_p_mu…_öt


	)

383 
	#b_mu…_öt
 
u_mu…_öt
.
_b
.
_b_mu…_öt


	)

386 
bridgîeg_t
 
__∑d
;

387 
bridgîeg_t
 
öå
;

388 } 
b_f‹˚_Æways
[8];

391 
bridgîeg_t
 
__∑d
;

392 
bridgîeg_t
 
öå
;

393 } 
b_f‹˚_pö
[8];

397 
bridgîeg_t
 
__∑d
;

398 
bridgîeg_t
 
ªg
;

399 } 
b_devi˚
[8];

402 
bridgîeg_t
 
__∑d
;

403 
bridgîeg_t
 
ªg
;

404 } 
b_wr_ªq_buf
[8];

407 
bridgîeg_t
 
__∑d
;

408 
bridgîeg_t
 
ªg
;

409 } 
b_ºb_m≠
[2];

410 
	#b_eví_ª•
 
b_ºb_m≠
[0].
ªg


	)

411 
	#b_odd_ª•
 
b_ºb_m≠
[1].
ªg


	)

413 
bridgîeg_t
 
_∑d_000290
;

414 
bridgîeg_t
 
b_ª•_°©us
;

416 
bridgîeg_t
 
_∑d_000298
;

417 
bridgîeg_t
 
b_ª•_˛ór
;

419 
bridgîeg_t
 
_∑d_0002A0
[24];

424 
pi¸eg_t
 
uµî
;

425 
pi¸eg_t
 
lowî
;

426 } 
_p
[16];

428 
bridgîeg_t
 
_b_∑d1
;

429 
bridgîeg_t
 
uµî
;

430 
bridgîeg_t
 
_b_∑d2
;

431 
bridgîeg_t
 
lowî
;

432 } 
_b
[16];

433 } 
u_buf_addr_m©ch
;

434 
	#p_buf_addr_m©ch_64
 
u_buf_addr_m©ch
.
_p


	)

435 
	#b_buf_addr_m©ch
 
u_buf_addr_m©ch
.
_b


	)

439 
bridgîeg_t
 
__∑d1
;

440 
bridgîeg_t
 
Êush_w_touch
;

441 
bridgîeg_t
 
__∑d2
;

442 
bridgîeg_t
 
Êush_wo_touch
;

443 
bridgîeg_t
 
__∑d3
;

444 
bridgîeg_t
 
öÊight
;

445 
bridgîeg_t
 
__∑d4
;

446 
bridgîeg_t
 
¥e„tch
;

447 
bridgîeg_t
 
__∑d5
;

448 
bridgîeg_t
 
tŸÆ_pci_ªåy
;

449 
bridgîeg_t
 
__∑d6
;

450 
bridgîeg_t
 
max_pci_ªåy
;

451 
bridgîeg_t
 
__∑d7
;

452 
bridgîeg_t
 
max_œãncy
;

453 
bridgîeg_t
 
__∑d8
;

454 
bridgîeg_t
 
˛ór_Æl
;

455 } 
b_buf_cou¡
[8];

462 
pi¸eg_t
 
p_pcix_bus_îr_addr_64
;

463 
pi¸eg_t
 
p_pcix_bus_îr_©å_64
;

464 
pi¸eg_t
 
p_pcix_bus_îr_d©a_64
;

465 
pi¸eg_t
 
p_pcix_pio_•lô_addr_64
;

466 
pi¸eg_t
 
p_pcix_pio_•lô_©å_64
;

467 
pi¸eg_t
 
p_pcix_dma_ªq_îr_©å_64
;

468 
pi¸eg_t
 
p_pcix_dma_ªq_îr_addr_64
;

469 
pi¸eg_t
 
p_pcix_timeout_64
;

471 
pi¸eg_t
 
_∑d_000600
[120];

475 
pi¸eg_t
 
p_buf_addr
;

476 
pi¸eg_t
 
p_buf_©å
;

477 } 
p_pcix_ªad_buf_64
[16];

480 
pi¸eg_t
 
p_buf_addr
;

481 
pi¸eg_t
 
p_buf_©å
;

482 
pi¸eg_t
 
p_buf_vÆid
;

483 
pi¸eg_t
 
__∑d1
;

484 } 
p_pcix_wrôe_buf_64
[8];

490 
_∑d_000c00
[0x010000 - 0x000c00];

504 
bridge_©e_t
 
wr
;

506 
bridgîeg_t
 
_p_∑d
;

507 
bridgîeg_t
 
rd
;

508 } 
hi
;

509 } 
b_öt_©e_øm
[
XBRIDGE_INTERNAL_ATES
];

510 
	#b_öt_©e_øm_lo
(
idx
Ë
b_öt_©e_øm
[idx+512].
hi
.
rd


	)

514 
bridgîeg_t
 
_p_∑d
;

515 
bridgîeg_t
 
rd
;

516 } 
xb_öt_©e_øm_lo
[
XBRIDGE_INTERNAL_ATES
];

518 
_∑d_014000
[0x18000 - 0x014000];

522 
pi¸eg_t
 
p_wr_ªq_lowî
[
PIC_WR_REQ_BUFSIZE
];

524 
pi¸eg_t
 
p_wr_ªq_uµî
[
PIC_WR_REQ_BUFSIZE
];

526 
pi¸eg_t
 
p_wr_ªq_∑rôy
[
PIC_WR_REQ_BUFSIZE
];

528 
_∑d_019800
[0x20000 - 0x019800];

532 
uch¨_t
 
c
[0x1000 / 1];

533 
uöt16_t
 
s
[0x1000 / 2];

534 
uöt32_t
 
l
[0x1000 / 4];

535 
uöt64_t
 
d
[0x1000 / 8];

537 
uch¨_t
 
c
[0x100 / 1];

538 
uöt16_t
 
s
[0x100 / 2];

539 
uöt32_t
 
l
[0x100 / 4];

540 
uöt64_t
 
d
[0x100 / 8];

541 } 
f
[8];

542 } 
b_ty≥0_cfg_dev
[8];

546 
uch¨_t
 
c
[0x1000 / 1];

547 
uöt16_t
 
s
[0x1000 / 2];

548 
uöt32_t
 
l
[0x1000 / 4];

549 
uöt64_t
 
d
[0x1000 / 8];

551 
uch¨_t
 
c
[0x100 / 1];

552 
uöt16_t
 
s
[0x100 / 2];

553 
uöt32_t
 
l
[0x100 / 4];

554 
uöt64_t
 
d
[0x100 / 8];

555 } 
f
[8];

556 } 
b_ty≥1_cfg
;

558 
_∑d_029000
[0x007000];

562 
uch¨_t
 
c
[8 / 1];

563 
uöt16_t
 
s
[8 / 2];

564 
uöt32_t
 
l
[8 / 4];

565 
uöt64_t
 
d
[8 / 8];

566 } 
b_pci_ück
;

568 
uch¨_t
 
_∑d_030007
[0x04fff8];

571 
bridge_©e_t
 
b_ext_©e_øm
[0x10000];

574 
_∑d_100000
[0x200000-0x100000];

578 
uch¨_t
 
c
[0x100000 / 1];

579 
uöt16_t
 
s
[0x100000 / 2];

580 
uöt32_t
 
l
[0x100000 / 4];

581 
uöt64_t
 
d
[0x100000 / 8];

582 } 
b_devio_øw
[10];

588 
	#b_devio
(
n
Ë
b_devio_øw
[(“)<2)?“*2):“+2)]

	)

592 
uch¨_t
 
c
[0x400000 / 1];

593 
uöt16_t
 
s
[0x400000 / 2];

594 
uöt32_t
 
l
[0x400000 / 4];

595 
uöt64_t
 
d
[0x400000 / 8];

596 } 
b_exã∫Æ_Êash
;

597 } 
	tbridge_t
;

603 
	sbridge_îr_cmdw‹d_s
 {

605 
uöt32_t
 
cmd_w‹d
;

607 
uöt32_t
 
didn
:4,

608 
sidn
:4,

609 
∑˘yp
:4,

610 
äum
:5,

611 
coh
:1,

612 
ds
:2,

613 
gbr
:1,

614 
vbpm
:1,

615 
îr‹
:1,

616 
b¨r
:1,

617 
rsvd
:8;

618 } 
bîr_°
;

619 } 
bîr_un
;

620 } 
	tbridge_îr_cmdw‹d_t
;

622 
	#bîr_fõld
 
bîr_un
.
bîr_°


	)

633 
	#BRIDGE_WID_ID
 
WIDGET_ID


	)

634 
	#BRIDGE_WID_STAT
 
WIDGET_STATUS


	)

635 
	#BRIDGE_WID_ERR_UPPER
 
WIDGET_ERR_UPPER_ADDR


	)

636 
	#BRIDGE_WID_ERR_LOWER
 
WIDGET_ERR_LOWER_ADDR


	)

637 
	#BRIDGE_WID_CONTROL
 
WIDGET_CONTROL


	)

638 
	#BRIDGE_WID_REQ_TIMEOUT
 
WIDGET_REQ_TIMEOUT


	)

639 
	#BRIDGE_WID_INT_UPPER
 
WIDGET_INTDEST_UPPER_ADDR


	)

640 
	#BRIDGE_WID_INT_LOWER
 
WIDGET_INTDEST_LOWER_ADDR


	)

641 
	#BRIDGE_WID_ERR_CMDWORD
 
WIDGET_ERR_CMD_WORD


	)

642 
	#BRIDGE_WID_LLP
 
WIDGET_LLP_CFG


	)

643 
	#BRIDGE_WID_TFLUSH
 
WIDGET_TFLUSH


	)

645 
	#BRIDGE_WID_AUX_ERR
 0x00005C

	)

646 
	#BRIDGE_WID_RESP_UPPER
 0x000064

	)

647 
	#BRIDGE_WID_RESP_LOWER
 0x00006C

	)

648 
	#BRIDGE_WID_TST_PIN_CTRL
 0x000074

	)

650 
	#BRIDGE_DIR_MAP
 0x000084

	)

653 
	#BRIDGE_RAM_PERR
 0x000094

	)

654 
	#BRIDGE_MAP_FAULT
 0x000094

	)

656 
	#BRIDGE_ARB
 0x0000A4

	)

658 
	#BRIDGE_NIC
 0x0000B4

	)

660 
	#BRIDGE_BUS_TIMEOUT
 0x0000C4

	)

661 
	#BRIDGE_PCI_BUS_TIMEOUT
 
BRIDGE_BUS_TIMEOUT


	)

662 
	#BRIDGE_PCI_CFG
 0x0000CC

	)

663 
	#BRIDGE_PCI_ERR_UPPER
 0x0000D4

	)

664 
	#BRIDGE_PCI_ERR_LOWER
 0x0000DC

	)

666 
	#BRIDGE_INT_STATUS
 0x000104

	)

667 
	#BRIDGE_INT_ENABLE
 0x00010C

	)

668 
	#BRIDGE_INT_RST_STAT
 0x000114

	)

669 
	#BRIDGE_INT_MODE
 0x00011C

	)

670 
	#BRIDGE_INT_DEVICE
 0x000124

	)

671 
	#BRIDGE_INT_HOST_ERR
 0x00012C

	)

673 
	#BRIDGE_INT_ADDR0
 0x000134

	)

674 
	#BRIDGE_INT_ADDR_OFF
 0x000008

	)

675 
	#BRIDGE_INT_ADDR
(
x
Ë(
BRIDGE_INT_ADDR0
+(x)*
BRIDGE_INT_ADDR_OFF
)

	)

677 
	#BRIDGE_INT_VIEW
 0x000174

	)

678 
	#BRIDGE_MULTIPLE_INT
 0x00017¯

	)

680 
	#BRIDGE_FORCE_ALWAYS0
 0x000184

	)

681 
	#BRIDGE_FORCE_ALWAYS_OFF
 0x000008

	)

682 
	#BRIDGE_FORCE_ALWAYS
(
x
Ë(
BRIDGE_FORCE_ALWAYS0
+(x)*
BRIDGE_FORCE_ALWAYS_OFF
)

	)

684 
	#BRIDGE_FORCE_PIN0
 0x0001c4

	)

685 
	#BRIDGE_FORCE_PIN_OFF
 0x000008

	)

686 
	#BRIDGE_FORCE_PIN
(
x
Ë(
BRIDGE_FORCE_PIN0
+(x)*
BRIDGE_FORCE_PIN_OFF
)

	)

688 
	#BRIDGE_DEVICE0
 0x000204

	)

689 
	#BRIDGE_DEVICE_OFF
 0x000008

	)

690 
	#BRIDGE_DEVICE
(
x
Ë(
BRIDGE_DEVICE0
+(x)*
BRIDGE_DEVICE_OFF
)

	)

692 
	#BRIDGE_WR_REQ_BUF0
 0x000244

	)

693 
	#BRIDGE_WR_REQ_BUF_OFF
 0x000008

	)

694 
	#BRIDGE_WR_REQ_BUF
(
x
Ë(
BRIDGE_WR_REQ_BUF0
+(x)*
BRIDGE_WR_REQ_BUF_OFF
)

	)

696 
	#BRIDGE_EVEN_RESP
 0x000284

	)

697 
	#BRIDGE_ODD_RESP
 0x00028C

	)

699 
	#BRIDGE_RESP_STATUS
 0x000294

	)

700 
	#BRIDGE_RESP_CLEAR
 0x00029C

	)

702 
	#BRIDGE_BUF_ADDR_UPPER0
 0x000304

	)

703 
	#BRIDGE_BUF_ADDR_UPPER_OFF
 0x000010

	)

704 
	#BRIDGE_BUF_ADDR_UPPER
(
x
Ë(
BRIDGE_BUF_ADDR_UPPER0
+(x)*
BRIDGE_BUF_ADDR_UPPER_OFF
)

	)

706 
	#BRIDGE_BUF_ADDR_LOWER0
 0x00030c

	)

707 
	#BRIDGE_BUF_ADDR_LOWER_OFF
 0x000010

	)

708 
	#BRIDGE_BUF_ADDR_LOWER
(
x
Ë(
BRIDGE_BUF_ADDR_LOWER0
+(x)*
BRIDGE_BUF_ADDR_LOWER_OFF
)

	)

719 
	#BRIDGE_BUF_OFF
 0x40

	)

720 
	#BRIDGE_BUF_NEXT
(
ba£
, 
off
Ë(ba£+((off)*
BRIDGE_BUF_OFF
))

	)

730 
	#BRIDGE_BUF_0_FLUSH_TOUCH
 0x000404

	)

731 
	#BRIDGE_BUF_2_FLUSH_TOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_TOUCH
, 1)

	)

732 
	#BRIDGE_BUF_4_FLUSH_TOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_TOUCH
, 2)

	)

733 
	#BRIDGE_BUF_6_FLUSH_TOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_TOUCH
, 3)

	)

734 
	#BRIDGE_BUF_8_FLUSH_TOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_TOUCH
, 4)

	)

735 
	#BRIDGE_BUF_10_FLUSH_TOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_TOUCH
, 5)

	)

736 
	#BRIDGE_BUF_12_FLUSH_TOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_TOUCH
, 6)

	)

737 
	#BRIDGE_BUF_14_FLUSH_TOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_TOUCH
, 7)

	)

748 
	#BRIDGE_BUF_0_FLUSH_NOTOUCH
 0x00040c

	)

749 
	#BRIDGE_BUF_2_FLUSH_NOTOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_NOTOUCH
, 1)

	)

750 
	#BRIDGE_BUF_4_FLUSH_NOTOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_NOTOUCH
, 2)

	)

751 
	#BRIDGE_BUF_6_FLUSH_NOTOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_NOTOUCH
, 3)

	)

752 
	#BRIDGE_BUF_8_FLUSH_NOTOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_NOTOUCH
, 4)

	)

753 
	#BRIDGE_BUF_10_FLUSH_NOTOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_NOTOUCH
, 5)

	)

754 
	#BRIDGE_BUF_12_FLUSH_NOTOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_NOTOUCH
, 6)

	)

755 
	#BRIDGE_BUF_14_FLUSH_NOTOUCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_FLUSH_NOTOUCH
, 7)

	)

764 
	#BRIDGE_BUF_0_INFLIGHT
 0x000414

	)

765 
	#BRIDGE_BUF_2_INFLIGHT
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_INFLIGHT
, 1)

	)

766 
	#BRIDGE_BUF_4_INFLIGHT
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_INFLIGHT
, 2)

	)

767 
	#BRIDGE_BUF_6_INFLIGHT
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_INFLIGHT
, 3)

	)

768 
	#BRIDGE_BUF_8_INFLIGHT
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_INFLIGHT
, 4)

	)

769 
	#BRIDGE_BUF_10_INFLIGHT
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_INFLIGHT
, 5)

	)

770 
	#BRIDGE_BUF_12_INFLIGHT
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_INFLIGHT
, 6)

	)

771 
	#BRIDGE_BUF_14_INFLIGHT
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_INFLIGHT
, 7)

	)

781 
	#BRIDGE_BUF_0_PREFETCH
 0x00041C

	)

782 
	#BRIDGE_BUF_2_PREFETCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PREFETCH
, 1)

	)

783 
	#BRIDGE_BUF_4_PREFETCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PREFETCH
, 2)

	)

784 
	#BRIDGE_BUF_6_PREFETCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PREFETCH
, 3)

	)

785 
	#BRIDGE_BUF_8_PREFETCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PREFETCH
, 4)

	)

786 
	#BRIDGE_BUF_10_PREFETCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PREFETCH
, 5)

	)

787 
	#BRIDGE_BUF_12_PREFETCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PREFETCH
, 6)

	)

788 
	#BRIDGE_BUF_14_PREFETCH
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PREFETCH
, 7)

	)

798 
	#BRIDGE_BUF_0_PCI_RETRY
 0x000424

	)

799 
	#BRIDGE_BUF_2_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PCI_RETRY
, 1)

	)

800 
	#BRIDGE_BUF_4_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PCI_RETRY
, 2)

	)

801 
	#BRIDGE_BUF_6_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PCI_RETRY
, 3)

	)

802 
	#BRIDGE_BUF_8_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PCI_RETRY
, 4)

	)

803 
	#BRIDGE_BUF_10_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PCI_RETRY
, 5)

	)

804 
	#BRIDGE_BUF_12_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PCI_RETRY
, 6)

	)

805 
	#BRIDGE_BUF_14_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_PCI_RETRY
, 7)

	)

815 
	#BRIDGE_BUF_0_MAX_PCI_RETRY
 0x00042C

	)

816 
	#BRIDGE_BUF_2_MAX_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_PCI_RETRY
, 1)

	)

817 
	#BRIDGE_BUF_4_MAX_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_PCI_RETRY
, 2)

	)

818 
	#BRIDGE_BUF_6_MAX_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_PCI_RETRY
, 3)

	)

819 
	#BRIDGE_BUF_8_MAX_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_PCI_RETRY
, 4)

	)

820 
	#BRIDGE_BUF_10_MAX_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_PCI_RETRY
, 5)

	)

821 
	#BRIDGE_BUF_12_MAX_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_PCI_RETRY
, 6)

	)

822 
	#BRIDGE_BUF_14_MAX_PCI_RETRY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_PCI_RETRY
, 7)

	)

832 
	#BRIDGE_BUF_0_MAX_LATENCY
 0x000434

	)

833 
	#BRIDGE_BUF_2_MAX_LATENCY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_LATENCY
, 1)

	)

834 
	#BRIDGE_BUF_4_MAX_LATENCY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_LATENCY
, 2)

	)

835 
	#BRIDGE_BUF_6_MAX_LATENCY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_LATENCY
, 3)

	)

836 
	#BRIDGE_BUF_8_MAX_LATENCY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_LATENCY
, 4)

	)

837 
	#BRIDGE_BUF_10_MAX_LATENCY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_LATENCY
, 5)

	)

838 
	#BRIDGE_BUF_12_MAX_LATENCY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_LATENCY
, 6)

	)

839 
	#BRIDGE_BUF_14_MAX_LATENCY
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_MAX_LATENCY
, 7)

	)

848 
	#BRIDGE_BUF_0_CLEAR_ALL
 0x00043C

	)

849 
	#BRIDGE_BUF_2_CLEAR_ALL
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_CLEAR_ALL
, 1)

	)

850 
	#BRIDGE_BUF_4_CLEAR_ALL
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_CLEAR_ALL
, 2)

	)

851 
	#BRIDGE_BUF_6_CLEAR_ALL
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_CLEAR_ALL
, 3)

	)

852 
	#BRIDGE_BUF_8_CLEAR_ALL
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_CLEAR_ALL
, 4)

	)

853 
	#BRIDGE_BUF_10_CLEAR_ALL
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_CLEAR_ALL
, 5)

	)

854 
	#BRIDGE_BUF_12_CLEAR_ALL
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_CLEAR_ALL
, 6)

	)

855 
	#BRIDGE_BUF_14_CLEAR_ALL
 
	`BRIDGE_BUF_NEXT
(
BRIDGE_BUF_0_CLEAR_ALL
, 7)

	)

866 
	#BRIDGE_ATE_RAM
 0x00010000

	)

868 
	#BRIDGE_TYPE0_CFG_DEV0
 0x00020000

	)

869 
	#BRIDGE_TYPE0_CFG_SLOT_OFF
 0x00001000

	)

870 
	#BRIDGE_TYPE0_CFG_FUNC_OFF
 0x00000100

	)

871 
	#BRIDGE_TYPE0_CFG_DEV
(
s
Ë(
BRIDGE_TYPE0_CFG_DEV0
+\

872 (
s
)*
BRIDGE_TYPE0_CFG_SLOT_OFF
)

	)

873 
	#BRIDGE_TYPE0_CFG_DEVF
(
s
,
f
Ë(
BRIDGE_TYPE0_CFG_DEV0
+\

874 (
s
)*
BRIDGE_TYPE0_CFG_SLOT_OFF
+\

875 (
f
)*
BRIDGE_TYPE0_CFG_FUNC_OFF
)

	)

877 
	#BRIDGE_TYPE1_CFG
 0x00028000

	)

879 
	#BRIDGE_PCI_IACK
 0x00030000

	)

880 
	#BRIDGE_EXT_SSRAM
 0x00080000

	)

884 
	#BRIDGE_DEV_CNT
 8

	)

885 
	#BRIDGE_DEVIO0
 0x00200000

	)

886 
	#BRIDGE_DEVIO1
 0x00400000

	)

887 
	#BRIDGE_DEVIO2
 0x00600000

	)

888 
	#BRIDGE_DEVIO_OFF
 0x00100000

	)

890 
	#BRIDGE_DEVIO_2MB
 0x00200000

	)

891 
	#BRIDGE_DEVIO_1MB
 0x00100000

	)

893 #if 
LANGUAGE_C


895 
	#BRIDGE_DEVIO
(
x
Ë((x)<=1 ? 
BRIDGE_DEVIO0
+(x)*
BRIDGE_DEVIO_2MB
 : 
BRIDGE_DEVIO2
+((x)-2)*
BRIDGE_DEVIO_1MB
)

	)

906 
	#PIC_BUS1_OFFSET
 0x800000

	)

908 
	#PCIBRIDGE_TYPE0_CFG_DEV0
(
bu¢um
) \

909 ((
bu¢um
Ë? 
BRIDGE_TYPE0_CFG_DEV0
 + 
PIC_BUS1_OFFSET
 : \

910 
BRIDGE_TYPE0_CFG_DEV0
)

	)

911 
	#PCIBRIDGE_TYPE1_CFG
(
bu¢um
) \

912 ((
bu¢um
Ë? 
BRIDGE_TYPE1_CFG
 + 
PIC_BUS1_OFFSET
 : BRIDGE_TYPE1_CFG)

	)

913 
	#PCIBRIDGE_TYPE0_CFG_DEV
(
bu¢um
, 
s
) \

914 (
	`PCIBRIDGE_TYPE0_CFG_DEV0
(
bu¢um
)+\

915 (
s
)*
BRIDGE_TYPE0_CFG_SLOT_OFF
)

	)

916 
	#PCIBRIDGE_TYPE0_CFG_DEVF
(
bu¢um
, 
s
, 
f
) \

917 (
	`PCIBRIDGE_TYPE0_CFG_DEV0
(
bu¢um
)+\

918 (
s
)*
BRIDGE_TYPE0_CFG_SLOT_OFF
+\

919 (
f
)*
BRIDGE_TYPE0_CFG_FUNC_OFF
)

	)

920 
	#PCIBRIDGE_DEVIO0
(
bu¢um
) ((busnum) ? \

921 (
BRIDGE_DEVIO0
 + 
PIC_BUS1_OFFSET
Ë: BRIDGE_DEVIO0)

	)

922 
	#PCIBRIDGE_DEVIO1
(
bu¢um
) ((busnum) ? \

923 (
BRIDGE_DEVIO1
 + 
PIC_BUS1_OFFSET
Ë: BRIDGE_DEVIO1)

	)

924 
	#PCIBRIDGE_DEVIO2
(
bu¢um
) ((busnum) ? \

925 (
BRIDGE_DEVIO2
 + 
PIC_BUS1_OFFSET
Ë: BRIDGE_DEVIO2)

	)

926 
	#PCIBRIDGE_DEVIO
(
bu¢um
, 
x
) \

927 ((
x
)<=1 ? 
	`PCIBRIDGE_DEVIO0
(
bu¢um
)+(x)*
BRIDGE_DEVIO_2MB
 : \

928 
	`PCIBRIDGE_DEVIO2
(
bu¢um
)+((
x
)-2)*
BRIDGE_DEVIO_1MB
)

	)

930 
	#PCIBR_BRIDGE_DEVIO0
(
ps
Ë
	`PCIBRIDGE_DEVIO0
(’s)->
bs_bu¢um
)

	)

931 
	#PCIBR_BRIDGE_DEVIO1
(
ps
Ë
	`PCIBRIDGE_DEVIO1
(’s)->
bs_bu¢um
)

	)

932 
	#PCIBR_BRIDGE_DEVIO2
(
ps
Ë
	`PCIBRIDGE_DEVIO2
(’s)->
bs_bu¢um
)

	)

933 
	#PCIBR_BRIDGE_DEVIO
(
ps
, 
s
Ë
	`PCIBRIDGE_DEVIO
(’s)->
bs_bu¢um
, s)

	)

935 
	#PCIBR_TYPE1_CFG
(
ps
Ë
	`PCIBRIDGE_TYPE1_CFG
(’s)->
bs_bu¢um
)

	)

936 
	#PCIBR_BUS_TYPE0_CFG_DEV0
(
ps
Ë
	`PCIBR_TYPE0_CFG_DEV
’s, 0)

	)

937 
	#PCIBR_TYPE0_CFG_DEV
(
ps
, 
s
) \

938 ((
	`IS_PIC_SOFT
(
ps
)Ë? 
	`PCIBRIDGE_TYPE0_CFG_DEV
(’s)->
bs_bu¢um
, 
s
+1) : \

939 
	`PCIBRIDGE_TYPE0_CFG_DEV
((
ps
)->
bs_bu¢um
, 
s
))

	)

940 
	#PCIBR_BUS_TYPE0_CFG_DEVF
(
ps
,
s
,
f
) \

941 ((
	`IS_PIC_SOFT
(
ps
)Ë? 
	`PCIBRIDGE_TYPE0_CFG_DEVF
(’s)->
bs_bu¢um
,(
s
+1),
f
) : \

942 
	`PCIBRIDGE_TYPE0_CFG_DEVF
((
ps
)->
bs_bu¢um
,
s
,
f
))

	)

946 
	#BRIDGE_EXTERNAL_FLASH
 0x00C00000

	)

953 
	#BRIDGE_WIDGET_PART_NUM
 0xc002

	)

954 
	#XBRIDGE_WIDGET_PART_NUM
 0xd002

	)

957 
	#BRIDGE_WIDGET_MFGR_NUM
 0x036

	)

958 
	#XBRIDGE_WIDGET_MFGR_NUM
 0x024

	)

961 
	#BRIDGE_REV_A
 0x1

	)

962 
	#BRIDGE_REV_B
 0x2

	)

963 
	#BRIDGE_REV_C
 0x3

	)

964 
	#BRIDGE_REV_D
 0x4

	)

965 
	#XBRIDGE_REV_A
 0x1

	)

966 
	#XBRIDGE_REV_B
 0x2

	)

969 
	#IS_BRIDGE
(
wid
Ë(
	`XWIDGET_PART_NUM
(widË=
BRIDGE_WIDGET_PART_NUM
 && \

970 
	`XWIDGET_MFG_NUM
(
wid
Ë=
BRIDGE_WIDGET_MFGR_NUM
)

	)

971 
	#IS_XBRIDGE
(
wid
Ë(
	`XWIDGET_PART_NUM
(widË=
XBRIDGE_WIDGET_PART_NUM
 && \

972 
	`XWIDGET_MFG_NUM
(
wid
Ë=
XBRIDGE_WIDGET_MFGR_NUM
)

	)

973 
	#IS_PIC_BUS0
(
wid
Ë(
	`XWIDGET_PART_NUM
(widË=
PIC_WIDGET_PART_NUM_BUS0
 && \

974 
	`XWIDGET_MFG_NUM
(
wid
Ë=
PIC_WIDGET_MFGR_NUM
)

	)

975 
	#IS_PIC_BUS1
(
wid
Ë(
	`XWIDGET_PART_NUM
(widË=
PIC_WIDGET_PART_NUM_BUS1
 && \

976 
	`XWIDGET_MFG_NUM
(
wid
Ë=
PIC_WIDGET_MFGR_NUM
)

	)

977 
	#IS_PIC_BRIDGE
(
wid
Ë(
	`IS_PIC_BUS0
(widË|| 
	`IS_PIC_BUS1
(wid))

	)

980 
	#BRIDGE_PART_REV_A
 (
BRIDGE_WIDGET_PART_NUM
 << 4 | 
BRIDGE_REV_A
)

	)

981 
	#BRIDGE_PART_REV_B
 (
BRIDGE_WIDGET_PART_NUM
 << 4 | 
BRIDGE_REV_B
)

	)

982 
	#BRIDGE_PART_REV_C
 (
BRIDGE_WIDGET_PART_NUM
 << 4 | 
BRIDGE_REV_C
)

	)

983 
	#BRIDGE_PART_REV_D
 (
BRIDGE_WIDGET_PART_NUM
 << 4 | 
BRIDGE_REV_D
)

	)

984 
	#XBRIDGE_PART_REV_A
 (
XBRIDGE_WIDGET_PART_NUM
 << 4 | 
XBRIDGE_REV_A
)

	)

985 
	#XBRIDGE_PART_REV_B
 (
XBRIDGE_WIDGET_PART_NUM
 << 4 | 
XBRIDGE_REV_B
)

	)

988 
	#PIC_STAT_PCIX_SPEED
 (0x3uŒ << 34)

	)

989 
	#PIC_STAT_PCIX_ACTIVE
 (0x1uŒ << 33)

	)

990 
	#BRIDGE_STAT_LLP_REC_CNT
 (0xFFu << 24)

	)

991 
	#BRIDGE_STAT_LLP_TX_CNT
 (0xFF << 16)

	)

992 
	#BRIDGE_STAT_FLASH_SELECT
 (0x1 << 6)

	)

993 
	#BRIDGE_STAT_PCI_GIO_N
 (0x1 << 5)

	)

994 
	#BRIDGE_STAT_PENDING
 (0x1F << 0)

	)

997 
	#PIC_CTRL_NO_SNOOP
 (0x1uŒ << 62)

	)

998 
	#PIC_CTRL_RELAX_ORDER
 (0x1uŒ << 61)

	)

999 
	#PIC_CTRL_BUS_NUM
(
x
Ë(()(xË<< 48)

	)

1000 
	#PIC_CTRL_BUS_NUM_MASK
 (
	`PIC_CTRL_BUS_NUM
(0xff))

	)

1001 
	#PIC_CTRL_DEV_NUM
(
x
Ë(()(xË<< 43)

	)

1002 
	#PIC_CTRL_DEV_NUM_MASK
 (
	`PIC_CTRL_DEV_NUM
(0x1f))

	)

1003 
	#PIC_CTRL_FUN_NUM
(
x
Ë(()(xË<< 40)

	)

1004 
	#PIC_CTRL_FUN_NUM_MASK
 (
	`PIC_CTRL_FUN_NUM
(0x7))

	)

1005 
	#PIC_CTRL_PAR_EN_REQ
 (0x1uŒ << 29)

	)

1006 
	#PIC_CTRL_PAR_EN_RESP
 (0x1uŒ << 30)

	)

1007 
	#PIC_CTRL_PAR_EN_ATE
 (0x1uŒ << 31)

	)

1008 
	#BRIDGE_CTRL_FLASH_WR_EN
 (0x1u»<< 31Ë

	)

1009 
	#BRIDGE_CTRL_EN_CLK50
 (0x1 << 30)

	)

1010 
	#BRIDGE_CTRL_EN_CLK40
 (0x1 << 29)

	)

1011 
	#BRIDGE_CTRL_EN_CLK33
 (0x1 << 28)

	)

1012 
	#BRIDGE_CTRL_RST
(
n
Ë(“Ë<< 24)

	)

1013 
	#BRIDGE_CTRL_RST_MASK
 (
	`BRIDGE_CTRL_RST
(0xF))

	)

1014 
	#BRIDGE_CTRL_RST_PIN
(
x
Ë(
	`BRIDGE_CTRL_RST
(0x1 << (x)))

	)

1015 
	#BRIDGE_CTRL_IO_SWAP
 (0x1 << 23)

	)

1016 
	#BRIDGE_CTRL_MEM_SWAP
 (0x1 << 22)

	)

1017 
	#BRIDGE_CTRL_PAGE_SIZE
 (0x1 << 21)

	)

1018 
	#BRIDGE_CTRL_SS_PAR_BAD
 (0x1 << 20)

	)

1019 
	#BRIDGE_CTRL_SS_PAR_EN
 (0x1 << 19)

	)

1020 
	#BRIDGE_CTRL_SSRAM_SIZE
(
n
Ë(“Ë<< 17)

	)

1021 
	#BRIDGE_CTRL_SSRAM_SIZE_MASK
 (
	`BRIDGE_CTRL_SSRAM_SIZE
(0x3))

	)

1022 
	#BRIDGE_CTRL_SSRAM_512K
 (
	`BRIDGE_CTRL_SSRAM_SIZE
(0x3))

	)

1023 
	#BRIDGE_CTRL_SSRAM_128K
 (
	`BRIDGE_CTRL_SSRAM_SIZE
(0x2))

	)

1024 
	#BRIDGE_CTRL_SSRAM_64K
 (
	`BRIDGE_CTRL_SSRAM_SIZE
(0x1))

	)

1025 
	#BRIDGE_CTRL_SSRAM_1K
 (
	`BRIDGE_CTRL_SSRAM_SIZE
(0x0))

	)

1026 
	#BRIDGE_CTRL_F_BAD_PKT
 (0x1 << 16)

	)

1027 
	#BRIDGE_CTRL_LLP_XBAR_CRD
(
n
Ë(“Ë<< 12)

	)

1028 
	#BRIDGE_CTRL_LLP_XBAR_CRD_MASK
 (
	`BRIDGE_CTRL_LLP_XBAR_CRD
(0xf))

	)

1029 
	#BRIDGE_CTRL_CLR_RLLP_CNT
 (0x1 << 11)

	)

1030 
	#BRIDGE_CTRL_CLR_TLLP_CNT
 (0x1 << 10)

	)

1031 
	#BRIDGE_CTRL_SYS_END
 (0x1 << 9)

	)

1032 
	#BRIDGE_CTRL_PCI_SPEED
 (0x3 << 4)

	)

1034 #ifde‡
SN1


1035 
	#BRIDGE_CTRL_BUS_SPEED
(
n
Ë(“Ë<< 4)

	)

1036 
	#BRIDGE_CTRL_BUS_SPEED_MASK
 (
	`BRIDGE_CTRL_BUS_SPEED
(0x3))

	)

1037 
	#BRIDGE_CTRL_BUS_SPEED_33
 0x00

	)

1038 
	#BRIDGE_CTRL_BUS_SPEED_66
 0x10

	)

1040 
	#BRIDGE_CTRL_MAX_TRANS
(
n
Ë(“Ë<< 4)

	)

1041 
	#BRIDGE_CTRL_MAX_TRANS_MASK
 (
	`BRIDGE_CTRL_MAX_TRANS
(0x1f))

	)

1043 
	#BRIDGE_CTRL_WIDGET_ID
(
n
Ë(“Ë<< 0)

	)

1044 
	#BRIDGE_CTRL_WIDGET_ID_MASK
 (
	`BRIDGE_CTRL_WIDGET_ID
(0xf))

	)

1047 
	#BRIDGE_RESP_ERRUPPR_DEVNUM_SHFT
 (20)

	)

1048 
	#BRIDGE_RESP_ERRUPPR_DEVNUM_MASK
 (0x7 << 
BRIDGE_RESP_ERRUPPR_DEVNUM_SHFT
)

	)

1049 
	#BRIDGE_RESP_ERRUPPR_BUFNUM_SHFT
 (16)

	)

1050 
	#BRIDGE_RESP_ERRUPPR_BUFNUM_MASK
 (0xF << 
BRIDGE_RESP_ERRUPPR_BUFNUM_SHFT
)

	)

1051 
	#BRIDGE_RESP_ERRRUPPR_BUFMASK
 (0xFFFF)

	)

1053 
	#BRIDGE_RESP_ERRUPPR_BUFNUM
(
x
) \

1054 (((
x
Ë& 
BRIDGE_RESP_ERRUPPR_BUFNUM_MASK
) >> \

1055 
BRIDGE_RESP_ERRUPPR_BUFNUM_SHFT
)

	)

1057 
	#BRIDGE_RESP_ERRUPPR_DEVICE
(
x
) \

1058 (((
x
Ë& 
BRIDGE_RESP_ERRUPPR_DEVNUM_MASK
) >> \

1059 
BRIDGE_RESP_ERRUPPR_DEVNUM_SHFT
)

	)

1062 
	#BRIDGE_DIRMAP_W_ID_SHFT
 20

	)

1063 
	#BRIDGE_DIRMAP_W_ID
 (0x‡<< 
BRIDGE_DIRMAP_W_ID_SHFT
)

	)

1064 
	#BRIDGE_DIRMAP_RMF_64
 (0x1 << 18)

	)

1065 
	#BRIDGE_DIRMAP_ADD512
 (0x1 << 17)

	)

1066 
	#BRIDGE_DIRMAP_OFF
 (0x1fff‡<< 0)

	)

1067 
	#BRIDGE_DIRMAP_OFF_ADDRSHFT
 (31Ë

	)

1070 
	#BRIDGE_ARB_REQ_WAIT_TICK
(
x
Ë((xË<< 16)

	)

1071 
	#BRIDGE_ARB_REQ_WAIT_TICK_MASK
 
	`BRIDGE_ARB_REQ_WAIT_TICK
(0x3)

	)

1072 
	#BRIDGE_ARB_REQ_WAIT_EN
(
x
Ë((xË<< 8)

	)

1073 
	#BRIDGE_ARB_REQ_WAIT_EN_MASK
 
	`BRIDGE_ARB_REQ_WAIT_EN
(0xff)

	)

1074 
	#BRIDGE_ARB_FREEZE_GNT
 (1 << 6)

	)

1075 
	#BRIDGE_ARB_HPRI_RING_B2
 (1 << 5)

	)

1076 
	#BRIDGE_ARB_HPRI_RING_B1
 (1 << 4)

	)

1077 
	#BRIDGE_ARB_HPRI_RING_B0
 (1 << 3)

	)

1078 
	#BRIDGE_ARB_LPRI_RING_B2
 (1 << 2)

	)

1079 
	#BRIDGE_ARB_LPRI_RING_B1
 (1 << 1)

	)

1080 
	#BRIDGE_ARB_LPRI_RING_B0
 (1 << 0)

	)

1083 
	#BRIDGE_BUS_PCI_RETRY_HLD
(
x
Ë((xË<< 16)

	)

1084 
	#BRIDGE_BUS_PCI_RETRY_HLD_MASK
 
	`BRIDGE_BUS_PCI_RETRY_HLD
(0x1f)

	)

1085 
	#BRIDGE_BUS_GIO_TIMEOUT
 (1 << 12)

	)

1086 
	#BRIDGE_BUS_PCI_RETRY_CNT
(
x
Ë((xË<< 0)

	)

1087 
	#BRIDGE_BUS_PCI_RETRY_MASK
 
	`BRIDGE_BUS_PCI_RETRY_CNT
(0x3ff)

	)

1093 
	#PCIBR_ISR_ERR_START
 8

	)

1094 
	#PCIBR_ISR_MAX_ERRS_BRIDGE
 32

	)

1095 
	#PCIBR_ISR_MAX_ERRS_PIC
 45

	)

1096 
	#PCIBR_ISR_MAX_ERRS
 
PCIBR_ISR_MAX_ERRS_PIC


	)

1099 
	#PIC_ISR_PCIX_SPLIT_MSG_PE
 (0x1uŒ << 45)

	)

1100 
	#PIC_ISR_PCIX_SPLIT_EMSG
 (0x1uŒ << 44)

	)

1101 
	#PIC_ISR_PCIX_SPLIT_TO
 (0x1uŒ << 43)

	)

1102 
	#PIC_ISR_PCIX_UNEX_COMP
 (0x1uŒ << 42)

	)

1103 
	#PIC_ISR_INT_RAM_PERR
 (0x1uŒ << 41)

	)

1104 
	#PIC_ISR_PCIX_ARB_ERR
 (0x1uŒ << 40)

	)

1105 
	#PIC_ISR_PCIX_REQ_TOUT
 (0x1uŒ << 39)

	)

1106 
	#PIC_ISR_PCIX_TABORT
 (0x1uŒ << 38)

	)

1107 
	#PIC_ISR_PCIX_PERR
 (0x1uŒ << 37)

	)

1108 
	#PIC_ISR_PCIX_SERR
 (0x1uŒ << 36)

	)

1109 
	#PIC_ISR_PCIX_MRETRY
 (0x1uŒ << 35)

	)

1110 
	#PIC_ISR_PCIX_MTOUT
 (0x1uŒ << 34)

	)

1111 
	#PIC_ISR_PCIX_DA_PARITY
 (0x1uŒ << 33)

	)

1112 
	#PIC_ISR_PCIX_AD_PARITY
 (0x1uŒ << 32)

	)

1113 
	#BRIDGE_ISR_MULTI_ERR
 (0x1uŒ << 31Ë

	)

1114 
	#BRIDGE_ISR_PMU_ESIZE_FAULT
 (0x1uŒ << 30Ë

	)

1115 
	#BRIDGE_ISR_PAGE_FAULT
 (0x1uŒ << 30Ë

	)

1116 
	#BRIDGE_ISR_UNEXP_RESP
 (0x1uŒ << 29)

	)

1117 
	#BRIDGE_ISR_BAD_XRESP_PKT
 (0x1uŒ << 28)

	)

1118 
	#BRIDGE_ISR_BAD_XREQ_PKT
 (0x1uŒ << 27)

	)

1119 
	#BRIDGE_ISR_RESP_XTLK_ERR
 (0x1uŒ << 26)

	)

1120 
	#BRIDGE_ISR_REQ_XTLK_ERR
 (0x1uŒ << 25)

	)

1121 
	#BRIDGE_ISR_INVLD_ADDR
 (0x1uŒ << 24)

	)

1122 
	#BRIDGE_ISR_UNSUPPORTED_XOP
 (0x1uŒ << 23)

	)

1123 
	#BRIDGE_ISR_XREQ_FIFO_OFLOW
 (0x1uŒ << 22)

	)

1124 
	#BRIDGE_ISR_LLP_REC_SNERR
 (0x1uŒ << 21)

	)

1125 
	#BRIDGE_ISR_LLP_REC_CBERR
 (0x1uŒ << 20)

	)

1126 
	#BRIDGE_ISR_LLP_RCTY
 (0x1uŒ << 19)

	)

1127 
	#BRIDGE_ISR_LLP_TX_RETRY
 (0x1uŒ << 18)

	)

1128 
	#BRIDGE_ISR_LLP_TCTY
 (0x1uŒ << 17)

	)

1129 
	#BRIDGE_ISR_SSRAM_PERR
 (0x1uŒ << 16)

	)

1130 
	#BRIDGE_ISR_PCI_ABORT
 (0x1uŒ << 15)

	)

1131 
	#BRIDGE_ISR_PCI_PARITY
 (0x1uŒ << 14)

	)

1132 
	#BRIDGE_ISR_PCI_SERR
 (0x1uŒ << 13)

	)

1133 
	#BRIDGE_ISR_PCI_PERR
 (0x1uŒ << 12)

	)

1134 
	#BRIDGE_ISR_PCI_MST_TIMEOUT
 (0x1uŒ << 11)

	)

1135 
	#BRIDGE_ISR_GIO_MST_TIMEOUT
 
BRIDGE_ISR_PCI_MST_TIMEOUT


	)

1136 
	#BRIDGE_ISR_PCI_RETRY_CNT
 (0x1uŒ << 10)

	)

1137 
	#BRIDGE_ISR_XREAD_REQ_TIMEOUT
 (0x1uŒ << 9)

	)

1138 
	#BRIDGE_ISR_GIO_B_ENBL_ERR
 (0x1uŒ << 8)

	)

1139 
	#BRIDGE_ISR_INT_MSK
 (0xffuŒ << 0)

	)

1140 
	#BRIDGE_ISR_INT
(
x
Ë(0x1uŒ << (x))

	)

1143 
	#BRIDGE_ISR_LINK_ERROR
 \

1144 (
BRIDGE_ISR_LLP_REC_SNERR
|
BRIDGE_ISR_LLP_REC_CBERR
| \

1145 
BRIDGE_ISR_LLP_RCTY
|
BRIDGE_ISR_LLP_TX_RETRY
| \

1146 
BRIDGE_ISR_LLP_TCTY
)

	)

1148 
	#BRIDGE_ISR_PCIBUS_PIOERR
 \

1149 (
BRIDGE_ISR_PCI_MST_TIMEOUT
|
BRIDGE_ISR_PCI_ABORT
| \

1150 
PIC_ISR_PCIX_MTOUT
|
PIC_ISR_PCIX_TABORT
)

	)

1152 
	#BRIDGE_ISR_PCIBUS_ERROR
 \

1153 (
BRIDGE_ISR_PCIBUS_PIOERR
|
BRIDGE_ISR_PCI_PERR
| \

1154 
BRIDGE_ISR_PCI_SERR
|
BRIDGE_ISR_PCI_RETRY_CNT
| \

1155 
BRIDGE_ISR_PCI_PARITY
|
PIC_ISR_PCIX_PERR
| \

1156 
PIC_ISR_PCIX_SERR
|
PIC_ISR_PCIX_MRETRY
| \

1157 
PIC_ISR_PCIX_AD_PARITY
|
PIC_ISR_PCIX_DA_PARITY
| \

1158 
PIC_ISR_PCIX_REQ_TOUT
|
PIC_ISR_PCIX_UNEX_COMP
| \

1159 
PIC_ISR_PCIX_SPLIT_TO
|
PIC_ISR_PCIX_SPLIT_EMSG
| \

1160 
PIC_ISR_PCIX_SPLIT_MSG_PE
)

	)

1162 
	#BRIDGE_ISR_XTALK_ERROR
 \

1163 (
BRIDGE_ISR_XREAD_REQ_TIMEOUT
|
BRIDGE_ISR_XREQ_FIFO_OFLOW
|\

1164 
BRIDGE_ISR_UNSUPPORTED_XOP
|
BRIDGE_ISR_INVLD_ADDR
| \

1165 
BRIDGE_ISR_REQ_XTLK_ERR
|
BRIDGE_ISR_RESP_XTLK_ERR
| \

1166 
BRIDGE_ISR_BAD_XREQ_PKT
|
BRIDGE_ISR_BAD_XRESP_PKT
| \

1167 
BRIDGE_ISR_UNEXP_RESP
)

	)

1169 
	#BRIDGE_ISR_ERRORS
 \

1170 (
BRIDGE_ISR_LINK_ERROR
|
BRIDGE_ISR_PCIBUS_ERROR
| \

1171 
BRIDGE_ISR_XTALK_ERROR
|
BRIDGE_ISR_SSRAM_PERR
| \

1172 
BRIDGE_ISR_PMU_ESIZE_FAULT
|
PIC_ISR_INT_RAM_PERR
)

	)

1178 
	#BRIDGE_ISR_ERROR_FATAL
 \

1179 ((
BRIDGE_ISR_XTALK_ERROR
 & ~
BRIDGE_ISR_XREAD_REQ_TIMEOUT
)|\

1180 
BRIDGE_ISR_PCI_SERR
|
BRIDGE_ISR_PCI_PARITY
| \

1181 
PIC_ISR_PCIX_SERR
|
PIC_ISR_PCIX_AD_PARITY
| \

1182 
PIC_ISR_PCIX_DA_PARITY
| \

1183 
PIC_ISR_INT_RAM_PERR
|
PIC_ISR_PCIX_SPLIT_MSG_PE
 )

	)

1185 
	#BRIDGE_ISR_ERROR_DUMP
 \

1186 (
BRIDGE_ISR_PCIBUS_ERROR
|
BRIDGE_ISR_PMU_ESIZE_FAULT
| \

1187 
BRIDGE_ISR_XTALK_ERROR
|
BRIDGE_ISR_SSRAM_PERR
| \

1188 
PIC_ISR_PCIX_ARB_ERR
|
PIC_ISR_INT_RAM_PERR
)

	)

1191 
	#PIC_IMR_PCIX_SPLIT_MSG_PE
 
PIC_ISR_PCIX_SPLIT_MSG_PE


	)

1192 
	#PIC_IMR_PCIX_SPLIT_EMSG
 
PIC_ISR_PCIX_SPLIT_EMSG


	)

1193 
	#PIC_IMR_PCIX_SPLIT_TO
 
PIC_ISR_PCIX_SPLIT_TO


	)

1194 
	#PIC_IMR_PCIX_UNEX_COMP
 
PIC_ISR_PCIX_UNEX_COMP


	)

1195 
	#PIC_IMR_INT_RAM_PERR
 
PIC_ISR_INT_RAM_PERR


	)

1196 
	#PIC_IMR_PCIX_ARB_ERR
 
PIC_ISR_PCIX_ARB_ERR


	)

1197 
	#PIC_IMR_PCIX_REQ_TOUT
 
PIC_ISR_PCIX_REQ_TOUT


	)

1198 
	#PIC_IMR_PCIX_TABORT
 
PIC_ISR_PCIX_TABORT


	)

1199 
	#PIC_IMR_PCIX_PERR
 
PIC_ISR_PCIX_PERR


	)

1200 
	#PIC_IMR_PCIX_SERR
 
PIC_ISR_PCIX_SERR


	)

1201 
	#PIC_IMR_PCIX_MRETRY
 
PIC_ISR_PCIX_MRETRY


	)

1202 
	#PIC_IMR_PCIX_MTOUT
 
PIC_ISR_PCIX_MTOUT


	)

1203 
	#PIC_IMR_PCIX_DA_PARITY
 
PIC_ISR_PCIX_DA_PARITY


	)

1204 
	#PIC_IMR_PCIX_AD_PARITY
 
PIC_ISR_PCIX_AD_PARITY


	)

1205 
	#BRIDGE_IMR_UNEXP_RESP
 
BRIDGE_ISR_UNEXP_RESP


	)

1206 
	#BRIDGE_IMR_PMU_ESIZE_FAULT
 
BRIDGE_ISR_PMU_ESIZE_FAULT


	)

1207 
	#BRIDGE_IMR_BAD_XRESP_PKT
 
BRIDGE_ISR_BAD_XRESP_PKT


	)

1208 
	#BRIDGE_IMR_BAD_XREQ_PKT
 
BRIDGE_ISR_BAD_XREQ_PKT


	)

1209 
	#BRIDGE_IMR_RESP_XTLK_ERR
 
BRIDGE_ISR_RESP_XTLK_ERR


	)

1210 
	#BRIDGE_IMR_REQ_XTLK_ERR
 
BRIDGE_ISR_REQ_XTLK_ERR


	)

1211 
	#BRIDGE_IMR_INVLD_ADDR
 
BRIDGE_ISR_INVLD_ADDR


	)

1212 
	#BRIDGE_IMR_UNSUPPORTED_XOP
 
BRIDGE_ISR_UNSUPPORTED_XOP


	)

1213 
	#BRIDGE_IMR_XREQ_FIFO_OFLOW
 
BRIDGE_ISR_XREQ_FIFO_OFLOW


	)

1214 
	#BRIDGE_IMR_LLP_REC_SNERR
 
BRIDGE_ISR_LLP_REC_SNERR


	)

1215 
	#BRIDGE_IMR_LLP_REC_CBERR
 
BRIDGE_ISR_LLP_REC_CBERR


	)

1216 
	#BRIDGE_IMR_LLP_RCTY
 
BRIDGE_ISR_LLP_RCTY


	)

1217 
	#BRIDGE_IMR_LLP_TX_RETRY
 
BRIDGE_ISR_LLP_TX_RETRY


	)

1218 
	#BRIDGE_IMR_LLP_TCTY
 
BRIDGE_ISR_LLP_TCTY


	)

1219 
	#BRIDGE_IMR_SSRAM_PERR
 
BRIDGE_ISR_SSRAM_PERR


	)

1220 
	#BRIDGE_IMR_PCI_ABORT
 
BRIDGE_ISR_PCI_ABORT


	)

1221 
	#BRIDGE_IMR_PCI_PARITY
 
BRIDGE_ISR_PCI_PARITY


	)

1222 
	#BRIDGE_IMR_PCI_SERR
 
BRIDGE_ISR_PCI_SERR


	)

1223 
	#BRIDGE_IMR_PCI_PERR
 
BRIDGE_ISR_PCI_PERR


	)

1224 
	#BRIDGE_IMR_PCI_MST_TIMEOUT
 
BRIDGE_ISR_PCI_MST_TIMEOUT


	)

1225 
	#BRIDGE_IMR_GIO_MST_TIMEOUT
 
BRIDGE_ISR_GIO_MST_TIMEOUT


	)

1226 
	#BRIDGE_IMR_PCI_RETRY_CNT
 
BRIDGE_ISR_PCI_RETRY_CNT


	)

1227 
	#BRIDGE_IMR_XREAD_REQ_TIMEOUT
 
BRIDGE_ISR_XREAD_REQ_TIMEOUT


	)

1228 
	#BRIDGE_IMR_GIO_B_ENBL_ERR
 
BRIDGE_ISR_GIO_B_ENBL_ERR


	)

1229 
	#BRIDGE_IMR_INT_MSK
 
BRIDGE_ISR_INT_MSK


	)

1230 
	#BRIDGE_IMR_INT
(
x
Ë
	`BRIDGE_ISR_INT
(x)

	)

1237 
	#PIC_IRR_PCIX_SPLIT_MSG_PE
 
PIC_ISR_PCIX_SPLIT_MSG_PE


	)

1238 
	#PIC_IRR_PCIX_SPLIT_EMSG
 
PIC_ISR_PCIX_SPLIT_EMSG


	)

1239 
	#PIC_IRR_PCIX_SPLIT_TO
 
PIC_ISR_PCIX_SPLIT_TO


	)

1240 
	#PIC_IRR_PCIX_UNEX_COMP
 
PIC_ISR_PCIX_UNEX_COMP


	)

1241 
	#PIC_IRR_INT_RAM_PERR
 
PIC_ISR_INT_RAM_PERR


	)

1242 
	#PIC_IRR_PCIX_ARB_ERR
 
PIC_ISR_PCIX_ARB_ERR


	)

1243 
	#PIC_IRR_PCIX_REQ_TOUT
 
PIC_ISR_PCIX_REQ_TOUT


	)

1244 
	#PIC_IRR_PCIX_TABORT
 
PIC_ISR_PCIX_TABORT


	)

1245 
	#PIC_IRR_PCIX_PERR
 
PIC_ISR_PCIX_PERR


	)

1246 
	#PIC_IRR_PCIX_SERR
 
PIC_ISR_PCIX_SERR


	)

1247 
	#PIC_IRR_PCIX_MRETRY
 
PIC_ISR_PCIX_MRETRY


	)

1248 
	#PIC_IRR_PCIX_MTOUT
 
PIC_ISR_PCIX_MTOUT


	)

1249 
	#PIC_IRR_PCIX_DA_PARITY
 
PIC_ISR_PCIX_DA_PARITY


	)

1250 
	#PIC_IRR_PCIX_AD_PARITY
 
PIC_ISR_PCIX_AD_PARITY


	)

1251 
	#PIC_IRR_PAGE_FAULT
 
BRIDGE_ISR_PAGE_FAULT


	)

1252 
	#PIC_IRR_UNEXP_RESP
 
BRIDGE_ISR_UNEXP_RESP


	)

1253 
	#PIC_IRR_BAD_XRESP_PKT
 
BRIDGE_ISR_BAD_XRESP_PKT


	)

1254 
	#PIC_IRR_BAD_XREQ_PKT
 
BRIDGE_ISR_BAD_XREQ_PKT


	)

1255 
	#PIC_IRR_RESP_XTLK_ERR
 
BRIDGE_ISR_RESP_XTLK_ERR


	)

1256 
	#PIC_IRR_REQ_XTLK_ERR
 
BRIDGE_ISR_REQ_XTLK_ERR


	)

1257 
	#PIC_IRR_INVLD_ADDR
 
BRIDGE_ISR_INVLD_ADDR


	)

1258 
	#PIC_IRR_UNSUPPORTED_XOP
 
BRIDGE_ISR_UNSUPPORTED_XOP


	)

1259 
	#PIC_IRR_XREQ_FIFO_OFLOW
 
BRIDGE_ISR_XREQ_FIFO_OFLOW


	)

1260 
	#PIC_IRR_LLP_REC_SNERR
 
BRIDGE_ISR_LLP_REC_SNERR


	)

1261 
	#PIC_IRR_LLP_REC_CBERR
 
BRIDGE_ISR_LLP_REC_CBERR


	)

1262 
	#PIC_IRR_LLP_RCTY
 
BRIDGE_ISR_LLP_RCTY


	)

1263 
	#PIC_IRR_LLP_TX_RETRY
 
BRIDGE_ISR_LLP_TX_RETRY


	)

1264 
	#PIC_IRR_LLP_TCTY
 
BRIDGE_ISR_LLP_TCTY


	)

1265 
	#PIC_IRR_PCI_ABORT
 
BRIDGE_ISR_PCI_ABORT


	)

1266 
	#PIC_IRR_PCI_PARITY
 
BRIDGE_ISR_PCI_PARITY


	)

1267 
	#PIC_IRR_PCI_SERR
 
BRIDGE_ISR_PCI_SERR


	)

1268 
	#PIC_IRR_PCI_PERR
 
BRIDGE_ISR_PCI_PERR


	)

1269 
	#PIC_IRR_PCI_MST_TIMEOUT
 
BRIDGE_ISR_PCI_MST_TIMEOUT


	)

1270 
	#PIC_IRR_PCI_RETRY_CNT
 
BRIDGE_ISR_PCI_RETRY_CNT


	)

1271 
	#PIC_IRR_XREAD_REQ_TIMEOUT
 
BRIDGE_ISR_XREAD_REQ_TIMEOUT


	)

1272 
	#BRIDGE_IRR_MULTI_CLR
 (0x1uŒ << 6)

	)

1273 
	#BRIDGE_IRR_CRP_GRP_CLR
 (0x1uŒ << 5)

	)

1274 
	#BRIDGE_IRR_RESP_BUF_GRP_CLR
 (0x1uŒ << 4)

	)

1275 
	#BRIDGE_IRR_REQ_DSP_GRP_CLR
 (0x1uŒ << 3)

	)

1276 
	#BRIDGE_IRR_LLP_GRP_CLR
 (0x1uŒ << 2)

	)

1277 
	#BRIDGE_IRR_SSRAM_GRP_CLR
 (0x1uŒ << 1)

	)

1278 
	#BRIDGE_IRR_PCI_GRP_CLR
 (0x1uŒ << 0)

	)

1279 
	#BRIDGE_IRR_GIO_GRP_CLR
 (0x1uŒ << 0)

	)

1280 
	#BRIDGE_IRR_ALL_CLR
 0x7f

	)

1282 
	#BRIDGE_IRR_CRP_GRP
 (
BRIDGE_ISR_UNEXP_RESP
 | \

1283 
BRIDGE_ISR_XREQ_FIFO_OFLOW
)

	)

1284 
	#BRIDGE_IRR_RESP_BUF_GRP
 (
BRIDGE_ISR_BAD_XRESP_PKT
 | \

1285 
BRIDGE_ISR_RESP_XTLK_ERR
 | \

1286 
BRIDGE_ISR_XREAD_REQ_TIMEOUT
)

	)

1287 
	#BRIDGE_IRR_REQ_DSP_GRP
 (
BRIDGE_ISR_UNSUPPORTED_XOP
 | \

1288 
BRIDGE_ISR_BAD_XREQ_PKT
 | \

1289 
BRIDGE_ISR_REQ_XTLK_ERR
 | \

1290 
BRIDGE_ISR_INVLD_ADDR
)

	)

1291 
	#BRIDGE_IRR_LLP_GRP
 (
BRIDGE_ISR_LLP_REC_SNERR
 | \

1292 
BRIDGE_ISR_LLP_REC_CBERR
 | \

1293 
BRIDGE_ISR_LLP_RCTY
 | \

1294 
BRIDGE_ISR_LLP_TX_RETRY
 | \

1295 
BRIDGE_ISR_LLP_TCTY
)

	)

1296 
	#BRIDGE_IRR_SSRAM_GRP
 (
BRIDGE_ISR_SSRAM_PERR
 | \

1297 
BRIDGE_ISR_PMU_ESIZE_FAULT
)

	)

1298 
	#BRIDGE_IRR_PCI_GRP
 (
BRIDGE_ISR_PCI_ABORT
 | \

1299 
BRIDGE_ISR_PCI_PARITY
 | \

1300 
BRIDGE_ISR_PCI_SERR
 | \

1301 
BRIDGE_ISR_PCI_PERR
 | \

1302 
BRIDGE_ISR_PCI_MST_TIMEOUT
 | \

1303 
BRIDGE_ISR_PCI_RETRY_CNT
)

	)

1305 
	#BRIDGE_IRR_GIO_GRP
 (
BRIDGE_ISR_GIO_B_ENBL_ERR
 | \

1306 
BRIDGE_ISR_GIO_MST_TIMEOUT
)

	)

1308 
	#PIC_IRR_RAM_GRP
 
PIC_ISR_INT_RAM_PERR


	)

1310 
	#PIC_PCIX_GRP_CLR
 (
PIC_IRR_PCIX_AD_PARITY
 | \

1311 
PIC_IRR_PCIX_DA_PARITY
 | \

1312 
PIC_IRR_PCIX_MTOUT
 | \

1313 
PIC_IRR_PCIX_MRETRY
 | \

1314 
PIC_IRR_PCIX_SERR
 | \

1315 
PIC_IRR_PCIX_PERR
 | \

1316 
PIC_IRR_PCIX_TABORT
 | \

1317 
PIC_ISR_PCIX_REQ_TOUT
 | \

1318 
PIC_ISR_PCIX_UNEX_COMP
 | \

1319 
PIC_ISR_PCIX_SPLIT_TO
 | \

1320 
PIC_ISR_PCIX_SPLIT_EMSG
 | \

1321 
PIC_ISR_PCIX_SPLIT_MSG_PE
)

	)

1324 
	#BRIDGE_INT_DEV_SHFT
(
n
Ë(“)*3)

	)

1325 
	#BRIDGE_INT_DEV_MASK
(
n
Ë(0x7 << 
	`BRIDGE_INT_DEV_SHFT
“))

	)

1326 
	#BRIDGE_INT_DEV_SET
(
_dev
, 
_löe
Ë(_dev << 
	`BRIDGE_INT_DEV_SHFT
(_löe))

	)

1329 
	#BRIDGE_INT_ADDR_HOST
 0x0003FF00

	)

1330 
	#BRIDGE_INT_ADDR_FLD
 0x000000FF

	)

1333 
	#PIC_INT_ADDR_FLD
 0x00FF000000000000

	)

1334 
	#PIC_INT_ADDR_HOST
 0x0000FFFFFFFFFFFF

	)

1336 
	#BRIDGE_TMO_PCI_RETRY_HLD_MASK
 0x1f0000

	)

1337 
	#BRIDGE_TMO_GIO_TIMEOUT_MASK
 0x001000

	)

1338 
	#BRIDGE_TMO_PCI_RETRY_CNT_MASK
 0x0003ff

	)

1340 
	#BRIDGE_TMO_PCI_RETRY_CNT_MAX
 0x3ff

	)

1342 #ifde‡
SN0


1347 
	#BRIDGE_INT_ADDR_NASID_SHFT
 8

	)

1353 
	#BRIDGE_INT_ADDR_DEST_IO
 (1 << 17)

	)

1354 
	#BRIDGE_INT_ADDR_DEST_MEM
 0

	)

1355 
	#BRIDGE_INT_ADDR_MASK
 (1 << 17)

	)

1359 
	#BRIDGE_DEV_ERR_LOCK_EN
 (1uŒ << 28)

	)

1360 
	#BRIDGE_DEV_PAGE_CHK_DIS
 (1uŒ << 27)

	)

1361 
	#BRIDGE_DEV_FORCE_PCI_PAR
 (1uŒ << 26)

	)

1362 
	#BRIDGE_DEV_VIRTUAL_EN
 (1uŒ << 25)

	)

1363 
	#BRIDGE_DEV_PMU_WRGA_EN
 (1uŒ << 24)

	)

1364 
	#BRIDGE_DEV_DIR_WRGA_EN
 (1uŒ << 23)

	)

1365 
	#BRIDGE_DEV_DEV_SIZE
 (1uŒ << 22)

	)

1366 
	#BRIDGE_DEV_RT
 (1uŒ << 21)

	)

1367 
	#BRIDGE_DEV_SWAP_PMU
 (1uŒ << 20)

	)

1368 
	#BRIDGE_DEV_SWAP_DIR
 (1uŒ << 19)

	)

1369 
	#BRIDGE_DEV_PREF
 (1uŒ << 18)

	)

1370 
	#BRIDGE_DEV_PRECISE
 (1uŒ << 17)

	)

1371 
	#BRIDGE_DEV_COH
 (1uŒ << 16)

	)

1372 
	#BRIDGE_DEV_BARRIER
 (1uŒ << 15)

	)

1373 
	#BRIDGE_DEV_GBR
 (1uŒ << 14)

	)

1374 
	#BRIDGE_DEV_DEV_SWAP
 (1uŒ << 13)

	)

1375 
	#BRIDGE_DEV_DEV_IO_MEM
 (1uŒ << 12)

	)

1376 
	#BRIDGE_DEV_OFF_MASK
 0x00000fff

	)

1377 
	#BRIDGE_DEV_OFF_ADDR_SHFT
 20

	)

1379 
	#XBRIDGE_DEV_PMU_BITS
 
BRIDGE_DEV_PMU_WRGA_EN


	)

1380 
	#BRIDGE_DEV_PMU_BITS
 (
BRIDGE_DEV_PMU_WRGA_EN
 | \

1381 
BRIDGE_DEV_SWAP_PMU
)

	)

1382 
	#BRIDGE_DEV_D32_BITS
 (
BRIDGE_DEV_DIR_WRGA_EN
 | \

1383 
BRIDGE_DEV_SWAP_DIR
 | \

1384 
BRIDGE_DEV_PREF
 | \

1385 
BRIDGE_DEV_PRECISE
 | \

1386 
BRIDGE_DEV_COH
 | \

1387 
BRIDGE_DEV_BARRIER
)

	)

1388 
	#XBRIDGE_DEV_D64_BITS
 (
BRIDGE_DEV_DIR_WRGA_EN
 | \

1389 
BRIDGE_DEV_COH
 | \

1390 
BRIDGE_DEV_BARRIER
)

	)

1391 
	#BRIDGE_DEV_D64_BITS
 (
BRIDGE_DEV_DIR_WRGA_EN
 | \

1392 
BRIDGE_DEV_SWAP_DIR
 | \

1393 
BRIDGE_DEV_COH
 | \

1394 
BRIDGE_DEV_BARRIER
)

	)

1397 
	#BRIDGE_ERRUPPR_DEVMASTER
 (0x1 << 20Ë

	)

1398 
	#BRIDGE_ERRUPPR_PCIVDEV
 (0x1 << 19Ë

	)

1399 
	#BRIDGE_ERRUPPR_DEVNUM_SHFT
 (16)

	)

1400 
	#BRIDGE_ERRUPPR_DEVNUM_MASK
 (0x7 << 
BRIDGE_ERRUPPR_DEVNUM_SHFT
)

	)

1401 
	#BRIDGE_ERRUPPR_DEVICE
(
îr
Ë((”ºË>> 
BRIDGE_ERRUPPR_DEVNUM_SHFT
Ë& 0x7)

	)

1402 
	#BRIDGE_ERRUPPR_ADDRMASK
 (0xFFFF)

	)

1405 
	#BRIDGE_INTMODE_CLR_PKT_EN
(
x
Ë(0x1 << (x))

	)

1408 
	#BRIDGE_CREDIT
 3

	)

1411 
	#BRIDGE_RRB_EN
 0x8

	)

1412 
	#BRIDGE_RRB_DEV
 0x7

	)

1413 
	#BRIDGE_RRB_VDEV
 0x4

	)

1414 
	#BRIDGE_RRB_PDEV
 0x3

	)

1416 
	#PIC_RRB_EN
 0x8

	)

1417 
	#PIC_RRB_DEV
 0x7

	)

1418 
	#PIC_RRB_VDEV
 0x6

	)

1419 
	#PIC_RRB_PDEV
 0x1

	)

1422 
	#BRIDGE_RRB_VALID
(
r
Ë(0x00010000<<‘))

	)

1423 
	#BRIDGE_RRB_INUSE
(
r
Ë(0x00000001<<‘))

	)

1426 
	#BRIDGE_RRB_CLEAR
(
r
Ë(0x00000001<<‘))

	)

1429 
	#VCHAN0
 0

	)

1430 
	#VCHAN1
 1

	)

1431 
	#VCHAN2
 2

	)

1432 
	#VCHAN3
 3

	)

1435 
	#NUM_RBAR
 16

	)

1438 
	#XBOX_BRIDGE_WID
 8

	)

1439 
	#FLASH_PROM1_BASE
 0xE00000

	)

1440 
	#XBOX_RPS_EXISTS
 1 << 6

	)

1441 
	#XBOX_RPS_FAIL
 1 << 4

	)

1453 
	#BRIDGE_PIO32_XTALK_ALIAS_BASE
 0x000040000000L

	)

1454 
	#BRIDGE_PIO32_XTALK_ALIAS_LIMIT
 0x00007FFFFFFFL

	)

1455 
	#BRIDGE_PIO64_XTALK_ALIAS_BASE
 0x000080000000L

	)

1456 
	#BRIDGE_PIO64_XTALK_ALIAS_LIMIT
 0x0000BFFFFFFFL

	)

1457 
	#BRIDGE_PCIIO_XTALK_ALIAS_BASE
 0x000100000000L

	)

1458 
	#BRIDGE_PCIIO_XTALK_ALIAS_LIMIT
 0x0001FFFFFFFFL

	)

1461 
	#BRIDGE_MIN_PIO_ADDR_MEM
 0x00000000

	)

1462 
	#BRIDGE_MAX_PIO_ADDR_MEM
 0x3fffffff

	)

1463 
	#BRIDGE_MIN_PIO_ADDR_IO
 0x00000000

	)

1464 
	#BRIDGE_MAX_PIO_ADDR_IO
 0xffffffff

	)

1467 
	#BRIDGE_PCI_MEM32_BASE
 
BRIDGE_PIO32_XTALK_ALIAS_BASE


	)

1468 
	#BRIDGE_PCI_MEM32_LIMIT
 
BRIDGE_PIO32_XTALK_ALIAS_LIMIT


	)

1469 
	#BRIDGE_PCI_MEM64_BASE
 
BRIDGE_PIO64_XTALK_ALIAS_BASE


	)

1470 
	#BRIDGE_PCI_MEM64_LIMIT
 
BRIDGE_PIO64_XTALK_ALIAS_LIMIT


	)

1471 
	#BRIDGE_PCI_IO_BASE
 
BRIDGE_PCIIO_XTALK_ALIAS_BASE


	)

1472 
	#BRIDGE_PCI_IO_LIMIT
 
BRIDGE_PCIIO_XTALK_ALIAS_LIMIT


	)

1487 
	#PICBRIDGE0_PIO32_XTALK_ALIAS_BASE
 0x000040000000L

	)

1488 
	#PICBRIDGE0_PIO32_XTALK_ALIAS_LIMIT
 0x00007FFFFFFFL

	)

1489 
	#PICBRIDGE0_PIO64_XTALK_ALIAS_BASE
 0x000080000000L

	)

1490 
	#PICBRIDGE0_PIO64_XTALK_ALIAS_LIMIT
 0x0000BFFFFFFFL

	)

1491 
	#PICBRIDGE1_PIO32_XTALK_ALIAS_BASE
 0x0000C0000000L

	)

1492 
	#PICBRIDGE1_PIO32_XTALK_ALIAS_LIMIT
 0x0000FFFFFFFFL

	)

1493 
	#PICBRIDGE1_PIO64_XTALK_ALIAS_BASE
 0x000100000000L

	)

1494 
	#PICBRIDGE1_PIO64_XTALK_ALIAS_LIMIT
 0x00013FFFFFFFL

	)

1497 
	#PICBRIDGE0_PCI_MEM32_BASE
 
PICBRIDGE0_PIO32_XTALK_ALIAS_BASE


	)

1498 
	#PICBRIDGE0_PCI_MEM32_LIMIT
 
PICBRIDGE0_PIO32_XTALK_ALIAS_LIMIT


	)

1499 
	#PICBRIDGE0_PCI_MEM64_BASE
 
PICBRIDGE0_PIO64_XTALK_ALIAS_BASE


	)

1500 
	#PICBRIDGE0_PCI_MEM64_LIMIT
 
PICBRIDGE0_PIO64_XTALK_ALIAS_LIMIT


	)

1501 
	#PICBRIDGE1_PCI_MEM32_BASE
 
PICBRIDGE1_PIO32_XTALK_ALIAS_BASE


	)

1502 
	#PICBRIDGE1_PCI_MEM32_LIMIT
 
PICBRIDGE1_PIO32_XTALK_ALIAS_LIMIT


	)

1503 
	#PICBRIDGE1_PCI_MEM64_BASE
 
PICBRIDGE1_PIO64_XTALK_ALIAS_BASE


	)

1504 
	#PICBRIDGE1_PCI_MEM64_LIMIT
 
PICBRIDGE1_PIO64_XTALK_ALIAS_LIMIT


	)

1510 
	#BRIDGE_LOCAL_BASE
 0

	)

1511 
	#BRIDGE_DMA_MAPPED_BASE
 0x40000000

	)

1512 
	#BRIDGE_DMA_MAPPED_SIZE
 0x40000000

	)

1513 
	#BRIDGE_DMA_DIRECT_BASE
 0x80000000

	)

1514 
	#BRIDGE_DMA_DIRECT_SIZE
 0x80000000

	)

1516 
	#PCI32_LOCAL_BASE
 
BRIDGE_LOCAL_BASE


	)

1519 
	#PCI32_MAPPED_BASE
 
BRIDGE_DMA_MAPPED_BASE


	)

1520 
	#PCI32_DIRECT_BASE
 
BRIDGE_DMA_DIRECT_BASE


	)

1522 #if 
LANGUAGE_C


1524 
	#IS_PCI32_LOCAL
(
x
Ë((
uöt64_t
)(xË< 
PCI32_MAPPED_BASE
)

	)

1525 
	#IS_PCI32_MAPPED
(
x
Ë((
uöt64_t
)(xË< 
PCI32_DIRECT_BASE
 && \

1526 (
uöt64_t
)(
x
Ë>
PCI32_MAPPED_BASE
)

	)

1527 
	#IS_PCI32_DIRECT
(
x
Ë((
uöt64_t
)(xË>
PCI32_MAPPED_BASE
)

	)

1528 
	#IS_PCI64
(
x
Ë((
uöt64_t
)(xË>
PCI64_BASE
)

	)

1535 
	#BRIDGE_GIO_MEM32_BASE
 
BRIDGE_PIO32_XTALK_ALIAS_BASE


	)

1536 
	#BRIDGE_GIO_MEM32_LIMIT
 
BRIDGE_PIO32_XTALK_ALIAS_LIMIT


	)

1538 
	#GIO_LOCAL_BASE
 
BRIDGE_LOCAL_BASE


	)

1541 
	#GIO_MAPPED_BASE
 
BRIDGE_DMA_MAPPED_BASE


	)

1542 
	#GIO_DIRECT_BASE
 
BRIDGE_DMA_DIRECT_BASE


	)

1544 #if 
LANGUAGE_C


1546 
	#IS_GIO_LOCAL
(
x
Ë((
uöt64_t
)(xË< 
GIO_MAPPED_BASE
)

	)

1547 
	#IS_GIO_MAPPED
(
x
Ë((
uöt64_t
)(xË< 
GIO_DIRECT_BASE
 && \

1548 (
uöt64_t
)(
x
Ë>
GIO_MAPPED_BASE
)

	)

1549 
	#IS_GIO_DIRECT
(
x
Ë((
uöt64_t
)(xË>
GIO_MAPPED_BASE
)

	)

1557 
	#BRIDGE_DIRECT_32_SEG_SIZE
 
BRIDGE_DMA_DIRECT_SIZE


	)

1558 
	#BRIDGE_DIRECT_32_TO_XTALK
(
dú_off
,
adr
) \

1559 ((
dú_off
Ë* 
BRIDGE_DIRECT_32_SEG_SIZE
 + \

1560 ((
adr
Ë& (
BRIDGE_DIRECT_32_SEG_SIZE
 - 1)Ë+ 
PHYS_RAMBASE
)

	)

1563 
	#PCI64_ATTR_TARG_MASK
 0xf000000000000000

	)

1564 
	#PCI64_ATTR_TARG_SHFT
 60

	)

1565 
	#PCI64_ATTR_PREF
 (1uŒ << 59)

	)

1566 
	#PCI64_ATTR_PREC
 (1uŒ << 58)

	)

1567 
	#PCI64_ATTR_VIRTUAL
 (1uŒ << 57)

	)

1568 
	#PCI64_ATTR_BAR
 (1uŒ << 56)

	)

1569 
	#PCI64_ATTR_SWAP
 (1uŒ << 55)

	)

1570 
	#PCI64_ATTR_RMF_MASK
 0x00ff000000000000

	)

1571 
	#PCI64_ATTR_RMF_SHFT
 48

	)

1573 #i‡
LANGUAGE_C


1575 
	u©e_u
 {

1576 
uöt64_t
 
ít
;

1577 
	sxb_©e_s
 {

1578 
uöt64_t
 :16;

1579 
uöt64_t
 
addr
:36;

1580 
uöt64_t
 
èrg
:4;

1581 
uöt64_t
 
ª£rved
:2;

1582 
uöt64_t
 
sw≠
:1;

1583 
uöt64_t
 
b¨rõr
:1;

1584 
uöt64_t
 
¥e„tch
:1;

1585 
uöt64_t
 
¥eci£
:1;

1586 
uöt64_t
 
cohîít
:1;

1587 
uöt64_t
 
vÆid
:1;

1588 } 
xb_fõld
;

1589 
	s©e_s
 {

1590 
uöt64_t
 
rmf
:16;

1591 
uöt64_t
 
addr
:36;

1592 
uöt64_t
 
èrg
:4;

1593 
uöt64_t
 
ª£rved
:3;

1594 
uöt64_t
 
b¨rõr
:1;

1595 
uöt64_t
 
¥e„tch
:1;

1596 
uöt64_t
 
¥eci£
:1;

1597 
uöt64_t
 
cohîít
:1;

1598 
uöt64_t
 
vÆid
:1;

1599 } 
fõld
;

1600 } 
	t©e_t
;

1603 
	#ATE_V
 (1 << 0)

	)

1604 
	#ATE_CO
 (1 << 1)

	)

1605 
	#ATE_PREC
 (1 << 2)

	)

1606 
	#ATE_PREF
 (1 << 3)

	)

1607 
	#ATE_BAR
 (1 << 4)

	)

1608 
	#ATE_SWAP
 (1 << 5)

	)

1610 
	#ATE_PFNSHIFT
 12

	)

1611 
	#ATE_TIDSHIFT
 8

	)

1612 
	#ATE_RMFSHIFT
 48

	)

1614 
	#mk©e
(
xaddr
, 
xid
, 
©å
) ((xaddr) & 0x0000fffffffff000ULL) | \

1615 ((
xid
)<<
ATE_TIDSHIFT
) | \

1616 (
©å
)

	)

1620 
	#ATE_SWAPSHIFT
 29

	)

1621 
	#ATE_SWAP_ON
(
x
Ë((xË|(1 << 
ATE_SWAPSHIFT
))

	)

1622 
	#ATE_SWAP_OFF
(
x
Ë((xË&~(1 << 
ATE_SWAPSHIFT
))

	)

1625 #ifde‡
_STANDALONE


1632 
	#is_xbridge
(
bridge
Ë
	`IS_XBRIDGE
(bridge->
b_wid_id
)

	)

1633 
	#is_pic
(
bridge
Ë
	`IS_PIC_BRIDGE
(bridge->
b_wid_id
)

	)

1635 
	#is_pcix
(
bridge
Ë
	`is_pic
(bridge) ? \

1636 (
bridge
->
p_wid_°©_64
 & 
PIC_STAT_PCIX_ACTIVE
Ë: 0

	)

1637 
	#is_pci
(
bridge
Ë!
	`is_pcix
(bridge)

	)

1641 #if 
LANGUAGE_C


1645 #ifde‡
_STANDALONE


1646 
Æloc_bridge_ºb
(*
bus_ba£
, 
bus_¶Ÿ
, 
v
, 
˘
);

1647 
‰ì_bridge_ºb
(*
bus_ba£
, 
bus_¶Ÿ
, 
v
, 
˘
);

1648 
öô_bridge
(
widgë_cfg_t
 *);

1649 
£t_bridge_ve˘‹
(*
bus_ba£
, 
bus_¶Ÿ
, 
vec
);

1650 
dißbÀ_bridge_öå
(*
bus_ba£
, 
bus_¶Ÿ
);

1652 
bridge_˛ó∫oÁu…
();

1658 #ifdef 
MACROFIELD_LINE


1666 #i‚de‡
MACROFIELD_LINE_BITFIELD


1667 
	#MACROFIELD_LINE_BITFIELD
(
m
Ë

	)

1670 
ma¸ofõld_s
 
	gbridge_ma¸ofõld
[] =

1673 
MACROFIELD_LINE
(
BRIDGE_WID_ID
, 
b_wid_id
)

1674 
MACROFIELD_LINE_BITFIELD
(
WIDGET_REV_NUM
)

1675 
MACROFIELD_LINE_BITFIELD
(
WIDGET_PART_NUM
)

1676 
MACROFIELD_LINE_BITFIELD
(
WIDGET_MFG_NUM
)

1677 
MACROFIELD_LINE
(
BRIDGE_WID_STAT
, 
b_wid_°©
)

1678 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_STAT_LLP_REC_CNT
)

1679 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_STAT_LLP_TX_CNT
)

1680 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_STAT_FLASH_SELECT
)

1681 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_STAT_PCI_GIO_N
)

1682 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_STAT_PENDING
)

1683 
MACROFIELD_LINE
(
BRIDGE_WID_ERR_UPPER
, 
b_wid_îr_uµî
)

1684 
MACROFIELD_LINE
(
BRIDGE_WID_ERR_LOWER
, 
b_wid_îr_lowî
)

1685 
MACROFIELD_LINE
(
BRIDGE_WID_CONTROL
, 
b_wid_c⁄åﬁ
)

1686 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_FLASH_WR_EN
)

1687 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_EN_CLK50
)

1688 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_EN_CLK40
)

1689 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_EN_CLK33
)

1690 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_RST_MASK
)

1691 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_IO_SWAP
)

1692 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_MEM_SWAP
)

1693 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_PAGE_SIZE
)

1694 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_SS_PAR_BAD
)

1695 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_SS_PAR_EN
)

1696 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_SSRAM_SIZE_MASK
)

1697 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_F_BAD_PKT
)

1698 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_LLP_XBAR_CRD_MASK
)

1699 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_CLR_RLLP_CNT
)

1700 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_CLR_TLLP_CNT
)

1701 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_SYS_END
)

1702 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_MAX_TRANS_MASK
)

1703 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_CTRL_WIDGET_ID_MASK
)

1704 
MACROFIELD_LINE
(
BRIDGE_WID_REQ_TIMEOUT
, 
b_wid_ªq_timeout
)

1705 
MACROFIELD_LINE
(
BRIDGE_WID_INT_UPPER
, 
b_wid_öt_uµî
)

1706 
MACROFIELD_LINE_BITFIELD
(
WIDGET_INT_VECTOR
)

1707 
MACROFIELD_LINE_BITFIELD
(
WIDGET_TARGET_ID
)

1708 
MACROFIELD_LINE_BITFIELD
(
WIDGET_UPP_ADDR
)

1709 
MACROFIELD_LINE
(
BRIDGE_WID_INT_LOWER
, 
b_wid_öt_lowî
)

1710 
MACROFIELD_LINE
(
BRIDGE_WID_ERR_CMDWORD
, 
b_wid_îr_cmdw‹d
)

1711 
MACROFIELD_LINE_BITFIELD
(
WIDGET_DIDN
)

1712 
MACROFIELD_LINE_BITFIELD
(
WIDGET_SIDN
)

1713 
MACROFIELD_LINE_BITFIELD
(
WIDGET_PACTYP
)

1714 
MACROFIELD_LINE_BITFIELD
(
WIDGET_TNUM
)

1715 
MACROFIELD_LINE_BITFIELD
(
WIDGET_COHERENT
)

1716 
MACROFIELD_LINE_BITFIELD
(
WIDGET_DS
)

1717 
MACROFIELD_LINE_BITFIELD
(
WIDGET_GBR
)

1718 
MACROFIELD_LINE_BITFIELD
(
WIDGET_VBPM
)

1719 
MACROFIELD_LINE_BITFIELD
(
WIDGET_ERROR
)

1720 
MACROFIELD_LINE_BITFIELD
(
WIDGET_BARRIER
)

1721 
MACROFIELD_LINE
(
BRIDGE_WID_LLP
, 
b_wid_Œp
)

1722 
MACROFIELD_LINE_BITFIELD
(
WIDGET_LLP_MAXRETRY
)

1723 
MACROFIELD_LINE_BITFIELD
(
WIDGET_LLP_NULLTIMEOUT
)

1724 
MACROFIELD_LINE_BITFIELD
(
WIDGET_LLP_MAXBURST
)

1725 
MACROFIELD_LINE
(
BRIDGE_WID_TFLUSH
, 
b_wid_tÊush
)

1726 
MACROFIELD_LINE
(
BRIDGE_WID_AUX_ERR
, 
b_wid_aux_îr
)

1727 
MACROFIELD_LINE
(
BRIDGE_WID_RESP_UPPER
, 
b_wid_ª•_uµî
)

1728 
MACROFIELD_LINE
(
BRIDGE_WID_RESP_LOWER
, 
b_wid_ª•_lowî
)

1729 
MACROFIELD_LINE
(
BRIDGE_WID_TST_PIN_CTRL
, 
b_wid_t°_pö_˘æ
)

1730 
MACROFIELD_LINE
(
BRIDGE_DIR_MAP
, 
b_dú_m≠
)

1731 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DIRMAP_W_ID
)

1732 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DIRMAP_RMF_64
)

1733 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DIRMAP_ADD512
)

1734 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DIRMAP_OFF
)

1735 
MACROFIELD_LINE
(
BRIDGE_RAM_PERR
, 
b_øm_≥º
)

1736 
MACROFIELD_LINE
(
BRIDGE_ARB
, 
b_¨b
)

1737 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_REQ_WAIT_TICK_MASK
)

1738 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_REQ_WAIT_EN_MASK
)

1739 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_FREEZE_GNT
)

1740 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_HPRI_RING_B2
)

1741 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_HPRI_RING_B1
)

1742 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_HPRI_RING_B0
)

1743 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_LPRI_RING_B2
)

1744 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_LPRI_RING_B1
)

1745 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ARB_LPRI_RING_B0
)

1746 
MACROFIELD_LINE
(
BRIDGE_NIC
, 
b_nic
)

1747 
MACROFIELD_LINE
(
BRIDGE_PCI_BUS_TIMEOUT
, 
b_pci_bus_timeout
)

1748 
MACROFIELD_LINE
(
BRIDGE_PCI_CFG
, 
b_pci_cfg
)

1749 
MACROFIELD_LINE
(
BRIDGE_PCI_ERR_UPPER
, 
b_pci_îr_uµî
)

1750 
MACROFIELD_LINE
(
BRIDGE_PCI_ERR_LOWER
, 
b_pci_îr_lowî
)

1751 
MACROFIELD_LINE
(
BRIDGE_INT_STATUS
, 
b_öt_°©us
)

1752 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_MULTI_ERR
)

1753 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_PMU_ESIZE_FAULT
)

1754 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_UNEXP_RESP
)

1755 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_BAD_XRESP_PKT
)

1756 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_BAD_XREQ_PKT
)

1757 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_RESP_XTLK_ERR
)

1758 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_REQ_XTLK_ERR
)

1759 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_INVLD_ADDR
)

1760 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_UNSUPPORTED_XOP
)

1761 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_XREQ_FIFO_OFLOW
)

1762 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_LLP_REC_SNERR
)

1763 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_LLP_REC_CBERR
)

1764 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_LLP_RCTY
)

1765 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_LLP_TX_RETRY
)

1766 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_LLP_TCTY
)

1767 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_SSRAM_PERR
)

1768 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_PCI_ABORT
)

1769 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_PCI_PARITY
)

1770 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_PCI_SERR
)

1771 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_PCI_PERR
)

1772 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_PCI_MST_TIMEOUT
)

1773 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_PCI_RETRY_CNT
)

1774 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_XREAD_REQ_TIMEOUT
)

1775 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_GIO_B_ENBL_ERR
)

1776 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_ISR_INT_MSK
)

1777 
MACROFIELD_LINE
(
BRIDGE_INT_ENABLE
, 
b_öt_íabÀ
)

1778 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_UNEXP_RESP
)

1779 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_PMU_ESIZE_FAULT
)

1780 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_BAD_XRESP_PKT
)

1781 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_BAD_XREQ_PKT
)

1782 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_RESP_XTLK_ERR
)

1783 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_REQ_XTLK_ERR
)

1784 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_INVLD_ADDR
)

1785 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_UNSUPPORTED_XOP
)

1786 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_XREQ_FIFO_OFLOW
)

1787 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_LLP_REC_SNERR
)

1788 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_LLP_REC_CBERR
)

1789 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_LLP_RCTY
)

1790 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_LLP_TX_RETRY
)

1791 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_LLP_TCTY
)

1792 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_SSRAM_PERR
)

1793 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_PCI_ABORT
)

1794 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_PCI_PARITY
)

1795 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_PCI_SERR
)

1796 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_PCI_PERR
)

1797 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_PCI_MST_TIMEOUT
)

1798 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_PCI_RETRY_CNT
)

1799 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_XREAD_REQ_TIMEOUT
)

1800 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_GIO_B_ENBL_ERR
)

1801 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IMR_INT_MSK
)

1802 
MACROFIELD_LINE
(
BRIDGE_INT_RST_STAT
, 
b_öt_r°_°©
)

1803 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IRR_ALL_CLR
)

1804 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IRR_MULTI_CLR
)

1805 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IRR_CRP_GRP_CLR
)

1806 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IRR_RESP_BUF_GRP_CLR
)

1807 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IRR_REQ_DSP_GRP_CLR
)

1808 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IRR_LLP_GRP_CLR
)

1809 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IRR_SSRAM_GRP_CLR
)

1810 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_IRR_PCI_GRP_CLR
)

1811 
MACROFIELD_LINE
(
BRIDGE_INT_MODE
, 
b_öt_mode
)

1812 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INTMODE_CLR_PKT_EN
(7))

1813 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INTMODE_CLR_PKT_EN
(6))

1814 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INTMODE_CLR_PKT_EN
(5))

1815 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INTMODE_CLR_PKT_EN
(4))

1816 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INTMODE_CLR_PKT_EN
(3))

1817 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INTMODE_CLR_PKT_EN
(2))

1818 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INTMODE_CLR_PKT_EN
(1))

1819 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INTMODE_CLR_PKT_EN
(0))

1820 
MACROFIELD_LINE
(
BRIDGE_INT_DEVICE
, 
b_öt_devi˚
)

1821 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_DEV_MASK
(7))

1822 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_DEV_MASK
(6))

1823 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_DEV_MASK
(5))

1824 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_DEV_MASK
(4))

1825 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_DEV_MASK
(3))

1826 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_DEV_MASK
(2))

1827 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_DEV_MASK
(1))

1828 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_DEV_MASK
(0))

1829 
MACROFIELD_LINE
(
BRIDGE_INT_HOST_ERR
, 
b_öt_ho°_îr
)

1830 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_ADDR_HOST
)

1831 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_INT_ADDR_FLD
)

1832 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR0
, 
b_öt_addr
[0].
addr
)

1833 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR
(0), 
b_öt_addr
[0].
addr
)

1834 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR
(1), 
b_öt_addr
[1].
addr
)

1835 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR
(2), 
b_öt_addr
[2].
addr
)

1836 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR
(3), 
b_öt_addr
[3].
addr
)

1837 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR
(4), 
b_öt_addr
[4].
addr
)

1838 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR
(5), 
b_öt_addr
[5].
addr
)

1839 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR
(6), 
b_öt_addr
[6].
addr
)

1840 
MACROFIELD_LINE
(
BRIDGE_INT_ADDR
(7), 
b_öt_addr
[7].
addr
)

1841 
MACROFIELD_LINE
(
BRIDGE_DEVICE0
, 
b_devi˚
[0].
ªg
)

1842 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_ERR_LOCK_EN
)

1843 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_PAGE_CHK_DIS
)

1844 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_FORCE_PCI_PAR
)

1845 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_VIRTUAL_EN
)

1846 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_PMU_WRGA_EN
)

1847 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_DIR_WRGA_EN
)

1848 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_DEV_SIZE
)

1849 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_RT
)

1850 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_SWAP_PMU
)

1851 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_SWAP_DIR
)

1852 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_PREF
)

1853 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_PRECISE
)

1854 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_COH
)

1855 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_BARRIER
)

1856 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_GBR
)

1857 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_DEV_SWAP
)

1858 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_DEV_IO_MEM
)

1859 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_DEV_OFF_MASK
)

1860 
MACROFIELD_LINE
(
BRIDGE_DEVICE
(0), 
b_devi˚
[0].
ªg
)

1861 
MACROFIELD_LINE
(
BRIDGE_DEVICE
(1), 
b_devi˚
[1].
ªg
)

1862 
MACROFIELD_LINE
(
BRIDGE_DEVICE
(2), 
b_devi˚
[2].
ªg
)

1863 
MACROFIELD_LINE
(
BRIDGE_DEVICE
(3), 
b_devi˚
[3].
ªg
)

1864 
MACROFIELD_LINE
(
BRIDGE_DEVICE
(4), 
b_devi˚
[4].
ªg
)

1865 
MACROFIELD_LINE
(
BRIDGE_DEVICE
(5), 
b_devi˚
[5].
ªg
)

1866 
MACROFIELD_LINE
(
BRIDGE_DEVICE
(6), 
b_devi˚
[6].
ªg
)

1867 
MACROFIELD_LINE
(
BRIDGE_DEVICE
(7), 
b_devi˚
[7].
ªg
)

1868 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF0
, 
b_wr_ªq_buf
[0].
ªg
)

1869 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF
(0), 
b_wr_ªq_buf
[0].
ªg
)

1870 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF
(1), 
b_wr_ªq_buf
[1].
ªg
)

1871 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF
(2), 
b_wr_ªq_buf
[2].
ªg
)

1872 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF
(3), 
b_wr_ªq_buf
[3].
ªg
)

1873 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF
(4), 
b_wr_ªq_buf
[4].
ªg
)

1874 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF
(5), 
b_wr_ªq_buf
[5].
ªg
)

1875 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF
(6), 
b_wr_ªq_buf
[6].
ªg
)

1876 
MACROFIELD_LINE
(
BRIDGE_WR_REQ_BUF
(7), 
b_wr_ªq_buf
[7].
ªg
)

1877 
MACROFIELD_LINE
(
BRIDGE_EVEN_RESP
, 
b_eví_ª•
)

1878 
MACROFIELD_LINE
(
BRIDGE_ODD_RESP
, 
b_odd_ª•
)

1879 
MACROFIELD_LINE
(
BRIDGE_RESP_STATUS
, 
b_ª•_°©us
)

1880 
MACROFIELD_LINE
(
BRIDGE_RESP_CLEAR
, 
b_ª•_˛ór
)

1881 
MACROFIELD_LINE
(
BRIDGE_ATE_RAM
, 
b_öt_©e_øm
)

1882 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV0
, 
b_ty≥0_cfg_dev
[0])

1884 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV
(0), 
b_ty≥0_cfg_dev
[0])

1885 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(0,0), 
b_ty≥0_cfg_dev
[0].
f
[0])

1886 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(0,1), 
b_ty≥0_cfg_dev
[0].
f
[1])

1887 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(0,2), 
b_ty≥0_cfg_dev
[0].
f
[2])

1888 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(0,3), 
b_ty≥0_cfg_dev
[0].
f
[3])

1889 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(0,4), 
b_ty≥0_cfg_dev
[0].
f
[4])

1890 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(0,5), 
b_ty≥0_cfg_dev
[0].
f
[5])

1891 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(0,6), 
b_ty≥0_cfg_dev
[0].
f
[6])

1892 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(0,7), 
b_ty≥0_cfg_dev
[0].
f
[7])

1893 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV
(1), 
b_ty≥0_cfg_dev
[1])

1894 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(1,0), 
b_ty≥0_cfg_dev
[1].
f
[0])

1895 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(1,1), 
b_ty≥0_cfg_dev
[1].
f
[1])

1896 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(1,2), 
b_ty≥0_cfg_dev
[1].
f
[2])

1897 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(1,3), 
b_ty≥0_cfg_dev
[1].
f
[3])

1898 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(1,4), 
b_ty≥0_cfg_dev
[1].
f
[4])

1899 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(1,5), 
b_ty≥0_cfg_dev
[1].
f
[5])

1900 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(1,6), 
b_ty≥0_cfg_dev
[1].
f
[6])

1901 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(1,7), 
b_ty≥0_cfg_dev
[1].
f
[7])

1902 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV
(2), 
b_ty≥0_cfg_dev
[2])

1903 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(2,0), 
b_ty≥0_cfg_dev
[2].
f
[0])

1904 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(2,1), 
b_ty≥0_cfg_dev
[2].
f
[1])

1905 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(2,2), 
b_ty≥0_cfg_dev
[2].
f
[2])

1906 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(2,3), 
b_ty≥0_cfg_dev
[2].
f
[3])

1907 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(2,4), 
b_ty≥0_cfg_dev
[2].
f
[4])

1908 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(2,5), 
b_ty≥0_cfg_dev
[2].
f
[5])

1909 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(2,6), 
b_ty≥0_cfg_dev
[2].
f
[6])

1910 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(2,7), 
b_ty≥0_cfg_dev
[2].
f
[7])

1911 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV
(3), 
b_ty≥0_cfg_dev
[3])

1912 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(3,0), 
b_ty≥0_cfg_dev
[3].
f
[0])

1913 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(3,1), 
b_ty≥0_cfg_dev
[3].
f
[1])

1914 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(3,2), 
b_ty≥0_cfg_dev
[3].
f
[2])

1915 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(3,3), 
b_ty≥0_cfg_dev
[3].
f
[3])

1916 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(3,4), 
b_ty≥0_cfg_dev
[3].
f
[4])

1917 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(3,5), 
b_ty≥0_cfg_dev
[3].
f
[5])

1918 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(3,6), 
b_ty≥0_cfg_dev
[3].
f
[6])

1919 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(3,7), 
b_ty≥0_cfg_dev
[3].
f
[7])

1920 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV
(4), 
b_ty≥0_cfg_dev
[4])

1921 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(4,0), 
b_ty≥0_cfg_dev
[4].
f
[0])

1922 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(4,1), 
b_ty≥0_cfg_dev
[4].
f
[1])

1923 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(4,2), 
b_ty≥0_cfg_dev
[4].
f
[2])

1924 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(4,3), 
b_ty≥0_cfg_dev
[4].
f
[3])

1925 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(4,4), 
b_ty≥0_cfg_dev
[4].
f
[4])

1926 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(4,5), 
b_ty≥0_cfg_dev
[4].
f
[5])

1927 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(4,6), 
b_ty≥0_cfg_dev
[4].
f
[6])

1928 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(4,7), 
b_ty≥0_cfg_dev
[4].
f
[7])

1929 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV
(5), 
b_ty≥0_cfg_dev
[5])

1930 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(5,0), 
b_ty≥0_cfg_dev
[5].
f
[0])

1931 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(5,1), 
b_ty≥0_cfg_dev
[5].
f
[1])

1932 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(5,2), 
b_ty≥0_cfg_dev
[5].
f
[2])

1933 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(5,3), 
b_ty≥0_cfg_dev
[5].
f
[3])

1934 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(5,4), 
b_ty≥0_cfg_dev
[5].
f
[4])

1935 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(5,5), 
b_ty≥0_cfg_dev
[5].
f
[5])

1936 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(5,6), 
b_ty≥0_cfg_dev
[5].
f
[6])

1937 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(5,7), 
b_ty≥0_cfg_dev
[5].
f
[7])

1938 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV
(6), 
b_ty≥0_cfg_dev
[6])

1939 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(6,0), 
b_ty≥0_cfg_dev
[6].
f
[0])

1940 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(6,1), 
b_ty≥0_cfg_dev
[6].
f
[1])

1941 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(6,2), 
b_ty≥0_cfg_dev
[6].
f
[2])

1942 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(6,3), 
b_ty≥0_cfg_dev
[6].
f
[3])

1943 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(6,4), 
b_ty≥0_cfg_dev
[6].
f
[4])

1944 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(6,5), 
b_ty≥0_cfg_dev
[6].
f
[5])

1945 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(6,6), 
b_ty≥0_cfg_dev
[6].
f
[6])

1946 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(6,7), 
b_ty≥0_cfg_dev
[6].
f
[7])

1947 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEV
(7), 
b_ty≥0_cfg_dev
[7])

1948 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(7,0), 
b_ty≥0_cfg_dev
[7].
f
[0])

1949 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(7,1), 
b_ty≥0_cfg_dev
[7].
f
[1])

1950 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(7,2), 
b_ty≥0_cfg_dev
[7].
f
[2])

1951 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(7,3), 
b_ty≥0_cfg_dev
[7].
f
[3])

1952 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(7,4), 
b_ty≥0_cfg_dev
[7].
f
[4])

1953 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(7,5), 
b_ty≥0_cfg_dev
[7].
f
[5])

1954 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(7,6), 
b_ty≥0_cfg_dev
[7].
f
[6])

1955 
MACROFIELD_LINE
(
BRIDGE_TYPE0_CFG_DEVF
(7,7), 
b_ty≥0_cfg_dev
[7].
f
[7])

1957 
MACROFIELD_LINE
(
BRIDGE_TYPE1_CFG
, 
b_ty≥1_cfg
)

1958 
MACROFIELD_LINE
(
BRIDGE_PCI_IACK
, 
b_pci_ück
)

1959 
MACROFIELD_LINE
(
BRIDGE_EXT_SSRAM
, 
b_ext_©e_øm
)

1960 
MACROFIELD_LINE
(
BRIDGE_DEVIO0
, 
b_devio
(0))

1961 
MACROFIELD_LINE
(
BRIDGE_DEVIO
(0), 
b_devio
(0))

1962 
MACROFIELD_LINE
(
BRIDGE_DEVIO
(1), 
b_devio
(1))

1963 
MACROFIELD_LINE
(
BRIDGE_DEVIO
(2), 
b_devio
(2))

1964 
MACROFIELD_LINE
(
BRIDGE_DEVIO
(3), 
b_devio
(3))

1965 
MACROFIELD_LINE
(
BRIDGE_DEVIO
(4), 
b_devio
(4))

1966 
MACROFIELD_LINE
(
BRIDGE_DEVIO
(5), 
b_devio
(5))

1967 
MACROFIELD_LINE
(
BRIDGE_DEVIO
(6), 
b_devio
(6))

1968 
MACROFIELD_LINE
(
BRIDGE_DEVIO
(7), 
b_devio
(7))

1969 
MACROFIELD_LINE
(
BRIDGE_EXTERNAL_FLASH
, 
b_exã∫Æ_Êash
)

1973 #ifde‡
__˝lu•lus


	@/usr/include/sys/PCI/ioc3.h

24 #i‚de‡
__PCI_IOC3_H__


25 
	#__PCI_IOC3_H__


	)

38 #i‡
LANGUAGE_C


39 
__uöt32_t
 
	tioc3ªg_t
;

46 
	#IOC3_PCI_ID
 0x0

	)

48 
	#IOC3_VENDOR_ID_NUM
 0x10A9

	)

49 
	#IOC3_DEVICE_ID_NUM
 0x0003

	)

50 
	#IOC3_ADDRSPACE_MASK
 0xfff00000ULL

	)

52 
	#IOC3_PCI_SCR
 0x4

	)

53 
	#IOC3_PCI_REV
 0x8

	)

54 
	#IOC3_PCI_LAT
 0x¯

	)

55 
	#IOC3_PCI_ADDR
 0x10

	)

57 
	#IOC3_PCI_ERR_ADDR_L
 0x40

	)

58 
	#PCI_ERR_ADDR_VLD
 (0x1 << 0)

	)

59 
	#PCI_ERR_ADDR_MST_ID_MSK
 (0x‡<< 1)

	)

60 
	#PCI_ERR_ADDR_MUL_ERR
 (0x1 << 5)

	)

61 
	#PCI_ERR_ADDR_ADDR_MSK
 (0x3fffff‡<< 6)

	)

64 
	#IOC3_MST_ID_SA_TX
 0

	)

65 
	#IOC3_MST_ID_SA_RX
 1

	)

66 
	#IOC3_MST_ID_SB_TX
 2

	)

67 
	#IOC3_MST_ID_SB_RX
 3

	)

68 
	#IOC3_MST_ID_ECPP
 4

	)

69 
	#IOC3_MST_ID_ETX_DESC_READ
 8

	)

70 
	#IOC3_MST_ID_ETX_BUF1_READ
 9

	)

71 
	#IOC3_MST_ID_ETX_BUF2_READ
 10

	)

72 
	#IOC3_MST_ID_ERX_DESC_READ
 11

	)

73 
	#IOC3_MST_ID_ERX_BUF_WRITE
 12

	)

75 
	#IOC3_PCI_ERR_ADDR_H
 0x44

	)

81 
	#IOC3_SIO_IR
 0x01C

	)

83 #i‡
_STANDALONE


84 
	#IOC3_SIO_IES
 0x020

	)

85 
	#IOC3_SIO_IEC
 0x024

	)

90 
	#IOC3_SIO_IES_RO
 0x020

	)

91 
	#IOC3_SIO_IEC_RO
 0x024

	)

94 
	#IOC3_SIO_CR
 0x028

	)

95 
	#IOC3_INT_OUT
 0x02C

	)

96 
	#IOC3_MCR
 0x030

	)

97 
	#IOC3_GPCR_S
 0x034

	)

98 
	#IOC3_GPCR_C
 0x038

	)

99 
	#IOC3_GPDR
 0x03C

	)

100 
	#IOC3_GPPR_0
 0x040

	)

101 
	#IOC3_GPPR_OFF
 0x4

	)

102 
	#IOC3_GPPR
(
x
Ë(
IOC3_GPPR_0
+(x)*
IOC3_GPPR_OFF
)

	)

105 
	#IOC3_PPBR_H_A
 0x080

	)

106 
	#IOC3_PPBR_L_A
 0x084

	)

107 
	#IOC3_PPCR_A
 0x088

	)

108 
	#IOC3_PPCR
 0x08C

	)

109 
	#IOC3_PPBR_H_B
 0x090

	)

110 
	#IOC3_PPBR_L_B
 0x094

	)

111 
	#IOC3_PPCR_B
 0x098

	)

114 
	#IOC3_KM_CSR
 0x09C

	)

115 
	#IOC3_K_RD
 0x0A0

	)

116 
	#IOC3_M_RD
 0x0A4

	)

117 
	#IOC3_K_WD
 0x0A8

	)

118 
	#IOC3_M_WD
 0x0AC

	)

121 
	#IOC3_SBBR_H
 0x0B0

	)

122 
	#IOC3_SBBR_L
 0x0B4

	)

124 
	#IOC3_SSCR_A
 0x0B8

	)

125 
	#IOC3_STPIR_A
 0x0BC

	)

126 
	#IOC3_STCIR_A
 0x0C0

	)

127 
	#IOC3_SRPIR_A
 0x0C4

	)

128 
	#IOC3_SRCIR_A
 0x0C8

	)

129 
	#IOC3_SRTR_A
 0x0CC

	)

130 
	#IOC3_SHADOW_A
 0x0D0

	)

132 
	#IOC3_SSCR_B
 0x0D4

	)

133 
	#IOC3_STPIR_B
 0x0D8

	)

134 
	#IOC3_STCIR_B
 0x0DC

	)

135 
	#IOC3_SRPIR_B
 0x0E0

	)

136 
	#IOC3_SRCIR_B
 0x0E4

	)

137 
	#IOC3_SRTR_B
 0x0E8

	)

138 
	#IOC3_SHADOW_B
 0x0EC

	)

142 
	#IOC3_REG_OFF
 0x0F0

	)

143 
	#IOC3_RAM_OFF
 0x40000

	)

145 
	#IOC3_EMCR
 0x0F0

	)

146 
	#IOC3_EISR
 0x0F4

	)

147 
	#IOC3_EIER
 0x0F8

	)

149 
	#IOC3_ERCSR
 0x0FC

	)

150 
	#IOC3_ERBR_H
 0x100

	)

151 
	#IOC3_ERBR_L
 0x104

	)

152 
	#IOC3_ERBAR
 0x108

	)

153 
	#IOC3_ERCIR
 0x10C

	)

154 
	#IOC3_ERPIR
 0x110

	)

155 
	#IOC3_ERTR
 0x114

	)

157 
	#IOC3_ETCSR
 0x118

	)

158 
	#IOC3_ERSR
 0x11C

	)

159 
	#IOC3_ETCDC
 0x120

	)

160 
	#IOC3_ETBR_H
 0x128

	)

161 
	#IOC3_ETBR_L
 0x12C

	)

162 
	#IOC3_ETCIR
 0x130

	)

163 
	#IOC3_ETPIR
 0x134

	)

165 
	#IOC3_EBIR
 0x124

	)

166 
	#IOC3_EMAR_H
 0x138

	)

167 
	#IOC3_EMAR_L
 0x13C

	)

168 
	#IOC3_EHAR_H
 0x140

	)

169 
	#IOC3_EHAR_L
 0x144

	)

170 
	#IOC3_MICR
 0x148

	)

171 
	#IOC3_MIDR
 0x14C

	)

174 
	#IOC3_INT_OUT_P
 0x4000

	)

175 
	#IOC3_SSCR_A_P
 0x8000

	)

176 
	#IOC3_STPIR_A_P
 0x8004

	)

177 
	#IOC3_STCIR_A_P
 0x8008 (
ªad
-
⁄ly
)

	)

178 
	#IOC3_SRPIR_A_P
 0x800C (
ªad
-
⁄ly
)

	)

179 
	#IOC3_SRCIR_A_P
 0x8010

	)

180 
	#IOC3_SRTR_A_P
 0x8014

	)

181 
	#IOC3_SHADOW_A_P
 0x8018 (
ªad
-
⁄ly
)

	)

183 
	#IOC3_SSCR_B_P
 0xC000

	)

184 
	#IOC3_STPIR_B_P
 0xC004

	)

185 
	#IOC3_STCIR_B_P
 0xC008 (
ªad
-
⁄ly
)

	)

186 
	#IOC3_SRPIR_B_P
 0xC00C (
ªad
-
⁄ly
)

	)

187 
	#IOC3_SRCIR_B_P
 0xC010

	)

188 
	#IOC3_SRTR_B_P
 0xC014

	)

189 
	#IOC3_SHADOW_B_P
 0xC018 (
ªad
-
⁄ly
)

	)

191 
	#IOC3_ALIAS_PAGE_SIZE
 0x4000

	)

193 #i‡
IP22


194 
	#UARTA_BASE
 0x18

	)

195 
	#UARTB_BASE
 0x20

	)

196 
	#PP_BASE
 0x10

	)

198 
	#UARTA_BASE
 0x178

	)

199 
	#UARTB_BASE
 0x170

	)

200 
	#PP_BASE
 0x150

	)

204 
	#IOC3_SIO_BASE
 0x20000

	)

205 
	#IOC3_SIO_UARTC
 (
IOC3_SIO_BASE
+0x141Ë

	)

206 
	#IOC3_SIO_KBDCG
 (
IOC3_SIO_BASE
+0x142Ë

	)

207 
	#IOC3_SIO_PP_BASE
 (
IOC3_SIO_BASE
+
PP_BASE
Ë

	)

208 
	#IOC3_SIO_RTC_BASE
 (
IOC3_SIO_BASE
+0x168Ë

	)

209 
	#IOC3_SIO_UB_BASE
 (
IOC3_SIO_BASE
+
UARTB_BASE
Ë

	)

210 
	#IOC3_SIO_UA_BASE
 (
IOC3_SIO_BASE
+
UARTA_BASE
Ë

	)

213 
	#IOC3_SSRAM
 
IOC3_RAM_OFF


	)

214 
	#IOC3_SSRAM_LEN
 0x40000

	)

215 
	#IOC3_SSRAM_DM
 0x0000fff‡

	)

216 
	#IOC3_SSRAM_PM
 0x00010000

	)

219 
	#PCI_SCR_PAR_RESP_EN
 0x00000040

	)

220 
	#PCI_SCR_SERR_EN
 0x00000100

	)

221 
	#PCI_SCR_DROP_MODE_EN
 0x00008000

	)

222 
	#PCI_SCR_RX_SERR
 (0x1 << 16)

	)

223 
	#PCI_SCR_DROP_MODE
 (0x1 << 17)

	)

224 
	#PCI_SCR_SIG_PAR_ERR
 (0x1 << 24)

	)

225 
	#PCI_SCR_SIG_TAR_ABRT
 (0x1 << 27)

	)

226 
	#PCI_SCR_RX_TAR_ABRT
 (0x1 << 28)

	)

227 
	#PCI_SCR_SIG_MST_ABRT
 (0x1 << 29)

	)

228 
	#PCI_SCR_SIG_SERR
 (0x1 << 30)

	)

229 
	#PCI_SCR_PAR_ERR
 (0x1 << 31)

	)

232 
	#KM_CSR_K_WRT_PEND
 0x00000001

	)

233 
	#KM_CSR_M_WRT_PEND
 0x00000002

	)

234 
	#KM_CSR_K_LCB
 0x00000004

	)

235 
	#KM_CSR_M_LCB
 0x00000008

	)

236 
	#KM_CSR_K_DATA
 0x00000010

	)

237 
	#KM_CSR_K_CLK
 0x00000020

	)

238 
	#KM_CSR_K_PULL_DATA
 0x00000040

	)

239 
	#KM_CSR_K_PULL_CLK
 0x00000080

	)

240 
	#KM_CSR_M_DATA
 0x00000100

	)

241 
	#KM_CSR_M_CLK
 0x00000200

	)

242 
	#KM_CSR_M_PULL_DATA
 0x00000400

	)

243 
	#KM_CSR_M_PULL_CLK
 0x00000800

	)

244 
	#KM_CSR_EMM_MODE
 0x00001000

	)

245 
	#KM_CSR_SIM_MODE
 0x00002000

	)

246 
	#KM_CSR_K_SM_IDLE
 0x00004000

	)

247 
	#KM_CSR_M_SM_IDLE
 0x00008000

	)

248 
	#KM_CSR_K_TO
 0x00010000

	)

249 
	#KM_CSR_M_TO
 0x00020000

	)

250 
	#KM_CSR_K_TO_EN
 0x00040000

	)

252 
	#KM_CSR_M_TO_EN
 0x00080000

	)

254 
	#KM_CSR_K_CLAMP_ONE
 0x00100000

	)

255 
	#KM_CSR_M_CLAMP_ONE
 0x00200000

	)

256 
	#KM_CSR_K_CLAMP_THREE
 0x00400000

	)

257 
	#KM_CSR_M_CLAMP_THREE
 0x00800000

	)

260 
	#KM_RD_DATA_2
 0x000000f‡

	)

261 
	#KM_RD_DATA_2_SHIFT
 0

	)

262 
	#KM_RD_DATA_1
 0x0000ff00

	)

263 
	#KM_RD_DATA_1_SHIFT
 8

	)

264 
	#KM_RD_DATA_0
 0x00ff0000

	)

265 
	#KM_RD_DATA_0_SHIFT
 16

	)

266 
	#KM_RD_FRAME_ERR_2
 0x01000000

	)

267 
	#KM_RD_FRAME_ERR_1
 0x02000000

	)

268 
	#KM_RD_FRAME_ERR_0
 0x04000000

	)

270 
	#KM_RD_KBD_MSE
 0x08000000

	)

271 
	#KM_RD_OFLO
 0x10000000

	)

272 
	#KM_RD_VALID_2
 0x20000000

	)

273 
	#KM_RD_VALID_1
 0x40000000

	)

274 
	#KM_RD_VALID_0
 0x80000000

	)

275 
	#KM_RD_VALID_ALL
 (
KM_RD_VALID_0
|
KM_RD_VALID_1
|
KM_RD_VALID_2
)

	)

278 
	#KM_WD_WRT_DATA
 0x000000f‡

	)

279 
	#KM_WD_WRT_DATA_SHIFT
 0

	)

282 
	#RXSB_OVERRUN
 0x01

	)

283 
	#RXSB_PAR_ERR
 0x02

	)

284 
	#RXSB_FRAME_ERR
 0x04

	)

285 
	#RXSB_BREAK
 0x08

	)

286 
	#RXSB_CTS
 0x10

	)

287 
	#RXSB_DCD
 0x20

	)

288 
	#RXSB_MODEM_VALID
 0x40

	)

289 
	#RXSB_DATA_VALID
 0x80

	)

292 
	#TXCB_INT_WHEN_DONE
 0x20

	)

293 
	#TXCB_INVALID
 0x00

	)

294 
	#TXCB_VALID
 0x40

	)

295 
	#TXCB_MCR
 0x80

	)

296 
	#TXCB_DELAY
 0xc0

	)

299 
	#SBBR_L_SIZE
 0x00000001

	)

300 
	#SBBR_L_BASE
 0xfffff000

	)

303 
	#SSCR_RX_THRESHOLD
 0x000001f‡

	)

304 
	#SSCR_TX_TIMER_BUSY
 0x00010000

	)

305 
	#SSCR_HFC_EN
 0x00020000

	)

306 
	#SSCR_RX_RING_DCD
 0x00040000

	)

307 
	#SSCR_RX_RING_CTS
 0x00080000

	)

308 
	#SSCR_HIGH_SPD
 0x00100000

	)

309 
	#SSCR_DIAG
 0x00200000

	)

310 
	#SSCR_RX_DRAIN
 0x08000000

	)

311 
	#SSCR_DMA_EN
 0x10000000

	)

312 
	#SSCR_DMA_PAUSE
 0x20000000

	)

313 
	#SSCR_PAUSE_STATE
 0x40000000

	)

314 
	#SSCR_RESET
 0x80000000

	)

317 
	#PROD_CONS_PTR_4K
 0x00000ff8

	)

318 
	#PROD_CONS_PTR_1K
 0x000003f8

	)

319 
	#PROD_CONS_PTR_OFF
 3

	)

322 
	#SRCIR_ARM
 0x80000000

	)

325 
	#SRPIR_BYTE_CNT
 0x07000000

	)

326 
	#SRPIR_BYTE_CNT_SHIFT
 24

	)

329 
	#STCIR_BYTE_CNT
 0x0f000000

	)

330 
	#STCIR_BYTE_CNT_SHIFT
 24

	)

333 
	#SHADOW_DR
 0x00000001

	)

334 
	#SHADOW_OE
 0x00000002

	)

335 
	#SHADOW_PE
 0x00000004

	)

336 
	#SHADOW_FE
 0x00000008

	)

337 
	#SHADOW_BI
 0x00000010

	)

338 
	#SHADOW_THRE
 0x00000020

	)

339 
	#SHADOW_TEMT
 0x00000040

	)

340 
	#SHADOW_RFCE
 0x00000080

	)

341 
	#SHADOW_DCTS
 0x00010000

	)

342 
	#SHADOW_DDCD
 0x00080000

	)

343 
	#SHADOW_CTS
 0x00100000

	)

344 
	#SHADOW_DCD
 0x00800000

	)

345 
	#SHADOW_DTR
 0x01000000

	)

346 
	#SHADOW_RTS
 0x02000000

	)

347 
	#SHADOW_OUT1
 0x04000000

	)

348 
	#SHADOW_OUT2
 0x08000000

	)

349 
	#SHADOW_LOOP
 0x10000000

	)

352 
	#SRTR_CNT
 0x00000ff‡

	)

353 
	#SRTR_CNT_VAL
 0x0fff0000

	)

354 
	#SRTR_CNT_VAL_SHIFT
 16

	)

355 
	#SRTR_HZ
 16000

	)

358 
	#SIO_IR_SA_TX_MT
 0x00000001

	)

359 
	#SIO_IR_SA_RX_FULL
 0x00000002

	)

360 
	#SIO_IR_SA_RX_HIGH
 0x00000004

	)

361 
	#SIO_IR_SA_RX_TIMER
 0x00000008

	)

362 
	#SIO_IR_SA_DELTA_DCD
 0x00000010

	)

363 
	#SIO_IR_SA_DELTA_CTS
 0x00000020

	)

364 
	#SIO_IR_SA_INT
 0x00000040

	)

365 
	#SIO_IR_SA_TX_EXPLICIT
 0x00000080

	)

366 
	#SIO_IR_SA_MEMERR
 0x00000100

	)

367 
	#SIO_IR_SB_TX_MT
 0x00000200

	)

368 
	#SIO_IR_SB_RX_FULL
 0x00000400

	)

369 
	#SIO_IR_SB_RX_HIGH
 0x00000800

	)

370 
	#SIO_IR_SB_RX_TIMER
 0x00001000

	)

371 
	#SIO_IR_SB_DELTA_DCD
 0x00002000

	)

372 
	#SIO_IR_SB_DELTA_CTS
 0x00004000

	)

373 
	#SIO_IR_SB_INT
 0x00008000

	)

374 
	#SIO_IR_SB_TX_EXPLICIT
 0x00010000

	)

375 
	#SIO_IR_SB_MEMERR
 0x00020000

	)

376 
	#SIO_IR_PP_INT
 0x00040000

	)

377 
	#SIO_IR_PP_INTA
 0x00080000

	)

378 
	#SIO_IR_PP_INTB
 0x00100000

	)

379 
	#SIO_IR_PP_MEMERR
 0x00200000

	)

380 
	#SIO_IR_KBD_INT
 0x00400000

	)

381 
	#SIO_IR_RT_INT
 0x08000000

	)

382 
	#SIO_IR_GEN_INT1
 0x10000000

	)

383 
	#SIO_IR_GEN_INT_SHIFT
 28

	)

386 
	#SIO_IR_SA
 (
SIO_IR_SA_TX_MT
 | 
SIO_IR_SA_RX_FULL
 | \

387 
SIO_IR_SA_RX_HIGH
 | 
SIO_IR_SA_RX_TIMER
 | \

388 
SIO_IR_SA_DELTA_DCD
 | 
SIO_IR_SA_DELTA_CTS
 | \

389 
SIO_IR_SA_INT
 | 
SIO_IR_SA_TX_EXPLICIT
 | \

390 
SIO_IR_SA_MEMERR
)

	)

391 
	#SIO_IR_SB
 (
SIO_IR_SB_TX_MT
 | 
SIO_IR_SB_RX_FULL
 | \

392 
SIO_IR_SB_RX_HIGH
 | 
SIO_IR_SB_RX_TIMER
 | \

393 
SIO_IR_SB_DELTA_DCD
 | 
SIO_IR_SB_DELTA_CTS
 | \

394 
SIO_IR_SB_INT
 | 
SIO_IR_SB_TX_EXPLICIT
 | \

395 
SIO_IR_SB_MEMERR
)

	)

396 
	#SIO_IR_PP
 (
SIO_IR_PP_INT
 | 
SIO_IR_PP_INTA
 | \

397 
SIO_IR_PP_INTB
 | 
SIO_IR_PP_MEMERR
)

	)

398 
	#SIO_IR_RT
 (
SIO_IR_RT_INT
 | 
SIO_IR_GEN_INT1
)

	)

401 
	#IOC3_PENDING_INTRS
(
mem
Ë(
	`PCI_INW
(&((mem)->
sio_ú
)) & \

402 
	`PCI_INW
(&((
mem
)->
sio_õs_ro
)))

	)

405 
	#SIO_CR_SIO_RESET
 0x00000001

	)

406 
	#SIO_CR_SER_A_BASE
 0x000000„

	)

407 
	#SIO_CR_SER_A_BASE_SHIFT
 1

	)

408 
	#SIO_CR_SER_B_BASE
 0x00007f00

	)

409 
	#SIO_CR_SER_B_BASE_SHIFT
 8

	)

410 
	#SIO_SR_CMD_PULSE
 0x00078000

	)

411 
	#SIO_CR_CMD_PULSE_SHIFT
 15

	)

412 
	#SIO_CR_ARB_DIAG
 0x00380000

	)

413 
	#SIO_CR_ARB_DIAG_TXA
 0x00000000

	)

414 
	#SIO_CR_ARB_DIAG_RXA
 0x00080000

	)

415 
	#SIO_CR_ARB_DIAG_TXB
 0x00100000

	)

416 
	#SIO_CR_ARB_DIAG_RXB
 0x00180000

	)

417 
	#SIO_CR_ARB_DIAG_PP
 0x00200000

	)

418 
	#SIO_CR_ARB_DIAG_IDLE
 0x00400000

	)

421 
	#INT_OUT_COUNT
 0x0000fff‡

	)

422 
	#INT_OUT_MODE
 0x00070000

	)

423 
	#INT_OUT_MODE_0
 0x00000000

	)

424 
	#INT_OUT_MODE_1
 0x00040000

	)

425 
	#INT_OUT_MODE_1PULSE
 0x00050000

	)

426 
	#INT_OUT_MODE_PULSES
 0x00060000

	)

427 
	#INT_OUT_MODE_SQW
 0x00070000

	)

428 
	#INT_OUT_DIAG
 0x40000000

	)

429 
	#INT_OUT_INT_OUT
 0x80000000

	)

432 
	#INT_OUT_NS_PER_TICK
 (30 * 260Ë

	)

433 
	#INT_OUT_TICKS_PER_PULSE
 3

	)

434 
	#INT_OUT_US_TO_COUNT
(
x
) \

435 (((
x
Ë* 10 + 
INT_OUT_NS_PER_TICK
 / 200) * \

436 100 / 
INT_OUT_NS_PER_TICK
 - 1)

	)

437 
	#INT_OUT_COUNT_TO_US
(
x
) \

438 (((
x
Ë+ 1Ë* 
INT_OUT_NS_PER_TICK
 / 1000)

	)

439 
	#INT_OUT_MIN_TICKS
 3

	)

440 
	#INT_OUT_MAX_TICKS
 
INT_OUT_COUNT


	)

443 
	#GPCR_DIR
 0x000000f‡

	)

444 
	#GPCR_DIR_PIN
(
x
Ë(1<<(x)Ë

	)

445 
	#GPCR_EDGE
 0x000f0000

	)

446 
	#GPCR_EDGE_PIN
(
x
Ë(1<<((x)+15)Ë

	)

449 
	#GPCR_INT_OUT_EN
 0x00100000

	)

450 
	#GPCR_MLAN_EN
 0x00200000

	)

451 
	#GPCR_DIR_SERA_XCVR
 0x00000080

	)

452 
	#GPCR_DIR_SERB_XCVR
 0x00000040

	)

453 
	#GPCR_DIR_PHY_RST
 0x00000020

	)

454 #i‡
IP30


455 
	#GPCR_DIR_MEM_DQM
 0x00000010

	)

456 
	#GPCR_DIR_LED1
 0x00000002

	)

457 
	#GPCR_DIR_LED0
 0x00000001

	)

461 
	#GPCR_PHY_RESET
 0x20

	)

462 
	#GPCR_UARTB_MODESEL
 0x40

	)

463 
	#GPCR_UARTA_MODESEL
 0x80

	)

465 
	#GPPR_PHY_RESET_PIN
 5

	)

466 
	#GPPR_UARTB_MODESEL_PIN
 6

	)

467 
	#GPPR_UARTA_MODESEL_PIN
 7

	)

469 #i‡
IP30


470 
	#GPCR_MEM_DQM
 0x10

	)

471 
	#GPCR_OCTANE_CLASSIC
 0x04

	)

472 
	#GPCR_LED0_ON
 0x01

	)

473 
	#GPCR_LED1_ON
 0x02

	)

476 #i‡
LANGUAGE_C


483 vﬁ©ûê
	sioc3_îegs
 {

484 
ioc3ªg_t
 
	mem¸
;

485 
ioc3ªg_t
 
	mei§
;

486 
ioc3ªg_t
 
	meõr
;

487 
ioc3ªg_t
 
	mîc§
;

488 
ioc3ªg_t
 
	mîbr_h
;

489 
ioc3ªg_t
 
	mîbr_l
;

490 
ioc3ªg_t
 
	mîb¨
;

491 
ioc3ªg_t
 
	mîcú
;

492 
ioc3ªg_t
 
	mîpú
;

493 
ioc3ªg_t
 
	mîå
;

494 
ioc3ªg_t
 
	mëc§
;

495 
ioc3ªg_t
 
	mî§
;

496 
ioc3ªg_t
 
	mëcdc
;

497 
ioc3ªg_t
 
	mebú
;

498 
ioc3ªg_t
 
	mëbr_h
;

499 
ioc3ªg_t
 
	mëbr_l
;

500 
ioc3ªg_t
 
	mëcú
;

501 
ioc3ªg_t
 
	mëpú
;

502 
ioc3ªg_t
 
	mem¨_h
;

503 
ioc3ªg_t
 
	mem¨_l
;

504 
ioc3ªg_t
 
	meh¨_h
;

505 
ioc3ªg_t
 
	meh¨_l
;

506 
ioc3ªg_t
 
	mmi¸
;

507 
ioc3ªg_t
 
	mmidr_r
;

508 
ioc3ªg_t
 
	mmidr_w
;

509 } 
	tioc3_îegs_t
;

512 vﬁ©ûê
	sioc3_£rüÃegs
 {

513 
ioc3ªg_t
 
	mss¸
;

514 
ioc3ªg_t
 
	m°pú
;

515 
ioc3ªg_t
 
	m°cú
;

516 
ioc3ªg_t
 
	m§pú
;

517 
ioc3ªg_t
 
	m§cú
;

518 
ioc3ªg_t
 
	m§å
;

519 
ioc3ªg_t
 
	mshadow
;

520 } 
	tioc3_§egs_t
;

523 vﬁ©ûê
	sioc3_u¨åegs
 {

525 
	mrbr
;

526 
	mthr
;

527 
	mdŒ
;

528 } 
	mu1
;

530 
	mõr
;

531 
	mdlm
;

532 } 
	mu2
;

534 
	miú
;

535 
	mf¸
;

536 } 
	mu3
;

537 
	miu_l¸
;

538 
	miu_m¸
;

539 
	miu_l§
;

540 
	miu_m§
;

541 
	miu_s¸
;

542 } 
	tioc3_uªgs_t
;

544 
	#iu_rbr
 
u1
.
rbr


	)

545 
	#iu_thr
 
u1
.
thr


	)

546 
	#iu_dŒ
 
u1
.
dŒ


	)

547 
	#iu_õr
 
u2
.
õr


	)

548 
	#iu_dlm
 
u2
.
dlm


	)

549 
	#iu_iú
 
u3
.
iú


	)

550 
	#iu_f¸
 
u3
.
f¸


	)

553 vﬁ©ûê
	sioc3_c⁄figªgs
 {

554 
ioc3ªg_t
 
	mpci_id
;

555 
ioc3ªg_t
 
	mpci_s¸
;

556 
ioc3ªg_t
 
	mpci_ªv
;

557 
ioc3ªg_t
 
	mpci_œt
;

558 
ioc3ªg_t
 
	mpci_addr
;

560 
	mfûl
[0x40 - 0x10 - 4];

562 
ioc3ªg_t
 
	mpci_îr_addr_l
;

563 
ioc3ªg_t
 
	mpci_îr_addr_h
;

564 } 
	tioc3_cfg_t
;

567 #i‡
IP22


568 vﬁ©ûê
	sioc3_si‹egs
 {

569 
	mfûl
[0x8];

571 
	mµ_fiÁ
;

572 
	mµ_cfgb
;

573 
	mµ_e¸
;

575 
	mfûl2
[0x10 - 0x8 - 3];

577 
	mµ_d©a
;

578 
	mµ_d§
;

579 
	mµ_d¸
;

581 
	mfûl3
[0x18 - 0x10 - 3];

583 
ioc3_u¨åegs
 
	mu¨è
;

584 
ioc3_u¨åegs
 
	mu¨tb
;

585 } 
	tioc3_si‹egs_t
;

587 vﬁ©ûê
	sioc3_si‹egs
 {

588 
	mfûl
[0x141];

590 
	mu¨tc
;

591 
	mkbdcg
;

593 
	mfûl0
[0x150 - 0x142 - 1];

595 
	mµ_d©a
;

596 
	mµ_d§
;

597 
	mµ_d¸
;

599 
	mfûl1
[0x158 - 0x152 - 1];

601 
	mµ_fiÁ
;

602 
	mµ_cfgb
;

603 
	mµ_e¸
;

605 
	mfûl2
[0x168 - 0x15a - 1];

607 
	mπˇd
;

608 
	mπcd©
;

610 
	mfûl3
[0x170 - 0x169 - 1];

612 
ioc3_u¨åegs
 
	mu¨tb
;

613 
ioc3_u¨åegs
 
	mu¨è
;

614 } 
	tioc3_si‹egs_t
;

618 vﬁ©ûê
	sioc3_memªgs
 {

619 
ioc3ªg_t
 
	mpci_id
;

620 
ioc3ªg_t
 
	mpci_s¸
;

621 
ioc3ªg_t
 
	mpci_ªv
;

622 
ioc3ªg_t
 
	mpci_œt
;

623 
ioc3ªg_t
 
	mpci_addr
;

624 
ioc3ªg_t
 
	mpci_îr_addr_l
;

625 
ioc3ªg_t
 
	mpci_îr_addr_h
;

627 
ioc3ªg_t
 
	msio_ú
;

628 #i‡
_STANDALONE
 || 
IOC3_PIO_MODE


629 
ioc3ªg_t
 
	msio_õs
;

630 
ioc3ªg_t
 
	msio_õc
;

635 
ioc3ªg_t
 
	msio_õs_ro
;

636 
ioc3ªg_t
 
	msio_õc_ro
;

638 
ioc3ªg_t
 
	msio_¸
;

639 
ioc3ªg_t
 
	möt_out
;

640 
ioc3ªg_t
 
	mm¸
;

641 
ioc3ªg_t
 
	mgp¸_s
;

642 
ioc3ªg_t
 
	mgp¸_c
;

643 
ioc3ªg_t
 
	mgpdr
;

644 
ioc3ªg_t
 
	mgµr_0
;

645 
ioc3ªg_t
 
	mgµr_1
;

646 
ioc3ªg_t
 
	mgµr_2
;

647 
ioc3ªg_t
 
	mgµr_3
;

648 
ioc3ªg_t
 
	mgµr_4
;

649 
ioc3ªg_t
 
	mgµr_5
;

650 
ioc3ªg_t
 
	mgµr_6
;

651 
ioc3ªg_t
 
	mgµr_7
;

652 
ioc3ªg_t
 
	mgµr_8
;

654 
	mfûl1
[0x80 - 0x60 - 4];

657 
ioc3ªg_t
 
	mµbr_h_a
;

658 
ioc3ªg_t
 
	mµbr_l_a
;

659 
ioc3ªg_t
 
	mµ¸_a
;

660 
ioc3ªg_t
 
	mµ¸
;

661 
ioc3ªg_t
 
	mµbr_h_b
;

662 
ioc3ªg_t
 
	mµbr_l_b
;

663 
ioc3ªg_t
 
	mµ¸_b
;

666 
ioc3ªg_t
 
	mkm_c§
;

667 
ioc3ªg_t
 
	mk_rd
;

668 
ioc3ªg_t
 
	mm_rd
;

669 
ioc3ªg_t
 
	mk_wd
;

670 
ioc3ªg_t
 
	mm_wd
;

673 
ioc3ªg_t
 
	msbbr_h
;

674 
ioc3ªg_t
 
	msbbr_l
;

676 
ioc3_£rüÃegs
 
	mp‹t_a
;

677 
ioc3_£rüÃegs
 
	mp‹t_b
;

680 
ioc3_îegs
 
	mîegs
;

682 
	mfûl2
[0x20000 - 0x00154];

685 
ioc3_si‹egs_t
 
	m§egs
;

686 } 
	tioc3_mem_t
;

688 
	#EMCR_DUPLEX
 0x00000001

	)

689 
	#EMCR_PROMISC
 0x00000002

	)

690 
	#EMCR_PADEN
 0x00000004

	)

691 
	#EMCR_RXOFF_MASK
 0x000001f8

	)

692 
	#EMCR_RXOFF_SHIFT
 3

	)

693 
	#EMCR_RAMPAR
 0x00000200

	)

694 
	#EMCR_BADPAR
 0x00000800

	)

695 
	#EMCR_BUFSIZ
 0x00001000

	)

696 
	#EMCR_TXDMAEN
 0x00002000

	)

697 
	#EMCR_TXEN
 0x00004000

	)

698 
	#EMCR_RXDMAEN
 0x00008000

	)

699 
	#EMCR_RXEN
 0x00010000

	)

700 
	#EMCR_LOOPBACK
 0x00020000

	)

701 
	#EMCR_ARB_DIAG
 0x001c0000

	)

702 
	#EMCR_ARB_DIAG_IDLE
 0x00200000

	)

703 
	#EMCR_RST
 0x80000000

	)

705 
	#EISR_RXTIMERINT
 0x00000001

	)

706 
	#EISR_RXTHRESHINT
 0x00000002

	)

707 
	#EISR_RXOFLO
 0x00000004

	)

708 
	#EISR_RXBUFOFLO
 0x00000008

	)

709 
	#EISR_RXMEMERR
 0x00000010

	)

710 
	#EISR_RXPARERR
 0x00000020

	)

711 
	#EISR_TXEMPTY
 0x00010000

	)

712 
	#EISR_TXRTRY
 0x00020000

	)

713 
	#EISR_TXEXDEF
 0x00040000

	)

714 
	#EISR_TXLCOL
 0x00080000

	)

715 
	#EISR_TXGIANT
 0x00100000

	)

716 
	#EISR_TXBUFUFLO
 0x00200000

	)

717 
	#EISR_TXEXPLICIT
 0x00400000

	)

718 
	#EISR_TXCOLLWRAP
 0x00800000

	)

719 
	#EISR_TXDEFERWRAP
 0x01000000

	)

720 
	#EISR_TXMEMERR
 0x02000000

	)

721 
	#EISR_TXPARERR
 0x04000000

	)

723 
	#ERCSR_THRESH_MASK
 0x000001f‡

	)

724 
	#ERCSR_RX_TMR
 0x40000000

	)

725 
	#ERCSR_DIAG_OFLO
 0x80000000

	)

727 
	#ERBR_ALIGNMENT
 4096

	)

728 
	#ERBR_L_RXRINGBASE_MASK
 0xfffff000

	)

730 
	#ERBAR_BARRIER_BIT
 0x0100

	)

731 
	#ERBAR_RXBARR_MASK
 0xffff0000

	)

732 
	#ERBAR_RXBARR_SHIFT
 16

	)

734 
	#ERCIR_RXCONSUME_MASK
 0x00000fff

	)

736 
	#ERPIR_RXPRODUCE_MASK
 0x00000fff

	)

737 
	#ERPIR_ARM
 0x80000000

	)

739 
	#ERTR_CNT_MASK
 0x000007ff

	)

741 
	#ETCSR_IPGT_MASK
 0x0000007f

	)

742 
	#ETCSR_IPGR1_MASK
 0x00007f00

	)

743 
	#ETCSR_IPGR1_SHIFT
 8

	)

744 
	#ETCSR_IPGR2_MASK
 0x007f0000

	)

745 
	#ETCSR_IPGR2_SHIFT
 16

	)

746 
	#ETCSR_NOTXCLK
 0x80000000

	)

748 
	#ETCDC_COLLCNT_MASK
 0x0000ffff

	)

749 
	#ETCDC_DEFERCNT_MASK
 0xffff0000

	)

750 
	#ETCDC_DEFERCNT_SHIFT
 16

	)

752 
	#ETBR_ALIGNMENT
 (64*1024)

	)

753 
	#ETBR_L_RINGSZ_MASK
 0x00000001

	)

754 
	#ETBR_L_RINGSZ128
 0

	)

755 
	#ETBR_L_RINGSZ512
 1

	)

756 
	#ETBR_L_TXRINGBASE_MASK
 0xffffc000

	)

758 
	#ETCIR_TXCONSUME_MASK
 0x0000ffff

	)

759 
	#ETCIR_IDLE
 0x80000000

	)

761 
	#ETPIR_TXPRODUCE_MASK
 0x0000ffff

	)

763 
	#EBIR_TXBUFPROD_MASK
 0x0000001f

	)

764 
	#EBIR_TXBUFCONS_MASK
 0x00001f00

	)

765 
	#EBIR_TXBUFCONS_SHIFT
 8

	)

766 
	#EBIR_RXBUFPROD_MASK
 0x007fc000

	)

767 
	#EBIR_RXBUFPROD_SHIFT
 14

	)

768 
	#EBIR_RXBUFCONS_MASK
 0xff800000

	)

769 
	#EBIR_RXBUFCONS_SHIFT
 23

	)

771 
	#MICR_REGADDR_MASK
 0x0000001f

	)

772 
	#MICR_PHYADDR_MASK
 0x000003e0

	)

773 
	#MICR_PHYADDR_SHIFT
 5

	)

774 
	#MICR_READTRIG
 0x00000400

	)

775 
	#MICR_BUSY
 0x00000800

	)

777 
	#MIDR_DATA_MASK
 0x0000ffff

	)

782 
	sioc3_îxbuf
 {

783 
__uöt32_t
 
	mw0
;

784 
__uöt32_t
 
	mîr
;

789 
	#ERXBUF_IPCKSUM_MASK
 0x0000ffff

	)

790 
	#ERXBUF_BYTECNT_MASK
 0x07ff0000

	)

791 
	#ERXBUF_BYTECNT_SHIFT
 16

	)

792 
	#ERXBUF_V
 0x80000000

	)

794 
	#ERXBUF_CRCERR
 0x00000001

	)

795 
	#ERXBUF_FRAMERR
 0x00000002

	)

796 
	#ERXBUF_CODERR
 0x00000004

	)

797 
	#ERXBUF_INVPREAMB
 0x00000008

	)

798 
	#ERXBUF_LOLEN
 0x00007000

	)

799 
	#ERXBUF_HILEN
 0x03ff0000

	)

800 
	#ERXBUF_MULTICAST
 0x04000000

	)

801 
	#ERXBUF_BROADCAST
 0x08000000

	)

802 
	#ERXBUF_LONGEVENT
 0x10000000

	)

803 
	#ERXBUF_BADPKT
 0x20000000

	)

804 
	#ERXBUF_GOODPKT
 0x40000000

	)

805 
	#ERXBUF_CARRIER
 0x80000000

	)

810 
	#ETXD_DATALEN
 104

	)

811 
	sioc3_ëxd
 {

812 
__uöt32_t
 
	mcmd
;

813 
__uöt32_t
 
	mbuf˙t
;

814 
__uöt64_t
 
	mp1
;

815 
__uöt64_t
 
	mp2
;

816 
uch¨_t
 
	md©a
[
ETXD_DATALEN
];

819 
	#ETXD_BYTECNT_MASK
 0x000007f‡

	)

820 
	#ETXD_INTWHENDONE
 0x00001000

	)

821 
	#ETXD_D0V
 0x00010000

	)

822 
	#ETXD_B1V
 0x00020000

	)

823 
	#ETXD_B2V
 0x00040000

	)

824 
	#ETXD_DOCHECKSUM
 0x00080000

	)

825 
	#ETXD_CHKOFF_MASK
 0x07f00000

	)

826 
	#ETXD_CHKOFF_SHIFT
 20

	)

828 
	#ETXD_D0CNT_MASK
 0x0000007f

	)

829 
	#ETXD_B1CNT_MASK
 0x0007ff00

	)

830 
	#ETXD_B1CNT_SHIFT
 8

	)

831 
	#ETXD_B2CNT_MASK
 0x7ff00000

	)

832 
	#ETXD_B2CNT_SHIFT
 20

	)

838 
	#IOC3_BYTEBUS_DEV0
 0x80000L

	)

839 
	#IOC3_BYTEBUS_DEV1
 0xA0000L

	)

840 
	#IOC3_BYTEBUS_DEV2
 0xC0000L

	)

841 
	#IOC3_BYTEBUS_DEV3
 0xE0000L

	)

843 #i‡
LANGUAGE_C


845 #ifde‡
_STANDALONE


846 
öô_ioc3
(
__psunsig√d_t
, __psunsigned_t);

847 #ñi‡
deföed
(
_KERNEL
)

849 
	eioc3_subdevs_e
 {

850 
	mioc3_subdev_ëhî
,

851 
	mioc3_subdev_gíîic
,

852 
	mioc3_subdev_nic
,

853 
	mioc3_subdev_kbms
,

854 
	mioc3_subdev_âya
,

855 
	mioc3_subdev_âyb
,

856 
	mioc3_subdev_e˝p
,

857 
	mioc3_subdev_π
,

858 
	mioc3_nsubdevs


859 } 
	tioc3_subdev_t
;

864 
	#IOC3_SDB_ETHER
 (1<<
ioc3_subdev_ëhî
)

	)

865 
	#IOC3_SDB_GENERIC
 (1<<
ioc3_subdev_gíîic
)

	)

866 
	#IOC3_SDB_NIC
 (1<<
ioc3_subdev_nic
)

	)

867 
	#IOC3_SDB_KBMS
 (1<<
ioc3_subdev_kbms
)

	)

868 
	#IOC3_SDB_TTYA
 (1<<
ioc3_subdev_âya
)

	)

869 
	#IOC3_SDB_TTYB
 (1<<
ioc3_subdev_âyb
)

	)

870 
	#IOC3_SDB_ECPP
 (1<<
ioc3_subdev_e˝p
)

	)

871 
	#IOC3_SDB_RT
 (1<<
ioc3_subdev_π
)

	)

873 
	#IOC3_ALL_SUBDEVS
 ((1<<
ioc3_nsubdevs
)-1)

	)

875 
	#IOC3_SDB_SERIAL
 (
IOC3_SDB_TTYA
|
IOC3_SDB_TTYB
)

	)

877 
	#IOC3_STD_SUBDEVS
 
IOC3_ALL_SUBDEVS


	)

879 
	#IOC3_INTA_SUBDEVS
 
IOC3_SDB_ETHER


	)

880 
	#IOC3_INTB_SUBDEVS
 (
IOC3_SDB_GENERIC
|
IOC3_SDB_KBMS
|
IOC3_SDB_SERIAL
|
IOC3_SDB_ECPP
|
IOC3_SDB_RT
)

	)

882 
ioc3_subdev_íabÀd
(
vîãx_hdl_t
, 
ioc3_subdev_t
);

883 
ioc3_subdev_íabÀs
(
vîãx_hdl_t
, 
ul⁄g_t
);

884 
ioc3_subdev_íabÀ
(
vîãx_hdl_t
, 
ioc3_subdev_t
);

885 
ioc3_subdev_dißbÀ
(
vîãx_hdl_t
, 
ioc3_subdev_t
);

890 
	#W_IES
 0

	)

891 
	#W_IEC
 1

	)

892 
ioc3_wrôe_úeg
(*, 
ioc3ªg_t
, );

894 
	#IOC3_WRITE_IES
(
ioc3
, 
vÆ
Ë
	`ioc3_wrôe_úeg
(ioc3, vÆ, 
W_IES
)

	)

895 
	#IOC3_WRITE_IEC
(
ioc3
, 
vÆ
Ë
	`ioc3_wrôe_úeg
(ioc3, vÆ, 
W_IEC
)

	)

898 
	tioc3_öå_func_f
 (
	töå_¨g_t
, 
	tioc3ªg_t
);

901 
	tioc3_öå_c⁄√˘_f
 (
	tvîãx_hdl_t
 
	tc⁄n_vhdl
,

902 
	tioc3ªg_t
,

903 
	tioc3_öå_func_f
 *,

904 
	töå_¨g_t
 
	töfo
,

905 
	tvîãx_hdl_t
 
	tow√r_vhdl
,

906 
	tvîãx_hdl_t
 
	töå_dev_vhdl
,

907 (*)(
	töå_¨g_t
));

910 
	tioc3_öå_disc⁄√˘_f
 (
	tvîãx_hdl_t
 
	tc⁄n_vhdl
,

911 
	tioc3ªg_t
,

912 
	tioc3_öå_func_f
 *,

913 
	töå_¨g_t
 
	töfo
,

914 
	tvîãx_hdl_t
 
	tow√r_vhdl
);

916 
ioc3_öå_disc⁄√˘_f
 
ioc3_öå_disc⁄√˘
;

917 
ioc3_öå_c⁄√˘_f
 
ioc3_öå_c⁄√˘
;

919 
	`ioc3_is_c⁄sﬁe
(
vîãx_hdl_t
 
c⁄n_vhdl
);

921 
	`ioc3_mÃe£t
(
ioc3_cfg_t
 *, 
ioc3_mem_t
 *);

923 
öå_func_f
 
ioc3_öå
;

925 
ioc3_mem_t
 *
	`ioc3_mem_±r
(*
ioc3_Á°öfo
);

927 
ioc3_öå_func_f
 *
	tioc3_öå_func_t
;

	@/usr/include/sys/RACER/heart.h

1 #i‚de‡
__RACER_HEART_H__


2 
	#__RACER_HEART_H__


	)

31 
	#HEART_CHIP
 1

	)

37 #i‡
LANGUAGE_C


38 
	~<sys/iobus.h
>

39 
	~<sys/xèlk/xèlk.h
>

41 
	~<sys/xèlk/xwidgë.h
>

43 #i‡
LANGUAGE_C


44 
__uöt64_t
 
	thóπªg_t
;

45 
	#HEARTCONST
 (
hóπªg_t
)

	)

47 
	#HEARTCONST


	)

51 
	#HEART_WIDGET_PART_NUM
 0xc001

	)

54 
	#HEART_WIDGET_MFGR
 0x036

	)

57 
	#HEART_REV_A
 0x1

	)

58 
	#HEART_REV_B
 0x2

	)

59 
	#HEART_REV_C
 0x3

	)

60 
	#HEART_REV_D
 0x4

	)

63 
	#HEART_PIU_BASE
 0x0ff00000

	)

64 
	#HEART_PIU_K1PTR
 ((
hóπ_piu_t
 *)
	`PHYS_TO_COMPATK1
(
HEART_PIU_BASE
))

	)

66 
	#HEART_MIN_PORT
 0x0

	)

67 
	#HEART_MAX_PORT
 0xF

	)

72 
	#MAIN_IO_SPACE
 0x10000000

	)

73 
	#MAIN_IO_SIZE
 0x01000000L

	)

74 
	#MAIN_WIDGET
(
x
Ë(
MAIN_IO_SPACE
+(x)*
MAIN_IO_SIZE
)

	)

75 
	#K1_MAIN_WIDGET
(
x
Ë
	`PHYS_TO_K1
(
	`MAIN_WIDGET
(x))

	)

76 
	#IS_MAIN_IO_SPACE
(
x
Ë((xË>
MAIN_IO_SPACE
 && \

77 (
x
Ë< 
	`MAIN_WIDGET
(
HEART_MAX_PORT
+1))

	)

78 
	#MAIN_IO_TO_WIDGET_ID
(
x
Ë(((x)-
MAIN_IO_SPACE
)>>24)

	)

83 
	#LARGE_IO_SPACE
 0x800000000

	)

84 
	#LARGE_IO_SIZE
 0x080000000L

	)

85 
	#LARGE_WIDGET
(
x
Ë(
LARGE_IO_SPACE
+(x)*
LARGE_IO_SIZE
)

	)

86 
	#K1_LARGE_WIDGET
(
x
Ë
	`PHYS_TO_K1
(
	`LARGE_WIDGET
(x))

	)

87 
	#IS_LARGE_IO_SPACE
(
x
Ë((xË>
LARGE_IO_SPACE
 && \

88 (
x
Ë< 
	`LARGE_WIDGET
(
HEART_MAX_PORT
+1))

	)

89 
	#LARGE_IO_TO_WIDGET_ID
(
x
Ë(((x)-
LARGE_IO_SPACE
)>>31)

	)

94 
	#HUGE_IO_SPACE
 0x1000000000

	)

95 
	#HUGE_IO_SIZE
 0x1000000000

	)

96 
	#HUGE_WIDGET
(
x
Ë(
HUGE_IO_SPACE
+((x)-1)*
HUGE_IO_SIZE
)

	)

97 
	#K1_HUGE_WIDGET
(
x
Ë
	`PHYS_TO_K1
(
	`HUGE_WIDGET
(x))

	)

98 
	#IS_HUGE_IO_SPACE
(
x
Ë((xË>
HUGE_IO_SPACE
 && \

99 (
x
Ë< 
	`HUGE_WIDGET
(
HEART_MAX_PORT
+1))

	)

100 
	#HUGE_IO_TO_WIDGET_ID
(
x
Ë((((x)-
HUGE_IO_SPACE
)>>36)+1)

	)

102 
	#HEARTADDR
(
x
Ë((xË& ~0x7)

	)

105 
	#HEART_IOU_WID_ID
 
	`HEARTADDR
(
WIDGET_ID
)

	)

106 
	#HEART_IOU_WID_STAT
 
	`HEARTADDR
(
WIDGET_STATUS
)

	)

107 
	#HEART_IOU_WID_EUPPER
 
	`HEARTADDR
(
WIDGET_ERR_UPPER_ADDR
)

	)

108 
	#HEART_IOU_WID_ELOWER
 
	`HEARTADDR
(
WIDGET_ERR_LOWER_ADDR
)

	)

109 
	#HEART_IOU_WID_CTL
 
	`HEARTADDR
(
WIDGET_CONTROL
)

	)

110 
	#HEART_IOU_REQ_TO
 
	`HEARTADDR
(
WIDGET_REQ_TIMEOUT
)

	)

111 
	#HEART_IOU_ERR_CMD
 
	`HEARTADDR
(
WIDGET_ERR_CMD_WORD
)

	)

112 
	#HEART_IOU_LLP
 
	`HEARTADDR
(
WIDGET_LLP_CFG
)

	)

113 
	#HEART_IOU_TFLUSH
 
	`HEARTADDR
(
WIDGET_TFLUSH
)

	)

114 
	#HEART_IOU_RSVD_058
 
	`HEARTADDR
(0x58)

	)

115 
	#HEART_IOU_ETYPE
 
	`HEARTADDR
(0x60)

	)

116 
	#HEART_IOU_EMASK
 
	`HEARTADDR
(0x68)

	)

117 
	#HEART_IOU_PIO_EUPPER
 
	`HEARTADDR
(0x70)

	)

118 
	#HEART_IOU_PIO_ELOWER
 
	`HEARTADDR
(0x78)

	)

119 
	#HEART_IOU_ISR
 
	`HEARTADDR
(0x80)

	)

120 
	#HEART_IOU_RSVD_088
 
	`HEARTADDR
(0x88)

	)

121 
	#HEART_IOU_PIO_RTO
 
	`HEARTADDR
(0x90)

	)

124 
	#HEART_XTALK_ISR
 (
HEARTCONST
 0x80)

	)

127 
	#HEART_WID_ID
 (
HEART_BASE
+(
WIDGET_ID
&~0x7))

	)

128 
	#HEART_WID_STAT
 (
HEART_BASE
+(
WIDGET_STATUS
&~0x7))

	)

129 
	#HEART_WID_ERR_UPPER
 (
HEART_BASE
+(
WIDGET_ERR_UPPER_ADDR
&~0x7))

	)

130 
	#HEART_WID_ERR_LOWER
 (
HEART_BASE
+(
WIDGET_ERR_LOWER_ADDR
&~0x7))

	)

131 
	#HEART_WID_CONTROL
 (
HEART_BASE
+(
WIDGET_CONTROL
&~0x7))

	)

132 
	#HEART_WID_REQ_TIMEOUT
 (
HEART_BASE
+(
WIDGET_REQ_TIMEOUT
&~0x7))

	)

133 
	#HEART_WID_ERR_CMDWORD
 (
HEART_BASE
+(
WIDGET_ERR_CMD_WORD
&~0x7))

	)

134 
	#HEART_WID_LLP
 (
HEART_BASE
+(
WIDGET_LLP_CFG
&~0x7))

	)

135 
	#HEART_WID_TARG_FLUSH
 (
HEART_BASE
+(
WIDGET_TFLUSH
&~0x7))

	)

136 
	#HEART_WID_ERR_TYPE
 (
HEART_BASE
+0x60)

	)

137 
	#HEART_WID_ERR_MASK
 (
HEART_BASE
+0x68)

	)

138 
	#HEART_WID_PIO_ERR_UPPER
 (
HEART_BASE
+0x70)

	)

139 
	#HEART_WID_PIO_ERR_LOWER
 (
HEART_BASE
+0x78)

	)

140 
	#HEART_WID_ISR
 (
HEART_BASE
+
HEART_XTALK_ISR
)

	)

141 
	#HEART_WID_PIO_RTO_ADDR
 (
HEART_BASE
+0x90)

	)

145 
	#HEART_PIU_MODE
 (0x00000)

	)

146 
	#HEART_PIU_SDRAM_MODE
 (0x00008)

	)

147 
	#HEART_PIU_MEM_REF
 (0x00010)

	)

148 
	#HEART_PIU_MEM_REQ_ARB
 (0x00018)

	)

149 
	#HEART_PIU_MEMCFG0
 (0x00020)

	)

150 
	#HEART_PIU_MEMCFG
(
x
Ë(
HEART_PIU_MEMCFG0
 + (xË* 8)

	)

151 
	#HEART_PIU_FC_MODE
 (0x00040)

	)

152 
	#HEART_PIU_FC_TIMER_LIM
 (0x00048)

	)

153 
	#HEART_PIU_FC0_ADDR
 (0x00050)

	)

154 
	#HEART_PIU_FC1_ADDR
 (0x00058)

	)

155 
	#HEART_PIU_FC0_CR_CNT
 (0x00060)

	)

156 
	#HEART_PIU_FC1_CR_CNT
 (0x00068)

	)

157 
	#HEART_PIU_FC0_TIMER
 (0x00070)

	)

158 
	#HEART_PIU_FC1_TIMER
 (0x00078)

	)

159 
	#HEART_PIU_STATUS
 (0x00080)

	)

160 
	#HEART_PIU_BERR_ADDR
 (0x00088)

	)

161 
	#HEART_PIU_BERR_MISC
 (0x00090)

	)

162 
	#HEART_PIU_MERR_ADDR
 (0x00098)

	)

163 
	#HEART_PIU_MERR_DATA
 (0x000a0)

	)

164 
	#HEART_PIU_EACC_REG
 (0x000a8)

	)

165 
	#HEART_PIU_MLAN_CLK_DIV
 (0x000b0)

	)

166 
	#HEART_PIU_MLAN_CTL
 (0x000b8)

	)

168 
	#HEART_PIU_IMR0
 (0x10000)

	)

169 
	#HEART_PIU_IMR
(
x
Ë(
HEART_PIU_IMR0
 + (xË* 8)

	)

170 
	#HEART_PIU_SET_ISR
 (0x10020)

	)

171 
	#HEART_PIU_CLR_ISR
 (0x10028)

	)

172 
	#HEART_PIU_ISR
 (0x10030)

	)

173 
	#HEART_PIU_IMSR
 (0x10038)

	)

174 
	#HEART_PIU_CAUSE
 (0x10040)

	)

176 
	#HEART_PIU_COUNT
 (0x20000)

	)

177 
	#HEART_PIU_COMPARE
 (0x30000)

	)

178 
	#HEART_PIU_TRIGGER
 (0x40000)

	)

179 
	#HEART_PIU_PID
 (0x50000)

	)

180 
	#HEART_PIU_SYNC
 (0x60000)

	)

183 
	#HEART_MODE
 
HEART_PIU_BASE


	)

184 
	#HEART_SDRAM_MODE
 (
HEART_PIU_BASE
+0x08)

	)

185 
	#HEART_MEM_REF
 (
HEART_PIU_BASE
+0x10)

	)

186 
	#HEART_MEM_REQ_ARB
 (
HEART_PIU_BASE
+0x18)

	)

187 
	#HEART_MEMCFG0
 (
HEART_PIU_BASE
+0x20)

	)

188 
	#HEART_MEMCFG
(
x
Ë(
HEART_MEMCFG0
+(x)*0x8)

	)

189 
	#HEART_FC_MODE
 (
HEART_PIU_BASE
+0x40)

	)

190 
	#HEART_FC_TIMER_LIMIT
 (
HEART_PIU_BASE
+0x48)

	)

191 
	#HEART_FC0_ADDR
 (
HEART_PIU_BASE
+0x50)

	)

192 
	#HEART_FC_ADDR
(
x
Ë(
HEART_FC0_ADDR
+(x)*0x8)

	)

193 
	#HEART_FC0_CR_CNT
 (
HEART_PIU_BASE
+0x60)

	)

194 
	#HEART_FC_CR_CNT
(
x
Ë(
HEART_FC0_CR_CNT
+(x)*0x8)

	)

195 
	#HEART_FC0_TIMER
 (
HEART_PIU_BASE
+0x70)

	)

196 
	#HEART_FC_TIMER
(
x
Ë(
HEART_FC0_TIMER
+(x)*0x8)

	)

197 
	#HEART_STATUS
 (
HEART_PIU_BASE
+0x80)

	)

198 
	#HEART_BERR_ADDR
 (
HEART_PIU_BASE
+0x88)

	)

199 
	#HEART_BERR_MISC
 (
HEART_PIU_BASE
+0x90)

	)

200 
	#HEART_MEMERR_ADDR
 (
HEART_PIU_BASE
+0x98)

	)

201 
	#HEART_MEMERR_DATA
 (
HEART_PIU_BASE
+0xa0)

	)

202 
	#HEART_PIUR_ACC_ERR
 (
HEART_PIU_BASE
+0xa8)

	)

203 
	#HEART_MLAN_CLK_DIV
 (
HEART_PIU_BASE
+0xb0)

	)

204 
	#HEART_MLAN_CTL
 (
HEART_PIU_BASE
+0xb8)

	)

207 
	#HEART_PIU_UNDEF
 (
HEART_PIU_BASE
+0x1000)

	)

210 
	#HW_ID_REV_NUM_SHFT
 28

	)

211 
	#HW_ID_REV_NUM_MSK
 (
HEARTCONST
 0x‡<< 
HW_ID_REV_NUM_SHFT
)

	)

212 
	#HW_ID_PART_NUM_SHFT
 12

	)

213 
	#HW_ID_PART_NUM_MSK
 (
HEARTCONST
 0xfff‡<< 
HW_ID_PART_NUM_SHFT
)

	)

214 
	#HW_ID_MFG_NUM_SHFT
 1

	)

215 
	#HW_ID_MFG_NUM_MSK
 (
HEARTCONST
 0x7f‡<< 
HW_ID_MFG_NUM_SHFT
)

	)

218 
	#HM_PROC_DISABLE_SHFT
 60

	)

219 
	#HM_PROC_DISABLE_MSK
 (
HEARTCONST
 0x‡<< 
HM_PROC_DISABLE_SHFT
)

	)

220 
	#HM_PROC_DISABLE
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 
HM_PROC_DISABLE_SHFT
)

	)

221 
	#HM_MAX_PSR
 (
HEARTCONST
 0x7 << 57)

	)

222 
	#HM_MAX_IOSR
 (
HEARTCONST
 0x7 << 54)

	)

223 
	#HM_MAX_PEND_IOSR
 (
HEARTCONST
 0x7 << 51)

	)

225 
	#HM_TRIG_SRC_SEL_MSK
 (
HEARTCONST
 0x7 << 48)

	)

226 
	#HM_TRIG_HEART_EXC
 (
HEARTCONST
 0x0 << 48Ë

	)

227 
	#HM_TRIG_REG_BIT
 (
HEARTCONST
 0x1 << 48)

	)

228 
	#HM_TRIG_SYSCLK
 (
HEARTCONST
 0x2 << 48)

	)

229 
	#HM_TRIG_MEMCLK_2X
 (
HEARTCONST
 0x3 << 48)

	)

230 
	#HM_TRIG_MEMCLK
 (
HEARTCONST
 0x4 << 48)

	)

231 
	#HM_TRIG_IOCLK
 (
HEARTCONST
 0x5 << 48)

	)

233 
	#HM_PIU_TEST_MODE
 (
HEARTCONST
 0x‡<< 40)

	)

235 
	#HM_GP_FLAG_MSK
 (
HEARTCONST
 0x‡<< 36)

	)

236 
	#HM_GP_FLAG
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 36)

	)

238 
	#HM_MAX_PROC_HYST
 (
HEARTCONST
 0x‡<< 32)

	)

239 
	#HM_LLP_WRST_AFTER_RST
 (
HEARTCONST
 0x1 << 28)

	)

240 
	#HM_LLP_LINK_RST
 (
HEARTCONST
 0x1 << 27)

	)

241 
	#HM_LLP_WARM_RST
 (
HEARTCONST
 0x1 << 26)

	)

242 
	#HM_COR_ECC_LCK
 (
HEARTCONST
 0x1 << 25)

	)

243 
	#HM_REDUCED_PWR
 (
HEARTCONST
 0x1 << 24)

	)

244 
	#HM_COLD_RST
 (
HEARTCONST
 0x1 << 23)

	)

245 
	#HM_SW_RST
 (
HEARTCONST
 0x1 << 22)

	)

246 
	#HM_MEM_FORCE_WR
 (
HEARTCONST
 0x1 << 21)

	)

247 
	#HM_DB_ERR_GEN
 (
HEARTCONST
 0x1 << 20)

	)

248 
	#HM_SB_ERR_GEN
 (
HEARTCONST
 0x1 << 19)

	)

249 
	#HM_CACHED_PIO_EN
 (
HEARTCONST
 0x1 << 18)

	)

250 
	#HM_CACHED_PROM_EN
 (
HEARTCONST
 0x1 << 17)

	)

251 
	#HM_PE_SYS_COR_ERE
 (
HEARTCONST
 0x1 << 16)

	)

252 
	#HM_GLOBAL_ECC_EN
 (
HEARTCONST
 0x1 << 15)

	)

253 
	#HM_IO_COH_EN
 (
HEARTCONST
 0x1 << 14)

	)

254 
	#HM_INT_EN
 (
HEARTCONST
 0x1 << 13)

	)

255 
	#HM_DATA_CHK_EN
 (
HEARTCONST
 0x1 << 12)

	)

256 
	#HM_REF_EN
 (
HEARTCONST
 0x1 << 11)

	)

257 
	#HM_BAD_SYSWR_ERE
 (
HEARTCONST
 0x1 << 10)

	)

258 
	#HM_BAD_SYSRD_ERE
 (
HEARTCONST
 0x1 << 9)

	)

259 
	#HM_SYSSTATE_ERE
 (
HEARTCONST
 0x1 << 8)

	)

260 
	#HM_SYSCMD_ERE
 (
HEARTCONST
 0x1 << 7)

	)

261 
	#HM_NCOR_SYS_ERE
 (
HEARTCONST
 0x1 << 6)

	)

262 
	#HM_COR_SYS_ERE
 (
HEARTCONST
 0x1 << 5)

	)

263 
	#HM_DATA_ELMNT_ERE
 (
HEARTCONST
 0x1 << 4)

	)

264 
	#HM_MEM_ADDR_PROC_ERE
 (
HEARTCONST
 0x1 << 3)

	)

265 
	#HM_MEM_ADDR_IO_ERE
 (
HEARTCONST
 0x1 << 2)

	)

266 
	#HM_NCOR_MEM_ERE
 (
HEARTCONST
 0x1 << 1)

	)

267 
	#HM_COR_MEM_ERE
 (
HEARTCONST
 0x1 << 0)

	)

269 
	#HM_MEM_ERE
 (
HM_MEM_ADDR_PROC_ERE
 | \

270 
HM_MEM_ADDR_IO_ERE
 | \

271 
HM_NCOR_MEM_ERE
 | \

272 
HM_COR_MEM_ERE
)

	)

275 
	#HEART_MEMREF_REFS
(
x
Ë(
	`HEARTCONST
 (0x‡& (x)Ë<< 16)

	)

276 
	#HEART_MEMREF_PERIOD
(
x
Ë(
	`HEARTCONST
 (0xfff‡& (x)))

	)

287 
	#HEART_MEMREF_REFS_VAL
 
	`HEART_MEMREF_REFS
(8)

	)

288 
	#HEART_MEMREF_PERIOD_VAL
 
	`HEART_MEMREF_PERIOD
(0x4000)

	)

289 
	#HEART_MEMREF_VAL
 (
HEART_MEMREF_REFS_VAL
 | 
HEART_MEMREF_PERIOD_VAL
)

	)

292 
	#HEART_MEMARB_IODIS
 (1<<20)

	)

293 
	#HEART_MEMARB_MAXPMWRQS
 (15<<16)

	)

294 
	#HEART_MEMARB_MAXPMRRQS
 (15<<12)

	)

295 
	#HEART_MEMARB_MAXPMRQS
 (15<<8)

	)

296 
	#HEART_MEMARB_MAXRRRQS
 (15<<4)

	)

297 
	#HEART_MEMARB_MAXGBRRQS
 (15)

	)

301 
	#HEART_MEMCFG_VLD
 0x80000000

	)

303 
	#HEART_MEMCFG_RAM_MSK
 0x003f0000

	)

304 
	#HEART_MEMCFG_DENSITY
 0x01c00000

	)

305 
	#HEART_MEMCFG_RAM_SHFT
 16

	)

306 
	#HEART_MEMCFG_ADDR_MSK
 0x000001f‡

	)

307 
	#HEART_MEMCFG_UNIT_SHFT
 25

	)

311 
	#HEART_STAT_HSTL_SDRV
 (
HEARTCONST
 0x1 << 14)

	)

312 
	#HEART_STAT_FC_CR_OUT
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 12)

	)

313 
	#HEART_STAT_DIR_CNNCT
 (
HEARTCONST
 0x1 << 11)

	)

314 
	#HEART_STAT_TRITON
 (
HEARTCONST
 0x1 << 10)

	)

315 
	#HEART_STAT_R4K
 (
HEARTCONST
 0x1 << 9)

	)

316 
	#HEART_STAT_BIG_ENDIAN
 (
HEARTCONST
 0x1 << 8)

	)

317 
	#HEART_STAT_PROC_ACTIVE_SHFT
 4

	)

318 
	#HEART_STAT_PROC_ACTIVE_MSK
 (
HEARTCONST
 0x‡<< 
HEART_STAT_PROC_ACTIVE_SHFT
)

	)

319 
	#HEART_STAT_PROC_ACTIVE
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 
HEART_STAT_PROC_ACTIVE_SHFT
)

	)

320 
	#HEART_STAT_WIDGET_ID
 0xf

	)

323 
	#HEART_IMR0
 (
HEART_PIU_BASE
+0x10000)

	)

324 
	#HEART_IMR
(
x
Ë(
HEART_IMR0
+(x)*0x8)

	)

325 
	#HEART_SET_ISR
 (
HEART_PIU_BASE
+0x10020)

	)

326 
	#HEART_CLR_ISR
 (
HEART_PIU_BASE
+0x10028)

	)

327 
	#HEART_ISR
 (
HEART_PIU_BASE
+0x10030)

	)

328 
	#HEART_IMSR
 (
HEART_PIU_BASE
+0x10038)

	)

329 
	#HEART_CAUSE
 (
HEART_PIU_BASE
+0x10040)

	)

332 
	#HEART_ISR_HEART_EXC
 (
HEARTCONST
 0x1 << 63Ë

	)

335 
	#HEART_COUNT
 (
HEART_PIU_BASE
+0x20000)

	)

336 
	#HEART_COMPARE
 (
HEART_PIU_BASE
+0x30000)

	)

337 
	#HEART_TRIGGER
 (
HEART_PIU_BASE
+0x40000)

	)

338 
	#HEART_PRID
 (
HEART_PIU_BASE
+0x50000)

	)

339 
	#HEART_SYNC
 (
HEART_PIU_BASE
+0x60000)

	)

343 
	#HEART_VEC_TO_IBIT
(
vec
Ë(
HEARTCONST
 1 << (vec))

	)

344 
	#HEART_INT_VECTORS
 64

	)

347 
	#HEART_INT_LEVEL4
 0xfff8000000000000

	)

348 
	#HEART_INT_LEVEL3
 0x0004000000000000

	)

349 
	#HEART_INT_LEVEL2
 0x0003ffff00000000

	)

350 
	#HEART_INT_LEVEL1
 0x00000000ffff0000

	)

351 
	#HEART_INT_LEVEL0
 0x000000000000fff‡

	)

352 
	#HEART_INT_L4SHIFT
 51

	)

353 
	#HEART_INT_L4MASK
 0x1fff

	)

354 
	#HEART_INT_L3SHIFT
 50

	)

355 
	#HEART_INT_L3MASK
 0x1

	)

356 
	#HEART_INT_L2SHIFT
 32

	)

357 
	#HEART_INT_L2MASK
 0x3ffff

	)

358 
	#HEART_INT_L1SHIFT
 16

	)

359 
	#HEART_INT_L1MASK
 0xffff

	)

360 
	#HEART_INT_L0SHIFT
 0

	)

361 
	#HEART_INT_L0MASK
 0xffff

	)

364 
	#HEART_INT_EXC
 (
HEARTCONST
 0x1000Ë

	)

365 
	#HEART_INT_PBERR
 (
HEARTCONST
 0x0f00Ë

	)

366 
	#HEART_INT_CPUPBERRSHFT
 8

	)

367 
	#HEART_INT_PBERR_0
 (
HEARTCONST
 0x0100)

	)

368 
	#HEART_INT_CPUBERR
 (
HEART_INT_PBERR_0
<<
	`˝uid
())

	)

369 
	#HEART_INT_L4IP
 (
HEARTCONST
 0x00ffË

	)

371 
	#HEART_INT_L3IP
 (
HEARTCONST
 0x1Ë

	)

372 
	#HEART_INT_TIMER
 (
HEART_INT_L3IP
<<
HEART_INT_L3SHIFT
)

	)

373 
	#HEART_INT_IPI
 0x3c000

	)

374 
	#HEART_INT_IPISHFT
 14

	)

375 
	#HEART_INT_DEBUG
 0x3c00

	)

376 
	#HEART_INT_DEBUGSHFT
 10

	)

377 
	#HEART_INT_L2IP
 0x3f‡

	)

378 
	#HEART_INT_L1IP
 
HEART_INT_L1MASK


	)

379 
	#HEART_INT_L0IP
 0xfff8

	)

380 
	#HEART_INT_HW1
 0x0004

	)

381 
	#HEART_INT_HW0
 0x0002

	)

382 
	#HEART_INT_IRQ
 0x0001

	)

385 
	#HEART_IMR_BERR_
(
˝u
) \

386 (1L << (
HEART_INT_L4SHIFT
+
HEART_INT_CPUPBERRSHFT
+(
˝u
)))

	)

387 
	#HEART_IMR_IPI_
(
˝u
) \

388 (1L << (
HEART_INT_L2SHIFT
+
HEART_INT_IPISHFT
+(
˝u
)))

	)

389 
	#HEART_IMR_DEBUG_
(
˝u
) \

390 (1L << (
HEART_INT_L2SHIFT
+
HEART_INT_DEBUGSHFT
+(
˝u
)))

	)

392 
	#HEART_IMR_BERR
 
	`HEART_IMR_BERR_
(
	`˝uid
())

	)

393 
	#HEART_ISR_BERR
 
HEART_IMR_BERR


	)

394 
	#HEART_IMR_IPI
 
	`HEART_IMR_IPI_
(
	`˝uid
())

	)

395 
	#HEART_ISR_IPI
 
HEART_IMR_IPI


	)

396 
	#HEART_IMR_DEBUG
 
	`HEART_IMR_DEBUG_
(
	`˝uid
())

	)

397 
	#HEART_ISR_DEBUG
 
HEART_IMR_DEBUG


	)

437 
	#WIDGET_ERRVEC_BASE
 51

	)

438 
	#WIDGET_ERRVEC_COUNT
 8

	)

439 
	#WIDGET_ERRVEC
(
p
Ë(
WIDGET_ERRVEC_BASE
 + ((’)-1Ë& (
WIDGET_ERRVEC_COUNT
-1)))

	)

440 
	#WIDGET_ERRVEC_MASK
 (((1uŒ<<
WIDGET_ERRVEC_COUNT
)-1uŒË<< 
WIDGET_ERRVEC_BASE
)

	)

441 
	#WIDGET_LCL2VEC_BASE
 32

	)

442 
	#WIDGET_LCL2VEC_COUNT
 8

	)

443 
	#WIDGET_LCL1VEC_BASE
 16

	)

444 
	#WIDGET_LCL1VEC_COUNT
 16

	)

445 
	#WIDGET_LCL0VEC_BASE
 0

	)

446 
	#WIDGET_LCL0VEC_COUNT
 16

	)

448 
	#SR_IBIT_PROF
 (
SR_IBIT8
|
SR_IBIT6
Ë

	)

449 
	#SR_IBIT_BERR
 
SR_IBIT7


	)

451 
	#CAUSE_BERR_INTR
 
SR_IBIT_BERR


	)

453 
	#SR_HI_MASK
 (
SR_IBIT_PROF
|
SR_IBIT_BERR
)

	)

454 
	#SR_SCHED_MASK
 
SR_HI_MASK


	)

455 
	#SR_PROF_MASK
 
SR_IBIT_BERR


	)

456 
	#SR_ALL_MASK
 
SR_IMASK8


	)

457 
	#SR_BERR_MASK
 
SR_ALL_MASK


	)

460 
	#HBA_ADDR
 0x000000fffffffff‡

	)

463 
	#HBM_BAD_RD_WRBACK
 (
HEARTCONST
 0x1 << 23)

	)

464 
	#HBM_PROC_ID_SHFT
 21

	)

465 
	#HBM_PROC_ID
 (
HEARTCONST
 0x3 << 
HBM_PROC_ID_SHFT
)

	)

466 
	#HBM_SYNDROME_SHFT
 13

	)

467 
	#HBM_SYNDROME
 (
HEARTCONST
 0xf‡<< 
HBM_SYNDROME_SHFT
)

	)

468 
	#HBM_SYSCMD_PAR
 (
HEARTCONST
 0x1 << 12Ë

	)

469 
	#HBM_SYSCMD
 (
HEARTCONST
 0xff‡<< 0Ë

	)

470 
	#HBM_SYSCMD_WR_CMD
 (
HEARTCONST
 0x1 << 7)

	)

473 
	#HME_REQ_SRC_SHFT
 43

	)

474 
	#HME_REQ_SRC_MSK
 (
HEARTCONST
 0x7 << 
HME_REQ_SRC_SHFT
)

	)

475 
	#HME_REQ_SRC_IO
 (
HEARTCONST
 0x4 << 
HME_REQ_SRC_SHFT
)

	)

476 
	#HME_ERR_TYPE_ADDR
 (
HEARTCONST
 0x1 << 42Ë

	)

477 
	#HME_SYNDROME_SHFT
 34

	)

478 
	#HME_SYNDROME
 (
HEARTCONST
 0xf‡<< 
HME_SYNDROME_SHFT
)

	)

479 
	#HME_PHYS_ADDR
 0x00000003ffffffffL

	)

482 
	#HPE_ACC_TYPE_WR
 (
HEARTCONST
 0x1 << 22Ë

	)

483 
	#HPE_ACC_PROC_ID_SHFT
 20

	)

484 
	#HPE_ACC_PROC_ID
 (
HEARTCONST
 0x3 << 
HPE_ACC_PROC_ID_SHFT
)

	)

485 
	#HPE_ACC_ERR_ADDR
 (
HEARTCONST
 0xffff8 << 0Ë

	)

491 
	#HC_PE_SYS_COR_ERR_MSK
 (
HEARTCONST
 0x‡<< 60)

	)

492 
	#HC_PE_SYS_COR_ERR
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 60)

	)

493 
	#HC_PIOWDB_OFLOW
 (
HEARTCONST
 0x1 << 44)

	)

494 
	#HC_PIORWRB_OFLOW
 (
HEARTCONST
 0x1 << 43)

	)

495 
	#HC_PIUR_ACC_ERR
 (
HEARTCONST
 0x1 << 42)

	)

496 
	#HC_BAD_SYSWR_ERR
 (
HEARTCONST
 0x1 << 41)

	)

497 
	#HC_BAD_SYSRD_ERR
 (
HEARTCONST
 0x1 << 40)

	)

498 
	#HC_SYSSTATE_ERR_MSK
 (
HEARTCONST
 0x‡<< 36)

	)

499 
	#HC_SYSSTATE_ERR
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 36)

	)

500 
	#HC_SYSCMD_ERR_MSK
 (
HEARTCONST
 0x‡<< 32)

	)

501 
	#HC_SYSCMD_ERR
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 32)

	)

502 
	#HC_NCOR_SYSAD_ERR_MSK
 (
HEARTCONST
 0x‡<< 28)

	)

503 
	#HC_NCOR_SYSAD_ERR
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 28)

	)

504 
	#HC_COR_SYSAD_ERR_MSK
 (
HEARTCONST
 0x‡<< 24)

	)

505 
	#HC_COR_SYSAD_ERR
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 24)

	)

506 
	#HC_DATA_ELMNT_ERR_MSK
 (
HEARTCONST
 0x‡<< 20)

	)

507 
	#HC_DATA_ELMNT_ERR
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 20)

	)

508 
	#HC_WIDGET_ERR
 (
HEARTCONST
 0x1 << 16)

	)

509 
	#HC_MEM_ADDR_ERR_PROC_MSK
 (
HEARTCONST
 0x‡<< 4)

	)

510 
	#HC_MEM_ADDR_ERR_PROC
(
x
Ë(
HEARTCONST
 0x1 << (xË+ 4)

	)

511 
	#HC_MEM_ADDR_ERR_IO
 (
HEARTCONST
 0x1 << 2)

	)

512 
	#HC_NCOR_MEM_ERR
 (
HEARTCONST
 0x1 << 1)

	)

513 
	#HC_COR_MEM_ERR
 (
HEARTCONST
 0x1 << 0)

	)

516 
	#HC_PBUS_ERR
(
x
Ë(
	`HC_SYSSTATE_ERR
(x) | \

517 
	`HC_SYSCMD_ERR
(
x
) | \

518 
	`HC_NCOR_SYSAD_ERR
(
x
) | \

519 
	`HC_COR_SYSAD_ERR
(
x
) | \

520 
	`HC_DATA_ELMNT_ERR
(
x
) | \

521 
	`HC_MEM_ADDR_ERR_PROC
(
x
))

	)

524 
	#HC_HEART_EXC
 (
HC_PE_SYS_COR_ERR_MSK
 | \

525 
HC_PIOWDB_OFLOW
 | \

526 
HC_PIORWRB_OFLOW
 | \

527 
HC_PIUR_ACC_ERR
 | \

528 
HC_BAD_SYSWR_ERR
 | \

529 
HC_BAD_SYSRD_ERR
 | \

530 
HC_WIDGET_ERR
 | \

531 
HC_MEM_ADDR_ERR_IO
 | \

532 
HC_NCOR_MEM_ERR
 | \

533 
HC_COR_MEM_ERR
)

	)

536 
	#ERRTYPE_XBAR_CREDIT_OVER
 (
HEARTCONST
 0x1 << 29)

	)

537 
	#ERRTYPE_XBAR_CREDIT_UNDER
 (
HEARTCONST
 0x1 << 28)

	)

538 
	#ERRTYPE_IO_NONHEAD
 (
HEARTCONST
 0x1 << 27)

	)

539 
	#ERRTYPE_IO_BAD_FORMAT
 (
HEARTCONST
 0x1 << 26)

	)

540 
	#ERRTYPE_IO_UNEXPECTED_RESP_ERR
 (
HEARTCONST
 0x1 << 25)

	)

541 
	#ERRTYPE_IORWRB_OFLOW_ERR
 (
HEARTCONST
 0x1 << 24)

	)

542 
	#ERRTYPE_IOR_CMD_ERR
 (
HEARTCONST
 0x1 << 23)

	)

543 
	#ERRTYPE_IOR_CMD_WARN
 (
HEARTCONST
 0x1 << 22)

	)

544 
	#ERRTYPE_IOR_INT_VEC_ERR
 (
HEARTCONST
 0x1 << 21)

	)

545 
	#ERRTYPE_IOR_INT_VEC_WARN
 (
HEARTCONST
 0x1 << 20)

	)

546 
	#ERRTYPE_LLP_RCV_WARM_RST
 (
HEARTCONST
 0x1 << 18)

	)

547 
	#ERRTYPE_LLP_RCV_LNK_RST
 (
HEARTCONST
 0x1 << 17)

	)

548 
	#ERRTYPE_LLP_RCV_SN_ERR
 (
HEARTCONST
 0x1 << 16)

	)

549 
	#ERRTYPE_LLP_RCV_CB_ERR
 (
HEARTCONST
 0x1 << 15)

	)

550 
	#ERRTYPE_LLP_RCV_SQUASH_DATA
 (
HEARTCONST
 0x1 << 14)

	)

551 
	#ERRTYPE_LLP_TX_RETRY_TIMEOUT
 (
HEARTCONST
 0x1 << 13)

	)

552 
	#ERRTYPE_LLP_TX_RETRY
 (
HEARTCONST
 0x1 << 12)

	)

553 
	#ERRTYPE_LLP_RCV_CNT_255
 (
HEARTCONST
 0x1 << 11)

	)

554 
	#ERRTYPE_LLP_TX_CNT_255
 (
HEARTCONST
 0x1 << 10)

	)

555 
	#ERRTYPE_PIO_RD_TIMEOUT
 (
HEARTCONST
 0x1 << 3)

	)

556 
	#ERRTYPE_PIO_WR_TIMEOUT
 (
HEARTCONST
 0x1 << 2)

	)

557 
	#ERRTYPE_PIO_XTLK_ACC_ERR
 (
HEARTCONST
 0x1 << 1)

	)

558 
	#ERRTYPE_PIO_WCR_ACC_ERR
 (
HEARTCONST
 0x1 << 0)

	)

560 
	#ERRTYPE_ALL
 (
ERRTYPE_XBAR_CREDIT_OVER
 | \

561 
ERRTYPE_XBAR_CREDIT_UNDER
 | \

562 
ERRTYPE_IO_NONHEAD
 | \

563 
ERRTYPE_IO_BAD_FORMAT
 | \

564 
ERRTYPE_IO_UNEXPECTED_RESP_ERR
 | \

565 
ERRTYPE_IORWRB_OFLOW_ERR
 | \

566 
ERRTYPE_IOR_CMD_ERR
 | \

567 
ERRTYPE_IOR_CMD_WARN
 | \

568 
ERRTYPE_IOR_INT_VEC_ERR
 | \

569 
ERRTYPE_IOR_INT_VEC_WARN
 | \

570 
ERRTYPE_LLP_RCV_WARM_RST
 | \

571 
ERRTYPE_LLP_RCV_LNK_RST
 | \

572 
ERRTYPE_LLP_RCV_SN_ERR
 | \

573 
ERRTYPE_LLP_RCV_CB_ERR
 | \

574 
ERRTYPE_LLP_RCV_SQUASH_DATA
 | \

575 
ERRTYPE_LLP_TX_RETRY_TIMEOUT
 | \

576 
ERRTYPE_LLP_TX_RETRY
 | \

577 
ERRTYPE_LLP_RCV_CNT_255
 | \

578 
ERRTYPE_LLP_TX_CNT_255
 | \

579 
ERRTYPE_PIO_RD_TIMEOUT
 | \

580 
ERRTYPE_PIO_WR_TIMEOUT
 | \

581 
ERRTYPE_PIO_XTLK_ACC_ERR
 | \

582 
ERRTYPE_PIO_WCR_ACC_ERR
)

	)

585 
	#HW_PIO_ERR_PROC_ID_SHFT
 22

	)

586 
	#HW_PIO_ERR_PROC_ID
 (
HEARTCONST
 0x3 << 
HW_PIO_ERR_PROC_ID_SHFT
)

	)

587 
	#HW_PIO_ERR_UNC_ATTR
 (
HEARTCONST
 0x3 << 20)

	)

588 
	#HW_PIO_ERR_SYSCMD
 (
HEARTCONST
 0x7f‡<< 8)

	)

589 
	#HW_PIO_ERR_SYSCMD_WR_CMD
 (
HEARTCONST
 0x1 << 15)

	)

590 
	#HW_PIO_ERR_ADDR
 (
HEARTCONST
 0xf‡<< 0)

	)

593 
	#HW_PIO_ERR_LOWER_ADDR
 (
HEARTCONST
 0xfffffff‡<< 0Ë

	)

596 
	#HW_PIO_RTO_ERR_PROC_ID_SHFT
 18

	)

597 
	#HW_PIO_RTO_ERR_PROC_ID
 (
HEARTCONST
 0x3 << 
HW_PIO_RTO_ERR_PROC_ID_SHFT
)

	)

598 
	#HW_PIO_RTO_ERR_IOSPACE
 (
HEARTCONST
 0x3 << 16)

	)

599 
	#HW_PIO_RTO_ERR_DIDN
 (
HEARTCONST
 0x‡<< 12)

	)

600 
	#HW_PIO_RTO_ERR_ADDR
 (
HEARTCONST
 0xff‡<< 0)

	)

603 
	#SYSTEM_MEMORY_ALIAS_SIZE
 0x00004000

	)

604 
	#SYSTEM_MEMORY_BASE
 0x20000000

	)

606 
	#ABS_SYSTEM_MEMORY_BASE
 0x20000000

	)

607 
	#ABS_SYSTEM_MEMORY_TOP
 0x800000000

	)

609 
	#PHYS_RAMBASE
 
SYSTEM_MEMORY_BASE


	)

610 
	#K0_RAMBASE
 
	`PHYS_TO_K0
(
PHYS_RAMBASE
)

	)

611 
	#K1_RAMBASE
 
	`PHYS_TO_K1
(
PHYS_RAMBASE
)

	)

612 
	#PHYS_TO_K0_RAM
(
x
Ë
	`PHYS_TO_K0
((x)+
PHYS_RAMBASE
)

	)

613 
	#PHYS_TO_K1_RAM
(
x
Ë
	`PHYS_TO_K1
((x)+
PHYS_RAMBASE
)

	)

615 
	#TID_MEMORY
 
HEART_ID


	)

620 
	#INT_DEST_TARGET
 
HEART_ID


	)

621 
	#INT_DEST_ADDR
 
HEART_XTALK_ISR


	)

623 
	#INT_DEST_UPPER
(
vec
) \

624 (((
vec
)<<24Ë| (
INT_DEST_TARGET
<<16Ë|()((
INT_DEST_ADDR
>>32)&0xffff))

	)

625 
	#INT_DEST_LOWER
 (
INT_DEST_ADDR
&0xffffffff)

	)

627 
	#HEART_CREDIT
 4

	)

632 #i‡
EMULATION
 || 
SABLE


633 
	#X_CLK_RATE
 ((1 * 1000 * 1000Ë* 2)

	)

635 
	#X_CLK_RATE
 ((100 * 1000 * 1000Ë* 4)

	)

637 
	#HEART_IOCLK_FREQ
 (
X_CLK_RATE
 / 4)

	)

638 
	#HEART_COUNT_RATE
 (
HEART_IOCLK_FREQ
 / 8)

	)

640 
	#HEART_COUNT_NSECS
 ((1000 * 1000 * 1000)/
HEART_COUNT_RATE
)

	)

642 #i‡
LANGUAGE_C


644 vﬁ©ûê
	shóπ_cfg_s
 {

645 
widgë_cfg_t
 
	mh_widgë
;

647 
	#h_wid_id
 
h_widgë
.
w_id


	)

648 
	#h_wid_°©us
 
h_widgë
.
w_°©us


	)

649 
	#h_wid_îr_uµî_addr
 
h_widgë
.
w_îr_uµî_addr


	)

650 
	#h_wid_îr_lowî_addr
 
h_widgë
.
w_îr_lowî_addr


	)

651 
	#h_wid_c⁄åﬁ
 
h_widgë
.
w_c⁄åﬁ


	)

652 
	#h_wid_ªq_timeout
 
h_widgë
.
w_ªq_timeout


	)

655 
	#h_wid_îr_cmd_w‹d
 
h_widgë
.
w_îr_cmd_w‹d


	)

656 
	#h_wid_Œp_cfg
 
h_widgë
.
w_Œp_cfg


	)

657 
	#h_wid_tÊush
 
h_widgë
.
w_tÊush


	)

659 
hóπªg_t
 
	mh_wid_ª£rved_0
;

660 
hóπªg_t
 
	mh_wid_îr_ty≥
;

661 
hóπªg_t
 
	mh_wid_îr_mask
;

662 
hóπªg_t
 
	mh_wid_pio_îr_uµî
;

663 
hóπªg_t
 
	mh_wid_pio_îr_lowî
;

664 
hóπªg_t
 
	mh_wid_i§
;

665 
hóπªg_t
 
	mh_wid_ª£rved_1
;

666 
hóπªg_t
 
	mh_wid_pio_rdto_addr
;

667 } 
	thóπ_cfg_t
;

669 vﬁ©ûê
	shóπ_piu_s
 {

670 
hóπªg_t
 
	mh_mode
;

671 
hóπªg_t
 
	mh_sdøm_mode
;

672 
hóπªg_t
 
	mh_mem_ªf
;

673 
hóπªg_t
 
	mh_mem_ªq_¨b
;

676 
hóπªg_t
 
	mªg
[4];

677 
__uöt32_t
 
	mb™k
[8];

678 } 
	mh_memcfg
;

680 
hóπªg_t
 
	mh_fc_mode
;

681 
hóπªg_t
 
	mh_fc_timî_limô
;

682 
hóπªg_t
 
	mh_fc_addr
[2];

683 
hóπªg_t
 
	mh_fc_¸_˙t
[2];

684 
hóπªg_t
 
	mh_fc_timî
[2];

685 
hóπªg_t
 
	mh_°©us
;

686 
hóπªg_t
 
	mh_bîr_addr
;

687 
hóπªg_t
 
	mh_bîr_misc
;

688 
hóπªg_t
 
	mh_memîr_addr
;

689 
hóπªg_t
 
	mh_memîr_d©a
;

690 
hóπªg_t
 
	mh_piur_acc_îr
;

691 
hóπªg_t
 
	mh_mœn_˛k_div
;

692 
hóπªg_t
 
	mh_mœn_˘l
;

693 
	m__∑d0
[0x00F40];

694 
hóπªg_t
 
	mh_piu_undef
;

695 
	m__∑d1
[0x0EFF8];

696 
hóπªg_t
 
	mh_imr
[4];

697 
hóπªg_t
 
	mh_£t_i§
;

698 
hóπªg_t
 
	mh_˛r_i§
;

699 
hóπªg_t
 
	mh_i§
;

700 
hóπªg_t
 
	mh_im§
;

701 
hóπªg_t
 
	mh_ˇu£
;

702 
	m__∑d2
[0x0FFB8];

703 
hóπªg_t
 
	mh_cou¡
;

704 
	m__∑d3
[0x0FFF8];

705 
hóπªg_t
 
	mh_com∑ª
;

706 
	m__∑d4
[0x0FFF8];

707 
hóπªg_t
 
	mh_åiggî
;

708 
	m__∑d5
[0x0FFF8];

709 
hóπªg_t
 
	mh_¥id
;

710 
	m__∑d6
[0x0FFF8];

711 
hóπªg_t
 
	mh_sync
;

712 } 
	thóπ_piu_t
;

715 
	m∑d
 :12;

716 
	m˝u
 :2;

717 
	mios
 :2;

718 
	mdidn
 :4;

719 
	maddr
 :12;

720 } 
	th_wid_pio_rdto_addr_f
;

723 
widgëªg_t
 
	mr
;

724 
h_wid_pio_rdto_addr_f
 
	mf
;

725 } 
	th_wid_pio_rdto_addr_u
;

727 #i‡
LANGUAGE_ASSEMBLY
 || 
_STANDALONE


734 
	#HEARTREG
(
phys
Ë(*((vﬁ©ûê
hóπªg_t
 *Ë
	`PHYS_TO_COMPATK1
(’hys))))

	)

737 #ifde‡
_STANDALONE


738 
öô_hóπ
(
hóπ_piu_t
 *
hóπ
, 
hóπ_cfg_t
 *
hóπcfg
);

739 
hóπ_˛ó∫oÁu…
();

740 #ñi‡
_KERNEL


741 
hóπ_mp_öå_öô
(
˝uid_t
);

747 #i‡
deföed
(
MACROFIELD_LINE
)

755 #i‚de‡
MACROFIELD_LINE_BITFIELD


756 
	#MACROFIELD_LINE_BITFIELD
(
m
Ë

	)

759 
ma¸ofõld_s
 
	ghóπ_piu_ma¸ofõld
[] = {

762 
MACROFIELD_LINE
(
HEART_PIU_MODE
, 
piu_t
, 
h_mode
)

763 
MACROFIELD_LINE_BITFIELD
(
HM_PROC_DISABLE_MSK
)

764 
MACROFIELD_LINE_BITFIELD
(
HM_MAX_PSR
)

765 
MACROFIELD_LINE_BITFIELD
(
HM_MAX_IOSR
)

766 
MACROFIELD_LINE_BITFIELD
(
HM_MAX_PEND_IOSR
)

767 
MACROFIELD_LINE_BITFIELD
(
HM_TRIG_SRC_SEL_MSK
)

768 
MACROFIELD_LINE_BITFIELD
(
HM_TRIG_HEART_EXC
)

769 
MACROFIELD_LINE_BITFIELD
(
HM_TRIG_REG_BIT
)

770 
MACROFIELD_LINE_BITFIELD
(
HM_TRIG_SYSCLK
)

771 
MACROFIELD_LINE_BITFIELD
(
HM_TRIG_MEMCLK_2X
)

772 
MACROFIELD_LINE_BITFIELD
(
HM_TRIG_MEMCLK
)

773 
MACROFIELD_LINE_BITFIELD
(
HM_TRIG_IOCLK
)

774 
MACROFIELD_LINE_BITFIELD
(
HM_PIU_TEST_MODE
)

775 
MACROFIELD_LINE_BITFIELD
(
HM_GP_FLAG_MSK
)

776 
MACROFIELD_LINE_BITFIELD
(
HM_MAX_PROC_HYST
)

777 
MACROFIELD_LINE_BITFIELD
(
HM_LLP_WRST_AFTER_RST
)

778 
MACROFIELD_LINE_BITFIELD
(
HM_LLP_LINK_RST
)

779 
MACROFIELD_LINE_BITFIELD
(
HM_LLP_WARM_RST
)

780 
MACROFIELD_LINE_BITFIELD
(
HM_COR_ECC_LCK
)

781 
MACROFIELD_LINE_BITFIELD
(
HM_REDUCED_PWR
)

782 
MACROFIELD_LINE_BITFIELD
(
HM_COLD_RST
)

783 
MACROFIELD_LINE_BITFIELD
(
HM_SW_RST
)

784 
MACROFIELD_LINE_BITFIELD
(
HM_MEM_FORCE_WR
)

785 
MACROFIELD_LINE_BITFIELD
(
HM_DB_ERR_GEN
)

786 
MACROFIELD_LINE_BITFIELD
(
HM_SB_ERR_GEN
)

787 
MACROFIELD_LINE_BITFIELD
(
HM_CACHED_PIO_EN
)

788 
MACROFIELD_LINE_BITFIELD
(
HM_CACHED_PROM_EN
)

789 
MACROFIELD_LINE_BITFIELD
(
HM_PE_SYS_COR_ERE
)

790 
MACROFIELD_LINE_BITFIELD
(
HM_GLOBAL_ECC_EN
)

791 
MACROFIELD_LINE_BITFIELD
(
HM_IO_COH_EN
)

792 
MACROFIELD_LINE_BITFIELD
(
HM_INT_EN
)

793 
MACROFIELD_LINE_BITFIELD
(
HM_DATA_CHK_EN
)

794 
MACROFIELD_LINE_BITFIELD
(
HM_REF_EN
)

795 
MACROFIELD_LINE_BITFIELD
(
HM_BAD_SYSWR_ERE
)

796 
MACROFIELD_LINE_BITFIELD
(
HM_BAD_SYSRD_ERE
)

797 
MACROFIELD_LINE_BITFIELD
(
HM_SYSSTATE_ERE
)

798 
MACROFIELD_LINE_BITFIELD
(
HM_SYSCMD_ERE
)

799 
MACROFIELD_LINE_BITFIELD
(
HM_NCOR_SYS_ERE
)

800 
MACROFIELD_LINE_BITFIELD
(
HM_COR_SYS_ERE
)

801 
MACROFIELD_LINE_BITFIELD
(
HM_DATA_ELMNT_ERE
)

802 
MACROFIELD_LINE_BITFIELD
(
HM_MEM_ADDR_PROC_ERE
)

803 
MACROFIELD_LINE_BITFIELD
(
HM_MEM_ADDR_IO_ERE
)

804 
MACROFIELD_LINE_BITFIELD
(
HM_NCOR_MEM_ERE
)

805 
MACROFIELD_LINE_BITFIELD
(
HM_COR_MEM_ERE
)

806 
MACROFIELD_LINE_BITFIELD
(
HM_MEM_ERE
)

808 
MACROFIELD_LINE
(
HEART_PIU_SDRAM_MODE
, 
piu_t
, 
h_sdøm_mode
)

809 
MACROFIELD_LINE
(
HEART_PIU_MEM_REF
, 
piu_t
, 
h_mem_ªf
)

810 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMREF_REFS
(0xf))

811 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMREF_PERIOD
(0xffff))

812 
MACROFIELD_LINE
(
HEART_PIU_MEM_REQ_ARB
, 
piu_t
, 
h_mem_ªq_¨b
)

813 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMARB_IODIS
)

814 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMARB_MAXPMWRQS
)

815 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMARB_MAXPMRRQS
)

816 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMARB_MAXPMRQS
)

817 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMARB_MAXRRRQS
)

818 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMARB_MAXGBRRQS
)

819 
MACROFIELD_LINE
(
HEART_PIU_MEMCFG0
, 
piu_t
, 
h_memcfg
.
ªg
[0])

820 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMCFG_VLD
)

821 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMCFG_RAM_MSK
)

822 
MACROFIELD_LINE_BITFIELD
(
HEART_MEMCFG_ADDR_MSK
)

824 
MACROFIELD_LINE
(
HEART_PIU_MEMCFG0
, 
piu_t
, 
h_memcfg
.
ªg
[0])

825 
MACROFIELD_LINE
(
HEART_PIU_MEMCFG
(3), 
piu_t
, 
h_memcfg
.
ªg
[3])

827 
MACROFIELD_LINE
(
HEART_PIU_FC_MODE
, 
piu_t
, 
h_fc_mode
)

828 
MACROFIELD_LINE
(
HEART_PIU_FC_TIMER_LIM
, 
piu_t
, 
h_fc_timî_limô
)

829 
MACROFIELD_LINE
(
HEART_PIU_FC0_ADDR
, 
piu_t
, 
h_fc_addr
[0])

830 
MACROFIELD_LINE
(
HEART_PIU_FC1_ADDR
, 
piu_t
, 
h_fc_addr
[1])

831 
MACROFIELD_LINE
(
HEART_PIU_FC0_CR_CNT
, 
piu_t
, 
h_fc_¸_˙t
[0])

832 
MACROFIELD_LINE
(
HEART_PIU_FC1_CR_CNT
, 
piu_t
, 
h_fc_¸_˙t
[1])

833 
MACROFIELD_LINE
(
HEART_PIU_FC0_TIMER
, 
piu_t
, 
h_fc_timî
[0])

834 
MACROFIELD_LINE
(
HEART_PIU_FC1_TIMER
, 
piu_t
, 
h_fc_timî
[1])

835 
MACROFIELD_LINE
(
HEART_PIU_STATUS
, 
piu_t
, 
h_°©us
)

836 
MACROFIELD_LINE_BITFIELD
(
HEART_STAT_HSTL_SDRV
)

837 
MACROFIELD_LINE_BITFIELD
(
HEART_STAT_FC_CR_OUT
(3))

838 
MACROFIELD_LINE_BITFIELD
(
HEART_STAT_DIR_CNNCT
)

839 
MACROFIELD_LINE_BITFIELD
(
HEART_STAT_TRITON
)

840 
MACROFIELD_LINE_BITFIELD
(
HEART_STAT_R4K
)

841 
MACROFIELD_LINE_BITFIELD
(
HEART_STAT_BIG_ENDIAN
)

842 
MACROFIELD_LINE_BITFIELD
(
HEART_STAT_PROC_ACTIVE_MSK
)

843 
MACROFIELD_LINE_BITFIELD
(
HEART_STAT_WIDGET_ID
)

845 
MACROFIELD_LINE
(
HEART_PIU_BERR_ADDR
, 
piu_t
, 
h_bîr_addr
)

846 
MACROFIELD_LINE_BITFIELD
(
HBA_ADDR
)

848 
MACROFIELD_LINE
(
HEART_PIU_BERR_MISC
, 
piu_t
, 
h_bîr_misc
)

849 
MACROFIELD_LINE_BITFIELD
(
HBM_BAD_RD_WRBACK
)

850 
MACROFIELD_LINE_BITFIELD
(
HBM_PROC_ID
)

851 
MACROFIELD_LINE_BITFIELD
(
HBM_SYNDROME
)

852 
MACROFIELD_LINE_BITFIELD
(
HBM_SYSCMD_PAR
)

853 
MACROFIELD_LINE_BITFIELD
(
HBM_SYSCMD
)

854 
MACROFIELD_LINE_BITFIELD
(
HBM_SYSCMD_WR_CMD
)

856 
MACROFIELD_LINE
(
HEART_PIU_MERR_ADDR
, 
piu_t
, 
h_memîr_addr
)

857 
MACROFIELD_LINE_BITFIELD
(
HME_REQ_SRC_MSK
)

858 
MACROFIELD_LINE_BITFIELD
(
HME_REQ_SRC_IO
)

859 
MACROFIELD_LINE_BITFIELD
(
HME_ERR_TYPE_ADDR
)

860 
MACROFIELD_LINE_BITFIELD
(
HME_SYNDROME
)

861 
MACROFIELD_LINE_BITFIELD
(
HME_PHYS_ADDR
)

863 
MACROFIELD_LINE
(
HEART_PIU_MERR_DATA
, 
piu_t
, 
h_memîr_d©a
)

864 
MACROFIELD_LINE
(
HEART_PIU_EACC_REG
, 
piu_t
, 
h_piur_acc_îr
)

865 
MACROFIELD_LINE_BITFIELD
(
HPE_ACC_TYPE_WR
)

866 
MACROFIELD_LINE_BITFIELD
(
HPE_ACC_PROC_ID
)

867 
MACROFIELD_LINE_BITFIELD
(
HPE_ACC_ERR_ADDR
)

869 
MACROFIELD_LINE
(
HEART_PIU_MLAN_CLK_DIV
, 
piu_t
, 
h_mœn_˛k_div
)

870 
MACROFIELD_LINE
(
HEART_PIU_MLAN_CTL
, 
piu_t
, 
h_mœn_˘l
)

872 
MACROFIELD_LINE
(
HEART_PIU_IMR0
, 
piu_t
, 
h_imr
[0])

873 
MACROFIELD_LINE
(
HEART_PIU_IMR
(3), 
piu_t
, 
h_imr
[3])

874 
MACROFIELD_LINE
(
HEART_PIU_SET_ISR
, 
piu_t
, 
h_£t_i§
)

875 
MACROFIELD_LINE
(
HEART_PIU_CLR_ISR
, 
piu_t
, 
h_˛r_i§
)

876 
MACROFIELD_LINE
(
HEART_PIU_ISR
, 
piu_t
, 
h_i§
)

877 
MACROFIELD_LINE_BITFIELD
(
HEART_ISR_HEART_EXC
)

878 
MACROFIELD_LINE_BITFIELD
(
HEART_INT_LEVEL4
)

879 
MACROFIELD_LINE_BITFIELD
(
HEART_INT_LEVEL3
)

880 
MACROFIELD_LINE_BITFIELD
(
HEART_INT_LEVEL2
)

881 
MACROFIELD_LINE_BITFIELD
(
HEART_INT_LEVEL1
)

882 
MACROFIELD_LINE_BITFIELD
(
HEART_INT_LEVEL0
)

884 
MACROFIELD_LINE
(
HEART_PIU_IMSR
, 
piu_t
, 
h_im§
)

886 
MACROFIELD_LINE
(
HEART_PIU_CAUSE
, 
piu_t
, 
h_ˇu£
)

887 
MACROFIELD_LINE_BITFIELD
(
HC_HEART_EXC
)

888 
MACROFIELD_LINE_BITFIELD
(
HC_PE_SYS_COR_ERR_MSK
)

889 
MACROFIELD_LINE_BITFIELD
(
HC_PIOWDB_OFLOW
)

890 
MACROFIELD_LINE_BITFIELD
(
HC_PIORWRB_OFLOW
)

891 
MACROFIELD_LINE_BITFIELD
(
HC_PIUR_ACC_ERR
)

892 
MACROFIELD_LINE_BITFIELD
(
HC_BAD_SYSWR_ERR
)

893 
MACROFIELD_LINE_BITFIELD
(
HC_BAD_SYSRD_ERR
)

894 
MACROFIELD_LINE_BITFIELD
(
HC_SYSSTATE_ERR_MSK
)

895 
MACROFIELD_LINE_BITFIELD
(
HC_SYSCMD_ERR_MSK
)

896 
MACROFIELD_LINE_BITFIELD
(
HC_SYSCMD_ERR
(0))

897 
MACROFIELD_LINE_BITFIELD
(
HC_SYSCMD_ERR
(1))

898 
MACROFIELD_LINE_BITFIELD
(
HC_SYSCMD_ERR
(2))

899 
MACROFIELD_LINE_BITFIELD
(
HC_SYSCMD_ERR
(3))

900 
MACROFIELD_LINE_BITFIELD
(
HC_NCOR_SYSAD_ERR_MSK
)

901 
MACROFIELD_LINE_BITFIELD
(
HC_COR_SYSAD_ERR_MSK
)

902 
MACROFIELD_LINE_BITFIELD
(
HC_DATA_ELMNT_ERR_MSK
)

903 
MACROFIELD_LINE_BITFIELD
(
HC_WIDGET_ERR
)

904 
MACROFIELD_LINE_BITFIELD
(
HC_MEM_ADDR_ERR_PROC_MSK
)

905 
MACROFIELD_LINE_BITFIELD
(
HC_MEM_ADDR_ERR_IO
)

906 
MACROFIELD_LINE_BITFIELD
(
HC_NCOR_MEM_ERR
)

907 
MACROFIELD_LINE_BITFIELD
(
HC_COR_MEM_ERR
)

908 
MACROFIELD_LINE_BITFIELD
(
HC_PBUS_ERR
(0))

909 
MACROFIELD_LINE_BITFIELD
(
HC_PBUS_ERR
(1))

910 
MACROFIELD_LINE_BITFIELD
(
HC_PBUS_ERR
(2))

911 
MACROFIELD_LINE_BITFIELD
(
HC_PBUS_ERR
(3))

913 
MACROFIELD_LINE
(
HEART_PIU_COUNT
, 
piu_t
, 
h_cou¡
)

914 
MACROFIELD_LINE
(
HEART_PIU_COMPARE
, 
piu_t
, 
h_com∑ª
)

915 
MACROFIELD_LINE
(
HEART_PIU_TRIGGER
, 
piu_t
, 
h_åiggî
)

916 
MACROFIELD_LINE
(
HEART_PIU_PID
, 
piu_t
, 
h_¥id
)

917 
MACROFIELD_LINE
(
HEART_PIU_SYNC
, 
piu_t
, 
h_sync
)

922 
ma¸ofõld_s
 
	ghóπ_iou_ma¸ofõld
[] = {

924 
MACROFIELD_LINE
(
WIDGET_ID
, 
cfg_t
, 
h_wid_id
)

925 
MACROFIELD_LINE
(
WIDGET_STATUS
, 
cfg_t
, 
h_wid_°©us
)

926 
MACROFIELD_LINE
(
WIDGET_ERR_UPPER_ADDR
, 
cfg_t
, 
h_wid_îr_uµî_addr
)

927 
MACROFIELD_LINE
(
WIDGET_ERR_LOWER_ADDR
, 
cfg_t
, 
h_wid_îr_lowî_addr
)

928 
MACROFIELD_LINE
(
WIDGET_CONTROL
, 
cfg_t
, 
h_wid_c⁄åﬁ
)

929 
MACROFIELD_LINE
(
WIDGET_REQ_TIMEOUT
, 
cfg_t
, 
h_wid_ªq_timeout
)

930 
MACROFIELD_LINE
(
WIDGET_ERR_CMD_WORD
, 
cfg_t
, 
h_wid_îr_cmd_w‹d
)

931 
MACROFIELD_LINE
(
WIDGET_LLP_CFG
, 
cfg_t
, 
h_wid_Œp_cfg
)

932 
MACROFIELD_LINE
(
WIDGET_TFLUSH
, 
cfg_t
, 
h_wid_tÊush
)

934 
MACROFIELD_LINE
(
HEART_IOU_ETYPE
, 
cfg_t
, 
h_wid_îr_ty≥
)

935 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_ALL
)

936 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_XBAR_CREDIT_OVER
)

937 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_XBAR_CREDIT_UNDER
)

938 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_IO_NONHEAD
)

939 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_IO_BAD_FORMAT
)

940 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_IO_UNEXPECTED_RESP_ERR
)

941 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_IORWRB_OFLOW_ERR
)

942 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_IOR_CMD_ERR
)

943 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_IOR_CMD_WARN
)

944 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_IOR_INT_VEC_ERR
)

945 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_IOR_INT_VEC_WARN
)

946 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_RCV_WARM_RST
)

947 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_RCV_LNK_RST
)

948 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_RCV_SN_ERR
)

949 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_RCV_CB_ERR
)

950 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_RCV_SQUASH_DATA
)

951 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_TX_RETRY_TIMEOUT
)

952 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_TX_RETRY
)

953 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_RCV_CNT_255
)

954 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_LLP_TX_CNT_255
)

955 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_PIO_RD_TIMEOUT
)

956 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_PIO_WR_TIMEOUT
)

957 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_PIO_XTLK_ACC_ERR
)

958 
MACROFIELD_LINE_BITFIELD
(
ERRTYPE_PIO_WCR_ACC_ERR
)

960 
MACROFIELD_LINE
(
HEART_IOU_EMASK
, 
cfg_t
, 
h_wid_îr_mask
)

961 
MACROFIELD_LINE
(
HEART_IOU_PIO_EUPPER
, 
cfg_t
, 
h_wid_pio_îr_uµî
)

962 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_ERR_PROC_ID
)

963 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_ERR_UNC_ATTR
)

964 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_ERR_SYSCMD
)

965 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_ERR_SYSCMD_WR_CMD
)

966 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_ERR_ADDR
)

968 
MACROFIELD_LINE
(
HEART_IOU_PIO_ELOWER
, 
cfg_t
, 
h_wid_pio_îr_lowî
)

970 
MACROFIELD_LINE
(
HEART_IOU_ISR
, 
cfg_t
, 
h_wid_i§
)

972 
MACROFIELD_LINE
(
HEART_IOU_PIO_RTO
, 
cfg_t
, 
h_wid_pio_rdto_addr
)

973 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_RTO_ERR_PROC_ID
)

974 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_RTO_ERR_IOSPACE
)

975 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_RTO_ERR_DIDN
)

976 
MACROFIELD_LINE_BITFIELD
(
HW_PIO_RTO_ERR_ADDR
)

978 
MACROFIELD_LINE_BITFIELD
(
XBOW_BASE
)

979 
MACROFIELD_LINE_BITFIELD
(
HEART_BASE
)

980 
MACROFIELD_LINE_BITFIELD
(
BRIDGE_BASE
)

986 
hóπ_mÃe£t
();

987 
hóπ_ªv
();

988 
hóπªg_t
 
hóπ_imr_bôs_rmw
(
˝uid_t
, heartreg_t, heartreg_t);

991 
hóπ_Êow_c⁄åﬁ_c⁄√˘
(, 
öå_func_t
);

992 
hóπ_Êow_c⁄åﬁ_disc⁄√˘
();

993 
hóπªg_t
 
hóπ_Êow_c⁄åﬁ_íabÀ
();

994 
hóπªg_t
 
hóπ_Êow_c⁄åﬁ_dißbÀ
();

	@/usr/include/sys/SN/SN0/addrs.h

13 #i‚de‡
__SYS_SN_SN0_ADDRS_H__


14 
	#__SYS_SN_SN0_ADDRS_H__


	)

46 
	#CAC_BASE
 0xa800000000000000

	)

48 
	#HSPEC_BASE
 0x9000000000000000

	)

49 
	#IO_BASE
 0x9200000000000000

	)

50 
	#MSPEC_BASE
 0x9400000000000000

	)

51 
	#UNCAC_BASE
 0x9600000000000000

	)

53 
	#TO_PHYS
(
x
Ë–((xË& 
TO_PHYS_MASK
))

	)

54 
	#TO_CAC
(
x
Ë(
CAC_BASE
 | ((xË& 
TO_PHYS_MASK
))

	)

55 
	#TO_UNCAC
(
x
Ë(
UNCAC_BASE
 | ((xË& 
TO_PHYS_MASK
))

	)

56 
	#TO_MSPEC
(
x
Ë(
MSPEC_BASE
 | ((xË& 
TO_PHYS_MASK
))

	)

57 
	#TO_HSPEC
(
x
Ë(
HSPEC_BASE
 | ((xË& 
TO_PHYS_MASK
))

	)

69 #i‡
deföed
(
N_MODE
)

71 
	#NODE_SIZE_BITS
 31

	)

72 
	#BWIN_SIZE_BITS
 28

	)

74 
	#NASID_BITS
 9

	)

75 
	#NASID_BITMASK
 (0x1ffLL)

	)

76 
	#NASID_SHFT
 31

	)

77 
	#NASID_META_BITS
 5

	)

78 
	#NASID_LOCAL_BITS
 4

	)

80 
	#BDDIR_UPPER_MASK
 (
UINT64_CAST
 0x7fff‡<< 10)

	)

81 
	#BDECC_UPPER_MASK
 (
UINT64_CAST
 0x3fffff‡<< 3)

	)

85 
	#NODE_SIZE_BITS
 32

	)

86 
	#BWIN_SIZE_BITS
 29

	)

88 
	#NASID_BITMASK
 (0xffLL)

	)

89 
	#NASID_BITS
 8

	)

90 
	#NASID_SHFT
 32

	)

91 
	#NASID_META_BITS
 4

	)

92 
	#NASID_LOCAL_BITS
 4

	)

94 
	#BDDIR_UPPER_MASK
 (
UINT64_CAST
 0xffff‡<< 10)

	)

95 
	#BDECC_UPPER_MASK
 (
UINT64_CAST
 0x7fffff‡<< 3)

	)

99 
	#NODE_ADDRSPACE_SIZE
 (
UINT64_CAST
 1 << 
NODE_SIZE_BITS
)

	)

101 
	#NASID_MASK
 (
UINT64_CAST
 
NASID_BITMASK
 << 
NASID_SHFT
)

	)

102 
	#NASID_GET
(
_∑
Ë(Ë((
	`UINT64_CAST
 (_pa) >> \

103 
NASID_SHFT
Ë& 
NASID_BITMASK
)

	)

105 #i‡
_LANGUAGE_C
 && !
deföed
(
_STANDALONE
)

106 
	#NODE_SWIN_BASE
(
«sid
, 
widgë
) \

107 ((
widgë
 =0Ë? 
	`NODE_BWIN_BASE
((
«sid
), 
SWIN0_BIGWIN
) \

108 : 
	`RAW_NODE_SWIN_BASE
(
«sid
, 
widgë
))

	)

110 
	#NODE_SWIN_BASE
(
«sid
, 
widgë
) \

111 (
	`NODE_IO_BASE
(
«sid
Ë+ (
	`UINT64_CAST
 (
widgë
Ë<< 
SWIN_SIZE_BITS
))

	)

120 
	#BWIN_INDEX_BITS
 3

	)

121 
	#BWIN_SIZE
 (
UINT64_CAST
 1 << 
BWIN_SIZE_BITS
)

	)

122 
	#BWIN_SIZEMASK
 (
BWIN_SIZE
 - 1)

	)

123 
	#BWIN_WIDGET_MASK
 0x7

	)

124 
	#NODE_BWIN_BASE0
(
«sid
Ë(
	`NODE_IO_BASE
“asidË+ 
BWIN_SIZE
)

	)

125 
	#NODE_BWIN_BASE
(
«sid
, 
bigwö
Ë(
	`NODE_BWIN_BASE0
(nasid) + \

126 (
	`UINT64_CAST
 (
bigwö
Ë<< 
BWIN_SIZE_BITS
))

	)

128 
	#BWIN_WIDGETADDR
(
addr
Ë(◊ddrË& 
BWIN_SIZEMASK
)

	)

129 
	#BWIN_WINDOWNUM
(
addr
Ë((◊ddrË>> 
BWIN_SIZE_BITS
Ë& 
BWIN_WIDGET_MASK
)

	)

140 
	#NODE_BWIN_ADDR
(
«sid
, 
addr
) \

141 (((
addr
Ë>
	`NODE_BWIN_BASE0
(
«sid
)) && \

142 ((
addr
Ë< (
	`NODE_BWIN_BASE
(
«sid
, 
HUB_NUM_BIG_WINDOW
) + \

143 
BWIN_SIZE
)))

	)

152 
	#CALIAS_BASE
 
CAC_BASE


	)

156 
	#BRIDGE_REG_PTR
(
_ba£
, 
_off
Ë((vﬁ©ûê
bridgîeg_t
 *) \

157 ((
__psunsig√d_t
)(
_ba£
Ë+ (__psunsig√d_t)(
_off
)))

	)

159 
	#SN0_WIDGET_BASE
(
_«sid
, 
_wid
Ë(
	`NODE_SWIN_BASE
((_«sid), (_wid)))

	)

162 #i‡
_LANGUAGE_C


163 
	#KERN_NMI_ADDR
(
«sid
, 
¶i˚
) \

164 
	`TO_NODE_UNCAC
((
«sid
), 
IP27_NMI_KREGS_OFFSET
 + \

165 (
IP27_NMI_KREGS_CPU_SIZE
 * (
¶i˚
)))

	)

168 #ifde‡
PROM


170 
	#MISC_PROM_BASE
 
	`PHYS_TO_K0
(0x01300000)

	)

171 
	#MISC_PROM_SIZE
 0x200000

	)

173 
	#DIAG_BASE
 
	`PHYS_TO_K0
(0x01500000)

	)

174 
	#DIAG_SIZE
 0x300000

	)

176 
	#ROUTE_BASE
 
	`PHYS_TO_K0
(0x01800000)

	)

177 
	#ROUTE_SIZE
 0x200000

	)

179 
	#IP27PROM_FLASH_HDR
 
	`PHYS_TO_K0
(0x01300000)

	)

180 
	#IP27PROM_FLASH_DATA
 
	`PHYS_TO_K0
(0x01301000)

	)

181 
	#IP27PROM_CORP_MAX
 32

	)

182 
	#IP27PROM_CORP
 
	`PHYS_TO_K0
(0x01800000)

	)

183 
	#IP27PROM_CORP_SIZE
 0x10000

	)

184 
	#IP27PROM_CORP_STK
 
	`PHYS_TO_K0
(0x01810000)

	)

185 
	#IP27PROM_CORP_STKSIZE
 0x2000

	)

186 
	#IP27PROM_DECOMP_BUF
 
	`PHYS_TO_K0
(0x01900000)

	)

187 
	#IP27PROM_DECOMP_SIZE
 0xfff00

	)

189 
	#IP27PROM_BASE
 
	`PHYS_TO_K0
(0x01a00000)

	)

190 
	#IP27PROM_BASE_MAPPED
 (
K2BASE
 | 0x1fc00000)

	)

191 
	#IP27PROM_SIZE_MAX
 0x100000

	)

193 
	#IP27PROM_PCFG
 
	`PHYS_TO_K0
(0x01b00000)

	)

194 
	#IP27PROM_PCFG_SIZE
 0xd0000

	)

195 
	#IP27PROM_ERRDMP
 
	`PHYS_TO_K1
(0x01bd0000)

	)

196 
	#IP27PROM_ERRDMP_SIZE
 0xf000

	)

198 
	#IP27PROM_INIT_START
 
	`PHYS_TO_K1
(0x01bd0000)

	)

199 
	#IP27PROM_CONSOLE
 
	`PHYS_TO_K1
(0x01bdf000)

	)

200 
	#IP27PROM_CONSOLE_SIZE
 0x200

	)

201 
	#IP27PROM_NETUART
 
	`PHYS_TO_K1
(0x01bdf200)

	)

202 
	#IP27PROM_NETUART_SIZE
 0x100

	)

203 
	#IP27PROM_DNIC_BASE
 
	`PHYS_TO_K1
(0x01bdf300)

	)

204 
	#IP27PROM_DNIC_SIZE
 0x500

	)

205 
	#IP27PROM_ELSC_BASE_A
 
	`PHYS_TO_K0
(0x01bdf800)

	)

206 
	#IP27PROM_ELSC_BASE_B
 
	`PHYS_TO_K0
(0x01bdfc00)

	)

207 
	#IP27PROM_STACK_A
 
	`PHYS_TO_K0
(0x01be0000)

	)

208 
	#IP27PROM_STACK_B
 
	`PHYS_TO_K0
(0x01bf0000)

	)

209 
	#IP27PROM_STACK_SHFT
 16

	)

210 
	#IP27PROM_STACK_SIZE
 (1 << 
IP27PROM_STACK_SHFT
)

	)

211 
	#IP27PROM_INIT_END
 
	`PHYS_TO_K0
(0x01c00000)

	)

213 
	#SLAVESTACK_BASE
 
	`PHYS_TO_K0
(0x01580000)

	)

214 
	#SLAVESTACK_SIZE
 0x40000

	)

216 
	#ENETBUFS_BASE
 
	`PHYS_TO_K0
(0x01f80000)

	)

217 
	#ENETBUFS_SIZE
 0x20000

	)

221 
	#IP27PROM_DRT_CACHE_BASE
 
	`PHYS_TO_K0
(0x01c00000)

	)

222 
	#IP27PROM_DRT_CACHE_SIZE
 0x2000

	)

224 
	#IO6PROM_BASE
 
	`PHYS_TO_K0
(0x01c00000)

	)

225 #ifde‡
SN0XXL


226 
	#IO6PROM_SIZE
 0x800000

	)

228 
	#IO6PROM_SIZE
 0x400000

	)

230 
	#IO6PROM_BASE_MAPPED
 (
K2BASE
 | 0x11c00000)

	)

231 
	#IO6DPROM_BASE
 
	`PHYS_TO_K0
(0x01c00000)

	)

232 
	#IO6DPROM_SIZE
 0x200000

	)

234 
	#NODEBUGUNIX_ADDR
 
	`PHYS_TO_K0
(0x00019000)

	)

235 
	#DEBUGUNIX_ADDR
 
	`PHYS_TO_K0
(0x00100000)

	)

237 
	#IP27PROM_INT_LAUNCH
 10

	)

238 
	#IP27PROM_INT_NETUART
 12

	)

245 
	#IP27PROM_ELSC_SHFT
 10

	)

246 
	#IP27PROM_ELSC_SIZE
 (1 << 
IP27PROM_ELSC_SHFT
)

	)

255 #ifde‡
SN0XXL


256 
	#FREEMEM_BASE
 
	`PHYS_TO_K0
(0x2400000)

	)

258 
	#FREEMEM_BASE
 
	`PHYS_TO_K0
(0x2000000)

	)

261 
	#IO6PROM_STACK_SHFT
 14

	)

262 
	#IO6PROM_STACK_SIZE
 (1 << 
IO6PROM_STACK_SHFT
)

	)

268 
	#IP27PROM_ENTRY
 
	`PHYS_TO_COMPATK1
(0x1fc00000)

	)

269 
	#IP27PROM_RESTART
 
	`PHYS_TO_COMPATK1
(0x1fc00008)

	)

270 
	#IP27PROM_SLAVELOOP
 
	`PHYS_TO_COMPATK1
(0x1fc00010)

	)

271 
	#IP27PROM_PODMODE
 
	`PHYS_TO_COMPATK1
(0x1fc00018)

	)

272 
	#IP27PROM_IOC3UARTPOD
 
	`PHYS_TO_COMPATK1
(0x1fc00020)

	)

273 
	#IP27PROM_FLASHLEDS
 
	`PHYS_TO_COMPATK1
(0x1fc00028)

	)

274 
	#IP27PROM_REPOD
 
	`PHYS_TO_COMPATK1
(0x1fc00030)

	)

275 
	#IP27PROM_LAUNCHSLAVE
 
	`PHYS_TO_COMPATK1
(0x1fc00038)

	)

276 
	#IP27PROM_WAITSLAVE
 
	`PHYS_TO_COMPATK1
(0x1fc00040)

	)

277 
	#IP27PROM_POLLSLAVE
 
	`PHYS_TO_COMPATK1
(0x1fc00048)

	)

279 
	#KL_UART_BASE
 
	`LOCAL_HUB_ADDR
(
MD_UREG0_0
Ë

	)

280 
	#KL_UART_CMD
 
	`LOCAL_HUB_ADDR
(
MD_UREG0_0
Ë

	)

281 
	#KL_UART_DATA
 
	`LOCAL_HUB_ADDR
(
MD_UREG0_1
Ë

	)

282 
	#KL_I2C_REG
 
MD_UREG0_0


	)

284 #i‡!
_LANGUAGE_ASSEMBLY


289 #i‡
deföed
 (
HUB_ERR_STS_WAR
)

290 
	#CACHE_ERR_EFRAME
 0x480

	)

292 
	#CACHE_ERR_EFRAME
 0x400

	)

295 
	#CACHE_ERR_ECCFRAME
 (
CACHE_ERR_EFRAME
 + 
EF_SIZE
)

	)

296 
	#CACHE_ERR_SP_PTR
 (0x1000 - 32Ë

	)

297 
	#CACHE_ERR_IBASE_PTR
 (0x1000 - 40)

	)

298 
	#CACHE_ERR_SP
 (
CACHE_ERR_SP_PTR
 - 16)

	)

299 
	#CACHE_ERR_AREA_SIZE
 (
ARCS_SPB_OFFSET
 - 
CACHE_ERR_EFRAME
)

	)

306 
	#UALIAS_FLIP_BASE
 
UALIAS_BASE


	)

307 
	#UALIAS_FLIP_SIZE
 0x20000

	)

308 
	#UALIAS_FLIP_SHIFT
 16

	)

309 
	#UALIAS_FLIP_BIT
 0x10000

	)

310 
	#UALIAS_FLIP_ADDR
(
_x
Ë(
	`˝uto¶i˚
(
	`gë˝uid
()) ? \

311 (
_x
Ë^ 
UALIAS_FLIP_BIT
 : (_x))

	)

313 
	#EX_HANDLER_OFFSET
(
¶i˚
Ë((¶i˚Ë<< 
UALIAS_FLIP_SHIFT
)

	)

314 
	#EX_HANDLER_ADDR
(
«sid
, 
¶i˚
) \

315 
	`PHYS_TO_K0
(
	`NODE_OFFSET
(
«sid
Ë| 
	`EX_HANDLER_OFFSET
(
¶i˚
))

	)

316 
	#EX_HANDLER_SIZE
 0x0400

	)

318 
	#EX_FRAME_OFFSET
(
¶i˚
Ë((¶i˚Ë<< 
UALIAS_FLIP_SHIFT
 | 0x400)

	)

319 
	#EX_FRAME_ADDR
(
«sid
, 
¶i˚
) \

320 
	`PHYS_TO_K0
(
	`NODE_OFFSET
(
«sid
Ë| 
	`EX_FRAME_OFFSET
(
¶i˚
))

	)

321 
	#EX_FRAME_SIZE
 0x0c00

	)

323 
	#_ARCSPROM


	)

325 #ifde‡
_STANDALONE


373 #i‡
_LANGUAGE_C


375 
	#uch¨
 

	)

377 
	#KEY_DEVNASID_SHFT
 48

	)

378 
	#KEY_WIDID_SHFT
 40

	)

379 
	#KEY_FUNCID_SHFT
 39

	)

380 
	#KEY_TYPEID_SHFT
 37

	)

381 
	#KEY_BUSID_SHFT
 35

	)

382 
	#KEY_PCIID_SHFT
 32

	)

383 
	#KEY_HUBWID_SHFT
 24

	)

384 
	#KEY_HSTNASID_SHFT
 8

	)

388 
	#MK_SN0_KEYF
(
«sid
, 
widid
, 
pciid
, 
busid
, 
funcid
) \

389 (((((
__psunsig√d_t
)
«sid
)<< 
KEY_DEVNASID_SHFT
 |\

390 ((
__psunsig√d_t
)
widid
Ë<< 
KEY_WIDID_SHFT
) |\

391 ((
__psunsig√d_t
)
pciid
Ë<< 
KEY_PCIID_SHFT
) |\

392 ((
__psunsig√d_t
)
funcid
Ë<< 
KEY_FUNCID_SHFT
)

	)

393 
	#MK_SN0_KEY
(
«sid
, 
widid
, 
pciid
, 
busid
) \

394 
	`MK_SN0_KEYF
(
«sid
, 
widid
, 
pciid
, 
busid
, 0)

	)

396 
	#ADD_HUBWID_KEY
(
key
,
hubwid
)\

397 (
key
|=((
__psunsig√d_t
)
hubwid
 << 
KEY_HUBWID_SHFT
))

	)

399 
	#ADD_HSTNASID_KEY
(
key
,
h°«sid
)\

400 (
key
|=((
__psunsig√d_t
)
h°«sid
 << 
KEY_HSTNASID_SHFT
))

	)

402 
	#ADD_FUNCID_KEY
(
key
,
funcid
)\

403 (
key
|=((
__psunsig√d_t
)
funcid
 << 
KEY_FUNCID_SHFT
))

	)

405 
	#ADD_TYPEID_KEY
(
key
,
ty≥id
)\

406 (
key
|=((
__psunsig√d_t
)
ty≥id
 << 
KEY_TYPEID_SHFT
))

	)

408 
	#ADD_BUSID_KEY
(
key
,
busid
)\

409 (
key
|=((
__psunsig√d_t
)
busid
 << 
KEY_BUSID_SHFT
))

	)

411 
	#GET_DEVNASID_FROM_KEY
(
key
Ë(()(key >> 
KEY_DEVNASID_SHFT
))

	)

412 
	#GET_WIDID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_WIDID_SHFT
))

	)

413 
	#GET_FUNCID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_FUNCID_SHFT
)& 0x1)

	)

414 
	#GET_TYPEID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_TYPEID_SHFT
)& 0x3)

	)

415 
	#GET_BUSID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_BUSID_SHFT
)& 0x3)

	)

416 
	#GET_PCIID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_PCIID_SHFT
))

	)

417 
	#GET_HUBWID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_HUBWID_SHFT
))

	)

418 
	#GET_HSTNASID_FROM_KEY
(
key
Ë(()(key >> 
KEY_HSTNASID_SHFT
))

	)

420 
	#PCI_BUS1_SHIFT
 23

	)

421 
	#PCIBUS_GET
(
_∑
Ë((_∑ & 
PIC_BUS1_OFFSET
Ë>> 
PCI_BUS1_SHIFT
)

	)

423 
	#PCI_64_TARGID_SHFT
 60

	)

434 
	#PCIBASE_SHIFT
 19

	)

435 
	#PCIBASE_OFFSET
(
func
Ë(fun¯<< 
PCIBASE_SHIFT
)

	)

437 
	#GET_PCIBASE_FROM_KEY
(
key
Ë(
	`NODE_SWIN_BASE
(
	`GET_DEVNASID_FROM_KEY
(key),\

438 
	`GET_WIDID_FROM_KEY
(
key
))\

439 | 
	`BRIDGE_DEVIO
(
	`GET_PCIID_FROM_KEY
(
key
)) \

440 | 
	`PCIBASE_OFFSET
(
	`GET_FUNCID_FROM_KEY
(
key
)))

	)

442 
	#GET_PCICFGBASE_FROM_KEY
(
key
) \

443 (
	`NODE_SWIN_BASE
(
	`GET_DEVNASID_FROM_KEY
(
key
),\

444 
	`GET_WIDID_FROM_KEY
(
key
))\

445 | 
	`BRIDGE_TYPE0_CFG_DEVF
(
	`GET_PCIID_FROM_KEY
(
key
),\

446 
	`GET_FUNCID_FROM_KEY
(
key
)))

	)

448 
	#GET_WIDBASE_FROM_KEY
(
key
) \

449 (
	`NODE_SWIN_BASE
(
	`GET_DEVNASID_FROM_KEY
(
key
),\

450 
	`GET_WIDID_FROM_KEY
(
key
)))

	)

452 
	#PUT_INSTALL_STATUS
(
c
,
s
Ëc->
Revisi⁄
 = 
	)
s

453 
	#GET_INSTALL_STATUS
(
c
Ëc->
Revisi⁄


	)

459 #i‡
deföed
 (
HUB_ERR_STS_WAR
)

461 
	#ERR_STS_WAR_REGISTER
 
IIO_IIBUSERR


	)

462 
	#ERR_STS_WAR_ADDR
 
	`LOCAL_HUB_ADDR
(
IIO_IIBUSERR
)

	)

463 
	#ERR_STS_WAR_PHYSADDR
 
	`TO_PHYS
((
__psunsig√d_t
)
ERR_STS_WAR_ADDR
)

	)

465 
	#OLD_ERR_STS_WAR_OFFSET
 ((
MD_MEM_BANKS
 * 
MD_BANK_SIZE
Ë- 0x100)

	)

	@/usr/include/sys/SN/SN0/arch.h

13 #i‚de‡
__SYS_SN_SN0_ARCH_H__


14 
	#__SYS_SN_SN0_ARCH_H__


	)

16 #i‚de‡
SABLE


18 #i‚de‡
SN0XXL


23 
	#MAX_COMPACT_NODES
 64

	)

29 
	#MAXCPUS
 128

	)

33 
	#MAX_COMPACT_NODES
 256

	)

34 
	#MAXCPUS
 512

	)

42 
	#MAX_NASIDS
 256

	)

47 
	#MAX_REGIONS
 64

	)

48 
	#MAX_NONPREMIUM_REGIONS
 16

	)

49 
	#MAX_PREMIUM_REGIONS
 
MAX_REGIONS


	)

55 
	#MAX_PARTITIONS
 
MAX_REGIONS


	)

60 
	#MAX_COMPACT_NODES
 4

	)

61 
	#MAX_NASIDS
 4

	)

62 
	#MAXCPUS
 8

	)

66 
	#NASID_MASK_BYTES
 ((
MAX_NASIDS
 + 7Ë/ 8)

	)

71 #i‡
deföed
(
N_MODE
)

72 
	#MAX_MEM_SLOTS
 16

	)

74 
	#MAX_MEM_SLOTS
 32

	)

77 #i‡
SABLE_RTL


78 
	#SLOT_SHIFT
 (28)

	)

79 
	#SLOT_MIN_MEM_SIZE
 (16*1024*1024)

	)

81 
	#SLOT_SHIFT
 (27)

	)

82 
	#SLOT_MIN_MEM_SIZE
 (32*1024*1024)

	)

88 
	#NUM_SUBNODES
 1

	)

89 
	#SUBNODE_SHFT
 0

	)

90 
	#SUBNODE_MASK
 0

	)

91 
	#LOCALCPU_SHFT
 0

	)

92 
	#LOCALCPU_MASK
 (0x1 << 
LOCALCPU_SHFT
)

	)

93 
	#SUBNODE
(
¶i˚
Ë(0)

	)

94 
	#LOCALCPU
(
¶i˚
Ë(¶i˚)

	)

95 
	#TO_SLICE
(
subn
, 
loˇl
Ë÷oˇl)

	)

	@/usr/include/sys/SN/SN0/hubcore.h

13 #i‚def 
__SYS_SN_SN0_CORE_H__


14 
	#__SYS_SN_SN0_CORE_H__


	)

24 
	#CORE_MD_ALLOC_BW
 0x2000b0

	)

25 
	#CORE_ND_ALLOC_BW
 0x2000b8

	)

26 
	#CORE_DBGSEL
 0x2000c0

	)

27 
	#CORE_ID_ALLOC_BW
 
CORE_DBGSEL


	)

28 
	#CORE_ARB_CTRL
 0x2000c8

	)

29 
	#CORE_REQQ_DEPTH
 0x2000d0

	)

30 
	#CORE_REPQ_DEPTH
 0x2000d8

	)

31 
	#CORE_FIFO_DEPTH
 0x2000e0

	)

32 #ifde‡
_LANGUAGE_C


33 
	uhubc‹e_ªqqd_u
 {

34 
__uöt64_t
 
	mhc_ªqqd_vÆue
;

36 
__uöt64_t
 
	mªqqd_rsvd
: 3,

37 
	mªqqd_niq_rq
: 6,

38 
	mªqqd_noq_rqa
: 6,

39 
	mªqqd_noq_rqb
: 6,

40 
	mªqqd_piq_rq
: 6,

41 
	mªqqd_poq_rq
: 7,

42 
	mªqqd_iiq_rq
: 6,

43 
	mªqqd_ioq_rq
: 7,

44 
	mªqqd_miq_rqh
: 5,

45 
	mªqqd_miq_rqd
: 6,

46 
	mªqqd_moq_rq
: 6;

47 } 
	mhc_ªqqd_fõlds
;

48 } 
	thubc‹e_ªqqd_t
;

50 
	uhubc‹e_ªpqd_u
 {

51 
__uöt64_t
 
	mhc_ªpqd_vÆue
;

53 
__uöt64_t
 
	mªpqd_rsvd
: 3,

54 
	mªpqd_niq_Ω
: 6,

55 
	mªpqd_noq_Ωa
: 6,

56 
	mªpqd_noq_Ωb
: 6,

57 
	mªpqd_piq_Ω
: 6,

58 
	mªpqd_poq_Ω
: 7,

59 
	mªpqd_iiq_Ω
: 6,

60 
	mªpqd_ioq_Ω
: 7,

61 
	mªpqd_miq_Ωh
: 5,

62 
	mªpqd_miq_Ωd
: 6,

63 
	mªpqd_moq_Ω
: 6;

64 } 
	mhc_ªpqd_fõlds
;

65 } 
	thubc‹e_ªpqd_t
;

67 
	uhubc‹e_fifod_u
 {

68 
__uöt64_t
 
	mhc_fifod_vÆue
;

70 
__uöt64_t
 
	mfifod_rsvd1
: 1,

71 
	mfifod_ioq_thr
: 7,

72 
	mfifod_rsvd2
: 3,

73 
	mfifod_miq_hdr
: 5,

74 
	mfifod_rsvd3
: 2,

75 
	mfifod_miq_d©
: 6,

76 
	mfifod_rsvd4
: 2,

77 
	mfifod_niq_Ωl
: 6,

78 
	mfifod_rsvd5
: 3,

79 
	mfifod_niq_ªq
: 5,

80 
	mfifod_rsvd6
: 2,

81 
	mfifod_piq_Ωl
: 6,

82 
	mfifod_rsvd7
: 3,

83 
	mfifod_piq_ªq
: 5,

84 
	mfifod_rsvd8
: 2,

85 
	mfifod_iiq_fif
: 6;

86 } 
	mhc_fifod_fõlds
;

87 } 
	thubc‹e_fifod_t
;

	@/usr/include/sys/SN/SN0/hubio.h

13 #i‚def 
__SYS_SN_SN0_HUBIO_H__


14 
	#__SYS_SN_SN0_HUBIO_H__


	)

29 
	#IIO_WIDGET
 
IIO_WID


	)

30 
	#IIO_WIDGET_STAT
 
IIO_WSTAT


	)

31 
	#IIO_WIDGET_CTRL
 
IIO_WCR


	)

32 
	#IIO_WIDGET_TOUT
 
IIO_WRTO


	)

33 
	#IIO_WIDGET_FLUSH
 
IIO_WTFR


	)

34 
	#IIO_PROTECT
 
IIO_ILAPR


	)

35 
	#IIO_PROTECT_OVRRD
 
IIO_ILAPO


	)

36 
	#IIO_OUTWIDGET_ACCESS
 
IIO_IOWA


	)

37 
	#IIO_INWIDGET_ACCESS
 
IIO_IIWA


	)

38 
	#IIO_INDEV_ERR_MASK
 
IIO_IIDEM


	)

39 
	#IIO_LLP_CSR
 
IIO_ILCSR


	)

40 
	#IIO_LLP_LOG
 
IIO_ILLR


	)

41 
	#IIO_XTALKCC_TOUT
 
IIO_IXCC


	)

42 
	#IIO_XTALKTT_TOUT
 
IIO_IXTT


	)

43 
	#IIO_IO_ERR_CLR
 
IIO_IECLR


	)

44 
	#IIO_BTE_CRB_CNT
 
IIO_IBCN


	)

46 
	#IIO_LLP_CSR_IS_UP
 0x00002000

	)

47 
	#IIO_LLP_CSR_LLP_STAT_MASK
 0x00003000

	)

48 
	#IIO_LLP_CSR_LLP_STAT_SHFT
 12

	)

51 
	#IIO_PROTECT_OVRRD_KEY
 0x53474972756c6573uŒ

	)

54 
	#IIO_BTE_STAT_0
 
IIO_IBLS_0


	)

55 
	#IIO_BTE_SRC_0
 
IIO_IBSA_0


	)

56 
	#IIO_BTE_DEST_0
 
IIO_IBDA_0


	)

57 
	#IIO_BTE_CTRL_0
 
IIO_IBCT_0


	)

58 
	#IIO_BTE_NOTIFY_0
 
IIO_IBNA_0


	)

59 
	#IIO_BTE_INT_0
 
IIO_IBIA_0


	)

60 
	#IIO_BTE_OFF_0
 0

	)

61 
	#IIO_BTE_OFF_1
 
IIO_IBLS_1
 - 
IIO_IBLS_0


	)

64 
	#BTEOFF_STAT
 0

	)

65 
	#BTEOFF_SRC
 (
IIO_BTE_SRC_0
 - 
IIO_BTE_STAT_0
)

	)

66 
	#BTEOFF_DEST
 (
IIO_BTE_DEST_0
 - 
IIO_BTE_STAT_0
)

	)

67 
	#BTEOFF_CTRL
 (
IIO_BTE_CTRL_0
 - 
IIO_BTE_STAT_0
)

	)

68 
	#BTEOFF_NOTIFY
 (
IIO_BTE_NOTIFY_0
 - 
IIO_BTE_STAT_0
)

	)

69 
	#BTEOFF_INT
 (
IIO_BTE_INT_0
 - 
IIO_BTE_STAT_0
)

	)

78 
	#IIO_BASE
 0x400000

	)

79 
	#IIO_BASE_BTE0
 0x410000

	)

80 
	#IIO_BASE_BTE1
 0x420000

	)

81 
	#IIO_BASE_PERF
 0x430000

	)

82 
	#IIO_PERF_CNT
 0x430008

	)

84 
	#IO_PERF_SETS
 32

	)

86 
	#IIO_WID
 0x400000

	)

87 
	#IIO_WSTAT
 0x400008

	)

88 
	#IIO_WCR
 0x400020

	)

90 
	#IIO_WSTAT_ECRAZY
 (1ULL << 32Ë

	)

91 
	#IIO_WSTAT_TXRETRY
 (1ULL << 9Ë

	)

92 
	#IIO_WSTAT_TXRETRY_MASK
 (0x7F)

	)

93 
	#IIO_WSTAT_TXRETRY_SHFT
 (16)

	)

94 
	#IIO_WSTAT_TXRETRY_CNT
(
w
Ë(((wË>> 
IIO_WSTAT_TXRETRY_SHFT
) & \

95 
IIO_WSTAT_TXRETRY_MASK
)

	)

97 
	#IIO_ILAPR
 0x400100

	)

98 
	#IIO_ILAPO
 0x400108

	)

99 
	#IIO_IOWA
 0x400110

	)

100 
	#IIO_IIWA
 0x400118

	)

101 
	#IIO_IIDEM
 0x400120

	)

102 
	#IIO_ILCSR
 0x400128

	)

103 
	#IIO_ILLR
 0x400130

	)

104 
	#IIO_IIDSR
 0x400138

	)

106 
	#IIO_IIBUSERR
 0x1400208

	)

109 
	#IIO_IIWA_WIDGET
(
_w
Ë((
uöt64_t
)(1ULL << _w))

	)

111 
	#IIO_IOWA_WIDGET
(
_w
Ë((
uöt64_t
)(1ULL << _w))

	)

117 
	#IIO_IIDEM_WIDGETDEV_MASK
(
w
, 
d
Ë((
uöt64_t
)(1ULL << (8 * ((wË- 8Ë+ (d))))

	)

120 
	#IIO_IIDSR_SENT_SHIFT
 28

	)

121 
	#IIO_IIDSR_SENT_MASK
 0x10000000

	)

122 
	#IIO_IIDSR_ENB_SHIFT
 24

	)

123 
	#IIO_IIDSR_ENB_MASK
 0x01000000

	)

124 
	#IIO_IIDSR_NODE_SHIFT
 8

	)

125 
	#IIO_IIDSR_NODE_MASK
 0x0000ff00

	)

126 
	#IIO_IIDSR_LVL_SHIFT
 0

	)

127 
	#IIO_IIDSR_LVL_MASK
 0x0000003f

	)

131 
	#IIO_IGFX_0
 0x400140

	)

132 
	#IIO_IGFX_1
 0x400148

	)

133 
	#IIO_IGFX_W_NUM_BITS
 4

	)

134 
	#IIO_IGFX_W_NUM_MASK
 ((1<<
IIO_IGFX_W_NUM_BITS
)-1)

	)

135 
	#IIO_IGFX_W_NUM_SHIFT
 0

	)

136 
	#IIO_IGFX_N_NUM_BITS
 9

	)

137 
	#IIO_IGFX_N_NUM_MASK
 ((1<<
IIO_IGFX_N_NUM_BITS
)-1)

	)

138 
	#IIO_IGFX_N_NUM_SHIFT
 4

	)

139 
	#IIO_IGFX_P_NUM_BITS
 1

	)

140 
	#IIO_IGFX_P_NUM_MASK
 ((1<<
IIO_IGFX_P_NUM_BITS
)-1)

	)

141 
	#IIO_IGFX_P_NUM_SHIFT
 16

	)

142 
	#IIO_IGFX_VLD_BITS
 1

	)

143 
	#IIO_IGFX_VLD_MASK
 ((1<<
IIO_IGFX_VLD_BITS
)-1)

	)

144 
	#IIO_IGFX_VLD_SHIFT
 20

	)

145 
	#IIO_IGFX_INIT
(
widgë
, 
node
, 
˝u
, 
vÆid
) (\

146 (((
widgë
Ë& 
IIO_IGFX_W_NUM_MASK
Ë<< 
IIO_IGFX_W_NUM_SHIFT
) | \

147 (((
node
Ë& 
IIO_IGFX_N_NUM_MASK
Ë<< 
IIO_IGFX_N_NUM_SHIFT
) | \

148 (((
˝u
Ë& 
IIO_IGFX_P_NUM_MASK
Ë<< 
IIO_IGFX_P_NUM_SHIFT
) | \

149 (((
vÆid
Ë& 
IIO_IGFX_VLD_MASK
Ë<< 
IIO_IGFX_VLD_SHIFT
Ë)

	)

152 
	#IIO_SCRATCH_REG0
 0x400150

	)

153 
	#IIO_SCRATCH_REG1
 0x400158

	)

154 
	#IIO_SCRATCH_MASK
 0x0000000f00f11fff

	)

156 
	#IIO_SCRATCH_BIT0_0
 0x0000000800000000

	)

157 
	#IIO_SCRATCH_BIT0_1
 0x0000000400000000

	)

158 
	#IIO_SCRATCH_BIT0_2
 0x0000000200000000

	)

159 
	#IIO_SCRATCH_BIT0_3
 0x0000000100000000

	)

160 
	#IIO_SCRATCH_BIT0_4
 0x0000000000800000

	)

161 
	#IIO_SCRATCH_BIT0_5
 0x0000000000400000

	)

162 
	#IIO_SCRATCH_BIT0_6
 0x0000000000200000

	)

163 
	#IIO_SCRATCH_BIT0_7
 0x0000000000100000

	)

164 
	#IIO_SCRATCH_BIT0_8
 0x0000000000010000

	)

165 
	#IIO_SCRATCH_BIT0_9
 0x0000000000001000

	)

166 
	#IIO_SCRATCH_BIT0_R
 0x0000000000000fff

	)

169 
	#IIO_NUM_ITTES
 7

	)

176 
	#HUB_NUM_BIG_WINDOW
 
IIO_NUM_ITTES
 - 1

	)

181 
	#SWIN0_BIGWIN
 
HUB_NUM_BIG_WINDOW


	)

183 
	#ILCSR_WARM_RESET
 0x100

	)

187 #ifde‡
_LANGUAGE_C


189 
	uhubii_wid_u
 {

190 
__uöt64_t
 
	mwid_ªg_vÆue
;

192 
__uöt64_t
 
	mwid_rsvd
: 32,

193 
	mwid_ªv_num
: 4,

194 
	mwid_∑π_num
: 16,

195 
	mwid_mfg_num
: 11,

196 
	mwid_rsvd1
: 1;

197 } 
	mwid_fõlds_s
;

198 } 
	thubii_wid_t
;

201 
	uhubii_w¸_u
 {

202 
__uöt64_t
 
	mw¸_ªg_vÆue
;

204 
__uöt64_t
 
	mw¸_rsvd
: 41,

205 
	mw¸_e_thªsh
: 5,

206 
	mw¸_dú_c⁄
: 1,

207 
	mw¸_f_bad_pkt
: 1,

208 
	mw¸_xb¨_¸d
: 3,

209 
	mw¸_rsvd1
: 8,

210 
	mw¸_èg_mode
: 1,

211 
	mw¸_widgë_id
: 4;

212 } 
	mw¸_fõlds_s
;

213 } 
	thubii_w¸_t
;

215 
	#iw¸_dú_c⁄
 
w¸_fõlds_s
.
w¸_dú_c⁄


	)

217 
	uhubii_w°©_u
 {

218 
__uöt64_t
 
	mªg_vÆue
;

220 
__uöt64_t
 
	mrsvd1
: 31,

221 
	m¸azy
: 1,

222 
	mrsvd2
: 8,

223 
	mŒp_tx_˙t
: 8,

224 
	mrsvd3
: 6,

225 
	mtx_max_πry
: 1,

226 
	mrsvd4
: 2,

227 
	mxt_èû_to
: 1,

228 
	mxt_¸d_to
: 1,

229 
	m≥ndög
: 4;

230 } 
	mw°©_fõlds_s
;

231 } 
	thubii_w°©_t
;

234 
	uhubii_ûc§_u
 {

235 
__uöt64_t
 
	mic§_ªg_vÆue
;

237 
__uöt64_t
 
	mic§_rsvd
: 22,

238 
	mic§_max_bur°
: 10,

239 
	mic§_rsvd4
: 6,

240 
	mic§_max_ªåy
: 10,

241 
	mic§_rsvd3
: 2,

242 
	mic§_ k_°©
: 2,

243 
	mic§_bm8
: 1,

244 
	mic§_Œp_í
: 1,

245 
	mic§_rsvd2
: 1,

246 
	mic§_wrm_ª£t
: 1,

247 
	mic§_rsvd1
: 2,

248 
	mic§_nuŒ_to
: 6;

250 } 
	mic§_fõlds_s
;

251 } 
	thubii_ûc§_t
;

254 
	uhubii_iowa_u
 {

255 
__uöt64_t
 
	miowa_ªg_vÆue
;

257 
__uöt64_t
 
	miowa_rsvd
: 48,

258 
	miowa_wxﬂc
: 8,

259 
	miowa_rsvd1
: 7,

260 
	miowa_w0ﬂc
: 1;

261 } 
	miowa_fõlds_s
;

262 } 
	thubii_iowa_t
;

264 
	uhubii_iiwa_u
 {

265 
__uöt64_t
 
	miiwa_ªg_vÆue
;

267 
__uöt64_t
 
	miiwa_rsvd
: 48,

268 
	miiwa_wxüc
: 8,

269 
	miiwa_rsvd1
: 7,

270 
	miiwa_w0üc
: 1;

271 } 
	miiwa_fõlds_s
;

272 } 
	thubii_iiwa_t
;

274 
	uhubii_ûÃ_u
 {

275 
__uöt64_t
 
	mûÃ_ªg_vÆue
;

277 
__uöt64_t
 
	mûÃ_rsvd
: 32,

278 
	mûÃ_cb_˙t
: 16,

279 
	mûÃ_¢_˙t
: 16;

280 } 
	mûÃ_fõlds_s
;

281 } 
	thubii_ûÃ_t
;

288 
	uio_≥rf_£l
 {

289 
__uöt64_t
 
	m≥rf_£l_ªg
;

291 
__uöt64_t
 
	m≥rf_rsvd
 : 48,

292 
	m≥rf_ic˘
 : 8,

293 
	m≥rf_ù¥1
 : 4,

294 
	m≥rf_ù¥0
 : 4;

295 } 
	m≥rf_£l_bôs
;

296 } 
	tio_≥rf_£l_t
;

301 
	uio_≥rf_˙t
 {

302 
__uöt64_t
 
	m≥rf_˙t
;

304 
__uöt64_t
 
	m≥rf_rsvd1
 : 32,

305 
	m≥rf_rsvd2
 : 12,

306 
	m≥rf_˙t
 : 20;

307 } 
	m≥rf_˙t_bôs
;

309 } 
	tio_≥rf_˙t_t
;

314 
	#LNK_STAT_WORKING
 0x2

	)

316 
	#IIO_LLP_CB_MAX
 0xffff

	)

317 
	#IIO_LLP_SN_MAX
 0xffff

	)

320 
	#IIO_NUM_IPRBS
 (9)

	)

321 
	#IIO_IOPRB_0
 0x400198

	)

322 
	#IIO_IOPRB_8
 0x4001a0

	)

323 
	#IIO_IOPRB_9
 0x4001a8

	)

324 
	#IIO_IOPRB_A
 0x4001b0

	)

325 
	#IIO_IOPRB_B
 0x4001b8

	)

326 
	#IIO_IOPRB_C
 0x4001c0

	)

327 
	#IIO_IOPRB_D
 0x4001c8

	)

328 
	#IIO_IOPRB_E
 0x4001d0

	)

329 
	#IIO_IOPRB_F
 0x4001d8

	)

332 
	#IIO_IXCC
 0x4001e0

	)

333 
	#IIO_IXTCC
 
IIO_IXCC


	)

334 
	#IIO_IMEM
 0x4001e8

	)

335 
	#IIO_IXTT
 0x4001f0

	)

336 
	#IIO_IECLR
 0x4001f8

	)

337 
	#IIO_IBCN
 0x400200

	)

342 
	#IIO_IMEM_W0ESD
 0x1

	)

343 
	#IIO_IMEM_B0ESD
 (1 << 4Ë

	)

344 
	#IIO_IMEM_B1ESD
 (1 << 8Ë

	)

347 
	#IIO_IPCA
 0x400300

	)

348 
	#IIO_NUM_PRTES
 8

	)

349 
	#IIO_PRTE_0
 0x400308

	)

350 
	#IIO_PRTE
(
_x
Ë(
IIO_PRTE_0
 + (8 * (_x)))

	)

351 
	#IIO_WIDPRTE
(
x
Ë
	`IIO_PRTE
(((xË- 8)Ë

	)

352 
	#IIO_IPDR
 0x400388

	)

353 
	#IIO_ICDR
 0x400390

	)

354 
	#IIO_IFDR
 0x400398

	)

355 
	#IIO_IIAP
 0x4003a0

	)

356 
	#IIO_IMMR
 
IIO_IIAP


	)

357 
	#IIO_ICMR
 0x4003a8

	)

358 
	#IIO_ICCR
 0x4003b0

	)

359 
	#IIO_ICTO
 0x4003b8

	)

360 
	#IIO_ICTP
 0x4003c0

	)

366 
	#IIO_ICMR_PC_VLD_SHFT
 36

	)

367 
	#IIO_ICMR_PC_VLD_MASK
 (0x7fffUL << 
IIO_ICMR_PC_VLD_SHFT
)

	)

369 
	#IIO_ICMR_CRB_VLD_SHFT
 20

	)

370 
	#IIO_ICMR_CRB_VLD_MASK
 (0x7fffUL << 
IIO_ICMR_CRB_VLD_SHFT
)

	)

372 
	#IIO_ICMR_FC_CNT_SHFT
 16

	)

373 
	#IIO_ICMR_FC_CNT_MASK
 (0x‡<< 
IIO_ICMR_FC_CNT_SHFT
)

	)

375 
	#IIO_ICMR_C_CNT_SHFT
 4

	)

376 
	#IIO_ICMR_C_CNT_MASK
 (0x‡<< 
IIO_ICMR_C_CNT_SHFT
)

	)

378 
	#IIO_ICMR_P_CNT_SHFT
 0

	)

379 
	#IIO_ICMR_P_CNT_MASK
 (0x‡<< 
IIO_ICMR_P_CNT_SHFT
)

	)

381 
	#IIO_ICMR_PRECISE
 (1UL << 52)

	)

382 
	#IIO_ICMR_CLR_RPPD
 (1UL << 13)

	)

383 
	#IIO_ICMR_CLR_RQPD
 (1UL << 12)

	)

388 
	#IIO_IPDR_PND
 (1 << 4)

	)

393 
	#IIO_ICDR_PND
 (1 << 4)

	)

398 
	#IIO_ICCR_PENDING
 (0x10000)

	)

399 
	#IIO_ICCR_CMD_MASK
 (0xFF)

	)

400 
	#IIO_ICCR_CMD_SHFT
 (7)

	)

401 
	#IIO_ICCR_CMD_NOP
 (0x0Ë

	)

402 
	#IIO_ICCR_CMD_WAKE
 (0x100Ë

	)

403 
	#IIO_ICCR_CMD_TIMEOUT
 (0x200Ë

	)

404 
	#IIO_ICCR_CMD_EJECT
 (0x400Ë

	)

407 
	#IIO_ICCR_CMD_FLUSH
 (0x800)

	)

414 
	#IIO_NUM_CRBS
 15

	)

415 
	#IIO_NUM_NORMAL_CRBS
 12

	)

416 
	#IIO_NUM_PC_CRBS
 4

	)

417 
	#IIO_ICRB_OFFSET
 8

	)

418 
	#IIO_ICRB_0
 0x400400

	)

423 
	#IIO_ICRB_A
(
_x
Ë(
IIO_ICRB_0
 + (4 * 
IIO_ICRB_OFFSET
 * (_x)))

	)

424 
	#IIO_ICRB_B
(
_x
Ë(
	`IIO_ICRB_A
(_xË+ 1*
IIO_ICRB_OFFSET
)

	)

425 
	#IIO_ICRB_C
(
_x
Ë(
	`IIO_ICRB_A
(_xË+ 2*
IIO_ICRB_OFFSET
)

	)

426 
	#IIO_ICRB_D
(
_x
Ë(
	`IIO_ICRB_A
(_xË+ 3*
IIO_ICRB_OFFSET
)

	)

459 #ifde‡
_LANGUAGE_C


460 
	ui¸ba_u
 {

462 
__uöt64_t
 
	mªg_vÆue
;

464 
__uöt64_t
 
	mªsvd
: 6,

465 
	m°Æl_bã0
: 1,

466 
	m°Æl_bã1
: 1,

467 
	mîr‹
: 1,

468 
	mecode
: 3,

469 
	m ëu˚
: 1,

470 
	mm¨k
: 1,

471 
	mxîr
: 1,

472 
	msidn
: 4,

473 
	mäum
: 5,

474 
	maddr
: 38,

475 
	mvÆid
: 1,

476 
	miow
: 1;

477 } 
	mi¸ba_fõlds_s
;

478 } 
	ti¸ba_t
;

483 
	uh1_i¸ba_u
 {

485 
__uöt64_t
 
	mªg_vÆue
;

488 
__uöt64_t
 
	mªsvd
: 6,

489 
	munu£d
: 1,

490 
	mîr‹
: 1,

491 
	mecode
: 4,

492 
	m ëu˚
: 1,

493 
	mm¨k
: 1,

494 
	mxîr
: 1,

495 
	msidn
: 4,

496 
	mäum
: 5,

497 
	maddr
: 38,

498 
	mvÆid
: 1,

499 
	miow
: 1;

500 } 
	mh1_i¸ba_fõlds_s
;

501 } 
	th1_i¸ba_t
;

504 
	#ICRBN_A_CERR_SHFT
 54

	)

505 
	#ICRBN_A_ERR_MASK
 0x3ff

	)

510 
	#a_ªgvÆue
 
ªg_vÆue


	)

511 
	#a_îr‹
 
i¸ba_fõlds_s
.
îr‹


	)

512 
	#a_ecode
 
i¸ba_fõlds_s
.
ecode


	)

513 
	#a_ ëu˚
 
i¸ba_fõlds_s
.
 ëu˚


	)

514 
	#a_m¨k
 
i¸ba_fõlds_s
.
m¨k


	)

515 
	#a_xîr
 
i¸ba_fõlds_s
.
xîr


	)

516 
	#a_sidn
 
i¸ba_fõlds_s
.
sidn


	)

517 
	#a_äum
 
i¸ba_fõlds_s
.
äum


	)

518 
	#a_addr
 
i¸ba_fõlds_s
.
addr


	)

519 
	#a_vÆid
 
i¸ba_fõlds_s
.
vÆid


	)

520 
	#a_iow
 
i¸ba_fõlds_s
.
iow


	)

528 
	#BRIDGE_DMA_WRITE_REQ_TNUM_MIN
 0x10

	)

529 
	#BRIDGE_DMA_WRITE_REQ_TNUM_MAX
 0x17

	)

530 
	#TNUM_TO_WIDGET_DEV
(
_äum
Ë(_äum - 
BRIDGE_DMA_WRITE_REQ_TNUM_MIN
)

	)

534 
	#IIO_ICRB_ADDR_SHFT
 2

	)

539 
	#IIO_ICRB_ECODE_DERR
 0

	)

540 
	#IIO_ICRB_ECODE_PERR
 1

	)

541 
	#IIO_ICRB_ECODE_WERR
 2

	)

544 
	#IIO_ICRB_ECODE_AERR
 3

	)

545 
	#IIO_ICRB_ECODE_PWERR
 4

	)

546 
	#IIO_ICRB_ECODE_PRERR
 5

	)

547 
	#IIO_ICRB_ECODE_TOUT
 6

	)

548 
	#IIO_ICRB_ECODE_XTERR
 7

	)

555 #ifde‡
_LANGUAGE_C


556 
	ui¸bb_u
 {

557 
__uöt64_t
 
	mªg_vÆue
;

559 
__uöt64_t
 
	mrsvd1
: 5,

560 
	mbãnum
: 1,

561 
	mcohå™s
: 1,

562 
	mxtsize
: 2,

568 
	m§˙ode
: 9,

569 
	m§cöô
: 2,

572 
	mu£ﬁd
: 1,

573 
	mimsgty≥
: 2,

576 
	mimsg
: 8,

577 
	möôüt‹
: 3,

580 
	mªqty≥
: 5,

583 
	mrsvd2
: 7,

584 
	mack˙t
: 11,

585 
	mª•
: 1,

586 
	mack
: 1,

587 
	mhﬁd
: 1,

588 
	mwb_≥nd
:1,

589 
	mötvn
: 1,

590 
	m°Æl_ib
: 1,

591 
	m°Æl_öå
: 1;

592 } 
	mi¸bb_fõld_s
;

593 }
	ti¸bb_t
;

598 
	uh1_i¸bb_u
 {

599 
__uöt64_t
 
	mªg_vÆue
;

601 
__uöt64_t
 
	mrsvd1
: 5,

602 
	mbãnum
: 1,

603 
	mcohå™s
: 1,

604 
	mxtsize
: 2,

610 
	m§˙ode
: 9,

611 
	m§cöô
: 2,

614 
	mu£ﬁd
: 1,

615 
	mimsgty≥
: 2,

618 
	mimsg
: 8,

619 
	möôüt‹
: 3,

622 
	mrsvd2
: 1,

623 
	mpˇche
: 1,

624 
	mªqty≥
: 5,

627 
	m°l_ib
: 1,

628 
	m°l_öå
: 1,

629 
	m°l_bã0
: 1,

630 
	m°l_bã1
: 1,

631 
	möåvn
: 1,

632 
	mack˙t
: 11,

633 
	mª•
: 1,

634 
	mack
: 1,

635 
	mhﬁd
: 1,

636 
	mwb_≥nd
:1,

637 
	m¶ìp
: 1,

638 
	m≤d_ª∂y
: 1,

639 
	m≤d_ªq
: 1;

640 } 
	mh1_i¸bb_fõld_s
;

641 }
	th1_i¸bb_t
;

644 
	#b_ªgvÆue
 
ªg_vÆue


	)

645 
	#b_imsgty≥
 
i¸bb_fõld_s
.
imsgty≥


	)

646 
	#b_bãnum
 
i¸bb_fõld_s
.
bãnum


	)

647 
	#b_cohå™s
 
i¸bb_fõld_s
.
cohå™s


	)

648 
	#b_xtsize
 
i¸bb_fõld_s
.
xtsize


	)

649 
	#b_§˙ode
 
i¸bb_fõld_s
.
§˙ode


	)

650 
	#b_§cöô
 
i¸bb_fõld_s
.
§cöô


	)

651 
	#b_imsgty≥
 
i¸bb_fõld_s
.
imsgty≥


	)

652 
	#b_imsg
 
i¸bb_fõld_s
.
imsg


	)

653 
	#b_öôüt‹
 
i¸bb_fõld_s
.
öôüt‹


	)

660 
	#IIO_ICRB_XTSIZE_DW
 0

	)

661 
	#IIO_ICRB_XTSIZE_32
 1

	)

662 
	#IIO_ICRB_XTSIZE_128
 2

	)

667 
	#IIO_ICRB_PROC0
 0

	)

668 
	#IIO_ICRB_PROC1
 1

	)

669 
	#IIO_ICRB_GB_REQ
 2

	)

670 
	#IIO_ICRB_IO_REQ
 3

	)

675 
	#IIO_ICRB_IMSGT_XTALK
 0

	)

676 
	#IIO_ICRB_IMSGT_BTE
 1

	)

677 
	#IIO_ICRB_IMSGT_SN0NET
 2

	)

678 
	#IIO_ICRB_IMSGT_CRB
 3

	)

683 
	#IIO_ICRB_INIT_XTALK
 0

	)

684 
	#IIO_ICRB_INIT_BTE0
 0x1

	)

685 
	#IIO_ICRB_INIT_SN0NET
 0x2

	)

686 
	#IIO_ICRB_INIT_CRB
 0x3

	)

687 
	#IIO_ICRB_INIT_BTE1
 0x5

	)

693 
	#IIO_ICRB_REQ_DWRD
 0

	)

694 
	#IIO_ICRB_REQ_QCLRD
 1

	)

695 
	#IIO_ICRB_REQ_BLKRD
 2

	)

696 
	#IIO_ICRB_REQ_RSHU
 6

	)

697 
	#IIO_ICRB_REQ_REXU
 7

	)

698 
	#IIO_ICRB_REQ_RDEX
 8

	)

699 
	#IIO_ICRB_REQ_WINC
 9

	)

700 
	#IIO_ICRB_REQ_BWINV
 10

	)

701 
	#IIO_ICRB_REQ_PIORD
 11

	)

702 
	#IIO_ICRB_REQ_PIOWR
 12

	)

703 
	#IIO_ICRB_REQ_PRDM
 13

	)

704 
	#IIO_ICRB_REQ_PWRM
 14

	)

705 
	#IIO_ICRB_REQ_PTPWR
 15

	)

706 
	#IIO_ICRB_REQ_WB
 16

	)

707 
	#IIO_ICRB_REQ_DEX
 17

	)

713 #ifde‡
_LANGUAGE_C


714 
	ui¸bc_s
 {

715 
__uöt64_t
 
	mªg_vÆue
;

717 
__uöt64_t
 
	mrsvd
: 6,

718 
	m¶ìp
: 1,

719 
	m¥i˙t
:4,

720 
	m¥ùsc
: 4,

721 
	mbã›
: 1,

722 
	mpush_be
: 34,

728 
	msuµl
: 11,

729 
	mb¨r›
: 1,

730 
	md‹e•
: 1,

731 
	mgbr
: 1;

732 } 
	mi¸bc_fõld_s
;

733 } 
	ti¸bc_t
;

735 
	#c_ªgvÆue
 
ªg_vÆue


	)

736 
	#c_¥i˙t
 
i¸bc_fõld_s
.
¥i˙t


	)

737 
	#c_¥ùsc
 
i¸bc_fõld_s
.
¥ùsc


	)

738 
	#c_bã›
 
i¸bc_fõld_s
.
bã›


	)

739 
	#c_bãaddr
 
i¸bc_fõld_s
.
push_be


	)

740 
	#c_bíabÀ
 
i¸bc_fõld_s
.
push_be


	)

741 
	#c_suµl
 
i¸bc_fõld_s
.
suµl


	)

742 
	#c_b¨r›
 
i¸bc_fõld_s
.
b¨r›


	)

743 
	#c_d‹e•
 
i¸bc_fõld_s
.
d‹e•


	)

744 
	#c_gbr
 
i¸bc_fõld_s
.
gbr


	)

751 #ifde‡
_LANGUAGE_C


752 
	ui¸bd_s
 {

753 
__uöt64_t
 
	mªg_vÆue
;

755 
__uöt64_t
 
	mrsvd
: 38,

756 
	mtoutvld
: 1,

757 
	m˘xtvld
: 1,

758 
	mrsvd2
: 1,

759 
	mc⁄ãxt
: 15,

765 
	mtimeout
: 8;

766 } 
	mi¸bd_fõld_s
;

767 } 
	ti¸bd_t
;

769 
	#d_ªgvÆue
 
ªg_vÆue


	)

770 
	#i¸bd_toutvld
 
i¸bd_fõld_s
.
toutvld


	)

771 
	#i¸bd_˘xtvld
 
i¸bd_fõld_s
.
˘xtvld


	)

772 
	#i¸bd_c⁄ãxt
 
i¸bd_fõld_s
.
c⁄ãxt


	)

775 
	uhubii_ifdr_u
 {

776 
__uöt64_t
 
	mhi_ifdr_vÆue
;

778 
__uöt64_t
 
	mifdr_rsvd
: 49,

779 
	mifdr_maxΩ
: 7,

780 
	mifdr_rsvd1
: 1,

781 
	mifdr_maxrq
: 7;

782 } 
	mhi_ifdr_fõlds
;

783 } 
	thubii_ifdr_t
;

792 
	#IIO_IBLS_0
 0x410000

	)

793 
	#IIO_IBSA_0
 0x410008

	)

794 
	#IIO_IBDA_0
 0x410010

	)

795 
	#IIO_IBCT_0
 0x410018

	)

796 
	#IIO_IBNA_0
 0x410020

	)

797 
	#IIO_IBNR_0
 
IIO_IBNA_0


	)

798 
	#IIO_IBIA_0
 0x410028

	)

800 
	#IIO_IBLS_1
 0x420000

	)

801 
	#IIO_IBSA_1
 0x420008

	)

802 
	#IIO_IBDA_1
 0x420010

	)

803 
	#IIO_IBCT_1
 0x420018

	)

804 
	#IIO_IBNA_1
 0x420020

	)

805 
	#IIO_IBNR_1
 
IIO_IBNA_1


	)

806 
	#IIO_IBIA_1
 0x420028

	)

811 
	#IIO_IPCR
 0x430000

	)

812 
	#IIO_IPPR
 0x430008

	)

817 
	#IECLR_BTE1
 (1 << 18Ë

	)

818 
	#IECLR_BTE0
 (1 << 17Ë

	)

819 
	#IECLR_CRAZY
 (1 << 16Ë

	)

820 
	#IECLR_PRB_F
 (1 << 15Ë

	)

821 
	#IECLR_PRB_E
 (1 << 14Ë

	)

822 
	#IECLR_PRB_D
 (1 << 13Ë

	)

823 
	#IECLR_PRB_C
 (1 << 12Ë

	)

824 
	#IECLR_PRB_B
 (1 << 11Ë

	)

825 
	#IECLR_PRB_A
 (1 << 10Ë

	)

826 
	#IECLR_PRB_9
 (1 << 9Ë

	)

827 
	#IECLR_PRB_8
 (1 << 8Ë

	)

828 
	#IECLR_PRB_0
 (1 << 0Ë

	)

834 #ifdef 
_LANGUAGE_C


835 
	uùπe_a
 {

836 
__uöt64_t
 
	míåy
;

838 
__uöt64_t
 
	mrsvd1
 : 7,

839 
	mvÆid
 : 1,

840 
	mrsvd2
 : 1,

841 
	m§˙ode
 : 9,

842 
	möôüt‹
 : 2,

843 
	mrsvd3
 : 3,

844 
	maddr
 : 38,

845 
	mrsvd4
 : 3;

846 } 
	mùπe_fõlds
;

847 } 
	tùπe_a_t
;

848 
	#ùπe_vÆid
 
ùπe_fõlds
.
vÆid


	)

849 
	#ùπe_timeout
 
ùπe_fõlds
.
timeout


	)

850 
	#ùπe_§˙ode
 
ùπe_fõlds
.
§˙ode


	)

851 
	#ùπe_öô
 
ùπe_fõlds
.
öôüt‹


	)

852 
	#ùπe_addr
 
ùπe_fõlds
.
addr


	)

855 
	#IPRTE_ADDRSHFT
 3

	)

861 #ifdef 
_LANGUAGE_C


867 
	uùrb_u
 {

868 
__uöt64_t
 
	mªg_vÆue
;

870 
__uöt64_t
 
	mrsvd1
: 15,

871 
	mîr‹
: 1,

872 
	movÊow
: 5,

873 
	mfúe_™d_f‹gë
: 1,

874 
	mmode
: 2,

875 
	mrsvd2
: 2,

876 
	mb«k˘r
: 14,

877 
	mrsvd3
: 2,

878 
	m™ak˘r
: 14,

879 
	mxèlk˘r
: 8;

880 } 
	mùrb_fõlds_s
;

881 } 
	tùrb_t
;

883 
	#ùrb_ªgvÆ
 
ªg_vÆue


	)

885 
	#ùrb_îr‹
 
ùrb_fõlds_s
.
îr‹


	)

886 
	#ùrb_ovÊow
 
ùrb_fõlds_s
.
ovÊow


	)

887 
	#ùrb_ff
 
ùrb_fõlds_s
.
fúe_™d_f‹gë


	)

888 
	#ùrb_mode
 
ùrb_fõlds_s
.
mode


	)

889 
	#ùrb_b«k˘r
 
ùrb_fõlds_s
.
b«k˘r


	)

890 
	#ùrb_™ak˘r
 
ùrb_fõlds_s
.
™ak˘r


	)

891 
	#ùrb_xèlk˘r
 
ùrb_fõlds_s
.
xèlk˘r


	)

900 
	#IPRB_MODE_NORMAL
 (0)

	)

901 
	#IPRB_MODE_COLLECT_A
 (1Ë

	)

902 
	#IPRB_MODE_SERVICE_A
 (2Ë

	)

903 
	#IPRB_MODE_SERVICE_B
 (3Ë

	)

908 #ifde‡
_LANGUAGE_C


909 
	ui¸bp_a
 {

910 
__uöt64_t
 
	mù_ªg
;

912 
__uöt64_t
 
	mîr‹
: 1,

913 
	m _u˚
: 1,

914 
	m _´
: 1,

915 
	m _wîr
:1,

916 
	m _´º
:1,

917 
	m _≥º
:1,

918 
	mtimeout
:1,

919 
	ml_bdpkt
:1,

920 
	mc_bdpkt
:1,

921 
	mc_îr
: 1,

922 
	mrsvd1
: 12,

923 
	mvÆid
: 1,

924 
	msidn
: 4,

925 
	mäum
: 5,

926 
	mbo
: 1,

927 
	mª•rqd
:1,

928 
	mgbr
: 1,

929 
	msize
: 2,

930 
	mex˛
: 4,

931 
	m°Æl
: 3,

932 
	mötvn
: 1,

933 
	mª•
: 1,

934 
	mack
: 1,

935 
	mhﬁd
: 1,

936 
	mwb
: 1,

937 
	mack_˙t
:11,

938 
	mtsˇÀr
:4;

939 } 
	mù_fmt
;

940 } 
	ti¸bp_a_t
;

945 
	#ICRBP_A_CERR_SHFT
 54

	)

946 
	#ICRBP_A_ERR_MASK
 0x3ff

	)

948 #ifde‡
_LANGUAGE_C


949 
	uhubii_id§
 {

950 
__uöt64_t
 
	miö_ªg
;

952 
__uöt64_t
 
	mrsvd1
 : 35,

953 
	mi£¡
 : 1,

954 
	mrsvd2
 : 3,

955 
	mõ«bÀ
: 1,

956 
	mrsvd
 : 7,

957 
	mnode
 : 9,

958 
	mrsvd4
 : 1,

959 
	mÀvñ
 : 7;

960 }
	miö_fmt
;

961 } 
	thubii_id§_t
;

967 
	#IBLS_BUSY
 (0x1 << 20)

	)

968 
	#IBLS_ERROR_SHFT
 16

	)

969 
	#IBLS_ERROR
 (0x1 << 
IBLS_ERROR_SHFT
)

	)

970 
	#IBLS_LENGTH_MASK
 0xffff

	)

975 
	#IBCT_POISON
 (0x1 << 8)

	)

976 
	#IBCT_NOTIFY
 (0x1 << 4)

	)

977 
	#IBCT_ZFIL_MODE
 (0x1 << 0)

	)

982 
	#IBIA_LEVEL_SHFT
 16

	)

983 
	#IBIA_LEVEL_MASK
 (0x7‡<< 
IBIA_LEVEL_SHFT
)

	)

984 
	#IBIA_NODE_ID_SHFT
 0

	)

985 
	#IBIA_NODE_ID_MASK
 (0x1ff)

	)

992 
	#HUB_NUM_WIDGET
 9

	)

993 
	#HUB_WIDGET_ID_MIN
 0x8

	)

994 
	#HUB_WIDGET_ID_MAX
 0xf

	)

996 
	#HUB_WIDGET_PART_NUM
 0xc101

	)

997 
	#MAX_HUBS_PER_XBOW
 2

	)

1002 
	#IIO_WCR_WID_GET
(
«sid
Ë(
	`REMOTE_HUB_L
“asid, 
III_WCR
Ë& 0xf)

	)

1003 
	#IIO_WST_ERROR_MASK
 (
UINT64_CAST
 1 << 32Ë

	)

1011 
	#HUBII_XBOW_CREDIT
 3

	)

1012 
	#HUBII_XBOW_REV2_CREDIT
 4

	)

1018 
	#HUB_CREDIT
 4

	)

1021 #i‡
_KERNEL


1022 #i‡
_LANGUAGE_C


1023 
	~<sys/Æíli°.h
>

1024 
	~<sys/dmam≠.h
>

1025 
	~<sys/iobus.h
>

1026 
	~<sys/pio.h
>

1027 
	~<sys/xèlk/xèlk.h
>

1028 
	~<sys/ªg.h
>

1031 
hub_piom≠_s
 *
	thub_piom≠_t
;

1033 
hub_piom≠_t


1034 
hub_piom≠_Æloc
(
vîãx_hdl_t
 
dev
,

1035 
devi˚_desc_t
 
dev_desc
,

1036 
i›addr_t
 
xèlk_addr
,

1037 
size_t
 
byã_cou¡
,

1038 
size_t
 
byã_cou¡_max
,

1039 
Êags
);

1041 
hub_piom≠_‰ì
(
hub_piom≠_t
 
hub_piom≠
);

1043 
ˇddr_t


1044 
hub_piom≠_addr
(
hub_piom≠_t
 
hub_piom≠
,

1045 
i›addr_t
 
xèlk_addr
,

1046 
size_t
 
byã_cou¡
);

1049 
hub_piom≠_d⁄e
(
hub_piom≠_t
 
hub_piom≠
);

1051 
ˇddr_t


1052 
hub_piŸøns_addr
–
vîãx_hdl_t
 
dev
,

1053 
devi˚_desc_t
 
dev_desc
,

1054 
i›addr_t
 
xèlk_addr
,

1055 
size_t
 
byã_cou¡
,

1056 
Êags
);

1060 
hub_dmam≠_s
 *
	thub_dmam≠_t
;

1062 
hub_dmam≠_t


1063 
hub_dmam≠_Æloc
–
vîãx_hdl_t
 
dev
,

1064 
devi˚_desc_t
 
dev_desc
,

1065 
size_t
 
byã_cou¡_max
,

1066 
Êags
);

1069 
hub_dmam≠_‰ì
(
hub_dmam≠_t
 
dmam≠
);

1071 
i›addr_t


1072 
hub_dmam≠_addr
–
hub_dmam≠_t
 
dmam≠
,

1073 
∑ddr_t
 
∑ddr
,

1074 
size_t
 
byã_cou¡
);

1076 
Æíli°_t


1077 
hub_dmam≠_li°
–
hub_dmam≠_t
 
dmam≠
,

1078 
Æíli°_t
 
Æíli°
,

1079 
Êags
);

1082 
hub_dmam≠_d⁄e
–
hub_dmam≠_t
 
dmam≠
);

1085 
hub_dmam≠_d⁄e
–
hub_dmam≠_t
 
dmam≠
);

1087 
i›addr_t


1088 
hub_dm©øns_addr
–
vîãx_hdl_t
 
dev
,

1089 
devi˚_desc_t
 
dev_desc
,

1090 
∑ddr_t
 
∑ddr
,

1091 
size_t
 
byã_cou¡
,

1092 
Êags
);

1094 
Æíli°_t


1095 
hub_dm©øns_li°
–
vîãx_hdl_t
 
dev
,

1096 
devi˚_desc_t
 
dev_desc
,

1097 
Æíli°_t
 
∑À∆i°
,

1098 
Êags
);

1101 
hub_dmam≠_døö
–
hub_dmam≠_t
 
m≠
);

1104 
hub_dmØddr_døö
–
vîãx_hdl_t
 
vhdl
,

1105 
∑ddr_t
 
addr
,

1106 
size_t
 
byãs
);

1109 
hub_dmÆi°_døö
–
vîãx_hdl_t
 
vhdl
,

1110 
Æíli°_t
 
li°
);

1114 
hub_öå_s
 *
	thub_öå_t
;

1116 
hub_öå_t


1117 
hub_öå_Æloc
–
vîãx_hdl_t
 
dev
,

1118 
devi˚_desc_t
 
dev_desc
,

1119 
vîãx_hdl_t
 
ow√r_dev
);

1121 
hub_öå_t


1122 
hub_öå_Æloc_nŸhd
(
vîãx_hdl_t
 
dev
,

1123 
devi˚_desc_t
 
dev_desc
,

1124 
vîãx_hdl_t
 
ow√r_dev
);

1127 
hub_öå_‰ì
(
hub_öå_t
 
öå_hdl
);

1130 
hub_öå_c⁄√˘
–
hub_öå_t
 
öå_hdl
,

1131 
öå_func_t
 
öå_func
,

1132 *
öå_¨g
,

1133 
xèlk_öå_£tfunc_t
 
£tfunc
,

1135 *
£tfunc_¨g
,

1136 *
thªad
);

1139 
hub_öå_disc⁄√˘
(
hub_öå_t
 
öå_hdl
);

1141 
vîãx_hdl_t


1142 
hub_öå_˝u_gë
(
hub_öå_t
 
öå_hdl
);

1144 
˝uid_t


1145 
hub_öå_˝uid_gë
(
hub_öå_t
 
öå_hdl
);

1150 
hub_¥ovidî_°¨tup
(
vîãx_hdl_t
 
hub
);

1153 
hub_¥ovidî_shutdown
(
vîãx_hdl_t
 
hub
);

1155 
	#HUB_PIO_CONVEYOR
 0x1

	)

1156 
	#HUB_PIO_FIRE_N_FORGET
 0x2

	)

1159 
	#HUB_WIDGET_FLAGS
 ( \

1160 
HUB_PIO_CONVEYOR
 | \

1161 
HUB_PIO_FIRE_N_FORGET
 \

1162 )

	)

1164 
	thub_widgë_Êags_t
;

1171 
hub_widgë_Êags_£t
(
«sid_t
 
«sid
,

1172 
xwidgënum_t
 
widgë_num
,

1173 
hub_widgë_Êags_t
 
Êags
);

1176 
hub_devi˚_Êags_£t
(
vîãx_hdl_t
 
widgë_dev
,

1177 
hub_widgë_Êags_t
 
Êags
);

1181 
	gio_îr‹_s
;

1182 
hub_i€º‹_h™dÀr
(
vîãx_hdl_t
, , , 
io_îr‹_s
 *);

1183 
kl_i€º‹_h™dÀr
(
˙odeid_t
, cnodeid_t, 
˝uid_t
,

1184 , 
∑ddr_t
, 
ˇddr_t
, 
i€º‹_mode_t
,

1185 
e‰ame_t
 *);

1186 
hub_îr‹_devíabÀ
(
vîãx_hdl_t
, , );

1188 
hub_widgë_ª£t
(
vîãx_hdl_t
, 
xwidgënum_t
);

1189 
hub_widgëdev_íabÀ
(
vîãx_hdl_t
, );

1190 
hub_widgëdev_shutdown
(
vîãx_hdl_t
, );

1191 
hub_dma_íabÀd
(
vîãx_hdl_t
);

1192 
is_widgë_pio_íabÀd
(
i€º‹_t
 *);

1198 
	#hubiov_to_hubv
(
hubiov
Ë
	`hwgøph_c⁄√˘±_gë
(hubiov)

	)

	@/usr/include/sys/SN/SN0/hubmd.h

13 #i‚def 
__SYS_SN_SN0_HUBMD_H__


14 
	#__SYS_SN_SN0_HUBMD_H__


	)

25 
	~<sys/R10k.h
>

27 
	#MAX_REGIONS
 64

	)

31 
	#MD_PAGE_SIZE
 4096

	)

32 
	#MD_PAGE_NUM_SHFT
 12

	)

36 
	#MD_BASE
 0x200000

	)

37 
	#MD_BASE_PERF
 0x210000

	)

38 
	#MD_BASE_JUNK
 0x220000

	)

40 
	#MD_IO_PROTECT
 0x200000

	)

41 
	#MD_IO_PROT_OVRRD
 0x200008

	)

42 
	#MD_HSPEC_PROTECT
 0x200010

	)

43 
	#MD_MEMORY_CONFIG
 0x200018

	)

44 
	#MD_REFRESH_CONTROL
 0x200020

	)

45 
	#MD_FANDOP_CAC_STAT
 0x200028

	)

46 
	#MD_MIG_DIFF_THRESH
 0x200030

	)

47 
	#MD_MIG_VALUE_THRESH
 0x200038

	)

48 
	#MD_MIG_CANDIDATE
 0x200040

	)

49 
	#MD_MIG_CANDIDATE_CLR
 0x200048

	)

50 
	#MD_DIR_ERROR
 0x200050

	)

51 
	#MD_DIR_ERROR_CLR
 0x200058

	)

52 
	#MD_PROTOCOL_ERROR
 0x200060

	)

53 
	#MD_PROTOCOL_ERROR_CLR
 0x200068

	)

54 
	#MD_MEM_ERROR
 0x200070

	)

55 
	#MD_MEM_ERROR_CLR
 0x200078

	)

56 
	#MD_MISC_ERROR
 0x200080

	)

57 
	#MD_MISC_ERROR_CLR
 0x200088

	)

58 
	#MD_MEM_DIMM_INIT
 0x200090

	)

59 
	#MD_DIR_DIMM_INIT
 0x200098

	)

60 
	#MD_MOQ_SIZE
 0x2000a0

	)

61 
	#MD_MLAN_CTL
 0x2000a8

	)

63 
	#MD_PERF_SEL
 0x210000

	)

64 
	#MD_PERF_CNT0
 0x210010

	)

65 
	#MD_PERF_CNT1
 0x210018

	)

66 
	#MD_PERF_CNT2
 0x210020

	)

67 
	#MD_PERF_CNT3
 0x210028

	)

68 
	#MD_PERF_CNT4
 0x210030

	)

69 
	#MD_PERF_CNT5
 0x210038

	)

71 
	#MD_UREG0_0
 0x220000

	)

72 
	#MD_UREG0_1
 0x220008

	)

73 
	#MD_UREG0_2
 0x220010

	)

74 
	#MD_UREG0_3
 0x220018

	)

75 
	#MD_UREG0_4
 0x220020

	)

76 
	#MD_UREG0_5
 0x220028

	)

77 
	#MD_UREG0_6
 0x220030

	)

78 
	#MD_UREG0_7
 0x220038

	)

80 
	#MD_SLOTID_USTAT
 0x220048

	)

81 
	#MD_LED0
 0x220050

	)

82 
	#MD_LED1
 0x220058

	)

84 
	#MD_UREG1_0
 0x220080

	)

85 
	#MD_UREG1_1
 0x220088

	)

86 
	#MD_UREG1_2
 0x220090

	)

87 
	#MD_UREG1_3
 0x220098

	)

88 
	#MD_UREG1_4
 0x2200a0

	)

89 
	#MD_UREG1_5
 0x2200a8

	)

90 
	#MD_UREG1_6
 0x2200b0

	)

91 
	#MD_UREG1_7
 0x2200b8

	)

92 
	#MD_UREG1_8
 0x2200c0

	)

93 
	#MD_UREG1_9
 0x2200c8

	)

94 
	#MD_UREG1_10
 0x2200d0

	)

95 
	#MD_UREG1_11
 0x2200d8

	)

96 
	#MD_UREG1_12
 0x2200e0

	)

97 
	#MD_UREG1_13
 0x2200e8

	)

98 
	#MD_UREG1_14
 0x2200f0

	)

99 
	#MD_UREG1_15
 0x2200f8

	)

101 #i‡
deföed
(
N_MODE
)

102 
	#MD_MEM_BANKS
 4

	)

104 
	#MD_MEM_BANKS
 8

	)

116 
	#MD_SIZE_EMPTY
 0

	)

117 
	#MD_SIZE_8MB
 1

	)

118 
	#MD_SIZE_16MB
 2

	)

119 
	#MD_SIZE_32MB
 3

	)

120 
	#MD_SIZE_64MB
 4

	)

121 
	#MD_SIZE_128MB
 5

	)

122 
	#MD_SIZE_256MB
 6

	)

123 
	#MD_SIZE_512MB
 7

	)

124 
	#MD_SIZE_1GB
 8

	)

125 
	#MD_SIZE_2GB
 9

	)

126 
	#MD_SIZE_4GB
 10

	)

128 
	#MD_SIZE_BYTES
(
size
Ë((sizeË=0 ? 0 : 0x400000L << (size))

	)

129 
	#MD_SIZE_MBYTES
(
size
Ë((sizeË=0 ? 0 : 4 << (size))

	)

131 
	#MMC_FPROM_CYC_SHFT
 49

	)

132 
	#MMC_FPROM_CYC_MASK
 (
UINT64_CAST
 31 << 49Ë

	)

133 
	#MMC_FPROM_WR_SHFT
 44

	)

134 
	#MMC_FPROM_WR_MASK
 (
UINT64_CAST
 31 << 44)

	)

135 
	#MMC_UCTLR_CYC_SHFT
 39

	)

136 
	#MMC_UCTLR_CYC_MASK
 (
UINT64_CAST
 31 << 39)

	)

137 
	#MMC_UCTLR_WR_SHFT
 34

	)

138 
	#MMC_UCTLR_WR_MASK
 (
UINT64_CAST
 31 << 34)

	)

139 
	#MMC_DIMM0_SEL_SHFT
 32

	)

140 
	#MMC_DIMM0_SEL_MASK
 (
UINT64_CAST
 3 << 32)

	)

141 
	#MMC_IO_PROT_EN_SHFT
 31

	)

142 
	#MMC_IO_PROT_EN_MASK
 (
UINT64_CAST
 1 << 31)

	)

143 
	#MMC_IO_PROT
 (
UINT64_CAST
 1 << 31)

	)

144 
	#MMC_ARB_MLSS_SHFT
 30

	)

145 
	#MMC_ARB_MLSS_MASK
 (
UINT64_CAST
 1 << 30)

	)

146 
	#MMC_ARB_MLSS
 (
UINT64_CAST
 1 << 30)

	)

147 
	#MMC_IGNORE_ECC_SHFT
 29

	)

148 
	#MMC_IGNORE_ECC_MASK
 (
UINT64_CAST
 1 << 29)

	)

149 
	#MMC_IGNORE_ECC
 (
UINT64_CAST
 1 << 29)

	)

150 
	#MMC_DIR_PREMIUM_SHFT
 28

	)

151 
	#MMC_DIR_PREMIUM_MASK
 (
UINT64_CAST
 1 << 28)

	)

152 
	#MMC_DIR_PREMIUM
 (
UINT64_CAST
 1 << 28)

	)

153 
	#MMC_REPLY_GUAR_SHFT
 24

	)

154 
	#MMC_REPLY_GUAR_MASK
 (
UINT64_CAST
 15 << 24)

	)

155 
	#MMC_BANK_SHFT
(
_b
Ë((_bË* 3)

	)

156 
	#MMC_BANK_MASK
(
_b
Ë(
UINT64_CAST
 7 << 
	`MMC_BANK_SHFT
(_b))

	)

157 
	#MMC_BANK_ALL_MASK
 0xffffff

	)

158 
	#MMC_RESET_DEFAULTS
 (
UINT64_CAST
 0x0‡<< 
MMC_FPROM_CYC_SHFT
 | \

159 
UINT64_CAST
 0x07 << 
MMC_FPROM_WR_SHFT
 | \

160 
UINT64_CAST
 0x1‡<< 
MMC_UCTLR_CYC_SHFT
 | \

161 
UINT64_CAST
 0x0‡<< 
MMC_UCTLR_WR_SHFT
 | \

162 
MMC_IGNORE_ECC
 | 
MMC_DIR_PREMIUM
 | \

163 
UINT64_CAST
 0x0‡<< 
MMC_REPLY_GUAR_SHFT
 | \

164 
MMC_BANK_ALL_MASK
)

	)

168 
	#MRC_ENABLE_SHFT
 63

	)

169 
	#MRC_ENABLE_MASK
 (
UINT64_CAST
 1 << 63)

	)

170 
	#MRC_ENABLE
 (
UINT64_CAST
 1 << 63)

	)

171 
	#MRC_COUNTER_SHFT
 12

	)

172 
	#MRC_COUNTER_MASK
 (
UINT64_CAST
 0xff‡<< 12)

	)

173 
	#MRC_CNT_THRESH_MASK
 0xfff

	)

174 
	#MRC_RESET_DEFAULTS
 (
UINT64_CAST
 0x400)

	)

178 
	#MDI_SELECT_SHFT
 32

	)

179 
	#MDI_SELECT_MASK
 (
UINT64_CAST
 0x0‡<< 32)

	)

180 
	#MDI_DIMM_MODE_MASK
 (
UINT64_CAST
 0xfff)

	)

184 
	#MMS_RP_SIZE_SHFT
 8

	)

185 
	#MMS_RP_SIZE_MASK
 (
UINT64_CAST
 0x3‡<< 8)

	)

186 
	#MMS_RQ_SIZE_SHFT
 0

	)

187 
	#MMS_RQ_SIZE_MASK
 (
UINT64_CAST
 0x1f)

	)

188 
	#MMS_RESET_DEFAULTS
 (0x32 << 8 | 0x12)

	)

192 
	#MFC_VALID_SHFT
 63

	)

193 
	#MFC_VALID_MASK
 (
UINT64_CAST
 1 << 63)

	)

194 
	#MFC_VALID
 (
UINT64_CAST
 1 << 63)

	)

195 
	#MFC_ADDR_SHFT
 6

	)

196 
	#MFC_ADDR_MASK
 (
UINT64_CAST
 0x3ffffff)

	)

200 
	#MLAN_PHI1_SHFT
 27

	)

201 
	#MLAN_PHI1_MASK
 (
UINT64_CAST
 0x7‡<< 27)

	)

202 
	#MLAN_PHI0_SHFT
 20

	)

203 
	#MLAN_PHI0_MASK
 (
UINT64_CAST
 0x7‡<< 27)

	)

204 
	#MLAN_PULSE_SHFT
 10

	)

205 
	#MLAN_PULSE_MASK
 (
UINT64_CAST
 0x3f‡<< 10)

	)

206 
	#MLAN_SAMPLE_SHFT
 2

	)

207 
	#MLAN_SAMPLE_MASK
 (
UINT64_CAST
 0xf‡<< 2)

	)

208 
	#MLAN_DONE_SHFT
 1

	)

209 
	#MLAN_DONE_MASK
 2

	)

210 
	#MLAN_DONE
 (
UINT64_CAST
 0x02)

	)

211 
	#MLAN_RD_DATA
 (
UINT64_CAST
 0x01)

	)

212 
	#MLAN_RESET_DEFAULTS
 (
UINT64_CAST
 0x31 << 
MLAN_PHI1_SHFT
 | \

213 
UINT64_CAST
 0x31 << 
MLAN_PHI0_SHFT
)

	)

217 
	#MSU_CORECLK_TST_SHFT
 7

	)

218 
	#MSU_CORECLK_TST_MASK
 (
UINT64_CAST
 1 << 7)

	)

219 
	#MSU_CORECLK_TST
 (
UINT64_CAST
 1 << 7)

	)

220 
	#MSU_CORECLK_SHFT
 6

	)

221 
	#MSU_CORECLK_MASK
 (
UINT64_CAST
 1 << 6)

	)

222 
	#MSU_CORECLK
 (
UINT64_CAST
 1 << 6)

	)

223 
	#MSU_NETSYNC_SHFT
 5

	)

224 
	#MSU_NETSYNC_MASK
 (
UINT64_CAST
 1 << 5)

	)

225 
	#MSU_NETSYNC
 (
UINT64_CAST
 1 << 5)

	)

226 
	#MSU_FPROMRDY_SHFT
 4

	)

227 
	#MSU_FPROMRDY_MASK
 (
UINT64_CAST
 1 << 4)

	)

228 
	#MSU_FPROMRDY
 (
UINT64_CAST
 1 << 4)

	)

229 
	#MSU_I2CINTR_SHFT
 3

	)

230 
	#MSU_I2CINTR_MASK
 (
UINT64_CAST
 1 << 3)

	)

231 
	#MSU_I2CINTR
 (
UINT64_CAST
 1 << 3)

	)

232 
	#MSU_SLOTID_MASK
 0xff

	)

233 
	#MSU_SN0_SLOTID_SHFT
 0

	)

234 
	#MSU_SN0_SLOTID_MASK
 (
UINT64_CAST
 7)

	)

235 
	#MSU_SN00_SLOTID_SHFT
 7

	)

236 
	#MSU_SN00_SLOTID_MASK
 (
UINT64_CAST
 0x80)

	)

238 
	#MSU_PIMM_PSC_SHFT
 4

	)

239 
	#MSU_PIMM_PSC_MASK
 (0x‡<< 
MSU_PIMM_PSC_SHFT
)

	)

243 
	#MD_MIG_DIFF_THRES_VALID_MASK
 (
UINT64_CAST
 0x1 << 63)

	)

244 
	#MD_MIG_DIFF_THRES_VALID_SHFT
 63

	)

245 
	#MD_MIG_DIFF_THRES_VALUE_MASK
 (
UINT64_CAST
 0xfffff)

	)

249 
	#MD_MIG_VALUE_THRES_VALID_MASK
 (
UINT64_CAST
 0x1 << 63)

	)

250 
	#MD_MIG_VALUE_THRES_VALID_SHFT
 63

	)

251 
	#MD_MIG_VALUE_THRES_VALUE_MASK
 (
UINT64_CAST
 0xfffff)

	)

255 
	#MD_MIG_CANDIDATE_VALID_MASK
 (
UINT64_CAST
 0x1 << 63)

	)

256 
	#MD_MIG_CANDIDATE_VALID_SHFT
 63

	)

257 
	#MD_MIG_CANDIDATE_TYPE_MASK
 (
UINT64_CAST
 0x1 << 30)

	)

258 
	#MD_MIG_CANDIDATE_TYPE_SHFT
 30

	)

259 
	#MD_MIG_CANDIDATE_OVERRUN_MASK
 (
UINT64_CAST
 0x1 << 29)

	)

260 
	#MD_MIG_CANDIDATE_OVERRUN_SHFT
 29

	)

261 
	#MD_MIG_CANDIDATE_INITIATOR_MASK
 (
UINT64_CAST
 0x7f‡<< 18)

	)

262 
	#MD_MIG_CANDIDATE_INITIATOR_SHFT
 18

	)

263 
	#MD_MIG_CANDIDATE_NODEID_MASK
 (
UINT64_CAST
 0x1f‡<< 20)

	)

264 
	#MD_MIG_CANDIDATE_NODEID_SHFT
 20

	)

265 
	#MD_MIG_CANDIDATE_ADDR_MASK
 (
UINT64_CAST
 0x3ffff)

	)

266 
	#MD_MIG_CANDIDATE_ADDR_SHFT
 14

	)

270 
	#MD_BANK_SHFT
 29

	)

271 
	#MD_BANK_MASK
 (
UINT64_CAST
 7 << 29)

	)

272 
	#MD_BANK_SIZE
 (
UINT64_CAST
 1 << 
MD_BANK_SHFT
Ë

	)

273 
	#MD_BANK_OFFSET
(
_b
Ë(
	`UINT64_CAST
 (_bË<< 
MD_BANK_SHFT
)

	)

285 
	#MD_DIR_SHARED
 (
UINT64_CAST
 0x0Ë

	)

286 
	#MD_DIR_POISONED
 (
UINT64_CAST
 0x1Ë

	)

287 
	#MD_DIR_EXCLUSIVE
 (
UINT64_CAST
 0x2Ë

	)

288 
	#MD_DIR_BUSY_SHARED
 (
UINT64_CAST
 0x3Ë

	)

289 
	#MD_DIR_BUSY_EXCL
 (
UINT64_CAST
 0x4Ë

	)

290 
	#MD_DIR_WAIT
 (
UINT64_CAST
 0x5Ë

	)

291 
	#MD_DIR_UNOWNED
 (
UINT64_CAST
 0x7Ë

	)

295 
	#MD_PTR_OWNER_CPU
(
x
Ë(! ((xË& 2))

	)

296 
	#MD_PTR_OWNER_IO
(
x
Ë((xË& 2)

	)

297 
	#MD_PTR_NODE
(
x
Ë((xË>> 2)

	)

298 
	#MD_PTR_DEVICE
(
x
Ë((xË& 0x3)

	)

299 
	#MD_PTR_SLICE
(
x
Ë((xË& 0x1)

	)

306 
	#MD_DIR_FORCE_ECC
 (
UINT64_CAST
 1 << 63)

	)

318 
	#MD_PDIR_MASK
 0xfffffffffff‡

	)

319 
	#MD_PDIR_ECC_SHFT
 0

	)

320 
	#MD_PDIR_ECC_MASK
 0x7f

	)

321 
	#MD_PDIR_PRIO_SHFT
 8

	)

322 
	#MD_PDIR_PRIO_MASK
 (0x‡<< 8)

	)

323 
	#MD_PDIR_AX_SHFT
 7

	)

324 
	#MD_PDIR_AX_MASK
 (1 << 7)

	)

325 
	#MD_PDIR_AX
 (1 << 7)

	)

326 
	#MD_PDIR_FINE_SHFT
 12

	)

327 
	#MD_PDIR_FINE_MASK
 (1 << 12)

	)

328 
	#MD_PDIR_FINE
 (1 << 12)

	)

329 
	#MD_PDIR_OCT_SHFT
 13

	)

330 
	#MD_PDIR_OCT_MASK
 (7 << 13)

	)

331 
	#MD_PDIR_STATE_SHFT
 13

	)

332 
	#MD_PDIR_STATE_MASK
 (7 << 13)

	)

333 
	#MD_PDIR_ONECNT_SHFT
 16

	)

334 
	#MD_PDIR_ONECNT_MASK
 (0x3‡<< 16)

	)

335 
	#MD_PDIR_PTR_SHFT
 22

	)

336 
	#MD_PDIR_PTR_MASK
 (
UINT64_CAST
 0x7f‡<< 22)

	)

337 
	#MD_PDIR_VECMSB_SHFT
 22

	)

338 
	#MD_PDIR_VECMSB_BITMASK
 0x3ffffff

	)

339 
	#MD_PDIR_VECMSB_BITSHFT
 27

	)

340 
	#MD_PDIR_VECMSB_MASK
 (
UINT64_CAST
 
MD_PDIR_VECMSB_BITMASK
 << 22)

	)

341 
	#MD_PDIR_CWOFF_SHFT
 7

	)

342 
	#MD_PDIR_CWOFF_MASK
 (7 << 7)

	)

343 
	#MD_PDIR_VECLSB_SHFT
 10

	)

344 
	#MD_PDIR_VECLSB_BITMASK
 (
UINT64_CAST
 0x3fffffffff)

	)

345 
	#MD_PDIR_VECLSB_BITSHFT
 0

	)

346 
	#MD_PDIR_VECLSB_MASK
 (
MD_PDIR_VECLSB_BITMASK
 << 10)

	)

352 
	#MD_PDIR_INIT_LO
 (
MD_DIR_UNOWNED
 << 
MD_PDIR_STATE_SHFT
 | \

353 
MD_PDIR_AX
)

	)

354 
	#MD_PDIR_INIT_HI
 0

	)

355 
	#MD_PDIR_INIT_PROT
 (
MD_PROT_RW
 << 
MD_PPROT_IO_SHFT
 | \

356 
MD_PROT_RW
 << 
MD_PPROT_SHFT
)

	)

367 
	#MD_SDIR_MASK
 0xfff‡

	)

368 
	#MD_SDIR_ECC_SHFT
 0

	)

369 
	#MD_SDIR_ECC_MASK
 0x1f

	)

370 
	#MD_SDIR_PRIO_SHFT
 6

	)

371 
	#MD_SDIR_PRIO_MASK
 (1 << 6)

	)

372 
	#MD_SDIR_AX_SHFT
 5

	)

373 
	#MD_SDIR_AX_MASK
 (1 << 5)

	)

374 
	#MD_SDIR_AX
 (1 << 5)

	)

375 
	#MD_SDIR_STATE_SHFT
 7

	)

376 
	#MD_SDIR_STATE_MASK
 (7 << 7)

	)

377 
	#MD_SDIR_PTR_SHFT
 10

	)

378 
	#MD_SDIR_PTR_MASK
 (0x3‡<< 10)

	)

379 
	#MD_SDIR_CWOFF_SHFT
 5

	)

380 
	#MD_SDIR_CWOFF_MASK
 (7 << 5)

	)

381 
	#MD_SDIR_VECMSB_SHFT
 11

	)

382 
	#MD_SDIR_VECMSB_BITMASK
 0x1f

	)

383 
	#MD_SDIR_VECMSB_BITSHFT
 7

	)

384 
	#MD_SDIR_VECMSB_MASK
 (
MD_SDIR_VECMSB_BITMASK
 << 11)

	)

385 
	#MD_SDIR_VECLSB_SHFT
 5

	)

386 
	#MD_SDIR_VECLSB_BITMASK
 0x7ff

	)

387 
	#MD_SDIR_VECLSB_BITSHFT
 0

	)

388 
	#MD_SDIR_VECLSB_MASK
 (
MD_SDIR_VECLSB_BITMASK
 << 5)

	)

394 
	#MD_SDIR_INIT_LO
 (
MD_DIR_UNOWNED
 << 
MD_SDIR_STATE_SHFT
 | \

395 
MD_SDIR_AX
)

	)

396 
	#MD_SDIR_INIT_HI
 0

	)

397 
	#MD_SDIR_INIT_PROT
 (
MD_PROT_RW
 << 
MD_SPROT_SHFT
)

	)

401 
	#MD_PROT_RW
 (
UINT64_CAST
 0x6)

	)

402 
	#MD_PROT_RO
 (
UINT64_CAST
 0x3)

	)

403 
	#MD_PROT_NO
 (
UINT64_CAST
 0x0)

	)

404 
	#MD_PROT_BAD
 (
UINT64_CAST
 0x5)

	)

408 
	#MD_PPROT_SHFT
 0

	)

409 
	#MD_PPROT_MASK
 7

	)

410 
	#MD_PPROT_MIGMD_SHFT
 3

	)

411 
	#MD_PPROT_MIGMD_MASK
 (3 << 3)

	)

412 
	#MD_PPROT_REFCNT_SHFT
 5

	)

413 
	#MD_PPROT_REFCNT_WIDTH
 0x7ffff

	)

414 
	#MD_PPROT_REFCNT_MASK
 (
MD_PPROT_REFCNT_WIDTH
 << 5)

	)

416 
	#MD_PPROT_IO_SHFT
 45

	)

417 
	#MD_PPROT_IO_MASK
 (
UINT64_CAST
 7 << 45)

	)

421 
	#MD_SPROT_SHFT
 0

	)

422 
	#MD_SPROT_MASK
 7

	)

423 
	#MD_SPROT_MIGMD_SHFT
 3

	)

424 
	#MD_SPROT_MIGMD_MASK
 (3 << 3)

	)

425 
	#MD_SPROT_REFCNT_SHFT
 5

	)

426 
	#MD_SPROT_REFCNT_WIDTH
 0x7ff

	)

427 
	#MD_SPROT_REFCNT_MASK
 (
MD_SPROT_REFCNT_WIDTH
 << 5)

	)

431 
	#MD_PROT_MIGMD_IREL
 (
UINT64_CAST
 0x3 << 3)

	)

432 
	#MD_PROT_MIGMD_IABS
 (
UINT64_CAST
 0x2 << 3)

	)

433 
	#MD_PROT_MIGMD_PREL
 (
UINT64_CAST
 0x1 << 3)

	)

434 
	#MD_PROT_MIGMD_OFF
 (
UINT64_CAST
 0x0 << 3)

	)

442 
	#DIR_ERR_CE_VALID
(
îr
Ë”º.
dîr_fmt
.
˚_vld
)

	)

443 
	#DIR_ERR_UCE_VALID
(
îr
Ë”º.
dîr_fmt
.
u˚_vld
)

	)

444 
	#DIR_ERR_AE_VALID
(
îr
Ë”º.
dîr_fmt
.
´_vld
)

	)

445 
	#DIR_ERR_BAD_SYN
(
îr
Ë”º.
dîr_fmt
.
bad_syn
)

	)

446 
	#DIR_ERR_CE_OVERRUN
(
îr
Ë”º.
dîr_fmt
.
˚_ovr
)

	)

447 
	#MEM_ERR_CE_VALID
(
îr
Ë”º.
mîr_fmt
.
˚_vld
)

	)

448 
	#MEM_ERR_UCE_VALID
(
îr
Ë”º.
mîr_fmt
.
u˚_vld
)

	)

449 
	#MEM_ERR_ADDRESS
(
îr
Ë”º.
mîr_fmt
.
addªss
)

	)

450 
	#MEM_ERR_CE_OVERRUN
(
îr
Ë”º.
mîr_fmt
.
˚_ovr
)

	)

451 
	#MEM_ERR_BAD_SYN
(
îr
Ë”º.
mîr_fmt
.
bad_syn
)

	)

458 #i‡
_LANGUAGE_C


459 #i‚de‡
_STANDALONE


465 
	#CPU_LED_ADDR
(
_«sid
, 
_¶i˚
) \

466 (
¥iv©e
.
p_¢00
 ? \

467 
	`REMOTE_HUB_ADDR
((
_«sid
), 
MD_UREG1_0
 + ((
_¶i˚
) << 5)) : \

468 
	`REMOTE_HUB_ADDR
((
_«sid
), 
MD_LED0
 + ((
_¶i˚
Ë<< 3)))

	)

470 
	#SET_CPU_LEDS
(
_«sid
, 
_¶i˚
, 
_vÆ
) \

471 (
	`HUB_S
(
	`CPU_LED_ADDR
(
_«sid
, 
_¶i˚
), (
_vÆ
)))

	)

473 
	#SET_MY_LEDS
(
_v
) \

474 
	`SET_CPU_LEDS
(
	`gë_«sid
(), 
	`gë_¶i˚
(), (
_v
))

	)

480 
	#DIRTYPE_PREMIUM
 1

	)

481 
	#DIRTYPE_STANDARD
 0

	)

482 
	#MD_MEMORY_CONFIG_DIR_TYPE_GET
(
ªgi⁄
) (\

483 (
	`REMOTE_HUB_L
(
ªgi⁄
, 
MD_MEMORY_CONFIG
Ë& 
MMC_DIR_PREMIUM_MASK
) >> \

484 
MMC_DIR_PREMIUM_SHFT
)

	)

492 
	#MD_MIG_DIFF_THRESH_GET
(
ªgi⁄
) ( \

493 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
) & \

494 
MD_MIG_DIFF_THRES_VALUE_MASK
)

	)

496 
	#MD_MIG_DIFF_THRESH_SET
(
ªgi⁄
, 
vÆue
) ( \

497 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
, \

498 
MD_MIG_DIFF_THRES_VALID_MASK
 | (
vÆue
)))

	)

500 
	#MD_MIG_DIFF_THRESH_DISABLE
(
ªgi⁄
) ( \

501 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
, \

502 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
) \

503 & ~
MD_MIG_DIFF_THRES_VALID_MASK
))

	)

505 
	#MD_MIG_DIFF_THRESH_ENABLE
(
ªgi⁄
) ( \

506 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
, \

507 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
) \

508 | 
MD_MIG_DIFF_THRES_VALID_MASK
))

	)

510 
	#MD_MIG_DIFF_THRESH_IS_ENABLED
(
ªgi⁄
) ( \

511 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
) & \

512 
MD_MIG_DIFF_THRES_VALID_MASK
)

	)

514 
	#MD_MIG_VALUE_THRESH_GET
(
ªgi⁄
) ( \

515 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
) & \

516 
MD_MIG_VALUE_THRES_VALUE_MASK
)

	)

518 
	#MD_MIG_VALUE_THRESH_SET
(
ªgi⁄
, 
vÆue
) ( \

519 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
, \

520 
MD_MIG_VALUE_THRES_VALID_MASK
 | (
vÆue
)))

	)

522 
	#MD_MIG_VALUE_THRESH_DISABLE
(
ªgi⁄
) ( \

523 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
, \

524 
	`REMOTE_HUB_L
(
ªgi⁄
, 
MD_MIG_VALUE_THRESH
) \

525 & ~
MD_MIG_VALUE_THRES_VALID_MASK
))

	)

527 
	#MD_MIG_VALUE_THRESH_ENABLE
(
ªgi⁄
) ( \

528 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
, \

529 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
) \

530 | 
MD_MIG_VALUE_THRES_VALID_MASK
))

	)

532 
	#MD_MIG_VALUE_THRESH_IS_ENABLED
(
ªgi⁄
) ( \

533 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
) & \

534 
MD_MIG_VALUE_THRES_VALID_MASK
)

	)

540 
	#MD_MIG_CANDIDATE_GET
(
my_ªgi⁄_id
) ( \

541 
	`REMOTE_HUB_L
((
my_ªgi⁄_id
), 
MD_MIG_CANDIDATE_CLR
))

	)

543 
	#MD_MIG_CANDIDATE_HWPFN
(
vÆue
Ë((vÆueË& 
MD_MIG_CANDIDATE_ADDR_MASK
)

	)

545 
	#MD_MIG_CANDIDATE_NODEID
(
vÆue
) ( \

546 ((
vÆue
Ë& 
MD_MIG_CANDIDATE_NODEID_MASK
Ë>> 
MD_MIG_CANDIDATE_NODEID_SHFT
)

	)

548 
	#MD_MIG_CANDIDATE_TYPE
(
vÆue
) ( \

549 ((
vÆue
Ë& 
MD_MIG_CANDIDATE_TYPE_MASK
Ë>> 
MD_MIG_CANDIDATE_TYPE_SHFT
)

	)

551 
	#MD_MIG_CANDIDATE_VALID
(
vÆue
) ( \

552 ((
vÆue
Ë& 
MD_MIG_CANDIDATE_VALID_MASK
Ë>> 
MD_MIG_CANDIDATE_VALID_SHFT
)

	)

559 
	#MD_PPROT_REFCNT_GET
(
vÆue
) ( \

560 ((
vÆue
Ë& 
MD_PPROT_REFCNT_MASK
Ë>> 
MD_PPROT_REFCNT_SHFT
)

	)

562 
	#MD_PPROT_MIGMD_GET
(
vÆue
) ( \

563 ((
vÆue
Ë& 
MD_PPROT_MIGMD_MASK
Ë>> 
MD_PPROT_MIGMD_SHFT
)

	)

566 
	#MD_SPROT_REFCNT_GET
(
vÆue
) ( \

567 ((
vÆue
Ë& 
MD_SPROT_REFCNT_MASK
Ë>> 
MD_SPROT_REFCNT_SHFT
)

	)

569 
	#MD_SPROT_MIGMD_GET
(
vÆue
) ( \

570 ((
vÆue
Ë& 
MD_SPROT_MIGMD_MASK
Ë>> 
MD_SPROT_MIGMD_SHFT
)

	)

578 
	sdú_îr‹_ªg
 {

579 
__uöt64_t
 
	mu˚_vld
: 1,

580 
	m´_vld
: 1,

581 
	m˚_vld
: 1,

582 
	mrsvd1
: 19,

583 
	mbad_¥Ÿ
: 3,

584 
	mbad_syn
: 7,

585 
	mrsvd2
: 2,

586 
	mh•ec_addr
:27,

587 
	mu˚_ovr
: 1,

588 
	m´_ovr
: 1,

589 
	m˚_ovr
: 1;

592 
	umd_dú_îr‹
 {

593 
__uöt64_t
 
	mdîr_ªg
;

594 
dú_îr‹_ªg
 
	mdîr_fmt
;

595 } 
	tmd_dú_îr‹_t
;

598 
	smem_îr‹_ªg
 {

599 
__uöt64_t
 
	mu˚_vld
: 1,

600 
	m˚_vld
: 1,

601 
	mrsvd1
: 22,

602 
	mbad_syn
: 8,

603 
	maddªss
: 29,

604 
	mrsvd2
: 1,

605 
	mu˚_ovr
: 1,

606 
	m˚_ovr
: 1;

610 
	umd_mem_îr‹
 {

611 
__uöt64_t
 
	mmîr_ªg
;

612 
mem_îr‹_ªg
 
	mmîr_fmt
;

613 } 
	tmd_mem_îr‹_t
;

616 
	s¥Ÿo_îr‹_ªg
 {

617 
__uöt64_t
 
	mvÆid
: 1,

618 
	mrsvd1
: 2,

619 
	möôüt‹
:11,

620 
	mbackoff
: 2,

621 
	mmsg_ty≥
: 8,

622 
	mac˚ss
: 2,

623 
	m¥i‹ôy
: 1,

624 
	mdú_°©e
: 4,

625 
	mpoöãr_me
:1,

626 
	maddªss
: 29,

627 
	mrsvd2
: 2,

628 
	movîrun
: 1;

631 
	umd_¥Ÿo_îr‹
 {

632 
__uöt64_t
 
	m≥º_ªg
;

633 
¥Ÿo_îr‹_ªg
 
	m≥º_fmt
;

634 } 
	tmd_¥Ÿo_îr‹_t
;

637 
	smd_sdú_high_fmt
 {

638 
	msd_hi_bvec
 : 11,

639 
	msd_hi_ecc
 : 5;

643 
	umd_sdú_high
 {

645 
	msd_hi_vÆ
;

646 
md_sdú_high_fmt
 
	msd_hi_fmt
;

647 }
	tmd_sdú_high_t
;

650 
	smd_sdú_low_sh¨ed_fmt
 {

652 
	msds_lo_bvec
 : 5,

653 
	msds_lo_unu£d
: 1,

654 
	msds_lo_°©e
 : 3,

655 
	msds_lo_¥io
 : 1,

656 
	msds_lo_ax
 : 1,

657 
	msds_lo_ecc
 : 5;

660 
	smd_sdú_low_ex˛usive_fmt
 {

662 
	msde_lo_±r
 : 6,

663 
	msde_lo_°©e
 : 3,

664 
	msde_lo_¥io
 : 1,

665 
	msde_lo_ax
 : 1,

666 
	msde_lo_ecc
 : 5;

670 
	umd_sdú_low
 {

672 
	msd_lo_vÆ
;

673 
md_sdú_low_ex˛usive_fmt
 
	msde_lo_fmt
;

674 
md_sdú_low_sh¨ed_fmt
 
	msds_lo_fmt
;

675 }
	tmd_sdú_low_t
;

679 
	smd_pdú_high_fmt
 {

680 
__uöt64_t
 
	mpd_hi_unu£d
 : 16,

681 
	mpd_hi_bvec
 : 38,

682 
	mpd_hi_unu£d1
 : 3,

683 
	mpd_hi_ecc
 : 7;

687 
	umd_pdú_high
 {

689 
__uöt64_t
 
	mpd_hi_vÆ
;

690 
md_pdú_high_fmt
 
	mpd_hi_fmt
;

691 }
	tmd_pdú_high_t
;

694 
	smd_pdú_low_sh¨ed_fmt
 {

696 
__uöt64_t
 
	mpds_lo_unu£d
 : 16,

697 
	mpds_lo_bvec
 : 26,

698 
	mpds_lo_˙t
 : 6,

699 
	mpds_lo_°©e
 : 3,

700 
	mpds_lo_°e
 : 1,

701 
	mpds_lo_¥io
 : 4,

702 
	mpds_lo_ax
 : 1,

703 
	mpds_lo_ecc
 : 7;

706 
	smd_pdú_low_ex˛usive_fmt
 {

708 
__uöt64_t
 
	mpde_lo_unu£d
 : 31,

709 
	mpde_lo_±r
 : 11,

710 
	mpde_lo_unu£d1
 : 6,

711 
	mpde_lo_°©e
 : 3,

712 
	mpde_lo_°e
 : 1,

713 
	mpde_lo_¥io
 : 4,

714 
	mpde_lo_ax
 : 1,

715 
	mpde_lo_ecc
 : 7;

719 
	umd_pdú_l€¡
 {

721 
__uöt64_t
 
	mpd_lo_vÆ
;

722 
md_pdú_low_ex˛usive_fmt
 
	mpde_lo_fmt
;

723 
md_pdú_low_sh¨ed_fmt
 
	mpds_lo_fmt
;

724 }
	tmd_pdú_low_t
;

728 
	umd_≥rf_£l
 {

729 
__uöt64_t
 
	m≥rf_£l_ªg
;

731 
__uöt64_t
 
	m≥rf_rsvd
 : 60,

732 
	m≥rf_í
 : 1,

733 
	m≥rf_£l
 : 3;

734 } 
	m≥rf_£l_bôs
;

735 } 
	tmd_≥rf_£l_t
;

737 
	umd_≥rf_˙t
 {

738 
__uöt64_t
 
	m≥rf_˙t
;

740 
__uöt64_t
 
	m≥rf_rsvd
 : 44,

741 
	m≥rf_˙t
 : 20;

742 } 
	m≥rf_˙t_bôs
;

743 } 
	tmd_≥rf_˙t_t
;

749 
	#DIR_ERROR_VALID_MASK
 0xe000000000000000

	)

750 
	#DIR_ERROR_VALID_SHFT
 61

	)

751 
	#DIR_ERROR_VALID_UCE
 0x8000000000000000

	)

752 
	#DIR_ERROR_VALID_AE
 0x4000000000000000

	)

753 
	#DIR_ERROR_VALID_CE
 0x2000000000000000

	)

755 
	#MEM_ERROR_VALID_MASK
 0xc000000000000000

	)

756 
	#MEM_ERROR_VALID_SHFT
 62

	)

757 
	#MEM_ERROR_VALID_UCE
 0x8000000000000000

	)

758 
	#MEM_ERROR_VALID_CE
 0x4000000000000000

	)

760 
	#PROTO_ERROR_VALID_MASK
 0x8000000000000000

	)

762 
	#MISC_ERROR_VALID_MASK
 0x3ff

	)

768 
	#DIR_ERR_HSPEC_MASK
 0x3ffffff8

	)

769 
	#ERROR_HSPEC_MASK
 0x3ffffff8

	)

770 
	#ERROR_HSPEC_SHFT
 3

	)

771 
	#ERROR_ADDR_MASK
 0xfffffff8

	)

772 
	#ERROR_ADDR_SHFT
 3

	)

778 
	#MMCE_VALID_MASK
 0x3ff

	)

779 
	#MMCE_ILL_MSG_SHFT
 8

	)

780 
	#MMCE_ILL_MSG_MASK
 (
UINT64_CAST
 0x03 << 
MMCE_ILL_MSG_SHFT
)

	)

781 
	#MMCE_ILL_REV_SHFT
 6

	)

782 
	#MMCE_ILL_REV_MASK
 (
UINT64_CAST
 0x03 << 
MMCE_ILL_REV_SHFT
)

	)

783 
	#MMCE_LONG_PACK_SHFT
 4

	)

784 
	#MMCE_LONG_PACK_MASK
 (
UINT64_CAST
 0x03 << 
MMCE_lONG_PACK_SHFT
)

	)

785 
	#MMCE_SHORT_PACK_SHFT
 2

	)

786 
	#MMCE_SHORT_PACK_MASK
 (
UINT64_CAST
 0x03 << 
MMCE_SHORT_PACK_SHFT
)

	)

787 
	#MMCE_BAD_DATA_SHFT
 0

	)

788 
	#MMCE_BAD_DATA_MASK
 (
UINT64_CAST
 0x03 << 
MMCE_BAD_DATA_SHFT
)

	)

791 
	#MD_PERF_COUNTERS
 6

	)

792 
	#MD_PERF_SETS
 6

	)

794 
	#MEM_DIMM_MASK
 0xe0000000

	)

795 
	#MEM_DIMM_SHFT
 29

	)

	@/usr/include/sys/SN/SN0/hubni.h

13 #i‚de‡
__SYS_SN_SN0_HUBNI_H__


14 
	#__SYS_SN_SN0_HUBNI_H__


	)

24 
	#NI_BASE
 0x600000

	)

25 
	#NI_BASE_TABLES
 0x630000

	)

27 
	#NI_STATUS_REV_ID
 0x600000

	)

28 
	#NI_PORT_RESET
 0x600008

	)

29 
	#NI_PROTECTION
 0x600010

	)

30 
	#NI_GLOBAL_PARMS
 0x600018

	)

31 
	#NI_SCRATCH_REG0
 0x600100

	)

32 
	#NI_SCRATCH_REG1
 0x600108

	)

33 
	#NI_DIAG_PARMS
 0x600110

	)

35 
	#NI_VECTOR_PARMS
 0x600200

	)

36 
	#NI_VECTOR
 0x600208

	)

37 
	#NI_VECTOR_DATA
 0x600210

	)

38 
	#NI_VECTOR_STATUS
 0x600300

	)

39 
	#NI_RETURN_VECTOR
 0x600308

	)

40 
	#NI_VECTOR_READ_DATA
 0x600310

	)

41 
	#NI_VECTOR_CLEAR
 0x600380

	)

43 
	#NI_IO_PROTECT
 0x600400

	)

44 
	#NI_IO_PROT_OVRRD
 0x600408

	)

46 
	#NI_AGE_CPU0_MEMORY
 0x600500

	)

47 
	#NI_AGE_CPU0_PIO
 0x600508

	)

48 
	#NI_AGE_CPU1_MEMORY
 0x600510

	)

49 
	#NI_AGE_CPU1_PIO
 0x600518

	)

50 
	#NI_AGE_GBR_MEMORY
 0x600520

	)

51 
	#NI_AGE_GBR_PIO
 0x600528

	)

52 
	#NI_AGE_IO_MEMORY
 0x600530

	)

53 
	#NI_AGE_IO_PIO
 0x600538

	)

54 
	#NI_AGE_REG_MIN
 
NI_AGE_CPU0_MEMORY


	)

55 
	#NI_AGE_REG_MAX
 
NI_AGE_IO_PIO


	)

57 
	#NI_PORT_PARMS
 0x608000

	)

58 
	#NI_PORT_ERROR
 0x608008

	)

59 
	#NI_PORT_ERROR_CLEAR
 0x608088

	)

61 
	#NI_META_TABLE0
 0x638000

	)

62 
	#NI_META_TABLE
(
_x
Ë(
NI_META_TABLE0
 + (8 * (_x)))

	)

63 
	#NI_META_ENTRIES
 32

	)

65 
	#NI_LOCAL_TABLE0
 0x638100

	)

66 
	#NI_LOCAL_TABLE
(
_x
Ë(
NI_LOCAL_TABLE0
 + (8 * (_x)))

	)

67 
	#NI_LOCAL_ENTRIES
 16

	)

74 
	#NSRI_8BITMODE_SHFT
 30

	)

75 
	#NSRI_8BITMODE_MASK
 (
UINT64_CAST
 0x1 << 30)

	)

76 
	#NSRI_LINKUP_SHFT
 29

	)

77 
	#NSRI_LINKUP_MASK
 (
UINT64_CAST
 0x1 << 29)

	)

78 
	#NSRI_DOWNREASON_SHFT
 28

	)

79 
	#NSRI_DOWNREASON_MASK
 (
UINT64_CAST
 0x1 << 28Ë

	)

80 
	#NSRI_MORENODES_SHFT
 18

	)

81 
	#NSRI_MORENODES_MASK
 (
UINT64_CAST
 1 << 18Ë

	)

82 
	#MORE_MEMORY
 0

	)

83 
	#MORE_NODES
 1

	)

84 
	#NSRI_REGIONSIZE_SHFT
 17

	)

85 
	#NSRI_REGIONSIZE_MASK
 (
UINT64_CAST
 1 << 17Ë

	)

86 
	#REGIONSIZE_FINE
 1

	)

87 
	#REGIONSIZE_COARSE
 0

	)

88 
	#NSRI_NODEID_SHFT
 8

	)

89 
	#NSRI_NODEID_MASK
 (
UINT64_CAST
 0x1f‡<< 8)

	)

90 
	#NSRI_REV_SHFT
 4

	)

91 
	#NSRI_REV_MASK
 (
UINT64_CAST
 0x‡<< 4Ë

	)

92 
	#NSRI_CHIPID_SHFT
 0

	)

93 
	#NSRI_CHIPID_MASK
 (
UINT64_CAST
 0xfË

	)

99 
	#NASID_TO_FINEREG_SHFT
 0

	)

100 
	#NASID_TO_COARSEREG_SHFT
 3

	)

104 
	#NPR_PORTRESET
 (
UINT64_CAST
 1 << 7Ë

	)

105 
	#NPR_LINKRESET
 (
UINT64_CAST
 1 << 1Ë

	)

106 
	#NPR_LOCALRESET
 (
UINT64_CAST
 1Ë

	)

110 
	#NPROT_RESETOK
 (
UINT64_CAST
 1)

	)

114 
	#NGP_MAXRETRY_SHFT
 48

	)

115 
	#NGP_MAXRETRY_MASK
 (
UINT64_CAST
 0x3f‡<< 48)

	)

116 
	#NGP_TAILTOWRAP_SHFT
 32

	)

117 
	#NGP_TAILTOWRAP_MASK
 (
UINT64_CAST
 0xfff‡<< 32)

	)

119 
	#NGP_CREDITTOVAL_SHFT
 16

	)

120 
	#NGP_CREDITTOVAL_MASK
 (
UINT64_CAST
 0x‡<< 16)

	)

121 
	#NGP_TAILTOVAL_SHFT
 4

	)

122 
	#NGP_TAILTOVAL_MASK
 (
UINT64_CAST
 0x‡<< 4)

	)

126 
	#NDP_PORTTORESET
 (
UINT64_CAST
 1 << 18Ë

	)

127 
	#NDP_LLP8BITMODE
 (
UINT64_CAST
 1 << 12Ë

	)

128 
	#NDP_PORTDISABLE
 (
UINT64_CAST
 1 << 6Ë

	)

129 
	#NDP_SENDERROR
 (
UINT64_CAST
 1Ë

	)

136 
	#NVP_PIOID_SHFT
 40

	)

137 
	#NVP_PIOID_MASK
 (
UINT64_CAST
 0x3f‡<< 40)

	)

138 
	#NVP_WRITEID_SHFT
 32

	)

139 
	#NVP_WRITEID_MASK
 (
UINT64_CAST
 0xf‡<< 32)

	)

140 
	#NVP_ADDRESS_MASK
 (
UINT64_CAST
 0xffff8Ë

	)

141 
	#NVP_TYPE_SHFT
 0

	)

142 
	#NVP_TYPE_MASK
 (
UINT64_CAST
 0x3)

	)

146 
	#NVS_VALID
 (
UINT64_CAST
 1 << 63)

	)

147 
	#NVS_OVERRUN
 (
UINT64_CAST
 1 << 62)

	)

148 
	#NVS_TARGET_SHFT
 51

	)

149 
	#NVS_TARGET_MASK
 (
UINT64_CAST
 0x3f‡<< 51)

	)

150 
	#NVS_PIOID_SHFT
 40

	)

151 
	#NVS_PIOID_MASK
 (
UINT64_CAST
 0x3f‡<< 40)

	)

152 
	#NVS_WRITEID_SHFT
 32

	)

153 
	#NVS_WRITEID_MASK
 (
UINT64_CAST
 0xf‡<< 32)

	)

154 
	#NVS_ADDRESS_MASK
 (
UINT64_CAST
 0xfffffff8Ë

	)

155 
	#NVS_TYPE_SHFT
 0

	)

156 
	#NVS_TYPE_MASK
 (
UINT64_CAST
 0x7)

	)

157 
	#NVS_ERROR_MASK
 (
UINT64_CAST
 0x4Ë

	)

160 
	#PIOTYPE_READ
 0

	)

161 
	#PIOTYPE_WRITE
 1

	)

162 
	#PIOTYPE_UNDEFINED
 2

	)

163 
	#PIOTYPE_EXCHANGE
 3

	)

164 
	#PIOTYPE_ADDR_ERR
 4

	)

165 
	#PIOTYPE_CMD_ERR
 5

	)

166 
	#PIOTYPE_PROT_ERR
 6

	)

167 
	#PIOTYPE_UNKNOWN
 7

	)

171 
	#NAGE_VCH_SHFT
 10

	)

172 
	#NAGE_VCH_MASK
 (
UINT64_CAST
 3 << 10)

	)

173 
	#NAGE_CC_SHFT
 8

	)

174 
	#NAGE_CC_MASK
 (
UINT64_CAST
 3 << 8)

	)

175 
	#NAGE_AGE_SHFT
 0

	)

176 
	#NAGE_AGE_MASK
 (
UINT64_CAST
 0xff)

	)

177 
	#NAGE_MASK
 (
NAGE_VCH_MASK
 | 
NAGE_CC_MASK
 | 
NAGE_AGE_MASK
)

	)

179 
	#VCHANNEL_A
 0

	)

180 
	#VCHANNEL_B
 1

	)

181 
	#VCHANNEL_ANY
 2

	)

185 
	#NPP_NULLTO_SHFT
 10

	)

186 
	#NPP_NULLTO_MASK
 (
UINT64_CAST
 0x3‡<< 16)

	)

187 
	#NPP_MAXBURST_SHFT
 0

	)

188 
	#NPP_MAXBURST_MASK
 (
UINT64_CAST
 0x3ff)

	)

189 
	#NPP_RESET_DFLT_HUB20
 ((
UINT64_CAST
 1 << 
NPP_NULLTO_SHFT
) | \

190 (
UINT64_CAST
 0x3f0 << 
NPP_MAXBURST_SHFT
))

	)

191 
	#NPP_RESET_DEFAULTS
 ((
UINT64_CAST
 6 << 
NPP_NULLTO_SHFT
) | \

192 (
UINT64_CAST
 0x3f0 << 
NPP_MAXBURST_SHFT
))

	)

197 
	#NPE_LINKRESET
 (
UINT64_CAST
 1 << 37)

	)

198 
	#NPE_INTERNALERROR
 (
UINT64_CAST
 1 << 36)

	)

199 
	#NPE_BADMESSAGE
 (
UINT64_CAST
 1 << 35)

	)

200 
	#NPE_BADDEST
 (
UINT64_CAST
 1 << 34)

	)

201 
	#NPE_FIFOOVERFLOW
 (
UINT64_CAST
 1 << 33)

	)

202 
	#NPE_CREDITTO_SHFT
 28

	)

203 
	#NPE_CREDITTO_MASK
 (
UINT64_CAST
 0x‡<< 28)

	)

204 
	#NPE_TAILTO_SHFT
 24

	)

205 
	#NPE_TAILTO_MASK
 (
UINT64_CAST
 0x‡<< 24)

	)

206 
	#NPE_RETRYCOUNT_SHFT
 16

	)

207 
	#NPE_RETRYCOUNT_MASK
 (
UINT64_CAST
 0xf‡<< 16)

	)

208 
	#NPE_CBERRCOUNT_SHFT
 8

	)

209 
	#NPE_CBERRCOUNT_MASK
 (
UINT64_CAST
 0xf‡<< 8)

	)

210 
	#NPE_SNERRCOUNT_SHFT
 0

	)

211 
	#NPE_SNERRCOUNT_MASK
 (
UINT64_CAST
 0xf‡<< 0)

	)

212 
	#NPE_MASK
 0x3effffffff

	)

214 
	#NPE_COUNT_MAX
 0xff

	)

216 
	#NPE_FATAL_ERRORS
 (
NPE_LINKRESET
 | 
NPE_INTERNALERROR
 | \

217 
NPE_BADMESSAGE
 | 
NPE_BADDEST
 | \

218 
NPE_FIFOOVERFLOW
 | 
NPE_CREDITTO_MASK
 | \

219 
NPE_TAILTO_MASK
)

	)

223 
	#NMT_EXIT_PORT_MASK
 (
UINT64_CAST
 0xf)

	)

227 
	#NLT_EXIT_PORT_MASK
 (
UINT64_CAST
 0xf)

	)

229 #ifde‡
_LANGUAGE_C


231 
	uhubni_p‹t_îr‹_u
 {

232 
__uöt64_t
 
	mnùe_ªg_vÆue
;

234 
__uöt64_t
 
	mnùe_rsvd
: 26,

235 
	mnùe_ k_ª£t
: 1,

236 
	mnùe_öé_îr
: 1,

237 
	mnùe_bad_msg
: 1,

238 
	mnùe_bad_de°
: 1,

239 
	mnùe_fifo_ovÊ
: 1,

240 
	mnùe_rsvd1
: 1,

241 
	mnùe_¸edô_to
: 4,

242 
	mnùe_èû_to
: 4,

243 
	mnùe_ªåy_˙t
: 8,

244 
	mnùe_cb_˙t
: 8,

245 
	mnùe_¢_˙t
: 8;

246 } 
	mnùe_fõlds_s
;

247 } 
	thubni_p‹t_îr‹_t
;

249 
	#NI_LLP_RETRY_MAX
 0xff

	)

250 
	#NI_LLP_CB_MAX
 0xff

	)

251 
	#NI_LLP_SN_MAX
 0xff

	)

	@/usr/include/sys/SN/SN0/hubpi.h

13 #i‚def 
__SYS_SN_SN0_HUBPI_H__


14 
	#__SYS_SN_SN0_HUBPI_H__


	)

26 
	#PI_BASE
 0x000000

	)

30 
	#PI_CPU_PROTECT
 0x000000

	)

31 
	#PI_PROT_OVERRD
 0x000008

	)

32 
	#PI_IO_PROTECT
 0x000010

	)

33 
	#PI_REGION_PRESENT
 0x000018

	)

34 
	#PI_CPU_NUM
 0x000020

	)

35 
	#PI_CALIAS_SIZE
 0x000028

	)

36 
	#PI_MAX_CRB_TIMEOUT
 0x000030

	)

37 
	#PI_CRB_SFACTOR
 0x000038

	)

40 
	#PI_CALIAS_SIZE_0
 0

	)

41 
	#PI_CALIAS_SIZE_4K
 1

	)

42 
	#PI_CALIAS_SIZE_8K
 2

	)

43 
	#PI_CALIAS_SIZE_16K
 3

	)

44 
	#PI_CALIAS_SIZE_32K
 4

	)

45 
	#PI_CALIAS_SIZE_64K
 5

	)

46 
	#PI_CALIAS_SIZE_128K
 6

	)

47 
	#PI_CALIAS_SIZE_256K
 7

	)

48 
	#PI_CALIAS_SIZE_512K
 8

	)

49 
	#PI_CALIAS_SIZE_1M
 9

	)

50 
	#PI_CALIAS_SIZE_2M
 10

	)

51 
	#PI_CALIAS_SIZE_4M
 11

	)

52 
	#PI_CALIAS_SIZE_8M
 12

	)

53 
	#PI_CALIAS_SIZE_16M
 13

	)

54 
	#PI_CALIAS_SIZE_32M
 14

	)

55 
	#PI_CALIAS_SIZE_64M
 15

	)

59 
	#PI_CPU_PRESENT_A
 0x000040

	)

60 
	#PI_CPU_PRESENT_B
 0x000048

	)

61 
	#PI_CPU_ENABLE_A
 0x000050

	)

62 
	#PI_CPU_ENABLE_B
 0x000058

	)

63 
	#PI_REPLY_LEVEL
 0x000060

	)

64 
	#PI_HARDRESET_BIT
 0x020068

	)

65 
	#PI_NMI_A
 0x000070

	)

66 
	#PI_NMI_B
 0x000078

	)

67 
	#PI_NMI_OFFSET
 (
PI_NMI_B
 - 
PI_NMI_A
)

	)

68 
	#PI_SOFTRESET
 0x000080

	)

72 
	#PI_INT_PEND_MOD
 0x000090

	)

73 
	#PI_INT_PEND0
 0x000098

	)

74 
	#PI_INT_PEND1
 0x0000a0

	)

75 
	#PI_INT_MASK0_A
 0x0000a8

	)

76 
	#PI_INT_MASK1_A
 0x0000b0

	)

77 
	#PI_INT_MASK0_B
 0x0000b8

	)

78 
	#PI_INT_MASK1_B
 0x0000c0

	)

80 
	#PI_INT_MASK_OFFSET
 0x10

	)

84 
	#PI_CC_PEND_SET_A
 0x0000c8

	)

85 
	#PI_CC_PEND_SET_B
 0x0000d0

	)

86 
	#PI_CC_PEND_CLR_A
 0x0000d8

	)

87 
	#PI_CC_PEND_CLR_B
 0x0000e0

	)

88 
	#PI_CC_MASK
 0x0000e8

	)

89 
	#PI_CC_INTR_ENABLE_ALL
 0x0

	)

92 
	#PI_INT_SET_OFFSET
 0x08

	)

96 
	#PI_RT_COUNT
 0x030100

	)

97 
	#PI_RT_COMPARE_A
 0x000108

	)

98 
	#PI_RT_COMPARE_B
 0x000110

	)

99 
	#PI_PROFILE_COMPARE
 0x000118

	)

100 
	#PI_RT_PEND_A
 0x000120

	)

101 
	#PI_RT_PEND_B
 0x000128

	)

102 
	#PI_PROF_PEND_A
 0x000130

	)

103 
	#PI_PROF_PEND_B
 0x000138

	)

104 
	#PI_RT_EN_A
 0x000140

	)

105 
	#PI_RT_EN_B
 0x000148

	)

106 
	#PI_PROF_EN_A
 0x000150

	)

107 
	#PI_PROF_EN_B
 0x000158

	)

108 
	#PI_RT_LOCAL_CTRL
 0x000160

	)

109 
	#PI_RT_FILTER_CTRL
 0x000168

	)

111 
	#PI_COUNT_OFFSET
 0x08

	)

115 
	#PI_BIST_WRITE_DATA
 0x000200

	)

116 
	#PI_BIST_READ_DATA
 0x000208

	)

117 
	#PI_BIST_COUNT_TARG
 0x000210

	)

118 
	#PI_BIST_READY
 0x000218

	)

119 
	#PI_BIST_SHIFT_LOAD
 0x000220

	)

120 
	#PI_BIST_SHIFT_UNLOAD
 0x000228

	)

121 
	#PI_BIST_ENTER_RUN
 0x000230

	)

125 
	#PI_GFX_PAGE_A
 0x000300

	)

126 
	#PI_GFX_CREDIT_CNTR_A
 0x000308

	)

127 
	#PI_GFX_BIAS_A
 0x000310

	)

128 
	#PI_GFX_INT_CNTR_A
 0x000318

	)

129 
	#PI_GFX_INT_CMP_A
 0x000320

	)

130 
	#PI_GFX_PAGE_B
 0x000328

	)

131 
	#PI_GFX_CREDIT_CNTR_B
 0x000330

	)

132 
	#PI_GFX_BIAS_B
 0x000338

	)

133 
	#PI_GFX_INT_CNTR_B
 0x000340

	)

134 
	#PI_GFX_INT_CMP_B
 0x000348

	)

136 
	#PI_GFX_OFFSET
 (
PI_GFX_PAGE_B
 - 
PI_GFX_PAGE_A
)

	)

137 
	#PI_GFX_PAGE_ENABLE
 0x0000010000000000LL

	)

140 
	#PI_ERR_INT_PEND
 0x000400

	)

141 
	#PI_ERR_INT_MASK_A
 0x000408

	)

142 
	#PI_ERR_INT_MASK_B
 0x000410

	)

143 
	#PI_ERR_STACK_ADDR_A
 0x000418

	)

144 
	#PI_ERR_STACK_ADDR_B
 0x000420

	)

145 
	#PI_ERR_STACK_SIZE
 0x000428

	)

146 
	#PI_ERR_STATUS0_A
 0x000430

	)

147 
	#PI_ERR_STATUS0_A_RCLR
 0x000438

	)

148 
	#PI_ERR_STATUS1_A
 0x000440

	)

149 
	#PI_ERR_STATUS1_A_RCLR
 0x000448

	)

150 
	#PI_ERR_STATUS0_B
 0x000450

	)

151 
	#PI_ERR_STATUS0_B_RCLR
 0x000458

	)

152 
	#PI_ERR_STATUS1_B
 0x000460

	)

153 
	#PI_ERR_STATUS1_B_RCLR
 0x000468

	)

154 
	#PI_SPOOL_CMP_A
 0x000470

	)

155 
	#PI_SPOOL_CMP_B
 0x000478

	)

156 
	#PI_CRB_TIMEOUT_A
 0x000480

	)

157 
	#PI_CRB_TIMEOUT_B
 0x000488

	)

158 
	#PI_SYSAD_ERRCHK_EN
 0x000490

	)

159 
	#PI_BAD_CHECK_BIT_A
 0x000498

	)

160 
	#PI_BAD_CHECK_BIT_B
 0x0004a0

	)

161 
	#PI_NACK_CNT_A
 0x0004a8

	)

162 
	#PI_NACK_CNT_B
 0x0004b0

	)

163 
	#PI_NACK_CMP
 0x0004b8

	)

164 
	#PI_STACKADDR_OFFSET
 (
PI_ERR_STACK_ADDR_B
 - 
PI_ERR_STACK_ADDR_A
)

	)

165 
	#PI_ERRSTAT_OFFSET
 (
PI_ERR_STATUS0_B
 - 
PI_ERR_STATUS0_A
)

	)

166 
	#PI_RDCLR_OFFSET
 (
PI_ERR_STATUS0_A_RCLR
 - 
PI_ERR_STATUS0_A
)

	)

169 
	#PI_ERR_SPOOL_CMP_B
 0x00000001

	)

170 
	#PI_ERR_SPOOL_CMP_A
 0x00000002

	)

171 
	#PI_ERR_SPUR_MSG_B
 0x00000004

	)

172 
	#PI_ERR_SPUR_MSG_A
 0x00000008

	)

173 
	#PI_ERR_WRB_TERR_B
 0x00000010

	)

174 
	#PI_ERR_WRB_TERR_A
 0x00000020

	)

175 
	#PI_ERR_WRB_WERR_B
 0x00000040

	)

176 
	#PI_ERR_WRB_WERR_A
 0x00000080

	)

177 
	#PI_ERR_SYSSTATE_B
 0x00000100

	)

178 
	#PI_ERR_SYSSTATE_A
 0x00000200

	)

179 
	#PI_ERR_SYSAD_DATA_B
 0x00000400

	)

180 
	#PI_ERR_SYSAD_DATA_A
 0x00000800

	)

181 
	#PI_ERR_SYSAD_ADDR_B
 0x00001000

	)

182 
	#PI_ERR_SYSAD_ADDR_A
 0x00002000

	)

183 
	#PI_ERR_SYSCMD_DATA_B
 0x00004000

	)

184 
	#PI_ERR_SYSCMD_DATA_A
 0x00008000

	)

185 
	#PI_ERR_SYSCMD_ADDR_B
 0x00010000

	)

186 
	#PI_ERR_SYSCMD_ADDR_A
 0x00020000

	)

187 
	#PI_ERR_BAD_SPOOL_B
 0x00040000

	)

188 
	#PI_ERR_BAD_SPOOL_A
 0x00080000

	)

189 
	#PI_ERR_UNCAC_UNCORR_B
 0x00100000

	)

190 
	#PI_ERR_UNCAC_UNCORR_A
 0x00200000

	)

191 
	#PI_ERR_SYSSTATE_TAG_B
 0x00400000

	)

192 
	#PI_ERR_SYSSTATE_TAG_A
 0x00800000

	)

193 
	#PI_ERR_MD_UNCORR
 0x01000000

	)

195 
	#PI_ERR_CLEAR_ALL_A
 0x00ØØØ

	)

196 
	#PI_ERR_CLEAR_ALL_B
 0x00555555

	)

203 
	#PI_FATAL_ERR_CPU_A
 (
PI_ERR_SYSSTATE_TAG_A
 | \

204 
PI_ERR_BAD_SPOOL_A
 | \

205 
PI_ERR_SYSCMD_ADDR_A
 | \

206 
PI_ERR_SYSCMD_DATA_A
 | \

207 
PI_ERR_SYSAD_ADDR_A
 | \

208 
PI_ERR_SYSAD_DATA_A
 | \

209 
PI_ERR_SYSSTATE_A
)

	)

211 
	#PI_MISC_ERR_CPU_A
 (
PI_ERR_UNCAC_UNCORR_A
 | \

212 
PI_ERR_WRB_WERR_A
 | \

213 
PI_ERR_WRB_TERR_A
 | \

214 
PI_ERR_SPUR_MSG_A
 | \

215 
PI_ERR_SPOOL_CMP_A
)

	)

217 
	#PI_FATAL_ERR_CPU_B
 (
PI_ERR_SYSSTATE_TAG_B
 | \

218 
PI_ERR_BAD_SPOOL_B
 | \

219 
PI_ERR_SYSCMD_ADDR_B
 | \

220 
PI_ERR_SYSCMD_DATA_B
 | \

221 
PI_ERR_SYSAD_ADDR_B
 | \

222 
PI_ERR_SYSAD_DATA_B
 | \

223 
PI_ERR_SYSSTATE_B
)

	)

225 
	#PI_MISC_ERR_CPU_B
 (
PI_ERR_UNCAC_UNCORR_B
 | \

226 
PI_ERR_WRB_WERR_B
 | \

227 
PI_ERR_WRB_TERR_B
 | \

228 
PI_ERR_SPUR_MSG_B
 | \

229 
PI_ERR_SPOOL_CMP_B
)

	)

231 
	#PI_ERR_GENERIC
 (
PI_ERR_MD_UNCORR
)

	)

239 
	#PI_ERR_ST0_TYPE_MASK
 0x0000000000000007

	)

240 
	#PI_ERR_ST0_TYPE_SHFT
 0

	)

241 
	#PI_ERR_ST0_REQNUM_MASK
 0x0000000000000038

	)

242 
	#PI_ERR_ST0_REQNUM_SHFT
 3

	)

243 
	#PI_ERR_ST0_SUPPL_MASK
 0x000000000001ffc0

	)

244 
	#PI_ERR_ST0_SUPPL_SHFT
 6

	)

245 
	#PI_ERR_ST0_CMD_MASK
 0x0000000001„0000

	)

246 
	#PI_ERR_ST0_CMD_SHFT
 17

	)

247 
	#PI_ERR_ST0_ADDR_MASK
 0x3fffffff„000000

	)

248 
	#PI_ERR_ST0_ADDR_SHFT
 25

	)

249 
	#PI_ERR_ST0_OVERRUN_MASK
 0x4000000000000000

	)

250 
	#PI_ERR_ST0_OVERRUN_SHFT
 62

	)

251 
	#PI_ERR_ST0_VALID_MASK
 0x8000000000000000

	)

252 
	#PI_ERR_ST0_VALID_SHFT
 63

	)

255 
	#PI_ERR_ST1_SPOOL_MASK
 0x00000000001fffff

	)

256 
	#PI_ERR_ST1_SPOOL_SHFT
 0

	)

257 
	#PI_ERR_ST1_TOUTCNT_MASK
 0x000000001„00000

	)

258 
	#PI_ERR_ST1_TOUTCNT_SHFT
 21

	)

259 
	#PI_ERR_ST1_INVCNT_MASK
 0x0000007„0000000

	)

260 
	#PI_ERR_ST1_INVCNT_SHFT
 29

	)

261 
	#PI_ERR_ST1_CRBNUM_MASK
 0x0000038000000000

	)

262 
	#PI_ERR_ST1_CRBNUM_SHFT
 39

	)

263 
	#PI_ERR_ST1_WRBRRB_MASK
 0x0000040000000000

	)

264 
	#PI_ERR_ST1_WRBRRB_SHFT
 42

	)

265 
	#PI_ERR_ST1_CRBSTAT_MASK
 0x001ff80000000000

	)

266 
	#PI_ERR_ST1_CRBSTAT_SHFT
 43

	)

267 
	#PI_ERR_ST1_MSGSRC_MASK
 0xf„0000000000000

	)

268 
	#PI_ERR_ST1_MSGSRC_SHFT
 53

	)

271 
	#PI_ERR_STK_TYPE_MASK
 0x0000000000000003

	)

272 
	#PI_ERR_STK_TYPE_SHFT
 0

	)

273 
	#PI_ERR_STK_SUPPL_MASK
 0x0000000000000038

	)

274 
	#PI_ERR_STK_SUPPL_SHFT
 3

	)

275 
	#PI_ERR_STK_REQNUM_MASK
 0x00000000000001c0

	)

276 
	#PI_ERR_STK_REQNUM_SHFT
 6

	)

277 
	#PI_ERR_STK_CRBNUM_MASK
 0x0000000000000e00

	)

278 
	#PI_ERR_STK_CRBNUM_SHFT
 9

	)

279 
	#PI_ERR_STK_WRBRRB_MASK
 0x0000000000001000

	)

280 
	#PI_ERR_STK_WRBRRB_SHFT
 12

	)

281 
	#PI_ERR_STK_CRBSTAT_MASK
 0x00000000007„000

	)

282 
	#PI_ERR_STK_CRBSTAT_SHFT
 13

	)

283 
	#PI_ERR_STK_CMD_MASK
 0x000000007f800000

	)

284 
	#PI_ERR_STK_CMD_SHFT
 23

	)

285 
	#PI_ERR_STK_ADDR_MASK
 0xffffffff80000000

	)

286 
	#PI_ERR_STK_ADDR_SHFT
 31

	)

289 
	#PI_ERR_RD_PRERR
 1

	)

290 
	#PI_ERR_RD_DERR
 2

	)

291 
	#PI_ERR_RD_TERR
 3

	)

294 
	#PI_ERR_WR_WERR
 0

	)

295 
	#PI_ERR_WR_PWERR
 1

	)

296 
	#PI_ERR_WR_TERR
 3

	)

299 
	#PI_ERR_RRB
 0

	)

300 
	#PI_ERR_WRB
 1

	)

301 
	#PI_ERR_ANY_CRB
 2

	)

304 
	#ERR_STK_ADDR_SHFT
 7

	)

305 
	#ERR_STAT0_ADDR_SHFT
 3

	)

307 
	#PI_MIN_STACK_SIZE
 4096

	)

308 
	#PI_STACK_SIZE_SHFT
 12

	)

310 
	#ERR_STACK_SIZE_BYTES
(
_sz
) \

311 ((
_sz
Ë? (
PI_MIN_STACK_SIZE
 << ((_szË- 1)Ë: 0)

	)

313 #ifde‡
_LANGUAGE_C


318 
	sîr_°ack_f‹m©
 {

319 
__uöt64_t
 
	msk_addr
 : 33,

320 
	msk_cmd
 : 8,

321 
	msk_¸b_°s
 : 10,

322 
	msk_rw_rb
 : 1,

323 
	msk_¸b_num
 : 3,

324 
	msk_t5_ªq
 : 3,

325 
	msk_suµl
 : 3,

326 
	msk_îr_ty≥
: 3;

329 
	upi_îr_°ack
 {

330 
__uöt64_t
 
	mpi_°k_w‹d
;

331 
îr_°ack_f‹m©
 
	mpi_°k_fmt
;

332 } 
	tpi_îr_°ack_t
;

334 
	sîr_°©us0_f‹m©
 {

335 
__uöt64_t
 
	ms0_vÆid
 : 1,

336 
	ms0_ovr_run
 : 1,

337 
	ms0_addr
 : 37,

338 
	ms0_cmd
 : 8,

339 
	ms0_su∂
 : 11,

340 
	ms0_t5_ªq
 : 3,

341 
	ms0_îr_ty≥
: 3;

344 
	upi_îr_°©0
 {

345 
__uöt64_t
 
	mpi_°©0_w‹d
;

346 
îr_°©us0_f‹m©
 
	mpi_°©0_fmt
;

347 } 
	tpi_îr_°©0_t
;

349 
	sîr_°©us1_f‹m©
 {

350 
__uöt64_t
 
	ms1_§c
 : 11,

351 
	ms1_¸b_°s
 : 10,

352 
	ms1_rw_rb
 : 1,

353 
	ms1_¸b_num
 : 3,

354 
	ms1_övÆ_˙t
:10,

355 
	ms1_to_˙t
 : 8,

356 
	ms1_•l_˙t
 : 21;

359 
	upi_îr_°©1
 {

360 
__uöt64_t
 
	mpi_°©1_w‹d
;

361 
îr_°©us1_f‹m©
 
	mpi_°©1_fmt
;

362 } 
	tpi_îr_°©1_t
;

364 
__uöt64_t
 
	tπc_time_t
;

370 
	#PI_SYSAD_ERRCHK_ECCGEN
 0x01

	)

371 
	#PI_SYSAD_ERRCHK_QUALGEN
 0x02

	)

372 
	#PI_SYSAD_ERRCHK_SADP
 0x04

	)

373 
	#PI_SYSAD_ERRCHK_CMDP
 0x08

	)

374 
	#PI_SYSAD_ERRCHK_STATE
 0x10

	)

375 
	#PI_SYSAD_ERRCHK_QUAL
 0x20

	)

376 
	#PI_SYSAD_CHECK_ALL
 0x3‡

	)

380 
	#HUB_IP_PEND0
 0x0400

	)

381 
	#HUB_IP_PEND1_CC
 0x0800

	)

382 
	#HUB_IP_RT
 0x1000

	)

383 
	#HUB_IP_PROF
 0x2000

	)

384 
	#HUB_IP_ERROR
 0x4000

	)

385 
	#HUB_IP_MASK
 0x7c00

	)

389 
	#PRLC_USE_INT_SHFT
 16

	)

390 
	#PRLC_USE_INT_MASK
 (
UINT64_CAST
 1 << 16)

	)

391 
	#PRLC_USE_INT
 (
UINT64_CAST
 1 << 16)

	)

392 
	#PRLC_GCLK_SHFT
 15

	)

393 
	#PRLC_GCLK_MASK
 (
UINT64_CAST
 1 << 15)

	)

394 
	#PRLC_GCLK
 (
UINT64_CAST
 1 << 15)

	)

395 
	#PRLC_GCLK_COUNT_SHFT
 8

	)

396 
	#PRLC_GCLK_COUNT_MASK
 (
UINT64_CAST
 0x7‡<< 8)

	)

397 
	#PRLC_MAX_COUNT_SHFT
 1

	)

398 
	#PRLC_MAX_COUNT_MASK
 (
UINT64_CAST
 0x7‡<< 1)

	)

399 
	#PRLC_GCLK_EN_SHFT
 0

	)

400 
	#PRLC_GCLK_EN_MASK
 (
UINT64_CAST
 1)

	)

401 
	#PRLC_GCLK_EN
 (
UINT64_CAST
 1)

	)

410 
	#PRFC_DROP_COUNT_SHFT
 27

	)

411 
	#PRFC_DROP_COUNT_MASK
 (
UINT64_CAST
 0x3f‡<< 27)

	)

412 
	#PRFC_DROP_CTR_SHFT
 18

	)

413 
	#PRFC_DROP_CTR_MASK
 (
UINT64_CAST
 0x1f‡<< 18)

	)

414 
	#PRFC_MASK_ENABLE_SHFT
 10

	)

415 
	#PRFC_MASK_ENABLE_MASK
 (
UINT64_CAST
 0x7‡<< 10)

	)

416 
	#PRFC_MASK_CTR_SHFT
 2

	)

417 
	#PRFC_MASK_CTR_MASK
 (
UINT64_CAST
 0xf‡<< 2)

	)

418 
	#PRFC_OFFSET_SHFT
 0

	)

419 
	#PRFC_OFFSET_MASK
 (
UINT64_CAST
 3)

	)

426 
	#PI_NACK_CNT_EN_SHFT
 20

	)

427 
	#PI_NACK_CNT_EN_MASK
 0x100000

	)

428 
	#PI_NACK_CNT_MASK
 0x0fffff

	)

429 
	#PI_NACK_CNT_MAX
 0x0fffff

	)

	@/usr/include/sys/SN/SN0/router.h

13 #i‚def 
__SYS_SN_SN0_ROUTER_H__


14 
	#__SYS_SN_SN0_ROUTER_H__


	)

24 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

26 
	~<sys/SN/ve˘‹.h
>

27 
	~<sys/SN/¶Ÿnum.h
>

28 
	~<sys/SN/¨ch.h
>

29 
	~<sys/time.h
>

30 
	~<sys/£ma.h
>

32 
__uöt64_t
 
	trouãr_ªg_t
;

34 
	#MAX_ROUTERS
 256

	)

36 
	#MAX_ROUTER_PATH
 80

	)

38 
	#ROUTER_REG_CAST
 (vﬁ©ûê
rouãr_ªg_t
 *)

	)

39 
	#PS_UINT_CAST
 (
__psunsig√d_t
)

	)

40 
	#UINT64_CAST
 (
__uöt64_t
)

	)

41 sig√d 
	tp‹t_no_t
;

43 #ñi‡
_LANGUAGE_ASSEMBLY


45 
	#ROUTERREG_CAST


	)

46 
	#PS_UINT_CAST


	)

47 
	#UINT64_CAST


	)

51 
	#MAX_ROUTER_PORTS
 (6Ë

	)

53 
	#PORT_INVALID
 (-1Ë

	)

55 
	#IS_META
(
_Ω
Ë((_Ω)->
Êags
 & 
PCFG_ROUTER_META
)

	)

67 
	#RR_TURN
(
_L
, 
cou¡
Ë((_LË+ (cou¡Ë> 
MAX_ROUTER_PORTS
 ? \

68 (
_L
Ë+ (
cou¡
Ë- 
MAX_ROUTER_PORTS
 : \

69 (
_L
Ë+ (
cou¡
))

	)

71 
	#RR_DISTANCE
(
_LS
, 
_LD
) ((_LD) >= (_LS) ? \

72 (
_LD
Ë- (
_LS
) : \

73 (
_LD
Ë+ 
MAX_ROUTER_PORTS
 - (
_LS
))

	)

77 
	#RR_STATUS_REV_ID
 0x00000

	)

78 
	#RR_PORT_RESET
 0x00008

	)

79 
	#RR_PROT_CONF
 0x00010

	)

80 
	#RR_GLOBAL_PARMS
 0x00018

	)

81 
	#RR_SCRATCH_REG0
 0x00020

	)

82 
	#RR_SCRATCH_REG1
 0x00028

	)

83 
	#RR_DIAG_PARMS
 0x00030

	)

84 
	#RR_NIC_ULAN
 0x00038

	)

88 
	#RR_BIST_DATA
 0x00050

	)

89 
	#RR_BIST_READY
 0x00058

	)

90 
	#RR_BIST_COUNT_TARG
 0x00060

	)

91 
	#RR_BIST_SHIFT_LOAD
 0x00068

	)

92 
	#RR_BIST_SHIFT_UNLOAD
 0x00070

	)

93 
	#RR_BIST_ENTER_RUN
 0x00078

	)

97 
	#RR_PORT_PARMS
(
_L
Ë((_LË<< 16 | 0x0000Ë

	)

98 
	#RR_STATUS_ERROR
(
_L
Ë((_LË<< 16 | 0x0008Ë

	)

99 
	#RR_HISTOGRAM
(
_L
Ë((_LË<< 16 | 0x0010Ë

	)

100 
	#RR_RESET_MASK
(
_L
Ë((_LË<< 16 | 0x0018Ë

	)

101 
	#RR_ERROR_CLEAR
(
_L
Ë((_LË<< 16 | 0x0088Ë

	)

108 
	#RR_META_TABLE0
 0x70000

	)

109 
	#RR_META_TABLE
(
_x
Ë(
RR_META_TABLE0
 + 8 * (_x))

	)

110 
	#RR_META_ENTRIES
 32

	)

117 
	#RR_LOCAL_TABLE0
 0x70100

	)

118 
	#RR_LOCAL_TABLE
(
_x
Ë(
RR_LOCAL_TABLE0
 + 8 * (_x))

	)

119 
	#RR_LOCAL_ENTRIES
 16

	)

125 
	#RSRI_INPORT_SHFT
 46

	)

126 
	#RSRI_INPORT_MASK
 (
UINT64_CAST
 0x7 << 46)

	)

127 
	#RSRI_LSTAT_SHFT
(
_L
Ë(25 + 3 * (_L))

	)

128 
	#RSRI_LSTAT_MASK
(
_L
Ë(
UINT64_CAST
 0x7 << 25 + 3 * (_L))

	)

129 
	#RSRI_LINK8BIT_BIT
(
_L
Ë(27 + 3 * (_L))

	)

130 
	#RSRI_LINK8BIT
(
_L
Ë(
UINT64_CAST
 1 << (27 + 3 * (_L)))

	)

131 
	#RSRI_LINKWORKING_BIT
(
_L
Ë(26 + 3 * (_L))

	)

132 
	#RSRI_LINKWORKING
(
_L
Ë(
UINT64_CAST
 1 << (26 + 3 * (_L)))

	)

133 
	#RSRI_LINKRESETFAIL_BIT
(
_L
Ë(25 + 3 * (_L))

	)

134 
	#RSRI_LINKRESETFAIL
(
_L
Ë(
UINT64_CAST
 1 << (25 + 3 * (_L)))

	)

135 
	#RSRI_LOCAL_SHFT
 24

	)

136 
	#RSRI_LOCAL_MASK
 (
UINT64_CAST
 0x‡<< 24)

	)

137 
	#RSRI_LOCALSBERROR
 (
UINT64_CAST
 1 << 27)

	)

138 
	#RSRI_LOCALSTUCK
 (
UINT64_CAST
 1 << 26)

	)

139 
	#RSRI_LOCALBADVEC
 (
UINT64_CAST
 1 << 25)

	)

140 
	#RSRI_LOCALTAILERR
 (
UINT64_CAST
 1 << 24)

	)

141 
	#RSRI_SWLED_SHFT
 16

	)

142 
	#RSRI_SWLED_MASK
 (
UINT64_CAST
 0x3‡<< 16)

	)

143 
	#RSRI_CHIPOUT_SHFT
 12

	)

144 
	#RSRI_CHIPOUT_MASK
 (
UINT64_CAST
 0x‡<< 12)

	)

145 
	#RSRI_CHIPIN_SHFT
 8

	)

146 
	#RSRI_CHIPIN_MASK
 (
UINT64_CAST
 0x‡<< 8)

	)

147 
	#RSRI_CHIPREV_SHFT
 4

	)

148 
	#RSRI_CHIPREV_MASK
 (
UINT64_CAST
 0x‡<< 4)

	)

149 
	#RSRI_CHIPID_SHFT
 0

	)

150 
	#RSRI_CHIPID_MASK
 (
UINT64_CAST
 0xf)

	)

152 
	#RSRI_LSTAT_WENTDOWN
 0

	)

153 
	#RSRI_LSTAT_RESETFAIL
 1

	)

154 
	#RSRI_LSTAT_LINKUP
 2

	)

155 
	#RSRI_LSTAT_NOTUSED
 3

	)

161 
	#RPRESET_WARM
 (
UINT64_CAST
 1 << 7)

	)

162 
	#RPRESET_LINK
(
_L
Ë(
UINT64_CAST
 1 << (_L))

	)

163 
	#RPRESET_LOCAL
 (
UINT64_CAST
 1)

	)

169 
	#RPCONF_PTTNID_SHFT
 13

	)

170 
	#RPCONF_PTTNID_MASK
 (
UINT64_CAST
 0xf‡<< 13)

	)

171 
	#RPCONF_FORCELOCAL
 (
UINT64_CAST
 1 << 12)

	)

172 
	#RPCONF_FLOCAL_SHFT
 12

	)

173 
	#RPCONF_METAIDVALID
 (
UINT64_CAST
 1 << 11)

	)

174 
	#RPCONF_METAID_SHFT
 6

	)

175 
	#RPCONF_METAID_MASK
 (
UINT64_CAST
 0x1‡<< 6)

	)

176 
	#RPCONF_RESETOK
(
_L
Ë(
UINT64_CAST
 1 << ((_LË- 1))

	)

182 
	#RGPARM_LOCGNTTO_SHFT
 58

	)

183 
	#RGPARM_LOCGNTTO_MASK
 (
UINT64_CAST
 0x3‡<< 58)

	)

184 
	#RGPARM_MAXRETRY_SHFT
 48

	)

185 
	#RGPARM_MAXRETRY_MASK
 (
UINT64_CAST
 0x3f‡<< 48)

	)

186 
	#RGPARM_TTOWRAP_SHFT
 36

	)

187 
	#RGPARM_TTOWRAP_MASK
 (
UINT64_CAST
 0xff‡<< 36)

	)

188 
	#RGPARM_AGEWRAP_SHFT
 28

	)

189 
	#RGPARM_AGEWRAP_MASK
 (
UINT64_CAST
 0xf‡<< 28)

	)

190 
	#RGPARM_URGWRAP_SHFT
 20

	)

191 
	#RGPARM_URGWRAP_MASK
 (
UINT64_CAST
 0xf‡<< 20)

	)

192 
	#RGPARM_DEADLKTO_SHFT
 16

	)

193 
	#RGPARM_DEADLKTO_MASK
 (
UINT64_CAST
 0x‡<< 16)

	)

194 
	#RGPARM_URGVAL_SHFT
 12

	)

195 
	#RGPARM_URGVAL_MASK
 (
UINT64_CAST
 0x‡<< 12)

	)

196 
	#RGPARM_LOCURGTO_SHFT
 8

	)

197 
	#RGPARM_LOCURGTO_MASK
 (
UINT64_CAST
 0x3 << 8)

	)

198 
	#RGPARM_TAILVAL_SHFT
 4

	)

199 
	#RGPARM_TAILVAL_MASK
 (
UINT64_CAST
 0x‡<< 4)

	)

200 
	#RGPARM_CLOCK_SHFT
 1

	)

201 
	#RGPARM_CLOCK_MASK
 (
UINT64_CAST
 0x7 << 1)

	)

202 
	#RGPARM_BYPEN_SHFT
 0

	)

203 
	#RGPARM_BYPEN_MASK
 (
UINT64_CAST
 1Ë

	)

205 #ifde‡
SN0XXL


206 
	#RGPARM_AGEWRAP_DEFAULT
 0x„

	)

208 
	#RGPARM_AGEWRAP_DEFAULT
 0x20

	)

217 
	#RSCR0_BOOTED_SHFT
 60

	)

218 
	#RSCR0_BOOTED_MASK
 (
UINT64_CAST
 0x1 << 
RSCR0_BOOTED_SHFT
)

	)

219 
	#RSCR0_LOCALID_SHFT
 56

	)

220 
	#RSCR0_LOCALID_MASK
 (
UINT64_CAST
 0x‡<< 
RSCR0_LOCALID_SHFT
)

	)

221 
	#RSCR0_UNUSED_SHFT
 48

	)

222 
	#RSCR0_UNUSED_MASK
 (
UINT64_CAST
 0xf‡<< 
RSCR0_UNUSED_SHFT
)

	)

223 
	#RSCR0_NIC_SHFT
 0

	)

224 
	#RSCR0_NIC_MASK
 (
UINT64_CAST
 0xffffffffffff)

	)

230 
	#RDPARM_ABSHISTOGRAM
 (
UINT64_CAST
 1 << 19Ë

	)

231 
	#RDPARM_DEADLOCKRESET
 (
UINT64_CAST
 1 << 18Ë

	)

232 
	#RDPARM_LLP8BIT
(
_L
Ë(
UINT64_CAST
 1 << ((_LË+ 11))

	)

233 
	#RDPARM_DISABLE
(
_L
Ë(
UINT64_CAST
 1 << ((_LË+ 5))

	)

234 
	#RDPARM_SENDERROR
(
_L
Ë(
UINT64_CAST
 1 << ((_LË- 1))

	)

240 
	#RPPARM_HISTSEL_SHFT
 18

	)

241 
	#RPPARM_HISTSEL_MASK
 (
UINT64_CAST
 0x3 << 18)

	)

242 
	#RPPARM_DAMQHS_SHFT
 16

	)

243 
	#RPPARM_DAMQHS_MASK
 (
UINT64_CAST
 0x3 << 16)

	)

244 
	#RPPARM_NULLTO_SHFT
 10

	)

245 
	#RPPARM_NULLTO_MASK
 (
UINT64_CAST
 0x3‡<< 10)

	)

246 
	#RPPARM_MAXBURST_SHFT
 0

	)

247 
	#RPPARM_MAXBURST_MASK
 (
UINT64_CAST
 0x3ff)

	)

254 
	#RPPARM_HISTSEL_AGE
 0

	)

255 
	#RPPARM_HISTSEL_UTIL
 1

	)

256 
	#RPPARM_HISTSEL_DAMQ
 2

	)

262 
	#RSERR_FIFOOVERFLOW
 (
UINT64_CAST
 1 << 33)

	)

263 
	#RSERR_ILLEGALPORT
 (
UINT64_CAST
 1 << 32)

	)

264 
	#RSERR_DEADLOCKTO_SHFT
 28

	)

265 
	#RSERR_DEADLOCKTO_MASK
 (
UINT64_CAST
 0x‡<< 28)

	)

266 
	#RSERR_RECVTAILTO_SHFT
 24

	)

267 
	#RSERR_RECVTAILTO_MASK
 (
UINT64_CAST
 0x‡<< 24)

	)

268 
	#RSERR_RETRYCNT_SHFT
 16

	)

269 
	#RSERR_RETRYCNT_MASK
 (
UINT64_CAST
 0xf‡<< 16)

	)

270 
	#RSERR_CBERRCNT_SHFT
 8

	)

271 
	#RSERR_CBERRCNT_MASK
 (
UINT64_CAST
 0xf‡<< 8)

	)

272 
	#RSERR_SNERRCNT_SHFT
 0

	)

273 
	#RSERR_SNERRCNT_MASK
 (
UINT64_CAST
 0xf‡<< 0)

	)

276 
	#PORT_STATUS_UP
 (1 << 0Ë

	)

277 
	#PORT_STATUS_FENCE
 (1 << 1Ë

	)

278 
	#PORT_STATUS_RESETFAIL
 (1 << 2Ë

	)

280 
	#PORT_STATUS_DISCFAIL
 (1 << 3Ë

	)

285 
	#PORT_STATUS_KERNFAIL
 (1 << 4Ë

	)

290 
	#PORT_STATUS_UNDEF
 (1 << 5Ë

	)

294 
	#PROBE_RESULT_BAD
 (-1Ë

	)

297 
	#PROBE_RESULT_GOOD
 (0Ë

	)

310 
	#ROUTER_MAP_MOD_SHFT
 56

	)

311 
	#ROUTER_MAP_MOD_MASK
 (
UINT64_CAST
 0xf‡<< 56)

	)

313 
	#ROUTER_MAP_SLOT_SHFT
 48

	)

314 
	#ROUTER_MAP_SLOT_MASK
 (
UINT64_CAST
 0xf‡<< 48)

	)

316 
	#ROUTER_MAP_NIC_SHFT
 0

	)

317 
	#ROUTER_MAP_NIC_MASK
 (
UINT64_CAST
 0xffffffffffff)

	)

320 #ifde‡
SN0XXL


321 
	#MAX_RTR_BREADTH
 256

	)

323 
	#MAX_RTR_BREADTH
 128

	)

327 
	#GET_FIELD
(
v¨
, 
‚ame
) \

328 ((
v¨
Ë>> 
‚ame
##
_SHFT
 & f«me##
_MASK
 >> f«me##_SHFT)

	)

330 
	#SET_FIELD
(
v¨
, 
‚ame
, 
fvÆ
) \

331 ((
v¨
Ë(v¨Ë& ~
‚ame
##
_MASK
 | (
__uöt64_t
Ë(
fvÆ
Ë<< f«me##
_SHFT
)

	)

334 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

336 
	sº_°©us_îr‹_fmt
 {

337 
__uöt64_t
 
	mr£º_unu£d
 : 30,

338 
	mr£º_fifoovîÊow
 : 1,

339 
	mr£º_ûÀgÆp‹t
 : 1,

340 
	mr£º_dódlockto
 : 4,

341 
	mr£º_ªcvèûto
 : 4,

342 
	mr£º_ªåy˙t
 : 8,

343 
	mr£º_cbîr˙t
 : 8,

344 
	mr£º_¢îr˙t
 : 8;

350 
	trouãr_cou¡_t
;

353 
	#RP_BYPASS_UTIL
 0

	)

354 
	#RP_RCV_UTIL
 1

	)

355 
	#RP_SEND_UTIL
 2

	)

356 
	#RP_TOTAL_PKTS
 3

	)

358 
	#RP_NUM_UTILS
 3

	)

360 
	#RP_NUM_BUCKETS
 4

	)

361 
	#RP_HIST_TYPES
 3

	)

363 
	#RP_AGE0
 0

	)

364 
	#RP_AGE1
 1

	)

365 
	#RP_AGE2
 2

	)

366 
	#RP_AGE3
 3

	)

369 
	#RR_UTIL_SCALE
 1024

	)

374 
	srouãr_p‹t_öfo_s
 {

375 
rouãr_ªg_t
 
	mΩ_hi°ogøms
;

376 
rouãr_ªg_t
 
	mΩ_p‹t_îr‹
;

377 
rouãr_cou¡_t
 
	mΩ_ªåy_îr‹s
;

378 
rouãr_cou¡_t
 
	mΩ_¢_îr‹s
;

379 
rouãr_cou¡_t
 
	mΩ_cb_îr‹s
;

380 
	mΩ_ovîÊows
;

381 
	mΩ_ex˚ss_îr
;

382 
ush‹t
 
	mΩ_utû
[
RP_NUM_BUCKETS
];

383 } 
	trouãr_p‹t_öfo_t
;

385 
	#ROUTER_INFO_VERSION
 6

	)

387 
	glbﬂrd_s
;

392 
	srouãr_öfo_s
 {

393 
	mri_vîsi⁄
;

394 
˙odeid_t
 
	mri_˙ode
;

395 
«sid_t
 
	mri_«sid
;

396 
	mri_Àdˇche
;

397 
	mri_Àds
;

398 
	mri_p‹tmask
;

399 
rouãr_ªg_t
 
	mri_°©_ªv_id
;

400 
√t_vec_t
 
	mri_ve˘‹
;

401 
	mri_wrôeid
;

402 
__öt64_t
 
	mri_timeba£
;

403 
__öt64_t
 
	mri_time°amp
;

404 
rouãr_p‹t_öfo_t
 
	mri_p‹t
[
MAX_ROUTER_PORTS
];

405 
moduÀid_t
 
	mri_moduÀ
;

406 
¶Ÿid_t
 
	mri_¶Ÿnum
;

407 
rouãr_ªg_t
 
	mri_glbl_∑rms
;

408 
vîãx_hdl_t
 
	mri_vîãx
;

409 
rouãr_ªg_t
 
	mri_¥Ÿ_c⁄f
;

410 
__öt64_t
 
	mri_≥r_möuã
;

419 
	mri_hi°_ty≥
;

420 
vîãx_hdl_t
 
	mri_gu¨dün
;

421 
__öt64_t
 
	mri_œ°_¥öt
;

422 
	mri_¥öt
;

423 
	mri_ju°_blök
;

425 #ifde‡
DEBUG


426 
__öt64_t
 
	mri_dñètime
;

428 
lock_t
 
	mri_lock
;

429 
√t_vec_t
 *
	mri_veˇºay
;

430 
lbﬂrd_s
 *
	mri_brd
;

431 * 
	mri_«me
;

432 
	mri_p‹t_maöt
[
MAX_ROUTER_PORTS
];

434 } 
	trouãr_öfo_t
;

439 
	#RIP_PROMLOG
 2

	)

440 
	#RIP_CONSOLE
 4

	)

442 
	#ROUTER_INFO_PRINT
(
_rù
,
_whîe
Ë(_rù->
ri_¥öt
 |_whîe)

	)

446 
	#IS_ROUTER_INFO_PRINTED
(
_rù
,
_whîe
) \

447 (
_rù
->
ri_¥öt
 & 
_whîe
)

	)

453 
	#ROUTER_INFO_LOCK
(
_rù
,
_s
Ë_†
	`muãx_•ölock
(&(_rù->
ri_lock
))

	)

457 
	#ROUTER_INFO_UNLOCK
(
_rù
,
_s
Ë
	`muãx_•öu∆ock
(&(_rù->
ri_lock
),_s)

	)

462 
	snodïda_rouãr_öfo_s
 {

463 
vîãx_hdl_t
 
	mrouãr_vhdl
;

464 
	mrouãr_p‹t
;

465 
	mrouãr_p‹tmask
;

466 
moduÀid_t
 
	mrouãr_moduÀ
;

467 
¶Ÿid_t
 
	mrouãr_¶Ÿ
;

468 
	mrouãr_ty≥
;

469 
√t_vec_t
 
	mrouãr_ve˘‹
;

471 
rouãr_öfo_t
 *
	mrouãr_öf›
;

472 
nodïda_rouãr_öfo_s
 *
	mrouãr_√xt
;

474 } 
	tnodïda_rouãr_öfo_t
;

476 
	#ROUTER_NAME_SIZE
 20

	)

478 
	#NORMAL_ROUTER_NAME
 "n‹mÆ_rouãr"

	)

479 
	#NULL_ROUTER_NAME
 "nuŒ_rouãr"

	)

480 
	#META_ROUTER_NAME
 "mëa_rouãr"

	)

481 
	#UNKNOWN_ROUTER_NAME
 "unknown_rouãr"

	)

487 
	srouãr_ñt_s
 {

492 
nic_t
 
	mnic
;

496 
√t_vec_t
 
	mvec
;

498 
__uöt64_t
 
	m°©us
;

499 
	mp‹t_°©us
[
MAX_ROUTER_PORTS
 + 1];

500 } 
	mr_ñt
;

506 
vîãx_hdl_t
 
	mvhdl
;

508 
vîãx_hdl_t
 
	mgu¨d
;

510 
√t_vec_t
 
	mvec
;

511 } 
	mk_ñt
;

512 } 
	mu
;

514 } 
	trouãr_ñt_t
;

518 
	srouãr_queue_s
 {

519 
	mhód
;

520 
	mèû
;

521 
	mty≥
;

522 
rouãr_ñt_t
 
	m¨øy
[
MAX_RTR_BREADTH
];

524 } 
	trouãr_queue_t
;

533 
	#RHIST_BUCKET_SHFT
(
_x
Ë(16 * (_x))

	)

534 
	#RHIST_BUCKET_MASK
(
_x
Ë(
UINT64_CAST
 0xfff‡<< 
	`RHIST_BUCKET_SHFT
(_x))

	)

535 
	#RHIST_GET_BUCKET
(
_x
, 
_ªg
) \

536 ((
	`RHIST_BUCKET_MASK
(
_x
Ë& (
_ªg
)Ë>> 
	`RHIST_BUCKET_SHFT
(_x))

	)

542 
	#RRM_RESETOK
(
_L
Ë(
UINT64_CAST
 1 << ((_LË- 1))

	)

543 
	#RRM_RESETOK_ALL
 (
UINT64_CAST
 0x3f)

	)

549 
	#RTABLE_SHFT
(
_L
Ë(4 * ((_LË- 1))

	)

550 
	#RTABLE_MASK
(
_L
Ë(
UINT64_CAST
 0x7 << 
	`RTABLE_SHFT
(_L))

	)

553 #i‚de‡
_STANDALONE


555 
	#ROUTERINFO_STKSZ
 4096

	)

557 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

558 #i‡
deföed
(
_LANGUAGE_C_PLUS_PLUS
)

562 
rouãr_ªg_ªad
(
rouãr_öfo_t
 *
rù
, 
ªgno
, 
rouãr_ªg_t
 *
vÆ
);

563 
rouãr_ªg_wrôe
(
rouãr_öfo_t
 *
rù
, 
ªgno
, 
rouãr_ªg_t
 
vÆ
);

564 
rouãr_gë_öfo
(
vîãx_hdl_t
 
rouãrv
, 
rouãr_öfo_t
 *, );

565 
rouãr_öô
(
˙odeid_t
 
˙ode
,
wrôeid
, 
nodïda_rouãr_öfo_t
 *
≈da_rù
);

566 
rouãr_£t_Àds
(
rouãr_öfo_t
 *
rù
);

567 
rouãr_¥öt_°©e
(
rouãr_öfo_t
 *
rù
, 
Àvñ
,

568 (*
pf
)(, *, ...),
¥öt_whîe
);

569 
ˇ±uª_rouãr_°©s
(
rouãr_öfo_t
 *
rù
);

572 
rouãr_nic_gë
(
√t_vec_t
 
∑th
,
__uöt64_t
 *
nic
);

573 
¥obe_rouãrs
();

574 
gë_rouã∫ame
(
brd_ty≥
,*
π∫ame
);

575 
rouãr_gu¨düns_£t
(
vîãx_hdl_t
 
hwgøph_roŸ
);

576 
rouãr_hi°_ª£À˘
(
rouãr_öfo_t
 *, 
__öt64_t
);

577 #i‡
deföed
(
_LANGUAGE_C_PLUS_PLUS
)

	@/usr/include/sys/SN/SN1/addrs.h

13 #i‚de‡
__SYS_SN_SN1_ADDRS_H__


14 
	#__SYS_SN_SN1_ADDRS_H__


	)

46 #i‡
deföed
(
_RUN_UNCACHED
)

47 
	#CAC_BASE
 0x9600000000000000

	)

49 
	#CAC_BASE
 0xa800000000000000

	)

52 
	#HSPEC_BASE
 0x9000000000000000

	)

53 
	#IO_BASE
 0x9200000000000000

	)

54 
	#MSPEC_BASE
 0x9400000000000000

	)

55 
	#UNCAC_BASE
 0x9600000000000000

	)

57 
	#TO_PHYS
(
x
Ë–((xË& 
TO_PHYS_MASK
))

	)

58 
	#TO_CAC
(
x
Ë(
CAC_BASE
 | ((xË& 
TO_PHYS_MASK
))

	)

59 
	#TO_UNCAC
(
x
Ë(
UNCAC_BASE
 | ((xË& 
TO_PHYS_MASK
))

	)

60 
	#TO_MSPEC
(
x
Ë(
MSPEC_BASE
 | ((xË& 
TO_PHYS_MASK
))

	)

61 
	#TO_HSPEC
(
x
Ë(
HSPEC_BASE
 | ((xË& 
TO_PHYS_MASK
))

	)

73 #i‡
deföed
(
N_MODE
)

75 
	#NODE_SIZE_BITS
 32

	)

76 
	#BWIN_SIZE_BITS
 28

	)

78 
	#NASID_BITS
 8

	)

79 
	#NASID_BITMASK
 (0xffLL)

	)

80 
	#NASID_SHFT
 32

	)

81 
	#NASID_META_BITS
 1

	)

82 
	#NASID_LOCAL_BITS
 7

	)

84 
	#BDDIR_UPPER_MASK
 (
UINT64_CAST
 0x1ffffff0)

	)

85 
	#BDECC_UPPER_MASK
 (
UINT64_CAST
 0x1fffffff)

	)

89 
	#NODE_SIZE_BITS
 33

	)

90 
	#BWIN_SIZE_BITS
 29

	)

92 
	#NASID_BITMASK
 (0x7fLL)

	)

93 
	#NASID_BITS
 7

	)

94 
	#NASID_SHFT
 33

	)

95 
	#NASID_META_BITS
 0

	)

96 
	#NASID_LOCAL_BITS
 7

	)

98 
	#BDDIR_UPPER_MASK
 (
UINT64_CAST
 0x3ffffff0)

	)

99 
	#BDECC_UPPER_MASK
 (
UINT64_CAST
 0x3fffffff)

	)

103 
	#NODE_ADDRSPACE_SIZE
 (
UINT64_CAST
 1 << 
NODE_SIZE_BITS
)

	)

105 
	#NASID_MASK
 (
UINT64_CAST
 
NASID_BITMASK
 << 
NASID_SHFT
)

	)

106 
	#NASID_GET
(
_∑
Ë(Ë((
	`UINT64_CAST
 (_pa) >> \

107 
NASID_SHFT
Ë& 
NASID_BITMASK
)

	)

109 #i‡
_LANGUAGE_C
 && !
deföed
(
_STANDALONE
)

110 
	#NODE_SWIN_BASE
(
«sid
, 
widgë
) \

111 ((
widgë
 =0Ë? 
	`NODE_BWIN_BASE
((
«sid
), 
SWIN0_BIGWIN
) \

112 : 
	`RAW_NODE_SWIN_BASE
(
«sid
, 
widgë
))

	)

114 
	#NODE_SWIN_BASE
(
«sid
, 
widgë
) \

115 (
	`NODE_IO_BASE
(
«sid
Ë+ (
	`UINT64_CAST
 (
widgë
Ë<< 
SWIN_SIZE_BITS
))

	)

124 
	#BWIN_INDEX_BITS
 3

	)

125 
	#BWIN_SIZE
 (
UINT64_CAST
 1 << 
BWIN_SIZE_BITS
)

	)

126 
	#BWIN_SIZEMASK
 (
BWIN_SIZE
 - 1)

	)

127 
	#BWIN_WIDGET_MASK
 0x7

	)

128 
	#NODE_BWIN_BASE0
(
«sid
Ë(
	`NODE_IO_BASE
“asidË+ 
BWIN_SIZE
)

	)

129 
	#NODE_BWIN_BASE
(
«sid
, 
bigwö
Ë(
	`NODE_BWIN_BASE0
(nasid) + \

130 (
	`UINT64_CAST
 (
bigwö
Ë<< 
BWIN_SIZE_BITS
))

	)

132 
	#BWIN_WIDGETADDR
(
addr
Ë(◊ddrË& 
BWIN_SIZEMASK
)

	)

133 
	#BWIN_WINDOWNUM
(
addr
Ë((◊ddrË>> 
BWIN_SIZE_BITS
Ë& 
BWIN_WIDGET_MASK
)

	)

144 
	#NODE_BWIN_ADDR
(
«sid
, 
addr
) \

145 (((
addr
Ë>
	`NODE_BWIN_BASE0
(
«sid
)) && \

146 ((
addr
Ë< (
	`NODE_BWIN_BASE
(
«sid
, 
HUB_NUM_BIG_WINDOW
) + \

147 
BWIN_SIZE
)))

	)

156 
	#CALIAS_BASE
 
CAC_BASE


	)

160 
	#BRIDGE_REG_PTR
(
_ba£
, 
_off
Ë((vﬁ©ûê
bridgîeg_t
 *) \

161 ((
__psunsig√d_t
)(
_ba£
Ë+ (__psunsig√d_t)(
_off
)))

	)

163 
	#SN0_WIDGET_BASE
(
_«sid
, 
_wid
Ë(
	`NODE_SWIN_BASE
((_«sid), (_wid)))

	)

165 #i‡
_LANGUAGE_C


166 
	#KERN_NMI_ADDR
(
«sid
, 
¶i˚
) \

167 
	`TO_NODE_UNCAC
((
«sid
), 
IP27_NMI_KREGS_OFFSET
 + \

168 (
IP27_NMI_KREGS_CPU_SIZE
 * (
¶i˚
)))

	)

171 #ifde‡
PROM


173 
	#MISC_PROM_BASE
 
	`PHYS_TO_K0
(0x01300000)

	)

174 
	#MISC_PROM_SIZE
 0x200000

	)

176 
	#DIAG_BASE
 
	`PHYS_TO_K0
(0x01500000)

	)

177 
	#DIAG_SIZE
 0x300000

	)

179 
	#ROUTE_BASE
 
	`PHYS_TO_K0
(0x01800000)

	)

180 
	#ROUTE_SIZE
 0x200000

	)

182 
	#IP27PROM_FLASH_HDR
 
	`PHYS_TO_K0
(0x01300000)

	)

183 
	#IP27PROM_FLASH_DATA
 
	`PHYS_TO_K0
(0x01301000)

	)

184 
	#IP27PROM_CORP_MAX
 32

	)

185 
	#IP27PROM_CORP
 
	`PHYS_TO_K0
(0x01800000)

	)

186 
	#IP27PROM_CORP_SIZE
 0x10000

	)

187 
	#IP27PROM_CORP_STK
 
	`PHYS_TO_K0
(0x01810000)

	)

188 
	#IP27PROM_CORP_STKSIZE
 0x2000

	)

189 
	#IP27PROM_DECOMP_BUF
 
	`PHYS_TO_K0
(0x01900000)

	)

190 
	#IP27PROM_DECOMP_SIZE
 0xfff00

	)

192 
	#IP27PROM_BASE
 
	`PHYS_TO_K0
(0x01a00000)

	)

193 
	#IP27PROM_BASE_MAPPED
 (
K2BASE
 | 0x1fc00000)

	)

194 
	#IP27PROM_SIZE_MAX
 0x200000

	)

199 
	#IP27PROM_STACK_A
 
	`PHYS_TO_K0
(0x01be0000)

	)

200 
	#IP27PROM_STACK_C
 
	`PHYS_TO_K0
(0x01bf0000)

	)

201 
	#IP27PROM_STACK_SHFT
 15

	)

202 
	#IP27PROM_STACK_SIZE
 (1 << 
IP27PROM_STACK_SHFT
)

	)

204 
	#SLAVESTACK_BASE
 
	`PHYS_TO_K0
(0x01580000)

	)

205 
	#SLAVESTACK_SIZE
 0x40000

	)

207 
	#ENETBUFS_BASE
 
	`PHYS_TO_K0
(0x01f80000)

	)

208 
	#ENETBUFS_SIZE
 0x20000

	)

212 
	#IP27PROM_DRT_CACHE_BASE
 
IO6PROM_BASE


	)

213 
	#IP27PROM_DRT_CACHE_SIZE
 0x2000

	)

215 
	#IO6PROM_BASE
 
	`PHYS_TO_K0
(0x03000000)

	)

216 
	#IO6PROM_SIZE
 0x400000

	)

217 
	#IO6PROM_BASE_MAPPED
 (
K2BASE
 | 0x13000000)

	)

218 
	#IO6DPROM_BASE
 
	`PHYS_TO_K0
(0x03000000)

	)

219 
	#IO6DPROM_SIZE
 0x200000

	)

221 
	#IP27PROM_PCFG_K1
 
	`PHYS_TO_K1
(0x02000000)

	)

222 
	#IP27PROM_PCFG
 
	`PHYS_TO_K0
(0x02000000)

	)

223 
	#IP27PROM_PCFG_SIZE
 0xd0000

	)

224 
	#IP27PROM_ERRDMP
 
	`PHYS_TO_K1
(0x020d0000)

	)

225 
	#IP27PROM_ERRDMP_SIZE
 0xf000

	)

227 
	#IP27PROM_INIT_START
 
	`PHYS_TO_K1
(0x020d0000)

	)

228 
	#IP27PROM_CONSOLE
 
	`PHYS_TO_K1
(0x020df000)

	)

229 
	#IP27PROM_CONSOLE_SIZE
 0x200

	)

230 
	#IP27PROM_NETUART
 
	`PHYS_TO_K1
(0x020df200)

	)

231 
	#IP27PROM_NETUART_SIZE
 0x100

	)

232 
	#IP27PROM_UNUSED1
 
	`PHYS_TO_K1
(0x020df300)

	)

233 
	#IP27PROM_UNUSED1_SIZE
 0xd00

	)

234 
	#IP27PROM_INIT_END
 
	`PHYS_TO_K0
(0x020e2000)

	)

236 
	#NODEBUGUNIX_ADDR
 
	`PHYS_TO_K0
(0x00040000)

	)

237 
	#DEBUGUNIX_ADDR
 
	`PHYS_TO_K0
(0x00310000)

	)

239 
	#IP27PROM_INT_LAUNCH
 10

	)

240 
	#IP27PROM_INT_NETUART
 12

	)

247 
	#IP27PROM_ELSC_BASE_A
 
	`PHYS_TO_K0
(0x020e0000)

	)

248 
	#IP27PROM_ELSC_BASE_B
 
	`PHYS_TO_K0
(0x020e0800)

	)

249 
	#IP27PROM_ELSC_BASE_C
 
	`PHYS_TO_K0
(0x020e1000)

	)

250 
	#IP27PROM_ELSC_BASE_D
 
	`PHYS_TO_K0
(0x020e1800)

	)

251 
	#IP27PROM_ELSC_SHFT
 11

	)

252 
	#IP27PROM_ELSC_SIZE
 (1 << 
IP27PROM_ELSC_SHFT
)

	)

254 
	#FREEMEM_BASE
 
	`PHYS_TO_K0
(0x4000000)

	)

256 
	#IO6PROM_STACK_SHFT
 14

	)

257 
	#IO6PROM_STACK_SIZE
 (1 << 
IO6PROM_STACK_SHFT
)

	)

263 
	#IP27PROM_ENTRY
 
	`PHYS_TO_COMPATK1
(0x1fc00000)

	)

264 
	#IP27PROM_RESTART
 
	`PHYS_TO_COMPATK1
(0x1fc00008)

	)

265 
	#IP27PROM_SLAVELOOP
 
	`PHYS_TO_COMPATK1
(0x1fc00010)

	)

266 
	#IP27PROM_PODMODE
 
	`PHYS_TO_COMPATK1
(0x1fc00018)

	)

267 
	#IP27PROM_IOC3UARTPOD
 
	`PHYS_TO_COMPATK1
(0x1fc00020)

	)

268 
	#IP27PROM_FLASHLEDS
 
	`PHYS_TO_COMPATK1
(0x1fc00028)

	)

269 
	#IP27PROM_REPOD
 
	`PHYS_TO_COMPATK1
(0x1fc00030)

	)

270 
	#IP27PROM_LAUNCHSLAVE
 
	`PHYS_TO_COMPATK1
(0x1fc00038)

	)

271 
	#IP27PROM_WAITSLAVE
 
	`PHYS_TO_COMPATK1
(0x1fc00040)

	)

272 
	#IP27PROM_POLLSLAVE
 
	`PHYS_TO_COMPATK1
(0x1fc00048)

	)

274 
	#KL_UART_BASE
 
	`LOCAL_HSPEC
(
HSPEC_UART_0
Ë

	)

275 
	#KL_UART_CMD
 
	`LOCAL_HSPEC
(
HSPEC_UART_0
Ë

	)

276 
	#KL_UART_DATA
 
	`LOCAL_HSPEC
(
HSPEC_UART_1
Ë

	)

278 #i‡!
_LANGUAGE_ASSEMBLY


283 #i‡
deföed
 (
HUB_ERR_STS_WAR
)

284 
	#CACHE_ERR_EFRAME
 0x480

	)

286 
	#CACHE_ERR_EFRAME
 0x400

	)

289 
	#CACHE_ERR_ECCFRAME
 (
CACHE_ERR_EFRAME
 + 
EF_SIZE
)

	)

290 
	#CACHE_ERR_SP_PTR
 (0x1000 - 32Ë

	)

291 
	#CACHE_ERR_IBASE_PTR
 (0x1000 - 40)

	)

292 
	#CACHE_ERR_SP
 (
CACHE_ERR_SP_PTR
 - 16)

	)

293 
	#CACHE_ERR_AREA_SIZE
 (
ARCS_SPB_OFFSET
 - 
CACHE_ERR_EFRAME
)

	)

300 
	#UALIAS_FLIP_BASE
 
UALIAS_BASE


	)

301 
	#UALIAS_FLIP_SHIFT
 15

	)

302 
	#UALIAS_FLIP_ADDR
(
_x
Ë((_xË^ (
	`˝uto¶i˚
(
	`gë˝uid
())<<
UALIAS_FLIP_SHIFT
))

	)

304 
	#EX_HANDLER_OFFSET
(
¶i˚
Ë((¶i˚Ë<< 
UALIAS_FLIP_SHIFT
)

	)

305 
	#EX_HANDLER_ADDR
(
«sid
, 
¶i˚
) \

306 
	`PHYS_TO_K0
(
	`NODE_OFFSET
(
«sid
Ë| 
	`EX_HANDLER_OFFSET
(
¶i˚
))

	)

307 
	#EX_HANDLER_SIZE
 0x0400

	)

309 
	#EX_FRAME_OFFSET
(
¶i˚
Ë((¶i˚Ë<< 
UALIAS_FLIP_SHIFT
 | 0x400)

	)

310 
	#EX_FRAME_ADDR
(
«sid
, 
¶i˚
) \

311 
	`PHYS_TO_K0
(
	`NODE_OFFSET
(
«sid
Ë| 
	`EX_FRAME_OFFSET
(
¶i˚
))

	)

312 
	#EX_FRAME_SIZE
 0x0c00

	)

314 
	#_ARCSPROM


	)

316 #ifde‡
_STANDALONE


362 #i‡
_LANGUAGE_C


364 
	~<sys/PCI/bridge.h
>

366 
__uöt64_t
 
make_¢_key
(
«sid_t
 
«sid
, 
widid
, 
pciid
, 
busid
, 
funcid
);

368 
	#uch¨
 

	)

370 
	#KEY_DEVNASID_SHFT
 48

	)

371 
	#KEY_WIDID_SHFT
 40

	)

372 
	#KEY_FUNCID_SHFT
 39

	)

373 
	#KEY_TYPEID_SHFT
 37

	)

374 
	#KEY_BUSID_SHFT
 35

	)

375 
	#KEY_PCIID_SHFT
 32

	)

376 
	#KEY_HUBWID_SHFT
 24

	)

377 
	#KEY_HSTNASID_SHFT
 8

	)

379 
	#MK_SN0_KEYF
(
«sid
, 
widid
, 
pciid
, 
busid
, 
funcid
) \

380 
	`make_¢_key
(
«sid
, 
widid
, 
pciid
, 
busid
, 
funcid
)

	)

381 
	#MK_SN0_KEY
(
«sid
, 
widid
, 
pciid
, 
busid
) \

382 
	`MK_SN0_KEYF
(
«sid
, 
widid
, 
pciid
, 
busid
, 0)

	)

384 
	#ADD_HUBWID_KEY
(
key
,
hubwid
)\

385 (
key
|=((
__psunsig√d_t
)
hubwid
 << 
KEY_HUBWID_SHFT
))

	)

387 
	#ADD_HSTNASID_KEY
(
key
,
h°«sid
)\

388 (
key
|=((
__psunsig√d_t
)
h°«sid
 << 
KEY_HSTNASID_SHFT
))

	)

390 
	#ADD_FUNCID_KEY
(
key
,
funcid
)\

391 (
key
|=((
__psunsig√d_t
)
funcid
 << 
KEY_FUNCID_SHFT
))

	)

393 
	#ADD_TYPEID_KEY
(
key
,
ty≥id
)\

394 (
key
|=((
__psunsig√d_t
)
ty≥id
 << 
KEY_TYPEID_SHFT
))

	)

396 
	#ADD_BUSID_KEY
(
key
,
busid
)\

397 (
key
|=((
__psunsig√d_t
)
busid
 << 
KEY_BUSID_SHFT
))

	)

399 
	#GET_DEVNASID_FROM_KEY
(
key
Ë(()(key >> 
KEY_DEVNASID_SHFT
))

	)

400 
	#GET_WIDID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_WIDID_SHFT
))

	)

401 
	#GET_FUNCID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_FUNCID_SHFT
)& 0x1)

	)

402 
	#GET_TYPEID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_TYPEID_SHFT
)& 0x3)

	)

403 
	#GET_BUSID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_BUSID_SHFT
)& 0x3)

	)

404 
	#GET_PCIID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_PCIID_SHFT
)& 0x7)

	)

405 
	#GET_HUBWID_FROM_KEY
(
key
Ë((
uch¨
)(key >> 
KEY_HUBWID_SHFT
))

	)

406 
	#GET_HSTNASID_FROM_KEY
(
key
Ë(()(key >> 
KEY_HSTNASID_SHFT
))

	)

408 
	#PCI_BUS1_SHIFT
 23

	)

409 
	#PCIBUS_GET
(
_∑
Ë((_∑ & 
PIC_BUS1_OFFSET
Ë>> 
PCI_BUS1_SHIFT
)

	)

411 
	#PCI_64_TARGID_SHFT
 60

	)

422 
	#PCIBASE_SHIFT
 19

	)

423 
	#PCIBASE_OFFSET
(
func
Ë(fun¯<< 
PCIBASE_SHIFT
)

	)

436 
	#GET_PCIBASE_FROM_KEY
(
key
Ë(
	`NODE_SWIN_BASE
(
	`GET_DEVNASID_FROM_KEY
(key),\

437 
	`GET_WIDID_FROM_KEY
(
key
))\

438 | 
	`PCIBRIDGE_DEVIO
(
	`GET_BUSID_FROM_KEY
(
key
),\

439 
	`GET_PCIID_FROM_KEY
(
key
) -\

440 
	`GET_TYPEID_FROM_KEY
(
key
)) \

441 | 
	`PCIBASE_OFFSET
(
	`GET_FUNCID_FROM_KEY
(
key
)))

	)

443 
	#GET_PCICFGBASE_FROM_KEY
(
key
) \

444 (
	`NODE_SWIN_BASE
(
	`GET_DEVNASID_FROM_KEY
(
key
),\

445 
	`GET_WIDID_FROM_KEY
(
key
))\

446 | 
	`PCIBRIDGE_TYPE0_CFG_DEVF
(
	`GET_BUSID_FROM_KEY
(
key
), \

447 
	`GET_PCIID_FROM_KEY
(
key
),\

448 
	`GET_FUNCID_FROM_KEY
(
key
)))

	)

450 
	#GET_WIDBASE_FROM_KEY
(
key
) \

451 (
	`NODE_SWIN_BASE
(
	`GET_DEVNASID_FROM_KEY
(
key
),\

452 
	`GET_WIDID_FROM_KEY
(
key
)) + \

453 (
	`GET_BUSID_FROM_KEY
(
key
Ë? 
PIC_BUS1_OFFSET
 : 0))

	)

456 
	#PUT_INSTALL_STATUS
(
c
,
s
Ëc->
Revisi⁄
 = 
	)
s

457 
	#GET_INSTALL_STATUS
(
c
Ëc->
Revisi⁄


	)

463 #i‡
deföed
 (
HUB_ERR_STS_WAR
)

465 
	#ERR_STS_WAR_NASID
 63

	)

466 
	#ERR_STS_WAR_OFFSET
 ((
MD_MEM_BANKS
 * 
MD_BANK_SIZE
Ë- 0x100)

	)

	@/usr/include/sys/SN/SN1/arch.h

13 #i‚de‡
__SYS_SN_SN1_ARCH_H__


14 
	#__SYS_SN_SN1_ARCH_H__


	)

16 #i‡
deföed
(
N_MODE
)

24 
	#MAX_NASIDS
 128

	)

30 
	#MAXCPUS
 512

	)

37 
	#MAX_COMPACT_NODES
 128

	)

42 
	#MAX_PEBRICKS
 4

	)

48 
	#MAX_NODE_WARDS
 8

	)

53 
	#MAX_REGIONS
 64

	)

54 
	#MAX_NONPREMIUM_REGIONS
 16

	)

55 
	#MAX_PREMIUM_REGIONS
 
MAX_REGIONS


	)

62 
	#MAX_PARTITIONS
 
MAX_REGIONS


	)

65 
	#NASID_MASK_BYTES
 ((
MAX_NASIDS
 + 7Ë/ 8)

	)

71 
	#MAX_MEM_SLOTS
 8

	)

73 #i‡
deföed
(
N_MODE
)

77 
	#SLOT_SHIFT
 (30)

	)

78 
	#SLOT_MIN_MEM_SIZE
 (64*1024*1024)

	)

83 
	#NUM_SUBNODES
 2

	)

84 
	#SUBNODE_SHFT
 1

	)

85 
	#SUBNODE_MASK
 (0x1 << 
SUBNODE_SHFT
)

	)

86 
	#LOCALCPU_SHFT
 0

	)

87 
	#LOCALCPU_MASK
 (0x1 << 
LOCALCPU_SHFT
)

	)

88 
	#SUBNODE
(
¶i˚
Ë(((¶i˚Ë& 
SUBNODE_MASK
Ë>> 
SUBNODE_SHFT
)

	)

89 
	#LOCALCPU
(
¶i˚
Ë(((¶i˚Ë& 
LOCALCPU_MASK
Ë>> 
LOCALCPU_SHFT
)

	)

90 
	#TO_SLICE
(
subn
, 
loˇl
Ë(((subnË<< 
SUBNODE_SHFT
) | \

91 ((
loˇl
Ë<< 
LOCALCPU_SHFT
))

	)

	@/usr/include/sys/SN/SN1/bdrkhspecregs.h

28 #i‚de‡
__SYS_SN_SN1_BDRKHSPECREGS_H__


29 
	#__SYS_SN_SN1_BDRKHSPECREGS_H__


	)

33 
	#HSPEC_MEM_DIMM_INIT_0
 0x00000000

	)

40 
	#HSPEC_MEM_DIMM_INIT_1
 0x00000008

	)

47 
	#HSPEC_MEM_DIMM_INIT_2
 0x00000010

	)

54 
	#HSPEC_MEM_DIMM_INIT_3
 0x00000018

	)

61 
	#HSPEC_MEM_DIMM_INIT_4
 0x00000020

	)

68 
	#HSPEC_MEM_DIMM_INIT_5
 0x00000028

	)

75 
	#HSPEC_MEM_DIMM_INIT_6
 0x00000030

	)

82 
	#HSPEC_MEM_DIMM_INIT_7
 0x00000038

	)

89 
	#HSPEC_DIR_DIMM_INIT_0
 0x00000040

	)

96 
	#HSPEC_DIR_DIMM_INIT_1
 0x00000048

	)

103 
	#HSPEC_DIR_DIMM_INIT_2
 0x00000050

	)

110 
	#HSPEC_DIR_DIMM_INIT_3
 0x00000058

	)

117 
	#HSPEC_DIR_DIMM_INIT_4
 0x00000060

	)

124 
	#HSPEC_DIR_DIMM_INIT_5
 0x00000068

	)

131 
	#HSPEC_DIR_DIMM_INIT_6
 0x00000070

	)

138 
	#HSPEC_DIR_DIMM_INIT_7
 0x00000078

	)

145 
	#HSPEC_UART_0
 0x00000080

	)

149 
	#HSPEC_UART_1
 0x00000088

	)

153 
	#HSPEC_UART_2
 0x00000090

	)

157 
	#HSPEC_UART_3
 0x00000098

	)

161 
	#HSPEC_UART_4
 0x000000A0

	)

165 
	#HSPEC_UART_5
 0x000000A8

	)

169 
	#HSPEC_UART_6
 0x000000B0

	)

173 
	#HSPEC_UART_7
 0x000000B8

	)

177 
	#HSPEC_LED0
 0x000000C0

	)

181 
	#HSPEC_LED1
 0x000000C8

	)

185 
	#HSPEC_LED2
 0x000000D0

	)

189 
	#HSPEC_LED3
 0x000000D8

	)

193 
	#HSPEC_SYNERGY0_0
 0x04000000

	)

197 
	#HSPEC_SYNERGY0_2097151
 0x04FFFFF8

	)

201 
	#HSPEC_SYNERGY1_0
 0x05000000

	)

205 
	#HSPEC_SYNERGY1_2097151
 0x05FFFFF8

	)

211 #ifde‡
_LANGUAGE_C


227 
	uh•ec_mem_dimm_öô_0_u
 {

228 
bdrkªg_t
 
	mh•ec_mem_dimm_öô_0_ªgvÆ
;

230 
bdrkªg_t
 
	mmdi0_ª£rved
 : 52;

231 
bdrkªg_t
 
	mmdi0_dimm_mode
 : 12;

232 } 
	mh•ec_mem_dimm_öô_0_Êd_s
;

233 } 
	th•ec_mem_dimm_öô_0_u_t
;

252 
	uh•ec_mem_dimm_öô_7_u
 {

253 
bdrkªg_t
 
	mh•ec_mem_dimm_öô_7_ªgvÆ
;

255 
bdrkªg_t
 
	mmdi7_ª£rved
 : 52;

256 
bdrkªg_t
 
	mmdi7_dimm_mode
 : 12;

257 } 
	mh•ec_mem_dimm_öô_7_Êd_s
;

258 } 
	th•ec_mem_dimm_öô_7_u_t
;

277 
	uh•ec_dú_dimm_öô_0_u
 {

278 
bdrkªg_t
 
	mh•ec_dú_dimm_öô_0_ªgvÆ
;

280 
bdrkªg_t
 
	mddi0_ª£rved
 : 52;

281 
bdrkªg_t
 
	mddi0_dimm_mode
 : 12;

282 } 
	mh•ec_dú_dimm_öô_0_Êd_s
;

283 } 
	th•ec_dú_dimm_öô_0_u_t
;

302 
	uh•ec_dú_dimm_öô_7_u
 {

303 
bdrkªg_t
 
	mh•ec_dú_dimm_öô_7_ªgvÆ
;

305 
bdrkªg_t
 
	mddi7_ª£rved
 : 52;

306 
bdrkªg_t
 
	mddi7_dimm_mode
 : 12;

307 } 
	mh•ec_dú_dimm_öô_7_Êd_s
;

308 } 
	th•ec_dú_dimm_öô_7_u_t
;

323 
	uh•ec_u¨t_0_u
 {

324 
bdrkªg_t
 
	mh•ec_u¨t_0_ªgvÆ
;

326 
bdrkªg_t
 
	mu0_ª£rved
 : 55;

327 
bdrkªg_t
 
	mu0_unu£d
 : 1;

328 
bdrkªg_t
 
	mu0_d©a
 : 8;

329 } 
	mh•ec_u¨t_0_Êd_s
;

330 } 
	th•ec_u¨t_0_u_t
;

345 
	uh•ec_u¨t_7_u
 {

346 
bdrkªg_t
 
	mh•ec_u¨t_7_ªgvÆ
;

348 
bdrkªg_t
 
	mu7_ª£rved
 : 55;

349 
bdrkªg_t
 
	mu7_unu£d
 : 1;

350 
bdrkªg_t
 
	mu7_d©a
 : 8;

351 } 
	mh•ec_u¨t_7_Êd_s
;

352 } 
	th•ec_u¨t_7_u_t
;

366 
	uh•ec_Àd0_u
 {

367 
bdrkªg_t
 
	mh•ec_Àd0_ªgvÆ
;

369 
bdrkªg_t
 
	ml_ª£rved
 : 55;

370 
bdrkªg_t
 
	ml_unu£d
 : 1;

371 
bdrkªg_t
 
	ml_d©a
 : 8;

372 } 
	mh•ec_Àd0_Êd_s
;

373 } 
	th•ec_Àd0_u_t
;

387 
	uh•ec_Àd1_u
 {

388 
bdrkªg_t
 
	mh•ec_Àd1_ªgvÆ
;

390 
bdrkªg_t
 
	ml_ª£rved
 : 55;

391 
bdrkªg_t
 
	ml_unu£d
 : 1;

392 
bdrkªg_t
 
	ml_d©a
 : 8;

393 } 
	mh•ec_Àd1_Êd_s
;

394 } 
	th•ec_Àd1_u_t
;

408 
	uh•ec_Àd2_u
 {

409 
bdrkªg_t
 
	mh•ec_Àd2_ªgvÆ
;

411 
bdrkªg_t
 
	ml_ª£rved
 : 55;

412 
bdrkªg_t
 
	ml_unu£d
 : 1;

413 
bdrkªg_t
 
	ml_d©a
 : 8;

414 } 
	mh•ec_Àd2_Êd_s
;

415 } 
	th•ec_Àd2_u_t
;

429 
	uh•ec_Àd3_u
 {

430 
bdrkªg_t
 
	mh•ec_Àd3_ªgvÆ
;

432 
bdrkªg_t
 
	ml_ª£rved
 : 55;

433 
bdrkªg_t
 
	ml_unu£d
 : 1;

434 
bdrkªg_t
 
	ml_d©a
 : 8;

435 } 
	mh•ec_Àd3_Êd_s
;

436 } 
	th•ec_Àd3_u_t
;

450 
	uh•ec_sy√rgy0_0_u
 {

451 
bdrkªg_t
 
	mh•ec_sy√rgy0_0_ªgvÆ
;

453 
bdrkªg_t
 
	ms0_d©a
 : 64;

454 } 
	mh•ec_sy√rgy0_0_Êd_s
;

455 } 
	th•ec_sy√rgy0_0_u_t
;

469 
	uh•ec_sy√rgy0_2097151_u
 {

470 
bdrkªg_t
 
	mh•ec_sy√rgy0_2097151_ªgvÆ
;

472 
bdrkªg_t
 
	ms2_d©a
 : 64;

473 } 
	mh•ec_sy√rgy0_2097151_Êd_s
;

474 } 
	th•ec_sy√rgy0_2097151_u_t
;

488 
	uh•ec_sy√rgy1_0_u
 {

489 
bdrkªg_t
 
	mh•ec_sy√rgy1_0_ªgvÆ
;

491 
bdrkªg_t
 
	ms0_d©a
 : 64;

492 } 
	mh•ec_sy√rgy1_0_Êd_s
;

493 } 
	th•ec_sy√rgy1_0_u_t
;

507 
	uh•ec_sy√rgy1_2097151_u
 {

508 
bdrkªg_t
 
	mh•ec_sy√rgy1_2097151_ªgvÆ
;

510 
bdrkªg_t
 
	ms2_d©a
 : 64;

511 } 
	mh•ec_sy√rgy1_2097151_Êd_s
;

512 } 
	th•ec_sy√rgy1_2097151_u_t
;

	@/usr/include/sys/SN/SN1/bdrkhspecregs_next.h

19 #i‚de‡
__SYS_SN_SN1_BDRKHSPECREGS_NEXT_H__


20 
	#__SYS_SN_SN1_BDRKHSPECREGS_NEXT_H__


	)

24 
	#HS_PIMM_PSC_SHFT
(
subnode
Ë(4 * (subnode))

	)

25 
	#HS_PIMM_PSC_MASK
(
subnode
Ë(0x‡<< 
	`HS_PIMM_PSC_SHFT
(subnode))

	)

26 
	#HS_SN10_PSC_SHFT
 0

	)

27 
	#HS_SN10_PSC_MASK
 (0xf‡<< 
HS_SN10_PSC_SHFT
)

	)

28 
	#HS_SN11_PSC_SHFT
 0

	)

29 
	#HS_SN11_PSC_MASK
 (0x‡<< 
HS_SN11_PSC_SHFT
)

	)

30 
	#HS_IP53_PSC_SHFT
 0

	)

31 
	#HS_IP53_PSC_MASK
 (0x‡<< 
HS_IP53_PSC_SHFT
)

	)

36 
	#HS_NON_CBRICK_SHFT
 12

	)

37 
	#HS_NON_CBRICK_MASK
 (0x‡<< 
HS_NON_CBRICK_SHFT
)

	)

39 
	#HS_PEBRICK_BITS
 (0x¯<< 
HS_NON_CBRICK_SHFT
)

	)

40 
	#HS_SN10_BITS
 (0x8 << 
HS_NON_CBRICK_SHFT
)

	)

41 
	#HS_SN11_BITS
 (0x4 << 
HS_NON_CBRICK_SHFT
)

	)

42 
	#HS_IP53_BITS
 (0x2 << 
HS_NON_CBRICK_SHFT
)

	)

48 #ifde‡
_LANGUAGE_C


50 
	#CPU_LED_ADDR
(
_«sid
, 
_¶i˚
) \

51 
	`REMOTE_HSPEC_ADDR
((
_«sid
), 
HSPEC_LED0
 + ((
_¶i˚
Ë<< 3))

	)

53 
	#SET_CPU_LEDS
(
_«sid
, 
_¶i˚
, 
_vÆ
) \

54 (
	`HUB_S
(
	`CPU_LED_ADDR
(
_«sid
, 
_¶i˚
), (
_vÆ
)))

	)

56 
	#SET_MY_LEDS
(
_v
) \

57 
	`SET_CPU_LEDS
(
	`gë_«sid
(), 
	`gë_¶i˚
(), (
_v
))

	)

	@/usr/include/sys/SN/SN1/hubio.h

28 #i‚de‡
__SYS_SN_SN1_HUBIO_H__


29 
	#__SYS_SN_SN1_HUBIO_H__


	)

33 
	#IIO_WID
 0x00400000

	)

44 
	#IIO_WSTAT
 0x00400008

	)

51 
	#IIO_WCR
 0x00400020

	)

58 
	#IIO_ILAPR
 0x00400100

	)

65 
	#IIO_ILAPO
 0x00400108

	)

72 
	#IIO_IOWA
 0x00400110

	)

79 
	#IIO_IIWA
 0x00400118

	)

86 
	#IIO_IIDEM
 0x00400120

	)

93 
	#IIO_ILCSR
 0x00400128

	)

100 
	#IIO_ILLR
 0x00400130

	)

104 
	#IIO_IIDSR
 0x00400138

	)

111 
	#IIO_IGFX0
 0x00400140

	)

118 
	#IIO_IGFX1
 0x00400148

	)

125 
	#IIO_ISCR0
 0x00400150

	)

132 
	#IIO_ISCR1
 0x00400158

	)

139 
	#IIO_ITTE1
 0x00400160

	)

146 
	#IIO_ITTE2
 0x00400168

	)

153 
	#IIO_ITTE3
 0x00400170

	)

160 
	#IIO_ITTE4
 0x00400178

	)

167 
	#IIO_ITTE5
 0x00400180

	)

174 
	#IIO_ITTE6
 0x00400188

	)

181 
	#IIO_ITTE7
 0x00400190

	)

188 
	#IIO_IPRB0
 0x00400198

	)

192 
	#IIO_IPRB8
 0x004001A0

	)

196 
	#IIO_IPRB9
 0x004001A8

	)

200 
	#IIO_IPRBA
 0x004001B0

	)

204 
	#IIO_IPRBB
 0x004001B8

	)

208 
	#IIO_IPRBC
 0x004001C0

	)

212 
	#IIO_IPRBD
 0x004001C8

	)

216 
	#IIO_IPRBE
 0x004001D0

	)

220 
	#IIO_IPRBF
 0x004001D8

	)

224 
	#IIO_IXCC
 0x004001E0

	)

231 
	#IIO_IMEM
 0x004001E8

	)

238 
	#IIO_IXTT
 0x004001F0

	)

245 
	#IIO_IECLR
 0x004001F8

	)

252 
	#IIO_IBCR
 0x00400200

	)

259 
	#IIO_IXSM
 0x00400208

	)

266 
	#IIO_IXSS
 0x00400210

	)

273 
	#IIO_ILCT
 0x00400218

	)

277 
	#IIO_IIEPH1
 0x00400220

	)

285 
	#IIO_IIEPH2
 0x00400228

	)

293 
	#IIO_IPCA
 0x00400300

	)

300 
	#IIO_IPRTE0
 0x00400308

	)

307 
	#IIO_IPRTE1
 0x00400310

	)

314 
	#IIO_IPRTE2
 0x00400318

	)

321 
	#IIO_IPRTE3
 0x00400320

	)

328 
	#IIO_IPRTE4
 0x00400328

	)

335 
	#IIO_IPRTE5
 0x00400330

	)

342 
	#IIO_IPRTE6
 0x00400338

	)

349 
	#IIO_IPRTE7
 0x00400340

	)

356 
	#IIO_IPDR
 0x00400388

	)

363 
	#IIO_ICDR
 0x00400390

	)

371 
	#IIO_IFDR
 0x00400398

	)

378 
	#IIO_IIAP
 0x004003A0

	)

385 
	#IIO_ICMR
 0x004003A8

	)

392 
	#IIO_ICCR
 0x004003B0

	)

399 
	#IIO_ICTO
 0x004003B8

	)

403 
	#IIO_ICTP
 0x004003C0

	)

410 
	#IIO_ICRB0_A
 0x00400400

	)

414 
	#IIO_ICRB0_B
 0x00400408

	)

418 
	#IIO_ICRB0_C
 0x00400410

	)

422 
	#IIO_ICRB0_D
 0x00400418

	)

426 
	#IIO_ICRB1_A
 0x00400420

	)

430 
	#IIO_ICRB1_B
 0x00400428

	)

434 
	#IIO_ICRB1_C
 0x00400430

	)

438 
	#IIO_ICRB1_D
 0x00400438

	)

442 
	#IIO_ICRB2_A
 0x00400440

	)

446 
	#IIO_ICRB2_B
 0x00400448

	)

450 
	#IIO_ICRB2_C
 0x00400450

	)

454 
	#IIO_ICRB2_D
 0x00400458

	)

458 
	#IIO_ICRB3_A
 0x00400460

	)

462 
	#IIO_ICRB3_B
 0x00400468

	)

466 
	#IIO_ICRB3_C
 0x00400470

	)

470 
	#IIO_ICRB3_D
 0x00400478

	)

474 
	#IIO_ICRB4_A
 0x00400480

	)

478 
	#IIO_ICRB4_B
 0x00400488

	)

482 
	#IIO_ICRB4_C
 0x00400490

	)

486 
	#IIO_ICRB4_D
 0x00400498

	)

490 
	#IIO_ICRB5_A
 0x004004A0

	)

494 
	#IIO_ICRB5_B
 0x004004A8

	)

498 
	#IIO_ICRB5_C
 0x004004B0

	)

502 
	#IIO_ICRB5_D
 0x004004B8

	)

506 
	#IIO_ICRB6_A
 0x004004C0

	)

510 
	#IIO_ICRB6_B
 0x004004C8

	)

514 
	#IIO_ICRB6_C
 0x004004D0

	)

518 
	#IIO_ICRB6_D
 0x004004D8

	)

522 
	#IIO_ICRB7_A
 0x004004E0

	)

526 
	#IIO_ICRB7_B
 0x004004E8

	)

530 
	#IIO_ICRB7_C
 0x004004F0

	)

534 
	#IIO_ICRB7_D
 0x004004F8

	)

538 
	#IIO_ICRB8_A
 0x00400500

	)

542 
	#IIO_ICRB8_B
 0x00400508

	)

546 
	#IIO_ICRB8_C
 0x00400510

	)

550 
	#IIO_ICRB8_D
 0x00400518

	)

554 
	#IIO_ICRB9_A
 0x00400520

	)

558 
	#IIO_ICRB9_B
 0x00400528

	)

562 
	#IIO_ICRB9_C
 0x00400530

	)

566 
	#IIO_ICRB9_D
 0x00400538

	)

570 
	#IIO_ICRBA_A
 0x00400540

	)

574 
	#IIO_ICRBA_B
 0x00400548

	)

578 
	#IIO_ICRBA_C
 0x00400550

	)

582 
	#IIO_ICRBA_D
 0x00400558

	)

586 
	#IIO_ICRBB_A
 0x00400560

	)

590 
	#IIO_ICRBB_B
 0x00400568

	)

594 
	#IIO_ICRBB_C
 0x00400570

	)

598 
	#IIO_ICRBB_D
 0x00400578

	)

602 
	#IIO_ICRBC_A
 0x00400580

	)

606 
	#IIO_ICRBC_B
 0x00400588

	)

610 
	#IIO_ICRBC_C
 0x00400590

	)

614 
	#IIO_ICRBC_D
 0x00400598

	)

618 
	#IIO_ICRBD_A
 0x004005A0

	)

622 
	#IIO_ICRBD_B
 0x004005A8

	)

626 
	#IIO_ICRBD_C
 0x004005B0

	)

630 
	#IIO_ICRBD_D
 0x004005B8

	)

634 
	#IIO_ICRBE_A
 0x004005C0

	)

638 
	#IIO_ICRBE_B
 0x004005C8

	)

642 
	#IIO_ICRBE_C
 0x004005D0

	)

646 
	#IIO_ICRBE_D
 0x004005D8

	)

650 
	#IIO_ICSML
 0x00400600

	)

657 
	#IIO_ICSMH
 0x00400608

	)

664 
	#IIO_IDBSS
 0x00400610

	)

671 
	#IIO_IBLS0
 0x00410000

	)

678 
	#IIO_IBSA0
 0x00410008

	)

685 
	#IIO_IBDA0
 0x00410010

	)

692 
	#IIO_IBCT0
 0x00410018

	)

699 
	#IIO_IBNA0
 0x00410020

	)

706 
	#IIO_IBIA0
 0x00410028

	)

713 
	#IIO_IBLS1
 0x00420000

	)

720 
	#IIO_IBSA1
 0x00420008

	)

727 
	#IIO_IBDA1
 0x00420010

	)

734 
	#IIO_IBCT1
 0x00420018

	)

741 
	#IIO_IBNA1
 0x00420020

	)

748 
	#IIO_IBIA1
 0x00420028

	)

755 
	#IIO_IPCR
 0x00430000

	)

762 
	#IIO_IPPR
 0x00430008

	)

771 #ifde‡
_LANGUAGE_C


787 
	uii_wid_u
 {

788 
bdrkªg_t
 
	mii_wid_ªgvÆ
;

790 
bdrkªg_t
 
	mw_rsvd
 : 32;

791 
bdrkªg_t
 
	mw_ªv_num
 : 4;

792 
bdrkªg_t
 
	mw_∑π_num
 : 16;

793 
bdrkªg_t
 
	mw_mfg_num
 : 11;

794 
bdrkªg_t
 
	mw_rsvd_1
 : 1;

795 } 
	mii_wid_Êd_s
;

796 } 
	tii_wid_u_t
;

812 
	uii_w°©_u
 {

813 
bdrkªg_t
 
	mii_w°©_ªgvÆ
;

815 
bdrkªg_t
 
	mw_rsvd
 : 31;

816 
bdrkªg_t
 
	mw_¸azy
 : 1;

817 
bdrkªg_t
 
	mw_rsvd_1
 : 8;

818 
bdrkªg_t
 
	mw_Œp_tx_˙t
 : 8;

819 
bdrkªg_t
 
	mw_rsvd_2
 : 6;

820 
bdrkªg_t
 
	mw_tx_mx_πy
 : 1;

821 
bdrkªg_t
 
	mw_rsvd_3
 : 3;

822 
bdrkªg_t
 
	mw_xt_èû_to
 : 1;

823 
bdrkªg_t
 
	mw_xt_¸d_to
 : 1;

824 
bdrkªg_t
 
	mw_≥ndög
 : 4;

825 } 
	mii_w°©_Êd_s
;

826 } 
	tii_w°©_u_t
;

841 
	uii_w¸_u
 {

842 
bdrkªg_t
 
	mii_w¸_ªgvÆ
;

844 
bdrkªg_t
 
	mw_rsvd
 : 41;

845 
bdrkªg_t
 
	mw_e_thªsh
 : 5;

846 
bdrkªg_t
 
	mw_dú_c⁄
 : 1;

847 
bdrkªg_t
 
	mw_f_bad_pkt
 : 1;

848 
bdrkªg_t
 
	mw_d°_¸d
 : 3;

849 
bdrkªg_t
 
	mw_rsvd_1
 : 8;

850 
bdrkªg_t
 
	mw_èg
 : 1;

851 
bdrkªg_t
 
	mw_wid
 : 4;

852 } 
	mii_w¸_Êd_s
;

853 } 
	tii_w¸_u_t
;

888 
	uii_û≠r_u
 {

889 
bdrkªg_t
 
	mii_û≠r_ªgvÆ
;

891 
bdrkªg_t
 
	mi_ªgi⁄
 : 64;

892 } 
	mii_û≠r_Êd_s
;

893 } 
	tii_û≠r_u_t
;

914 
	uii_û≠o_u
 {

915 
bdrkªg_t
 
	mii_û≠o_ªgvÆ
;

917 
bdrkªg_t
 
	mi_rsvd
 : 55;

918 
bdrkªg_t
 
	mi_io_ovºide
 : 9;

919 } 
	mii_û≠o_Êd_s
;

920 } 
	tii_û≠o_u_t
;

935 
	uii_iowa_u
 {

936 
bdrkªg_t
 
	mii_iowa_ªgvÆ
;

938 
bdrkªg_t
 
	mi_rsvd
 : 48;

939 
bdrkªg_t
 
	mi_wx_ﬂc
 : 8;

940 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

941 
bdrkªg_t
 
	mi_w0_ﬂc
 : 1;

942 } 
	mii_iowa_Êd_s
;

943 } 
	tii_iowa_u_t
;

960 
	uii_iiwa_u
 {

961 
bdrkªg_t
 
	mii_iiwa_ªgvÆ
;

963 
bdrkªg_t
 
	mi_rsvd
 : 48;

964 
bdrkªg_t
 
	mi_wx_üc
 : 8;

965 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

966 
bdrkªg_t
 
	mi_w0_üc
 : 1;

967 } 
	mii_iiwa_Êd_s
;

968 } 
	tii_iiwa_u_t
;

995 
	uii_iidem_u
 {

996 
bdrkªg_t
 
	mii_iidem_ªgvÆ
;

998 
bdrkªg_t
 
	mi_wf_dxs
 : 8;

999 
bdrkªg_t
 
	mi_we_dxs
 : 8;

1000 
bdrkªg_t
 
	mi_wd_dxs
 : 8;

1001 
bdrkªg_t
 
	mi_wc_dxs
 : 8;

1002 
bdrkªg_t
 
	mi_wb_dxs
 : 8;

1003 
bdrkªg_t
 
	mi_wa_dxs
 : 8;

1004 
bdrkªg_t
 
	mi_w9_dxs
 : 8;

1005 
bdrkªg_t
 
	mi_w8_dxs
 : 8;

1006 } 
	mii_iidem_Êd_s
;

1007 } 
	tii_iidem_u_t
;

1022 
	uii_ûc§_u
 {

1023 
bdrkªg_t
 
	mii_ûc§_ªgvÆ
;

1025 
bdrkªg_t
 
	mi_rsvd
 : 22;

1026 
bdrkªg_t
 
	mi_maxbr°
 : 10;

1027 
bdrkªg_t
 
	mi_rsvd_1
 : 4;

1028 
bdrkªg_t
 
	mi_d_avaû_£l
 : 2;

1029 
bdrkªg_t
 
	mi_maxπry
 : 10;

1030 
bdrkªg_t
 
	mi_rsvd_2
 : 1;

1031 
bdrkªg_t
 
	mi_ªmŸe_powî
 : 1;

1032 
bdrkªg_t
 
	mi_Œp_°©
 : 2;

1033 
bdrkªg_t
 
	mi_bm8
 : 1;

1034 
bdrkªg_t
 
	mi_Œp_í
 : 1;

1035 
bdrkªg_t
 
	mi_rsvd_3
 : 1;

1036 
bdrkªg_t
 
	mi_wrmr°
 : 1;

1037 
bdrkªg_t
 
	mi_rsvd_4
 : 2;

1038 
bdrkªg_t
 
	mi_nuŒto
 : 6;

1039 } 
	mii_ûc§_Êd_s
;

1040 } 
	tii_ûc§_u_t
;

1055 
	uii_ûÃ_u
 {

1056 
bdrkªg_t
 
	mii_ûÃ_ªgvÆ
;

1058 
bdrkªg_t
 
	mi_rsvd
 : 32;

1059 
bdrkªg_t
 
	mi_cb_˙t
 : 16;

1060 
bdrkªg_t
 
	mi_¢_˙t
 : 16;

1061 } 
	mii_ûÃ_Êd_s
;

1062 } 
	tii_ûÃ_u_t
;

1084 
	uii_iid§_u
 {

1085 
bdrkªg_t
 
	mii_iid§_ªgvÆ
;

1087 
bdrkªg_t
 
	mi_rsvd
 : 30;

1088 
bdrkªg_t
 
	mi_pi1_f‹w¨d_öt
 : 1;

1089 
bdrkªg_t
 
	mi_pi0_f‹w¨d_öt
 : 1;

1090 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1091 
bdrkªg_t
 
	mi_öt_£¡
 : 1;

1092 
bdrkªg_t
 
	mi_rsvd_2
 : 3;

1093 
bdrkªg_t
 
	mi_íabÀ
 : 1;

1094 
bdrkªg_t
 
	mi_rsvd_3
 : 7;

1095 
bdrkªg_t
 
	mi_node
 : 8;

1096 
bdrkªg_t
 
	mi_pi_id
 : 1;

1097 
bdrkªg_t
 
	mi_rsvd_4
 : 1;

1098 
bdrkªg_t
 
	mi_Àvñ
 : 7;

1099 } 
	mii_iid§_Êd_s
;

1100 } 
	tii_iid§_u_t
;

1119 
	uii_igfx0_u
 {

1120 
bdrkªg_t
 
	mii_igfx0_ªgvÆ
;

1122 
bdrkªg_t
 
	mi_rsvd
 : 47;

1123 
bdrkªg_t
 
	mi_p_num
 : 1;

1124 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1125 
bdrkªg_t
 
	mi_n_num
 : 8;

1126 
bdrkªg_t
 
	mi_pi_id
 : 1;

1127 
bdrkªg_t
 
	mi_w_num
 : 4;

1128 } 
	mii_igfx0_Êd_s
;

1129 } 
	tii_igfx0_u_t
;

1148 
	uii_igfx1_u
 {

1149 
bdrkªg_t
 
	mii_igfx1_ªgvÆ
;

1151 
bdrkªg_t
 
	mi_rsvd
 : 47;

1152 
bdrkªg_t
 
	mi_p_num
 : 1;

1153 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1154 
bdrkªg_t
 
	mi_n_num
 : 8;

1155 
bdrkªg_t
 
	mi_pi_id
 : 1;

1156 
bdrkªg_t
 
	mi_w_num
 : 4;

1157 } 
	mii_igfx1_Êd_s
;

1158 } 
	tii_igfx1_u_t
;

1173 
	uii_is¸0_u
 {

1174 
bdrkªg_t
 
	mii_is¸0_ªgvÆ
;

1176 
bdrkªg_t
 
	mi_s¸©ch
 : 64;

1177 } 
	mii_is¸0_Êd_s
;

1178 } 
	tii_is¸0_u_t
;

1193 
	uii_is¸1_u
 {

1194 
bdrkªg_t
 
	mii_is¸1_ªgvÆ
;

1196 
bdrkªg_t
 
	mi_s¸©ch
 : 64;

1197 } 
	mii_is¸1_Êd_s
;

1198 } 
	tii_is¸1_u_t
;

1233 
	uii_ôã1_u
 {

1234 
bdrkªg_t
 
	mii_ôã1_ªgvÆ
;

1236 
bdrkªg_t
 
	mi_rsvd
 : 51;

1237 
bdrkªg_t
 
	mi_io•
 : 1;

1238 
bdrkªg_t
 
	mi_w_num
 : 4;

1239 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1240 
bdrkªg_t
 
	mi_off£t
 : 5;

1241 } 
	mii_ôã1_Êd_s
;

1242 } 
	tii_ôã1_u_t
;

1277 
	uii_ôã2_u
 {

1278 
bdrkªg_t
 
	mii_ôã2_ªgvÆ
;

1280 
bdrkªg_t
 
	mi_rsvd
 : 51;

1281 
bdrkªg_t
 
	mi_io•
 : 1;

1282 
bdrkªg_t
 
	mi_w_num
 : 4;

1283 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1284 
bdrkªg_t
 
	mi_off£t
 : 5;

1285 } 
	mii_ôã2_Êd_s
;

1286 } 
	tii_ôã2_u_t
;

1321 
	uii_ôã3_u
 {

1322 
bdrkªg_t
 
	mii_ôã3_ªgvÆ
;

1324 
bdrkªg_t
 
	mi_rsvd
 : 51;

1325 
bdrkªg_t
 
	mi_io•
 : 1;

1326 
bdrkªg_t
 
	mi_w_num
 : 4;

1327 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1328 
bdrkªg_t
 
	mi_off£t
 : 5;

1329 } 
	mii_ôã3_Êd_s
;

1330 } 
	tii_ôã3_u_t
;

1365 
	uii_ôã4_u
 {

1366 
bdrkªg_t
 
	mii_ôã4_ªgvÆ
;

1368 
bdrkªg_t
 
	mi_rsvd
 : 51;

1369 
bdrkªg_t
 
	mi_io•
 : 1;

1370 
bdrkªg_t
 
	mi_w_num
 : 4;

1371 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1372 
bdrkªg_t
 
	mi_off£t
 : 5;

1373 } 
	mii_ôã4_Êd_s
;

1374 } 
	tii_ôã4_u_t
;

1409 
	uii_ôã5_u
 {

1410 
bdrkªg_t
 
	mii_ôã5_ªgvÆ
;

1412 
bdrkªg_t
 
	mi_rsvd
 : 51;

1413 
bdrkªg_t
 
	mi_io•
 : 1;

1414 
bdrkªg_t
 
	mi_w_num
 : 4;

1415 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1416 
bdrkªg_t
 
	mi_off£t
 : 5;

1417 } 
	mii_ôã5_Êd_s
;

1418 } 
	tii_ôã5_u_t
;

1453 
	uii_ôã6_u
 {

1454 
bdrkªg_t
 
	mii_ôã6_ªgvÆ
;

1456 
bdrkªg_t
 
	mi_rsvd
 : 51;

1457 
bdrkªg_t
 
	mi_io•
 : 1;

1458 
bdrkªg_t
 
	mi_w_num
 : 4;

1459 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1460 
bdrkªg_t
 
	mi_off£t
 : 5;

1461 } 
	mii_ôã6_Êd_s
;

1462 } 
	tii_ôã6_u_t
;

1497 
	uii_ôã7_u
 {

1498 
bdrkªg_t
 
	mii_ôã7_ªgvÆ
;

1500 
bdrkªg_t
 
	mi_rsvd
 : 51;

1501 
bdrkªg_t
 
	mi_io•
 : 1;

1502 
bdrkªg_t
 
	mi_w_num
 : 4;

1503 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

1504 
bdrkªg_t
 
	mi_off£t
 : 5;

1505 } 
	mii_ôã7_Êd_s
;

1506 } 
	tii_ôã7_u_t
;

1538 
	uii_ùrb0_u
 {

1539 
bdrkªg_t
 
	mii_ùrb0_ªgvÆ
;

1541 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1542 
bdrkªg_t
 
	mi_rsvd
 : 11;

1543 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1544 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1545 
bdrkªg_t
 
	mi_rd_to
 : 1;

1546 
bdrkªg_t
 
	mi_îr‹
 : 1;

1547 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1548 
bdrkªg_t
 
	mi_f
 : 1;

1549 
bdrkªg_t
 
	mi_m
 : 2;

1550 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1551 
bdrkªg_t
 
	mi_nb
 : 14;

1552 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1553 
bdrkªg_t
 
	mi_«
 : 14;

1554 
bdrkªg_t
 
	mi_c
 : 8;

1555 } 
	mii_ùrb0_Êd_s
;

1556 } 
	tii_ùrb0_u_t
;

1588 
	uii_ùrb8_u
 {

1589 
bdrkªg_t
 
	mii_ùrb8_ªgvÆ
;

1591 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1592 
bdrkªg_t
 
	mi_rsvd
 : 11;

1593 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1594 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1595 
bdrkªg_t
 
	mi_rd_to
 : 1;

1596 
bdrkªg_t
 
	mi_îr‹
 : 1;

1597 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1598 
bdrkªg_t
 
	mi_f
 : 1;

1599 
bdrkªg_t
 
	mi_m
 : 2;

1600 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1601 
bdrkªg_t
 
	mi_nb
 : 14;

1602 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1603 
bdrkªg_t
 
	mi_«
 : 14;

1604 
bdrkªg_t
 
	mi_c
 : 8;

1605 } 
	mii_ùrb8_Êd_s
;

1606 } 
	tii_ùrb8_u_t
;

1638 
	uii_ùrb9_u
 {

1639 
bdrkªg_t
 
	mii_ùrb9_ªgvÆ
;

1641 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1642 
bdrkªg_t
 
	mi_rsvd
 : 11;

1643 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1644 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1645 
bdrkªg_t
 
	mi_rd_to
 : 1;

1646 
bdrkªg_t
 
	mi_îr‹
 : 1;

1647 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1648 
bdrkªg_t
 
	mi_f
 : 1;

1649 
bdrkªg_t
 
	mi_m
 : 2;

1650 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1651 
bdrkªg_t
 
	mi_nb
 : 14;

1652 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1653 
bdrkªg_t
 
	mi_«
 : 14;

1654 
bdrkªg_t
 
	mi_c
 : 8;

1655 } 
	mii_ùrb9_Êd_s
;

1656 } 
	tii_ùrb9_u_t
;

1688 
	uii_ùrba_u
 {

1689 
bdrkªg_t
 
	mii_ùrba_ªgvÆ
;

1691 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1692 
bdrkªg_t
 
	mi_rsvd
 : 11;

1693 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1694 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1695 
bdrkªg_t
 
	mi_rd_to
 : 1;

1696 
bdrkªg_t
 
	mi_îr‹
 : 1;

1697 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1698 
bdrkªg_t
 
	mi_f
 : 1;

1699 
bdrkªg_t
 
	mi_m
 : 2;

1700 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1701 
bdrkªg_t
 
	mi_nb
 : 14;

1702 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1703 
bdrkªg_t
 
	mi_«
 : 14;

1704 
bdrkªg_t
 
	mi_c
 : 8;

1705 } 
	mii_ùrba_Êd_s
;

1706 } 
	tii_ùrba_u_t
;

1738 
	uii_ùrbb_u
 {

1739 
bdrkªg_t
 
	mii_ùrbb_ªgvÆ
;

1741 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1742 
bdrkªg_t
 
	mi_rsvd
 : 11;

1743 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1744 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1745 
bdrkªg_t
 
	mi_rd_to
 : 1;

1746 
bdrkªg_t
 
	mi_îr‹
 : 1;

1747 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1748 
bdrkªg_t
 
	mi_f
 : 1;

1749 
bdrkªg_t
 
	mi_m
 : 2;

1750 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1751 
bdrkªg_t
 
	mi_nb
 : 14;

1752 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1753 
bdrkªg_t
 
	mi_«
 : 14;

1754 
bdrkªg_t
 
	mi_c
 : 8;

1755 } 
	mii_ùrbb_Êd_s
;

1756 } 
	tii_ùrbb_u_t
;

1788 
	uii_ùrbc_u
 {

1789 
bdrkªg_t
 
	mii_ùrbc_ªgvÆ
;

1791 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1792 
bdrkªg_t
 
	mi_rsvd
 : 11;

1793 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1794 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1795 
bdrkªg_t
 
	mi_rd_to
 : 1;

1796 
bdrkªg_t
 
	mi_îr‹
 : 1;

1797 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1798 
bdrkªg_t
 
	mi_f
 : 1;

1799 
bdrkªg_t
 
	mi_m
 : 2;

1800 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1801 
bdrkªg_t
 
	mi_nb
 : 14;

1802 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1803 
bdrkªg_t
 
	mi_«
 : 14;

1804 
bdrkªg_t
 
	mi_c
 : 8;

1805 } 
	mii_ùrbc_Êd_s
;

1806 } 
	tii_ùrbc_u_t
;

1838 
	uii_ùrbd_u
 {

1839 
bdrkªg_t
 
	mii_ùrbd_ªgvÆ
;

1841 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1842 
bdrkªg_t
 
	mi_rsvd
 : 11;

1843 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1844 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1845 
bdrkªg_t
 
	mi_rd_to
 : 1;

1846 
bdrkªg_t
 
	mi_îr‹
 : 1;

1847 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1848 
bdrkªg_t
 
	mi_f
 : 1;

1849 
bdrkªg_t
 
	mi_m
 : 2;

1850 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1851 
bdrkªg_t
 
	mi_nb
 : 14;

1852 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1853 
bdrkªg_t
 
	mi_«
 : 14;

1854 
bdrkªg_t
 
	mi_c
 : 8;

1855 } 
	mii_ùrbd_Êd_s
;

1856 } 
	tii_ùrbd_u_t
;

1888 
	uii_ùrbe_u
 {

1889 
bdrkªg_t
 
	mii_ùrbe_ªgvÆ
;

1891 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1892 
bdrkªg_t
 
	mi_rsvd
 : 11;

1893 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1894 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1895 
bdrkªg_t
 
	mi_rd_to
 : 1;

1896 
bdrkªg_t
 
	mi_îr‹
 : 1;

1897 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1898 
bdrkªg_t
 
	mi_f
 : 1;

1899 
bdrkªg_t
 
	mi_m
 : 2;

1900 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1901 
bdrkªg_t
 
	mi_nb
 : 14;

1902 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1903 
bdrkªg_t
 
	mi_«
 : 14;

1904 
bdrkªg_t
 
	mi_c
 : 8;

1905 } 
	mii_ùrbe_Êd_s
;

1906 } 
	tii_ùrbe_u_t
;

1938 
	uii_ùrbf_u
 {

1939 
bdrkªg_t
 
	mii_ùrbf_ªgvÆ
;

1941 
bdrkªg_t
 
	mi_mu…_îr
 : 1;

1942 
bdrkªg_t
 
	mi_rsvd
 : 11;

1943 
bdrkªg_t
 
	mi_•ur_rd
 : 1;

1944 
bdrkªg_t
 
	mi_•ur_wr
 : 1;

1945 
bdrkªg_t
 
	mi_rd_to
 : 1;

1946 
bdrkªg_t
 
	mi_îr‹
 : 1;

1947 
bdrkªg_t
 
	mi_of_˙t
 : 5;

1948 
bdrkªg_t
 
	mi_f
 : 1;

1949 
bdrkªg_t
 
	mi_m
 : 2;

1950 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

1951 
bdrkªg_t
 
	mi_nb
 : 14;

1952 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

1953 
bdrkªg_t
 
	mi_«
 : 14;

1954 
bdrkªg_t
 
	mi_c
 : 8;

1955 } 
	mii_ùrbf_Êd_s
;

1956 } 
	tii_ùrbf_u_t
;

1981 
	uii_ixcc_u
 {

1982 
bdrkªg_t
 
	mii_ixcc_ªgvÆ
;

1984 
bdrkªg_t
 
	mi_rsvd
 : 38;

1985 
bdrkªg_t
 
	mi_time_out
 : 26;

1986 } 
	mii_ixcc_Êd_s
;

1987 } 
	tii_ixcc_u_t
;

2011 
	uii_imem_u
 {

2012 
bdrkªg_t
 
	mii_imem_ªgvÆ
;

2014 
bdrkªg_t
 
	mi_rsvd
 : 51;

2015 
bdrkªg_t
 
	mi_˛r_¥eci£
 : 1;

2016 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2017 
bdrkªg_t
 
	mi_b1_esd
 : 1;

2018 
bdrkªg_t
 
	mi_rsvd_2
 : 3;

2019 
bdrkªg_t
 
	mi_b0_esd
 : 1;

2020 
bdrkªg_t
 
	mi_rsvd_3
 : 3;

2021 
bdrkªg_t
 
	mi_w0_esd
 : 1;

2022 } 
	mii_imem_Êd_s
;

2023 } 
	tii_imem_u_t
;

2055 
	uii_ixâ_u
 {

2056 
bdrkªg_t
 
	mii_ixâ_ªgvÆ
;

2058 
bdrkªg_t
 
	mi_rsvd
 : 4;

2059 
bdrkªg_t
 
	mi_º•_to
 : 5;

2060 
bdrkªg_t
 
	mi_º•_ps
 : 23;

2061 
bdrkªg_t
 
	mi_rsvd_1
 : 6;

2062 
bdrkªg_t
 
	mi_èû_to
 : 26;

2063 } 
	mii_ixâ_Êd_s
;

2064 } 
	tii_ixâ_u_t
;

2083 
	uii_õ˛r_u
 {

2084 
bdrkªg_t
 
	mii_õ˛r_ªgvÆ
;

2086 
bdrkªg_t
 
	mi_ª£rved
 : 32;

2087 
bdrkªg_t
 
	mi_pi1_f‹w¨d_öt
 : 1;

2088 
bdrkªg_t
 
	mi_pi0_f‹w¨d_öt
 : 1;

2089 
bdrkªg_t
 
	mi_•ur_rd_hdr
 : 1;

2090 
bdrkªg_t
 
	mi_ii_öã∫Æ
 : 1;

2091 
bdrkªg_t
 
	mi_ª£rved_1
 : 9;

2092 
bdrkªg_t
 
	mi_e_bã_1
 : 1;

2093 
bdrkªg_t
 
	mi_e_bã_0
 : 1;

2094 
bdrkªg_t
 
	mi_e_¸azy
 : 1;

2095 
bdrkªg_t
 
	mi_e_¥b_f
 : 1;

2096 
bdrkªg_t
 
	mi_e_¥b_e
 : 1;

2097 
bdrkªg_t
 
	mi_e_¥b_d
 : 1;

2098 
bdrkªg_t
 
	mi_e_¥b_c
 : 1;

2099 
bdrkªg_t
 
	mi_e_¥b_b
 : 1;

2100 
bdrkªg_t
 
	mi_e_¥b_a
 : 1;

2101 
bdrkªg_t
 
	mi_e_¥b_9
 : 1;

2102 
bdrkªg_t
 
	mi_e_¥b_8
 : 1;

2103 
bdrkªg_t
 
	mi_rsvd
 : 7;

2104 
bdrkªg_t
 
	mi_e_¥b_0
 : 1;

2105 } 
	mii_õ˛r_Êd_s
;

2106 } 
	tii_õ˛r_u_t
;

2123 
	uii_ib¸_u
 {

2124 
bdrkªg_t
 
	mii_ib¸_ªgvÆ
;

2126 
bdrkªg_t
 
	mi_rsvd
 : 55;

2127 
bdrkªg_t
 
	mi_so·_ª£t
 : 1;

2128 
bdrkªg_t
 
	mi_rsvd_1
 : 4;

2129 
bdrkªg_t
 
	mi_cou¡
 : 4;

2130 } 
	mii_ib¸_Êd_s
;

2131 } 
	tii_ib¸_u_t
;

2168 
	uii_ixsm_u
 {

2169 
bdrkªg_t
 
	mii_ixsm_ªgvÆ
;

2171 
bdrkªg_t
 
	mi_didn
 : 4;

2172 
bdrkªg_t
 
	mi_sidn
 : 4;

2173 
bdrkªg_t
 
	mi_∑˘yp
 : 4;

2174 
bdrkªg_t
 
	mi_äum
 : 5;

2175 
bdrkªg_t
 
	mi_˘
 : 1;

2176 
bdrkªg_t
 
	mi_ds
 : 2;

2177 
bdrkªg_t
 
	mi_gbr
 : 1;

2178 
bdrkªg_t
 
	mi_vbpm
 : 1;

2179 
bdrkªg_t
 
	mi_îr‹
 : 1;

2180 
bdrkªg_t
 
	mi_bo
 : 1;

2181 
bdrkªg_t
 
	mi_Æt_∑˘yp
 : 4;

2182 
bdrkªg_t
 
	mi_èg
 : 3;

2183 
bdrkªg_t
 
	mi_ª£rved
 : 1;

2184 
bdrkªg_t
 
	mi_byã_í
 : 32;

2185 } 
	mii_ixsm_Êd_s
;

2186 } 
	tii_ixsm_u_t
;

2201 
	uii_ixss_u
 {

2202 
bdrkªg_t
 
	mii_ixss_ªgvÆ
;

2204 
bdrkªg_t
 
	mi_vÆid
 : 1;

2205 
bdrkªg_t
 
	mi_rsvd
 : 55;

2206 
bdrkªg_t
 
	mi_sideb™d
 : 8;

2207 } 
	mii_ixss_Êd_s
;

2208 } 
	tii_ixss_u_t
;

2228 
	uii_û˘_u
 {

2229 
bdrkªg_t
 
	mii_û˘_ªgvÆ
;

2231 
bdrkªg_t
 
	mi_rsvd
 : 9;

2232 
bdrkªg_t
 
	mi_ã°_îr_ˇ±uª
 : 1;

2233 
bdrkªg_t
 
	mi_ã°_˛ór
 : 1;

2234 
bdrkªg_t
 
	mi_ã°_Êô
 : 3;

2235 
bdrkªg_t
 
	mi_ã°_cbîr
 : 1;

2236 
bdrkªg_t
 
	mi_ã°_vÆid
 : 1;

2237 
bdrkªg_t
 
	mi_ã°_d©a
 : 20;

2238 
bdrkªg_t
 
	mi_ã°_mask
 : 8;

2239 
bdrkªg_t
 
	mi_ã°_£ed
 : 20;

2240 } 
	mii_û˘_Êd_s
;

2241 } 
	tii_û˘_u_t
;

2269 
	uii_iõph1_u
 {

2270 
bdrkªg_t
 
	mii_iõph1_ªgvÆ
;

2272 
bdrkªg_t
 
	mi_rsvd
 : 19;

2273 
bdrkªg_t
 
	mi_vÆid
 : 1;

2274 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2275 
bdrkªg_t
 
	mi_ovîrun
 : 1;

2276 
bdrkªg_t
 
	mi_rsvd_2
 : 4;

2277 
bdrkªg_t
 
	mi_îr_ty≥
 : 4;

2278 
bdrkªg_t
 
	mi_rsvd_3
 : 1;

2279 
bdrkªg_t
 
	mi_sour˚
 : 11;

2280 
bdrkªg_t
 
	mi_rsvd_4
 : 1;

2281 
bdrkªg_t
 
	mi_suµl
 : 11;

2282 
bdrkªg_t
 
	mi_rsvd_5
 : 1;

2283 
bdrkªg_t
 
	mi_comm™d
 : 7;

2284 } 
	mii_iõph1_Êd_s
;

2285 } 
	tii_iõph1_u_t
;

2304 
	uii_iõph2_u
 {

2305 
bdrkªg_t
 
	mii_iõph2_ªgvÆ
;

2307 
bdrkªg_t
 
	mi_rsvd
 : 23;

2308 
bdrkªg_t
 
	mi_èû
 : 1;

2309 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

2310 
bdrkªg_t
 
	mi_addªss
 : 38;

2311 } 
	mii_iõph2_Êd_s
;

2312 } 
	tii_iõph2_u_t
;

2330 
	uii_ùˇ_u
 {

2331 
bdrkªg_t
 
	mii_ùˇ_ªgvÆ
;

2333 
bdrkªg_t
 
	mi_rsvd
 : 54;

2334 
bdrkªg_t
 
	mi_fõld
 : 2;

2335 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2336 
bdrkªg_t
 
	mi_adju°
 : 1;

2337 
bdrkªg_t
 
	mi_wid
 : 4;

2338 } 
	mii_ùˇ_Êd_s
;

2339 } 
	tii_ùˇ_u_t
;

2357 
	uii_ùπe0_u
 {

2358 
bdrkªg_t
 
	mii_ùπe0_ªgvÆ
;

2360 
bdrkªg_t
 
	mi_vld
 : 1;

2361 
bdrkªg_t
 
	mi_to_˙t
 : 5;

2362 
bdrkªg_t
 
	mi_widgë
 : 4;

2363 
bdrkªg_t
 
	mi_rsvd
 : 2;

2364 
bdrkªg_t
 
	mi_sour˚
 : 8;

2365 
bdrkªg_t
 
	mi_öô
 : 3;

2366 
bdrkªg_t
 
	mi_addr
 : 38;

2367 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2368 } 
	mii_ùπe0_Êd_s
;

2369 } 
	tii_ùπe0_u_t
;

2387 
	uii_ùπe1_u
 {

2388 
bdrkªg_t
 
	mii_ùπe1_ªgvÆ
;

2390 
bdrkªg_t
 
	mi_vld
 : 1;

2391 
bdrkªg_t
 
	mi_to_˙t
 : 5;

2392 
bdrkªg_t
 
	mi_widgë
 : 4;

2393 
bdrkªg_t
 
	mi_rsvd
 : 2;

2394 
bdrkªg_t
 
	mi_sour˚
 : 8;

2395 
bdrkªg_t
 
	mi_öô
 : 3;

2396 
bdrkªg_t
 
	mi_addr
 : 38;

2397 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2398 } 
	mii_ùπe1_Êd_s
;

2399 } 
	tii_ùπe1_u_t
;

2417 
	uii_ùπe2_u
 {

2418 
bdrkªg_t
 
	mii_ùπe2_ªgvÆ
;

2420 
bdrkªg_t
 
	mi_vld
 : 1;

2421 
bdrkªg_t
 
	mi_to_˙t
 : 5;

2422 
bdrkªg_t
 
	mi_widgë
 : 4;

2423 
bdrkªg_t
 
	mi_rsvd
 : 2;

2424 
bdrkªg_t
 
	mi_sour˚
 : 8;

2425 
bdrkªg_t
 
	mi_öô
 : 3;

2426 
bdrkªg_t
 
	mi_addr
 : 38;

2427 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2428 } 
	mii_ùπe2_Êd_s
;

2429 } 
	tii_ùπe2_u_t
;

2447 
	uii_ùπe3_u
 {

2448 
bdrkªg_t
 
	mii_ùπe3_ªgvÆ
;

2450 
bdrkªg_t
 
	mi_vld
 : 1;

2451 
bdrkªg_t
 
	mi_to_˙t
 : 5;

2452 
bdrkªg_t
 
	mi_widgë
 : 4;

2453 
bdrkªg_t
 
	mi_rsvd
 : 2;

2454 
bdrkªg_t
 
	mi_sour˚
 : 8;

2455 
bdrkªg_t
 
	mi_öô
 : 3;

2456 
bdrkªg_t
 
	mi_addr
 : 38;

2457 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2458 } 
	mii_ùπe3_Êd_s
;

2459 } 
	tii_ùπe3_u_t
;

2477 
	uii_ùπe4_u
 {

2478 
bdrkªg_t
 
	mii_ùπe4_ªgvÆ
;

2480 
bdrkªg_t
 
	mi_vld
 : 1;

2481 
bdrkªg_t
 
	mi_to_˙t
 : 5;

2482 
bdrkªg_t
 
	mi_widgë
 : 4;

2483 
bdrkªg_t
 
	mi_rsvd
 : 2;

2484 
bdrkªg_t
 
	mi_sour˚
 : 8;

2485 
bdrkªg_t
 
	mi_öô
 : 3;

2486 
bdrkªg_t
 
	mi_addr
 : 38;

2487 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2488 } 
	mii_ùπe4_Êd_s
;

2489 } 
	tii_ùπe4_u_t
;

2507 
	uii_ùπe5_u
 {

2508 
bdrkªg_t
 
	mii_ùπe5_ªgvÆ
;

2510 
bdrkªg_t
 
	mi_vld
 : 1;

2511 
bdrkªg_t
 
	mi_to_˙t
 : 5;

2512 
bdrkªg_t
 
	mi_widgë
 : 4;

2513 
bdrkªg_t
 
	mi_rsvd
 : 2;

2514 
bdrkªg_t
 
	mi_sour˚
 : 8;

2515 
bdrkªg_t
 
	mi_öô
 : 3;

2516 
bdrkªg_t
 
	mi_addr
 : 38;

2517 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2518 } 
	mii_ùπe5_Êd_s
;

2519 } 
	tii_ùπe5_u_t
;

2537 
	uii_ùπe6_u
 {

2538 
bdrkªg_t
 
	mii_ùπe6_ªgvÆ
;

2540 
bdrkªg_t
 
	mi_vld
 : 1;

2541 
bdrkªg_t
 
	mi_to_˙t
 : 5;

2542 
bdrkªg_t
 
	mi_widgë
 : 4;

2543 
bdrkªg_t
 
	mi_rsvd
 : 2;

2544 
bdrkªg_t
 
	mi_sour˚
 : 8;

2545 
bdrkªg_t
 
	mi_öô
 : 3;

2546 
bdrkªg_t
 
	mi_addr
 : 38;

2547 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2548 } 
	mii_ùπe6_Êd_s
;

2549 } 
	tii_ùπe6_u_t
;

2567 
	uii_ùπe7_u
 {

2568 
bdrkªg_t
 
	mii_ùπe7_ªgvÆ
;

2570 
bdrkªg_t
 
	mi_vld
 : 1;

2571 
bdrkªg_t
 
	mi_to_˙t
 : 5;

2572 
bdrkªg_t
 
	mi_widgë
 : 4;

2573 
bdrkªg_t
 
	mi_rsvd
 : 2;

2574 
bdrkªg_t
 
	mi_sour˚
 : 8;

2575 
bdrkªg_t
 
	mi_öô
 : 3;

2576 
bdrkªg_t
 
	mi_addr
 : 38;

2577 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

2578 } 
	mii_ùπe7_Êd_s
;

2579 } 
	tii_ùπe7_u_t
;

2605 
	uii_ùdr_u
 {

2606 
bdrkªg_t
 
	mii_ùdr_ªgvÆ
;

2608 
bdrkªg_t
 
	mi_rsvd
 : 58;

2609 
bdrkªg_t
 
	mi_öô_Ω˙t
 : 1;

2610 
bdrkªg_t
 
	mi_≤d
 : 1;

2611 
bdrkªg_t
 
	mi_rsvd_1
 : 1;

2612 
bdrkªg_t
 
	mi_ã
 : 3;

2613 } 
	mii_ùdr_Êd_s
;

2614 } 
	tii_ùdr_u_t
;

2639 
	uii_icdr_u
 {

2640 
bdrkªg_t
 
	mii_icdr_ªgvÆ
;

2642 
bdrkªg_t
 
	mi_rsvd
 : 59;

2643 
bdrkªg_t
 
	mi_≤d
 : 1;

2644 
bdrkªg_t
 
	mi_¸b_num
 : 4;

2645 } 
	mii_icdr_Êd_s
;

2646 } 
	tii_icdr_u_t
;

2671 
	uii_ifdr_u
 {

2672 
bdrkªg_t
 
	mii_ifdr_ªgvÆ
;

2674 
bdrkªg_t
 
	mi_rsvd
 : 48;

2675 
bdrkªg_t
 
	mi_£t_ioq_Ω
 : 1;

2676 
bdrkªg_t
 
	mi_ioq_max_Ω
 : 7;

2677 
bdrkªg_t
 
	mi_£t_ioq_rq
 : 1;

2678 
bdrkªg_t
 
	mi_ioq_max_rq
 : 7;

2679 } 
	mii_ifdr_Êd_s
;

2680 } 
	tii_ifdr_u_t
;

2699 
	uii_iüp_u
 {

2700 
bdrkªg_t
 
	mii_iüp_ªgvÆ
;

2702 
bdrkªg_t
 
	mi_rsvd
 : 50;

2703 
bdrkªg_t
 
	mi_Ω_mls
 : 6;

2704 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

2705 
bdrkªg_t
 
	mi_rq_mls
 : 6;

2706 } 
	mii_iüp_Êd_s
;

2707 } 
	tii_iüp_u_t
;

2724 
	uii_icmr_u
 {

2725 
bdrkªg_t
 
	mii_icmr_ªgvÆ
;

2727 
bdrkªg_t
 
	mi_rsvd
 : 11;

2728 
bdrkªg_t
 
	mi_¥eci£
 : 1;

2729 
bdrkªg_t
 
	mi_rsvd_1
 : 2;

2730 
bdrkªg_t
 
	mi_¸b_m¨k
 : 15;

2731 
bdrkªg_t
 
	mi_¸b_vld
 : 15;

2732 
bdrkªg_t
 
	mi_fc_˙t
 : 4;

2733 
bdrkªg_t
 
	mi_rsvd_2
 : 2;

2734 
bdrkªg_t
 
	mi_˛r_Ωpd
 : 1;

2735 
bdrkªg_t
 
	mi_˛r_rqpd
 : 1;

2736 
bdrkªg_t
 
	mi_rsvd_3
 : 4;

2737 
bdrkªg_t
 
	mi_c_˙t
 : 4;

2738 
bdrkªg_t
 
	mi_rsvd_4
 : 2;

2739 
bdrkªg_t
 
	mi_rd_hdr
 : 1;

2740 
bdrkªg_t
 
	mi_•_msg
 : 1;

2741 } 
	mii_icmr_Êd_s
;

2742 } 
	tii_icmr_u_t
;

2758 
	uii_ic¸_u
 {

2759 
bdrkªg_t
 
	mii_ic¸_ªgvÆ
;

2761 
bdrkªg_t
 
	mi_rsvd
 : 47;

2762 
bdrkªg_t
 
	mi_≥ndög
 : 1;

2763 
bdrkªg_t
 
	mi_cmd
 : 8;

2764 
bdrkªg_t
 
	mi_rsvd_1
 : 4;

2765 
bdrkªg_t
 
	mi_¸b_num
 : 4;

2766 } 
	mii_ic¸_Êd_s
;

2767 } 
	tii_ic¸_u_t
;

2781 
	uii_i˘o_u
 {

2782 
bdrkªg_t
 
	mii_i˘o_ªgvÆ
;

2784 
bdrkªg_t
 
	mi_rsvd
 : 56;

2785 
bdrkªg_t
 
	mi_timeout
 : 8;

2786 } 
	mii_i˘o_Êd_s
;

2787 } 
	tii_i˘o_u_t
;

2806 
	uii_i˘p_u
 {

2807 
bdrkªg_t
 
	mii_i˘p_ªgvÆ
;

2809 
bdrkªg_t
 
	mi_rsvd
 : 40;

2810 
bdrkªg_t
 
	mi_¥esˇÀ
 : 24;

2811 } 
	mii_i˘p_Êd_s
;

2812 } 
	tii_i˘p_u_t
;

2842 
	uii_i¸b0_a_u
 {

2843 
bdrkªg_t
 
	mii_i¸b0_a_ªgvÆ
;

2845 
bdrkªg_t
 
	mü_rsvd
 : 6;

2846 
bdrkªg_t
 
	mü_°Æl__bã_0
 : 1;

2847 
bdrkªg_t
 
	mü_°Æl__bã_1
 : 1;

2848 
bdrkªg_t
 
	mü_îr‹
 : 1;

2849 
bdrkªg_t
 
	mü_îrcode
 : 3;

2850 
bdrkªg_t
 
	mü_ _u˚
 : 1;

2851 
bdrkªg_t
 
	mü_m¨k
 : 1;

2852 
bdrkªg_t
 
	mü_xt_îr
 : 1;

2853 
bdrkªg_t
 
	mü_sidn
 : 4;

2854 
bdrkªg_t
 
	mü_äum
 : 5;

2855 
bdrkªg_t
 
	mü_addr
 : 38;

2856 
bdrkªg_t
 
	mü_vld
 : 1;

2857 
bdrkªg_t
 
	mü_iow
 : 1;

2858 } 
	mii_i¸b0_a_Êd_s
;

2859 } 
	tii_i¸b0_a_u_t
;

2876 
	uii_i¸b0_b_u
 {

2877 
bdrkªg_t
 
	mii_i¸b0_b_ªgvÆ
;

2879 
bdrkªg_t
 
	mib_rsvd
 : 5;

2880 
bdrkªg_t
 
	mib_bã_num
 : 1;

2881 
bdrkªg_t
 
	mib_˘
 : 1;

2882 
bdrkªg_t
 
	mib_size
 : 2;

2883 
bdrkªg_t
 
	mib_sour˚
 : 11;

2884 
bdrkªg_t
 
	mib_u£_ﬁd
 : 1;

2885 
bdrkªg_t
 
	mib_imsgty≥
 : 2;

2886 
bdrkªg_t
 
	mib_imsg
 : 8;

2887 
bdrkªg_t
 
	mib_öô
 : 3;

2888 
bdrkªg_t
 
	mib_exc
 : 5;

2889 
bdrkªg_t
 
	mib_rsvd_1
 : 7;

2890 
bdrkªg_t
 
	mib_ack_˙t
 : 11;

2891 
bdrkªg_t
 
	mib_ª•
 : 1;

2892 
bdrkªg_t
 
	mib_ack
 : 1;

2893 
bdrkªg_t
 
	mib_hﬁd
 : 1;

2894 
bdrkªg_t
 
	mib_wb
 : 1;

2895 
bdrkªg_t
 
	mib_ötvn
 : 1;

2896 
bdrkªg_t
 
	mib_°Æl_ib
 : 1;

2897 
bdrkªg_t
 
	mib_°Æl__öå
 : 1;

2898 } 
	mii_i¸b0_b_Êd_s
;

2899 } 
	tii_i¸b0_b_u_t
;

2916 
	uii_i¸b0_c_u
 {

2917 
bdrkªg_t
 
	mii_i¸b0_c_ªgvÆ
;

2919 
bdrkªg_t
 
	mic_rsvd
 : 6;

2920 
bdrkªg_t
 
	mic_¶ìp
 : 1;

2921 
bdrkªg_t
 
	mic_¥_˙t
 : 4;

2922 
bdrkªg_t
 
	mic_¥_psc
 : 4;

2923 
bdrkªg_t
 
	mic_bã_›
 : 1;

2924 
bdrkªg_t
 
	mic_∑_be
 : 34;

2925 
bdrkªg_t
 
	mic_suµl
 : 11;

2926 
bdrkªg_t
 
	mic_bo
 : 1;

2927 
bdrkªg_t
 
	mic_ª•rqd
 : 1;

2928 
bdrkªg_t
 
	mic_gbr
 : 1;

2929 } 
	mii_i¸b0_c_Êd_s
;

2930 } 
	tii_i¸b0_c_u_t
;

2947 
	uii_i¸b0_d_u
 {

2948 
bdrkªg_t
 
	mii_i¸b0_d_ªgvÆ
;

2950 
bdrkªg_t
 
	mid_rsvd
 : 38;

2951 
bdrkªg_t
 
	mid_cvld
 : 1;

2952 
bdrkªg_t
 
	mid_tvld
 : 1;

2953 
bdrkªg_t
 
	mid_rsvd_1
 : 1;

2954 
bdrkªg_t
 
	mid_c⁄ãxt
 : 15;

2955 
bdrkªg_t
 
	mid_timeout
 : 8;

2956 } 
	mii_i¸b0_d_Êd_s
;

2957 } 
	tii_i¸b0_d_u_t
;

2973 
	uii_icsml_u
 {

2974 
bdrkªg_t
 
	mii_icsml_ªgvÆ
;

2976 
bdrkªg_t
 
	mi_ovîÊow
 : 1;

2977 
bdrkªg_t
 
	mi_ª£rved
 : 3;

2978 
bdrkªg_t
 
	mi_√wsuµl_ex
 : 11;

2979 
bdrkªg_t
 
	mi_â_ack_˙t
 : 11;

2980 
bdrkªg_t
 
	mi_â_addr
 : 38;

2981 } 
	mii_icsml_Êd_s
;

2982 } 
	tii_icsml_u_t
;

2998 
	uii_icsmh_u
 {

2999 
bdrkªg_t
 
	mii_icsmh_ªgvÆ
;

3001 
bdrkªg_t
 
	mi_ª£rved
 : 5;

3002 
bdrkªg_t
 
	mi_â_öô
 : 3;

3003 
bdrkªg_t
 
	mi_â_devi˚
 : 7;

3004 
bdrkªg_t
 
	mi_rq˙t_ge_2
 : 1;

3005 
bdrkªg_t
 
	mi_rq˙t_…_2
 : 1;

3006 
bdrkªg_t
 
	mi_rq˙t_ge_18
 : 1;

3007 
bdrkªg_t
 
	mi_rq˙t_…_18
 : 1;

3008 
bdrkªg_t
 
	mi_Ω˙t_ge_2
 : 1;

3009 
bdrkªg_t
 
	mi_Ω˙t_…_2
 : 1;

3010 
bdrkªg_t
 
	mi_Ω˙t_ge_18
 : 1;

3011 
bdrkªg_t
 
	mi_Ω˙t_…_18
 : 1;

3012 
bdrkªg_t
 
	mi_Ω˙t_ge_34
 : 1;

3013 
bdrkªg_t
 
	mi_Ω˙t_…_34
 : 1;

3014 
bdrkªg_t
 
	mi_m©ch
 : 1;

3015 
bdrkªg_t
 
	mi_cbn
 : 1;

3016 
bdrkªg_t
 
	mi_â_bã_num
 : 1;

3017 
bdrkªg_t
 
	mi_â_ª•ªqd
 : 1;

3018 
bdrkªg_t
 
	mi_â_u£_ﬁd
 : 1;

3019 
bdrkªg_t
 
	mi_â_imsgty≥
 : 2;

3020 
bdrkªg_t
 
	mi_â_imsg
 : 8;

3021 
bdrkªg_t
 
	mi_g_°Æl_ib
 : 1;

3022 
bdrkªg_t
 
	mi_g_°Æl_û
 : 1;

3023 
bdrkªg_t
 
	mi_g_°Æl_bã0
 : 1;

3024 
bdrkªg_t
 
	mi_g_°Æl_bã1
 : 1;

3025 
bdrkªg_t
 
	mi_â_ötvn
 : 1;

3026 
bdrkªg_t
 
	mi_â_ª•
 : 1;

3027 
bdrkªg_t
 
	mi_â_ack
 : 1;

3028 
bdrkªg_t
 
	mi_â_hﬁd
 : 1;

3029 
bdrkªg_t
 
	mi_â_wb
 : 1;

3030 
bdrkªg_t
 
	mi_â_exc
 : 5;

3031 
bdrkªg_t
 
	mi_∂usg
 : 1;

3032 
bdrkªg_t
 
	mi_∂usz
 : 1;

3033 
bdrkªg_t
 
	mi_mnusz
 : 1;

3034 
bdrkªg_t
 
	mi_mnusg
 : 1;

3035 
bdrkªg_t
 
	mi_sync
 : 1;

3036 
bdrkªg_t
 
	mi_·_a˘ive_o
 : 1;

3037 
bdrkªg_t
 
	mi_·_wa˘_o
 : 1;

3038 
bdrkªg_t
 
	mi_·_cwa˘_o
 : 1;

3039 
bdrkªg_t
 
	mi_xîr
 : 1;

3040 
bdrkªg_t
 
	mi_â_vld
 : 1;

3041 } 
	mii_icsmh_Êd_s
;

3042 } 
	tii_icsmh_u_t
;

3069 
	uii_idbss_u
 {

3070 
bdrkªg_t
 
	mii_idbss_ªgvÆ
;

3072 
bdrkªg_t
 
	mi_rsvd
 : 61;

3073 
bdrkªg_t
 
	mi_submíu
 : 3;

3074 } 
	mii_idbss_Êd_s
;

3075 } 
	tii_idbss_u_t
;

3098 
	uii_ibls0_u
 {

3099 
bdrkªg_t
 
	mii_ibls0_ªgvÆ
;

3101 
bdrkªg_t
 
	mi_rsvd
 : 43;

3102 
bdrkªg_t
 
	mi_busy
 : 1;

3103 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

3104 
bdrkªg_t
 
	mi_îr‹
 : 1;

3105 
bdrkªg_t
 
	mi_Àngth
 : 16;

3106 } 
	mii_ibls0_Êd_s
;

3107 } 
	tii_ibls0_u_t
;

3125 
	uii_ibß0_u
 {

3126 
bdrkªg_t
 
	mii_ibß0_ªgvÆ
;

3128 
bdrkªg_t
 
	mi_rsvd
 : 24;

3129 
bdrkªg_t
 
	mi_addr
 : 33;

3130 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

3131 } 
	mii_ibß0_Êd_s
;

3132 } 
	tii_ibß0_u_t
;

3150 
	uii_ibda0_u
 {

3151 
bdrkªg_t
 
	mii_ibda0_ªgvÆ
;

3153 
bdrkªg_t
 
	mi_rsvd
 : 24;

3154 
bdrkªg_t
 
	mi_addr
 : 33;

3155 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

3156 } 
	mii_ibda0_Êd_s
;

3157 } 
	tii_ibda0_u_t
;

3177 
	uii_ib˘0_u
 {

3178 
bdrkªg_t
 
	mii_ib˘0_ªgvÆ
;

3180 
bdrkªg_t
 
	mi_rsvd
 : 55;

3181 
bdrkªg_t
 
	mi_pois⁄
 : 1;

3182 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

3183 
bdrkªg_t
 
	mi_nŸify
 : 1;

3184 
bdrkªg_t
 
	mi_rsvd_2
 : 3;

3185 
bdrkªg_t
 
	mi_zîofûl
 : 1;

3186 } 
	mii_ib˘0_Êd_s
;

3187 } 
	tii_ib˘0_u_t
;

3202 
	uii_ib«0_u
 {

3203 
bdrkªg_t
 
	mii_ib«0_ªgvÆ
;

3205 
bdrkªg_t
 
	mi_rsvd
 : 24;

3206 
bdrkªg_t
 
	mi_addr
 : 33;

3207 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

3208 } 
	mii_ib«0_Êd_s
;

3209 } 
	tii_ib«0_u_t
;

3225 
	uii_ibü0_u
 {

3226 
bdrkªg_t
 
	mii_ibü0_ªgvÆ
;

3228 
bdrkªg_t
 
	mi_rsvd
 : 41;

3229 
bdrkªg_t
 
	mi_Àvñ
 : 7;

3230 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

3231 
bdrkªg_t
 
	mi_node_id
 : 8;

3232 
bdrkªg_t
 
	mi_pi_id
 : 1;

3233 } 
	mii_ibü0_Êd_s
;

3234 } 
	tii_ibü0_u_t
;

3257 
	uii_ibls1_u
 {

3258 
bdrkªg_t
 
	mii_ibls1_ªgvÆ
;

3260 
bdrkªg_t
 
	mi_rsvd
 : 43;

3261 
bdrkªg_t
 
	mi_busy
 : 1;

3262 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

3263 
bdrkªg_t
 
	mi_îr‹
 : 1;

3264 
bdrkªg_t
 
	mi_Àngth
 : 16;

3265 } 
	mii_ibls1_Êd_s
;

3266 } 
	tii_ibls1_u_t
;

3284 
	uii_ibß1_u
 {

3285 
bdrkªg_t
 
	mii_ibß1_ªgvÆ
;

3287 
bdrkªg_t
 
	mi_rsvd
 : 24;

3288 
bdrkªg_t
 
	mi_addr
 : 33;

3289 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

3290 } 
	mii_ibß1_Êd_s
;

3291 } 
	tii_ibß1_u_t
;

3309 
	uii_ibda1_u
 {

3310 
bdrkªg_t
 
	mii_ibda1_ªgvÆ
;

3312 
bdrkªg_t
 
	mi_rsvd
 : 24;

3313 
bdrkªg_t
 
	mi_addr
 : 33;

3314 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

3315 } 
	mii_ibda1_Êd_s
;

3316 } 
	tii_ibda1_u_t
;

3336 
	uii_ib˘1_u
 {

3337 
bdrkªg_t
 
	mii_ib˘1_ªgvÆ
;

3339 
bdrkªg_t
 
	mi_rsvd
 : 55;

3340 
bdrkªg_t
 
	mi_pois⁄
 : 1;

3341 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

3342 
bdrkªg_t
 
	mi_nŸify
 : 1;

3343 
bdrkªg_t
 
	mi_rsvd_2
 : 3;

3344 
bdrkªg_t
 
	mi_zîofûl
 : 1;

3345 } 
	mii_ib˘1_Êd_s
;

3346 } 
	tii_ib˘1_u_t
;

3361 
	uii_ib«1_u
 {

3362 
bdrkªg_t
 
	mii_ib«1_ªgvÆ
;

3364 
bdrkªg_t
 
	mi_rsvd
 : 24;

3365 
bdrkªg_t
 
	mi_addr
 : 33;

3366 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

3367 } 
	mii_ib«1_Êd_s
;

3368 } 
	tii_ib«1_u_t
;

3384 
	uii_ibü1_u
 {

3385 
bdrkªg_t
 
	mii_ibü1_ªgvÆ
;

3387 
bdrkªg_t
 
	mi_rsvd
 : 41;

3388 
bdrkªg_t
 
	mi_Àvñ
 : 7;

3389 
bdrkªg_t
 
	mi_rsvd_1
 : 7;

3390 
bdrkªg_t
 
	mi_node_id
 : 8;

3391 
bdrkªg_t
 
	mi_pi_id
 : 1;

3392 } 
	mii_ibü1_Êd_s
;

3393 } 
	tii_ibü1_u_t
;

3416 
	uii_ù¸_u
 {

3417 
bdrkªg_t
 
	mii_ù¸_ªgvÆ
;

3419 
bdrkªg_t
 
	mi_rsvd
 : 48;

3420 
bdrkªg_t
 
	mi_ic˘
 : 8;

3421 
bdrkªg_t
 
	mi_ù¥1_c
 : 4;

3422 
bdrkªg_t
 
	mi_ù¥0_c
 : 4;

3423 } 
	mii_ù¸_Êd_s
;

3424 } 
	tii_ù¸_u_t
;

3438 
	uii_ù¥_u
 {

3439 
bdrkªg_t
 
	mii_ù¥_ªgvÆ
;

3441 
bdrkªg_t
 
	mi_ù¥1
 : 32;

3442 
bdrkªg_t
 
	mi_ù¥0
 : 32;

3443 } 
	mii_ù¥_Êd_s
;

3444 } 
	tii_ù¥_u_t
;

	@/usr/include/sys/SN/SN1/hubio_next.h

13 #i‚de‡
__SYS_SN_SN1_HUBIO_NEXT_H__


14 
	#__SYS_SN_SN1_HUBIO_NEXT_H__


	)

19 
	#IIO_WIDGET
 
IIO_WID


	)

20 
	#IIO_WIDGET_STAT
 
IIO_WSTAT


	)

21 
	#IIO_WIDGET_CTRL
 
IIO_WCR


	)

22 
	#IIO_PROTECT
 
IIO_ILAPR


	)

23 
	#IIO_PROTECT_OVRRD
 
IIO_ILAPO


	)

24 
	#IIO_OUTWIDGET_ACCESS
 
IIO_IOWA


	)

25 
	#IIO_INWIDGET_ACCESS
 
IIO_IIWA


	)

26 
	#IIO_INDEV_ERR_MASK
 
IIO_IIDEM


	)

27 
	#IIO_LLP_CSR
 
IIO_ILCSR


	)

28 
	#IIO_LLP_LOG
 
IIO_ILLR


	)

29 
	#IIO_XTALKCC_TOUT
 
IIO_IXCC


	)

30 
	#IIO_XTALKTT_TOUT
 
IIO_IXTT


	)

31 
	#IIO_IO_ERR_CLR
 
IIO_IECLR


	)

32 
	#IIO_IGFX_0
 
IIO_IGFX0


	)

33 
	#IIO_IGFX_1
 
IIO_IGFX1


	)

34 
	#IIO_IBCT_0
 
IIO_IBCT0


	)

35 
	#IIO_IBCT_1
 
IIO_IBCT1


	)

36 
	#IIO_IBLS_0
 
IIO_IBLS0


	)

37 
	#IIO_IBLS_1
 
IIO_IBLS1


	)

38 
	#IIO_IBSA_0
 
IIO_IBSA0


	)

39 
	#IIO_IBSA_1
 
IIO_IBSA1


	)

40 
	#IIO_IBDA_0
 
IIO_IBDA0


	)

41 
	#IIO_IBDA_1
 
IIO_IBDA1


	)

42 
	#IIO_IBNA_0
 
IIO_IBNA0


	)

43 
	#IIO_IBNA_1
 
IIO_IBNA1


	)

44 
	#IIO_IBIA_0
 
IIO_IBIA0


	)

45 
	#IIO_IBIA_1
 
IIO_IBIA1


	)

46 
	#IIO_IOPRB_0
 
IIO_IPRB0


	)

47 
	#IIO_PRTE_0
 
IIO_IPRTE0


	)

48 
	#IIO_PRTE
(
_x
Ë(
IIO_PRTE_0
 + (8 * (_x)))

	)

49 
	#IIO_NUM_IPRBS
 (9)

	)

50 
	#IIO_WIDPRTE
(
x
Ë
	`IIO_PRTE
(((xË- 8)Ë

	)

52 
	#IIO_LLP_CSR_IS_UP
 0x00002000

	)

53 
	#IIO_LLP_CSR_LLP_STAT_MASK
 0x00003000

	)

54 
	#IIO_LLP_CSR_LLP_STAT_SHFT
 12

	)

56 
	#IIO_LLP_CB_MAX
 0xfff‡

	)

57 
	#IIO_LLP_SN_MAX
 0xfff‡

	)

60 
	#IIO_PROTECT_OVRRD_KEY
 0x53474972756c6573uŒ

	)

63 
	#IIO_BTE_STAT_0
 
IIO_IBLS_0


	)

64 
	#IIO_BTE_SRC_0
 
IIO_IBSA_0


	)

65 
	#IIO_BTE_DEST_0
 
IIO_IBDA_0


	)

66 
	#IIO_BTE_CTRL_0
 
IIO_IBCT_0


	)

67 
	#IIO_BTE_NOTIFY_0
 
IIO_IBNA_0


	)

68 
	#IIO_BTE_INT_0
 
IIO_IBIA_0


	)

69 
	#IIO_BTE_OFF_0
 0

	)

70 
	#IIO_BTE_OFF_1
 
IIO_IBLS_1
 - 
IIO_IBLS_0


	)

73 
	#BTEOFF_STAT
 0

	)

74 
	#BTEOFF_SRC
 (
IIO_BTE_SRC_0
 - 
IIO_BTE_STAT_0
)

	)

75 
	#BTEOFF_DEST
 (
IIO_BTE_DEST_0
 - 
IIO_BTE_STAT_0
)

	)

76 
	#BTEOFF_CTRL
 (
IIO_BTE_CTRL_0
 - 
IIO_BTE_STAT_0
)

	)

77 
	#BTEOFF_NOTIFY
 (
IIO_BTE_NOTIFY_0
 - 
IIO_BTE_STAT_0
)

	)

78 
	#BTEOFF_INT
 (
IIO_BTE_INT_0
 - 
IIO_BTE_STAT_0
)

	)

82 
	#IIO_BASE_BTE0
 
IIO_IBLS_0


	)

83 
	#IIO_BASE_BTE1
 
IIO_IBLS_1


	)

85 
	#IIO_BASE
 
IIO_WID


	)

86 
	#IIO_BASE_PERF
 
IIO_IPCR


	)

87 
	#IIO_PERF_CNT
 
IIO_IPPR


	)

92 
	#IIO_IGFX_W_NUM_BITS
 4

	)

93 
	#IIO_IGFX_W_NUM_MASK
 ((1<<
IIO_IGFX_W_NUM_BITS
)-1)

	)

94 
	#IIO_IGFX_W_NUM_SHIFT
 0

	)

95 
	#IIO_IGFX_PI_NUM_BITS
 1

	)

96 
	#IIO_IGFX_PI_NUM_MASK
 ((1<<
IIO_IGFX_PI_NUM_BITS
)-1)

	)

97 
	#IIO_IGFX_PI_NUM_SHIFT
 4

	)

98 
	#IIO_IGFX_N_NUM_BITS
 8

	)

99 
	#IIO_IGFX_N_NUM_MASK
 ((1<<
IIO_IGFX_N_NUM_BITS
)-1)

	)

100 
	#IIO_IGFX_N_NUM_SHIFT
 5

	)

101 
	#IIO_IGFX_P_NUM_BITS
 1

	)

102 
	#IIO_IGFX_P_NUM_MASK
 ((1<<
IIO_IGFX_P_NUM_BITS
)-1)

	)

103 
	#IIO_IGFX_P_NUM_SHIFT
 16

	)

104 
	#IIO_IGFX_INIT
(
widgë
, 
pi
, 
node
, 
˝u
) (\

105 (((
widgë
Ë& 
IIO_IGFX_W_NUM_MASK
Ë<< 
IIO_IGFX_W_NUM_SHIFT
) | \

106 (((
pi
Ë& 
IIO_IGFX_PI_NUM_MASK
)<< 
IIO_IGFX_PI_NUM_SHIFT
)| \

107 (((
node
Ë& 
IIO_IGFX_N_NUM_MASK
Ë<< 
IIO_IGFX_N_NUM_SHIFT
) | \

108 (((
˝u
Ë& 
IIO_IGFX_P_NUM_MASK
Ë<< 
IIO_IGFX_P_NUM_SHIFT
))

	)

112 
	#IIO_SCRATCH_REG0
 
IIO_ISCR0


	)

113 
	#IIO_SCRATCH_REG1
 
IIO_ISCR1


	)

114 
	#IIO_SCRATCH_MASK
 0xffffffffffffffff

	)

116 
	#IIO_SCRATCH_BIT0_0
 0x0000000000000001

	)

117 
	#IIO_SCRATCH_BIT0_1
 0x0000000000000002

	)

118 
	#IIO_SCRATCH_BIT0_2
 0x0000000000000004

	)

119 
	#IIO_SCRATCH_BIT0_3
 0x0000000000000008

	)

120 
	#IIO_SCRATCH_BIT0_4
 0x0000000000000010

	)

121 
	#IIO_SCRATCH_BIT0_5
 0x0000000000000020

	)

122 
	#IIO_SCRATCH_BIT0_6
 0x0000000000000040

	)

123 
	#IIO_SCRATCH_BIT0_7
 0x0000000000000080

	)

124 
	#IIO_SCRATCH_BIT0_8
 0x0000000000000100

	)

125 
	#IIO_SCRATCH_BIT0_9
 0x0000000000000200

	)

126 
	#IIO_SCRATCH_BIT0_A
 0x0000000000000400

	)

128 
	#IIO_SCRATCH_BIT1_0
 0x0000000000000001

	)

129 
	#IIO_SCRATCH_BIT1_1
 0x0000000000000002

	)

131 
	#IIO_NUM_ITTES
 7

	)

136 
	#IIO_IMEM_W0ESD
 0x1

	)

137 
	#IIO_IMEM_B0ESD
 (1 << 4Ë

	)

138 
	#IIO_IMEM_B1ESD
 (1 << 8Ë

	)

145 
	#HUB_NUM_BIG_WINDOW
 
IIO_NUM_ITTES
 - 1

	)

150 
	#SWIN0_BIGWIN
 
HUB_NUM_BIG_WINDOW


	)

152 
	#IIO_NUM_PRTES
 8

	)

154 
	#ILCSR_WARM_RESET
 0x100

	)

161 
	#IIO_NUM_CRBS
 15

	)

162 
	#IIO_NUM_NORMAL_CRBS
 12

	)

163 
	#IIO_NUM_PC_CRBS
 4

	)

164 
	#IIO_ICRB_OFFSET
 8

	)

165 
	#IIO_ICRB_0
 
IIO_ICRB0_A


	)

166 
	#IIO_ICRB_ADDR_SHFT
 2

	)

171 
	#IIO_ICRB_A
(
_x
Ë(
IIO_ICRB_0
 + (4 * 
IIO_ICRB_OFFSET
 * (_x)))

	)

172 
	#IIO_ICRB_B
(
_x
Ë(
	`IIO_ICRB_A
(_xË+ 1*
IIO_ICRB_OFFSET
)

	)

173 
	#IIO_ICRB_C
(
_x
Ë(
	`IIO_ICRB_A
(_xË+ 2*
IIO_ICRB_OFFSET
)

	)

174 
	#IIO_ICRB_D
(
_x
Ë(
	`IIO_ICRB_A
(_xË+ 3*
IIO_ICRB_OFFSET
)

	)

176 
	#TNUM_TO_WIDGET_DEV
(
_äum
Ë(_äum & 0x7)

	)

181 
	#IIO_ICRB_ECODE_DERR
 0

	)

182 
	#IIO_ICRB_ECODE_PERR
 1

	)

183 
	#IIO_ICRB_ECODE_WERR
 2

	)

185 
	#IIO_ICRB_ECODE_AERR
 3

	)

186 
	#IIO_ICRB_ECODE_PWERR
 4

	)

187 
	#IIO_ICRB_ECODE_PRERR
 5

	)

188 
	#IIO_ICRB_ECODE_TOUT
 6

	)

189 
	#IIO_ICRB_ECODE_XTERR
 7

	)

195 
	#IIO_ICRB_IMSGT_XTALK
 0

	)

196 
	#IIO_ICRB_IMSGT_BTE
 1

	)

197 
	#IIO_ICRB_IMSGT_SN1NET
 2

	)

198 
	#IIO_ICRB_IMSGT_CRB
 3

	)

203 
	#IIO_ICRB_INIT_XTALK
 0

	)

204 
	#IIO_ICRB_INIT_BTE0
 0x1

	)

205 
	#IIO_ICRB_INIT_SN1NET
 0x2

	)

206 
	#IIO_ICRB_INIT_CRB
 0x3

	)

207 
	#IIO_ICRB_INIT_BTE1
 0x5

	)

215 
	#HUBII_XBOW_CREDIT
 3

	)

216 
	#HUBII_XBOW_REV2_CREDIT
 4

	)

222 
	#HUB_CREDIT
 4

	)

227 
	#IIO_PRB_MULTI_ERR
 (1LL << 63)

	)

228 
	#IIO_PRB_SPUR_RD
 (1LL << 51)

	)

229 
	#IIO_PRB_SPUR_WR
 (1LL << 50)

	)

230 
	#IIO_PRB_RD_TO
 (1LL << 49)

	)

231 
	#IIO_PRB_ERROR
 (1LL << 48)

	)

246 
	#IIO_ICMR_CRB_VLD_SHFT
 20

	)

247 
	#IIO_ICMR_CRB_VLD_MASK
 (0x7fffUL << 
IIO_ICMR_CRB_VLD_SHFT
)

	)

249 
	#IIO_ICMR_FC_CNT_SHFT
 16

	)

250 
	#IIO_ICMR_FC_CNT_MASK
 (0x‡<< 
IIO_ICMR_FC_CNT_SHFT
)

	)

252 
	#IIO_ICMR_C_CNT_SHFT
 4

	)

253 
	#IIO_ICMR_C_CNT_MASK
 (0x‡<< 
IIO_ICMR_C_CNT_SHFT
)

	)

255 
	#IIO_ICMR_PRECISE
 (1UL << 52)

	)

256 
	#IIO_ICMR_CLR_RPPD
 (1UL << 13)

	)

257 
	#IIO_ICMR_CLR_RQPD
 (1UL << 12)

	)

263 
	#IIO_IPDR_PND
 (1 << 4)

	)

268 
	#IIO_ICDR_PND
 (1 << 4)

	)

273 
	#IBLS_BUSY
 (0x1 << 20)

	)

274 
	#IBLS_ERROR_SHFT
 16

	)

275 
	#IBLS_ERROR
 (0x1 << 
IBLS_ERROR_SHFT
)

	)

276 
	#IBLS_LENGTH_MASK
 0xffff

	)

281 
	#IBCT_POISON
 (0x1 << 8)

	)

282 
	#IBCT_NOTIFY
 (0x1 << 4)

	)

283 
	#IBCT_ZFIL_MODE
 (0x1 << 0)

	)

288 
	#IIEPH1_VALID
 (1 << 44)

	)

289 
	#IIEPH1_OVERRUN
 (1 << 40)

	)

290 
	#IIEPH1_ERR_TYPE_SHFT
 32

	)

291 
	#IIEPH1_ERR_TYPE_MASK
 0xf

	)

292 
	#IIEPH1_SOURCE_SHFT
 20

	)

293 
	#IIEPH1_SOURCE_MASK
 11

	)

294 
	#IIEPH1_SUPPL_SHFT
 8

	)

295 
	#IIEPH1_SUPPL_MASK
 11

	)

296 
	#IIEPH1_CMD_SHFT
 0

	)

297 
	#IIEPH1_CMD_MASK
 7

	)

299 
	#IIEPH2_TAIL
 (1 << 40)

	)

300 
	#IIEPH2_ADDRESS_SHFT
 0

	)

301 
	#IIEPH2_ADDRESS_MASK
 38

	)

303 
	#IIEPH1_ERR_SHORT_REQ
 2

	)

304 
	#IIEPH1_ERR_SHORT_REPLY
 3

	)

305 
	#IIEPH1_ERR_LONG_REQ
 4

	)

306 
	#IIEPH1_ERR_LONG_REPLY
 5

	)

311 
	#IECLR_PI1_FWD_INT
 (1 << 31Ë

	)

312 
	#IECLR_PI0_FWD_INT
 (1 << 30Ë

	)

313 
	#IECLR_SPUR_RD_HDR
 (1 << 29Ë

	)

314 
	#IECLR_BTE1
 (1 << 18Ë

	)

315 
	#IECLR_BTE0
 (1 << 17Ë

	)

316 
	#IECLR_CRAZY
 (1 << 16Ë

	)

317 
	#IECLR_PRB_F
 (1 << 15Ë

	)

318 
	#IECLR_PRB_E
 (1 << 14Ë

	)

319 
	#IECLR_PRB_D
 (1 << 13Ë

	)

320 
	#IECLR_PRB_C
 (1 << 12Ë

	)

321 
	#IECLR_PRB_B
 (1 << 11Ë

	)

322 
	#IECLR_PRB_A
 (1 << 10Ë

	)

323 
	#IECLR_PRB_9
 (1 << 9Ë

	)

324 
	#IECLR_PRB_8
 (1 << 8Ë

	)

325 
	#IECLR_PRB_0
 (1 << 0Ë

	)

330 
	#IIO_ICCR_PENDING
 (0x10000)

	)

331 
	#IIO_ICCR_CMD_MASK
 (0xFF)

	)

332 
	#IIO_ICCR_CMD_SHFT
 (7)

	)

333 
	#IIO_ICCR_CMD_NOP
 (0x0Ë

	)

334 
	#IIO_ICCR_CMD_WAKE
 (0x100Ë

	)

335 
	#IIO_ICCR_CMD_TIMEOUT
 (0x200Ë

	)

336 
	#IIO_ICCR_CMD_EJECT
 (0x400Ë

	)

339 
	#IIO_ICCR_CMD_FLUSH
 (0x800)

	)

367 #ifde‡
_LANGUAGE_C


372 
ii_i¸b0_a_u_t
 
	ti¸ba_t
;

373 
	#a_îr‹
 
ii_i¸b0_a_Êd_s
.
ü_îr‹


	)

374 
	#a_ecode
 
ii_i¸b0_a_Êd_s
.
ü_îrcode


	)

375 
	#a_ ëu˚
 
ii_i¸b0_a_Êd_s
.
ü_ _u˚


	)

376 
	#a_m¨k
 
ii_i¸b0_a_Êd_s
.
ü_m¨k


	)

377 
	#a_xîr
 
ii_i¸b0_a_Êd_s
.
ü_xt_îr


	)

378 
	#a_sidn
 
ii_i¸b0_a_Êd_s
.
ü_sidn


	)

379 
	#a_äum
 
ii_i¸b0_a_Êd_s
.
ü_äum


	)

380 
	#a_addr
 
ii_i¸b0_a_Êd_s
.
ü_addr


	)

381 
	#a_vÆid
 
ii_i¸b0_a_Êd_s
.
ü_vld


	)

382 
	#a_iow
 
ii_i¸b0_a_Êd_s
.
ü_iow


	)

383 
	#a_ªgvÆue
 
ii_i¸b0_a_ªgvÆ


	)

385 
ii_i¸b0_b_u_t
 
	ti¸bb_t
;

386 
	#b_bãnum
 
ii_i¸b0_b_Êd_s
.
ib_bã_num


	)

387 
	#b_cohå™s
 
ii_i¸b0_b_Êd_s
.
ib_˘


	)

388 
	#b_xtsize
 
ii_i¸b0_b_Êd_s
.
ib_size


	)

389 
	#b_sour˚
 
ii_i¸b0_b_Êd_s
.
ib_sour˚


	)

390 
	#b_imsgty≥
 
ii_i¸b0_b_Êd_s
.
ib_imsgty≥


	)

391 
	#b_imsg
 
ii_i¸b0_b_Êd_s
.
ib_imsg


	)

392 
	#b_öôüt‹
 
ii_i¸b0_b_Êd_s
.
ib_öô


	)

393 
	#b_ªgvÆue
 
ii_i¸b0_b_ªgvÆ


	)

395 
ii_i¸b0_c_u_t
 
	ti¸bc_t
;

396 
	#c_¥i˙t
 
ii_i¸b0_c_Êd_s
.
ic_¥_˙t


	)

397 
	#c_¥ùsc
 
ii_i¸b0_c_Êd_s
.
ic_¥_psc


	)

398 
	#c_bã›
 
ii_i¸b0_c_Êd_s
.
ic_bã_›


	)

399 
	#c_bãaddr
 
ii_i¸b0_c_Êd_s
.
ic_∑_be


	)

400 
	#c_bíabÀ
 
ii_i¸b0_c_Êd_s
.
ic_∑_be


	)

401 
	#c_suµl
 
ii_i¸b0_c_Êd_s
.
ic_suµl


	)

402 
	#c_b¨r›
 
ii_i¸b0_c_Êd_s
.
ic_bo


	)

403 
	#c_d‹e•
 
ii_i¸b0_c_Êd_s
.
ic_ª•rqd


	)

404 
	#c_gbr
 
ii_i¸b0_c_Êd_s
.
ic_gbr


	)

405 
	#c_ªgvÆue
 
ii_i¸b0_c_ªgvÆ


	)

407 
ii_i¸b0_d_u_t
 
	ti¸bd_t
;

408 
	#i¸bd_˘xtvld
 
ii_i¸b0_d_Êd_s
.
id_cvld


	)

409 
	#i¸bd_toutvld
 
ii_i¸b0_d_Êd_s
.
id_tvld


	)

410 
	#i¸bd_c⁄ãxt
 
ii_i¸b0_d_Êd_s
.
id_c⁄ãxt


	)

411 
	#d_ªgvÆue
 
ii_i¸b0_d_ªgvÆ


	)

416 
	#HUB_NUM_WIDGET
 9

	)

417 
	#HUB_WIDGET_ID_MIN
 0x8

	)

418 
	#HUB_WIDGET_ID_MAX
 0xf

	)

420 
	#HUB_WIDGET_PART_NUM
 0xc110

	)

421 
	#MAX_HUBS_PER_XBOW
 2

	)

423 #ifde‡
_LANGUAGE_C


425 
	#ùrb_t
 
ii_ùrb0_u_t


	)

426 
	#ùrb_ªgvÆ
 
ii_ùrb0_ªgvÆ


	)

427 
	#ùrb_mu…_îr
 
ii_ùrb0_Êd_s
.
i_mu…_îr


	)

428 
	#ùrb_•ur_rd
 
ii_ùrb0_Êd_s
.
i_•ur_rd


	)

429 
	#ùrb_•ur_wr
 
ii_ùrb0_Êd_s
.
i_•ur_wr


	)

430 
	#ùrb_rd_to
 
ii_ùrb0_Êd_s
.
i_rd_to


	)

431 
	#ùrb_ovÊow
 
ii_ùrb0_Êd_s
.
i_of_˙t


	)

432 
	#ùrb_îr‹
 
ii_ùrb0_Êd_s
.
i_îr‹


	)

433 
	#ùrb_ff
 
ii_ùrb0_Êd_s
.
i_f


	)

434 
	#ùrb_mode
 
ii_ùrb0_Êd_s
.
i_m


	)

435 
	#ùrb_b«k˘r
 
ii_ùrb0_Êd_s
.
i_nb


	)

436 
	#ùrb_™ak˘r
 
ii_ùrb0_Êd_s
.
i_«


	)

437 
	#ùrb_xèlk˘r
 
ii_ùrb0_Êd_s
.
i_c


	)

440 
	#LNK_STAT_WORKING
 0x2

	)

442 
	#IIO_WSTAT_ECRAZY
 (1ULL << 32Ë

	)

443 
	#IIO_WSTAT_TXRETRY
 (1ULL << 9Ë

	)

444 
	#IIO_WSTAT_TXRETRY_MASK
 (0x7FË

	)

445 
	#IIO_WSTAT_TXRETRY_SHFT
 (16)

	)

446 
	#IIO_WSTAT_TXRETRY_CNT
(
w
Ë(((wË>> 
IIO_WSTAT_TXRETRY_SHFT
) & \

447 
IIO_WSTAT_TXRETRY_MASK
)

	)

451 
	#IO_PERF_SETS
 32

	)

453 #i‡
_KERNEL


454 #i‡
_LANGUAGE_C


456 
	~<sys/Æíli°.h
>

457 
	~<sys/dmam≠.h
>

458 
	~<sys/iobus.h
>

459 
	~<sys/pio.h
>

460 
	~<sys/xèlk/xèlk.h
>

461 
	~<sys/ªg.h
>

464 
	#IIO_IIWA_WIDGET
(
_w
Ë((
uöt64_t
)(1ULL << _w))

	)

466 
	#IIO_IOWA_WIDGET
(
_w
Ë((
uöt64_t
)(1ULL << _w))

	)

472 
	#IIO_IIDEM_WIDGETDEV_MASK
(
w
, 
d
Ë((
uöt64_t
)(1ULL << (8 * ((wË- 8Ë+ (d))))

	)

475 
	#IIO_IIDSR_SENT_SHIFT
 28

	)

476 
	#IIO_IIDSR_SENT_MASK
 0x10000000

	)

477 
	#IIO_IIDSR_ENB_SHIFT
 24

	)

478 
	#IIO_IIDSR_ENB_MASK
 0x01000000

	)

479 
	#IIO_IIDSR_NODE_SHIFT
 8

	)

480 
	#IIO_IIDSR_NODE_MASK
 0x0000ff00

	)

481 
	#IIO_IIDSR_PI_ID_SHIFT
 8

	)

482 
	#IIO_IIDSR_PI_ID_MASK
 0x00000010

	)

483 
	#IIO_IIDSR_LVL_SHIFT
 0

	)

484 
	#IIO_IIDSR_LVL_MASK
 0x0000007f

	)

487 
	#IXTT_RRSP_TO_SHFT
 55

	)

488 
	#IXTT_RRSP_TO_MASK
 (0x1FULL << 
IXTT_RRSP_TO_SHFT
)

	)

489 
	#IXTT_RRSP_PS_SHFT
 32

	)

490 
	#IXTT_RRSP_PS_MASK
 (0x7FFFFFULL << 
IXTT_RRSP_PS_SHFT
)

	)

491 
	#IXTT_TAIL_TO_SHFT
 0

	)

492 
	#IXTT_TAIL_TO_MASK
 (0x3FFFFFFULL << 
IXTT_TAIL_TO_SHFT
)

	)

498 
	uhubii_w¸_u
 {

499 
__uöt64_t
 
	mw¸_ªg_vÆue
;

501 
__uöt64_t
 
	mw¸_rsvd
: 41,

502 
	mw¸_e_thªsh
: 5,

503 
	mw¸_dú_c⁄
: 1,

504 
	mw¸_f_bad_pkt
: 1,

505 
	mw¸_xb¨_¸d
: 3,

506 
	mw¸_rsvd1
: 8,

507 
	mw¸_èg_mode
: 1,

508 
	mw¸_widgë_id
: 4;

509 } 
	mw¸_fõlds_s
;

510 } 
	thubii_w¸_t
;

512 
	#iw¸_dú_c⁄
 
w¸_fõlds_s
.
w¸_dú_c⁄


	)

519 
	uio_≥rf_£l
 {

520 
__uöt64_t
 
	m≥rf_£l_ªg
;

522 
__uöt64_t
 
	m≥rf_rsvd
 : 48,

523 
	m≥rf_ic˘
 : 8,

524 
	m≥rf_ù¥1
 : 4,

525 
	m≥rf_ù¥0
 : 4;

526 } 
	m≥rf_£l_bôs
;

527 } 
	tio_≥rf_£l_t
;

532 
	uio_≥rf_˙t
 {

533 
__uöt64_t
 
	m≥rf_˙t
;

535 
__uöt64_t
 
	m≥rf_rsvd1
 : 32,

536 
	m≥rf_rsvd2
 : 12,

537 
	m≥rf_˙t
 : 20;

538 } 
	m≥rf_˙t_bôs
;

540 } 
	tio_≥rf_˙t_t
;

542 
	uùπe_a
 {

543 
bdrkªg_t
 
	míåy
;

545 
bdrkªg_t
 
	mi_vld
 : 1;

546 
bdrkªg_t
 
	mi_to_˙t
 : 5;

547 
bdrkªg_t
 
	mi_widgë
 : 4;

548 
bdrkªg_t
 
	mi_rsvd
 : 2;

549 
bdrkªg_t
 
	mi_sour˚
 : 8;

550 
bdrkªg_t
 
	mi_öô
 : 3;

551 
bdrkªg_t
 
	mi_addr
 : 38;

552 
bdrkªg_t
 
	mi_rsvd_1
 : 3;

553 } 
	mùπe_fõlds
;

554 } 
	tùπe_a_t
;

555 
	#ùπe_vÆid
 
ùπe_fõlds
.
i_vld


	)

556 
	#ùπe_§˙ode
 
ùπe_fõlds
.
i_sour˚


	)

557 
	#ùπe_öô
 
ùπe_fõlds
.
i_öô


	)

558 
	#ùπe_addr
 
ùπe_fõlds
.
i_addr


	)

562 
hub_piom≠_s
 *
	thub_piom≠_t
;

564 
hub_piom≠_t


565 
hub_piom≠_Æloc
(
vîãx_hdl_t
 
dev
,

566 
devi˚_desc_t
 
dev_desc
,

567 
i›addr_t
 
xèlk_addr
,

568 
size_t
 
byã_cou¡
,

569 
size_t
 
byã_cou¡_max
,

570 
Êags
);

572 
hub_piom≠_‰ì
(
hub_piom≠_t
 
hub_piom≠
);

574 
ˇddr_t


575 
hub_piom≠_addr
(
hub_piom≠_t
 
hub_piom≠
,

576 
i›addr_t
 
xèlk_addr
,

577 
size_t
 
byã_cou¡
);

580 
hub_piom≠_d⁄e
(
hub_piom≠_t
 
hub_piom≠
);

582 
ˇddr_t


583 
hub_piŸøns_addr
–
vîãx_hdl_t
 
dev
,

584 
devi˚_desc_t
 
dev_desc
,

585 
i›addr_t
 
xèlk_addr
,

586 
size_t
 
byã_cou¡
,

587 
Êags
);

590 
hub_dmam≠_s
 *
	thub_dmam≠_t
;

592 
hub_dmam≠_t


593 
hub_dmam≠_Æloc
–
vîãx_hdl_t
 
dev
,

594 
devi˚_desc_t
 
dev_desc
,

595 
size_t
 
byã_cou¡_max
,

596 
Êags
);

599 
hub_dmam≠_‰ì
(
hub_dmam≠_t
 
dmam≠
);

601 
i›addr_t


602 
hub_dmam≠_addr
–
hub_dmam≠_t
 
dmam≠
,

603 
∑ddr_t
 
∑ddr
,

604 
size_t
 
byã_cou¡
);

606 
Æíli°_t


607 
hub_dmam≠_li°
–
hub_dmam≠_t
 
dmam≠
,

608 
Æíli°_t
 
Æíli°
,

609 
Êags
);

612 
hub_dmam≠_d⁄e
–
hub_dmam≠_t
 
dmam≠
);

614 
i›addr_t


615 
hub_dm©øns_addr
–
vîãx_hdl_t
 
dev
,

616 
devi˚_desc_t
 
dev_desc
,

617 
∑ddr_t
 
∑ddr
,

618 
size_t
 
byã_cou¡
,

619 
Êags
);

621 
Æíli°_t


622 
hub_dm©øns_li°
–
vîãx_hdl_t
 
dev
,

623 
devi˚_desc_t
 
dev_desc
,

624 
Æíli°_t
 
∑À∆i°
,

625 
Êags
);

628 
hub_dmam≠_døö
–
hub_dmam≠_t
 
m≠
);

631 
hub_dmØddr_døö
–
vîãx_hdl_t
 
vhdl
,

632 
∑ddr_t
 
addr
,

633 
size_t
 
byãs
);

636 
hub_dmÆi°_døö
–
vîãx_hdl_t
 
vhdl
,

637 
Æíli°_t
 
li°
);

641 
hub_öå_s
 *
	thub_öå_t
;

643 
hub_öå_t


644 
hub_öå_Æloc
–
vîãx_hdl_t
 
dev
,

645 
devi˚_desc_t
 
dev_desc
,

646 
vîãx_hdl_t
 
ow√r_dev
);

648 
hub_öå_t


649 
hub_öå_Æloc_nŸhd
(
vîãx_hdl_t
 
dev
,

650 
devi˚_desc_t
 
dev_desc
,

651 
vîãx_hdl_t
 
ow√r_dev
);

654 
hub_öå_‰ì
(
hub_öå_t
 
öå_hdl
);

657 
hub_öå_c⁄√˘
–
hub_öå_t
 
öå_hdl
,

658 
öå_func_t
 
öå_func
,

659 *
öå_¨g
,

660 
xèlk_öå_£tfunc_t
 
£tfunc
,

662 *
£tfunc_¨g
,

663 *
thªad
);

666 
hub_öå_disc⁄√˘
(
hub_öå_t
 
öå_hdl
);

668 
vîãx_hdl_t


669 
hub_öå_˝u_gë
(
hub_öå_t
 
öå_hdl
);

671 
˝uid_t


672 
hub_öå_˝uid_gë
(
hub_öå_t
 
öå_hdl
);

677 
hub_¥ovidî_°¨tup
(
vîãx_hdl_t
 
hub
);

680 
hub_¥ovidî_shutdown
(
vîãx_hdl_t
 
hub
);

682 
	#HUB_PIO_CONVEYOR
 0x1

	)

683 
	#HUB_PIO_FIRE_N_FORGET
 0x2

	)

686 
	#HUB_WIDGET_FLAGS
 ( \

687 
HUB_PIO_CONVEYOR
 | \

688 
HUB_PIO_FIRE_N_FORGET
 \

689 )

	)

692 
	thub_widgë_Êags_t
;

699 
hub_widgë_Êags_£t
(
«sid_t
 
«sid
,

700 
xwidgënum_t
 
widgë_num
,

701 
hub_widgë_Êags_t
 
Êags
);

704 
hub_devi˚_Êags_£t
(
vîãx_hdl_t
 
widgë_dev
,

705 
hub_widgë_Êags_t
 
Êags
);

709 
hub_i€º‹_h™dÀr
(
vîãx_hdl_t
, , , 
io_îr‹_s
 *);

710 
kl_i€º‹_h™dÀr
(
˙odeid_t
, cnodeid_t, 
˝uid_t
,

711 , 
∑ddr_t
, 
ˇddr_t
, 
i€º‹_mode_t
,

712 
e‰ame_t
 *);

713 
hub_widgë_ª£t
(
vîãx_hdl_t
, 
xwidgënum_t
);

714 
hub_îr‹_devíabÀ
(
vîãx_hdl_t
, , );

715 
hub_widgëdev_íabÀ
(
vîãx_hdl_t
, );

716 
hub_widgëdev_shutdown
(
vîãx_hdl_t
, );

717 
hub_dma_íabÀd
(
vîãx_hdl_t
);

	@/usr/include/sys/SN/SN1/hublb.h

28 #i‚de‡
__SYS_SN_SN1_HUBLB_H__


29 
	#__SYS_SN_SN1_HUBLB_H__


	)

33 
	#LB_REV_ID
 0x00600000

	)

40 
	#LB_CPU_PERMISSION
 0x00604000

	)

47 
	#LB_CPU_PERM_OVRRD
 0x00604008

	)

55 
	#LB_IO_PERMISSION
 0x00604010

	)

62 
	#LB_SOFT_RESET
 0x00604018

	)

69 
	#LB_REGION_PRESENT
 0x00604020

	)

76 
	#LB_NODES_ABSENT
 0x00604028

	)

83 
	#LB_MICROLAN_CTL
 0x00604030

	)

90 
	#LB_ERROR_BITS
 0x00604040

	)

97 
	#LB_ERROR_MASK_CLR
 0x00604048

	)

104 
	#LB_ERROR_HDR1
 0x00604050

	)

111 
	#LB_ERROR_HDR2
 0x00604058

	)

118 
	#LB_ERROR_DATA
 0x00604060

	)

125 
	#LB_DEBUG_SELECT
 0x00604100

	)

132 
	#LB_DEBUG_PINS
 0x00604108

	)

139 
	#LB_RT_LOCAL_CTRL
 0x00604200

	)

146 
	#LB_RT_FILTER_CTRL
 0x00604208

	)

154 
	#LB_SCRATCH_REG0
 0x00608000

	)

158 
	#LB_SCRATCH_REG1
 0x00608008

	)

162 
	#LB_SCRATCH_REG2
 0x00608010

	)

166 
	#LB_SCRATCH_REG3
 0x00608018

	)

170 
	#LB_SCRATCH_REG4
 0x00608020

	)

174 
	#LB_SCRATCH_REG0_WZ
 0x00608040

	)

181 
	#LB_SCRATCH_REG1_WZ
 0x00608048

	)

188 
	#LB_SCRATCH_REG2_WZ
 0x00608050

	)

195 
	#LB_SCRATCH_REG3_RZ
 0x00608058

	)

202 
	#LB_SCRATCH_REG4_RZ
 0x00608060

	)

209 
	#LB_VECTOR_PARMS
 0x0060C000

	)

216 
	#LB_VECTOR_ROUTE
 0x0060C008

	)

223 
	#LB_VECTOR_DATA
 0x0060C010

	)

230 
	#LB_VECTOR_STATUS
 0x0060C020

	)

237 
	#LB_VECTOR_RETURN
 0x0060C028

	)

244 
	#LB_VECTOR_READ_DATA
 0x0060C030

	)

251 
	#LB_VECTOR_STATUS_CLEAR
 0x0060C038

	)

260 #ifde‡
_LANGUAGE_C


278 
	ulb_ªv_id_u
 {

279 
bdrkªg_t
 
	mlb_ªv_id_ªgvÆ
;

281 
bdrkªg_t
 
	mri_ª£rved
 : 16;

282 
bdrkªg_t
 
	mri_ªgi⁄_size
 : 2;

283 
bdrkªg_t
 
	mri_ª£rved_1
 : 6;

284 
bdrkªg_t
 
	mri_node_id
 : 8;

285 
bdrkªg_t
 
	mri_ªvisi⁄
 : 4;

286 
bdrkªg_t
 
	mri_∑π_numbî
 : 16;

287 
bdrkªg_t
 
	mri_m™uÁ˘uªr
 : 11;

288 
bdrkªg_t
 
	mri_ª£rved_2
 : 1;

289 } 
	mlb_ªv_id_Êd_s
;

290 } 
	tlb_ªv_id_u_t
;

313 
	ulb_˝u_≥rmissi⁄_u
 {

314 
bdrkªg_t
 
	mlb_˝u_≥rmissi⁄_ªgvÆ
;

316 
bdrkªg_t
 
	m˝_˝u_ac˚ss
 : 64;

317 } 
	mlb_˝u_≥rmissi⁄_Êd_s
;

318 } 
	tlb_˝u_≥rmissi⁄_u_t
;

334 
	ulb_˝u_≥rm_ovºd_u
 {

335 
bdrkªg_t
 
	mlb_˝u_≥rm_ovºd_ªgvÆ
;

337 
bdrkªg_t
 
	m˝o_˝u_≥rm_ovr
 : 64;

338 } 
	mlb_˝u_≥rm_ovºd_Êd_s
;

339 } 
	tlb_˝u_≥rm_ovºd_u_t
;

362 
	ulb_io_≥rmissi⁄_u
 {

363 
bdrkªg_t
 
	mlb_io_≥rmissi⁄_ªgvÆ
;

365 
bdrkªg_t
 
	mù_io_≥rmissi⁄
 : 64;

366 } 
	mlb_io_≥rmissi⁄_Êd_s
;

367 } 
	tlb_io_≥rmissi⁄_u_t
;

381 
	ulb_so·_ª£t_u
 {

382 
bdrkªg_t
 
	mlb_so·_ª£t_ªgvÆ
;

384 
bdrkªg_t
 
	m§_ª£rved
 : 63;

385 
bdrkªg_t
 
	m§_so·_ª£t
 : 1;

386 } 
	mlb_so·_ª£t_Êd_s
;

387 } 
	tlb_so·_ª£t_u_t
;

410 
	ulb_ªgi⁄_¥e£¡_u
 {

411 
bdrkªg_t
 
	mlb_ªgi⁄_¥e£¡_ªgvÆ
;

413 
bdrkªg_t
 
	mΩ_¥e£¡_bôs
 : 64;

414 } 
	mlb_ªgi⁄_¥e£¡_Êd_s
;

415 } 
	tlb_ªgi⁄_¥e£¡_u_t
;

436 
	ulb_nodes_ab£¡_u
 {

437 
bdrkªg_t
 
	mlb_nodes_ab£¡_ªgvÆ
;

439 
bdrkªg_t
 
	m«_node_3_vÆid
 : 1;

440 
bdrkªg_t
 
	m«_ª£rved
 : 7;

441 
bdrkªg_t
 
	m«_node_3
 : 8;

442 
bdrkªg_t
 
	m«_node_2_vÆid
 : 1;

443 
bdrkªg_t
 
	m«_ª£rved_1
 : 7;

444 
bdrkªg_t
 
	m«_node_2
 : 8;

445 
bdrkªg_t
 
	m«_node_1_vÆid
 : 1;

446 
bdrkªg_t
 
	m«_ª£rved_2
 : 7;

447 
bdrkªg_t
 
	m«_node_1
 : 8;

448 
bdrkªg_t
 
	m«_node_0_vÆid
 : 1;

449 
bdrkªg_t
 
	m«_ª£rved_3
 : 7;

450 
bdrkªg_t
 
	m«_node_0
 : 8;

451 } 
	mlb_nodes_ab£¡_Êd_s
;

452 } 
	tlb_nodes_ab£¡_u_t
;

471 
	ulb_mi¸ﬁ™_˘l_u
 {

472 
bdrkªg_t
 
	mlb_mi¸ﬁ™_˘l_ªgvÆ
;

474 
bdrkªg_t
 
	mmc_ª£rved
 : 30;

475 
bdrkªg_t
 
	mmc_˛kdiv_phi1
 : 7;

476 
bdrkªg_t
 
	mmc_˛kdiv_phi0
 : 7;

477 
bdrkªg_t
 
	mmc_pul£
 : 10;

478 
bdrkªg_t
 
	mmc_ßm∂e
 : 8;

479 
bdrkªg_t
 
	mmc_d⁄e
 : 1;

480 
bdrkªg_t
 
	mmc_rd_d©a
 : 1;

481 } 
	mlb_mi¸ﬁ™_˘l_Êd_s
;

482 } 
	tlb_mi¸ﬁ™_˘l_u_t
;

508 
	ulb_îr‹_bôs_u
 {

509 
bdrkªg_t
 
	mlb_îr‹_bôs_ªgvÆ
;

511 
bdrkªg_t
 
	meb_ª£rved
 : 53;

512 
bdrkªg_t
 
	meb_g˛k_dr›
 : 1;

513 
bdrkªg_t
 
	meb_rq_bad_lövÆ
 : 1;

514 
bdrkªg_t
 
	meb_rq_bad_addr
 : 1;

515 
bdrkªg_t
 
	meb_Ω_bad_d©a
 : 1;

516 
bdrkªg_t
 
	meb_rq_bad_d©a
 : 1;

517 
bdrkªg_t
 
	meb_Ω_l⁄g
 : 1;

518 
bdrkªg_t
 
	meb_rq_l⁄g
 : 1;

519 
bdrkªg_t
 
	meb_Ω_sh‹t
 : 1;

520 
bdrkªg_t
 
	meb_rq_sh‹t
 : 1;

521 
bdrkªg_t
 
	meb_Ω_bad_cmd
 : 1;

522 
bdrkªg_t
 
	meb_rq_bad_cmd
 : 1;

523 } 
	mlb_îr‹_bôs_Êd_s
;

524 } 
	tlb_îr‹_bôs_u_t
;

546 
	ulb_îr‹_mask_˛r_u
 {

547 
bdrkªg_t
 
	mlb_îr‹_mask_˛r_ªgvÆ
;

549 
bdrkªg_t
 
	memc_ª£rved
 : 53;

550 
bdrkªg_t
 
	memc_˛r_g˛k_dr›
 : 1;

551 
bdrkªg_t
 
	memc_˛r_rq_bad_lövÆ
 : 1;

552 
bdrkªg_t
 
	memc_˛r_rq_bad_addr
 : 1;

553 
bdrkªg_t
 
	memc_˛r_Ω_bad_d©a
 : 1;

554 
bdrkªg_t
 
	memc_˛r_rq_bad_d©a
 : 1;

555 
bdrkªg_t
 
	memc_˛r_Ω_l⁄g
 : 1;

556 
bdrkªg_t
 
	memc_˛r_rq_l⁄g
 : 1;

557 
bdrkªg_t
 
	memc_˛r_Ω_sh‹t
 : 1;

558 
bdrkªg_t
 
	memc_˛r_rq_sh‹t
 : 1;

559 
bdrkªg_t
 
	memc_˛r_Ω_bad_cmd
 : 1;

560 
bdrkªg_t
 
	memc_˛r_rq_bad_cmd
 : 1;

561 } 
	mlb_îr‹_mask_˛r_Êd_s
;

562 } 
	tlb_îr‹_mask_˛r_u_t
;

589 
	ulb_îr‹_hdr1_u
 {

590 
bdrkªg_t
 
	mlb_îr‹_hdr1_ªgvÆ
;

592 
bdrkªg_t
 
	meh_ª£rved
 : 19;

593 
bdrkªg_t
 
	meh_vÆid
 : 1;

594 
bdrkªg_t
 
	meh_ª£rved_1
 : 3;

595 
bdrkªg_t
 
	meh_ovîrun
 : 1;

596 
bdrkªg_t
 
	meh_ª£rved_2
 : 4;

597 
bdrkªg_t
 
	meh_îr_ty≥
 : 4;

598 
bdrkªg_t
 
	meh_ª£rved_3
 : 1;

599 
bdrkªg_t
 
	meh_sour˚
 : 11;

600 
bdrkªg_t
 
	meh_ª£rved_4
 : 1;

601 
bdrkªg_t
 
	meh_suµl
 : 11;

602 
bdrkªg_t
 
	meh_ª£rved_5
 : 1;

603 
bdrkªg_t
 
	meh_comm™d
 : 7;

604 } 
	mlb_îr‹_hdr1_Êd_s
;

605 } 
	tlb_îr‹_hdr1_u_t
;

621 
	ulb_îr‹_hdr2_u
 {

622 
bdrkªg_t
 
	mlb_îr‹_hdr2_ªgvÆ
;

624 
bdrkªg_t
 
	meh_ª£rved
 : 26;

625 
bdrkªg_t
 
	meh_addªss
 : 38;

626 } 
	mlb_îr‹_hdr2_Êd_s
;

627 } 
	tlb_îr‹_hdr2_u_t
;

673 
	ulb_îr‹_d©a_u
 {

674 
bdrkªg_t
 
	mlb_îr‹_d©a_ªgvÆ
;

676 
bdrkªg_t
 
	med_d©a
 : 64;

677 } 
	mlb_îr‹_d©a_Êd_s
;

678 } 
	tlb_îr‹_d©a_u_t
;

699 
	ulb_debug_£À˘_u
 {

700 
bdrkªg_t
 
	mlb_debug_£À˘_ªgvÆ
;

702 
bdrkªg_t
 
	mds_ª£rved
 : 58;

703 
bdrkªg_t
 
	mds_debug_£l
 : 6;

704 } 
	mlb_debug_£À˘_Êd_s
;

705 } 
	tlb_debug_£À˘_u_t
;

723 
	ulb_debug_pös_u
 {

724 
bdrkªg_t
 
	mlb_debug_pös_ªgvÆ
;

726 
bdrkªg_t
 
	mdp_ª£rved
 : 32;

727 
bdrkªg_t
 
	mdp_debug_pös
 : 32;

728 } 
	mlb_debug_pös_Êd_s
;

729 } 
	tlb_debug_pös_u_t
;

751 
	ulb_π_loˇl_˘æ_u
 {

752 
bdrkªg_t
 
	mlb_π_loˇl_˘æ_ªgvÆ
;

754 
bdrkªg_t
 
	mæc_ª£rved
 : 31;

755 
bdrkªg_t
 
	mæc_u£_öã∫Æ
 : 1;

756 
bdrkªg_t
 
	mæc_ª£rved_1
 : 3;

757 
bdrkªg_t
 
	mæc_g˛k
 : 1;

758 
bdrkªg_t
 
	mæc_ª£rved_2
 : 2;

759 
bdrkªg_t
 
	mæc_g˛k_cou¡î
 : 10;

760 
bdrkªg_t
 
	mæc_ª£rved_3
 : 2;

761 
bdrkªg_t
 
	mæc_max_cou¡
 : 10;

762 
bdrkªg_t
 
	mæc_ª£rved_4
 : 3;

763 
bdrkªg_t
 
	mæc_g˛k_íabÀ
 : 1;

764 } 
	mlb_π_loˇl_˘æ_Êd_s
;

765 } 
	tlb_π_loˇl_˘æ_u_t
;

797 
	ulb_π_fûãr_˘æ_u
 {

798 
bdrkªg_t
 
	mlb_π_fûãr_˘æ_ªgvÆ
;

800 
bdrkªg_t
 
	mrfc_ª£rved
 : 6;

801 
bdrkªg_t
 
	mrfc_îr‹_cou¡î
 : 10;

802 
bdrkªg_t
 
	mrfc_ª£rved_1
 : 2;

803 
bdrkªg_t
 
	mrfc_dr›out_thªsh
 : 10;

804 
bdrkªg_t
 
	mrfc_ª£rved_2
 : 2;

805 
bdrkªg_t
 
	mrfc_dr›out_cou¡î
 : 10;

806 
bdrkªg_t
 
	mrfc_ª£rved_3
 : 3;

807 
bdrkªg_t
 
	mrfc_mask_íabÀ
 : 1;

808 
bdrkªg_t
 
	mrfc_mask_cou¡î
 : 12;

809 
bdrkªg_t
 
	mrfc_ª£rved_4
 : 3;

810 
bdrkªg_t
 
	mrfc_off£t
 : 5;

811 } 
	mlb_π_fûãr_˘æ_Êd_s
;

812 } 
	tlb_π_fûãr_˘æ_u_t
;

829 
	ulb_s¸©ch_ªg0_u
 {

830 
bdrkªg_t
 
	mlb_s¸©ch_ªg0_ªgvÆ
;

832 
bdrkªg_t
 
	m§_s¸©ch_bôs
 : 64;

833 } 
	mlb_s¸©ch_ªg0_Êd_s
;

834 } 
	tlb_s¸©ch_ªg0_u_t
;

851 
	ulb_s¸©ch_ªg1_u
 {

852 
bdrkªg_t
 
	mlb_s¸©ch_ªg1_ªgvÆ
;

854 
bdrkªg_t
 
	m§_s¸©ch_bôs
 : 64;

855 } 
	mlb_s¸©ch_ªg1_Êd_s
;

856 } 
	tlb_s¸©ch_ªg1_u_t
;

873 
	ulb_s¸©ch_ªg2_u
 {

874 
bdrkªg_t
 
	mlb_s¸©ch_ªg2_ªgvÆ
;

876 
bdrkªg_t
 
	m§_s¸©ch_bôs
 : 64;

877 } 
	mlb_s¸©ch_ªg2_Êd_s
;

878 } 
	tlb_s¸©ch_ªg2_u_t
;

895 
	ulb_s¸©ch_ªg3_u
 {

896 
bdrkªg_t
 
	mlb_s¸©ch_ªg3_ªgvÆ
;

898 
bdrkªg_t
 
	m§_ª£rved
 : 63;

899 
bdrkªg_t
 
	m§_s¸©ch_bô
 : 1;

900 } 
	mlb_s¸©ch_ªg3_Êd_s
;

901 } 
	tlb_s¸©ch_ªg3_u_t
;

918 
	ulb_s¸©ch_ªg4_u
 {

919 
bdrkªg_t
 
	mlb_s¸©ch_ªg4_ªgvÆ
;

921 
bdrkªg_t
 
	m§_ª£rved
 : 63;

922 
bdrkªg_t
 
	m§_s¸©ch_bô
 : 1;

923 } 
	mlb_s¸©ch_ªg4_Êd_s
;

924 } 
	tlb_s¸©ch_ªg4_u_t
;

941 
	ulb_s¸©ch_ªg0_wz_u
 {

942 
bdrkªg_t
 
	mlb_s¸©ch_ªg0_wz_ªgvÆ
;

944 
bdrkªg_t
 
	m§w_s¸©ch_bôs
 : 64;

945 } 
	mlb_s¸©ch_ªg0_wz_Êd_s
;

946 } 
	tlb_s¸©ch_ªg0_wz_u_t
;

963 
	ulb_s¸©ch_ªg1_wz_u
 {

964 
bdrkªg_t
 
	mlb_s¸©ch_ªg1_wz_ªgvÆ
;

966 
bdrkªg_t
 
	m§w_s¸©ch_bôs
 : 64;

967 } 
	mlb_s¸©ch_ªg1_wz_Êd_s
;

968 } 
	tlb_s¸©ch_ªg1_wz_u_t
;

985 
	ulb_s¸©ch_ªg2_wz_u
 {

986 
bdrkªg_t
 
	mlb_s¸©ch_ªg2_wz_ªgvÆ
;

988 
bdrkªg_t
 
	m§w_s¸©ch_bôs
 : 64;

989 } 
	mlb_s¸©ch_ªg2_wz_Êd_s
;

990 } 
	tlb_s¸©ch_ªg2_wz_u_t
;

1007 
	ulb_s¸©ch_ªg3_rz_u
 {

1008 
bdrkªg_t
 
	mlb_s¸©ch_ªg3_rz_ªgvÆ
;

1010 
bdrkªg_t
 
	m§r_ª£rved
 : 63;

1011 
bdrkªg_t
 
	m§r_s¸©ch_bô
 : 1;

1012 } 
	mlb_s¸©ch_ªg3_rz_Êd_s
;

1013 } 
	tlb_s¸©ch_ªg3_rz_u_t
;

1030 
	ulb_s¸©ch_ªg4_rz_u
 {

1031 
bdrkªg_t
 
	mlb_s¸©ch_ªg4_rz_ªgvÆ
;

1033 
bdrkªg_t
 
	m§r_ª£rved
 : 63;

1034 
bdrkªg_t
 
	m§r_s¸©ch_bô
 : 1;

1035 } 
	mlb_s¸©ch_ªg4_rz_Êd_s
;

1036 } 
	tlb_s¸©ch_ªg4_rz_u_t
;

1062 
	ulb_ve˘‹_∑rms_u
 {

1063 
bdrkªg_t
 
	mlb_ve˘‹_∑rms_ªgvÆ
;

1065 
bdrkªg_t
 
	mvp_busy
 : 1;

1066 
bdrkªg_t
 
	mvp_ª£rved
 : 12;

1067 
bdrkªg_t
 
	mvp_pio_id
 : 11;

1068 
bdrkªg_t
 
	mvp_wrôe_id
 : 8;

1069 
bdrkªg_t
 
	mvp_ª£rved_1
 : 8;

1070 
bdrkªg_t
 
	mvp_addªss
 : 21;

1071 
bdrkªg_t
 
	mvp_ª£rved_2
 : 2;

1072 
bdrkªg_t
 
	mvp_ty≥
 : 1;

1073 } 
	mlb_ve˘‹_∑rms_Êd_s
;

1074 } 
	tlb_ve˘‹_∑rms_u_t
;

1089 
	ulb_ve˘‹_rouã_u
 {

1090 
bdrkªg_t
 
	mlb_ve˘‹_rouã_ªgvÆ
;

1092 
bdrkªg_t
 
	mvr_ve˘‹
 : 64;

1093 } 
	mlb_ve˘‹_rouã_Êd_s
;

1094 } 
	tlb_ve˘‹_rouã_u_t
;

1111 
	ulb_ve˘‹_d©a_u
 {

1112 
bdrkªg_t
 
	mlb_ve˘‹_d©a_ªgvÆ
;

1114 
bdrkªg_t
 
	mvd_wrôe_d©a
 : 64;

1115 } 
	mlb_ve˘‹_d©a_Êd_s
;

1116 } 
	tlb_ve˘‹_d©a_u_t
;

1142 
	ulb_ve˘‹_°©us_u
 {

1143 
bdrkªg_t
 
	mlb_ve˘‹_°©us_ªgvÆ
;

1145 
bdrkªg_t
 
	mvs_°©us_vÆid
 : 1;

1146 
bdrkªg_t
 
	mvs_ovîrun
 : 1;

1147 
bdrkªg_t
 
	mvs_sour˚
 : 11;

1148 
bdrkªg_t
 
	mvs_pio_id
 : 11;

1149 
bdrkªg_t
 
	mvs_wrôe_id
 : 8;

1150 
bdrkªg_t
 
	mvs_ª£rved
 : 8;

1151 
bdrkªg_t
 
	mvs_addªss
 : 21;

1152 
bdrkªg_t
 
	mvs_ty≥
 : 3;

1153 } 
	mlb_ve˘‹_°©us_Êd_s
;

1154 } 
	tlb_ve˘‹_°©us_u_t
;

1175 
	ulb_ve˘‹_ªtu∫_u
 {

1176 
bdrkªg_t
 
	mlb_ve˘‹_ªtu∫_ªgvÆ
;

1178 
bdrkªg_t
 
	mvr_ªtu∫_ve˘‹
 : 64;

1179 } 
	mlb_ve˘‹_ªtu∫_Êd_s
;

1180 } 
	tlb_ve˘‹_ªtu∫_u_t
;

1201 
	ulb_ve˘‹_ªad_d©a_u
 {

1202 
bdrkªg_t
 
	mlb_ve˘‹_ªad_d©a_ªgvÆ
;

1204 
bdrkªg_t
 
	mvrd_ªad_d©a
 : 64;

1205 } 
	mlb_ve˘‹_ªad_d©a_Êd_s
;

1206 } 
	tlb_ve˘‹_ªad_d©a_u_t
;

1232 
	ulb_ve˘‹_°©us_˛ór_u
 {

1233 
bdrkªg_t
 
	mlb_ve˘‹_°©us_˛ór_ªgvÆ
;

1235 
bdrkªg_t
 
	mvsc_°©us_vÆid
 : 1;

1236 
bdrkªg_t
 
	mvsc_ovîrun
 : 1;

1237 
bdrkªg_t
 
	mvsc_sour˚
 : 11;

1238 
bdrkªg_t
 
	mvsc_pio_id
 : 11;

1239 
bdrkªg_t
 
	mvsc_wrôe_id
 : 8;

1240 
bdrkªg_t
 
	mvsc_ª£rved
 : 8;

1241 
bdrkªg_t
 
	mvsc_addªss
 : 21;

1242 
bdrkªg_t
 
	mvsc_ty≥
 : 3;

1243 } 
	mlb_ve˘‹_°©us_˛ór_Êd_s
;

1244 } 
	tlb_ve˘‹_°©us_˛ór_u_t
;

	@/usr/include/sys/SN/SN1/hublb_next.h

19 #i‚de‡
__SYS_SN_SN1_HUBLB_NEXT_H__


20 
	#__SYS_SN_SN1_HUBLB_NEXT_H__


	)

30 
	#LRI_SYSTEM_SIZE_SHFT
 46

	)

31 
	#LRI_SYSTEM_SIZE_MASK
 (
UINT64_CAST
 0x3 << 
LRI_SYSTEM_SIZE_SHFT
)

	)

32 
	#LRI_NODEID_SHFT
 32

	)

33 
	#LRI_NODEID_MASK
 (
UINT64_CAST
 0xf‡<< 
LRI_NODEID_SHFT
)

	)

34 
	#LRI_CHIPID_SHFT
 12

	)

35 
	#LRI_CHIPID_MASK
 (
UINT64_CAST
 0xfff‡<< 
LRI_CHIPID_SHFT
Ë

	)

36 
	#LRI_REV_SHFT
 28

	)

37 
	#LRI_REV_MASK
 (
UINT64_CAST
 0x‡<< 
LRI_REV_SHFT
)

	)

40 
	#SYSTEM_SIZE_INVALID
 0x3

	)

41 
	#SYSTEM_SIZE_NMODE
 0x2

	)

42 
	#SYSTEM_SIZE_COARSE
 0x1

	)

43 
	#SYSTEM_SIZE_SMALL
 0x0

	)

47 
	#NASID_TO_FINEREG_SHFT
 0

	)

48 
	#NASID_TO_COARSEREG_SHFT
 1

	)

49 
	#NASID_TO_NMODEREG_SHFT
 2

	)

51 
	#LR_LOCALRESET
 (
UINT64_CAST
 1)

	)

57 
	#LVP_BUSY
 (
UINT64_CAST
 1 << 63)

	)

58 
	#LVP_PIOID_SHFT
 40

	)

59 
	#LVP_PIOID_MASK
 (
UINT64_CAST
 0x7f‡<< 40)

	)

60 
	#LVP_WRITEID_SHFT
 32

	)

61 
	#LVP_WRITEID_MASK
 (
UINT64_CAST
 0xf‡<< 32)

	)

62 
	#LVP_ADDRESS_MASK
 (
UINT64_CAST
 0xfffff8Ë

	)

63 
	#LVP_TYPE_SHFT
 0

	)

64 
	#LVP_TYPE_MASK
 (
UINT64_CAST
 0x3)

	)

68 
	#LVS_VALID
 (
UINT64_CAST
 1 << 63)

	)

69 
	#LVS_OVERRUN
 (
UINT64_CAST
 1 << 62)

	)

70 
	#LVS_TARGET_SHFT
 51

	)

71 
	#LVS_TARGET_MASK
 (
UINT64_CAST
 0x7f‡<< 51)

	)

72 
	#LVS_PIOID_SHFT
 40

	)

73 
	#LVS_PIOID_MASK
 (
UINT64_CAST
 0x7f‡<< 40)

	)

74 
	#LVS_WRITEID_SHFT
 32

	)

75 
	#LVS_WRITEID_MASK
 (
UINT64_CAST
 0xf‡<< 32)

	)

76 
	#LVS_ADDRESS_MASK
 (
UINT64_CAST
 0xfffff8Ë

	)

77 
	#LVS_TYPE_SHFT
 0

	)

78 
	#LVS_TYPE_MASK
 (
UINT64_CAST
 0x7)

	)

79 
	#LVS_ERROR_MASK
 (
UINT64_CAST
 0x4Ë

	)

83 
	#LRLC_USE_INT_SHFT
 32

	)

84 
	#LRLC_USE_INT_MASK
 (
UINT64_CAST
 1 << 32)

	)

85 
	#LRLC_USE_INT
 (
UINT64_CAST
 1 << 32)

	)

86 
	#LRLC_GCLK_SHFT
 28

	)

87 
	#LRLC_GCLK_MASK
 (
UINT64_CAST
 1 << 28)

	)

88 
	#LRLC_GCLK
 (
UINT64_CAST
 1 << 28)

	)

89 
	#LRLC_GCLK_COUNT_SHFT
 16

	)

90 
	#LRLC_GCLK_COUNT_MASK
 (
UINT64_CAST
 0x3f‡<< 16)

	)

91 
	#LRLC_MAX_COUNT_SHFT
 4

	)

92 
	#LRLC_MAX_COUNT_MASK
 (
UINT64_CAST
 0x3f‡<< 4)

	)

93 
	#LRLC_GCLK_EN_SHFT
 0

	)

94 
	#LRLC_GCLK_EN_MASK
 (
UINT64_CAST
 1)

	)

95 
	#LRLC_GCLK_EN
 (
UINT64_CAST
 1)

	)

99 
	#LRFC_ERROR_COUNT_SHFT
 48

	)

100 
	#LRFC_ERROR_COUNT_MASK
 (
UINT64_CAST
 0x3f‡<< 48)

	)

101 
	#LRFC_DROP_THRESH_SHFT
 36

	)

102 
	#LRFC_DROP_THRESH_MASK
 (
UINT64_CAST
 0x3f‡<< 36)

	)

103 
	#LRFC_DROP_COUNT_SHFT
 24

	)

104 
	#LRFC_DROP_COUNT_MASK
 (
UINT64_CAST
 0x3f‡<< 24)

	)

105 
	#LRFC_MASK_ENABLE_SHFT
 20

	)

106 
	#LRFC_MASK_ENABLE_MASK
 (
UINT64_CAST
 1 << 20)

	)

107 
	#LRFC_MASK_COUNT_SHFT
 8

	)

108 
	#LRFC_MASK_COUNT_MASK
 (
UINT64_CAST
 0xff‡<< 8)

	)

109 
	#LRFC_OFFSET_MASK
 0

	)

110 
	#LRFC_OFFSET_SHFT
 (
UINT64_CAST
 0x1‡<< 0)

	)

113 
	#LNA_VALID_SHFT
 15

	)

114 
	#LNA_VALID_MASK
 (
UINT64_CAST
 1 << 
LNA_VALID_SHFT
)

	)

115 
	#LNA_VALID
 (
UINT64_CAST
 1 << 
LNA_VALID_SHFT
)

	)

116 
	#LNA_NODE_SHFT
 0

	)

117 
	#LNA_NODE_MASK
 (
UINT64_CAST
 0xf‡<< 
LNA_NODE_SHFT
)

	)

120 
	#LNA_ENTRY_SHFT
 16

	)

121 
	#LNA_MAX_ENTRIES
 4

	)

122 
	#LNA_ADD
(
_ªg
, 
_n
Ë((_ªgË(_ªgË<< 
LNA_ENTRY_SHFT
 | \

123 
LNA_VALID
 | (
_n
Ë<< 
LNA_NODE_SHFT
)

	)

124 
	#LNA_GET
(
_ªg
, 
f
Ë(((_ªgË>> (f*
LNA_ENTRY_SHFT
Ë& 
LNA_VALID
) ? \

125 ((
_ªg
Ë>> (
f
*
LNA_ENTRY_SHFT
) & \

126 
LNA_NODE_MASK
Ë: -1)

	)

128 
	#PIOTYPE_READ
 0

	)

129 
	#PIOTYPE_WRITE
 1

	)

130 
	#PIOTYPE_UNDEFINED
 2

	)

132 
	#PIOTYPE_EXCHANGE
 3

	)

133 
	#PIOTYPE_ADDR_ERR
 4

	)

134 
	#PIOTYPE_CMD_ERR
 5

	)

135 
	#PIOTYPE_PROT_ERR
 6

	)

136 
	#PIOTYPE_UNKNOWN
 7

	)

	@/usr/include/sys/SN/SN1/hubmd.h

28 #i‚de‡
__SYS_SN_SN1_HUBMD_H__


29 
	#__SYS_SN_SN1_HUBMD_H__


	)

33 
	#MD_CURRENT_CELL
 0x00780000

	)

43 
	#MD_MEMORY_CONFIG
 0x00780008

	)

50 
	#MD_ARBITRATION_CONTROL
 0x00780010

	)

57 
	#MD_MIG_CONFIG
 0x00780018

	)

64 
	#MD_FANDOP_CAC_STAT0
 0x00780020

	)

71 
	#MD_FANDOP_CAC_STAT1
 0x00780028

	)

78 
	#MD_MISC0_ERROR
 0x00780040

	)

85 
	#MD_MISC1_ERROR
 0x00780048

	)

92 
	#MD_MISC1_ERROR_CLR
 0x00780058

	)

99 
	#MD_OUTGOING_RP_QUEUE_SIZE
 0x00780060

	)

106 
	#MD_PERF_SEL0
 0x00790000

	)

114 
	#MD_PERF_SEL1
 0x00790008

	)

122 
	#MD_PERF_CNT0
 0x00790010

	)

129 
	#MD_PERF_CNT1
 0x00790018

	)

136 
	#MD_REFRESH_CONTROL
 0x007A0000

	)

143 
	#MD_JUNK_BUS_TIMING
 0x007A0008

	)

147 
	#MD_LED0
 0x007A0010

	)

151 
	#MD_LED1
 0x007A0018

	)

155 
	#MD_LED2
 0x007A0020

	)

159 
	#MD_LED3
 0x007A0028

	)

163 
	#MD_BIST_CTL
 0x007A0030

	)

170 
	#MD_BIST_DATA
 0x007A0038

	)

178 
	#MD_BIST_AB_ERR_ADDR
 0x007A0040

	)

182 
	#MD_BIST_STATUS
 0x007A0048

	)

186 
	#MD_IB_DEBUG
 0x007A0060

	)

190 
	#MD_DIR_CONFIG
 0x007C0000

	)

197 
	#MD_DIR_ERROR
 0x007C0010

	)

204 
	#MD_DIR_ERROR_CLR
 0x007C0018

	)

211 
	#MD_PROTOCOL_ERROR
 0x007C0020

	)

218 
	#MD_PROTOCOL_ERR_CLR
 0x007C0028

	)

225 
	#MD_MIG_CANDIDATE
 0x007C0030

	)

232 
	#MD_MIG_CANDIDATE_CLR
 0x007C0038

	)

239 
	#MD_MIG_DIFF_THRESH
 0x007C0040

	)

247 
	#MD_MIG_VALUE_THRESH
 0x007C0048

	)

255 
	#MD_OUTGOING_RQ_QUEUE_SIZE
 0x007C0050

	)

262 
	#MD_BIST_DB_ERR_DATA
 0x007C0058

	)

269 
	#MD_DB_DEBUG
 0x007C0060

	)

273 
	#MD_MB_ECC_CONFIG
 0x007E0000

	)

280 
	#MD_MEM_ERROR
 0x007E0010

	)

284 
	#MD_MEM_ERROR_CLR
 0x007E0018

	)

291 
	#MD_BIST_MB_ERR_DATA_0
 0x007E0020

	)

298 
	#MD_BIST_MB_ERR_DATA_1
 0x007E0028

	)

305 
	#MD_BIST_MB_ERR_DATA_2
 0x007E0030

	)

312 
	#MD_BIST_MB_ERR_DATA_3
 0x007E0038

	)

319 
	#MD_MB_DEBUG
 0x007E0040

	)

325 #ifde‡
_LANGUAGE_C


357 
	umd_cuºít_˚Œ_u
 {

358 
bdrkªg_t
 
	mmd_cuºít_˚Œ_ªgvÆ
;

360 
bdrkªg_t
 
	mcc_h•ec_¥Ÿ
 : 64;

361 } 
	mmd_cuºít_˚Œ_Êd_s
;

362 } 
	tmd_cuºít_˚Œ_u_t
;

391 
	umd_mem‹y_c⁄fig_u
 {

392 
bdrkªg_t
 
	mmd_mem‹y_c⁄fig_ªgvÆ
;

394 
bdrkªg_t
 
	mmc_ª£rved
 : 2;

395 
bdrkªg_t
 
	mmc_Ω_c⁄fig
 : 1;

396 
bdrkªg_t
 
	mmc_rcd_c⁄fig
 : 1;

397 
bdrkªg_t
 
	mmc_ª£rved_1
 : 1;

398 
bdrkªg_t
 
	mmc_mb_√g_edge
 : 3;

399 
bdrkªg_t
 
	mmc_ª£rved_2
 : 2;

400 
bdrkªg_t
 
	mmc_ßm∂e_time
 : 2;

401 
bdrkªg_t
 
	mmc_dñay_mux_£l
 : 2;

402 
bdrkªg_t
 
	mmc_pha£_dñay
 : 1;

403 
bdrkªg_t
 
	mmc_db_√g_edge
 : 1;

404 
bdrkªg_t
 
	mmc_˝u_¥Ÿ_ign‹e
 : 1;

405 
bdrkªg_t
 
	mmc_io_¥Ÿ_ign‹e
 : 1;

406 
bdrkªg_t
 
	mmc_io_¥Ÿ_í
 : 1;

407 
bdrkªg_t
 
	mmc_cc_íabÀ
 : 1;

408 
bdrkªg_t
 
	mmc_ª£rved_3
 : 10;

409 
bdrkªg_t
 
	mmc_dimm0_£l
 : 2;

410 
bdrkªg_t
 
	mmc_dimm3_b™k_size
 : 4;

411 
bdrkªg_t
 
	mmc_dimm3_døm_width
 : 1;

412 
bdrkªg_t
 
	mmc_ª£rved_4
 : 1;

413 
bdrkªg_t
 
	mmc_dimm3_b™k_íabÀ
 : 2;

414 
bdrkªg_t
 
	mmc_dimm2_b™k_size
 : 4;

415 
bdrkªg_t
 
	mmc_dimm2_døm_width
 : 1;

416 
bdrkªg_t
 
	mmc_ª£rved_5
 : 1;

417 
bdrkªg_t
 
	mmc_dimm2_b™k_íabÀ
 : 2;

418 
bdrkªg_t
 
	mmc_dimm1_b™k_size
 : 4;

419 
bdrkªg_t
 
	mmc_dimm1_døm_width
 : 1;

420 
bdrkªg_t
 
	mmc_ª£rved_6
 : 1;

421 
bdrkªg_t
 
	mmc_dimm1_b™k_íabÀ
 : 2;

422 
bdrkªg_t
 
	mmc_dimm0_b™k_size
 : 4;

423 
bdrkªg_t
 
	mmc_dimm0_døm_width
 : 1;

424 
bdrkªg_t
 
	mmc_ª£rved_7
 : 1;

425 
bdrkªg_t
 
	mmc_dimm0_b™k_íabÀ
 : 2;

426 } 
	mmd_mem‹y_c⁄fig_Êd_s
;

427 } 
	tmd_mem‹y_c⁄fig_u_t
;

434 
	umd_¨bôøti⁄_c⁄åﬁ_u
 {

435 
bdrkªg_t
 
	mmd_¨bôøti⁄_c⁄åﬁ_ªgvÆ
;

437 
bdrkªg_t
 
	mac_ª£rved
 : 56;

438 
bdrkªg_t
 
	mac_wrôe_gu¨
 : 4;

439 
bdrkªg_t
 
	mac_ª∂y_gu¨
 : 4;

440 } 
	mmd_¨bôøti⁄_c⁄åﬁ_Êd_s
;

441 } 
	tmd_¨bôøti⁄_c⁄åﬁ_u_t
;

455 
	umd_mig_c⁄fig_u
 {

456 
bdrkªg_t
 
	mmd_mig_c⁄fig_ªgvÆ
;

458 
bdrkªg_t
 
	mmc_ª£rved
 : 31;

459 
bdrkªg_t
 
	mmc_mig_íabÀ
 : 1;

460 
bdrkªg_t
 
	mmc_ª£rved_1
 : 8;

461 
bdrkªg_t
 
	mmc_mig_node_mask
 : 8;

462 
bdrkªg_t
 
	mmc_ª£rved_2
 : 6;

463 
bdrkªg_t
 
	mmc_mig_öãrvÆ
 : 10;

464 } 
	mmd_mig_c⁄fig_Êd_s
;

465 } 
	tmd_mig_c⁄fig_u_t
;

480 
	umd_Ánd›_ˇc_°©0_u
 {

481 
bdrkªg_t
 
	mmd_Ánd›_ˇc_°©0_ªgvÆ
;

483 
bdrkªg_t
 
	mfcs_vÆid
 : 1;

484 
bdrkªg_t
 
	mfcs_ª£rved
 : 30;

485 
bdrkªg_t
 
	mfcs_addr
 : 27;

486 
bdrkªg_t
 
	mfcs_ª£rved_1
 : 6;

487 } 
	mmd_Ánd›_ˇc_°©0_Êd_s
;

488 } 
	tmd_Ánd›_ˇc_°©0_u_t
;

503 
	umd_Ánd›_ˇc_°©1_u
 {

504 
bdrkªg_t
 
	mmd_Ánd›_ˇc_°©1_ªgvÆ
;

506 
bdrkªg_t
 
	mfcs_vÆid
 : 1;

507 
bdrkªg_t
 
	mfcs_ª£rved
 : 30;

508 
bdrkªg_t
 
	mfcs_addr
 : 27;

509 
bdrkªg_t
 
	mfcs_ª£rved_1
 : 6;

510 } 
	mmd_Ánd›_ˇc_°©1_Êd_s
;

511 } 
	tmd_Ánd›_ˇc_°©1_u_t
;

531 
	umd_misc0_îr‹_u
 {

532 
bdrkªg_t
 
	mmd_misc0_îr‹_ªgvÆ
;

534 
bdrkªg_t
 
	mme_ûl_ªvisi⁄
 : 2;

535 
bdrkªg_t
 
	mme_ûl_msg
 : 2;

536 
bdrkªg_t
 
	mme_l⁄g_∑ck
 : 2;

537 
bdrkªg_t
 
	mme_sh‹t_∑ck
 : 2;

538 
bdrkªg_t
 
	mme_missög_dv
 : 2;

539 
bdrkªg_t
 
	mme_bad_∑πül_d©a
 : 2;

540 
bdrkªg_t
 
	mme_xb_îr‹
 : 4;

541 
bdrkªg_t
 
	mme_ª£rved
 : 11;

542 
bdrkªg_t
 
	mme_èû
 : 1;

543 
bdrkªg_t
 
	mme_ª£rved_1
 : 2;

544 
bdrkªg_t
 
	mme_vútuÆ_ch™√l
 : 2;

545 
bdrkªg_t
 
	mme_ª£rved_2
 : 1;

546 
bdrkªg_t
 
	mme_suµl
 : 11;

547 
bdrkªg_t
 
	mme_ª£rved_3
 : 1;

548 
bdrkªg_t
 
	mme_sour˚
 : 11;

549 
bdrkªg_t
 
	mme_ª£rved_4
 : 1;

550 
bdrkªg_t
 
	mme_comm™d
 : 7;

551 } 
	mmd_misc0_îr‹_Êd_s
;

552 } 
	tmd_misc0_îr‹_u_t
;

568 
	umd_misc1_îr‹_u
 {

569 
bdrkªg_t
 
	mmd_misc1_îr‹_ªgvÆ
;

571 
bdrkªg_t
 
	mme_ûl_ªvisi⁄
 : 2;

572 
bdrkªg_t
 
	mme_ûl_msg
 : 2;

573 
bdrkªg_t
 
	mme_l⁄g_∑ck
 : 2;

574 
bdrkªg_t
 
	mme_sh‹t_∑ck
 : 2;

575 
bdrkªg_t
 
	mme_missög_dv
 : 2;

576 
bdrkªg_t
 
	mme_bad_∑πül_d©a
 : 2;

577 
bdrkªg_t
 
	mme_xb_îr‹
 : 4;

578 
bdrkªg_t
 
	mme_ª£rved
 : 7;

579 
bdrkªg_t
 
	mme_addªss
 : 38;

580 
bdrkªg_t
 
	mme_ª£rved_1
 : 3;

581 } 
	mmd_misc1_îr‹_Êd_s
;

582 } 
	tmd_misc1_îr‹_u_t
;

598 
	umd_misc1_îr‹_˛r_u
 {

599 
bdrkªg_t
 
	mmd_misc1_îr‹_˛r_ªgvÆ
;

601 
bdrkªg_t
 
	mmec_ûl_ªvisi⁄
 : 2;

602 
bdrkªg_t
 
	mmec_ûl_msg
 : 2;

603 
bdrkªg_t
 
	mmec_l⁄g_∑ck
 : 2;

604 
bdrkªg_t
 
	mmec_sh‹t_∑ck
 : 2;

605 
bdrkªg_t
 
	mmec_missög_dv
 : 2;

606 
bdrkªg_t
 
	mmec_bad_∑πül_d©a
 : 2;

607 
bdrkªg_t
 
	mmec_xb_îr‹
 : 4;

608 
bdrkªg_t
 
	mmec_ª£rved
 : 7;

609 
bdrkªg_t
 
	mmec_addªss
 : 38;

610 
bdrkªg_t
 
	mmec_ª£rved_1
 : 3;

611 } 
	mmd_misc1_îr‹_˛r_Êd_s
;

612 } 
	tmd_misc1_îr‹_˛r_u_t
;

632 
	umd_outgoög_Ω_queue_size_u
 {

633 
bdrkªg_t
 
	mmd_outgoög_Ω_queue_size_ªgvÆ
;

635 
bdrkªg_t
 
	m‹qs_ª£rved
 : 11;

636 
bdrkªg_t
 
	m‹qs_moqd_≈_Ω_size
 : 5;

637 
bdrkªg_t
 
	m‹qs_ª£rved_1
 : 3;

638 
bdrkªg_t
 
	m‹qs_moqd_pi1_Ω_size
 : 5;

639 
bdrkªg_t
 
	m‹qs_ª£rved_2
 : 3;

640 
bdrkªg_t
 
	m‹qs_moqd_pi0_Ω_size
 : 5;

641 
bdrkªg_t
 
	m‹qs_ª£rved_3
 : 4;

642 
bdrkªg_t
 
	m‹qs_moqh_≈_Ω_size
 : 4;

643 
bdrkªg_t
 
	m‹qs_ª£rved_4
 : 4;

644 
bdrkªg_t
 
	m‹qs_moqh_p1_Ω_size
 : 4;

645 
bdrkªg_t
 
	m‹qs_ª£rved_5
 : 4;

646 
bdrkªg_t
 
	m‹qs_moqh_p0_Ω_size
 : 4;

647 
bdrkªg_t
 
	m‹qs_ª£rved_6
 : 8;

648 } 
	mmd_outgoög_Ω_queue_size_Êd_s
;

649 } 
	tmd_outgoög_Ω_queue_size_u_t
;

656 
	umd_≥rf_£l0_u
 {

657 
bdrkªg_t
 
	mmd_≥rf_£l0_ªgvÆ
;

659 
bdrkªg_t
 
	mps_öãºu±
 : 1;

660 
bdrkªg_t
 
	mps_ª£rved
 : 3;

661 
bdrkªg_t
 
	mps_comm™d
 : 40;

662 
bdrkªg_t
 
	mps_ch™√l
 : 4;

663 
bdrkªg_t
 
	mps_ª£rved_1
 : 1;

664 
bdrkªg_t
 
	mps_sour˚
 : 7;

665 
bdrkªg_t
 
	mps_a˘ivôy
 : 4;

666 
bdrkªg_t
 
	mps_ª£rved_2
 : 2;

667 
bdrkªg_t
 
	mps_˙t_mode
 : 2;

668 } 
	mmd_≥rf_£l0_Êd_s
;

669 } 
	tmd_≥rf_£l0_u_t
;

676 
	umd_≥rf_£l1_u
 {

677 
bdrkªg_t
 
	mmd_≥rf_£l1_ªgvÆ
;

679 
bdrkªg_t
 
	mps_öãºu±
 : 1;

680 
bdrkªg_t
 
	mps_ª£rved
 : 3;

681 
bdrkªg_t
 
	mps_comm™d
 : 40;

682 
bdrkªg_t
 
	mps_ch™√l
 : 4;

683 
bdrkªg_t
 
	mps_ª£rved_1
 : 1;

684 
bdrkªg_t
 
	mps_sour˚
 : 7;

685 
bdrkªg_t
 
	mps_a˘ivôy
 : 4;

686 
bdrkªg_t
 
	mps_ª£rved_2
 : 2;

687 
bdrkªg_t
 
	mps_˙t_mode
 : 2;

688 } 
	mmd_≥rf_£l1_Êd_s
;

689 } 
	tmd_≥rf_£l1_u_t
;

703 
	umd_≥rf_˙t0_u
 {

704 
bdrkªg_t
 
	mmd_≥rf_˙t0_ªgvÆ
;

706 
bdrkªg_t
 
	mpc_ª£rved
 : 23;

707 
bdrkªg_t
 
	mpc_≥rf_˙t
 : 41;

708 } 
	mmd_≥rf_˙t0_Êd_s
;

709 } 
	tmd_≥rf_˙t0_u_t
;

723 
	umd_≥rf_˙t1_u
 {

724 
bdrkªg_t
 
	mmd_≥rf_˙t1_ªgvÆ
;

726 
bdrkªg_t
 
	mpc_ª£rved
 : 23;

727 
bdrkªg_t
 
	mpc_≥rf_˙t
 : 41;

728 } 
	mmd_≥rf_˙t1_Êd_s
;

729 } 
	tmd_≥rf_˙t1_u_t
;

763 
	umd_ª‰esh_c⁄åﬁ_u
 {

764 
bdrkªg_t
 
	mmd_ª‰esh_c⁄åﬁ_ªgvÆ
;

766 
bdrkªg_t
 
	mrc_íabÀ
 : 1;

767 
bdrkªg_t
 
	mrc_ª£rved
 : 39;

768 
bdrkªg_t
 
	mrc_cou¡î
 : 12;

769 
bdrkªg_t
 
	mrc_˙t_thªsh
 : 12;

770 } 
	mmd_ª‰esh_c⁄åﬁ_Êd_s
;

771 } 
	tmd_ª‰esh_c⁄åﬁ_u_t
;

786 
	umd_junk_bus_timög_u
 {

787 
bdrkªg_t
 
	mmd_junk_bus_timög_ªgvÆ
;

789 
bdrkªg_t
 
	mjbt_ª£rved
 : 16;

790 
bdrkªg_t
 
	mjbt_sy√rgy_íabÀ
 : 8;

791 
bdrkªg_t
 
	mjbt_sy√rgy_£tup_hﬁd
 : 8;

792 
bdrkªg_t
 
	mjbt_u¨t_íabÀ
 : 8;

793 
bdrkªg_t
 
	mjbt_u¨t_£tup_hﬁd
 : 8;

794 
bdrkªg_t
 
	mjbt_Ârom_íabÀ
 : 8;

795 
bdrkªg_t
 
	mjbt_Ârom_£tup_hﬁd
 : 8;

796 } 
	mmd_junk_bus_timög_Êd_s
;

797 } 
	tmd_junk_bus_timög_u_t
;

812 
	umd_Àd0_u
 {

813 
bdrkªg_t
 
	mmd_Àd0_ªgvÆ
;

815 
bdrkªg_t
 
	ml_ª£rved
 : 56;

816 
bdrkªg_t
 
	ml_d©a
 : 8;

817 } 
	mmd_Àd0_Êd_s
;

818 } 
	tmd_Àd0_u_t
;

833 
	umd_Àd1_u
 {

834 
bdrkªg_t
 
	mmd_Àd1_ªgvÆ
;

836 
bdrkªg_t
 
	ml_ª£rved
 : 56;

837 
bdrkªg_t
 
	ml_d©a
 : 8;

838 } 
	mmd_Àd1_Êd_s
;

839 } 
	tmd_Àd1_u_t
;

854 
	umd_Àd2_u
 {

855 
bdrkªg_t
 
	mmd_Àd2_ªgvÆ
;

857 
bdrkªg_t
 
	ml_ª£rved
 : 56;

858 
bdrkªg_t
 
	ml_d©a
 : 8;

859 } 
	mmd_Àd2_Êd_s
;

860 } 
	tmd_Àd2_u_t
;

875 
	umd_Àd3_u
 {

876 
bdrkªg_t
 
	mmd_Àd3_ªgvÆ
;

878 
bdrkªg_t
 
	ml_ª£rved
 : 56;

879 
bdrkªg_t
 
	ml_d©a
 : 8;

880 } 
	mmd_Àd3_Êd_s
;

881 } 
	tmd_Àd3_u_t
;

896 
	umd_bi°_˘l_u
 {

897 
bdrkªg_t
 
	mmd_bi°_˘l_ªgvÆ
;

899 
bdrkªg_t
 
	mbc_ª£rved
 : 57;

900 
bdrkªg_t
 
	mbc_dimm_num
 : 2;

901 
bdrkªg_t
 
	mbc_b™k_num
 : 1;

902 
bdrkªg_t
 
	mbc_ª£rved_1
 : 1;

903 
bdrkªg_t
 
	mbc_bi°_ª£t
 : 1;

904 
bdrkªg_t
 
	mbc_bi°_°›
 : 1;

905 
bdrkªg_t
 
	mbc_bi°_°¨t
 : 1;

906 } 
	mmd_bi°_˘l_Êd_s
;

907 } 
	tmd_bi°_˘l_u_t
;

922 
	umd_bi°_d©a_u
 {

923 
bdrkªg_t
 
	mmd_bi°_d©a_ªgvÆ
;

925 
bdrkªg_t
 
	mbd_ª£rved
 : 56;

926 
bdrkªg_t
 
	mbd_bi°_wrôe
 : 1;

927 
bdrkªg_t
 
	mbd_bi°_cy˛e
 : 1;

928 
bdrkªg_t
 
	mbd_bi°_byã
 : 1;

929 
bdrkªg_t
 
	mbd_bi°_nibbÀ
 : 1;

930 
bdrkªg_t
 
	mbd_bi°_d©a
 : 4;

931 } 
	mmd_bi°_d©a_Êd_s
;

932 } 
	tmd_bi°_d©a_u_t
;

947 
	umd_bi°_ab_îr_addr_u
 {

948 
bdrkªg_t
 
	mmd_bi°_ab_îr_addr_ªgvÆ
;

950 
bdrkªg_t
 
	mb´a_ª£rved
 : 14;

951 
bdrkªg_t
 
	mb´a_bi°_db_îr‹
 : 1;

952 
bdrkªg_t
 
	mb´a_bi°_mb_îr‹
 : 1;

953 
bdrkªg_t
 
	mb´a_ª£rved_1
 : 1;

954 
bdrkªg_t
 
	mb´a_be_øs_addr
 : 15;

955 
bdrkªg_t
 
	mb´a_ª£rved_2
 : 1;

956 
bdrkªg_t
 
	mb´a_be_mb_ˇs_addr
 : 15;

957 
bdrkªg_t
 
	mb´a_ª£rved_3
 : 1;

958 
bdrkªg_t
 
	mb´a_be_db_ˇs_addr
 : 15;

959 } 
	mmd_bi°_ab_îr_addr_Êd_s
;

960 } 
	tmd_bi°_ab_îr_addr_u_t
;

975 
	umd_bi°_°©us_u
 {

976 
bdrkªg_t
 
	mmd_bi°_°©us_ªgvÆ
;

978 
bdrkªg_t
 
	mbs_ª£rved
 : 62;

979 
bdrkªg_t
 
	mbs_bi°_d⁄e
 : 1;

980 
bdrkªg_t
 
	mbs_bi°_∑s£d
 : 1;

981 } 
	mmd_bi°_°©us_Êd_s
;

982 } 
	tmd_bi°_°©us_u_t
;

998 
	umd_ib_debug_u
 {

999 
bdrkªg_t
 
	mmd_ib_debug_ªgvÆ
;

1001 
bdrkªg_t
 
	mid_ª£rved
 : 62;

1002 
bdrkªg_t
 
	mid_ib_debug_£l
 : 2;

1003 } 
	mmd_ib_debug_Êd_s
;

1004 } 
	tmd_ib_debug_u_t
;

1019 
	umd_dú_c⁄fig_u
 {

1020 
bdrkªg_t
 
	mmd_dú_c⁄fig_ªgvÆ
;

1022 
bdrkªg_t
 
	mdc_ª£rved
 : 62;

1023 
bdrkªg_t
 
	mdc_ign‹e_dú_ecc
 : 1;

1024 
bdrkªg_t
 
	mdc_dú_Êav‹
 : 1;

1025 } 
	mmd_dú_c⁄fig_Êd_s
;

1026 } 
	tmd_dú_c⁄fig_u_t
;

1063 
	umd_dú_îr‹_u
 {

1064 
bdrkªg_t
 
	mmd_dú_îr‹_ªgvÆ
;

1066 
bdrkªg_t
 
	mde_u˚_vÆid
 : 1;

1067 
bdrkªg_t
 
	mde_´_vÆid
 : 1;

1068 
bdrkªg_t
 
	mde_˚_vÆid
 : 1;

1069 
bdrkªg_t
 
	mde_a˚_vÆid
 : 1;

1070 
bdrkªg_t
 
	mde_u˚_ovîrun
 : 1;

1071 
bdrkªg_t
 
	mde_´_ovîrun
 : 1;

1072 
bdrkªg_t
 
	mde_˚_ovîrun
 : 1;

1073 
bdrkªg_t
 
	mde_a˚_ovîrun
 : 1;

1074 
bdrkªg_t
 
	mde_ª£rved
 : 1;

1075 
bdrkªg_t
 
	mde_¥Ÿ_ödex
 : 3;

1076 
bdrkªg_t
 
	mde_bad_¥Ÿe˘
 : 4;

1077 
bdrkªg_t
 
	mde_ª£rved_1
 : 1;

1078 
bdrkªg_t
 
	mde_bad_syn
 : 7;

1079 
bdrkªg_t
 
	mde_ª£rved_2
 : 7;

1080 
bdrkªg_t
 
	mde_h•ec_addr
 : 30;

1081 
bdrkªg_t
 
	mde_ª£rved_3
 : 3;

1082 } 
	mmd_dú_îr‹_Êd_s
;

1083 } 
	tmd_dú_îr‹_u_t
;

1120 
	umd_dú_îr‹_˛r_u
 {

1121 
bdrkªg_t
 
	mmd_dú_îr‹_˛r_ªgvÆ
;

1123 
bdrkªg_t
 
	mdec_u˚_vÆid
 : 1;

1124 
bdrkªg_t
 
	mdec_´_vÆid
 : 1;

1125 
bdrkªg_t
 
	mdec_˚_vÆid
 : 1;

1126 
bdrkªg_t
 
	mdec_a˚_vÆid
 : 1;

1127 
bdrkªg_t
 
	mdec_u˚_ovîrun
 : 1;

1128 
bdrkªg_t
 
	mdec_´_ovîrun
 : 1;

1129 
bdrkªg_t
 
	mdec_˚_ovîrun
 : 1;

1130 
bdrkªg_t
 
	mdec_a˚_ovîrun
 : 1;

1131 
bdrkªg_t
 
	mdec_ª£rved
 : 1;

1132 
bdrkªg_t
 
	mdec_¥Ÿ_ödex
 : 3;

1133 
bdrkªg_t
 
	mdec_bad_¥Ÿe˘
 : 4;

1134 
bdrkªg_t
 
	mdec_ª£rved_1
 : 1;

1135 
bdrkªg_t
 
	mdec_bad_syn
 : 7;

1136 
bdrkªg_t
 
	mdec_ª£rved_2
 : 7;

1137 
bdrkªg_t
 
	mdec_h•ec_addr
 : 30;

1138 
bdrkªg_t
 
	mdec_ª£rved_3
 : 3;

1139 } 
	mmd_dú_îr‹_˛r_Êd_s
;

1140 } 
	tmd_dú_îr‹_˛r_u_t
;

1155 
	umd_¥Ÿocﬁ_îr‹_u
 {

1156 
bdrkªg_t
 
	mmd_¥Ÿocﬁ_îr‹_ªgvÆ
;

1158 
bdrkªg_t
 
	m≥_vÆid
 : 1;

1159 
bdrkªg_t
 
	m≥_öôüt‹
 : 11;

1160 
bdrkªg_t
 
	m≥_msg_ty≥
 : 8;

1161 
bdrkªg_t
 
	m≥_ac˚ss
 : 1;

1162 
bdrkªg_t
 
	m≥_¥i‹ôy
 : 1;

1163 
bdrkªg_t
 
	m≥_dú_°©e
 : 3;

1164 
bdrkªg_t
 
	m≥_dú_f‹m©
 : 2;

1165 
bdrkªg_t
 
	m≥_±r1_btmbôs
 : 3;

1166 
bdrkªg_t
 
	m≥_ª£rved
 : 1;

1167 
bdrkªg_t
 
	m≥_addªss
 : 30;

1168 
bdrkªg_t
 
	m≥_ª£rved_1
 : 1;

1169 
bdrkªg_t
 
	m≥_poöãr_me
 : 1;

1170 
bdrkªg_t
 
	m≥_ovîrun
 : 1;

1171 } 
	mmd_¥Ÿocﬁ_îr‹_Êd_s
;

1172 } 
	tmd_¥Ÿocﬁ_îr‹_u_t
;

1187 
	umd_¥Ÿocﬁ_îr_˛r_u
 {

1188 
bdrkªg_t
 
	mmd_¥Ÿocﬁ_îr_˛r_ªgvÆ
;

1190 
bdrkªg_t
 
	m≥c_vÆid
 : 1;

1191 
bdrkªg_t
 
	m≥c_öôüt‹
 : 11;

1192 
bdrkªg_t
 
	m≥c_msg_ty≥
 : 8;

1193 
bdrkªg_t
 
	m≥c_ac˚ss
 : 1;

1194 
bdrkªg_t
 
	m≥c_¥i‹ôy
 : 1;

1195 
bdrkªg_t
 
	m≥c_dú_°©e
 : 3;

1196 
bdrkªg_t
 
	m≥c_dú_f‹m©
 : 2;

1197 
bdrkªg_t
 
	m≥c_±r1_btmbôs
 : 3;

1198 
bdrkªg_t
 
	m≥c_ª£rved
 : 1;

1199 
bdrkªg_t
 
	m≥c_addªss
 : 30;

1200 
bdrkªg_t
 
	m≥c_ª£rved_1
 : 1;

1201 
bdrkªg_t
 
	m≥c_poöãr_me
 : 1;

1202 
bdrkªg_t
 
	m≥c_ovîrun
 : 1;

1203 } 
	mmd_¥Ÿocﬁ_îr_˛r_Êd_s
;

1204 } 
	tmd_¥Ÿocﬁ_îr_˛r_u_t
;

1224 
	umd_mig_ˇndid©e_u
 {

1225 
bdrkªg_t
 
	mmd_mig_ˇndid©e_ªgvÆ
;

1227 
bdrkªg_t
 
	mmc_vÆid
 : 1;

1228 
bdrkªg_t
 
	mmc_ª£rved
 : 28;

1229 
bdrkªg_t
 
	mmc_loˇl
 : 1;

1230 
bdrkªg_t
 
	mmc_ty≥
 : 1;

1231 
bdrkªg_t
 
	mmc_ovîrun
 : 1;

1232 
bdrkªg_t
 
	mmc_öôüt‹
 : 11;

1233 
bdrkªg_t
 
	mmc_addªss
 : 21;

1234 } 
	mmd_mig_ˇndid©e_Êd_s
;

1235 } 
	tmd_mig_ˇndid©e_u_t
;

1255 
	umd_mig_ˇndid©e_˛r_u
 {

1256 
bdrkªg_t
 
	mmd_mig_ˇndid©e_˛r_ªgvÆ
;

1258 
bdrkªg_t
 
	mmcc_vÆid
 : 1;

1259 
bdrkªg_t
 
	mmcc_ª£rved
 : 28;

1260 
bdrkªg_t
 
	mmcc_loˇl
 : 1;

1261 
bdrkªg_t
 
	mmcc_ty≥
 : 1;

1262 
bdrkªg_t
 
	mmcc_ovîrun
 : 1;

1263 
bdrkªg_t
 
	mmcc_öôüt‹
 : 11;

1264 
bdrkªg_t
 
	mmcc_addªss
 : 21;

1265 } 
	mmd_mig_ˇndid©e_˛r_Êd_s
;

1266 } 
	tmd_mig_ˇndid©e_˛r_u_t
;

1286 
	umd_mig_diff_thªsh_u
 {

1287 
bdrkªg_t
 
	mmd_mig_diff_thªsh_ªgvÆ
;

1289 
bdrkªg_t
 
	mmdt_vÆid
 : 1;

1290 
bdrkªg_t
 
	mmdt_ª£rved
 : 25;

1291 
bdrkªg_t
 
	mmdt_ßt_a˘i⁄
 : 3;

1292 
bdrkªg_t
 
	mmdt_th_a˘i⁄
 : 3;

1293 
bdrkªg_t
 
	mmdt_ª£rved_1
 : 17;

1294 
bdrkªg_t
 
	mmdt_thªshﬁd
 : 15;

1295 } 
	mmd_mig_diff_thªsh_Êd_s
;

1296 } 
	tmd_mig_diff_thªsh_u_t
;

1324 
	umd_mig_vÆue_thªsh_u
 {

1325 
bdrkªg_t
 
	mmd_mig_vÆue_thªsh_ªgvÆ
;

1327 
bdrkªg_t
 
	mmvt_vÆid
 : 1;

1328 
bdrkªg_t
 
	mmvt_loˇl_öt
 : 1;

1329 
bdrkªg_t
 
	mmvt_ª£rved
 : 24;

1330 
bdrkªg_t
 
	mmvt_ßt_a˘i⁄
 : 3;

1331 
bdrkªg_t
 
	mmvt_th_a˘i⁄
 : 3;

1332 
bdrkªg_t
 
	mmvt_ª£rved_1
 : 17;

1333 
bdrkªg_t
 
	mmvt_thªshﬁd
 : 15;

1334 } 
	mmd_mig_vÆue_thªsh_Êd_s
;

1335 } 
	tmd_mig_vÆue_thªsh_u_t
;

1351 
	umd_outgoög_rq_queue_size_u
 {

1352 
bdrkªg_t
 
	mmd_outgoög_rq_queue_size_ªgvÆ
;

1354 
bdrkªg_t
 
	m‹qs_ª£rved
 : 37;

1355 
bdrkªg_t
 
	m‹qs_moqh_≈_rq_size
 : 3;

1356 
bdrkªg_t
 
	m‹qs_ª£rved_1
 : 5;

1357 
bdrkªg_t
 
	m‹qs_moqh_p1_rq_size
 : 3;

1358 
bdrkªg_t
 
	m‹qs_ª£rved_2
 : 5;

1359 
bdrkªg_t
 
	m‹qs_moqh_p0_rq_size
 : 3;

1360 
bdrkªg_t
 
	m‹qs_ª£rved_3
 : 8;

1361 } 
	mmd_outgoög_rq_queue_size_Êd_s
;

1362 } 
	tmd_outgoög_rq_queue_size_u_t
;

1376 
	umd_bi°_db_îr_d©a_u
 {

1377 
bdrkªg_t
 
	mmd_bi°_db_îr_d©a_ªgvÆ
;

1379 
bdrkªg_t
 
	mbded_ª£rved
 : 32;

1380 
bdrkªg_t
 
	mbded_db_î_d
 : 32;

1381 } 
	mmd_bi°_db_îr_d©a_Êd_s
;

1382 } 
	tmd_bi°_db_îr_d©a_u_t
;

1398 
	umd_db_debug_u
 {

1399 
bdrkªg_t
 
	mmd_db_debug_ªgvÆ
;

1401 
bdrkªg_t
 
	mdd_ª£rved
 : 62;

1402 
bdrkªg_t
 
	mdd_db_debug_£l
 : 2;

1403 } 
	mmd_db_debug_Êd_s
;

1404 } 
	tmd_db_debug_u_t
;

1419 
	umd_mb_ecc_c⁄fig_u
 {

1420 
bdrkªg_t
 
	mmd_mb_ecc_c⁄fig_ªgvÆ
;

1422 
bdrkªg_t
 
	mmec_ª£rved
 : 63;

1423 
bdrkªg_t
 
	mmec_ign‹e_d©´cc
 : 1;

1424 } 
	mmd_mb_ecc_c⁄fig_Êd_s
;

1425 } 
	tmd_mb_ecc_c⁄fig_u_t
;

1466 
	umd_mem_îr‹_u
 {

1467 
bdrkªg_t
 
	mmd_mem_îr‹_ªgvÆ
;

1469 
bdrkªg_t
 
	mme_u˚_diff_addr
 : 1;

1470 
bdrkªg_t
 
	mme_ª£rved
 : 1;

1471 
bdrkªg_t
 
	mme_ªad_u˚
 : 2;

1472 
bdrkªg_t
 
	mme_ª£rved_1
 : 2;

1473 
bdrkªg_t
 
	mme_wrôe_u˚
 : 2;

1474 
bdrkªg_t
 
	mme_ª£rved_2
 : 2;

1475 
bdrkªg_t
 
	mme_ªad_˚
 : 2;

1476 
bdrkªg_t
 
	mme_ª£rved_3
 : 4;

1477 
bdrkªg_t
 
	mme_bad_syn
 : 8;

1478 
bdrkªg_t
 
	mme_ª£rved_4
 : 7;

1479 
bdrkªg_t
 
	mme_addªss
 : 30;

1480 
bdrkªg_t
 
	mme_ª£rved_5
 : 3;

1481 } 
	mmd_mem_îr‹_Êd_s
;

1482 } 
	tmd_mem_îr‹_u_t
;

1523 
	umd_mem_îr‹_˛r_u
 {

1524 
bdrkªg_t
 
	mmd_mem_îr‹_˛r_ªgvÆ
;

1526 
bdrkªg_t
 
	mmec_u˚_diff_addr
 : 1;

1527 
bdrkªg_t
 
	mmec_ª£rved
 : 1;

1528 
bdrkªg_t
 
	mmec_ªad_u˚
 : 2;

1529 
bdrkªg_t
 
	mmec_ª£rved_1
 : 2;

1530 
bdrkªg_t
 
	mmec_wrôe_u˚
 : 2;

1531 
bdrkªg_t
 
	mmec_ª£rved_2
 : 2;

1532 
bdrkªg_t
 
	mmec_ªad_˚
 : 2;

1533 
bdrkªg_t
 
	mmec_ª£rved_3
 : 4;

1534 
bdrkªg_t
 
	mmec_bad_syn
 : 8;

1535 
bdrkªg_t
 
	mmec_ª£rved_4
 : 7;

1536 
bdrkªg_t
 
	mmec_addªss
 : 30;

1537 
bdrkªg_t
 
	mmec_ª£rved_5
 : 3;

1538 } 
	mmd_mem_îr‹_˛r_Êd_s
;

1539 } 
	tmd_mem_îr‹_˛r_u_t
;

1553 
	umd_bi°_mb_îr_d©a_0_u
 {

1554 
bdrkªg_t
 
	mmd_bi°_mb_îr_d©a_0_ªgvÆ
;

1556 
bdrkªg_t
 
	mbmed0_ª£rved
 : 28;

1557 
bdrkªg_t
 
	mbmed0_mb_î_d
 : 36;

1558 } 
	mmd_bi°_mb_îr_d©a_0_Êd_s
;

1559 } 
	tmd_bi°_mb_îr_d©a_0_u_t
;

1573 
	umd_bi°_mb_îr_d©a_1_u
 {

1574 
bdrkªg_t
 
	mmd_bi°_mb_îr_d©a_1_ªgvÆ
;

1576 
bdrkªg_t
 
	mbmed1_ª£rved
 : 28;

1577 
bdrkªg_t
 
	mbmed1_mb_î_d
 : 36;

1578 } 
	mmd_bi°_mb_îr_d©a_1_Êd_s
;

1579 } 
	tmd_bi°_mb_îr_d©a_1_u_t
;

1593 
	umd_bi°_mb_îr_d©a_2_u
 {

1594 
bdrkªg_t
 
	mmd_bi°_mb_îr_d©a_2_ªgvÆ
;

1596 
bdrkªg_t
 
	mbmed2_ª£rved
 : 28;

1597 
bdrkªg_t
 
	mbmed2_mb_î_d
 : 36;

1598 } 
	mmd_bi°_mb_îr_d©a_2_Êd_s
;

1599 } 
	tmd_bi°_mb_îr_d©a_2_u_t
;

1613 
	umd_bi°_mb_îr_d©a_3_u
 {

1614 
bdrkªg_t
 
	mmd_bi°_mb_îr_d©a_3_ªgvÆ
;

1616 
bdrkªg_t
 
	mbmed3_ª£rved
 : 28;

1617 
bdrkªg_t
 
	mbmed3_mb_î_d
 : 36;

1618 } 
	mmd_bi°_mb_îr_d©a_3_Êd_s
;

1619 } 
	tmd_bi°_mb_îr_d©a_3_u_t
;

1635 
	umd_mb_debug_u
 {

1636 
bdrkªg_t
 
	mmd_mb_debug_ªgvÆ
;

1638 
bdrkªg_t
 
	mmd_ª£rved
 : 63;

1639 
bdrkªg_t
 
	mmd_mb_debug_£l
 : 1;

1640 } 
	mmd_mb_debug_Êd_s
;

1641 } 
	tmd_mb_debug_u_t
;

	@/usr/include/sys/SN/SN1/hubmd_next.h

13 #i‚de‡
__SYS_SN_SN1_HUBMD_NEXT_H__


14 
	#__SYS_SN_SN1_HUBMD_NEXT_H__


	)

16 
	#MD_PERF_COUNTERS
 6

	)

17 
	#MD_PERF_SETS
 6

	)

19 
	#MD_SIZE_EMPTY
 0

	)

20 
	#MD_SIZE_64MB
 1

	)

21 
	#MD_SIZE_128MB
 2

	)

22 
	#MD_SIZE_256MB
 3

	)

23 
	#MD_SIZE_512MB
 4

	)

24 
	#MD_SIZE_1GB
 5

	)

26 
	#MD_SIZE_BYTES
(
size
Ë((sizeË=0 ? 0 : 0x2000000L << (size))

	)

27 
	#MD_SIZE_MBYTES
(
size
Ë((sizeË=0 ? 0 : 0x20 << (size))

	)

28 
	#MD_NUM_ENABLED
(
_x
) ((_x & 0x1) + ((_x >> 1) & 0x1) + \

29 ((
_x
 >> 2Ë& 0x1Ë+ ((_x >> 3Ë& 0x1))

	)

34 
	#MD_PAGE_SIZE
 16384

	)

35 
	#MD_PAGE_NUM_SHFT
 14

	)

37 
	#MMC_IO_PROT
 (
UINT64_CAST
 1 << 45)

	)

40 
	#MD_PERF_SEL
 0x210000

	)

53 
	#MD_MIG_DIFF_THRES_VALID_MASK
 (
UINT64_CAST
 0x1 << 63)

	)

54 
	#MD_MIG_DIFF_THRES_VALID_SHFT
 63

	)

55 
	#MD_MIG_DIFF_THRES_VALUE_MASK
 (
UINT64_CAST
 0x7fff)

	)

58 
	#MD_MIG_VALUE_THRES_VALID_MASK
 (
UINT64_CAST
 0x1 << 63)

	)

59 
	#MD_MIG_VALUE_THRES_VALID_SHFT
 63

	)

60 
	#MD_MIG_VALUE_THRES_VALUE_MASK
 (
UINT64_CAST
 0x7fff)

	)

63 
	#MD_MIG_CANDIDATE_VALID_MASK
 (
UINT64_CAST
 0x1 << 63)

	)

64 
	#MD_MIG_CANDIDATE_VALID_SHFT
 63

	)

65 
	#MD_MIG_CANDIDATE_TYPE_MASK
 (
UINT64_CAST
 0x1 << 33)

	)

66 
	#MD_MIG_CANDIDATE_TYPE_SHFT
 33

	)

67 
	#MD_MIG_CANDIDATE_OVERRUN_MASK
 (
UINT64_CAST
 0x1 << 32)

	)

68 
	#MD_MIG_CANDIDATE_OVERRUN_SHFT
 32

	)

69 
	#MD_MIG_CANDIDATE_INITIATOR_MASK
 (
UINT64_CAST
 0x7f‡<< 21)

	)

70 
	#MD_MIG_CANDIDATE_INITIATOR_SHFT
 21

	)

71 
	#MD_MIG_CANDIDATE_NODEID_MASK
 (
UINT64_CAST
 0xf‡<< 24)

	)

72 
	#MD_MIG_CANDIDATE_NODEID_SHFT
 24

	)

73 
	#MD_MIG_CANDIDATE_ADDR_MASK
 (
UINT64_CAST
 0x1fffff)

	)

74 
	#MD_MIG_CANDIDATE_ADDR_SHFT
 0

	)

81 
	#MD_MIG_DIFF_THRESH_GET
(
ªgi⁄
) ( \

82 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
) & \

83 
MD_MIG_DIFF_THRES_VALUE_MASK
)

	)

85 
	#MD_MIG_DIFF_THRESH_SET
(
ªgi⁄
, 
vÆue
) ( \

86 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
, \

87 
MD_MIG_DIFF_THRES_VALID_MASK
 | (
vÆue
)))

	)

89 
	#MD_MIG_DIFF_THRESH_DISABLE
(
ªgi⁄
) ( \

90 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
, \

91 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
) \

92 & ~
MD_MIG_DIFF_THRES_VALID_MASK
))

	)

94 
	#MD_MIG_DIFF_THRESH_ENABLE
(
ªgi⁄
) ( \

95 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
, \

96 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
) \

97 | 
MD_MIG_DIFF_THRES_VALID_MASK
))

	)

99 
	#MD_MIG_DIFF_THRESH_IS_ENABLED
(
ªgi⁄
) ( \

100 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_DIFF_THRESH
) & \

101 
MD_MIG_DIFF_THRES_VALID_MASK
)

	)

103 
	#MD_MIG_VALUE_THRESH_GET
(
ªgi⁄
) ( \

104 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
) & \

105 
MD_MIG_VALUE_THRES_VALUE_MASK
)

	)

107 
	#MD_MIG_VALUE_THRESH_SET
(
ªgi⁄
, 
vÆue
) ( \

108 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
, \

109 
MD_MIG_VALUE_THRES_VALID_MASK
 | (
vÆue
)))

	)

111 
	#MD_MIG_VALUE_THRESH_DISABLE
(
ªgi⁄
) ( \

112 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
, \

113 
	`REMOTE_HUB_L
(
ªgi⁄
, 
MD_MIG_VALUE_THRESH
) \

114 & ~
MD_MIG_VALUE_THRES_VALID_MASK
))

	)

116 
	#MD_MIG_VALUE_THRESH_ENABLE
(
ªgi⁄
) ( \

117 
	`REMOTE_HUB_S
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
, \

118 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
) \

119 | 
MD_MIG_VALUE_THRES_VALID_MASK
))

	)

121 
	#MD_MIG_VALUE_THRESH_IS_ENABLED
(
ªgi⁄
) ( \

122 
	`REMOTE_HUB_L
((
ªgi⁄
), 
MD_MIG_VALUE_THRESH
) & \

123 
MD_MIG_VALUE_THRES_VALID_MASK
)

	)

129 
	#MD_MIG_CANDIDATE_GET
(
my_ªgi⁄_id
) ( \

130 
	`REMOTE_HUB_L
((
my_ªgi⁄_id
), 
MD_MIG_CANDIDATE_CLR
))

	)

132 
	#MD_MIG_CANDIDATE_HWPFN
(
vÆue
Ë((vÆueË& 
MD_MIG_CANDIDATE_ADDR_MASK
)

	)

134 
	#MD_MIG_CANDIDATE_NODEID
(
vÆue
) ( \

135 ((
vÆue
Ë& 
MD_MIG_CANDIDATE_NODEID_MASK
Ë>> 
MD_MIG_CANDIDATE_NODEID_SHFT
)

	)

137 
	#MD_MIG_CANDIDATE_TYPE
(
vÆue
) ( \

138 ((
vÆue
Ë& 
MD_MIG_CANDIDATE_TYPE_MASK
Ë>> 
MD_MIG_CANDIDATE_TYPE_SHFT
)

	)

140 
	#MD_MIG_CANDIDATE_VALID
(
vÆue
) ( \

141 ((
vÆue
Ë& 
MD_MIG_CANDIDATE_VALID_MASK
Ë>> 
MD_MIG_CANDIDATE_VALID_SHFT
)

	)

146 
	#MD_PPROT_SHFT
 0

	)

147 
	#MD_PPROT_MASK
 0xff

	)

148 
	#MD_PPROT_REFCNT_SHFT
 5

	)

149 
	#MD_PPROT_REFCNT_WIDTH
 0x7ffff

	)

150 
	#MD_PPROT_REFCNT_MASK
 (
MD_PPROT_REFCNT_WIDTH
 << 5)

	)

152 
	#MD_PPROT_IO_SHFT
 8

	)

156 
	#MD_SPROT_SHFT
 0

	)

157 
	#MD_SPROT_MASK
 0xff

	)

158 
	#MD_SPROT_IO_SHFT
 8

	)

159 
	#MD_SPROT_REFCNT_SHFT
 5

	)

160 
	#MD_SPROT_REFCNT_WIDTH
 0x7ff

	)

161 
	#MD_SPROT_REFCNT_MASK
 (
MD_SPROT_REFCNT_WIDTH
 << 5)

	)

165 
	#MD_PROT_MIGMD_IREL
 (
UINT64_CAST
 0x3 << 3)

	)

166 
	#MD_PROT_MIGMD_IABS
 (
UINT64_CAST
 0x2 << 3)

	)

167 
	#MD_PROT_MIGMD_PREL
 (
UINT64_CAST
 0x1 << 3)

	)

168 
	#MD_PROT_MIGMD_OFF
 (
UINT64_CAST
 0x0 << 3)

	)

174 
	#DIRTYPE_PREMIUM
 1

	)

175 
	#DIRTYPE_STANDARD
 0

	)

183 
	#MD_PPROT_REFCNT_GET
(
vÆue
) ( \

184 ((
vÆue
Ë& 
MD_PPROT_REFCNT_MASK
Ë>> 
MD_PPROT_REFCNT_SHFT
)

	)

187 
	#MD_SPROT_REFCNT_GET
(
vÆue
) ( \

188 ((
vÆue
Ë& 
MD_SPROT_REFCNT_MASK
Ë>> 
MD_SPROT_REFCNT_SHFT
)

	)

190 #i‡
_LANGUAGE_C


191 
	umd_≥rf_£l
 {

192 
__uöt64_t
 
	m≥rf_£l_ªg
;

194 
__uöt64_t
 
	m≥rf_rsvd
 : 60,

195 
	m≥rf_í
 : 1,

196 
	m≥rf_£l
 : 3;

197 } 
	m≥rf_£l_bôs
;

198 } 
	tmd_≥rf_£l_t
;

268 
	#MD_MEM_BANKS
 8

	)

269 
	#MD_MEM_IP45BANKS
 4

	)

270 
	#MD_MEM_IP34BANKS
 
MD_MEM_IP45BANKS


	)

271 
	#MD_MEM_DIMM_BANKS
 4

	)

272 
	#MD_MEM_IP45DIMM_BANKS
 2

	)

273 
	#MD_MEM_IP34DIMM_BANKS
 
MD_MEM_IP45DIMM_BANKS


	)

274 
	#MD_BANK_SHFT
 30

	)

275 
	#MD_BANK_MASK
 (
UINT64_CAST
 0x7 << 30)

	)

276 
	#MD_BANK_SIZE
 (
UINT64_CAST
 1 << 
MD_BANK_SHFT
Ë

	)

277 
	#MD_BANK_OFFSET
(
_b
Ë(
	`UINT64_CAST
 (_bË<< 
MD_BANK_SHFT
)

	)

278 
	#MD_BANK_GET
(
addr
Ë((◊ddrË& 
MD_BANK_MASK
Ë>> 
MD_BANK_SHFT
)

	)

279 
	#MD_BANK_TO_DIMM_BANK
(
_b
Ë(–(_bË>> 1Ë& 0x3)

	)

280 
	#MD_BANK_TO_PHYS_BANK
(
_b
Ë(–(_bË>> 0Ë& 0x1)

	)

281 
	#MD_DIMM_BANK_GET
(
addr
Ë
	`MD_BANK_TO_DIMM_BANK
(
	`MD_BANK_GET
◊ddr))

	)

282 
	#MD_PHYS_BANK_GET
(
addr
Ë
	`MD_BANK_TO_PHYS_BANK
(
	`MD_BANK_GET
◊ddr))

	)

287 
	#MD_PTR_NODE_SHFT
 3

	)

288 
	#MD_PTR_DEVICE_MASK
 0x7

	)

289 
	#MD_PTR_SUBNODE0_MASK
 0x1

	)

290 
	#MD_PTR_SUBNODE1_MASK
 0x4

	)

302 
	#BD_ITLV_COUNT
 4

	)

303 
	#BD_ITLV_STRIDE
 0x10

	)

308 
	#MD_PROT_SHFT
(
_rgn
, 
_io
) ((((_rgn) & 0x20) >> 2 | \

309 ((
_rgn
) & 0x01) << 2 | \

310 ((
_io
Ë& 0x1Ë<< 1Ë* 8)

	)

311 
	#MD_PROT_MASK
(
_rgn
, 
_io
Ë(0xf‡<< 
	`MD_PROT_SHFT
(_rgn, _io))

	)

312 
	#MD_PROT_GET
(
_vÆ
, 
_rgn
, 
_io
) \

313 (((
_vÆ
Ë& 
	`MD_PROT_MASK
(
_rgn
, 
_io
)Ë>> 
	`MD_PROT_SHFT
(_rgn, _io))

	)

317 
	#MD_PROT_RW
 (
UINT64_CAST
 0xff)

	)

318 
	#MD_PROT_RO
 (
UINT64_CAST
 0x0f)

	)

319 
	#MD_PROT_NO
 (
UINT64_CAST
 0x00)

	)

330 #ifde‡
_LANGUAGE_C


334 
	smd_sdú_poöãr_fmt
 {

335 
bdrkªg_t
 
	msdp_fûl
 : 32;

336 
bdrkªg_t
 
	msdp_poöãr2
 : 5;

337 
bdrkªg_t
 
	msdp_¸ô_w‹d_off
 : 3;

338 
bdrkªg_t
 
	msdp_ª£rved
 : 1;

339 
bdrkªg_t
 
	msdp_lo˝rŸ
 : 1;

340 
bdrkªg_t
 
	msdp_ecc
 : 6;

341 
bdrkªg_t
 
	msdp_poöãr1
 : 8;

342 
bdrkªg_t
 
	msdp_¥i‹ôy
 : 3;

343 
bdrkªg_t
 
	msdp_°©e
 : 3;

344 
bdrkªg_t
 
	msdp_f‹m©
 : 2;

347 
	smd_sdú_föe_fmt
 {

348 
bdrkªg_t
 
	msdf_fûl
 : 32;

349 
bdrkªg_t
 
	msdf_ve˘‹2
 : 8;

350 
bdrkªg_t
 
	msdf_èg2vÆid
 : 1;

351 
bdrkªg_t
 
	msdf_lo˝rŸ
 : 1;

352 
bdrkªg_t
 
	msdf_ecc
 : 6;

353 
bdrkªg_t
 
	msdf_ve˘‹1
 : 8;

354 
bdrkªg_t
 
	msdf_èg2
 : 3;

355 
bdrkªg_t
 
	msdf_èg1
 : 3;

356 
bdrkªg_t
 
	msdf_f‹m©
 : 2;

359 
	smd_sdú_cﬂr£_fmt
 {

360 
bdrkªg_t
 
	msdc_fûl
 : 32;

361 
bdrkªg_t
 
	msdc_ve˘‹_b
 : 8;

362 
bdrkªg_t
 
	msdc_ª£rved
 : 1;

363 
bdrkªg_t
 
	msdc_lo˝rŸ
 : 1;

364 
bdrkªg_t
 
	msdc_ecc
 : 6;

365 
bdrkªg_t
 
	msdc_ve˘‹_a
 : 8;

366 
bdrkªg_t
 
	msdc_ª£rved_1
 : 6;

367 
bdrkªg_t
 
	msdc_f‹m©
 : 2;

370 
	umd_sdú
 {

372 
__uöt64_t
 
	msd_vÆ
;

373 
md_sdú_poöãr_fmt
 
	msdp_fmt
;

374 
md_sdú_föe_fmt
 
	msdf_fmt
;

375 
md_sdú_cﬂr£_fmt
 
	msdc_fmt
;

376 } 
	tmd_sdú_t
;

381 
	smd_pdú_poöãr_fmt
 {

382 
bdrkªg_t
 
	mpdp_ª£rved
 : 7;

383 
bdrkªg_t
 
	mpdp_poöãr2_b
 : 3;

384 
bdrkªg_t
 
	mpdp_ª£rved_1
 : 5;

385 
bdrkªg_t
 
	mpdp_ecc_b
 : 1;

386 
bdrkªg_t
 
	mpdp_poöãr2_a
 : 5;

387 
bdrkªg_t
 
	mpdp_¸ô_w‹d_off
 : 3;

388 
bdrkªg_t
 
	mpdp_ª£rved_2
 : 1;

389 
bdrkªg_t
 
	mpdp_lo˝rŸ
 : 1;

390 
bdrkªg_t
 
	mpdp_ecc_a
 : 6;

391 
bdrkªg_t
 
	mpdp_ª£rved_3
 : 7;

392 
bdrkªg_t
 
	mpdp_poöãr1_b
 : 3;

393 
bdrkªg_t
 
	mpdp_ª£rved_4
 : 6;

394 
bdrkªg_t
 
	mpdp_poöãr1_a
 : 8;

395 
bdrkªg_t
 
	mpdp_¥i‹ôy
 : 3;

396 
bdrkªg_t
 
	mpdp_°©e
 : 3;

397 
bdrkªg_t
 
	mpdp_f‹m©
 : 2;

400 
	smd_pdú_föe_fmt
 {

401 
bdrkªg_t
 
	mpdf_ve˘‹2_b
 : 8;

402 
bdrkªg_t
 
	mpdf_èg2_b
 : 2;

403 
bdrkªg_t
 
	mpdf_ª£rved
 : 5;

404 
bdrkªg_t
 
	mpdf_ecc_b
 : 1;

405 
bdrkªg_t
 
	mpdf_ve˘‹2_a
 : 8;

406 
bdrkªg_t
 
	mpdf_èg2vÆid
 : 1;

407 
bdrkªg_t
 
	mpdf_lo˝rŸ
 : 1;

408 
bdrkªg_t
 
	mpdf_ecc_a
 : 6;

409 
bdrkªg_t
 
	mpdf_ve˘‹1_b
 : 8;

410 
bdrkªg_t
 
	mpdf_èg1_b
 : 2;

411 
bdrkªg_t
 
	mpdf_ª£rved_1
 : 6;

412 
bdrkªg_t
 
	mpdf_ve˘‹1_a
 : 8;

413 
bdrkªg_t
 
	mpdf_èg2_a
 : 3;

414 
bdrkªg_t
 
	mpdf_èg1_a
 : 3;

415 
bdrkªg_t
 
	mpdf_f‹m©
 : 2;

418 
	smd_pdú_•¨£_fmt
 {

419 
bdrkªg_t
 
	mpds_ª£rved
 : 5;

420 
bdrkªg_t
 
	mpds_cﬁumn_c
 : 10;

421 
bdrkªg_t
 
	mpds_ecc_b
 : 1;

422 
bdrkªg_t
 
	mpds_row_b
 : 8;

423 
bdrkªg_t
 
	mpds_ª£rved_1
 : 1;

424 
bdrkªg_t
 
	mpds_lo˝rŸ
 : 1;

425 
bdrkªg_t
 
	mpds_ecc_a
 : 6;

426 
bdrkªg_t
 
	mpds_cﬁumn_b
 : 16;

427 
bdrkªg_t
 
	mpds_row_a
 : 8;

428 
bdrkªg_t
 
	mpds_cﬁumn_a
 : 6;

429 
bdrkªg_t
 
	mpds_f‹m©
 : 2;

432 
	umd_pdú
 {

434 
__uöt64_t
 
	mpd_vÆ
;

435 
md_pdú_poöãr_fmt
 
	mpdp_fmt
;

436 
md_pdú_föe_fmt
 
	mpdf_fmt
;

437 
md_pdú_•¨£_fmt
 
	mpds_fmt
;

438 } 
	tmd_pdú_t
;

451 
	#MD_FORMAT_UNOWNED
 (
UINT64_CAST
 0x0Ë

	)

452 
	#MD_FORMAT_POINTER
 (
UINT64_CAST
 0x1Ë

	)

453 
	#MD_FORMAT_SHFINE
 (
UINT64_CAST
 0x2Ë

	)

454 
	#MD_FORMAT_SHCOARSE
 (
UINT64_CAST
 0x3Ë

	)

467 
	#MD_DIR_EXCLUSIVE
 (
UINT64_CAST
 0x0Ë

	)

468 
	#MD_DIR_UNOWNED
 (
UINT64_CAST
 0x1Ë

	)

469 
	#MD_DIR_SHARED
 (
UINT64_CAST
 0x2Ë

	)

470 
	#MD_DIR_BUSY_SHARED
 (
UINT64_CAST
 0x4Ë

	)

471 
	#MD_DIR_BUSY_EXCL
 (
UINT64_CAST
 0x5Ë

	)

472 
	#MD_DIR_WAIT
 (
UINT64_CAST
 0x6Ë

	)

473 
	#MD_DIR_POISONED
 (
UINT64_CAST
 0x7Ë

	)

475 #ifde‡
_LANGUAGE_C


479 
	#MD_FMT_ST_TO_STATE
(
fmt
, 
°©e
) \

480 ((
fmt
Ë=
MD_FORMAT_POINTER
 ? (
°©e
) : \

481 (
fmt
Ë=
MD_FORMAT_UNOWNED
 ? 
MD_DIR_UNOWNED
 : \

482 
MD_DIR_SHARED
)

	)

483 
	#MD_DIR_STATE
(
x
Ë
	`MD_FMT_ST_TO_STATE
(
	`MD_DIR_FORMAT
(x), 
	`MD_DIR_STVAL
(x))

	)

493 
	#MD_SDIR_FORMAT_SHFT
 0

	)

494 
	#MD_SDIR_FORMAT_MASK
 (0x3 << 0)

	)

495 
	#MD_SDIR_STATE_SHFT
 2

	)

496 
	#MD_SDIR_STATE_MASK
 (0x7 << 2)

	)

500 
	#MD_PDIR_FORMAT_SHFT
 0

	)

501 
	#MD_PDIR_FORMAT_MASK
 (0x3 << 0)

	)

502 
	#MD_PDIR_STATE_SHFT
 2

	)

503 
	#MD_PDIR_STATE_MASK
 (0x7 << 2)

	)

507 
	#MD_FORMAT_SHFT
 0

	)

508 
	#MD_FORMAT_MASK
 (0x3 << 0)

	)

509 
	#MD_STATE_SHFT
 2

	)

510 
	#MD_STATE_MASK
 (0x7 << 2)

	)

517 
	#MD_SDC_VECTORB_SHFT
 8

	)

521 
	#MD_PDP_POINTER1A_MASK
 0xFF

	)

522 
	#MD_PDP_POINTER1B_SHFT
 8

	)

523 
	#MD_PDP_POINTER2B_SHFT
 5

	)

524 
	#MD_PDP_ECCB_SHFT
 6

	)

526 
	#MD_PDF_VECTOR1B_SHFT
 8

	)

527 
	#MD_PDF_VECTOR2B_SHFT
 8

	)

528 
	#MD_PDF_TAG1B_SHFT
 3

	)

529 
	#MD_PDF_TAG2B_SHFT
 3

	)

530 
	#MD_PDF_ECC_SHFT
 6

	)

532 
	#MD_PDS_ROWB_SHFT
 8

	)

533 
	#MD_PDS_COLUMNB_SHFT
 6

	)

534 
	#MD_PDS_COLUMNC_SHFT
 (
MD_PDS_COLUMNB_SHFT
 + 16)

	)

535 
	#MD_PDS_ECC_SHFT
 6

	)

543 
	#MD_PDIR_INIT
 0

	)

544 
	#MD_PDIR_INIT_CNT
 0

	)

545 #ifde‡
BEDROCK_WB_WAR2


547 
	#MD_PDIR_INIT_PROT
 0xffffffffffffffff

	)

549 
	#MD_PDIR_INIT_PROT
 0

	)

552 
	#MD_SDIR_INIT
 0

	)

553 
	#MD_SDIR_INIT_CNT
 0

	)

554 #ifde‡
BEDROCK_WB_WAR2


555 
	#MD_SDIR_INIT_PROT
 0xffffffffffffffff

	)

557 
	#MD_SDIR_INIT_PROT
 0

	)

560 
	#MD_PDIR_MASK
 0xffffffffffffffff

	)

561 
	#MD_SDIR_MASK
 0xffffffff

	)

562 
	#MD_PDIR_BISTDATA_MASK
 0x00000000ffffffff

	)

563 
	#MD_SDIR_BISTDATA_MASK
 0x000000000000ffff

	)

567 
	#MD_PDIR_PROBE_MASK
(
pb
Ë0xffffffffffffffff

	)

568 
	#MD_SDIR_PROBE_MASK
(
pb
Ë(0xffff0000fff‡<< (’bË? 16 : 0))

	)

577 
	#MD_PTR_NODE
(
x
Ë((xË>> 
MD_PTR_NODE_SHFT
)

	)

578 
	#MD_PTR_DEVICE
(
x
Ë((xË& 
MD_PTR_DEVICE_MASK
)

	)

579 
	#MD_PTR_SLICE
(
x
Ë(((xË& 
MD_PTR_SUBNODE0_MASK
) | \

580 ((
x
Ë& 
MD_PTR_SUBNODE1_MASK
Ë>> 1)

	)

581 
	#MD_PTR_OWNER_CPU
(
x
Ë(! ((xË& 2))

	)

582 
	#MD_PTR_OWNER_IO
(
x
Ë((xË& 2)

	)

586 
	#MD_DIR_FORMAT
(
x
Ë((xË>> 
MD_SDIR_FORMAT_SHFT
 & \

587 
MD_SDIR_FORMAT_MASK
 >> 
MD_SDIR_FORMAT_SHFT
)

	)

588 
	#MD_DIR_STVAL
(
x
Ë((xË>> 
MD_SDIR_STATE_SHFT
 & \

589 
MD_SDIR_STATE_MASK
 >> 
MD_SDIR_STATE_SHFT
)

	)

592 
	#ERROR_ADDR_SHFT
 3

	)

593 
	#ERROR_HSPEC_SHFT
 3

	)

594 
	#DIR_ERR_HSPEC_MASK
 0x1fffffff8

	)

601 
	#md_dú_îr‹_t
 
md_dú_îr‹_u_t


	)

602 
	#md_mem_îr‹_t
 
md_mem_îr‹_u_t


	)

603 
	#dîr_ªg
 
md_dú_îr‹_ªgvÆ


	)

604 
	#mîr_ªg
 
md_mem_îr‹_ªgvÆ


	)

606 
	#DIR_ERR_CE_VALID
(
îr
Ë”º.
md_dú_îr‹_Êd_s
.
de_˚_vÆid
)

	)

607 
	#DIR_ERR_UCE_VALID
(
îr
Ë”º.
md_dú_îr‹_Êd_s
.
de_u˚_vÆid
)

	)

608 
	#DIR_ERR_AE_VALID
(
îr
Ë”º.
md_dú_îr‹_Êd_s
.
de_´_vÆid
)

	)

609 
	#DIR_ERR_BAD_SYN
(
îr
Ë”º.
md_dú_îr‹_Êd_s
.
de_bad_syn
)

	)

610 
	#DIR_ERR_CE_OVERRUN
(
îr
Ë”º.
md_dú_îr‹_Êd_s
.
de_˚_ovîrun
)

	)

611 
	#MEM_ERR_ADDRESS
(
îr
Ë”º.
md_mem_îr‹_Êd_s
.
me_addªss
)

	)

612 
	#MEM_ERR_CE_VALID
(
îr
Ë”º.
md_mem_îr‹_Êd_s
.
me_ªad_˚
 & 1)

	)

613 
	#MEM_ERR_CE_OVERRUN
(
îr
Ë”º.
md_mem_îr‹_Êd_s
.
me_ªad_˚
 >> 1)

	)

614 
	#MEM_ERR_BAD_SYN
(
îr
Ë”º.
md_mem_îr‹_Êd_s
.
me_bad_syn
)

	)

615 
	#MEM_ERR_UCE_VALID
(
îr
Ë”º.
md_mem_îr‹_Êd_s
.
me_ªad_u˚
 & 1)

	)

616 
	#MEM_ERR_UCE_OVERRUN
(
îr
Ë”º.
md_mem_îr‹_Êd_s
.
me_ªad_u˚
 >> 1)

	)

628 
	#MRC_ENABLE_SHFT
 63

	)

629 
	#MRC_ENABLE_MASK
 (
UINT64_CAST
 1 << 63)

	)

630 
	#MRC_ENABLE
 (
UINT64_CAST
 1 << 63)

	)

631 
	#MRC_COUNTER_SHFT
 12

	)

632 
	#MRC_COUNTER_MASK
 (
UINT64_CAST
 0xff‡<< 12)

	)

633 
	#MRC_CNT_THRESH_MASK
 0xfff

	)

634 
	#MRC_RESET_DEFAULTS
 (
UINT64_CAST
 0x800)

	)

638 
	#MDC_DIR_PREMIUM
 (
UINT64_CAST
 1 << 0)

	)

639 
	#MDC_IGNORE_ECC_SHFT
 1

	)

640 
	#MDC_IGNORE_ECC_MASK
 (
UINT64_CAST
 1 << 1)

	)

644 
	#MMC_RP_CONFIG_SHFT
 61

	)

645 
	#MMC_RP_CONFIG_MASK
 (
UINT64_CAST
 1 << 61)

	)

646 
	#MMC_RCD_CONFIG_SHFT
 60

	)

647 
	#MMC_RCD_CONFIG_MASK
 (
UINT64_CAST
 1 << 60)

	)

648 
	#MMC_MB_NEG_EDGE_SHFT
 56

	)

649 
	#MMC_MB_NEG_EDGE_MASK
 (
UINT64_CAST
 0x7 << 56)

	)

650 
	#MMC_SAMPLE_TIME_SHFT
 52

	)

651 
	#MMC_SAMPLE_TIME_MASK
 (
UINT64_CAST
 0x3 << 52)

	)

652 
	#MMC_DELAY_MUX_SEL_SHFT
 50

	)

653 
	#MMC_DELAY_MUX_SEL_MASK
 (
UINT64_CAST
 0x3 << 50)

	)

654 
	#MMC_PHASE_DELAY_SHFT
 49

	)

655 
	#MMC_PHASE_DELAY_MASK
 (
UINT64_CAST
 1 << 49)

	)

656 
	#MMC_DB_NEG_EDGE_SHFT
 48

	)

657 
	#MMC_DB_NEG_EDGE_MASK
 (
UINT64_CAST
 1 << 48)

	)

658 
	#MMC_CPU_PROT_IGNORE_SHFT
 47

	)

659 
	#MMC_CPU_PROT_IGNORE_MASK
 (
UINT64_CAST
 1 << 47)

	)

660 
	#MMC_IO_PROT_IGNORE_SHFT
 46

	)

661 
	#MMC_IO_PROT_IGNORE_MASK
 (
UINT64_CAST
 1 << 46)

	)

662 
	#MMC_IO_PROT_EN_SHFT
 45

	)

663 
	#MMC_IO_PROT_EN_MASK
 (
UINT64_CAST
 1 << 45)

	)

664 
	#MMC_CC_ENABLE_SHFT
 44

	)

665 
	#MMC_CC_ENABLE_MASK
 (
UINT64_CAST
 1 << 44)

	)

666 
	#MMC_DIMM0_SEL_SHFT
 32

	)

667 
	#MMC_DIMM0_SEL_MASK
 (
UINT64_CAST
 0x3 << 32)

	)

668 
	#MMC_DIMM_SIZE_SHFT
(
_dimm
Ë((_dimm << 3Ë+ 4)

	)

669 
	#MMC_DIMM_SIZE_MASK
(
_dimm
Ë(
UINT64_CAST
 0x‡<< 
	`MMC_DIMM_SIZE_SHFT
(_dimm))

	)

670 
	#MMC_DIMM_WIDTH_SHFT
(
_dimm
Ë((_dimm << 3Ë+ 3)

	)

671 
	#MMC_DIMM_WIDTH_MASK
(
_dimm
Ë(
UINT64_CAST
 0x1 << 
	`MMC_DIMM_WIDTH_SHFT
(_dimm))

	)

672 
	#MMC_DIMM_BANKS_SHFT
(
_dimm
Ë(_dimm << 3)

	)

673 
	#MMC_DIMM_BANKS_MASK
(
_dimm
Ë(
UINT64_CAST
 0x3 << 
	`MMC_DIMM_BANKS_SHFT
(_dimm))

	)

674 
	#MMC_BANK_ALL_MASK
 0xffffffffLL

	)

676 
	#MMC_DEFAULT_BITS
 (
UINT64_CAST
 0x7 << 
MMC_MB_NEG_EDGE_SHFT
)

	)

680 
	#MEC_IGNORE_ECC
 (
UINT64_CAST
 0x1 << 0)

	)

684 
	#MBD_BIST_WRITE
 (
UINT64_CAST
 1 << 7)

	)

685 
	#MBD_BIST_CYCLE
 (
UINT64_CAST
 1 << 6)

	)

686 
	#MBD_BIST_BYTE
 (
UINT64_CAST
 1 << 5)

	)

687 
	#MBD_BIST_NIBBLE
 (
UINT64_CAST
 1 << 4)

	)

688 
	#MBD_BIST_DATA_MASK
 0xf

	)

692 
	#MBC_DIMM_SHFT
 5

	)

693 
	#MBC_DIMM_MASK
 (
UINT64_CAST
 0x3 << 5)

	)

694 
	#MBC_BANK_SHFT
 4

	)

695 
	#MBC_BANK_MASK
 (
UINT64_CAST
 0x1 << 4)

	)

696 
	#MBC_BIST_RESET
 (
UINT64_CAST
 0x1 << 2)

	)

697 
	#MBC_BIST_STOP
 (
UINT64_CAST
 0x1 << 1)

	)

698 
	#MBC_BIST_START
 (
UINT64_CAST
 0x1 << 0)

	)

700 
	#MBC_GO
(
dimm
, 
b™k
) \

701 (((
dimm
Ë<< 
MBC_DIMM_SHFT
Ë& 
MBC_DIMM_MASK
 | \

702 ((
b™k
Ë<< 
MBC_BANK_SHFT
Ë& 
MBC_BANK_MASK
 | \

703 
MBC_BIST_START
)

	)

707 
	#MBS_BIST_DONE
 (
UINT64_CAST
 0X1 << 1)

	)

708 
	#MBS_BIST_PASSED
 (
UINT64_CAST
 0X1 << 0)

	)

712 
	#MJT_SYNERGY_ENABLE_SHFT
 40

	)

713 
	#MJT_SYNERGY_ENABLE_MASK
 (
UINT64_CAST
 0Xf‡<< 
MJT_SYNERGY_ENABLE_SHFT
)

	)

714 
	#MJT_SYNERGY_SETUP_SHFT
 32

	)

715 
	#MJT_SYNERGY_SETUP_MASK
 (
UINT64_CAST
 0Xf‡<< 
MJT_SYNERGY_SETUP_SHFT
)

	)

716 
	#MJT_UART_ENABLE_SHFT
 24

	)

717 
	#MJT_UART_ENABLE_MASK
 (
UINT64_CAST
 0Xf‡<< 
MJT_UART_ENABLE_SHFT
)

	)

718 
	#MJT_UART_SETUP_SHFT
 16

	)

719 
	#MJT_UART_SETUP_MASK
 (
UINT64_CAST
 0Xf‡<< 
MJT_UART_SETUP_SHFT
)

	)

720 
	#MJT_FPROM_ENABLE_SHFT
 8

	)

721 
	#MJT_FPROM_ENABLE_MASK
 (
UINT64_CAST
 0Xf‡<< 
MJT_FPROM_ENABLE_SHFT
)

	)

722 
	#MJT_FPROM_SETUP_SHFT
 0

	)

723 
	#MJT_FPROM_SETUP_MASK
 (
UINT64_CAST
 0Xf‡<< 
MJT_FPROM_SETUP_SHFT
)

	)

725 
	#MEM_ERROR_VALID_CE
 1

	)

730 
	#MFC_ADDR_SHFT
 6

	)

	@/usr/include/sys/SN/SN1/hubni.h

28 #i‚de‡
__SYS_SN_SN1_HUBNI_H__


29 
	#__SYS_SN_SN1_HUBNI_H__


	)

33 
	#NI_PORT_STATUS
 0x00680000

	)

37 
	#NI_PORT_RESET
 0x00680008

	)

44 
	#NI_RESET_ENABLE
 0x00680010

	)

48 
	#NI_DIAG_PARMS
 0x00680018

	)

55 
	#NI_CHANNEL_CONTROL
 0x00680020

	)

62 
	#NI_CHANNEL_TEST
 0x00680028

	)

66 
	#NI_PORT_PARMS
 0x00680030

	)

70 
	#NI_CHANNEL_AGE
 0x00680038

	)

77 
	#NI_PORT_ERRORS
 0x00680100

	)

81 
	#NI_PORT_HEADER_A
 0x00680108

	)

88 
	#NI_PORT_HEADER_B
 0x00680110

	)

95 
	#NI_PORT_SIDEBAND
 0x00680118

	)

99 
	#NI_PORT_ERROR_CLEAR
 0x00680120

	)

106 
	#NI_LOCAL_TABLE_0
 0x00681000

	)

113 
	#NI_LOCAL_TABLE_1
 0x00681008

	)

120 
	#NI_LOCAL_TABLE_2
 0x00681010

	)

127 
	#NI_LOCAL_TABLE_3
 0x00681018

	)

134 
	#NI_LOCAL_TABLE_4
 0x00681020

	)

141 
	#NI_LOCAL_TABLE_5
 0x00681028

	)

148 
	#NI_LOCAL_TABLE_6
 0x00681030

	)

155 
	#NI_LOCAL_TABLE_7
 0x00681038

	)

162 
	#NI_LOCAL_TABLE_8
 0x00681040

	)

169 
	#NI_LOCAL_TABLE_9
 0x00681048

	)

176 
	#NI_LOCAL_TABLE_10
 0x00681050

	)

183 
	#NI_LOCAL_TABLE_11
 0x00681058

	)

190 
	#NI_LOCAL_TABLE_12
 0x00681060

	)

197 
	#NI_LOCAL_TABLE_13
 0x00681068

	)

204 
	#NI_LOCAL_TABLE_14
 0x00681070

	)

211 
	#NI_LOCAL_TABLE_15
 0x00681078

	)

218 
	#NI_LOCAL_TABLE_16
 0x00681080

	)

225 
	#NI_LOCAL_TABLE_17
 0x00681088

	)

232 
	#NI_LOCAL_TABLE_18
 0x00681090

	)

239 
	#NI_LOCAL_TABLE_19
 0x00681098

	)

246 
	#NI_LOCAL_TABLE_20
 0x006810A0

	)

253 
	#NI_LOCAL_TABLE_21
 0x006810A8

	)

260 
	#NI_LOCAL_TABLE_22
 0x006810B0

	)

267 
	#NI_LOCAL_TABLE_23
 0x006810B8

	)

274 
	#NI_LOCAL_TABLE_24
 0x006810C0

	)

281 
	#NI_LOCAL_TABLE_25
 0x006810C8

	)

288 
	#NI_LOCAL_TABLE_26
 0x006810D0

	)

295 
	#NI_LOCAL_TABLE_27
 0x006810D8

	)

302 
	#NI_LOCAL_TABLE_28
 0x006810E0

	)

309 
	#NI_LOCAL_TABLE_29
 0x006810E8

	)

316 
	#NI_LOCAL_TABLE_30
 0x006810F0

	)

323 
	#NI_LOCAL_TABLE_31
 0x006810F8

	)

330 
	#NI_LOCAL_TABLE_32
 0x00681100

	)

337 
	#NI_LOCAL_TABLE_33
 0x00681108

	)

344 
	#NI_LOCAL_TABLE_34
 0x00681110

	)

351 
	#NI_LOCAL_TABLE_35
 0x00681118

	)

358 
	#NI_LOCAL_TABLE_36
 0x00681120

	)

365 
	#NI_LOCAL_TABLE_37
 0x00681128

	)

372 
	#NI_LOCAL_TABLE_38
 0x00681130

	)

379 
	#NI_LOCAL_TABLE_39
 0x00681138

	)

386 
	#NI_LOCAL_TABLE_40
 0x00681140

	)

393 
	#NI_LOCAL_TABLE_41
 0x00681148

	)

400 
	#NI_LOCAL_TABLE_42
 0x00681150

	)

407 
	#NI_LOCAL_TABLE_43
 0x00681158

	)

414 
	#NI_LOCAL_TABLE_44
 0x00681160

	)

421 
	#NI_LOCAL_TABLE_45
 0x00681168

	)

428 
	#NI_LOCAL_TABLE_46
 0x00681170

	)

435 
	#NI_LOCAL_TABLE_47
 0x00681178

	)

442 
	#NI_LOCAL_TABLE_48
 0x00681180

	)

449 
	#NI_LOCAL_TABLE_49
 0x00681188

	)

456 
	#NI_LOCAL_TABLE_50
 0x00681190

	)

463 
	#NI_LOCAL_TABLE_51
 0x00681198

	)

470 
	#NI_LOCAL_TABLE_52
 0x006811A0

	)

477 
	#NI_LOCAL_TABLE_53
 0x006811A8

	)

484 
	#NI_LOCAL_TABLE_54
 0x006811B0

	)

491 
	#NI_LOCAL_TABLE_55
 0x006811B8

	)

498 
	#NI_LOCAL_TABLE_56
 0x006811C0

	)

505 
	#NI_LOCAL_TABLE_57
 0x006811C8

	)

512 
	#NI_LOCAL_TABLE_58
 0x006811D0

	)

519 
	#NI_LOCAL_TABLE_59
 0x006811D8

	)

526 
	#NI_LOCAL_TABLE_60
 0x006811E0

	)

533 
	#NI_LOCAL_TABLE_61
 0x006811E8

	)

540 
	#NI_LOCAL_TABLE_62
 0x006811F0

	)

547 
	#NI_LOCAL_TABLE_63
 0x006811F8

	)

554 
	#NI_LOCAL_TABLE_64
 0x00681200

	)

561 
	#NI_LOCAL_TABLE_65
 0x00681208

	)

568 
	#NI_LOCAL_TABLE_66
 0x00681210

	)

575 
	#NI_LOCAL_TABLE_67
 0x00681218

	)

582 
	#NI_LOCAL_TABLE_68
 0x00681220

	)

589 
	#NI_LOCAL_TABLE_69
 0x00681228

	)

596 
	#NI_LOCAL_TABLE_70
 0x00681230

	)

603 
	#NI_LOCAL_TABLE_71
 0x00681238

	)

610 
	#NI_LOCAL_TABLE_72
 0x00681240

	)

617 
	#NI_LOCAL_TABLE_73
 0x00681248

	)

624 
	#NI_LOCAL_TABLE_74
 0x00681250

	)

631 
	#NI_LOCAL_TABLE_75
 0x00681258

	)

638 
	#NI_LOCAL_TABLE_76
 0x00681260

	)

645 
	#NI_LOCAL_TABLE_77
 0x00681268

	)

652 
	#NI_LOCAL_TABLE_78
 0x00681270

	)

659 
	#NI_LOCAL_TABLE_79
 0x00681278

	)

666 
	#NI_LOCAL_TABLE_80
 0x00681280

	)

673 
	#NI_LOCAL_TABLE_81
 0x00681288

	)

680 
	#NI_LOCAL_TABLE_82
 0x00681290

	)

687 
	#NI_LOCAL_TABLE_83
 0x00681298

	)

694 
	#NI_LOCAL_TABLE_84
 0x006812A0

	)

701 
	#NI_LOCAL_TABLE_85
 0x006812A8

	)

708 
	#NI_LOCAL_TABLE_86
 0x006812B0

	)

715 
	#NI_LOCAL_TABLE_87
 0x006812B8

	)

722 
	#NI_LOCAL_TABLE_88
 0x006812C0

	)

729 
	#NI_LOCAL_TABLE_89
 0x006812C8

	)

736 
	#NI_LOCAL_TABLE_90
 0x006812D0

	)

743 
	#NI_LOCAL_TABLE_91
 0x006812D8

	)

750 
	#NI_LOCAL_TABLE_92
 0x006812E0

	)

757 
	#NI_LOCAL_TABLE_93
 0x006812E8

	)

764 
	#NI_LOCAL_TABLE_94
 0x006812F0

	)

771 
	#NI_LOCAL_TABLE_95
 0x006812F8

	)

778 
	#NI_LOCAL_TABLE_96
 0x00681300

	)

785 
	#NI_LOCAL_TABLE_97
 0x00681308

	)

792 
	#NI_LOCAL_TABLE_98
 0x00681310

	)

799 
	#NI_LOCAL_TABLE_99
 0x00681318

	)

806 
	#NI_LOCAL_TABLE_100
 0x00681320

	)

813 
	#NI_LOCAL_TABLE_101
 0x00681328

	)

820 
	#NI_LOCAL_TABLE_102
 0x00681330

	)

827 
	#NI_LOCAL_TABLE_103
 0x00681338

	)

834 
	#NI_LOCAL_TABLE_104
 0x00681340

	)

841 
	#NI_LOCAL_TABLE_105
 0x00681348

	)

848 
	#NI_LOCAL_TABLE_106
 0x00681350

	)

855 
	#NI_LOCAL_TABLE_107
 0x00681358

	)

862 
	#NI_LOCAL_TABLE_108
 0x00681360

	)

869 
	#NI_LOCAL_TABLE_109
 0x00681368

	)

876 
	#NI_LOCAL_TABLE_110
 0x00681370

	)

883 
	#NI_LOCAL_TABLE_111
 0x00681378

	)

890 
	#NI_LOCAL_TABLE_112
 0x00681380

	)

897 
	#NI_LOCAL_TABLE_113
 0x00681388

	)

904 
	#NI_LOCAL_TABLE_114
 0x00681390

	)

911 
	#NI_LOCAL_TABLE_115
 0x00681398

	)

918 
	#NI_LOCAL_TABLE_116
 0x006813A0

	)

925 
	#NI_LOCAL_TABLE_117
 0x006813A8

	)

932 
	#NI_LOCAL_TABLE_118
 0x006813B0

	)

939 
	#NI_LOCAL_TABLE_119
 0x006813B8

	)

946 
	#NI_LOCAL_TABLE_120
 0x006813C0

	)

953 
	#NI_LOCAL_TABLE_121
 0x006813C8

	)

960 
	#NI_LOCAL_TABLE_122
 0x006813D0

	)

967 
	#NI_LOCAL_TABLE_123
 0x006813D8

	)

974 
	#NI_LOCAL_TABLE_124
 0x006813E0

	)

981 
	#NI_LOCAL_TABLE_125
 0x006813E8

	)

988 
	#NI_LOCAL_TABLE_126
 0x006813F0

	)

995 
	#NI_LOCAL_TABLE_127
 0x006813F8

	)

1002 
	#NI_GLOBAL_TABLE
 0x00682000

	)

1011 #ifde‡
_LANGUAGE_C


1022 
	uni_p‹t_°©us_u
 {

1023 
bdrkªg_t
 
	mni_p‹t_°©us_ªgvÆ
;

1025 
bdrkªg_t
 
	mps_rsvd
 : 61;

1026 
bdrkªg_t
 
	mps_ªmŸe_powî
 : 1;

1027 
bdrkªg_t
 
	mps_p‹t_°©us
 : 2;

1028 } 
	mni_p‹t_°©us_Êd_s
;

1029 } 
	tni_p‹t_°©us_u_t
;

1043 
	uni_p‹t_ª£t_u
 {

1044 
bdrkªg_t
 
	mni_p‹t_ª£t_ªgvÆ
;

1046 
bdrkªg_t
 
	m¥_rsvd
 : 61;

1047 
bdrkªg_t
 
	m¥_loˇl_ª£t
 : 1;

1048 
bdrkªg_t
 
	m¥_p‹t_ª£t
 : 1;

1049 
bdrkªg_t
 
	m¥_lök_ª£t_out
 : 1;

1050 } 
	mni_p‹t_ª£t_Êd_s
;

1051 } 
	tni_p‹t_ª£t_u_t
;

1065 
	uni_ª£t_íabÀ_u
 {

1066 
bdrkªg_t
 
	mni_ª£t_íabÀ_ªgvÆ
;

1068 
bdrkªg_t
 
	mª_rsvd
 : 63;

1069 
bdrkªg_t
 
	mª_ª£t_ok
 : 1;

1070 } 
	mni_ª£t_íabÀ_Êd_s
;

1071 } 
	tni_ª£t_íabÀ_u_t
;

1085 
	uni_düg_∑rms_u
 {

1086 
bdrkªg_t
 
	mni_düg_∑rms_ªgvÆ
;

1088 
bdrkªg_t
 
	mdp_rsvd
 : 61;

1089 
bdrkªg_t
 
	mdp_£nd_îr_off
 : 1;

1090 
bdrkªg_t
 
	mdp_p‹t_dißbÀ
 : 1;

1091 
bdrkªg_t
 
	mdp_£nd_d©a_îr‹
 : 1;

1092 } 
	mni_düg_∑rms_Êd_s
;

1093 } 
	tni_düg_∑rms_u_t
;

1108 
	uni_ch™√l_c⁄åﬁ_u
 {

1109 
bdrkªg_t
 
	mni_ch™√l_c⁄åﬁ_ªgvÆ
;

1111 
bdrkªg_t
 
	mcc_rsvd
 : 55;

1112 
bdrkªg_t
 
	mcc_£nd_vch_£l
 : 1;

1113 
bdrkªg_t
 
	mcc_vch_ve˘‹_ª∂y
 : 1;

1114 
bdrkªg_t
 
	mcc_vch_nöe_ª∂y
 : 1;

1115 
bdrkªg_t
 
	mcc_vch_two_ª∂y
 : 1;

1116 
bdrkªg_t
 
	mcc_vch_⁄e_ª∂y
 : 1;

1117 
bdrkªg_t
 
	mcc_vch_ve˘‹_ªque°
 : 1;

1118 
bdrkªg_t
 
	mcc_vch_nöe_ªque°
 : 1;

1119 
bdrkªg_t
 
	mcc_vch_two_ªque°
 : 1;

1120 
bdrkªg_t
 
	mcc_vch_⁄e_ªque°
 : 1;

1121 } 
	mni_ch™√l_c⁄åﬁ_Êd_s
;

1122 } 
	tni_ch™√l_c⁄åﬁ_u_t
;

1136 
	uni_ch™√l_ã°_u
 {

1137 
bdrkªg_t
 
	mni_ch™√l_ã°_ªgvÆ
;

1139 
bdrkªg_t
 
	m˘_rsvd
 : 9;

1140 
bdrkªg_t
 
	m˘_ã°îrˇ±uª
 : 1;

1141 
bdrkªg_t
 
	m˘_ã°˛ór
 : 1;

1142 
bdrkªg_t
 
	m˘_ã°Êô
 : 3;

1143 
bdrkªg_t
 
	m˘_ã°cbîr
 : 1;

1144 
bdrkªg_t
 
	m˘_ã°vÆid
 : 1;

1145 
bdrkªg_t
 
	m˘_ã°d©a
 : 20;

1146 
bdrkªg_t
 
	m˘_ã°mask
 : 8;

1147 
bdrkªg_t
 
	m˘_ã°£ed
 : 20;

1148 } 
	mni_ch™√l_ã°_Êd_s
;

1149 } 
	tni_ch™√l_ã°_u_t
;

1164 
	uni_p‹t_∑rms_u
 {

1165 
bdrkªg_t
 
	mni_p‹t_∑rms_ªgvÆ
;

1167 
bdrkªg_t
 
	mµ_rsvd
 : 29;

1168 
bdrkªg_t
 
	mµ_vch_îr_íabÀ
 : 4;

1169 
bdrkªg_t
 
	mµ_squash_îr_íabÀ
 : 1;

1170 
bdrkªg_t
 
	mµ_fú°_îr_íabÀ
 : 1;

1171 
bdrkªg_t
 
	mµ_rsvd_1
 : 1;

1172 
bdrkªg_t
 
	mµ_d_avaû_£l
 : 2;

1173 
bdrkªg_t
 
	mµ_max_ªåy
 : 10;

1174 
bdrkªg_t
 
	mµ_nuŒ_timeout
 : 6;

1175 
bdrkªg_t
 
	mµ_max_bur°
 : 10;

1176 } 
	mni_p‹t_∑rms_Êd_s
;

1177 } 
	tni_p‹t_∑rms_u_t
;

1194 
	uni_ch™√l_age_u
 {

1195 
bdrkªg_t
 
	mni_ch™√l_age_ªgvÆ
;

1197 
bdrkªg_t
 
	mˇ_rsvd
 : 48;

1198 
bdrkªg_t
 
	mˇ_ª∂y_öje˘_age
 : 8;

1199 
bdrkªg_t
 
	mˇ_ªque°_öje˘_age
 : 8;

1200 } 
	mni_ch™√l_age_Êd_s
;

1201 } 
	tni_ch™√l_age_u_t
;

1218 
	uni_p‹t_îr‹s_u
 {

1219 
bdrkªg_t
 
	mni_p‹t_îr‹s_ªgvÆ
;

1221 
bdrkªg_t
 
	m≥_rsvd
 : 11;

1222 
bdrkªg_t
 
	m≥_lök_ª£t_ö
 : 1;

1223 
bdrkªg_t
 
	m≥_öã∫Æ_l⁄g
 : 4;

1224 
bdrkªg_t
 
	m≥_öã∫Æ_sh‹t
 : 4;

1225 
bdrkªg_t
 
	m≥_exã∫Æ_bad_hódî
 : 4;

1226 
bdrkªg_t
 
	m≥_exã∫Æ_l⁄g
 : 4;

1227 
bdrkªg_t
 
	m≥_exã∫Æ_sh‹t
 : 4;

1228 
bdrkªg_t
 
	m≥_fifo_ovîÊow
 : 4;

1229 
bdrkªg_t
 
	m≥_èû_timeout
 : 4;

1230 
bdrkªg_t
 
	m≥_ªåy_cou¡
 : 8;

1231 
bdrkªg_t
 
	m≥_cb_îr‹_cou¡
 : 8;

1232 
bdrkªg_t
 
	m≥_¢_îr‹_cou¡
 : 8;

1233 } 
	mni_p‹t_îr‹s_Êd_s
;

1234 } 
	tni_p‹t_îr‹s_u_t
;

1250 
	uni_p‹t_sideb™d_u
 {

1251 
bdrkªg_t
 
	mni_p‹t_sideb™d_ªgvÆ
;

1253 
bdrkªg_t
 
	mps_rsvd
 : 44;

1254 
bdrkªg_t
 
	mps_vch_a˘ive
 : 4;

1255 
bdrkªg_t
 
	mps_£nd_îr‹
 : 1;

1256 
bdrkªg_t
 
	mps_cb_°©us
 : 1;

1257 
bdrkªg_t
 
	mps_¢_°©us
 : 1;

1258 
bdrkªg_t
 
	mps_squash
 : 1;

1259 
bdrkªg_t
 
	mps_bad_mesßge
 : 1;

1260 
bdrkªg_t
 
	mps_rcv_îr‹
 : 1;

1261 
bdrkªg_t
 
	mps_bad_¥ex£l
 : 1;

1262 
bdrkªg_t
 
	mps_bad_de°
 : 1;

1263 
bdrkªg_t
 
	mps_sideb™d
 : 8;

1264 } 
	mni_p‹t_sideb™d_Êd_s
;

1265 } 
	tni_p‹t_sideb™d_u_t
;

1282 
	uni_p‹t_îr‹_˛ór_u
 {

1283 
bdrkªg_t
 
	mni_p‹t_îr‹_˛ór_ªgvÆ
;

1285 
bdrkªg_t
 
	m≥c_rsvd
 : 11;

1286 
bdrkªg_t
 
	m≥c_lök_ª£t_ö
 : 1;

1287 
bdrkªg_t
 
	m≥c_öã∫Æ_l⁄g
 : 4;

1288 
bdrkªg_t
 
	m≥c_öã∫Æ_sh‹t
 : 4;

1289 
bdrkªg_t
 
	m≥c_exã∫Æ_bad_hódî
 : 4;

1290 
bdrkªg_t
 
	m≥c_exã∫Æ_l⁄g
 : 4;

1291 
bdrkªg_t
 
	m≥c_exã∫Æ_sh‹t
 : 4;

1292 
bdrkªg_t
 
	m≥c_fifo_ovîÊow
 : 4;

1293 
bdrkªg_t
 
	m≥c_èû_timeout
 : 4;

1294 
bdrkªg_t
 
	m≥c_ªåy_cou¡
 : 8;

1295 
bdrkªg_t
 
	m≥c_cb_îr‹_cou¡
 : 8;

1296 
bdrkªg_t
 
	m≥c_¢_îr‹_cou¡
 : 8;

1297 } 
	mni_p‹t_îr‹_˛ór_Êd_s
;

1298 } 
	tni_p‹t_îr‹_˛ór_u_t
;

1313 
	uni_loˇl_èbÀ_0_u
 {

1314 
bdrkªg_t
 
	mni_loˇl_èbÀ_0_ªgvÆ
;

1316 
bdrkªg_t
 
	m…0_rsvd
 : 59;

1317 
bdrkªg_t
 
	m…0_√xt_vch_lsb
 : 1;

1318 
bdrkªg_t
 
	m…0_√xt_exô_p‹t
 : 4;

1319 } 
	mni_loˇl_èbÀ_0_Êd_s
;

1320 } 
	tni_loˇl_èbÀ_0_u_t
;

1335 
	uni_loˇl_èbÀ_127_u
 {

1336 
bdrkªg_t
 
	mni_loˇl_èbÀ_127_ªgvÆ
;

1338 
bdrkªg_t
 
	m…1_rsvd
 : 59;

1339 
bdrkªg_t
 
	m…1_√xt_vch_lsb
 : 1;

1340 
bdrkªg_t
 
	m…1_√xt_exô_p‹t
 : 4;

1341 } 
	mni_loˇl_èbÀ_127_Êd_s
;

1342 } 
	tni_loˇl_èbÀ_127_u_t
;

1357 
	uni_globÆ_èbÀ_u
 {

1358 
bdrkªg_t
 
	mni_globÆ_èbÀ_ªgvÆ
;

1360 
bdrkªg_t
 
	mgt_rsvd
 : 59;

1361 
bdrkªg_t
 
	mgt_√xt_vch_lsb
 : 1;

1362 
bdrkªg_t
 
	mgt_√xt_exô_p‹t
 : 4;

1363 } 
	mni_globÆ_èbÀ_Êd_s
;

1364 } 
	tni_globÆ_èbÀ_u_t
;

	@/usr/include/sys/SN/SN1/hubni_next.h

13 #i‚de‡
__SYS_SN_SN1_HUBNI_NEXT_H__


14 
	#__SYS_SN_SN1_HUBNI_NEXT_H__


	)

16 
	#NI_LOCAL_ENTRIES
 128

	)

17 
	#NI_META_ENTRIES
 1

	)

19 
	#NI_LOCAL_TABLE
(
_x
Ë(
NI_LOCAL_TABLE_0
 + (8 * (_x)))

	)

20 
	#NI_META_TABLE
(
_x
Ë(
NI_GLOBAL_TABLE
 + (8 * (_x)))

	)

28 
	#NPS_LINKUP_SHFT
 1

	)

29 
	#NPS_LINKUP_MASK
 (
UINT64_CAST
 0x1 << 1)

	)

32 
	#NPR_LOCALRESET
 (
UINT64_CAST
 1 << 2Ë

	)

33 
	#NPR_PORTRESET
 (
UINT64_CAST
 1 << 1Ë

	)

34 
	#NPR_LINKRESET
 (
UINT64_CAST
 1 << 0Ë

	)

37 
	#NDP_SENDERROR
 (
UINT64_CAST
 1 << 0Ë

	)

38 
	#NDP_PORTDISABLE
 (
UINT64_CAST
 1 << 1Ë

	)

39 
	#NDP_SENDERROFF
 (
UINT64_CAST
 1 << 2Ë

	)

44 
	#NPE_LINKRESET
 (
UINT64_CAST
 1 << 52)

	)

45 
	#NPE_INTLONG_SHFT
 48

	)

46 
	#NPE_INTLONG_MASK
 (
UINT64_CAST
 0x‡<< 
NPE_INTLONG_SHFT
)

	)

47 
	#NPE_INTSHORT_SHFT
 44

	)

48 
	#NPE_INTSHORT_MASK
 (
UINT64_CAST
 0x‡<< 
NPE_INTSHORT_SHFT
)

	)

49 
	#NPE_EXTBADHEADER_SHFT
 40

	)

50 
	#NPE_EXTBADHEADER_MASK
 (
UINT64_CAST
 0x‡<< 
NPE_EXTBADHEADER_SHFT
)

	)

51 
	#NPE_EXTLONG_SHFT
 36

	)

52 
	#NPE_EXTLONG_MASK
 (
UINT64_CAST
 0x‡<< 
NPE_EXTLONG_SHFT
)

	)

53 
	#NPE_EXTSHORT_SHFT
 32

	)

54 
	#NPE_EXTSHORT_MASK
 (
UINT64_CAST
 0x‡<< 
NPE_EXTSHORT_SHFT
)

	)

55 
	#NPE_FIFOOVFLOW_SHFT
 28

	)

56 
	#NPE_FIFOOVFLOW_MASK
 (
UINT64_CAST
 0x‡<< 
NPE_FIFOOVFLOW_SHFT
)

	)

57 
	#NPE_TAILTO_SHFT
 24

	)

58 
	#NPE_TAILTO_MASK
 (
UINT64_CAST
 0x‡<< 
NPE_TAILTO_SHFT
)

	)

59 
	#NPE_RETRYCOUNT_SHFT
 16

	)

60 
	#NPE_RETRYCOUNT_MASK
 (
UINT64_CAST
 0xf‡<< 
NPE_RETRYCOUNT_SHFT
)

	)

61 
	#NPE_CBERRCOUNT_SHFT
 8

	)

62 
	#NPE_CBERRCOUNT_MASK
 (
UINT64_CAST
 0xf‡<< 
NPE_CBERRCOUNT_SHFT
)

	)

63 
	#NPE_SNERRCOUNT_SHFT
 0

	)

64 
	#NPE_SNERRCOUNT_MASK
 (
UINT64_CAST
 0xf‡<< 
NPE_SNERRCOUNT_SHFT
)

	)

66 
	#NPE_COUNT_MAX
 0xff

	)

68 
	#NPE_FATAL_ERRORS
 (
NPE_LINKRESET
 | 
NPE_INTLONG_MASK
 |\

69 
NPE_INTSHORT_MASK
 | 
NPE_EXTBADHEADER_MASK
 |\

70 
NPE_EXTLONG_MASK
 | 
NPE_EXTSHORT_MASK
 |\

71 
NPE_FIFOOVFLOW_MASK
 | 
NPE_TAILTO_MASK
)

	)

73 #ifde‡
_LANGUAGE_C


76 
	uni_p‹t_hódî_a_u
 {

77 
bdrkªg_t
 
	mni_p‹t_hódî_a_ªgvÆ
;

79 
bdrkªg_t
 
	mpha_ª£rved
 : 2;

80 
bdrkªg_t
 
	mpha_addªss_b
 : 27;

81 
bdrkªg_t
 
	mpha_¥ex£l
 : 3;

82 
bdrkªg_t
 
	mpha_comm™d
 : 8;

83 
bdrkªg_t
 
	mpha_ª£rved_1
 : 3;

84 
bdrkªg_t
 
	mpha_de°ö©i⁄
 : 8;

85 
bdrkªg_t
 
	mpha_dúe˘i⁄
 : 4;

86 
bdrkªg_t
 
	mpha_age
 : 8;

87 
bdrkªg_t
 
	mpha_v
 : 1;

88 } 
	mni_p‹t_hódî_a_Êd_s
;

89 } 
	tni_p‹t_hódî_a_u_t
;

91 
	uni_p‹t_hódî_b_u
 {

92 
bdrkªg_t
 
	mni_p‹t_hódî_b_ªgvÆ
;

94 
bdrkªg_t
 
	mphb_ª£rved
 : 18;

95 
bdrkªg_t
 
	mphb_addªss_c
 : 8;

96 
bdrkªg_t
 
	mphb_addªss_a
 : 3;

97 
bdrkªg_t
 
	mphb_ª£rved_1
 : 8;

98 
bdrkªg_t
 
	mphb_sour˚
 : 11;

99 
bdrkªg_t
 
	mphb_ª£rved_2
 : 5;

100 
bdrkªg_t
 
	mphb_suµÀmíèl
 : 11;

101 } 
	mni_p‹t_hódî_b_Êd_s
;

102 } 
	tni_p‹t_hódî_b_u_t
;

107 
	#NRE_RESETOK
 (
UINT64_CAST
 1Ë

	)

111 
	#NI_LLP_RETRY_MAX
 0xff

	)

112 
	#NI_LLP_CB_MAX
 0xff

	)

113 
	#NI_LLP_SN_MAX
 0xff

	)

117 
	#NPP_VCH_ERR_EN_SHFT
 31

	)

118 
	#NPP_VCH_ERR_EN_MASK
 (0x‡<< 
NPP_VCH_ERR_EN_SHFT
)

	)

119 
	#NPP_SQUASH_ERR_EN_SHFT
 30

	)

120 
	#NPP_SQUASH_ERR_EN_MASK
 (0x1 << 
NPP_SQUASH_ERR_EN_SHFT
)

	)

121 
	#NPP_FIRST_ERR_EN_SHFT
 29

	)

122 
	#NPP_FIRST_ERR_EN_MASK
 (0x1 << 
NPP_FIRST_ERR_EN_SHFT
)

	)

123 
	#NPP_D_AVAIL_SEL_SHFT
 26

	)

124 
	#NPP_D_AVAIL_SEL_MASK
 (0x3 << 
NPP_D_AVAIL_SEL_SHFT
)

	)

125 
	#NPP_MAX_RETRY_SHFT
 16

	)

126 
	#NPP_MAX_RETRY_MASK
 (0x3f‡<< 
NPP_MAX_RETRY_SHFT
)

	)

127 
	#NPP_NULL_TIMEOUT_SHFT
 10

	)

128 
	#NPP_NULL_TIMEOUT_MASK
 (0x3‡<< 
NPP_NULL_TIMEOUT_SHFT
)

	)

129 
	#NPP_MAX_BURST_SHFT
 0

	)

130 
	#NPP_MAX_BURST_MASK
 (0x3f‡<< 
NPP_MAX_BURST_SHFT
)

	)

132 
	#NPP_RESET_DEFAULTS
 (0x‡<< 
NPP_VCH_ERR_EN_SHFT
 | \

133 0x1 << 
NPP_FIRST_ERR_EN_SHFT
 | \

134 0x3f‡<< 
NPP_MAX_RETRY_SHFT
 | \

135 0x6 << 
NPP_NULL_TIMEOUT_SHFT
 | \

136 0x3f0 << 
NPP_MAX_BURST_SHFT
)

	)

144 
	#NPP_MAX_BURST_OVERRIDE_VALUE
 0x190

	)

145 
	#NPP_OVER_RESET_DEFAULTS
 (0x‡<< 
NPP_VCH_ERR_EN_SHFT
 | \

146 0x1 << 
NPP_FIRST_ERR_EN_SHFT
 | \

147 0x3f‡<< 
NPP_MAX_RETRY_SHFT
 | \

148 0x6 << 
NPP_NULL_TIMEOUT_SHFT
 | \

149 
NPP_MAX_BURST_OVERRIDE_VALUE
 \

150 << 
NPP_MAX_BURST_SHFT
)

	)

	@/usr/include/sys/SN/SN1/hubpi.h

28 #i‚de‡
__SYS_SN_SN1_HUBPI_H__


29 
	#__SYS_SN_SN1_HUBPI_H__


	)

33 
	#PI_CPU_PROTECT
 0x00000000

	)

37 
	#PI_PROT_OVRRD
 0x00000008

	)

45 
	#PI_IO_PROTECT
 0x00000010

	)

53 
	#PI_REGION_PRESENT
 0x00000018

	)

57 
	#PI_CPU_NUM
 0x00000020

	)

61 
	#PI_CALIAS_SIZE
 0x00000028

	)

65 
	#PI_MAX_CRB_TIMEOUT
 0x00000030

	)

72 
	#PI_CRB_SFACTOR
 0x00000038

	)

79 
	#PI_CPU_PRESENT_A
 0x00000040

	)

86 
	#PI_CPU_PRESENT_B
 0x00000048

	)

93 
	#PI_CPU_ENABLE_A
 0x00000050

	)

100 
	#PI_CPU_ENABLE_B
 0x00000058

	)

107 
	#PI_REPLY_LEVEL
 0x00010060

	)

114 
	#PI_GFX_CREDIT_MODE
 0x00020068

	)

121 
	#PI_NMI_A
 0x00000070

	)

128 
	#PI_NMI_B
 0x00000078

	)

135 
	#PI_INT_PEND_MOD
 0x00000090

	)

142 
	#PI_INT_PEND0
 0x00000098

	)

146 
	#PI_INT_PEND1
 0x000000A0

	)

150 
	#PI_INT_MASK0_A
 0x000000A8

	)

157 
	#PI_INT_MASK1_A
 0x000000B0

	)

164 
	#PI_INT_MASK0_B
 0x000000B8

	)

171 
	#PI_INT_MASK1_B
 0x000000C0

	)

178 
	#PI_CC_PEND_SET_A
 0x000000C8

	)

185 
	#PI_CC_PEND_SET_B
 0x000000D0

	)

192 
	#PI_CC_PEND_CLR_A
 0x000000D8

	)

200 
	#PI_CC_PEND_CLR_B
 0x000000E0

	)

208 
	#PI_CC_MASK
 0x000000E8

	)

215 
	#PI_INT_PEND1_REMAP
 0x000000F0

	)

222 
	#PI_RT_COUNTER
 0x00030100

	)

226 
	#PI_RT_COMPARE_A
 0x00000108

	)

230 
	#PI_RT_COMPARE_B
 0x00000110

	)

234 
	#PI_PROFILE_COMPARE
 0x00000118

	)

238 
	#PI_RT_INT_PEND_A
 0x00000120

	)

245 
	#PI_RT_INT_PEND_B
 0x00000128

	)

252 
	#PI_PROF_INT_PEND_A
 0x00000130

	)

259 
	#PI_PROF_INT_PEND_B
 0x00000138

	)

266 
	#PI_RT_INT_EN_A
 0x00000140

	)

270 
	#PI_RT_INT_EN_B
 0x00000148

	)

274 
	#PI_PROF_INT_EN_A
 0x00000150

	)

281 
	#PI_PROF_INT_EN_B
 0x00000158

	)

288 
	#PI_DEBUG_SEL
 0x00000160

	)

292 
	#PI_INT_PEND_MOD_ALIAS
 0x00000180

	)

299 
	#PI_PERF_CNTL_A
 0x00040200

	)

306 
	#PI_PERF_CNTR0_A
 0x00040208

	)

313 
	#PI_PERF_CNTR1_A
 0x00040210

	)

320 
	#PI_PERF_CNTL_B
 0x00050200

	)

327 
	#PI_PERF_CNTR0_B
 0x00050208

	)

334 
	#PI_PERF_CNTR1_B
 0x00050210

	)

341 
	#PI_GFX_PAGE_A
 0x00000300

	)

345 
	#PI_GFX_CREDIT_CNTR_A
 0x00000308

	)

352 
	#PI_GFX_BIAS_A
 0x00000310

	)

356 
	#PI_GFX_INT_CNTR_A
 0x00000318

	)

363 
	#PI_GFX_INT_CMP_A
 0x00000320

	)

370 
	#PI_GFX_PAGE_B
 0x00000328

	)

374 
	#PI_GFX_CREDIT_CNTR_B
 0x00000330

	)

381 
	#PI_GFX_BIAS_B
 0x00000338

	)

385 
	#PI_GFX_INT_CNTR_B
 0x00000340

	)

392 
	#PI_GFX_INT_CMP_B
 0x00000348

	)

399 
	#PI_ERR_INT_PEND_WR
 0x000003F8

	)

406 
	#PI_ERR_INT_PEND
 0x00000400

	)

413 
	#PI_ERR_INT_MASK_A
 0x00000408

	)

420 
	#PI_ERR_INT_MASK_B
 0x00000410

	)

427 
	#PI_ERR_STACK_ADDR_A
 0x00000418

	)

434 
	#PI_ERR_STACK_ADDR_B
 0x00000420

	)

441 
	#PI_ERR_STACK_SIZE
 0x00000428

	)

445 
	#PI_ERR_STATUS0_A
 0x00000430

	)

449 
	#PI_ERR_STATUS0_A_CLR
 0x00000438

	)

453 
	#PI_ERR_STATUS1_A
 0x00000440

	)

457 
	#PI_ERR_STATUS1_A_CLR
 0x00000448

	)

461 
	#PI_ERR_STATUS0_B
 0x00000450

	)

465 
	#PI_ERR_STATUS0_B_CLR
 0x00000458

	)

469 
	#PI_ERR_STATUS1_B
 0x00000460

	)

473 
	#PI_ERR_STATUS1_B_CLR
 0x00000468

	)

477 
	#PI_SPOOL_CMP_A
 0x00000470

	)

481 
	#PI_SPOOL_CMP_B
 0x00000478

	)

485 
	#PI_CRB_TIMEOUT_A
 0x00000480

	)

493 
	#PI_CRB_TIMEOUT_B
 0x00000488

	)

501 
	#PI_SYSAD_ERRCHK_EN
 0x00000490

	)

509 
	#PI_FORCE_BAD_CHECK_BIT_A
 0x00000498

	)

516 
	#PI_FORCE_BAD_CHECK_BIT_B
 0x000004A0

	)

523 
	#PI_NACK_CNT_A
 0x000004A8

	)

530 
	#PI_NACK_CNT_B
 0x000004B0

	)

537 
	#PI_NACK_CMP
 0x000004B8

	)

541 
	#PI_SPOOL_MASK
 0x000004C0

	)

545 
	#PI_SPURIOUS_HDR_0
 0x000004C8

	)

549 
	#PI_SPURIOUS_HDR_1
 0x000004D0

	)

553 
	#PI_ERR_INJECT
 0x000004D8

	)

562 #ifde‡
_LANGUAGE_C


580 
	upi_˝u_¥Ÿe˘_u
 {

581 
bdrkªg_t
 
	mpi_˝u_¥Ÿe˘_ªgvÆ
;

583 
bdrkªg_t
 
	m˝_˝u_¥Ÿe˘
 : 64;

584 } 
	mpi_˝u_¥Ÿe˘_Êd_s
;

585 } 
	tpi_˝u_¥Ÿe˘_u_t
;

601 
	upi_¥Ÿ_ovºd_u
 {

602 
bdrkªg_t
 
	mpi_¥Ÿ_ovºd_ªgvÆ
;

604 
bdrkªg_t
 
	mpo_¥Ÿ_ovºd
 : 64;

605 } 
	mpi_¥Ÿ_ovºd_Êd_s
;

606 } 
	tpi_¥Ÿ_ovºd_u_t
;

627 
	upi_io_¥Ÿe˘_u
 {

628 
bdrkªg_t
 
	mpi_io_¥Ÿe˘_ªgvÆ
;

630 
bdrkªg_t
 
	mù_io_¥Ÿe˘
 : 64;

631 } 
	mpi_io_¥Ÿe˘_Êd_s
;

632 } 
	tpi_io_¥Ÿe˘_u_t
;

657 
	upi_ªgi⁄_¥e£¡_u
 {

658 
bdrkªg_t
 
	mpi_ªgi⁄_¥e£¡_ªgvÆ
;

660 
bdrkªg_t
 
	mΩ_ªgi⁄_¥e£¡
 : 64;

661 } 
	mpi_ªgi⁄_¥e£¡_Êd_s
;

662 } 
	tpi_ªgi⁄_¥e£¡_u_t
;

678 
	upi_˝u_num_u
 {

679 
bdrkªg_t
 
	mpi_˝u_num_ªgvÆ
;

681 
bdrkªg_t
 
	m˙_rsvd
 : 62;

682 
bdrkªg_t
 
	m˙_pi_id
 : 1;

683 
bdrkªg_t
 
	m˙_˝u_num
 : 1;

684 } 
	mpi_˝u_num_Êd_s
;

685 } 
	tpi_˝u_num_u_t
;

703 
	upi_ˇlüs_size_u
 {

704 
bdrkªg_t
 
	mpi_ˇlüs_size_ªgvÆ
;

706 
bdrkªg_t
 
	mcs_rsvd
 : 60;

707 
bdrkªg_t
 
	mcs_ˇlüs_size
 : 4;

708 } 
	mpi_ˇlüs_size_Êd_s
;

709 } 
	tpi_ˇlüs_size_u_t
;

727 
	upi_max_¸b_timeout_u
 {

728 
bdrkªg_t
 
	mpi_max_¸b_timeout_ªgvÆ
;

730 
bdrkªg_t
 
	mm˘_rsvd
 : 56;

731 
bdrkªg_t
 
	mm˘_max_timeout
 : 8;

732 } 
	mpi_max_¸b_timeout_Êd_s
;

733 } 
	tpi_max_¸b_timeout_u_t
;

750 
	upi_¸b_sÁ˘‹_u
 {

751 
bdrkªg_t
 
	mpi_¸b_sÁ˘‹_ªgvÆ
;

753 
bdrkªg_t
 
	mcs_rsvd
 : 40;

754 
bdrkªg_t
 
	mcs_sÁ˘‹
 : 24;

755 } 
	mpi_¸b_sÁ˘‹_Êd_s
;

756 } 
	tpi_¸b_sÁ˘‹_u_t
;

772 
	upi_˝u_¥e£¡_a_u
 {

773 
bdrkªg_t
 
	mpi_˝u_¥e£¡_a_ªgvÆ
;

775 
bdrkªg_t
 
	m˝a_rsvd
 : 63;

776 
bdrkªg_t
 
	m˝a_˝u_¥e£¡
 : 1;

777 } 
	mpi_˝u_¥e£¡_a_Êd_s
;

778 } 
	tpi_˝u_¥e£¡_a_u_t
;

794 
	upi_˝u_¥e£¡_b_u
 {

795 
bdrkªg_t
 
	mpi_˝u_¥e£¡_b_ªgvÆ
;

797 
bdrkªg_t
 
	m˝b_rsvd
 : 63;

798 
bdrkªg_t
 
	m˝b_˝u_¥e£¡
 : 1;

799 } 
	mpi_˝u_¥e£¡_b_Êd_s
;

800 } 
	tpi_˝u_¥e£¡_b_u_t
;

819 
	upi_˝u_íabÀ_a_u
 {

820 
bdrkªg_t
 
	mpi_˝u_íabÀ_a_ªgvÆ
;

822 
bdrkªg_t
 
	m˚a_rsvd
 : 63;

823 
bdrkªg_t
 
	m˚a_˝u_íabÀ
 : 1;

824 } 
	mpi_˝u_íabÀ_a_Êd_s
;

825 } 
	tpi_˝u_íabÀ_a_u_t
;

844 
	upi_˝u_íabÀ_b_u
 {

845 
bdrkªg_t
 
	mpi_˝u_íabÀ_b_ªgvÆ
;

847 
bdrkªg_t
 
	m˚b_rsvd
 : 63;

848 
bdrkªg_t
 
	m˚b_˝u_íabÀ
 : 1;

849 } 
	mpi_˝u_íabÀ_b_Êd_s
;

850 } 
	tpi_˝u_íabÀ_b_u_t
;

865 
	upi_nmi_a_u
 {

866 
bdrkªg_t
 
	mpi_nmi_a_ªgvÆ
;

868 
bdrkªg_t
 
	m«_nmi_˝u
 : 64;

869 } 
	mpi_nmi_a_Êd_s
;

870 } 
	tpi_nmi_a_u_t
;

885 
	upi_nmi_b_u
 {

886 
bdrkªg_t
 
	mpi_nmi_b_ªgvÆ
;

888 
bdrkªg_t
 
	mnb_nmi_˝u
 : 64;

889 } 
	mpi_nmi_b_Êd_s
;

890 } 
	tpi_nmi_b_u_t
;

916 
	upi_öt_≥nd_mod_u
 {

917 
bdrkªg_t
 
	mpi_öt_≥nd_mod_ªgvÆ
;

919 
bdrkªg_t
 
	mùm_rsvd
 : 55;

920 
bdrkªg_t
 
	mùm_vÆue
 : 1;

921 
bdrkªg_t
 
	mùm_rsvd_1
 : 1;

922 
bdrkªg_t
 
	mùm_ªg_£À˘
 : 1;

923 
bdrkªg_t
 
	mùm_bô_£À˘
 : 6;

924 } 
	mpi_öt_≥nd_mod_Êd_s
;

925 } 
	tpi_öt_≥nd_mod_u_t
;

942 
	upi_öt_≥nd0_u
 {

943 
bdrkªg_t
 
	mpi_öt_≥nd0_ªgvÆ
;

945 
bdrkªg_t
 
	mù_öt_≥nd0_hi
 : 57;

946 
bdrkªg_t
 
	mù_‹_cc_≥nd_b
 : 1;

947 
bdrkªg_t
 
	mù_‹_cc_≥nd_a
 : 1;

948 
bdrkªg_t
 
	mù_u¨t_u˙ål
 : 1;

949 
bdrkªg_t
 
	mù_∑ge_migøti⁄
 : 1;

950 
bdrkªg_t
 
	mù_gfx_öt_b
 : 1;

951 
bdrkªg_t
 
	mù_gfx_öt_a
 : 1;

952 
bdrkªg_t
 
	mù_öt_≥nd0_lo
 : 1;

953 } 
	mpi_öt_≥nd0_Êd_s
;

954 } 
	tpi_öt_≥nd0_u_t
;

975 
	upi_öt_≥nd1_u
 {

976 
bdrkªg_t
 
	mpi_öt_≥nd1_ªgvÆ
;

978 
bdrkªg_t
 
	mù_sy°em_shutdown
 : 1;

979 
bdrkªg_t
 
	mù_ni_îr‹
 : 1;

980 
bdrkªg_t
 
	mù_md_c‹r_îr‹
 : 1;

981 
bdrkªg_t
 
	mù_sys_c‹_îr_a
 : 1;

982 
bdrkªg_t
 
	mù_sys_c‹_îr_b
 : 1;

983 
bdrkªg_t
 
	mù_≥rf_˙å_oÊow
 : 1;

984 
bdrkªg_t
 
	mù_«ck_öt_b
 : 1;

985 
bdrkªg_t
 
	mù_«ck_öt_a
 : 1;

986 
bdrkªg_t
 
	mù_lb_îr‹
 : 1;

987 
bdrkªg_t
 
	mù_xb_îr‹
 : 1;

988 
bdrkªg_t
 
	mù_öt_≥nd1
 : 54;

989 } 
	mpi_öt_≥nd1_Êd_s
;

990 } 
	tpi_öt_≥nd1_u_t
;

1008 
	upi_öt_mask0_a_u
 {

1009 
bdrkªg_t
 
	mpi_öt_mask0_a_ªgvÆ
;

1011 
bdrkªg_t
 
	mima_öt_mask0_hi
 : 57;

1012 
bdrkªg_t
 
	mima_‹_c˝_mask_b
 : 1;

1013 
bdrkªg_t
 
	mima_‹_c˝_mask_a
 : 1;

1014 
bdrkªg_t
 
	mima_u¨t_u˙ål
 : 1;

1015 
bdrkªg_t
 
	mima_∑ge_migøti⁄
 : 1;

1016 
bdrkªg_t
 
	mima_gfx_öt_b
 : 1;

1017 
bdrkªg_t
 
	mima_gfx_öt_a
 : 1;

1018 
bdrkªg_t
 
	mima_öt_mask0_lo
 : 1;

1019 } 
	mpi_öt_mask0_a_Êd_s
;

1020 } 
	tpi_öt_mask0_a_u_t
;

1041 
	upi_öt_mask1_a_u
 {

1042 
bdrkªg_t
 
	mpi_öt_mask1_a_ªgvÆ
;

1044 
bdrkªg_t
 
	mima_öt_mask1
 : 64;

1045 } 
	mpi_öt_mask1_a_Êd_s
;

1046 } 
	tpi_öt_mask1_a_u_t
;

1064 
	upi_öt_mask0_b_u
 {

1065 
bdrkªg_t
 
	mpi_öt_mask0_b_ªgvÆ
;

1067 
bdrkªg_t
 
	mimb_öt_mask0_hi
 : 57;

1068 
bdrkªg_t
 
	mimb_‹_c˝_mask_b
 : 1;

1069 
bdrkªg_t
 
	mimb_‹_c˝_mask_a
 : 1;

1070 
bdrkªg_t
 
	mimb_u¨t_u˙ål
 : 1;

1071 
bdrkªg_t
 
	mimb_∑ge_migøti⁄
 : 1;

1072 
bdrkªg_t
 
	mimb_gfx_öt_b
 : 1;

1073 
bdrkªg_t
 
	mimb_gfx_öt_a
 : 1;

1074 
bdrkªg_t
 
	mimb_öt_mask0_lo
 : 1;

1075 } 
	mpi_öt_mask0_b_Êd_s
;

1076 } 
	tpi_öt_mask0_b_u_t
;

1097 
	upi_öt_mask1_b_u
 {

1098 
bdrkªg_t
 
	mpi_öt_mask1_b_ªgvÆ
;

1100 
bdrkªg_t
 
	mimb_öt_mask1
 : 64;

1101 } 
	mpi_öt_mask1_b_Êd_s
;

1102 } 
	tpi_öt_mask1_b_u_t
;

1121 
	upi_cc_≥nd_£t_a_u
 {

1122 
bdrkªg_t
 
	mpi_cc_≥nd_£t_a_ªgvÆ
;

1124 
bdrkªg_t
 
	m˝ß_cc_≥nd
 : 64;

1125 } 
	mpi_cc_≥nd_£t_a_Êd_s
;

1126 } 
	tpi_cc_≥nd_£t_a_u_t
;

1145 
	upi_cc_≥nd_£t_b_u
 {

1146 
bdrkªg_t
 
	mpi_cc_≥nd_£t_b_ªgvÆ
;

1148 
bdrkªg_t
 
	m˝sb_cc_≥nd
 : 64;

1149 } 
	mpi_cc_≥nd_£t_b_Êd_s
;

1150 } 
	tpi_cc_≥nd_£t_b_u_t
;

1168 
	upi_cc_≥nd_˛r_a_u
 {

1169 
bdrkªg_t
 
	mpi_cc_≥nd_˛r_a_ªgvÆ
;

1171 
bdrkªg_t
 
	m˝ˇ_cc_≥nd
 : 64;

1172 } 
	mpi_cc_≥nd_˛r_a_Êd_s
;

1173 } 
	tpi_cc_≥nd_˛r_a_u_t
;

1191 
	upi_cc_≥nd_˛r_b_u
 {

1192 
bdrkªg_t
 
	mpi_cc_≥nd_˛r_b_ªgvÆ
;

1194 
bdrkªg_t
 
	m˝cb_cc_≥nd
 : 64;

1195 } 
	mpi_cc_≥nd_˛r_b_Êd_s
;

1196 } 
	tpi_cc_≥nd_˛r_b_u_t
;

1211 
	upi_cc_mask_u
 {

1212 
bdrkªg_t
 
	mpi_cc_mask_ªgvÆ
;

1214 
bdrkªg_t
 
	mcm_cc_mask
 : 64;

1215 } 
	mpi_cc_mask_Êd_s
;

1216 } 
	tpi_cc_mask_u_t
;

1238 
	upi_öt_≥nd1_ªm≠_u
 {

1239 
bdrkªg_t
 
	mpi_öt_≥nd1_ªm≠_ªgvÆ
;

1241 
bdrkªg_t
 
	mùr_ª£rved
 : 59;

1242 
bdrkªg_t
 
	mùr_îr‹_f‹w¨d
 : 1;

1243 
bdrkªg_t
 
	mùr_ªm≠_3
 : 1;

1244 
bdrkªg_t
 
	mùr_ªm≠_2
 : 1;

1245 
bdrkªg_t
 
	mùr_ªm≠_1
 : 1;

1246 
bdrkªg_t
 
	mùr_ªm≠_0
 : 1;

1247 } 
	mpi_öt_≥nd1_ªm≠_Êd_s
;

1248 } 
	tpi_öt_≥nd1_ªm≠_u_t
;

1265 
	upi_π_com∑ª_a_u
 {

1266 
bdrkªg_t
 
	mpi_π_com∑ª_a_ªgvÆ
;

1268 
bdrkªg_t
 
	mrˇ_rsvd
 : 9;

1269 
bdrkªg_t
 
	mrˇ_π_com∑ª
 : 55;

1270 } 
	mpi_π_com∑ª_a_Êd_s
;

1271 } 
	tpi_π_com∑ª_a_u_t
;

1288 
	upi_π_com∑ª_b_u
 {

1289 
bdrkªg_t
 
	mpi_π_com∑ª_b_ªgvÆ
;

1291 
bdrkªg_t
 
	mrcb_rsvd
 : 9;

1292 
bdrkªg_t
 
	mrcb_π_com∑ª
 : 55;

1293 } 
	mpi_π_com∑ª_b_Êd_s
;

1294 } 
	tpi_π_com∑ª_b_u_t
;

1310 
	upi_¥ofûe_com∑ª_u
 {

1311 
bdrkªg_t
 
	mpi_¥ofûe_com∑ª_ªgvÆ
;

1313 
bdrkªg_t
 
	mpc_rsvd
 : 32;

1314 
bdrkªg_t
 
	mpc_¥ofûe_com∑ª
 : 32;

1315 } 
	mpi_¥ofûe_com∑ª_Êd_s
;

1316 } 
	tpi_¥ofûe_com∑ª_u_t
;

1334 
	upi_π_öt_≥nd_a_u
 {

1335 
bdrkªg_t
 
	mpi_π_öt_≥nd_a_ªgvÆ
;

1337 
bdrkªg_t
 
	mrùa_rsvd
 : 63;

1338 
bdrkªg_t
 
	mrùa_πc_öt_≥nd
 : 1;

1339 } 
	mpi_π_öt_≥nd_a_Êd_s
;

1340 } 
	tpi_π_öt_≥nd_a_u_t
;

1358 
	upi_π_öt_≥nd_b_u
 {

1359 
bdrkªg_t
 
	mpi_π_öt_≥nd_b_ªgvÆ
;

1361 
bdrkªg_t
 
	mrùb_rsvd
 : 63;

1362 
bdrkªg_t
 
	mrùb_πc_öt_≥nd
 : 1;

1363 } 
	mpi_π_öt_≥nd_b_Êd_s
;

1364 } 
	tpi_π_öt_≥nd_b_u_t
;

1385 
	upi_¥of_öt_≥nd_a_u
 {

1386 
bdrkªg_t
 
	mpi_¥of_öt_≥nd_a_ªgvÆ
;

1388 
bdrkªg_t
 
	mpùa_rsvd
 : 63;

1389 
bdrkªg_t
 
	mpùa_¥of_öt_≥nd
 : 1;

1390 } 
	mpi_¥of_öt_≥nd_a_Êd_s
;

1391 } 
	tpi_¥of_öt_≥nd_a_u_t
;

1412 
	upi_¥of_öt_≥nd_b_u
 {

1413 
bdrkªg_t
 
	mpi_¥of_öt_≥nd_b_ªgvÆ
;

1415 
bdrkªg_t
 
	mpùb_rsvd
 : 63;

1416 
bdrkªg_t
 
	mpùb_¥of_öt_≥nd
 : 1;

1417 } 
	mpi_¥of_öt_≥nd_b_Êd_s
;

1418 } 
	tpi_¥of_öt_≥nd_b_u_t
;

1433 
	upi_π_öt_í_a_u
 {

1434 
bdrkªg_t
 
	mpi_π_öt_í_a_ªgvÆ
;

1436 
bdrkªg_t
 
	mrõa_rsvd
 : 63;

1437 
bdrkªg_t
 
	mrõa_πc_öt_í
 : 1;

1438 } 
	mpi_π_öt_í_a_Êd_s
;

1439 } 
	tpi_π_öt_í_a_u_t
;

1454 
	upi_π_öt_í_b_u
 {

1455 
bdrkªg_t
 
	mpi_π_öt_í_b_ªgvÆ
;

1457 
bdrkªg_t
 
	mrõb_rsvd
 : 63;

1458 
bdrkªg_t
 
	mrõb_πc_öt_í
 : 1;

1459 } 
	mpi_π_öt_í_b_Êd_s
;

1460 } 
	tpi_π_öt_í_b_u_t
;

1475 
	upi_¥of_öt_í_a_u
 {

1476 
bdrkªg_t
 
	mpi_¥of_öt_í_a_ªgvÆ
;

1478 
bdrkªg_t
 
	mpõa_rsvd
 : 63;

1479 
bdrkªg_t
 
	mpõa_¥of_öt_í
 : 1;

1480 } 
	mpi_¥of_öt_í_a_Êd_s
;

1481 } 
	tpi_¥of_öt_í_a_u_t
;

1496 
	upi_¥of_öt_í_b_u
 {

1497 
bdrkªg_t
 
	mpi_¥of_öt_í_b_ªgvÆ
;

1499 
bdrkªg_t
 
	mpõb_rsvd
 : 63;

1500 
bdrkªg_t
 
	mpõb_¥of_öt_í
 : 1;

1501 } 
	mpi_¥of_öt_í_b_Êd_s
;

1502 } 
	tpi_¥of_öt_í_b_u_t
;

1521 
	upi_debug_£l_u
 {

1522 
bdrkªg_t
 
	mpi_debug_£l_ªgvÆ
;

1524 
bdrkªg_t
 
	mds_rsvd
 : 37;

1525 
bdrkªg_t
 
	mds_b_£l
 : 1;

1526 
bdrkªg_t
 
	mds_high_≥rf_öc_b_1
 : 1;

1527 
bdrkªg_t
 
	mds_high_≥rf_öc_b_0
 : 1;

1528 
bdrkªg_t
 
	mds_high_≥rf_öc_a_1
 : 1;

1529 
bdrkªg_t
 
	mds_high_≥rf_öc_a_0
 : 1;

1530 
bdrkªg_t
 
	mds_high_ötcc
 : 1;

1531 
bdrkªg_t
 
	mds_high_Ωlcc_b
 : 1;

1532 
bdrkªg_t
 
	mds_high_Ωlcc_a
 : 1;

1533 
bdrkªg_t
 
	mds_high_ªqcc_b
 : 1;

1534 
bdrkªg_t
 
	mds_high_ªqcc_a
 : 1;

1535 
bdrkªg_t
 
	mds_high_tŸcc_b
 : 1;

1536 
bdrkªg_t
 
	mds_high_tŸcc_a
 : 1;

1537 
bdrkªg_t
 
	mds_high_t5cc_b
 : 1;

1538 
bdrkªg_t
 
	mds_high_t5cc_a
 : 1;

1539 
bdrkªg_t
 
	mds_low_≥rf_öc_b_1
 : 1;

1540 
bdrkªg_t
 
	mds_low_≥rf_öc_b_0
 : 1;

1541 
bdrkªg_t
 
	mds_low_≥rf_öc_a_1
 : 1;

1542 
bdrkªg_t
 
	mds_low_≥rf_öc_a_0
 : 1;

1543 
bdrkªg_t
 
	mds_low_ötcc
 : 1;

1544 
bdrkªg_t
 
	mds_low_Ωlcc_b
 : 1;

1545 
bdrkªg_t
 
	mds_low_Ωlcc_a
 : 1;

1546 
bdrkªg_t
 
	mds_low_ªqcc_b
 : 1;

1547 
bdrkªg_t
 
	mds_low_ªqcc_a
 : 1;

1548 
bdrkªg_t
 
	mds_low_tŸcc_b
 : 1;

1549 
bdrkªg_t
 
	mds_low_tŸcc_a
 : 1;

1550 
bdrkªg_t
 
	mds_low_t5cc_b
 : 1;

1551 
bdrkªg_t
 
	mds_low_t5cc_a
 : 1;

1552 } 
	mpi_debug_£l_Êd_s
;

1553 } 
	tpi_debug_£l_u_t
;

1579 
	upi_öt_≥nd_mod_Æüs_u
 {

1580 
bdrkªg_t
 
	mpi_öt_≥nd_mod_Æüs_ªgvÆ
;

1582 
bdrkªg_t
 
	mùma_rsvd
 : 55;

1583 
bdrkªg_t
 
	mùma_vÆue
 : 1;

1584 
bdrkªg_t
 
	mùma_rsvd_1
 : 1;

1585 
bdrkªg_t
 
	mùma_ªg_£À˘
 : 1;

1586 
bdrkªg_t
 
	mùma_bô_£À˘
 : 6;

1587 } 
	mpi_öt_≥nd_mod_Æüs_Êd_s
;

1588 } 
	tpi_öt_≥nd_mod_Æüs_u_t
;

1606 
	upi_gfx_∑ge_a_u
 {

1607 
bdrkªg_t
 
	mpi_gfx_∑ge_a_ªgvÆ
;

1609 
bdrkªg_t
 
	mg∑_rsvd
 : 23;

1610 
bdrkªg_t
 
	mg∑_í_gfx_∑ge
 : 1;

1611 
bdrkªg_t
 
	mg∑_gfx_∑ge_addr
 : 23;

1612 
bdrkªg_t
 
	mg∑_rsvd_1
 : 17;

1613 } 
	mpi_gfx_∑ge_a_Êd_s
;

1614 } 
	tpi_gfx_∑ge_a_u_t
;

1635 
	upi_gfx_¸edô_˙å_a_u
 {

1636 
bdrkªg_t
 
	mpi_gfx_¸edô_˙å_a_ªgvÆ
;

1638 
bdrkªg_t
 
	mgcˇ_rsvd
 : 52;

1639 
bdrkªg_t
 
	mgcˇ_gfx_¸edô_˙å
 : 12;

1640 } 
	mpi_gfx_¸edô_˙å_a_Êd_s
;

1641 } 
	tpi_gfx_¸edô_˙å_a_u_t
;

1657 
	upi_gfx_büs_a_u
 {

1658 
bdrkªg_t
 
	mpi_gfx_büs_a_ªgvÆ
;

1660 
bdrkªg_t
 
	mgba_rsvd
 : 52;

1661 
bdrkªg_t
 
	mgba_gfx_büs
 : 12;

1662 } 
	mpi_gfx_büs_a_Êd_s
;

1663 } 
	tpi_gfx_büs_a_u_t
;

1687 
	upi_gfx_öt_˙å_a_u
 {

1688 
bdrkªg_t
 
	mpi_gfx_öt_˙å_a_ªgvÆ
;

1690 
bdrkªg_t
 
	mgiˇ_rsvd
 : 38;

1691 
bdrkªg_t
 
	mgiˇ_gfx_öt_˙å
 : 26;

1692 } 
	mpi_gfx_öt_˙å_a_Êd_s
;

1693 } 
	tpi_gfx_öt_˙å_a_u_t
;

1711 
	upi_gfx_öt_cmp_a_u
 {

1712 
bdrkªg_t
 
	mpi_gfx_öt_cmp_a_ªgvÆ
;

1714 
bdrkªg_t
 
	mgiˇ_rsvd
 : 38;

1715 
bdrkªg_t
 
	mgiˇ_gfx_öt_cmp
 : 26;

1716 } 
	mpi_gfx_öt_cmp_a_Êd_s
;

1717 } 
	tpi_gfx_öt_cmp_a_u_t
;

1735 
	upi_gfx_∑ge_b_u
 {

1736 
bdrkªg_t
 
	mpi_gfx_∑ge_b_ªgvÆ
;

1738 
bdrkªg_t
 
	mgpb_rsvd
 : 23;

1739 
bdrkªg_t
 
	mgpb_í_gfx_∑ge
 : 1;

1740 
bdrkªg_t
 
	mgpb_gfx_∑ge_addr
 : 23;

1741 
bdrkªg_t
 
	mgpb_rsvd_1
 : 17;

1742 } 
	mpi_gfx_∑ge_b_Êd_s
;

1743 } 
	tpi_gfx_∑ge_b_u_t
;

1764 
	upi_gfx_¸edô_˙å_b_u
 {

1765 
bdrkªg_t
 
	mpi_gfx_¸edô_˙å_b_ªgvÆ
;

1767 
bdrkªg_t
 
	mgccb_rsvd
 : 52;

1768 
bdrkªg_t
 
	mgccb_gfx_¸edô_˙å
 : 12;

1769 } 
	mpi_gfx_¸edô_˙å_b_Êd_s
;

1770 } 
	tpi_gfx_¸edô_˙å_b_u_t
;

1786 
	upi_gfx_büs_b_u
 {

1787 
bdrkªg_t
 
	mpi_gfx_büs_b_ªgvÆ
;

1789 
bdrkªg_t
 
	mgbb_rsvd
 : 52;

1790 
bdrkªg_t
 
	mgbb_gfx_büs
 : 12;

1791 } 
	mpi_gfx_büs_b_Êd_s
;

1792 } 
	tpi_gfx_büs_b_u_t
;

1816 
	upi_gfx_öt_˙å_b_u
 {

1817 
bdrkªg_t
 
	mpi_gfx_öt_˙å_b_ªgvÆ
;

1819 
bdrkªg_t
 
	mgicb_rsvd
 : 38;

1820 
bdrkªg_t
 
	mgicb_gfx_öt_˙å
 : 26;

1821 } 
	mpi_gfx_öt_˙å_b_Êd_s
;

1822 } 
	tpi_gfx_öt_˙å_b_u_t
;

1840 
	upi_gfx_öt_cmp_b_u
 {

1841 
bdrkªg_t
 
	mpi_gfx_öt_cmp_b_ªgvÆ
;

1843 
bdrkªg_t
 
	mgicb_rsvd
 : 38;

1844 
bdrkªg_t
 
	mgicb_gfx_öt_cmp
 : 26;

1845 } 
	mpi_gfx_öt_cmp_b_Êd_s
;

1846 } 
	tpi_gfx_öt_cmp_b_u_t
;

1873 
	upi_îr_öt_≥nd_wr_u
 {

1874 
bdrkªg_t
 
	mpi_îr_öt_≥nd_wr_ªgvÆ
;

1876 
bdrkªg_t
 
	meùw_rsvd
 : 29;

1877 
bdrkªg_t
 
	meùw_úb_timeout_a
 : 1;

1878 
bdrkªg_t
 
	meùw_úb_timeout_b
 : 1;

1879 
bdrkªg_t
 
	meùw_úb_îr_a
 : 1;

1880 
bdrkªg_t
 
	meùw_úb_îr_b
 : 1;

1881 
bdrkªg_t
 
	meùw_pkt_Àn_îr_a
 : 1;

1882 
bdrkªg_t
 
	meùw_pkt_Àn_îr_b
 : 1;

1883 
bdrkªg_t
 
	meùw_ue_ˇched_a
 : 1;

1884 
bdrkªg_t
 
	meùw_ue_ˇched_b
 : 1;

1885 
bdrkªg_t
 
	meùw_syßd_bad_d©a_a
 : 1;

1886 
bdrkªg_t
 
	meùw_syßd_bad_d©a_b
 : 1;

1887 
bdrkªg_t
 
	meùw_mem_unc
 : 1;

1888 
bdrkªg_t
 
	meùw_sys°©e_èg_a
 : 1;

1889 
bdrkªg_t
 
	meùw_sys°©e_èg_b
 : 1;

1890 
bdrkªg_t
 
	meùw_ue_unˇched_a
 : 1;

1891 
bdrkªg_t
 
	meùw_ue_unˇched_b
 : 1;

1892 
bdrkªg_t
 
	meùw_•oﬁ_îr_a
 : 1;

1893 
bdrkªg_t
 
	meùw_•oﬁ_îr_b
 : 1;

1894 
bdrkªg_t
 
	meùw_syscmd_addr_∑r_a
 : 1;

1895 
bdrkªg_t
 
	meùw_syscmd_addr_∑r_b
 : 1;

1896 
bdrkªg_t
 
	meùw_syscmd_d©a_∑r_a
 : 1;

1897 
bdrkªg_t
 
	meùw_syscmd_d©a_∑r_b
 : 1;

1898 
bdrkªg_t
 
	meùw_syßd_addr_ecc_a
 : 1;

1899 
bdrkªg_t
 
	meùw_syßd_addr_ecc_b
 : 1;

1900 
bdrkªg_t
 
	meùw_syßd_d©a_ecc_a
 : 1;

1901 
bdrkªg_t
 
	meùw_syßd_d©a_ecc_b
 : 1;

1902 
bdrkªg_t
 
	meùw_sys°©e_∑r_a
 : 1;

1903 
bdrkªg_t
 
	meùw_sys°©e_∑r_b
 : 1;

1904 
bdrkªg_t
 
	meùw_wrb_wîr_a
 : 1;

1905 
bdrkªg_t
 
	meùw_wrb_wîr_b
 : 1;

1906 
bdrkªg_t
 
	meùw_wrb_ãº_a
 : 1;

1907 
bdrkªg_t
 
	meùw_wrb_ãº_b
 : 1;

1908 
bdrkªg_t
 
	meùw_•urious_a
 : 1;

1909 
bdrkªg_t
 
	meùw_•urious_b
 : 1;

1910 
bdrkªg_t
 
	meùw_•oﬁ_comp_a
 : 1;

1911 
bdrkªg_t
 
	meùw_•oﬁ_comp_b
 : 1;

1912 } 
	mpi_îr_öt_≥nd_wr_Êd_s
;

1913 } 
	tpi_îr_öt_≥nd_wr_u_t
;

1940 
	upi_îr_öt_≥nd_u
 {

1941 
bdrkªg_t
 
	mpi_îr_öt_≥nd_ªgvÆ
;

1943 
bdrkªg_t
 
	meù_rsvd
 : 29;

1944 
bdrkªg_t
 
	meù_úb_timeout_a
 : 1;

1945 
bdrkªg_t
 
	meù_úb_timeout_b
 : 1;

1946 
bdrkªg_t
 
	meù_úb_îr_a
 : 1;

1947 
bdrkªg_t
 
	meù_úb_îr_b
 : 1;

1948 
bdrkªg_t
 
	meù_pkt_Àn_îr_a
 : 1;

1949 
bdrkªg_t
 
	meù_pkt_Àn_îr_b
 : 1;

1950 
bdrkªg_t
 
	meù_ue_ˇched_a
 : 1;

1951 
bdrkªg_t
 
	meù_ue_ˇched_b
 : 1;

1952 
bdrkªg_t
 
	meù_syßd_bad_d©a_a
 : 1;

1953 
bdrkªg_t
 
	meù_syßd_bad_d©a_b
 : 1;

1954 
bdrkªg_t
 
	meù_mem_unc
 : 1;

1955 
bdrkªg_t
 
	meù_sys°©e_èg_a
 : 1;

1956 
bdrkªg_t
 
	meù_sys°©e_èg_b
 : 1;

1957 
bdrkªg_t
 
	meù_ue_unˇched_a
 : 1;

1958 
bdrkªg_t
 
	meù_ue_unˇched_b
 : 1;

1959 
bdrkªg_t
 
	meù_•oﬁ_îr_a
 : 1;

1960 
bdrkªg_t
 
	meù_•oﬁ_îr_b
 : 1;

1961 
bdrkªg_t
 
	meù_syscmd_addr_∑r_a
 : 1;

1962 
bdrkªg_t
 
	meù_syscmd_addr_∑r_b
 : 1;

1963 
bdrkªg_t
 
	meù_syscmd_d©a_∑r_a
 : 1;

1964 
bdrkªg_t
 
	meù_syscmd_d©a_∑r_b
 : 1;

1965 
bdrkªg_t
 
	meù_syßd_addr_ecc_a
 : 1;

1966 
bdrkªg_t
 
	meù_syßd_addr_ecc_b
 : 1;

1967 
bdrkªg_t
 
	meù_syßd_d©a_ecc_a
 : 1;

1968 
bdrkªg_t
 
	meù_syßd_d©a_ecc_b
 : 1;

1969 
bdrkªg_t
 
	meù_sys°©e_∑r_a
 : 1;

1970 
bdrkªg_t
 
	meù_sys°©e_∑r_b
 : 1;

1971 
bdrkªg_t
 
	meù_wrb_wîr_a
 : 1;

1972 
bdrkªg_t
 
	meù_wrb_wîr_b
 : 1;

1973 
bdrkªg_t
 
	meù_wrb_ãº_a
 : 1;

1974 
bdrkªg_t
 
	meù_wrb_ãº_b
 : 1;

1975 
bdrkªg_t
 
	meù_•urious_a
 : 1;

1976 
bdrkªg_t
 
	meù_•urious_b
 : 1;

1977 
bdrkªg_t
 
	meù_•oﬁ_comp_a
 : 1;

1978 
bdrkªg_t
 
	meù_•oﬁ_comp_b
 : 1;

1979 } 
	mpi_îr_öt_≥nd_Êd_s
;

1980 } 
	tpi_îr_öt_≥nd_u_t
;

1998 
	upi_îr_öt_mask_a_u
 {

1999 
bdrkªg_t
 
	mpi_îr_öt_mask_a_ªgvÆ
;

2001 
bdrkªg_t
 
	meima_rsvd
 : 29;

2002 
bdrkªg_t
 
	meima_mask
 : 35;

2003 } 
	mpi_îr_öt_mask_a_Êd_s
;

2004 } 
	tpi_îr_öt_mask_a_u_t
;

2022 
	upi_îr_öt_mask_b_u
 {

2023 
bdrkªg_t
 
	mpi_îr_öt_mask_b_ªgvÆ
;

2025 
bdrkªg_t
 
	meimb_rsvd
 : 29;

2026 
bdrkªg_t
 
	meimb_mask
 : 35;

2027 } 
	mpi_îr_öt_mask_b_Êd_s
;

2028 } 
	tpi_îr_öt_mask_b_u_t
;

2047 
	upi_îr_°ack_addr_a_u
 {

2048 
bdrkªg_t
 
	mpi_îr_°ack_addr_a_ªgvÆ
;

2050 
bdrkªg_t
 
	meßa_rsvd
 : 31;

2051 
bdrkªg_t
 
	meßa_addr
 : 30;

2052 
bdrkªg_t
 
	meßa_rsvd_1
 : 3;

2053 } 
	mpi_îr_°ack_addr_a_Êd_s
;

2054 } 
	tpi_îr_°ack_addr_a_u_t
;

2073 
	upi_îr_°ack_addr_b_u
 {

2074 
bdrkªg_t
 
	mpi_îr_°ack_addr_b_ªgvÆ
;

2076 
bdrkªg_t
 
	meßb_rsvd
 : 31;

2077 
bdrkªg_t
 
	meßb_addr
 : 30;

2078 
bdrkªg_t
 
	meßb_rsvd_1
 : 3;

2079 } 
	mpi_îr_°ack_addr_b_Êd_s
;

2080 } 
	tpi_îr_°ack_addr_b_u_t
;

2098 
	upi_îr_°ack_size_u
 {

2099 
bdrkªg_t
 
	mpi_îr_°ack_size_ªgvÆ
;

2101 
bdrkªg_t
 
	mess_rsvd
 : 60;

2102 
bdrkªg_t
 
	mess_size
 : 4;

2103 } 
	mpi_îr_°ack_size_Êd_s
;

2104 } 
	tpi_îr_°ack_size_u_t
;

2120 
	upi_îr_°©us0_a_u
 {

2121 
bdrkªg_t
 
	mpi_îr_°©us0_a_ªgvÆ
;

2123 
bdrkªg_t
 
	meß_vÆid
 : 1;

2124 
bdrkªg_t
 
	meß_ovî_run
 : 1;

2125 
bdrkªg_t
 
	meß_addr
 : 37;

2126 
bdrkªg_t
 
	meß_cmd
 : 8;

2127 
bdrkªg_t
 
	meß_suµÀmíèl
 : 11;

2128 
bdrkªg_t
 
	meß_¥oc_ªq_num
 : 3;

2129 
bdrkªg_t
 
	meß_îr‹_ty≥
 : 3;

2130 } 
	mpi_îr_°©us0_a_Êd_s
;

2131 } 
	tpi_îr_°©us0_a_u_t
;

2147 
	upi_îr_°©us0_a_˛r_u
 {

2148 
bdrkªg_t
 
	mpi_îr_°©us0_a_˛r_ªgvÆ
;

2150 
bdrkªg_t
 
	meßc_vÆid
 : 1;

2151 
bdrkªg_t
 
	meßc_ovî_run
 : 1;

2152 
bdrkªg_t
 
	meßc_addr
 : 37;

2153 
bdrkªg_t
 
	meßc_cmd
 : 8;

2154 
bdrkªg_t
 
	meßc_suµÀmíèl
 : 11;

2155 
bdrkªg_t
 
	meßc_¥oc_ªq_num
 : 3;

2156 
bdrkªg_t
 
	meßc_îr‹_ty≥
 : 3;

2157 } 
	mpi_îr_°©us0_a_˛r_Êd_s
;

2158 } 
	tpi_îr_°©us0_a_˛r_u_t
;

2174 
	upi_îr_°©us1_a_u
 {

2175 
bdrkªg_t
 
	mpi_îr_°©us1_a_ªgvÆ
;

2177 
bdrkªg_t
 
	meß_sour˚
 : 11;

2178 
bdrkªg_t
 
	meß_p_bô
 : 1;

2179 
bdrkªg_t
 
	meß_v_bô
 : 1;

2180 
bdrkªg_t
 
	meß_r_bô
 : 1;

2181 
bdrkªg_t
 
	meß_a_bô
 : 1;

2182 
bdrkªg_t
 
	meß_w_bô
 : 1;

2183 
bdrkªg_t
 
	meß_h_bô
 : 1;

2184 
bdrkªg_t
 
	meß_i_bô
 : 1;

2185 
bdrkªg_t
 
	meß_t_bô
 : 1;

2186 
bdrkªg_t
 
	meß_e_bôs
 : 2;

2187 
bdrkªg_t
 
	meß_wrb
 : 1;

2188 
bdrkªg_t
 
	meß_¸b_num
 : 3;

2189 
bdrkªg_t
 
	meß_övÆ_cou¡
 : 10;

2190 
bdrkªg_t
 
	meß_time_out_cou¡
 : 8;

2191 
bdrkªg_t
 
	meß_•oﬁ_cou¡
 : 21;

2192 } 
	mpi_îr_°©us1_a_Êd_s
;

2193 } 
	tpi_îr_°©us1_a_u_t
;

2209 
	upi_îr_°©us1_a_˛r_u
 {

2210 
bdrkªg_t
 
	mpi_îr_°©us1_a_˛r_ªgvÆ
;

2212 
bdrkªg_t
 
	meßc_sour˚
 : 11;

2213 
bdrkªg_t
 
	meßc_p_bô
 : 1;

2214 
bdrkªg_t
 
	meßc_v_bô
 : 1;

2215 
bdrkªg_t
 
	meßc_r_bô
 : 1;

2216 
bdrkªg_t
 
	meßc_a_bô
 : 1;

2217 
bdrkªg_t
 
	meßc_w_bô
 : 1;

2218 
bdrkªg_t
 
	meßc_h_bô
 : 1;

2219 
bdrkªg_t
 
	meßc_i_bô
 : 1;

2220 
bdrkªg_t
 
	meßc_t_bô
 : 1;

2221 
bdrkªg_t
 
	meßc_e_bôs
 : 2;

2222 
bdrkªg_t
 
	meßc_wrb
 : 1;

2223 
bdrkªg_t
 
	meßc_¸b_num
 : 3;

2224 
bdrkªg_t
 
	meßc_övÆ_cou¡
 : 10;

2225 
bdrkªg_t
 
	meßc_time_out_cou¡
 : 8;

2226 
bdrkªg_t
 
	meßc_•oﬁ_cou¡
 : 21;

2227 } 
	mpi_îr_°©us1_a_˛r_Êd_s
;

2228 } 
	tpi_îr_°©us1_a_˛r_u_t
;

2244 
	upi_îr_°©us0_b_u
 {

2245 
bdrkªg_t
 
	mpi_îr_°©us0_b_ªgvÆ
;

2247 
bdrkªg_t
 
	mesb_vÆid
 : 1;

2248 
bdrkªg_t
 
	mesb_ovî_run
 : 1;

2249 
bdrkªg_t
 
	mesb_addr
 : 37;

2250 
bdrkªg_t
 
	mesb_cmd
 : 8;

2251 
bdrkªg_t
 
	mesb_suµÀmíèl
 : 11;

2252 
bdrkªg_t
 
	mesb_¥oc_ªque°_numbî
 : 3;

2253 
bdrkªg_t
 
	mesb_îr‹_ty≥
 : 3;

2254 } 
	mpi_îr_°©us0_b_Êd_s
;

2255 } 
	tpi_îr_°©us0_b_u_t
;

2271 
	upi_îr_°©us0_b_˛r_u
 {

2272 
bdrkªg_t
 
	mpi_îr_°©us0_b_˛r_ªgvÆ
;

2274 
bdrkªg_t
 
	mesbc_vÆid
 : 1;

2275 
bdrkªg_t
 
	mesbc_ovî_run
 : 1;

2276 
bdrkªg_t
 
	mesbc_addr
 : 37;

2277 
bdrkªg_t
 
	mesbc_cmd
 : 8;

2278 
bdrkªg_t
 
	mesbc_suµÀmíèl
 : 11;

2279 
bdrkªg_t
 
	mesbc_¥oc_ªque°_numbî
 : 3;

2280 
bdrkªg_t
 
	mesbc_îr‹_ty≥
 : 3;

2281 } 
	mpi_îr_°©us0_b_˛r_Êd_s
;

2282 } 
	tpi_îr_°©us0_b_˛r_u_t
;

2298 
	upi_îr_°©us1_b_u
 {

2299 
bdrkªg_t
 
	mpi_îr_°©us1_b_ªgvÆ
;

2301 
bdrkªg_t
 
	mesb_sour˚
 : 11;

2302 
bdrkªg_t
 
	mesb_p_bô
 : 1;

2303 
bdrkªg_t
 
	mesb_v_bô
 : 1;

2304 
bdrkªg_t
 
	mesb_r_bô
 : 1;

2305 
bdrkªg_t
 
	mesb_a_bô
 : 1;

2306 
bdrkªg_t
 
	mesb_w_bô
 : 1;

2307 
bdrkªg_t
 
	mesb_h_bô
 : 1;

2308 
bdrkªg_t
 
	mesb_i_bô
 : 1;

2309 
bdrkªg_t
 
	mesb_t_bô
 : 1;

2310 
bdrkªg_t
 
	mesb_e_bôs
 : 2;

2311 
bdrkªg_t
 
	mesb_wrb
 : 1;

2312 
bdrkªg_t
 
	mesb_¸b_num
 : 3;

2313 
bdrkªg_t
 
	mesb_övÆ_cou¡
 : 10;

2314 
bdrkªg_t
 
	mesb_time_out_cou¡
 : 8;

2315 
bdrkªg_t
 
	mesb_•oﬁ_cou¡
 : 21;

2316 } 
	mpi_îr_°©us1_b_Êd_s
;

2317 } 
	tpi_îr_°©us1_b_u_t
;

2333 
	upi_îr_°©us1_b_˛r_u
 {

2334 
bdrkªg_t
 
	mpi_îr_°©us1_b_˛r_ªgvÆ
;

2336 
bdrkªg_t
 
	mesbc_sour˚
 : 11;

2337 
bdrkªg_t
 
	mesbc_p_bô
 : 1;

2338 
bdrkªg_t
 
	mesbc_v_bô
 : 1;

2339 
bdrkªg_t
 
	mesbc_r_bô
 : 1;

2340 
bdrkªg_t
 
	mesbc_a_bô
 : 1;

2341 
bdrkªg_t
 
	mesbc_w_bô
 : 1;

2342 
bdrkªg_t
 
	mesbc_h_bô
 : 1;

2343 
bdrkªg_t
 
	mesbc_i_bô
 : 1;

2344 
bdrkªg_t
 
	mesbc_t_bô
 : 1;

2345 
bdrkªg_t
 
	mesbc_e_bôs
 : 2;

2346 
bdrkªg_t
 
	mesbc_wrb
 : 1;

2347 
bdrkªg_t
 
	mesbc_¸b_num
 : 3;

2348 
bdrkªg_t
 
	mesbc_övÆ_cou¡
 : 10;

2349 
bdrkªg_t
 
	mesbc_time_out_cou¡
 : 8;

2350 
bdrkªg_t
 
	mesbc_•oﬁ_cou¡
 : 21;

2351 } 
	mpi_îr_°©us1_b_˛r_Êd_s
;

2352 } 
	tpi_îr_°©us1_b_˛r_u_t
;

2366 
	upi_•oﬁ_cmp_a_u
 {

2367 
bdrkªg_t
 
	mpi_•oﬁ_cmp_a_ªgvÆ
;

2369 
bdrkªg_t
 
	msˇ_rsvd
 : 44;

2370 
bdrkªg_t
 
	msˇ_com∑ª
 : 20;

2371 } 
	mpi_•oﬁ_cmp_a_Êd_s
;

2372 } 
	tpi_•oﬁ_cmp_a_u_t
;

2386 
	upi_•oﬁ_cmp_b_u
 {

2387 
bdrkªg_t
 
	mpi_•oﬁ_cmp_b_ªgvÆ
;

2389 
bdrkªg_t
 
	mscb_rsvd
 : 44;

2390 
bdrkªg_t
 
	mscb_com∑ª
 : 20;

2391 } 
	mpi_•oﬁ_cmp_b_Êd_s
;

2392 } 
	tpi_•oﬁ_cmp_b_u_t
;

2407 
	upi_¸b_timeout_a_u
 {

2408 
bdrkªg_t
 
	mpi_¸b_timeout_a_ªgvÆ
;

2410 
bdrkªg_t
 
	m˘a_rsvd
 : 52;

2411 
bdrkªg_t
 
	m˘a_wrb
 : 8;

2412 
bdrkªg_t
 
	m˘a_ºb
 : 4;

2413 } 
	mpi_¸b_timeout_a_Êd_s
;

2414 } 
	tpi_¸b_timeout_a_u_t
;

2429 
	upi_¸b_timeout_b_u
 {

2430 
bdrkªg_t
 
	mpi_¸b_timeout_b_ªgvÆ
;

2432 
bdrkªg_t
 
	m˘b_rsvd
 : 52;

2433 
bdrkªg_t
 
	m˘b_wrb
 : 8;

2434 
bdrkªg_t
 
	m˘b_ºb
 : 4;

2435 } 
	mpi_¸b_timeout_b_Êd_s
;

2436 } 
	tpi_¸b_timeout_b_u_t
;

2451 
	upi_syßd_îrchk_í_u
 {

2452 
bdrkªg_t
 
	mpi_syßd_îrchk_í_ªgvÆ
;

2454 
bdrkªg_t
 
	m£e_rsvd
 : 58;

2455 
bdrkªg_t
 
	m£e_quÆ_chk_í
 : 1;

2456 
bdrkªg_t
 
	m£e_°©e_chk_í
 : 1;

2457 
bdrkªg_t
 
	m£e_cmdp_chk_í
 : 1;

2458 
bdrkªg_t
 
	m£e_ßdp_chk_í
 : 1;

2459 
bdrkªg_t
 
	m£e_quÆ_gí_í
 : 1;

2460 
bdrkªg_t
 
	m£e_ecc_gí_í
 : 1;

2461 } 
	mpi_syßd_îrchk_í_Êd_s
;

2462 } 
	tpi_syßd_îrchk_í_u_t
;

2481 
	upi_f‹˚_bad_check_bô_a_u
 {

2482 
bdrkªg_t
 
	mpi_f‹˚_bad_check_bô_a_ªgvÆ
;

2484 
bdrkªg_t
 
	mfbcba_rsvd
 : 56;

2485 
bdrkªg_t
 
	mfbcba_bad_check_bô
 : 8;

2486 } 
	mpi_f‹˚_bad_check_bô_a_Êd_s
;

2487 } 
	tpi_f‹˚_bad_check_bô_a_u_t
;

2506 
	upi_f‹˚_bad_check_bô_b_u
 {

2507 
bdrkªg_t
 
	mpi_f‹˚_bad_check_bô_b_ªgvÆ
;

2509 
bdrkªg_t
 
	mfbcbb_rsvd
 : 56;

2510 
bdrkªg_t
 
	mfbcbb_bad_check_bô
 : 8;

2511 } 
	mpi_f‹˚_bad_check_bô_b_Êd_s
;

2512 } 
	tpi_f‹˚_bad_check_bô_b_u_t
;

2533 
	upi_«ck_˙t_a_u
 {

2534 
bdrkªg_t
 
	mpi_«ck_˙t_a_ªgvÆ
;

2536 
bdrkªg_t
 
	mnˇ_rsvd
 : 43;

2537 
bdrkªg_t
 
	mnˇ_˙t_í
 : 1;

2538 
bdrkªg_t
 
	mnˇ_«ck_˙t
 : 20;

2539 } 
	mpi_«ck_˙t_a_Êd_s
;

2540 } 
	tpi_«ck_˙t_a_u_t
;

2561 
	upi_«ck_˙t_b_u
 {

2562 
bdrkªg_t
 
	mpi_«ck_˙t_b_ªgvÆ
;

2564 
bdrkªg_t
 
	mncb_rsvd
 : 43;

2565 
bdrkªg_t
 
	mncb_˙t_í
 : 1;

2566 
bdrkªg_t
 
	mncb_«ck_˙t
 : 20;

2567 } 
	mpi_«ck_˙t_b_Êd_s
;

2568 } 
	tpi_«ck_˙t_b_u_t
;

2582 
	upi_«ck_cmp_u
 {

2583 
bdrkªg_t
 
	mpi_«ck_cmp_ªgvÆ
;

2585 
bdrkªg_t
 
	mnc_rsvd
 : 44;

2586 
bdrkªg_t
 
	mnc_«ck_cmp
 : 20;

2587 } 
	mpi_«ck_cmp_Êd_s
;

2588 } 
	tpi_«ck_cmp_u_t
;

2604 
	upi_•oﬁ_mask_u
 {

2605 
bdrkªg_t
 
	mpi_•oﬁ_mask_ªgvÆ
;

2607 
bdrkªg_t
 
	msm_rsvd
 : 58;

2608 
bdrkªg_t
 
	msm_«ck_oÊow_îr
 : 1;

2609 
bdrkªg_t
 
	msm_pois⁄_îr
 : 1;

2610 
bdrkªg_t
 
	msm_timeout_îr
 : 1;

2611 
bdrkªg_t
 
	msm_dú_îr
 : 1;

2612 
bdrkªg_t
 
	msm_unˇched_îr
 : 1;

2613 
bdrkªg_t
 
	msm_ac˚ss_îr
 : 1;

2614 } 
	mpi_•oﬁ_mask_Êd_s
;

2615 } 
	tpi_•oﬁ_mask_u_t
;

2634 
	upi_•urious_hdr_0_u
 {

2635 
bdrkªg_t
 
	mpi_•urious_hdr_0_ªgvÆ
;

2637 
bdrkªg_t
 
	msh0_vÆid
 : 1;

2638 
bdrkªg_t
 
	msh0_èû
 : 1;

2639 
bdrkªg_t
 
	msh0_addr
 : 37;

2640 
bdrkªg_t
 
	msh0_cmd
 : 8;

2641 
bdrkªg_t
 
	msh0_suµÀmíèl
 : 11;

2642 
bdrkªg_t
 
	msh0_rsvd
 : 4;

2643 
bdrkªg_t
 
	msh0_¥ev_vÆid_a
 : 1;

2644 
bdrkªg_t
 
	msh0_¥ev_vÆid_b
 : 1;

2645 } 
	mpi_•urious_hdr_0_Êd_s
;

2646 } 
	tpi_•urious_hdr_0_u_t
;

2665 
	upi_•urious_hdr_1_u
 {

2666 
bdrkªg_t
 
	mpi_•urious_hdr_1_ªgvÆ
;

2668 
bdrkªg_t
 
	msh1_sour˚
 : 11;

2669 
bdrkªg_t
 
	msh1_rsvd
 : 53;

2670 } 
	mpi_•urious_hdr_1_Êd_s
;

2671 } 
	tpi_•urious_hdr_1_u_t
;

2697 
	upi_îr_öje˘_u
 {

2698 
bdrkªg_t
 
	mpi_îr_öje˘_ªgvÆ
;

2700 
bdrkªg_t
 
	mei_ª£rved
 : 25;

2701 
bdrkªg_t
 
	mei_sy§e•_∑r_b
 : 1;

2702 
bdrkªg_t
 
	mei_d©a_syßd_un˚cc_b
 : 1;

2703 
bdrkªg_t
 
	mei_cmd_syßd_un˚cc_b
 : 1;

2704 
bdrkªg_t
 
	mei_d©a_syßd_c‹ecc_b
 : 1;

2705 
bdrkªg_t
 
	mei_cmd_syßd_c‹ecc_b
 : 1;

2706 
bdrkªg_t
 
	mei_d©a_syscmd_∑r_b
 : 1;

2707 
bdrkªg_t
 
	mei_cmd_syscmd_∑r_b
 : 1;

2708 
bdrkªg_t
 
	mei_ª£rved_1
 : 25;

2709 
bdrkªg_t
 
	mei_sy§e•_∑r_a
 : 1;

2710 
bdrkªg_t
 
	mei_d©a_syßd_un˚cc_a
 : 1;

2711 
bdrkªg_t
 
	mei_cmd_syßd_un˚cc_a
 : 1;

2712 
bdrkªg_t
 
	mei_d©a_syßd_c‹ecc_a
 : 1;

2713 
bdrkªg_t
 
	mei_cmd_syßd_c‹ecc_a
 : 1;

2714 
bdrkªg_t
 
	mei_d©a_syscmd_∑r_a
 : 1;

2715 
bdrkªg_t
 
	mei_cmd_syscmd_∑r_a
 : 1;

2716 } 
	mpi_îr_öje˘_Êd_s
;

2717 } 
	tpi_îr_öje˘_u_t
;

2742 
	upi_ª∂y_Àvñ_u
 {

2743 
bdrkªg_t
 
	mpi_ª∂y_Àvñ_ªgvÆ
;

2745 
bdrkªg_t
 
	mæ_rsvd
 : 58;

2746 
bdrkªg_t
 
	mæ_ª∂y_Àvñ
 : 6;

2747 } 
	mpi_ª∂y_Àvñ_Êd_s
;

2748 } 
	tpi_ª∂y_Àvñ_u_t
;

2765 
	upi_gfx_¸edô_mode_u
 {

2766 
bdrkªg_t
 
	mpi_gfx_¸edô_mode_ªgvÆ
;

2768 
bdrkªg_t
 
	mgcm_rsvd
 : 63;

2769 
bdrkªg_t
 
	mgcm_å™s_mode
 : 1;

2770 } 
	mpi_gfx_¸edô_mode_Êd_s
;

2771 } 
	tpi_gfx_¸edô_mode_u_t
;

2789 
	upi_π_cou¡î_u
 {

2790 
bdrkªg_t
 
	mpi_π_cou¡î_ªgvÆ
;

2792 
bdrkªg_t
 
	mrc_rsvd
 : 9;

2793 
bdrkªg_t
 
	mrc_cou¡
 : 55;

2794 } 
	mpi_π_cou¡î_Êd_s
;

2795 } 
	tpi_π_cou¡î_u_t
;

2813 
	upi_≥rf_˙é_a_u
 {

2814 
bdrkªg_t
 
	mpi_≥rf_˙é_a_ªgvÆ
;

2816 
bdrkªg_t
 
	mpˇ_˙å_1_íabÀ
 : 1;

2817 
bdrkªg_t
 
	mpˇ_˙å_1_mode
 : 3;

2818 
bdrkªg_t
 
	mpˇ_˙å_1_£À˘
 : 28;

2819 
bdrkªg_t
 
	mpˇ_˙å_0_íabÀ
 : 1;

2820 
bdrkªg_t
 
	mpˇ_˙å_0_mode
 : 3;

2821 
bdrkªg_t
 
	mpˇ_˙å_0_£À˘
 : 28;

2822 } 
	mpi_≥rf_˙é_a_Êd_s
;

2823 } 
	tpi_≥rf_˙é_a_u_t
;

2840 
	upi_≥rf_˙å0_a_u
 {

2841 
bdrkªg_t
 
	mpi_≥rf_˙å0_a_ªgvÆ
;

2843 
bdrkªg_t
 
	mpˇ_rsvd
 : 23;

2844 
bdrkªg_t
 
	mpˇ_ovîÊow
 : 1;

2845 
bdrkªg_t
 
	mpˇ_cou¡_vÆue
 : 40;

2846 } 
	mpi_≥rf_˙å0_a_Êd_s
;

2847 } 
	tpi_≥rf_˙å0_a_u_t
;

2864 
	upi_≥rf_˙å1_a_u
 {

2865 
bdrkªg_t
 
	mpi_≥rf_˙å1_a_ªgvÆ
;

2867 
bdrkªg_t
 
	mpˇ_rsvd
 : 23;

2868 
bdrkªg_t
 
	mpˇ_ovîÊow
 : 1;

2869 
bdrkªg_t
 
	mpˇ_cou¡_vÆue
 : 40;

2870 } 
	mpi_≥rf_˙å1_a_Êd_s
;

2871 } 
	tpi_≥rf_˙å1_a_u_t
;

2889 
	upi_≥rf_˙é_b_u
 {

2890 
bdrkªg_t
 
	mpi_≥rf_˙é_b_ªgvÆ
;

2892 
bdrkªg_t
 
	mpcb_˙å_1_íabÀ
 : 1;

2893 
bdrkªg_t
 
	mpcb_˙å_1_mode
 : 3;

2894 
bdrkªg_t
 
	mpcb_˙å_1_£À˘
 : 28;

2895 
bdrkªg_t
 
	mpcb_˙å_0_íabÀ
 : 1;

2896 
bdrkªg_t
 
	mpcb_˙å_0_mode
 : 3;

2897 
bdrkªg_t
 
	mpcb_˙å_0_£À˘
 : 28;

2898 } 
	mpi_≥rf_˙é_b_Êd_s
;

2899 } 
	tpi_≥rf_˙é_b_u_t
;

2916 
	upi_≥rf_˙å0_b_u
 {

2917 
bdrkªg_t
 
	mpi_≥rf_˙å0_b_ªgvÆ
;

2919 
bdrkªg_t
 
	mpcb_rsvd
 : 23;

2920 
bdrkªg_t
 
	mpcb_ovîÊow
 : 1;

2921 
bdrkªg_t
 
	mpcb_cou¡_vÆue
 : 40;

2922 } 
	mpi_≥rf_˙å0_b_Êd_s
;

2923 } 
	tpi_≥rf_˙å0_b_u_t
;

2940 
	upi_≥rf_˙å1_b_u
 {

2941 
bdrkªg_t
 
	mpi_≥rf_˙å1_b_ªgvÆ
;

2943 
bdrkªg_t
 
	mpcb_rsvd
 : 23;

2944 
bdrkªg_t
 
	mpcb_ovîÊow
 : 1;

2945 
bdrkªg_t
 
	mpcb_cou¡_vÆue
 : 40;

2946 } 
	mpi_≥rf_˙å1_b_Êd_s
;

2947 } 
	tpi_≥rf_˙å1_b_u_t
;

2963 
	#PI_GFX_OFFSET
 (
PI_GFX_PAGE_B
 - 
PI_GFX_PAGE_A
)

	)

2964 
	#PI_GFX_PAGE_ENABLE
 0x0000010000000000LL

	)

2967 
	#PI_CC_INTR_ENABLE_ALL
 0xffffffffffffffffLL

	)

	@/usr/include/sys/SN/SN1/hubpi_next.h

13 #i‚de‡
__SYS_SN_SN1_HUBPI_NEXT_H__


14 
	#__SYS_SN_SN1_HUBPI_NEXT_H__


	)

20 
	#PI_0
(
x
Ë(x)

	)

21 
	#PI_1
(
x
Ë((xË+ 0x200000)

	)

22 
	#PIREG
(
x
,
¢
Ë((¢Ë? 
	`PI_1
(xË: 
	`PI_0
(x))

	)

24 
	#PI_MIN_STACK_SIZE
 4096

	)

25 
	#PI_STACK_SIZE_SHFT
 12

	)

27 
	#PI_STACKADDR_OFFSET
 (
PI_ERR_STACK_ADDR_B
 - 
PI_ERR_STACK_ADDR_A
)

	)

28 
	#PI_ERRSTAT_OFFSET
 (
PI_ERR_STATUS0_B
 - 
PI_ERR_STATUS0_A
)

	)

29 
	#PI_RDCLR_OFFSET
 (
PI_ERR_STATUS0_A_RCLR
 - 
PI_ERR_STATUS0_A
)

	)

32 
	#PI_INT_MASK_OFFSET
 (
PI_INT_MASK0_B
 - 
PI_INT_MASK0_A
)

	)

33 
	#PI_INT_SET_OFFSET
 (
PI_CC_PEND_CLR_B
 - 
PI_CC_PEND_CLR_A
)

	)

34 
	#PI_NMI_OFFSET
 (
PI_NMI_B
 - 
PI_NMI_A
)

	)

36 
	#ERR_STACK_SIZE_BYTES
(
_sz
) \

37 ((
_sz
Ë? (
PI_MIN_STACK_SIZE
 << ((_szË- 1)Ë: 0)

	)

39 
	#PI_CRB_STS_P
 (1 << 9Ë

	)

40 
	#PI_CRB_STS_V
 (1 << 8Ë

	)

41 
	#PI_CRB_STS_R
 (1 << 7Ë

	)

42 
	#PI_CRB_STS_A
 (1 << 6Ë

	)

43 
	#PI_CRB_STS_W
 (1 << 5Ë

	)

44 
	#PI_CRB_STS_H
 (1 << 4Ë

	)

45 
	#PI_CRB_STS_I
 (1 << 3Ë

	)

46 
	#PI_CRB_STS_T
 (1 << 2Ë

	)

47 
	#PI_CRB_STS_E
 (0x3Ë

	)

55 
	#PI_CRB_STS_ADDR_BITS
(
°s
) \

56 ((
°s
Ë& (
PI_CRB_STS_I
 | 
PI_CRB_STS_H
) | \

57 ((
°s
Ë& (
PI_CRB_STS_A
 | 
PI_CRB_STS_R
)Ë>> 1)

	)

59 #ifde‡
_LANGUAGE_C


64 
	sîr_°ack_f‹m©
 {

65 
__uöt64_t
 
	msk_addr
 : 33,

66 
	msk_cmd
 : 8,

67 
	msk_¸b_°s
 : 10,

68 
	msk_rw_rb
 : 1,

69 
	msk_¸b_num
 : 3,

70 
	msk_t5_ªq
 : 3,

71 
	msk_suµl
 : 3,

72 
	msk_îr_ty≥
: 3;

75 
	#PI_ERR_CMD_REPLY
 (1<<7)

	)

78 #ifdef 
DEFINE_PI_ERR_CMDS_AND_TYPES


96 *
	gpi_îr_°©us_cmd
[] = {

355 *
	ghub_ºb_îr_ty≥
[] = {

366 *
	ghub_wrb_îr_ty≥
[] = {

380 
	upi_îr_°ack
 {

381 
__uöt64_t
 
	mpi_°k_w‹d
;

382 
îr_°ack_f‹m©
 
	mpi_°k_fmt
;

383 } 
	tpi_îr_°ack_t
;

386 
	sîr_°©us0_f‹m©
 {

387 
__uöt64_t
 
	ms0_vÆid
 : 1,

388 
	ms0_ovî_run
 : 1,

389 
	ms0_addr
 : 37,

390 
	ms0_cmd
 : 8,

391 
	ms0_suµÀmíèl
 : 11,

392 
	ms0_¥oc_ªq_num
 : 3,

393 
	ms0_îr_ty≥
 : 3;

396 
	upi_îr_°©0
 {

397 
__uöt64_t
 
	mpi_°©0_w‹d
;

398 
îr_°©us0_f‹m©
 
	mpi_°©0_fmt
;

399 } 
	tpi_îr_°©0_t
;

402 
	sîr_°©us1_f‹m©
 {

403 
__uöt64_t
 
	ms1_§c
 : 11,

404 
	ms1_¸b_°s
 : 10,

405 
	ms1_rw_rb
 : 1,

406 
	ms1_¸b_num
 : 3,

407 
	ms1_övÆ_˙t
:10,

408 
	ms1_to_˙t
 : 8,

409 
	ms1_•l_˙t
 : 21;

412 
	upi_îr_°©1
 {

413 
__uöt64_t
 
	mpi_°©1_w‹d
;

414 
îr_°©us1_f‹m©
 
	mpi_°©1_fmt
;

415 } 
	tpi_îr_°©1_t
;

419 
	#PI_ERR_RD_AERR
 0

	)

420 
	#PI_ERR_RD_PRERR
 1

	)

421 
	#PI_ERR_RD_DERR
 2

	)

422 
	#PI_ERR_RD_TERR
 3

	)

423 
	#PI_ERR_RD_PERR
 4

	)

424 
	#PI_ERR_RD_NACK
 5

	)

425 
	#PI_ERR_RD_RDE
 6

	)

426 
	#PI_ERR_RD_PLERR
 7

	)

428 
	#PI_ERR_WR_WERR
 0

	)

429 
	#PI_ERR_WR_PWERR
 1

	)

430 
	#PI_ERR_WR_TERR
 3

	)

431 
	#PI_ERR_WR_RDE
 6

	)

432 
	#PI_ERR_WR_PLERR
 7

	)

436 
	#PI_RT_COUNT
 
PI_RT_COUNTER


	)

437 
	#PI_RT_EN_A
 
PI_RT_INT_EN_A


	)

438 
	#PI_RT_EN_B
 
PI_RT_INT_EN_B


	)

439 
	#PI_PROF_EN_A
 
PI_PROF_INT_EN_A


	)

440 
	#PI_PROF_EN_B
 
PI_PROF_INT_EN_B


	)

441 
	#PI_RT_PEND_A
 
PI_RT_INT_PEND_A


	)

442 
	#PI_RT_PEND_B
 
PI_RT_INT_PEND_B


	)

443 
	#PI_PROF_PEND_A
 
PI_PROF_INT_PEND_A


	)

444 
	#PI_PROF_PEND_B
 
PI_PROF_INT_PEND_B


	)

448 
	#PI_SYSAD_ERRCHK_ECCGEN
 0x01

	)

449 
	#PI_SYSAD_ERRCHK_QUALGEN
 0x02

	)

450 
	#PI_SYSAD_ERRCHK_SADP
 0x04

	)

451 
	#PI_SYSAD_ERRCHK_CMDP
 0x08

	)

452 
	#PI_SYSAD_ERRCHK_STATE
 0x10

	)

453 
	#PI_SYSAD_ERRCHK_QUAL
 0x20

	)

454 
	#PI_SYSAD_CHECK_ALL
 0x3‡

	)

457 
	#PI_CALIAS_SIZE_0
 0

	)

458 
	#PI_CALIAS_SIZE_4K
 1

	)

459 
	#PI_CALIAS_SIZE_8K
 2

	)

460 
	#PI_CALIAS_SIZE_16K
 3

	)

461 
	#PI_CALIAS_SIZE_32K
 4

	)

462 
	#PI_CALIAS_SIZE_64K
 5

	)

463 
	#PI_CALIAS_SIZE_128K
 6

	)

464 
	#PI_CALIAS_SIZE_256K
 7

	)

465 
	#PI_CALIAS_SIZE_512K
 8

	)

466 
	#PI_CALIAS_SIZE_1M
 9

	)

467 
	#PI_CALIAS_SIZE_2M
 10

	)

468 
	#PI_CALIAS_SIZE_4M
 11

	)

469 
	#PI_CALIAS_SIZE_8M
 12

	)

470 
	#PI_CALIAS_SIZE_16M
 13

	)

471 
	#PI_CALIAS_SIZE_32M
 14

	)

472 
	#PI_CALIAS_SIZE_64M
 15

	)

475 
	#PI_ERR_ST0_VALID_MASK
 0x8000000000000000

	)

476 
	#PI_ERR_ST0_VALID_SHFT
 63

	)

479 
	#PI_SPURIOUS_HDR_VALID_MASK
 0x8000000000000000

	)

480 
	#PI_SPURIOUS_HDR_VALID_SHFT
 63

	)

483 
	#PI_NACK_CNT_EN_SHFT
 20

	)

484 
	#PI_NACK_CNT_EN_MASK
 0x100000

	)

485 
	#PI_NACK_CNT_MASK
 0x0fffff

	)

486 
	#PI_NACK_CNT_MAX
 0x0fffff

	)

489 
	#PI_ERR_SPOOL_CMP_B
 0x000000001

	)

490 
	#PI_ERR_SPOOL_CMP_A
 0x000000002

	)

491 
	#PI_ERR_SPUR_MSG_B
 0x000000004

	)

492 
	#PI_ERR_SPUR_MSG_A
 0x000000008

	)

493 
	#PI_ERR_WRB_TERR_B
 0x000000010

	)

494 
	#PI_ERR_WRB_TERR_A
 0x000000020

	)

495 
	#PI_ERR_WRB_WERR_B
 0x000000040

	)

496 
	#PI_ERR_WRB_WERR_A
 0x000000080

	)

497 
	#PI_ERR_SYSSTATE_B
 0x000000100

	)

498 
	#PI_ERR_SYSSTATE_A
 0x000000200

	)

499 
	#PI_ERR_SYSAD_DATA_B
 0x000000400

	)

500 
	#PI_ERR_SYSAD_DATA_A
 0x000000800

	)

501 
	#PI_ERR_SYSAD_ADDR_B
 0x000001000

	)

502 
	#PI_ERR_SYSAD_ADDR_A
 0x000002000

	)

503 
	#PI_ERR_SYSCMD_DATA_B
 0x000004000

	)

504 
	#PI_ERR_SYSCMD_DATA_A
 0x000008000

	)

505 
	#PI_ERR_SYSCMD_ADDR_B
 0x000010000

	)

506 
	#PI_ERR_SYSCMD_ADDR_A
 0x000020000

	)

507 
	#PI_ERR_BAD_SPOOL_B
 0x000040000

	)

508 
	#PI_ERR_BAD_SPOOL_A
 0x000080000

	)

509 
	#PI_ERR_UNCAC_UNCORR_B
 0x000100000

	)

510 
	#PI_ERR_UNCAC_UNCORR_A
 0x000200000

	)

511 
	#PI_ERR_SYSSTATE_TAG_B
 0x000400000

	)

512 
	#PI_ERR_SYSSTATE_TAG_A
 0x000800000

	)

513 
	#PI_ERR_MD_UNCORR
 0x001000000

	)

514 
	#PI_ERR_SYSAD_BAD_DATA_B
 0x002000000

	)

515 
	#PI_ERR_SYSAD_BAD_DATA_A
 0x004000000

	)

516 
	#PI_ERR_UE_CACHED_B
 0x008000000

	)

517 
	#PI_ERR_UE_CACHED_A
 0x010000000

	)

518 
	#PI_ERR_PKT_LEN_ERR_B
 0x020000000

	)

519 
	#PI_ERR_PKT_LEN_ERR_A
 0x040000000

	)

520 
	#PI_ERR_IRB_ERR_B
 0x080000000

	)

521 
	#PI_ERR_IRB_ERR_A
 0x100000000

	)

522 
	#PI_ERR_IRB_TIMEOUT_B
 0x200000000

	)

523 
	#PI_ERR_IRB_TIMEOUT_A
 0x400000000

	)

525 
	#PI_ERR_CLEAR_ALL_A
 0x554ØØØ

	)

526 
	#PI_ERR_CLEAR_ALL_B
 0x2Ø555555

	)

533 
	#PI_FATAL_ERR_CPU_A
 (
PI_ERR_IRB_TIMEOUT_A
 | \

534 
PI_ERR_IRB_ERR_A
 | \

535 
PI_ERR_PKT_LEN_ERR_A
 | \

536 
PI_ERR_SYSSTATE_TAG_A
 | \

537 
PI_ERR_BAD_SPOOL_A
 | \

538 
PI_ERR_SYSCMD_ADDR_A
 | \

539 
PI_ERR_SYSCMD_DATA_A
 | \

540 
PI_ERR_SYSAD_ADDR_A
 | \

541 
PI_ERR_SYSAD_DATA_A
 | \

542 
PI_ERR_SYSSTATE_A
)

	)

544 
	#PI_MISC_ERR_CPU_A
 (
PI_ERR_UE_CACHED_A
 | \

545 
PI_ERR_SYSAD_BAD_DATA_A
| \

546 
PI_ERR_UNCAC_UNCORR_A
 | \

547 
PI_ERR_WRB_WERR_A
 | \

548 
PI_ERR_WRB_TERR_A
 | \

549 
PI_ERR_SPUR_MSG_A
 | \

550 
PI_ERR_SPOOL_CMP_A
)

	)

552 
	#PI_FATAL_ERR_CPU_B
 (
PI_ERR_IRB_TIMEOUT_B
 | \

553 
PI_ERR_IRB_ERR_B
 | \

554 
PI_ERR_PKT_LEN_ERR_B
 | \

555 
PI_ERR_SYSSTATE_TAG_B
 | \

556 
PI_ERR_BAD_SPOOL_B
 | \

557 
PI_ERR_SYSCMD_ADDR_B
 | \

558 
PI_ERR_SYSCMD_DATA_B
 | \

559 
PI_ERR_SYSAD_ADDR_B
 | \

560 
PI_ERR_SYSAD_DATA_B
 | \

561 
PI_ERR_SYSSTATE_B
)

	)

563 
	#PI_MISC_ERR_CPU_B
 (
PI_ERR_UE_CACHED_B
 | \

564 
PI_ERR_SYSAD_BAD_DATA_B
| \

565 
PI_ERR_UNCAC_UNCORR_B
 | \

566 
PI_ERR_WRB_WERR_B
 | \

567 
PI_ERR_WRB_TERR_B
 | \

568 
PI_ERR_SPUR_MSG_B
 | \

569 
PI_ERR_SPOOL_CMP_B
)

	)

571 
	#PI_ERR_GENERIC
 (
PI_ERR_MD_UNCORR
)

	)

574 
	#PMCT_MAX
 0xff

	)

575 
	#PCS_MAX
 0xffffff

	)

581 
	#PCS_LONG
 0xffffff

	)

582 
	#PCS_NORMAL
 0x200000

	)

583 
	#PCS_SHORT
 0x20000

	)

586 
	#ERR_STAT0_ADDR_SHFT
 3

	)

590 
	#PI_ERR_RRB
 0

	)

591 
	#PI_ERR_WRB
 1

	)

594 
	#ERR_STK_ADDR_SHFT
 7

	)

	@/usr/include/sys/SN/SN1/hubxb.h

28 #i‚de‡
__SYS_SN_SN1_HUBXB_H__


29 
	#__SYS_SN_SN1_HUBXB_H__


	)

33 
	#XB_PARMS
 0x00700000

	)

41 
	#XB_SLOW_GNT
 0x00700008

	)

50 
	#XB_SPEW_CONTROL
 0x00700010

	)

58 
	#XB_IOQ_ARB_TRIGGER
 0x00700018

	)

65 
	#XB_FIRST_ERROR
 0x00700090

	)

73 
	#XB_POQ0_ERROR
 0x00700020

	)

80 
	#XB_PIQ0_ERROR
 0x00700028

	)

87 
	#XB_POQ1_ERROR
 0x00700030

	)

94 
	#XB_PIQ1_ERROR
 0x00700038

	)

101 
	#XB_MP0_ERROR
 0x00700040

	)

108 
	#XB_MP1_ERROR
 0x00700048

	)

115 
	#XB_MMQ_ERROR
 0x00700050

	)

123 
	#XB_MIQ_ERROR
 0x00700058

	)

134 
	#XB_NOQ_ERROR
 0x00700060

	)

138 
	#XB_NIQ_ERROR
 0x00700068

	)

142 
	#XB_IOQ_ERROR
 0x00700070

	)

146 
	#XB_IIQ_ERROR
 0x00700078

	)

150 
	#XB_LOQ_ERROR
 0x00700080

	)

154 
	#XB_LIQ_ERROR
 0x00700088

	)

158 
	#XB_DEBUG_DATA_CTL
 0x00700098

	)

165 
	#XB_DEBUG_ARB_CTL
 0x007000A0

	)

172 
	#XB_POQ0_ERROR_CLEAR
 0x00700120

	)

180 
	#XB_PIQ0_ERROR_CLEAR
 0x00700128

	)

188 
	#XB_POQ1_ERROR_CLEAR
 0x00700130

	)

196 
	#XB_PIQ1_ERROR_CLEAR
 0x00700138

	)

204 
	#XB_MP0_ERROR_CLEAR
 0x00700140

	)

211 
	#XB_MP1_ERROR_CLEAR
 0x00700148

	)

218 
	#XB_MMQ_ERROR_CLEAR
 0x00700150

	)

225 
	#XB_XM_MIQ_ERROR_CLEAR
 0x00700158

	)

232 
	#XB_NOQ_ERROR_CLEAR
 0x00700160

	)

239 
	#XB_NIQ_ERROR_CLEAR
 0x00700168

	)

246 
	#XB_IOQ_ERROR_CLEAR
 0x00700170

	)

253 
	#XB_IIQ_ERROR_CLEAR
 0x00700178

	)

260 
	#XB_LOQ_ERROR_CLEAR
 0x00700180

	)

267 
	#XB_LIQ_ERROR_CLEAR
 0x00700188

	)

274 
	#XB_FIRST_ERROR_CLEAR
 0x00700190

	)

284 #ifde‡
_LANGUAGE_C


296 
	uxb_∑rms_u
 {

297 
bdrkªg_t
 
	mxb_∑rms_ªgvÆ
;

299 
bdrkªg_t
 
	mp_r§vd
 : 12;

300 
bdrkªg_t
 
	mp_èû_to_wøp
 : 20;

301 
bdrkªg_t
 
	mp_dódlock_to_wøp
 : 20;

302 
bdrkªg_t
 
	mp_age_wøp
 : 8;

303 
bdrkªg_t
 
	mp_r§vd_1
 : 3;

304 
bdrkªg_t
 
	mp_byp_í
 : 1;

305 } 
	mxb_∑rms_Êd_s
;

306 } 
	txb_∑rms_u_t
;

326 
	uxb_¶ow_g¡_u
 {

327 
bdrkªg_t
 
	mxb_¶ow_g¡_ªgvÆ
;

329 
bdrkªg_t
 
	msg_r§vd
 : 32;

330 
bdrkªg_t
 
	msg_pi0_¶ow_g¡
 : 4;

331 
bdrkªg_t
 
	msg_pi1_¶ow_g¡
 : 4;

332 
bdrkªg_t
 
	msg_mp0_¶ow_g¡
 : 4;

333 
bdrkªg_t
 
	msg_mp1_¶ow_g¡
 : 4;

334 
bdrkªg_t
 
	msg_mmq_¶ow_g¡
 : 4;

335 
bdrkªg_t
 
	msg_ni_¶ow_g¡
 : 4;

336 
bdrkªg_t
 
	msg_ii_¶ow_g¡
 : 4;

337 
bdrkªg_t
 
	msg_lb_¶ow_g¡
 : 4;

338 } 
	mxb_¶ow_g¡_Êd_s
;

339 } 
	txb_¶ow_g¡_u_t
;

356 
	uxb_•ew_c⁄åﬁ_u
 {

357 
bdrkªg_t
 
	mxb_•ew_c⁄åﬁ_ªgvÆ
;

359 
bdrkªg_t
 
	msc_r§vd
 : 53;

360 
bdrkªg_t
 
	msc_¢o›_poq0
 : 1;

361 
bdrkªg_t
 
	msc_¢o›_mp0
 : 1;

362 
bdrkªg_t
 
	msc_¢o›_mmq
 : 1;

363 
bdrkªg_t
 
	msc_¢o›_noq
 : 1;

364 
bdrkªg_t
 
	msc_¢o›_ioq
 : 1;

365 
bdrkªg_t
 
	msc_¢o›_loq
 : 1;

366 
bdrkªg_t
 
	msc_¢o›_piq0
 : 1;

367 
bdrkªg_t
 
	msc_¢o›_miq
 : 1;

368 
bdrkªg_t
 
	msc_¢o›_niq
 : 1;

369 
bdrkªg_t
 
	msc_¢o›_iiq
 : 1;

370 
bdrkªg_t
 
	msc_¢o›_liq
 : 1;

371 } 
	mxb_•ew_c⁄åﬁ_Êd_s
;

372 } 
	txb_•ew_c⁄åﬁ_u_t
;

388 
	uxb_ioq_¨b_åiggî_u
 {

389 
bdrkªg_t
 
	mxb_ioq_¨b_åiggî_ªgvÆ
;

391 
bdrkªg_t
 
	müt_r§vd
 : 60;

392 
bdrkªg_t
 
	müt_ioq_¨b_åiggî
 : 4;

393 } 
	mxb_ioq_¨b_åiggî_Êd_s
;

394 } 
	txb_ioq_¨b_åiggî_u_t
;

409 
	uxb_poq0_îr‹_u
 {

410 
bdrkªg_t
 
	mxb_poq0_îr‹_ªgvÆ
;

412 
bdrkªg_t
 
	m≥_r§vd
 : 44;

413 
bdrkªg_t
 
	m≥_unu£d
 : 6;

414 
bdrkªg_t
 
	m≥_èû_timeout
 : 2;

415 
bdrkªg_t
 
	m≥_r§vd_1
 : 2;

416 
bdrkªg_t
 
	m≥_undîÊow
 : 2;

417 
bdrkªg_t
 
	m≥_r§vd_2
 : 2;

418 
bdrkªg_t
 
	m≥_ovîÊow
 : 2;

419 
bdrkªg_t
 
	m≥_r§vd_3
 : 2;

420 
bdrkªg_t
 
	m≥_övÆid_x£l
 : 2;

421 } 
	mxb_poq0_îr‹_Êd_s
;

422 } 
	txb_poq0_îr‹_u_t
;

437 
	uxb_piq0_îr‹_u
 {

438 
bdrkªg_t
 
	mxb_piq0_îr‹_ªgvÆ
;

440 
bdrkªg_t
 
	m≥_r§vd
 : 58;

441 
bdrkªg_t
 
	m≥_dódlock_timeout
 : 2;

442 
bdrkªg_t
 
	m≥_r§vd_1
 : 2;

443 
bdrkªg_t
 
	m≥_ovîÊow
 : 2;

444 } 
	mxb_piq0_îr‹_Êd_s
;

445 } 
	txb_piq0_îr‹_u_t
;

461 
	uxb_mp0_îr‹_u
 {

462 
bdrkªg_t
 
	mxb_mp0_îr‹_ªgvÆ
;

464 
bdrkªg_t
 
	mme_r§vd
 : 50;

465 
bdrkªg_t
 
	mme_èû_timeout
 : 2;

466 
bdrkªg_t
 
	mme_r§vd_1
 : 2;

467 
bdrkªg_t
 
	mme_undîÊow
 : 2;

468 
bdrkªg_t
 
	mme_r§vd_2
 : 2;

469 
bdrkªg_t
 
	mme_ovîÊow
 : 2;

470 
bdrkªg_t
 
	mme_r§vd_3
 : 4;

471 } 
	mxb_mp0_îr‹_Êd_s
;

472 } 
	txb_mp0_îr‹_u_t
;

486 
	uxb_miq_îr‹_u
 {

487 
bdrkªg_t
 
	mxb_miq_îr‹_ªgvÆ
;

489 
bdrkªg_t
 
	mme_r§vd
 : 56;

490 
bdrkªg_t
 
	mme_dódlock_timeout
 : 4;

491 
bdrkªg_t
 
	mme_r§vd_1
 : 4;

492 } 
	mxb_miq_îr‹_Êd_s
;

493 } 
	txb_miq_îr‹_u_t
;

507 
	uxb_noq_îr‹_u
 {

508 
bdrkªg_t
 
	mxb_noq_îr‹_ªgvÆ
;

510 
bdrkªg_t
 
	m√_r§vd
 : 48;

511 
bdrkªg_t
 
	m√_èû_timeout
 : 4;

512 
bdrkªg_t
 
	m√_undîÊow
 : 4;

513 
bdrkªg_t
 
	m√_ovîÊow
 : 4;

514 
bdrkªg_t
 
	m√_rsvd
 : 4;

515 } 
	mxb_noq_îr‹_Êd_s
;

516 } 
	txb_noq_îr‹_u_t
;

530 
	uxb_loq_îr‹_u
 {

531 
bdrkªg_t
 
	mxb_loq_îr‹_ªgvÆ
;

533 
bdrkªg_t
 
	mÀ_r§vd
 : 50;

534 
bdrkªg_t
 
	mÀ_èû_timeout
 : 2;

535 
bdrkªg_t
 
	mÀ_rsvd
 : 2;

536 
bdrkªg_t
 
	mÀ_undîÊow
 : 2;

537 
bdrkªg_t
 
	mÀ_r§vd_1
 : 6;

538 
bdrkªg_t
 
	mÀ_övÆid_x£l
 : 2;

539 } 
	mxb_loq_îr‹_Êd_s
;

540 } 
	txb_loq_îr‹_u_t
;

556 
	uxb_liq_îr‹_u
 {

557 
bdrkªg_t
 
	mxb_liq_îr‹_ªgvÆ
;

559 
bdrkªg_t
 
	mÀ_r§vd
 : 59;

560 
bdrkªg_t
 
	mÀ_dódlock_timeout
 : 1;

561 
bdrkªg_t
 
	mÀ_r§vd_1
 : 3;

562 
bdrkªg_t
 
	mÀ_ovîÊow
 : 1;

563 } 
	mxb_liq_îr‹_Êd_s
;

564 } 
	txb_liq_îr‹_u_t
;

584 
	uxb_fú°_îr‹_u
 {

585 
bdrkªg_t
 
	mxb_fú°_îr‹_ªgvÆ
;

587 
bdrkªg_t
 
	m„_r§vd
 : 51;

588 
bdrkªg_t
 
	m„_vÆid
 : 1;

589 
bdrkªg_t
 
	m„_sour˚
 : 4;

590 
bdrkªg_t
 
	m„_ch™√l
 : 4;

591 
bdrkªg_t
 
	m„_ty≥
 : 4;

592 } 
	mxb_fú°_îr‹_Êd_s
;

593 } 
	txb_fú°_îr‹_u_t
;

611 
	uxb_debug_d©a_˘l_u
 {

612 
bdrkªg_t
 
	mxb_debug_d©a_˘l_ªgvÆ
;

614 
bdrkªg_t
 
	mddc_r§vd
 : 48;

615 
bdrkªg_t
 
	mddc_ob£rve_lod©a
 : 1;

616 
bdrkªg_t
 
	mddc_ob£rve_sour˚_fõld
 : 1;

617 
bdrkªg_t
 
	mddc_ob£rve_poq0_åaffic
 : 1;

618 
bdrkªg_t
 
	mddc_ob£rve_poq1_åaffic
 : 1;

619 
bdrkªg_t
 
	mddc_ob£rve_mmq_åaffic
 : 1;

620 
bdrkªg_t
 
	mddc_ob£rve_mp0_åaffic
 : 1;

621 
bdrkªg_t
 
	mddc_ob£rve_mp1_åaffic
 : 1;

622 
bdrkªg_t
 
	mddc_ob£rve_noq_åaffic
 : 1;

623 
bdrkªg_t
 
	mddc_ob£rve_ioq_åaffic
 : 1;

624 
bdrkªg_t
 
	mddc_ob£rve_loq_åaffic
 : 1;

625 
bdrkªg_t
 
	mddc_ob£rve_piq0_åaffic
 : 1;

626 
bdrkªg_t
 
	mddc_ob£rve_piq1_åaffic
 : 1;

627 
bdrkªg_t
 
	mddc_ob£rve_miq_åaffic
 : 1;

628 
bdrkªg_t
 
	mddc_ob£rve_niq_åaffic
 : 1;

629 
bdrkªg_t
 
	mddc_ob£rve_iiq_åaffic
 : 1;

630 
bdrkªg_t
 
	mddc_ob£rve_liq_åaffic
 : 1;

631 } 
	mxb_debug_d©a_˘l_Êd_s
;

632 } 
	txb_debug_d©a_˘l_u_t
;

649 
	uxb_debug_¨b_˘l_u
 {

650 
bdrkªg_t
 
	mxb_debug_¨b_˘l_ªgvÆ
;

652 
bdrkªg_t
 
	mdac_r§vd
 : 61;

653 
bdrkªg_t
 
	mdac_xb_debug_£À˘
 : 3;

654 } 
	mxb_debug_¨b_˘l_Êd_s
;

655 } 
	txb_debug_¨b_˘l_u_t
;

670 
	uxb_poq0_îr‹_˛ór_u
 {

671 
bdrkªg_t
 
	mxb_poq0_îr‹_˛ór_ªgvÆ
;

673 
bdrkªg_t
 
	m≥c_r§vd
 : 44;

674 
bdrkªg_t
 
	m≥c_unu£d
 : 6;

675 
bdrkªg_t
 
	m≥c_èû_timeout
 : 2;

676 
bdrkªg_t
 
	m≥c_r§vd_1
 : 2;

677 
bdrkªg_t
 
	m≥c_undîÊow
 : 2;

678 
bdrkªg_t
 
	m≥c_r§vd_2
 : 2;

679 
bdrkªg_t
 
	m≥c_ovîÊow
 : 2;

680 
bdrkªg_t
 
	m≥c_r§vd_3
 : 2;

681 
bdrkªg_t
 
	m≥c_övÆid_x£l
 : 2;

682 } 
	mxb_poq0_îr‹_˛ór_Êd_s
;

683 } 
	txb_poq0_îr‹_˛ór_u_t
;

698 
	uxb_piq0_îr‹_˛ór_u
 {

699 
bdrkªg_t
 
	mxb_piq0_îr‹_˛ór_ªgvÆ
;

701 
bdrkªg_t
 
	m≥c_r§vd
 : 58;

702 
bdrkªg_t
 
	m≥c_dódlock_timeout
 : 2;

703 
bdrkªg_t
 
	m≥c_r§vd_1
 : 2;

704 
bdrkªg_t
 
	m≥c_ovîÊow
 : 2;

705 } 
	mxb_piq0_îr‹_˛ór_Êd_s
;

706 } 
	txb_piq0_îr‹_˛ór_u_t
;

722 
	uxb_mp0_îr‹_˛ór_u
 {

723 
bdrkªg_t
 
	mxb_mp0_îr‹_˛ór_ªgvÆ
;

725 
bdrkªg_t
 
	mmec_r§vd
 : 50;

726 
bdrkªg_t
 
	mmec_èû_timeout
 : 2;

727 
bdrkªg_t
 
	mmec_r§vd_1
 : 2;

728 
bdrkªg_t
 
	mmec_undîÊow
 : 2;

729 
bdrkªg_t
 
	mmec_r§vd_2
 : 2;

730 
bdrkªg_t
 
	mmec_ovîÊow
 : 2;

731 
bdrkªg_t
 
	mmec_r§vd_3
 : 4;

732 } 
	mxb_mp0_îr‹_˛ór_Êd_s
;

733 } 
	txb_mp0_îr‹_˛ór_u_t
;

747 
	uxb_xm_miq_îr‹_˛ór_u
 {

748 
bdrkªg_t
 
	mxb_xm_miq_îr‹_˛ór_ªgvÆ
;

750 
bdrkªg_t
 
	mxmec_r§vd
 : 56;

751 
bdrkªg_t
 
	mxmec_dódlock_timeout
 : 4;

752 
bdrkªg_t
 
	mxmec_r§vd_1
 : 4;

753 } 
	mxb_xm_miq_îr‹_˛ór_Êd_s
;

754 } 
	txb_xm_miq_îr‹_˛ór_u_t
;

768 
	uxb_noq_îr‹_˛ór_u
 {

769 
bdrkªg_t
 
	mxb_noq_îr‹_˛ór_ªgvÆ
;

771 
bdrkªg_t
 
	m√c_r§vd
 : 48;

772 
bdrkªg_t
 
	m√c_èû_timeout
 : 4;

773 
bdrkªg_t
 
	m√c_undîÊow
 : 4;

774 
bdrkªg_t
 
	m√c_ovîÊow
 : 4;

775 
bdrkªg_t
 
	m√c_rsvd
 : 4;

776 } 
	mxb_noq_îr‹_˛ór_Êd_s
;

777 } 
	txb_noq_îr‹_˛ór_u_t
;

791 
	uxb_loq_îr‹_˛ór_u
 {

792 
bdrkªg_t
 
	mxb_loq_îr‹_˛ór_ªgvÆ
;

794 
bdrkªg_t
 
	mÀc_r§vd
 : 50;

795 
bdrkªg_t
 
	mÀc_èû_timeout
 : 2;

796 
bdrkªg_t
 
	mÀc_rsvd
 : 2;

797 
bdrkªg_t
 
	mÀc_undîÊow
 : 2;

798 
bdrkªg_t
 
	mÀc_r§vd_1
 : 6;

799 
bdrkªg_t
 
	mÀc_övÆid_x£l
 : 2;

800 } 
	mxb_loq_îr‹_˛ór_Êd_s
;

801 } 
	txb_loq_îr‹_˛ór_u_t
;

817 
	uxb_liq_îr‹_˛ór_u
 {

818 
bdrkªg_t
 
	mxb_liq_îr‹_˛ór_ªgvÆ
;

820 
bdrkªg_t
 
	mÀc_r§vd
 : 59;

821 
bdrkªg_t
 
	mÀc_dódlock_timeout
 : 1;

822 
bdrkªg_t
 
	mÀc_r§vd_1
 : 3;

823 
bdrkªg_t
 
	mÀc_ovîÊow
 : 1;

824 } 
	mxb_liq_îr‹_˛ór_Êd_s
;

825 } 
	txb_liq_îr‹_˛ór_u_t
;

845 
	uxb_fú°_îr‹_˛ór_u
 {

846 
bdrkªg_t
 
	mxb_fú°_îr‹_˛ór_ªgvÆ
;

848 
bdrkªg_t
 
	m„c_r§vd
 : 51;

849 
bdrkªg_t
 
	m„c_vÆid
 : 1;

850 
bdrkªg_t
 
	m„c_sour˚
 : 4;

851 
bdrkªg_t
 
	m„c_ch™√l
 : 4;

852 
bdrkªg_t
 
	m„c_ty≥
 : 4;

853 } 
	mxb_fú°_îr‹_˛ór_Êd_s
;

854 } 
	txb_fú°_îr‹_˛ór_u_t
;

	@/usr/include/sys/SN/SN1/hubxb_next.h

19 #i‚de‡
__SYS_SN_SN1_HUBXB_NEXT_H__


20 
	#__SYS_SN_SN1_HUBXB_NEXT_H__


	)

23 
	#XVE_SOURCE_POQ0
 0x‡

	)

24 
	#XVE_SOURCE_PIQ0
 0xê

	)

25 
	#XVE_SOURCE_POQ1
 0xd

	)

26 
	#XVE_SOURCE_PIQ1
 0x¯

	)

27 
	#XVE_SOURCE_MP0
 0xb

	)

28 
	#XVE_SOURCE_MP1
 0x®

	)

29 
	#XVE_SOURCE_MMQ
 0x9

	)

30 
	#XVE_SOURCE_MIQ
 0x8

	)

31 
	#XVE_SOURCE_NOQ
 0x7

	)

32 
	#XVE_SOURCE_NIQ
 0x6

	)

33 
	#XVE_SOURCE_IOQ
 0x5

	)

34 
	#XVE_SOURCE_IIQ
 0x4

	)

35 
	#XVE_SOURCE_LOQ
 0x3

	)

36 
	#XVE_SOURCE_LIQ
 0x2

	)

39 
	#XBP_RESET_DEFAULTS
 0x0008000080000021LL

	)

40 
	#XBP_ACTIVE_DEFAULTS
 0x00080000fffff021LL

	)

	@/usr/include/sys/SN/SN1/router.h

13 #i‚def 
__SYS_SN_SN1_ROUTER_H__


14 
	#__SYS_SN_SN1_ROUTER_H__


	)

24 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

26 
	~<sys/SN/ve˘‹.h
>

27 
	~<sys/SN/¶Ÿnum.h
>

28 
	~<sys/SN/¨ch.h
>

29 
	~<sys/time.h
>

30 
	~<sys/£ma.h
>

32 
__uöt64_t
 
	trouãr_ªg_t
;

34 
	#MAX_ROUTERS
 128

	)

36 
	#MAX_ROUTER_PATH
 80

	)

38 
	#ROUTER_REG_CAST
 (vﬁ©ûê
rouãr_ªg_t
 *)

	)

39 
	#PS_UINT_CAST
 (
__psunsig√d_t
)

	)

40 
	#UINT64_CAST
 (
__uöt64_t
)

	)

41 sig√d 
	tp‹t_no_t
;

43 #ñi‡
_LANGUAGE_ASSEMBLY


45 
	#ROUTERREG_CAST


	)

46 
	#PS_UINT_CAST


	)

47 
	#UINT64_CAST


	)

51 
	#MAX_ROUTER_PORTS
 (8Ë

	)

53 
	#ALL_PORTS
 ((1 << 
MAX_ROUTER_PORTS
Ë- 1Ë

	)

55 
	#PORT_INVALID
 (-1Ë

	)

57 
	#IS_META
(
_Ω
Ë((_Ω)->
Êags
 & 
PCFG_ROUTER_META
)

	)

59 
	#IS_REPEATER
(
_Ω
)((_Ω)->
Êags
 & 
PCFG_ROUTER_REPEATER
)

	)

71 
	#RR_TURN
(
_L
, 
cou¡
Ë((_LË+ (cou¡Ë> 
MAX_ROUTER_PORTS
 ? \

72 (
_L
Ë+ (
cou¡
Ë- 
MAX_ROUTER_PORTS
 : \

73 (
_L
Ë+ (
cou¡
))

	)

75 
	#RR_DISTANCE
(
_LS
, 
_LD
) ((_LD) >= (_LS) ? \

76 (
_LD
Ë- (
_LS
) : \

77 (
_LD
Ë+ 
MAX_ROUTER_PORTS
 - (
_LS
))

	)

81 
	#RR_STATUS_REV_ID
 0x00000

	)

82 
	#RR_PORT_RESET
 0x00008

	)

83 
	#RR_PROT_CONF
 0x00010

	)

84 
	#RR_GLOBAL_PORT_DEF
 0x00018

	)

85 
	#RR_GLOBAL_PARMS0
 0x00020

	)

86 
	#RR_GLOBAL_PARMS1
 0x00028

	)

87 
	#RR_DIAG_PARMS
 0x00030

	)

88 
	#RR_DEBUG_ADDR
 0x00038

	)

89 
	#RR_LB_TO_L2
 0x00040

	)

90 
	#RR_L2_TO_LB
 0x00048

	)

91 
	#RR_JBUS_CONTROL
 0x00050

	)

93 
	#RR_SCRATCH_REG0
 0x00100

	)

94 
	#RR_SCRATCH_REG1
 0x00108

	)

95 
	#RR_SCRATCH_REG2
 0x00110

	)

96 
	#RR_SCRATCH_REG3
 0x00118

	)

97 
	#RR_SCRATCH_REG4
 0x00120

	)

99 
	#RR_JBUS0
(
_D
Ë(((_DË& 0x7Ë<< 3 | 0x00200Ë

	)

100 
	#RR_JBUS1
(
_D
Ë(((_DË& 0x7Ë<< 3 | 0x00240Ë

	)

102 
	#RR_SCRATCH_REG0_WZ
 0x00500

	)

103 
	#RR_SCRATCH_REG1_WZ
 0x00508

	)

104 
	#RR_SCRATCH_REG2_WZ
 0x00510

	)

105 
	#RR_SCRATCH_REG3_SZ
 0x00518

	)

106 
	#RR_SCRATCH_REG4_SZ
 0x00520

	)

108 
	#RR_VECTOR_HW_BAR
(
c⁄ãxt
Ë(0x08000 | (c⁄ãxt)<<3Ë

	)

111 
	#RR_PORT_PARMS
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0000Ë

	)

112 
	#RR_STATUS_ERROR
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0008Ë

	)

113 
	#RR_CHANNEL_TEST
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0010Ë

	)

114 
	#RR_RESET_MASK
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0018Ë

	)

115 
	#RR_HISTOGRAM0
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0020Ë

	)

116 
	#RR_HISTOGRAM1
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0028Ë

	)

117 
	#RR_HISTOGRAM0_WC
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0030Ë

	)

118 
	#RR_HISTOGRAM1_WC
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0038Ë

	)

119 
	#RR_ERROR_CLEAR
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0088Ë

	)

120 
	#RR_GLOBAL_TABLE0
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0100Ë

	)

121 
	#RR_GLOBAL_TABLE
(
_L
, 
_x
Ë(
	`RR_GLOBAL_TABLE0
(_LË+ ((_xË<< 3))

	)

122 
	#RR_LOCAL_TABLE0
(
_L
Ë(((_L+1Ë& 0xeË<< 15 | ((_L+1Ë& 0x1Ë<< 11 | 0x0200Ë

	)

123 
	#RR_LOCAL_TABLE
(
_L
, 
_x
Ë(
	`RR_LOCAL_TABLE0
(_LË+ ((_xË<< 3))

	)

125 
	#RR_META_ENTRIES
 16

	)

127 
	#RR_LOCAL_ENTRIES
 128

	)

133 
	#RSRI_INPORT_SHFT
 52

	)

134 
	#RSRI_INPORT_MASK
 (
UINT64_CAST
 0x‡<< 52)

	)

135 
	#RSRI_LINKWORKING_BIT
(
_L
Ë(35 + 2 * (_L))

	)

136 
	#RSRI_LINKWORKING
(
_L
Ë(
UINT64_CAST
 1 << (35 + 2 * (_L)))

	)

137 
	#RSRI_LINKRESETFAIL
(
_L
Ë(
UINT64_CAST
 1 << (34 + 2 * (_L)))

	)

138 
	#RSRI_LSTAT_SHFT
(
_L
Ë(34 + 2 * (_L))

	)

139 
	#RSRI_LSTAT_MASK
(
_L
Ë(
UINT64_CAST
 0x3 << 34 + 2 * (_L))

	)

140 
	#RSRI_LOCALSBERROR
 (
UINT64_CAST
 1 << 35)

	)

141 
	#RSRI_LOCALSTUCK
 (
UINT64_CAST
 1 << 34)

	)

142 
	#RSRI_LOCALBADVEC
 (
UINT64_CAST
 1 << 33)

	)

143 
	#RSRI_LOCALTAILERR
 (
UINT64_CAST
 1 << 32)

	)

144 
	#RSRI_LOCAL_SHFT
 32

	)

145 
	#RSRI_LOCAL_MASK
 (
UINT64_CAST
 0x‡<< 32)

	)

146 
	#RSRI_CHIPREV_SHFT
 28

	)

147 
	#RSRI_CHIPREV_MASK
 (
UINT64_CAST
 0x‡<< 28)

	)

148 
	#RSRI_CHIPID_SHFT
 12

	)

149 
	#RSRI_CHIPID_MASK
 (
UINT64_CAST
 0xfff‡<< 12)

	)

150 
	#RSRI_MFGID_SHFT
 1

	)

151 
	#RSRI_MFGID_MASK
 (
UINT64_CAST
 0x7f‡<< 1)

	)

153 
	#RSRI_LSTAT_WENTDOWN
 0

	)

154 
	#RSRI_LSTAT_RESETFAIL
 1

	)

155 
	#RSRI_LSTAT_LINKUP
 2

	)

156 
	#RSRI_LSTAT_NOTUSED
 3

	)

162 
	#RPRESET_WARM
 (
UINT64_CAST
 1 << 9)

	)

163 
	#RPRESET_LINK
(
_L
Ë(
UINT64_CAST
 1 << (_L))

	)

164 
	#RPRESET_LOCAL
 (
UINT64_CAST
 1)

	)

170 
	#RPCONF_DIRCMPDIS_SHFT
 13

	)

171 
	#RPCONF_DIRCMPDIS_MASK
 (
UINT64_CAST
 1 << 13)

	)

172 
	#RPCONF_FORCELOCAL
 (
UINT64_CAST
 1 << 12)

	)

173 
	#RPCONF_FLOCAL_SHFT
 12

	)

174 
	#RPCONF_METAID_SHFT
 8

	)

175 
	#RPCONF_METAID_MASK
 (
UINT64_CAST
 0x‡<< 8)

	)

176 
	#RPCONF_RESETOK
(
_L
Ë(
UINT64_CAST
 1 << ((_LË- 1))

	)

182 
	#RGPD_MGLBLNHBR_ID_SHFT
 12

	)

183 
	#RGPD_MGLBLNHBR_ID_MASK
 (
UINT64_CAST
 0x‡<< 12)

	)

184 
	#RGPD_MGLBLNHBR_VLD_SHFT
 11

	)

185 
	#RGPD_MGLBLNHBR_VLD_MASK
 (
UINT64_CAST
 0x1 << 11)

	)

186 
	#RGPD_MGLBLPORT_SHFT
 8

	)

187 
	#RGPD_MGLBLPORT_MASK
 (
UINT64_CAST
 0x7 << 8)

	)

188 
	#RGPD_PGLBLNHBR_ID_SHFT
 4

	)

189 
	#RGPD_PGLBLNHBR_ID_MASK
 (
UINT64_CAST
 0x‡<< 4)

	)

190 
	#RGPD_PGLBLNHBR_VLD_SHFT
 3

	)

191 
	#RGPD_PGLBLNHBR_VLD_MASK
 (
UINT64_CAST
 0x1 << 3)

	)

192 
	#RGPD_PGLBLPORT_SHFT
 0

	)

193 
	#RGPD_PGLBLPORT_MASK
 (
UINT64_CAST
 0x7 << 0)

	)

195 
	#GLBL_PARMS_REGS
 2

	)

201 
	#RGPARM0_ARB_VALUE_SHFT
 54

	)

202 
	#RGPARM0_ARB_VALUE_MASK
 (
UINT64_CAST
 0x7 << 54)

	)

203 
	#RGPARM0_ROTATEARB_SHFT
 53

	)

204 
	#RGPARM0_ROTATEARB_MASK
 (
UINT64_CAST
 0x1 << 53)

	)

205 
	#RGPARM0_FAIREN_SHFT
 52

	)

206 
	#RGPARM0_FAIREN_MASK
 (
UINT64_CAST
 0x1 << 52)

	)

207 
	#RGPARM0_LOCGNTTO_SHFT
 40

	)

208 
	#RGPARM0_LOCGNTTO_MASK
 (
UINT64_CAST
 0xff‡<< 40)

	)

209 
	#RGPARM0_DATELINE_SHFT
 38

	)

210 
	#RGPARM0_DATELINE_MASK
 (
UINT64_CAST
 0x1 << 38)

	)

211 
	#RGPARM0_MAXRETRY_SHFT
 28

	)

212 
	#RGPARM0_MAXRETRY_MASK
 (
UINT64_CAST
 0x3f‡<< 28)

	)

213 
	#RGPARM0_URGWRAP_SHFT
 20

	)

214 
	#RGPARM0_URGWRAP_MASK
 (
UINT64_CAST
 0xf‡<< 20)

	)

215 
	#RGPARM0_DEADLKTO_SHFT
 16

	)

216 
	#RGPARM0_DEADLKTO_MASK
 (
UINT64_CAST
 0x‡<< 16)

	)

217 
	#RGPARM0_URGVAL_SHFT
 12

	)

218 
	#RGPARM0_URGVAL_MASK
 (
UINT64_CAST
 0x‡<< 12)

	)

219 
	#RGPARM0_VCHSELEN_SHFT
 11

	)

220 
	#RGPARM0_VCHSELEN_MASK
 (
UINT64_CAST
 0x1 << 11)

	)

221 
	#RGPARM0_LOCURGTO_SHFT
 9

	)

222 
	#RGPARM0_LOCURGTO_MASK
 (
UINT64_CAST
 0x3 << 9)

	)

223 
	#RGPARM0_TAILVAL_SHFT
 5

	)

224 
	#RGPARM0_TAILVAL_MASK
 (
UINT64_CAST
 0x‡<< 5)

	)

225 
	#RGPARM0_CLOCK_SHFT
 1

	)

226 
	#RGPARM0_CLOCK_MASK
 (
UINT64_CAST
 0x‡<< 1)

	)

227 
	#RGPARM0_BYPEN_SHFT
 0

	)

228 
	#RGPARM0_BYPEN_MASK
 (
UINT64_CAST
 1Ë

	)

234 
	#RGPARM1_TTOWRAP_SHFT
 12

	)

235 
	#RGPARM1_TTOWRAP_MASK
 (
UINT64_CAST
 0xffff‡<< 12)

	)

236 
	#RGPARM1_AGERATE_SHFT
 8

	)

237 
	#RGPARM1_AGERATE_MASK
 (
UINT64_CAST
 0x‡<< 8)

	)

238 
	#RGPARM1_JSWSTAT_SHFT
 0

	)

239 
	#RGPARM1_JSWSTAT_MASK
 (
UINT64_CAST
 0xf‡<< 0)

	)

245 
	#RDPARM_ABSHISTOGRAM
 (
UINT64_CAST
 1 << 17Ë

	)

246 
	#RDPARM_DEADLOCKRESET
 (
UINT64_CAST
 1 << 16Ë

	)

247 
	#RDPARM_DISABLE
(
_L
Ë(
UINT64_CAST
 1 << ((_LË+ 7))

	)

248 
	#RDPARM_SENDERROR
(
_L
Ë(
UINT64_CAST
 1 << ((_LË- 1))

	)

254 
	#RDA_DATA_SHFT
 10

	)

255 
	#RDA_DATA_MASK
 (
UINT64_CAST
 0xfff‡<< 10)

	)

256 
	#RDA_ADDR_SHFT
 0

	)

257 
	#RDA_ADDR_MASK
 (
UINT64_CAST
 0x3f‡<< 0)

	)

263 
	#RLBTOL2_DATA_VLD_SHFT
 32

	)

264 
	#RLBTOL2_DATA_VLD_MASK
 (
UINT64_CAST
 0x1 << 32)

	)

265 
	#RLBTOL2_DATA_SHFT
 0

	)

266 
	#RLBTOL2_DATA_MASK
 (
UINT64_CAST
 0xffffffff)

	)

272 
	#RL2TOLB_DATA_VLD_SHFT
 33

	)

273 
	#RL2TOLB_DATA_VLD_MASK
 (
UINT64_CAST
 0x1 << 33)

	)

274 
	#RL2TOLB_PARITY_SHFT
 32

	)

275 
	#RL2TOLB_PARITY_MASK
 (
UINT64_CAST
 0x1 << 32)

	)

276 
	#RL2TOLB_DATA_SHFT
 0

	)

277 
	#RL2TOLB_DATA_MASK
 (
UINT64_CAST
 0xffffffff)

	)

283 
	#RJC_POS_BITS_SHFT
 20

	)

284 
	#RJC_POS_BITS_MASK
 (
UINT64_CAST
 0x‡<< 20)

	)

285 
	#RJC_RD_DATA_STROBE_SHFT
 16

	)

286 
	#RJC_RD_DATA_STROBE_MASK
 (
UINT64_CAST
 0x‡<< 16)

	)

287 
	#RJC_WE_OE_HOLD_SHFT
 8

	)

288 
	#RJC_WE_OE_HOLD_MASK
 (
UINT64_CAST
 0xf‡<< 8)

	)

289 
	#RJC_ADDR_SET_HLD_SHFT
 0

	)

290 
	#RJC_ADDR_SET_HLD_MASK
 (
UINT64_CAST
 0xff)

	)

298 
	#RSCR0_BOOTED_SHFT
 63

	)

299 
	#RSCR0_BOOTED_MASK
 (
UINT64_CAST
 0x1 << 
RSCR0_BOOTED_SHFT
)

	)

300 
	#RSCR0_LOCALID_SHFT
 56

	)

301 
	#RSCR0_LOCALID_MASK
 (
UINT64_CAST
 0x7‡<< 
RSCR0_LOCALID_SHFT
)

	)

302 
	#RSCR0_UNUSED_SHFT
 48

	)

303 
	#RSCR0_UNUSED_MASK
 (
UINT64_CAST
 0xf‡<< 
RSCR0_UNUSED_SHFT
)

	)

304 
	#RSCR0_NIC_SHFT
 0

	)

305 
	#RSCR0_NIC_MASK
 (
UINT64_CAST
 0xffffffffffff)

	)

307 
	#RSCR1_MODID_SHFT
 0

	)

308 
	#RSCR1_MODID_MASK
 (
UINT64_CAST
 0xffff)

	)

314 
	#BAR_TX_SHFT
 27

	)

315 
	#BAR_TX_MASK
 (
UINT64_CAST
 1 << 
BAR_TX_SHFT
)

	)

316 
	#BAR_VLD_SHFT
 26

	)

317 
	#BAR_VLD_MASK
 (
UINT64_CAST
 1 << 
BAR_VLD_SHFT
)

	)

318 
	#BAR_SEQ_SHFT
 24

	)

319 
	#BAR_SEQ_MASK
 (
UINT64_CAST
 3 << 
BAR_SEQ_SHFT
)

	)

320 
	#BAR_LEAFSTATE_SHFT
 18

	)

321 
	#BAR_LEAFSTATE_MASK
 (
UINT64_CAST
 0x3‡<< 
BAR_LEAFSTATE_SHFT
)

	)

322 
	#BAR_PARENT_SHFT
 14

	)

323 
	#BAR_PARENT_MASK
 (
UINT64_CAST
 0x‡<< 
BAR_PARENT_SHFT
)

	)

324 
	#BAR_CHILDREN_SHFT
 6

	)

325 
	#BAR_CHILDREN_MASK
 (
UINT64_CAST
 0xf‡<< 
BAR_CHILDREN_SHFT
)

	)

326 
	#BAR_LEAFCOUNT_SHFT
 0

	)

327 
	#BAR_LEAFCOUNT_MASK
 (
UINT64_CAST
 0x3f)

	)

333 
	#RPPARM_MIPRESETEN_SHFT
 29

	)

334 
	#RPPARM_MIPRESETEN_MASK
 (
UINT64_CAST
 0x1 << 29)

	)

335 
	#RPPARM_UBAREN_SHFT
 28

	)

336 
	#RPPARM_UBAREN_MASK
 (
UINT64_CAST
 0x1 << 28)

	)

337 
	#RPPARM_OUTPDTO_SHFT
 24

	)

338 
	#RPPARM_OUTPDTO_MASK
 (
UINT64_CAST
 0x‡<< 24)

	)

339 
	#RPPARM_PORTMATE_SHFT
 21

	)

340 
	#RPPARM_PORTMATE_MASK
 (
UINT64_CAST
 0x7 << 21)

	)

341 
	#RPPARM_HISTEN_SHFT
 20

	)

342 
	#RPPARM_HISTEN_MASK
 (
UINT64_CAST
 0x1 << 20)

	)

343 
	#RPPARM_HISTSEL_SHFT
 18

	)

344 
	#RPPARM_HISTSEL_MASK
 (
UINT64_CAST
 0x3 << 18)

	)

345 
	#RPPARM_DAMQHS_SHFT
 16

	)

346 
	#RPPARM_DAMQHS_MASK
 (
UINT64_CAST
 0x3 << 16)

	)

347 
	#RPPARM_NULLTO_SHFT
 10

	)

348 
	#RPPARM_NULLTO_MASK
 (
UINT64_CAST
 0x3‡<< 10)

	)

349 
	#RPPARM_MAXBURST_SHFT
 0

	)

350 
	#RPPARM_MAXBURST_MASK
 (
UINT64_CAST
 0x3ff)

	)

357 
	#RPPARM_HISTSEL_AGE
 0

	)

358 
	#RPPARM_HISTSEL_UTIL
 1

	)

359 
	#RPPARM_HISTSEL_DAMQ
 2

	)

364 
	#RSERR_POWERNOK
 (
UINT64_CAST
 1 << 38)

	)

365 
	#RSERR_PORT_DEADLOCK
 (
UINT64_CAST
 1 << 37)

	)

366 
	#RSERR_WARMRESET
 (
UINT64_CAST
 1 << 36)

	)

367 
	#RSERR_LINKRESET
 (
UINT64_CAST
 1 << 35)

	)

368 
	#RSERR_RETRYTIMEOUT
 (
UINT64_CAST
 1 << 34)

	)

369 
	#RSERR_FIFOOVERFLOW
 (
UINT64_CAST
 1 << 33)

	)

370 
	#RSERR_ILLEGALPORT
 (
UINT64_CAST
 1 << 32)

	)

371 
	#RSERR_DEADLOCKTO_SHFT
 28

	)

372 
	#RSERR_DEADLOCKTO_MASK
 (
UINT64_CAST
 0x‡<< 28)

	)

373 
	#RSERR_RECVTAILTO_SHFT
 24

	)

374 
	#RSERR_RECVTAILTO_MASK
 (
UINT64_CAST
 0x‡<< 24)

	)

375 
	#RSERR_RETRYCNT_SHFT
 16

	)

376 
	#RSERR_RETRYCNT_MASK
 (
UINT64_CAST
 0xf‡<< 16)

	)

377 
	#RSERR_CBERRCNT_SHFT
 8

	)

378 
	#RSERR_CBERRCNT_MASK
 (
UINT64_CAST
 0xf‡<< 8)

	)

379 
	#RSERR_SNERRCNT_SHFT
 0

	)

380 
	#RSERR_SNERRCNT_MASK
 (
UINT64_CAST
 0xf‡<< 0)

	)

383 
	#PORT_STATUS_UP
 (1 << 0Ë

	)

384 
	#PORT_STATUS_FENCE
 (1 << 1Ë

	)

385 
	#PORT_STATUS_RESETFAIL
 (1 << 2Ë

	)

387 
	#PORT_STATUS_DISCFAIL
 (1 << 3Ë

	)

392 
	#PORT_STATUS_KERNFAIL
 (1 << 4Ë

	)

397 
	#PORT_STATUS_UNDEF
 (1 << 5Ë

	)

401 
	#PROBE_RESULT_BAD
 (-1Ë

	)

404 
	#PROBE_RESULT_GOOD
 (0Ë

	)

410 
	#MAX_RTR_BREADTH
 64

	)

413 
	#GET_FIELD
(
v¨
, 
‚ame
) \

414 ((
v¨
Ë>> 
‚ame
##
_SHFT
 & f«me##
_MASK
 >> f«me##_SHFT)

	)

416 
	#SET_FIELD
(
v¨
, 
‚ame
, 
fvÆ
) \

417 ((
v¨
Ë(v¨Ë& ~
‚ame
##
_MASK
 | (
__uöt64_t
Ë(
fvÆ
Ë<< f«me##
_SHFT
)

	)

420 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

422 
	srouãr_m≠_ít_s
 {

423 
__uöt64_t
 
	mnic
;

424 
moduÀid_t
 
	mmoduÀ
;

425 
¶Ÿid_t
 
	m¶Ÿ
;

426 } 
	trouãr_m≠_ít_t
;

428 
	sº_°©us_îr‹_fmt
 {

429 
__uöt64_t
 
	mr£º_unu£d
 : 30,

430 
	mr£º_fifoovîÊow
 : 1,

431 
	mr£º_ûÀgÆp‹t
 : 1,

432 
	mr£º_dódlockto
 : 4,

433 
	mr£º_ªcvèûto
 : 4,

434 
	mr£º_ªåy˙t
 : 8,

435 
	mr£º_cbîr˙t
 : 8,

436 
	mr£º_¢îr˙t
 : 8;

442 
	trouãr_cou¡_t
;

445 
	#RP_BYPASS_UTIL
 0

	)

446 
	#RP_RCV_UTIL
 1

	)

447 
	#RP_SEND_UTIL
 2

	)

448 
	#RP_TOTAL_PKTS
 3

	)

450 
	#RP_NUM_UTILS
 3

	)

452 
	#RP_HIST_REGS
 2

	)

453 
	#RP_NUM_BUCKETS
 4

	)

454 
	#RP_HIST_TYPES
 3

	)

456 
	#RP_AGE0
 0

	)

457 
	#RP_AGE1
 1

	)

458 
	#RP_AGE2
 2

	)

459 
	#RP_AGE3
 3

	)

462 
	#RR_UTIL_SCALE
 1024

	)

467 
	srouãr_p‹t_öfo_s
 {

468 
rouãr_ªg_t
 
	mΩ_hi°ogøms
[
RP_HIST_REGS
];

469 
rouãr_ªg_t
 
	mΩ_p‹t_îr‹
;

470 
rouãr_cou¡_t
 
	mΩ_ªåy_îr‹s
;

471 
rouãr_cou¡_t
 
	mΩ_¢_îr‹s
;

472 
rouãr_cou¡_t
 
	mΩ_cb_îr‹s
;

473 
	mΩ_ovîÊows
;

474 
	mΩ_ex˚ss_îr
;

475 
ush‹t
 
	mΩ_utû
[
RP_NUM_BUCKETS
];

476 } 
	trouãr_p‹t_öfo_t
;

478 
	#ROUTER_INFO_VERSION
 7

	)

480 
	glbﬂrd_s
;

482 #ifde‡
VECTOR_JTAG_WAR


483 
	srouãr_p‹t_öfo_sup_s
 {

484 
rouãr_cou¡_t
 
	mΩ_ªåy_œ°
;

485 
rouãr_cou¡_t
 
	mΩ_¢_œ°
;

486 
rouãr_cou¡_t
 
	mΩ_cb_œ°
;

487 } 
	trouãr_p‹t_öfo_sup_t
;

493 
	srouãr_öfo_s
 {

494 
	mri_vîsi⁄
;

495 
˙odeid_t
 
	mri_˙ode
;

496 
«sid_t
 
	mri_«sid
;

497 
	mri_Àdˇche
;

498 
	mri_Àds
;

499 
	mri_p‹tmask
;

500 
rouãr_ªg_t
 
	mri_°©_ªv_id
;

501 
√t_vec_t
 
	mri_ve˘‹
;

502 
	mri_wrôeid
;

503 
__öt64_t
 
	mri_timeba£
;

504 
__öt64_t
 
	mri_time°amp
;

505 
rouãr_p‹t_öfo_t
 
	mri_p‹t
[
MAX_ROUTER_PORTS
];

506 
moduÀid_t
 
	mri_moduÀ
;

507 
¶Ÿid_t
 
	mri_¶Ÿnum
;

508 
rouãr_ªg_t
 
	mri_glbl_∑rms
[
GLBL_PARMS_REGS
];

510 
vîãx_hdl_t
 
	mri_vîãx
;

511 
rouãr_ªg_t
 
	mri_¥Ÿ_c⁄f
;

512 
__öt64_t
 
	mri_≥r_möuã
;

521 
	mri_hi°_ty≥
;

522 
vîãx_hdl_t
 
	mri_gu¨dün
;

523 
__öt64_t
 
	mri_œ°_¥öt
;

524 
	mri_¥öt
;

525 
	mri_ju°_blök
;

527 #ifde‡
DEBUG


528 
__öt64_t
 
	mri_dñètime
;

530 
lock_t
 
	mri_lock
;

531 
√t_vec_t
 *
	mri_veˇºay
;

532 
lbﬂrd_s
 *
	mri_brd
;

533 * 
	mri_«me
;

534 
	mri_p‹t_maöt
[
MAX_ROUTER_PORTS
];

536 #ifde‡
VECTOR_JTAG_WAR


537 
rouãr_p‹t_öfo_sup_t
 
	mri_p‹t_sup
[
MAX_ROUTER_PORTS
];

539 } 
	trouãr_öfo_t
;

543 
	#RIP_PROMLOG
 2

	)

544 
	#RIP_CONSOLE
 4

	)

546 
	#ROUTER_INFO_PRINT
(
_rù
,
_whîe
Ë(_rù->
ri_¥öt
 |_whîe)

	)

550 
	#IS_ROUTER_INFO_PRINTED
(
_rù
,
_whîe
) \

551 (
_rù
->
ri_¥öt
 & 
_whîe
)

	)

557 
	#ROUTER_INFO_LOCK
(
_rù
,
_s
Ë_†
	`muãx_•ölock
(&(_rù->
ri_lock
))

	)

561 
	#ROUTER_INFO_UNLOCK
(
_rù
,
_s
Ë
	`muãx_•öu∆ock
(&(_rù->
ri_lock
),_s)

	)

566 
	snodïda_rouãr_öfo_s
 {

567 
vîãx_hdl_t
 
	mrouãr_vhdl
;

568 
	mrouãr_p‹t
;

569 
	mrouãr_p‹tmask
;

570 
moduÀid_t
 
	mrouãr_moduÀ
;

571 
¶Ÿid_t
 
	mrouãr_¶Ÿ
;

572 
	mrouãr_ty≥
;

573 
√t_vec_t
 
	mrouãr_ve˘‹
;

575 
rouãr_öfo_t
 *
	mrouãr_öf›
;

576 
nodïda_rouãr_öfo_s
 *
	mrouãr_√xt
;

578 } 
	tnodïda_rouãr_öfo_t
;

580 
	#ROUTER_NAME_SIZE
 20

	)

582 
	#NORMAL_ROUTER_NAME
 "n‹mÆ_rouãr"

	)

583 
	#NULL_ROUTER_NAME
 "nuŒ_rouãr"

	)

584 
	#META_ROUTER_NAME
 "mëa_rouãr"

	)

585 
	#REPEATER_ROUTER_NAME
 "ª≥©î_rouãr"

	)

586 
	#UNKNOWN_ROUTER_NAME
 "unknown_rouãr"

	)

592 
	srouãr_ñt_s
 {

597 
nic_t
 
	mnic
;

601 
√t_vec_t
 
	mvec
;

603 
__uöt64_t
 
	m°©us
;

604 
	mp‹t_°©us
[
MAX_ROUTER_PORTS
 + 1];

605 } 
	mr_ñt
;

611 
vîãx_hdl_t
 
	mvhdl
;

613 
vîãx_hdl_t
 
	mgu¨d
;

615 
√t_vec_t
 
	mvec
;

616 } 
	mk_ñt
;

617 } 
	mu
;

619 } 
	trouãr_ñt_t
;

623 
	srouãr_queue_s
 {

624 
	mhód
;

625 
	mèû
;

626 
	mty≥
;

627 
rouãr_ñt_t
 
	m¨øy
[
MAX_RTR_BREADTH
];

629 } 
	trouãr_queue_t
;

640 
	#RHIST_BUCKET_SHFT
(
_x
Ë(32 * ((_xË& 0x1))

	)

641 
	#RHIST_BUCKET_MASK
(
_x
Ë(
UINT64_CAST
 0xfffffff‡<< 
	`RHIST_BUCKET_SHFT
((_xË& 0x1))

	)

642 
	#RHIST_GET_BUCKET
(
_x
, 
_ªg
) \

643 ((
	`RHIST_BUCKET_MASK
(
_x
Ë& ((
_ªg
)[(_xË>> 1])Ë>> 
	`RHIST_BUCKET_SHFT
(_x))

	)

649 
	#RRM_RESETOK
(
_L
Ë(
UINT64_CAST
 1 << ((_LË- 1))

	)

650 
	#RRM_RESETOK_ALL
 
ALL_PORTS


	)

656 
	#RTABLE_SHFT
(
_L
Ë(4 * ((_LË- 1))

	)

657 
	#RTABLE_MASK
(
_L
Ë(
UINT64_CAST
 0x7 << 
	`RTABLE_SHFT
(_L))

	)

660 #i‚de‡
_STANDALONE


662 
	#ROUTERINFO_STKSZ
 4096

	)

664 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

665 #i‡
deföed
(
_LANGUAGE_C_PLUS_PLUS
)

669 
rouãr_ªg_ªad
(
rouãr_öfo_t
 *
rù
, 
ªgno
, 
rouãr_ªg_t
 *
vÆ
);

670 
rouãr_ªg_wrôe
(
rouãr_öfo_t
 *
rù
, 
ªgno
, 
rouãr_ªg_t
 
vÆ
);

671 
rouãr_gë_öfo
(
vîãx_hdl_t
 
rouãrv
, 
rouãr_öfo_t
 *, );

672 
rouãr_öô
(
˙odeid_t
 
˙ode
,
wrôeid
, 
nodïda_rouãr_öfo_t
 *
≈da_rù
);

673 
rouãr_£t_Àds
(
rouãr_öfo_t
 *
rù
);

674 
rouãr_¥öt_°©e
(
rouãr_öfo_t
 *
rù
, 
Àvñ
,

675 (*
pf
)(, *, ...),
¥öt_whîe
);

676 
ˇ±uª_rouãr_°©s
(
rouãr_öfo_t
 *
rù
);

679 
¥obe_rouãrs
();

680 
gë_rouã∫ame
(
brd_ty≥
,*
π∫ame
);

681 
rouãr_gu¨düns_£t
(
vîãx_hdl_t
 
hwgøph_roŸ
);

682 
rouãr_hi°_ª£À˘
(
rouãr_öfo_t
 *, 
__öt64_t
);

683 #i‡
deföed
(
_LANGUAGE_C_PLUS_PLUS
)

	@/usr/include/sys/SN/addrs.h

14 #i‚de‡
__SYS_SN_ADDRS_H__


15 
	#__SYS_SN_ADDRS_H__


	)

17 #i‡
_LANGUAGE_C


18 
	~<sys/ty≥s.h
>

21 #i‡
deföed
 (
SN0
)

23 
	~<sys/SN/SN0/addrs.h
>

25 #ñi‡
deföed
 (
SN1
)

27 
	~<sys/SN/SN1/addrs.h
>

28 
	~<sys/SN/SN1/bedrock.h
>

30 #ñi‡
deföed
 (
_KERNEL
)

32 #îr‹ <<<
BOMB
! 
addrs
.
h
 
deföed
 
⁄ly
 
SN0
 
™d
 
SN1
 >>>

36 
	~<sys/mùs_addr•a˚.h
>

37 
	~<sys/ªg.h
>

38 
	~<sys/SN/kldú.h
>

40 #i‡
_LANGUAGE_C


42 
	#PS_UINT_CAST
 (
__psunsig√d_t
)

	)

43 
	#UINT64_CAST
 (
__uöt64_t
)

	)

44 
	#HUBREG_CAST
 (vﬁ©ûê
hubªg_t
 *)

	)

46 #ñi‡
_LANGUAGE_ASSEMBLY


48 
	#PS_UINT_CAST


	)

49 
	#UINT64_CAST


	)

50 
	#HUBREG_CAST


	)

55 
	#NASID_GET_META
(
_n
Ë((_nË>> 
NASID_LOCAL_BITS
)

	)

56 #ifde‡
SN0


57 
	#NASID_GET_LOCAL
(
_n
Ë((_nË& 0xf)

	)

58 #ñi‡
deföed
 
SN1


59 
	#NASID_GET_LOCAL
(
_n
Ë((_nË& 0x7f)

	)

61 
	#NASID_MAKE
(
_m
, 
_l
Ë(((_mË<< 
NASID_LOCAL_BITS
Ë| (_l))

	)

63 
	#NODE_ADDRSPACE_MASK
 (
NODE_ADDRSPACE_SIZE
 - 1)

	)

64 
	#TO_NODE_ADDRSPACE
(
_∑
Ë(
	`UINT64_CAST
 (_∑Ë& 
NODE_ADDRSPACE_MASK
)

	)

66 
	#CHANGE_ADDR_NASID
(
_∑
, 
_«sid
) \

67 ((
	`UINT64_CAST
 (
_∑
Ë& ~
NASID_MASK
) | \

68 (
	`UINT64_CAST
(
_«sid
Ë<< 
NASID_SHFT
))

	)

76 
	#NODE_OFFSET
(
_n
Ë(
	`UINT64_CAST
 (_nË<< 
NODE_SIZE_BITS
)

	)

78 
	#NODE_CAC_BASE
(
_n
Ë(
CAC_BASE
 + 
	`NODE_OFFSET
(_n))

	)

79 
	#NODE_HSPEC_BASE
(
_n
Ë(
HSPEC_BASE
 + 
	`NODE_OFFSET
(_n))

	)

80 
	#NODE_IO_BASE
(
_n
Ë(
IO_BASE
 + 
	`NODE_OFFSET
(_n))

	)

81 
	#NODE_MSPEC_BASE
(
_n
Ë(
MSPEC_BASE
 + 
	`NODE_OFFSET
(_n))

	)

82 
	#NODE_UNCAC_BASE
(
_n
Ë(
UNCAC_BASE
 + 
	`NODE_OFFSET
(_n))

	)

84 
	#TO_NODE
(
_n
, 
_x
Ë(
	`NODE_OFFSET
(_nË| (_xË)

	)

85 
	#TO_NODE_CAC
(
_n
, 
_x
Ë(
	`NODE_CAC_BASE
(_nË| (_xË& 
TO_PHYS_MASK
)

	)

86 
	#TO_NODE_UNCAC
(
_n
, 
_x
Ë(
	`NODE_UNCAC_BASE
(_nË| (_xË& 
TO_PHYS_MASK
)

	)

87 
	#TO_NODE_MSPEC
(
_n
, 
_x
Ë(
	`NODE_MSPEC_BASE
(_nË| (_xË& 
TO_PHYS_MASK
)

	)

88 
	#TO_NODE_HSPEC
(
_n
, 
_x
Ë(
	`NODE_HSPEC_BASE
(_nË| (_xË& 
TO_PHYS_MASK
)

	)

91 
	#RAW_NODE_SWIN_BASE
(
«sid
, 
widgë
) \

92 (
	`NODE_IO_BASE
(
«sid
Ë+ (
	`UINT64_CAST
 (
widgë
Ë<< 
SWIN_SIZE_BITS
))

	)

94 
	#WIDGETID_GET
(
addr
Ë(()(◊dd∏>> 
SWIN_SIZE_BITS
Ë& 0xff))

	)

102 
	#SWIN_SIZE_BITS
 24

	)

103 
	#SWIN_SIZE
 (
UINT64_CAST
 1 << 24)

	)

104 
	#SWIN_SIZEMASK
 (
SWIN_SIZE
 - 1)

	)

105 
	#SWIN_WIDGET_MASK
 0xF

	)

113 
	#SWIN_WIDGETADDR
(
addr
Ë(◊ddrË& 
SWIN_SIZEMASK
)

	)

114 
	#SWIN_WIDGETNUM
(
addr
Ë((◊ddrË>> 
SWIN_SIZE_BITS
Ë& 
SWIN_WIDGET_MASK
)

	)

124 
	#NODE_SWIN_ADDR
(
«sid
, 
addr
) \

125 (((
addr
Ë>
	`NODE_SWIN_BASE
(
«sid
, 0)) && \

126 ((
addr
Ë< (
	`NODE_SWIN_BASE
(
«sid
, 
HUB_NUM_WIDGET
Ë+ 
SWIN_SIZE
)\

127 ))

	)

144 
	#UALIAS_BASE
 
HSPEC_BASE


	)

145 
	#UALIAS_SIZE
 0x10000000

	)

146 
	#CPU_UALIAS
 0x20000

	)

147 
	#UALIAS_CPU_SIZE
 (
CPU_UALIAS
 / 
CPUS_PER_NODE
)

	)

148 
	#UALIAS_LIMIT
 (
UALIAS_BASE
 + 
UALIAS_SIZE
)

	)

150 #ifde‡
SN0


151 
	#LBOOT_BASE
 (
HSPEC_BASE
 + 0x10000000)

	)

152 
	#LBOOT_SIZE
 0x10000000

	)

153 
	#LBOOT_LIMIT
 (
LBOOT_BASE
 + 
LBOOT_SIZE
)

	)

154 
	#LBOOT_STRIDE
 0

	)

156 #ñi‡
deföed
 
SN1


157 
	#LREG_BASE
 (
HSPEC_BASE
 + 0x10000000)

	)

158 
	#LREG_SIZE
 0x8000000

	)

159 
	#LREG_LIMIT
 (
LREG_BASE
 + 
LREG_SIZE
)

	)

160 
	#LBOOT_BASE
 (
LREG_LIMIT
)

	)

161 
	#LBOOT_SIZE
 0x8000000

	)

162 
	#LBOOT_LIMIT
 (
LBOOT_BASE
 + 
LBOOT_SIZE
)

	)

163 
	#LBOOT_STRIDE
 0x2000000

	)

166 
	#HUB_REGISTER_WIDGET
 1

	)

167 
	#IALIAS_BASE
 
	`NODE_SWIN_BASE
(0, 
HUB_REGISTER_WIDGET
)

	)

168 
	#IALIAS_SIZE
 0x800000

	)

169 
	#IS_IALIAS
(
_a
Ë(((_aË>
IALIAS_BASE
) && \

170 ((
_a
Ë< (
IALIAS_BASE
 + 
IALIAS_SIZE
)))

	)

176 #ifde‡
SN0


177 
	#RBOOT_SIZE
 0x10000000

	)

178 
	#NODE_RBOOT_BASE
(
_n
Ë(
	`NODE_HSPEC_BASE
(_nË+ 0x30000000)

	)

179 
	#NODE_RBOOT_LIMIT
(
_n
Ë(
	`NODE_RBOOT_BASE
(_nË+ 
RBOOT_SIZE
)

	)

181 #ñi‡
deföed
 
SN1


183 
	#NODE_LREG_BASE
(
_n
Ë(
	`NODE_HSPEC_BASE
(_nË+ 0x30000000)

	)

184 
	#NODE_LREG_LIMIT
(
_n
Ë(
	`NODE_LREG_BASE
(_nË+ 
LREG_SIZE
)

	)

185 
	#RREG_BASE
(
_n
Ë(
	`NODE_LREG_BASE
(_n))

	)

186 
	#RREG_LIMIT
(
_n
Ë(
	`NODE_LREG_LIMIT
(_n))

	)

187 
	#RBOOT_SIZE
 0x8000000

	)

188 
	#NODE_RBOOT_BASE
(
_n
Ë(
	`NODE_HSPEC_BASE
(_nË+ 0x38000000)

	)

189 
	#NODE_RBOOT_LIMIT
(
_n
Ë(
	`NODE_RBOOT_BASE
(_nË+ 
RBOOT_SIZE
)

	)

212 
	#NODE_BDOOR_BASE
(
_n
Ë(
	`NODE_HSPEC_BASE
(_nË+ (
NODE_ADDRSPACE_SIZE
/2))

	)

214 
	#NODE_BDECC_BASE
(
_n
Ë(
	`NODE_BDOOR_BASE
(_n))

	)

215 
	#NODE_BDDIR_BASE
(
_n
Ë(
	`NODE_BDOOR_BASE
(_nË+ (
NODE_ADDRSPACE_SIZE
/4))

	)

216 #ifde‡
SN0


217 
	#BDDIR_ENTRY_LO
(
_∑
Ë((
HSPEC_BASE
 + \

218 
NODE_ADDRSPACE_SIZE
 * 3 / 4 + \

220 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

221 
	`UINT64_CAST
 (
_∑
Ë>> 2 & 
BDDIR_UPPER_MASK
 | \

222 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 0x1‡<< 4)

	)

224 
	#BDDIR_ENTRY_HI
(
_∑
Ë((
HSPEC_BASE
 + \

225 
NODE_ADDRSPACE_SIZE
 * 3 / 4 + \

227 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

228 
	`UINT64_CAST
 (
_∑
Ë>> 2 & 
BDDIR_UPPER_MASK
 | \

229 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 0x1‡<< 4)

	)

231 
	#BDPRT_ENTRY
(
_∑
, 
_rgn
Ë((
HSPEC_BASE
 + \

232 
NODE_ADDRSPACE_SIZE
 * 3 / 4) | \

233 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

234 
	`UINT64_CAST
 (
_∑
Ë>> 2 & 
BDDIR_UPPER_MASK
 | \

235 (
_rgn
Ë<< 3)

	)

236 
	#BDPRT_ENTRY_ADDR
(
_∑
,
_rgn
Ë(
	`BDPRT_ENTRY
((_∑),(_rgn)))

	)

237 
	#BDPRT_ENTRY_S
(
_∑
,
_rgn
,
_vÆ
Ë(*(
__psunsig√d_t
 *)
	`BDPRT_ENTRY
((_∑),(_rgn))=(_vÆ))

	)

238 
	#BDPRT_ENTRY_L
(
_∑
,
_rgn
Ë(*(
__psunsig√d_t
 *)
	`BDPRT_ENTRY
((_∑),(_rgn)))

	)

240 
	#BDECC_ENTRY
(
_∑
Ë((
HSPEC_BASE
 + \

241 
NODE_ADDRSPACE_SIZE
 / 2) | \

242 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

243 
	`UINT64_CAST
 (
_∑
Ë>> 2 & 
BDECC_UPPER_MASK
 | \

244 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 3)

	)

251 
	#BDADDR_IS_DIR
(
_ba
Ë((
	`UINT64_CAST
 (_baË& 0x200Ë!0)

	)

252 
	#BDADDR_IS_PRT
(
_ba
Ë((
	`UINT64_CAST
 (_baË& 0x200Ë=0)

	)

254 
	#BDDIR_TO_MEM
(
_ba
Ë(
	`UINT64_CAST
 (_baË& 
NASID_MASK
 | \

255 (
	`UINT64_CAST
 (
_ba
Ë& 
BDDIR_UPPER_MASK
)<<2 | \

256 (
	`UINT64_CAST
 (
_ba
Ë& 0x1‡<< 4Ë<< 3)

	)

258 
	#BDPRT_TO_MEM
(
_ba
Ë(
	`UINT64_CAST
 (_baË& 
NASID_MASK
 | \

259 (
	`UINT64_CAST
 (
_ba
Ë& 
BDDIR_UPPER_MASK
)<<2)

	)

261 
	#BDECC_TO_MEM
(
_ba
Ë(
	`UINT64_CAST
 (_baË& 
NASID_MASK
 | \

262 (
	`UINT64_CAST
 (
_ba
Ë& 
BDECC_UPPER_MASK
)<<2 | \

263 (
	`UINT64_CAST
 (
_ba
Ë& 3Ë<< 3)

	)

265 #ñi‡
deföed
 
SN1


270 
	#BDDIR_ENTRY
(
_∑
Ë(
HSPEC_BASE
 + \

271 
NODE_ADDRSPACE_SIZE
 * 7 / 8 | \

272 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

273 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 
BDDIR_UPPER_MASK
)

	)

275 #ifde‡
SN1


277 
	#BDDIR_ENTRY_LO
(
_∑
Ë
	`BDDIR_ENTRY
(_∑)

	)

278 
	#BDDIR_ENTRY_HI
(
_∑
Ë
	`BDDIR_ENTRY
(_∑)

	)

281 
	#BDDIR_PAGE_MASK
 (
BDDIR_UPPER_MASK
 & 0x7fff‡<< 11)

	)

282 
	#BDDIR_PAGE_BASE_MASK
 (
UINT64_CAST
 0xfffffffffffff800)

	)

284 #ifde‡
_LANGUAGE_C


286 
	#BDPRT_ENTRY_ADDR
(
_∑
, 
_rgn
Ë((
__uöt64_t
 *Ë(
HSPEC_BASE
 + \

287 
NODE_ADDRSPACE_SIZE
 * 7 / 8 + 0x408 | \

288 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

289 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 
BDDIR_PAGE_MASK
 | \

290 
	`UINT64_CAST
 (
_∑
) >> 3 & 0x3 << 4 | \

291 ((
_rgn
Ë& 0x1eË<< 5))

	)

292 #ifde‡
SN1


295 
	#BDPRT_ENTRY
(
_∑
,
_rgn
Ë(
UINT64_CAST
 
	`BDPRT_ENTRY_ADDR
((_∑),(_rgn)))

	)

301 
	#BDCNT_ENTRY
(
_∑
Ë(
HSPEC_BASE
 + \

302 
NODE_ADDRSPACE_SIZE
 * 7 / 8 + 0x8 | \

303 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

304 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 
BDDIR_PAGE_MASK
 | \

305 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 0x3 << 4)

	)

308 #ifde‡ 
SN1


312 
	#BDECC_ENTRY
(
_∑
Ë(
HSPEC_BASE
 + \

313 
NODE_ADDRSPACE_SIZE
 * 5 / 8 | \

314 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

315 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 
BDECC_UPPER_MASK
 \

316 ^ 0x7ULL)

	)

320 
	#BDECC_SCRUB
(
_∑
Ë(
HSPEC_BASE
 + \

321 
NODE_ADDRSPACE_SIZE
 / 2 | \

322 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

323 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 
BDECC_UPPER_MASK
 \

324 & ~0x1ULL ^ 0x6ULL)

	)

328 
	#BDECC_ENTRY_H
(
_∑
Ë(
HSPEC_BASE
 + \

329 
NODE_ADDRSPACE_SIZE
 * 5 / 8 | \

330 
	`UINT64_CAST
 (
_∑
Ë& 
NASID_MASK
 | \

331 
	`UINT64_CAST
 (
_∑
Ë>> 3 & 
BDECC_UPPER_MASK
 \

332 & ~0x1ULL ^ 0x6ULL)

	)

340 
	#BDDIR_TO_MEM
(
_ba
Ë(
	`UINT64_CAST
 (_baË& 
NASID_MASK
 | \

341 (
	`UINT64_CAST
 (
_ba
Ë& 
BDDIR_UPPER_MASK
Ë<< 3)

	)

343 #ifde‡
SN1


349 
	#BDPRT_TO_MEM
(
_ba
Ë(
	`UINT64_CAST
 (_baË& 
NASID_MASK
 | \

350 (
	`UINT64_CAST
 (
_ba
Ë& 
BDDIR_PAGE_MASK
) << 3 | \

351 (
	`UINT64_CAST
 (
_ba
Ë& 0x3 << 4Ë<< 3)

	)

354 
	#BDCNT_TO_MEM
(
_ba
Ë(
	`UINT64_CAST
 (_baË& 
NASID_MASK
 | \

355 (
	`UINT64_CAST
 (
_ba
Ë& 
BDDIR_PAGE_MASK
) << 3 | \

356 (
	`UINT64_CAST
 (
_ba
Ë& 0x3 << 4Ë<< 3)

	)

358 
	#BDECC_TO_MEM
(
_ba
Ë(
	`UINT64_CAST
 (_baË& 
NASID_MASK
 | \

359 ((
	`UINT64_CAST
 (
_ba
) ^ 0x7ULL) \

360 & 
BDECC_UPPER_MASK
Ë<< 3 )

	)

362 
	#BDECC_H_TO_MEM
(
_ba
Ë(
	`UINT64_CAST
 (_baË& 
NASID_MASK
 | \

363 ((
	`UINT64_CAST
 (
_ba
) ^ 0x6ULL) \

364 & 
BDECC_UPPER_MASK
Ë<< 3 )

	)

366 
	#BDADDR_IS_DIR
(
_ba
Ë((
	`UINT64_CAST
 (_baË& 0x8Ë=0)

	)

367 
	#BDADDR_IS_PRT
(
_ba
Ë((
	`UINT64_CAST
 (_baË& 0x408Ë=0x408)

	)

368 
	#BDADDR_IS_CNT
(
_ba
Ë((
	`UINT64_CAST
 (_baË& 0x8Ë=0x8)

	)

382 #ifde‡
_STANDALONE


385 
	#LOCAL_HUB
(
_x
Ë(
	`HUBREG_CAST
 (
IALIAS_BASE
 + (_x)))

	)

386 
	#REMOTE_HUB
(
_n
, 
_x
Ë(
	`HUBREG_CAST
 (
	`NODE_SWIN_BASE
(_n, 1) + \

387 0x800000 + (
_x
)))

	)

388 #ifde‡
SN1


389 
	#LOCAL_HSPEC
(
_x
Ë(
	`HUBREG_CAST
 (
LREG_BASE
 + (_x)))

	)

390 
	#REMOTE_HSPEC
(
_n
, 
_x
Ë(
	`HUBREG_CAST
 (
	`RREG_BASE
(_nË+ (_x)))

	)

403 
	#LOCAL_HUB_ADDR
(
_x
Ë(
	`HUBREG_CAST
 (
IALIAS_BASE
 + (_x)))

	)

405 #i‡
_LANGUAGE_C
 && !
deföed
(
_STANDALONE
)

406 
	#REMOTE_HUB_ADDR
(
_n
, 
_x
Ë(
	`HUBREG_CAST
 (
	`RAW_NODE_SWIN_BASE
(_n, 1) + \

407 0x800000 + (
_x
)))

	)

409 
	#REMOTE_HUB_ADDR
(
_n
, 
_x
Ë(
	`HUBREG_CAST
 (
	`NODE_SWIN_BASE
(_n, 1) + \

410 0x800000 + (
_x
)))

	)

412 #i‡
SN0


413 
	#REMOTE_HUB_PI_ADDR
(
_n
, 
_¢
, 
_x
Ë(
	`HUBREG_CAST
 (
	`NODE_SWIN_BASE
(_n, 1) + \

414 0x800000 + (
_x
)))

	)

415 #ñi‡
SN1


416 
	#REMOTE_HUB_PI_ADDR
(
_n
, 
_¢
, 
_x
Ë(
	`HUBREG_CAST
 (
	`NODE_SWIN_BASE
(_n, 1) + \

417 0x800000 + 
	`PIREG
(
_x
, 
_¢
)))

	)

420 #ifde‡
SN1


421 
	#LOCAL_HSPEC_ADDR
(
_x
Ë(
	`HUBREG_CAST
 (
LREG_BASE
 + (_x)))

	)

422 
	#REMOTE_HSPEC_ADDR
(
_n
, 
_x
Ë(
	`HUBREG_CAST
 (
	`RREG_BASE
(_nË+ (_x)))

	)

425 #i‡
_LANGUAGE_C


427 
	#HUB_L
(
_a
Ë*(_a)

	)

428 
	#HUB_S
(
_a
, 
_d
Ë*(_aË(_d)

	)

430 
	#LOCAL_HUB_L
(
_r
Ë
	`HUB_L
(
	`LOCAL_HUB_ADDR
(_r))

	)

431 
	#LOCAL_HUB_S
(
_r
, 
_d
Ë
	`HUB_S
(
	`LOCAL_HUB_ADDR
(_r), (_d))

	)

432 
	#REMOTE_HUB_L
(
_n
, 
_r
Ë
	`HUB_L
(
	`REMOTE_HUB_ADDR
((_n), (_r)))

	)

433 
	#REMOTE_HUB_S
(
_n
, 
_r
, 
_d
Ë
	`HUB_S
(
	`REMOTE_HUB_ADDR
((_n), (_r)), (_d))

	)

434 
	#REMOTE_HUB_PI_L
(
_n
, 
_¢
, 
_r
Ë
	`HUB_L
(
	`REMOTE_HUB_PI_ADDR
((_n), (_¢), (_r)))

	)

435 
	#REMOTE_HUB_PI_S
(
_n
, 
_¢
, 
_r
, 
_d
Ë
	`HUB_S
(
	`REMOTE_HUB_PI_ADDR
((_n), (_¢), (_r)), (_d))

	)

437 #ifde‡
SN1


438 
	#LOCAL_HSPEC_L
(
_r
Ë
	`HUB_L
(
	`LOCAL_HSPEC_ADDR
(_r))

	)

439 
	#LOCAL_HSPEC_S
(
_r
, 
_d
Ë
	`HUB_S
(
	`LOCAL_HSPEC_ADDR
(_r), (_d))

	)

440 
	#REMOTE_HSPEC_L
(
_n
, 
_r
Ë
	`HUB_L
(
	`REMOTE_HSPEC_ADDR
((_n), (_r)))

	)

441 
	#REMOTE_HSPEC_S
(
_n
, 
_r
, 
_d
Ë
	`HUB_S
(
	`REMOTE_HSPEC_ADDR
((_n), (_r)), (_d))

	)

448 
	#MD_PREMIUM
(
n
Ë((
	`REMOTE_HUB_L
(“), 
MD_DIR_CONFIG
Ë& 
MDC_DIR_PREMIUM
) \

449 ? 
B_TRUE
 : 
B_FALSE
)

	)

483 
__ölöe
 
__uöt64_t
 
	$BDPRT_ENTRY_L
(
∑ddr_t
 
∑
,
__uöt32_t
 
rgn
) {

484 
__uöt64_t
 
w‹d
=*
	`BDPRT_ENTRY_ADDR
(
∑
,
rgn
);

485 
¥emium
 = 
	`MD_PREMIUM
(
	`NASID_GET
(
∑
));

487 if(
¥emium
) {

488 if(
rgn
&0x1)

489 
w‹d
 = word >> 32;

490 if(
rgn
&0x20)

491 
w‹d
 = word >> 16;

493 if(
rgn
&0x1)

494 
w‹d
 = word >> 16;

497 
w‹d
 = word & 0xffff;

499  
w‹d
;

500 
	}
}

502 
__ölöe
 
	$BDPRT_ENTRY_S
(
∑ddr_t
 
∑
,
__uöt32_t
 
rgn
,
__uöt64_t
 
vÆ
) {

503 
__uöt64_t
 *
addr
=(__uöt64_à*)
	`BDPRT_ENTRY_ADDR
(
∑
,
rgn
);

504 
__uöt64_t
 
w‹d
,
mask
;

505 
¥emium
 = 
	`MD_PREMIUM
(
	`NASID_GET
(
∑
));

507 
w‹d
=*
addr
;

508 
mask
=0;

510 if(
¥emium
) {

511 if(
rgn
&0x1) {

512 
mask
|=0x00000000ffffffff;

513 
vÆ
=val<<32;

515 
mask
|=0xffffffff00000000;

517 if(
rgn
&0x20) {

518 
mask
|=0x0000ffff0000ffff;

519 
vÆ
=val<<16;

521 
mask
|=0xffff0000ffff0000;

523 if(
rgn
&0x1) {

524 
mask
|=0xffffffff0000ffff;

525 
vÆ
=val<<16;

527 
mask
|=0xffffffffffff0000;

530 
w‹d
 &
mask
;

531 
w‹d
 |
vÆ
;

533 *(
addr
++)=
w‹d
;

534 
addr
++;

535 *(
addr
++)=
w‹d
;

536 
addr
++;

537 *(
addr
++)=
w‹d
;

538 
addr
++;

539 *
addr
=
w‹d
;

540 
	}
}

549 
	#HUB_REG_PTR
(
_ba£
, 
_off
) \

550 (
	`HUBREG_CAST
 ((
__psunsig√d_t
)(
_ba£
Ë+ (__psunsig√d_t)(
_off
)))

	)

552 
	#HUB_REG_PTR_L
(
_ba£
, 
_off
) \

553 
	`HUB_L
(
	`HUB_REG_PTR
((
_ba£
), (
_off
)))

	)

555 
	#HUB_REG_PTR_S
(
_ba£
, 
_off
, 
_d©a
) \

556 
	`HUB_S
(
	`HUB_REG_PTR
((
_ba£
), (
_off
)), (
_d©a
))

	)

563 
	#PHYS_RAMBASE
 0x0

	)

564 
	#K0_RAMBASE
 
	`PHYS_TO_K0
(
PHYS_RAMBASE
)

	)

566 
	#ARCS_SPB_OFFSET
 0x1000

	)

567 
	#ARCS_SPB_ADDR
(
«sid
) \

568 
	`PHYS_TO_K0
(
	`NODE_OFFSET
(
«sid
Ë| 
ARCS_SPB_OFFSET
)

	)

569 
	#ARCS_SPB_SIZE
 0x0400

	)

571 #ifde‡
_STANDALONE


573 
	#ARCS_TVECTOR_OFFSET
 0x2800

	)

574 
	#ARCS_PVECTOR_OFFSET
 0x2c00

	)

580 
	#TVADDR
 (
	`NODE_CAC_BASE
(
	`gë_«sid
()Ë+ 
ARCS_TVECTOR_OFFSET
)

	)

581 
	#PVADDR
 (
	`NODE_CAC_BASE
(
	`gë_«sid
()Ë+ 
ARCS_PVECTOR_OFFSET
)

	)

585 
	#KLDIR_OFFSET
 0x2000

	)

586 
	#KLDIR_ADDR
(
«sid
) \

587 
	`TO_NODE_UNCAC
((
«sid
), 
KLDIR_OFFSET
)

	)

588 
	#KLDIR_SIZE
 0x0400

	)

599 
	#KLI_LAUNCH
 0

	)

600 
	#KLI_KLCONFIG
 1

	)

601 
	#KLI_NMI
 2

	)

602 
	#KLI_GDA
 3

	)

603 
	#KLI_FREEMEM
 4

	)

604 
	#KLI_SYMMON_STK
 5

	)

605 
	#KLI_PI_ERROR
 6

	)

606 
	#KLI_KERN_VARS
 7

	)

607 
	#KLI_KERN_XP
 8

	)

608 
	#KLI_KERN_PARTID
 9

	)

610 #i‡
_LANGUAGE_C


612 
	#KLD_BASE
(
«sid
Ë((
kldú_ít_t
 *Ë
	`KLDIR_ADDR
“asid))

	)

613 
	#KLD_LAUNCH
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_LAUNCH
)

	)

614 
	#KLD_NMI
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_NMI
)

	)

615 
	#KLD_KLCONFIG
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_KLCONFIG
)

	)

616 
	#KLD_PI_ERROR
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_PI_ERROR
)

	)

617 
	#KLD_GDA
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_GDA
)

	)

618 
	#KLD_SYMMON_STK
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_SYMMON_STK
)

	)

619 
	#KLD_FREEMEM
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_FREEMEM
)

	)

620 
	#KLD_KERN_VARS
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_KERN_VARS
)

	)

621 
	#KLD_KERN_XP
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_KERN_XP
)

	)

622 
	#KLD_KERN_PARTID
(
«sid
Ë(
	`KLD_BASE
“asidË+ 
KLI_KERN_PARTID
)

	)

624 
	#LAUNCH_OFFSET
(
«sid
, 
¶i˚
) \

625 (
	`KLD_LAUNCH
(
«sid
)->
off£t
 + \

626 
	`KLD_LAUNCH
(
«sid
)->
°ride
 * (
¶i˚
))

	)

627 
	#LAUNCH_ADDR
(
«sid
, 
¶i˚
) \

628 
	`TO_NODE_UNCAC
((
«sid
), 
	`LAUNCH_OFFSET
“asid, 
¶i˚
))

	)

629 
	#LAUNCH_SIZE
(
«sid
Ë
	`KLD_LAUNCH
“asid)->
size


	)

631 
	#NMI_OFFSET
(
«sid
, 
¶i˚
) \

632 (
	`KLD_NMI
(
«sid
)->
off£t
 + \

633 
	`KLD_NMI
(
«sid
)->
°ride
 * (
¶i˚
))

	)

634 
	#NMI_ADDR
(
«sid
, 
¶i˚
) \

635 
	`TO_NODE_UNCAC
((
«sid
), 
	`NMI_OFFSET
“asid, 
¶i˚
))

	)

636 
	#NMI_SIZE
(
«sid
Ë
	`KLD_NMI
“asid)->
size


	)

638 
	#KLCONFIG_OFFSET
(
«sid
Ë
	`KLD_KLCONFIG
“asid)->
off£t


	)

639 
	#KLCONFIG_ADDR
(
«sid
) \

640 
	`TO_NODE_UNCAC
((
«sid
), 
	`KLCONFIG_OFFSET
“asid))

	)

641 
	#KLCONFIG_SIZE
(
«sid
Ë
	`KLD_KLCONFIG
“asid)->
size


	)

643 
	#GDA_ADDR
(
«sid
Ë
	`KLD_GDA
“asid)->
poöãr


	)

644 
	#GDA_SIZE
(
«sid
Ë
	`KLD_GDA
“asid)->
size


	)

646 
	#SYMMON_STK_OFFSET
(
«sid
, 
¶i˚
) \

647 (
	`KLD_SYMMON_STK
(
«sid
)->
off£t
 + \

648 
	`KLD_SYMMON_STK
(
«sid
)->
°ride
 * (
¶i˚
))

	)

649 
	#SYMMON_STK_STRIDE
(
«sid
Ë
	`KLD_SYMMON_STK
“asid)->
°ride


	)

651 
	#SYMMON_STK_ADDR
(
«sid
, 
¶i˚
) \

652 
	`TO_NODE_CAC
((
«sid
), 
	`SYMMON_STK_OFFSET
“asid, 
¶i˚
))

	)

654 
	#SYMMON_STK_SIZE
(
«sid
Ë
	`KLD_SYMMON_STK
“asid)->
°ride


	)

656 
	#SYMMON_STK_END
(
«sid
Ë(
	`SYMMON_STK_ADDR
“asid, 0Ë+ 
	`KLD_SYMMON_STK
“asid)->
size
)

	)

661 #i‡
deföed
(
SN1
)

664 
	#UNIX_DEBUG_LOADADDR
 0x310000

	)

665 #ñi‡
deföed
(
SN0XXL
)

666 
	#UNIX_DEBUG_LOADADDR
 0x360000

	)

668 
	#UNIX_DEBUG_LOADADDR
 0x300000

	)

670 
	#SYMMON_LOADADDR
(
«sid
) \

671 
	`TO_NODE
(
«sid
, 
UNIX_DEBUG_LOADADDR
 - 0x1000)

	)

673 
	#FREEMEM_OFFSET
(
«sid
Ë
	`KLD_FREEMEM
“asid)->
off£t


	)

674 
	#FREEMEM_ADDR
(
«sid
Ë
	`SYMMON_STK_END
“asid)

	)

682 
	#FREEMEM_SIZE
(
«sid
Ë
	`KLD_FREEMEM
“asid)->
size


	)

684 
	#PI_ERROR_OFFSET
(
«sid
Ë
	`KLD_PI_ERROR
“asid)->
off£t


	)

685 
	#PI_ERROR_ADDR
(
«sid
) \

686 
	`TO_NODE_UNCAC
((
«sid
), 
	`PI_ERROR_OFFSET
“asid))

	)

687 
	#PI_ERROR_SIZE
(
«sid
Ë
	`KLD_PI_ERROR
“asid)->
size


	)

689 
	#NODE_OFFSET_TO_K0
(
_«sid
, 
_off
) \

690 
	`PHYS_TO_K0
((
	`NODE_OFFSET
(
_«sid
Ë+ (
_off
)Ë| 
K0BASE
)

	)

691 
	#NODE_OFFSET_TO_K1
(
_«sid
, 
_off
) \

692 
	`TO_UNCAC
((
	`NODE_OFFSET
(
_«sid
Ë+ (
_off
)Ë| 
K1BASE
)

	)

693 
	#K0_TO_NODE_OFFSET
(
_k0addr
) \

694 ((
__psunsig√d_t
)(
_k0addr
Ë& 
NODE_ADDRSPACE_MASK
)

	)

696 
	#KERN_VARS_ADDR
(
«sid
Ë
	`KLD_KERN_VARS
“asid)->
poöãr


	)

697 
	#KERN_VARS_SIZE
(
«sid
Ë
	`KLD_KERN_VARS
“asid)->
size


	)

699 
	#KERN_XP_ADDR
(
«sid
Ë
	`KLD_KERN_XP
“asid)->
poöãr


	)

700 
	#KERN_XP_SIZE
(
«sid
Ë
	`KLD_KERN_XP
“asid)->
size


	)

702 
	#GPDA_ADDR
(
«sid
Ë
	`TO_NODE_CAC
“asid, 
GPDA_OFFSET
)

	)

	@/usr/include/sys/SN/arch.h

13 #i‚de‡
__SYS_SN_ARCH_H__


14 
	#__SYS_SN_ARCH_H__


	)

16 #i‡
deföed
(
SN0
Ë|| deföed(
SN1
)

17 #i‡
deföed
 (
SN0
)

18 
	~<sys/SN/SN0/¨ch.h
>

19 #ñi‡
deföed
 (
SN1
)

20 
	~<sys/SN/SN1/¨ch.h
>

23 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

24 
__uöt64_t
 
	thubªg_t
;

25 
__uöt64_t
 
	tbdrkªg_t
;

26 
__uöt64_t
 
	tnic_t
;

29 #ifde‡
SN0


30 
	#CPUS_PER_NODE
 2

	)

31 
	#CPUS_PER_NODE_SHFT
 1

	)

32 
	#CPUS_PER_SUBNODE
 2

	)

34 #ifde‡
SN1


35 
	#CPUS_PER_NODE
 4

	)

36 
	#CPUS_PER_NODE_SHFT
 2

	)

37 
	#CPUS_PER_SUBNODE
 2

	)

39 
	#CNODE_NUM_CPUS
(
_˙ode
Ë(
	`NODEPDA
(_˙ode)->
node_num_˝us
)

	)

40 
	#CNODE_TO_CPU_BASE
(
_˙ode
Ë(
	`NODEPDA
(_˙ode)->
node_fú°_˝u
)

	)

41 
	#˝uto˙ode
(
˝u
) \

42 (
	`ASSERT
(
pdaödr
[(
˝u
)].
pda
), (pdaödr[(˝u)].pda->
p_nodeid
))

	)

43 
	#˝ut⁄asid
(
˝u
) \

44 (
	`ASSERT
(
pdaödr
[(
˝u
)].
pda
), (pdaödr[(˝u)].pda->
p_«sid
))

	)

45 
	#make•num
(
_«sid
, 
_¶i˚
) \

46 (((
_«sid
Ë<< 
CPUS_PER_NODE_SHFT
Ë| (
_¶i˚
))

	)

72 
	#˝uto¶i˚
(
˝u
) \

73 (
	`ASSERT
(
pdaödr
[(
˝u
)].
pda
), (pdaödr[(˝u)].pda->
p_¶i˚
))

	)

74 
	#˝utﬁoˇl¶i˚
(
˝u
) \

75 (
	`ASSERT
(
pdaödr
[(
˝u
)].
pda
), (
	`LOCALCPU
’daödr[(˝u)].pda->
p_¶i˚
)))

	)

76 
	#˝utosubnode
(
˝u
) \

77 (
	`ASSERT
(
pdaödr
[(
˝u
)].
pda
), (
	`SUBNODE
’daödr[(˝u)].pda->
p_¶i˚
)))

	)

79 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

81 
	#INVALID_NASID
 (
«sid_t
)-1

	)

82 
	#INVALID_CNODEID
 (
˙odeid_t
)-1

	)

83 
	#INVALID_PNODEID
 (
≤odeid_t
)-1

	)

84 
	#INVALID_MODULE
 (
moduÀid_t
)-1

	)

85 
	#INVALID_PARTID
 (
∑πid_t
)-1

	)

87 
gë_¶i˚
();

88 
˙odeid_t
 
gë_˝u_˙ode
();

89 
˝uid_t
 
gë_˙ode_˝u
(
˙odeid_t
);

90 
gë_˝u_¶i˚
(
˝uid_t
);

91 
˝uid_t
 
˙odëo˝u
(
˙odeid_t
);

92 
˝uid_t
 
˙ode_subnode_to_˝u
(
˙odeid_t
, );

93 
˝uid_t
 
˙ode_¶i˚_to_˝uid
(
˙odeid_t
, );

95 #i‚de‡
_STANDALONE


96 
«sid_t
 
gë_«sid
();

97 
˙ode_exi°s
(
˙odeid_t
 
˙ode
);

103 
˙odeid_t
 
«sid_to_com∑˘_node
[
MAX_NASIDS
];

104 
«sid_t
 
com∑˘_to_«sid_node
[
MAX_COMPACT_NODES
];

105 
˙odeid_t
 
˝uid_to_com∑˘_node
[
MAXCPUS
];

115 
	#NASID_TO_REGION
(
¬ode
) \

116 ((
¬ode
) >> \

117 (
	`is_föe_dúmode
(Ë? 
NASID_TO_FINEREG_SHFT
 : 
NASID_TO_COARSEREG_SHFT
))

	)

119 #i‡!
deföed
(
DEBUG
Ë&& (!deföed(
SABLE
Ë|| deföed(
_STANDALONE
))

121 
	#NASID_TO_COMPACT_NODEID
(
¬ode
Ë(
«sid_to_com∑˘_node
[¬ode])

	)

122 
	#COMPACT_TO_NASID_NODEID
(
˙ode
Ë(
com∑˘_to_«sid_node
[˙ode])

	)

123 
	#CPUID_TO_COMPACT_NODEID
(
˝u
Ë(
˝uid_to_com∑˘_node
[(˝u)])

	)

130 
˙odeid_t
 
«sid_to_com∑˘_nodeid
(
«sid_t
 
«sid
);

131 
«sid_t
 
com∑˘_to_«sid_nodeid
(
˙odeid_t
 
˙ode
);

133 
	#NASID_TO_COMPACT_NODEID
(
¬ode
Ë
	`«sid_to_com∑˘_nodeid
“node)

	)

134 
	#COMPACT_TO_NASID_NODEID
(
˙ode
Ë
	`com∑˘_to_«sid_nodeid
(˙ode)

	)

135 
	#CPUID_TO_COMPACT_NODEID
(
˝u
Ë(
˝uid_to_com∑˘_node
[(˝u)])

	)

138 
node_gëœ°¶Ÿ
(
˙odeid_t
);

142 
	#SLOT_BITMASK
 (
MAX_MEM_SLOTS
 - 1)

	)

143 
	#SLOT_SIZE
 (1LL<<
SLOT_SHIFT
)

	)

145 
	#node_gënum¶Ÿs
(
node
Ë(
MAX_MEM_SLOTS
)

	)

146 
	#NODE_MAX_MEM_SIZE
 
SLOT_SIZE
 * 
MAX_MEM_SLOTS


	)

153 
	#SN0_MAX_NASIDS
 256

	)

154 
	#SN1_MAX_NASIDS
 128

	)

	@/usr/include/sys/cdefs.h

1 #i‚de‡
__SYS_CDEFS_H__


2 
	#__SYS_CDEFS_H__


	)

24 
	#__P
(
¨gs
Ë
	)
¨gs

26 #ifde‡
__˝lu•lus


27 
	#__BEGIN_DECLS
 "C" {

	)

28 
	#__END_DECLS
 }

	)

30 
	#__BEGIN_DECLS


	)

31 
	#__END_DECLS


	)

41 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

42 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

43 
	#__STRING
(
x
Ë#x

	)

45 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

46 
	#__STRING
(
x
Ë"x"

	)

	@/usr/include/sys/crime.h

1 #i‚de‡
_SYS_CRIME_H__


2 
	#_SYS_CRIME_H__


	)

4 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

5 
	~<sys/ty≥s.h
>

6 
	~<sys/ªg.h
>

8 
	t_¸mªg_t
;

9 
ªad_ªg64
(
__psunsig√d_t
);

10 
wrôe_ªg64
(, 
__psunsig√d_t
);

11 
gë_¸imîev
();

18 
	#CRM_BASEADDR
 0x14000000

	)

20 
	#CRM_ID
 (
CRM_BASEADDR
 + 0x00000000)

	)

21 
	#CRM_ID_MSK
 0xffLL

	)

26 
	#CRM_ID_IDBITS
 0xf0

	)

27 
	#CRM_ID_IDVALUE
 0xa0

	)

28 
	#CRM_ID_REV
 0x0f

	)

30 
	#CRM_REV_PETTY
 0x0

	)

31 
	#CRM_REV_11
 0x11

	)

32 
	#CRM_REV_13
 0x13

	)

33 
	#CRM_REV_14
 0x14

	)

35 
	#CRM_IS_PETTY
 (
	`gë_¸imîev
(Ë=
CRM_REV_PETTY
)

	)

36 
	#CRM_IS_REV_1_1
 (
	`gë_¸imîev
(Ë=
CRM_REV_11
)

	)

37 
	#CRM_IS_REV_1_3
 (
	`gë_¸imîev
(Ë=
CRM_REV_13
)

	)

38 
	#CRM_IS_REV_1_4
 (
	`gë_¸imîev
(Ë=
CRM_REV_14
)

	)

40 
	#CRM_CONTROL
 (
CRM_BASEADDR
 + 0x8)

	)

41 
	#CRM_CONTROL_MSK
 0x3fffLL

	)

46 
	#CRM_CONTROL_TRITON_SYSADC
 0x2000

	)

47 
	#CRM_CONTROL_CRIME_SYSADC
 0x1000

	)

48 
	#CRM_CONTROL_HARD_RESET
 0x0800

	)

49 
	#CRM_CONTROL_SOFT_RESET
 0x0400

	)

50 
	#CRM_CONTROL_DOG_ENA
 0x0200

	)

51 
	#CRM_CONTROL_ENDIANESS
 0x0100

	)

54 
	#CRM_CONTROL_ENDIAN_BIG
 0x0100

	)

55 
	#CRM_CONTROL_ENDIAN_LITTLE
 0x0000

	)

57 
	#CRM_CONTROL_CQUEUE_HWM
 0x000f

	)

58 
	#CRM_CONTROL_CQUEUE_SHFT
 0

	)

59 
	#CRM_CONTROL_WBUF_HWM
 0x00f0

	)

60 
	#CRM_CONTROL_WBUF_SHFT
 8

	)

72 
	#CRM_CONTROL_GET_CQUEUE_HWM
(
x
) \

73 (((
x
Ë& 
CRM_CONTROL_CQUEUE_HWM
Ë>> 
CRM_CONTROL_CQUEUE_SHFT
)

	)

74 
	#CRM_CONTROL_SET_CQUEUE_HWM
(
x
,
v
) \

75 (((
v
Ë<< 
CRM_CONTROL_CQUEUE_SHFT
Ë| ((
x
Ë& ~
CRM_CONTROL_CQUEUE_HWM
))

	)

77 
	#CRM_CONTROL_GET_WBUF_HWM
(
x
) \

78 (((
x
Ë& 
CRM_CONTROL_WBUF_HWM
Ë>> 
CRM_CONTROL_WBUF_SHFT
)

	)

79 
	#CRM_CONTROL_SET_WBUF_HWM
(
x
,
v
) \

80 (((
v
Ë<< 
CRM_CONTROL_WBUF_SHFT
Ë| ((
x
Ë& ~
CRM_CONTROL_WBUF_HWM
))

	)

82 
	#CRM_INTSTAT
 (
CRM_BASEADDR
 + 0x10)

	)

83 
	#CRM_INTSTAT_MSK
 0xffffffffLL

	)

84 
	#CRM_INTMASK
 (
CRM_BASEADDR
 + 0x18)

	)

85 
	#CRM_INTMASK_MSK
 0xffffffffLL

	)

86 
	#CRM_SOFTINT
 (
CRM_BASEADDR
 + 0x20)

	)

87 
	#CRM_SOFTINT_MSK
 0xffffffffLL

	)

88 
	#CRM_HARDINT
 (
CRM_BASEADDR
 + 0x28)

	)

89 
	#CRM_HARDINT_MSK
 0xf0ffffffLL

	)

94 
	#CRM_INT_VICE
 0x80000000LL

	)

95 
	#CRM_INT_SOFT2
 0x40000000LL

	)

96 
	#CRM_INT_SOFT1
 0x20000000LL

	)

97 
	#CRM_INT_SOFT0
 0x10000000LL

	)

98 
	#CRM_INT_RE5
 0x08000000LL

	)

99 
	#CRM_INT_RE4
 0x04000000LL

	)

100 
	#CRM_INT_RE3
 0x02000000LL

	)

101 
	#CRM_INT_RE2
 0x01000000LL

	)

102 
	#CRM_INT_RE1
 0x00800000LL

	)

103 
	#CRM_INT_RE0
 0x00400000LL

	)

104 
	#CRM_INT_MEMERR
 0x00200000LL

	)

105 
	#CRM_INT_CRMERR
 0x00100000LL

	)

106 
	#CRM_INT_GBE3
 0x00080000LL

	)

107 
	#CRM_INT_GBE2
 0x00040000LL

	)

108 
	#CRM_INT_GBE1
 0x00020000LL

	)

109 
	#CRM_INT_GBE0
 0x00010000LL

	)

110 
	#CRM_INT_GBEx
 
CRM_INT_GBE0
|
CRM_INT_GBE1
|
CRM_INT_GBE2
|
CRM_INT_GBE3


	)

111 
	#CRM_INT_MACE
(
i
Ë(()(1 << (i)))

	)

113 
	#NCRMINTS
 32

	)

114 
	#NCRMGANG
 16

	)

117 
	#CRM_DOG
 (
CRM_BASEADDR
 + 0x30)

	)

118 
	#McGriff
 
CRM_DOG


	)

119 
	#CRM_DOG_MSK
 0x1fffffLL

	)

120 
	#CRM_DOG_POWER_ON_RESET
 0x10000LL

	)

121 
	#CRM_DOG_WARM_RESET
 0x080000LL

	)

122 
	#CRM_DOG_TIMEOUT
 (
CRM_DOG_POWER_ON_RESET
|
CRM_DOG_WARM_RESET
)

	)

123 
	#CRM_DOG_VALUE
 0x7fffLL

	)

125 
	#CRM_TIME
 (
CRM_BASEADDR
 + 0x38)

	)

126 
	#CRM_TIME_MSK
 0xffffffffffffLL

	)

127 #ifde‡
MASTER_FREQ


128 #unde‡
MASTER_FREQ


130 
	#MASTER_FREQ
 66666500

	)

131 
	#DNS_PER_TICK
 15

	)

132 
	#PICOSEC_PER_TICK
 15000

	)

134 
	#CRM_CPU_ERROR_ADDR
 (
CRM_BASEADDR
 + 0x40)

	)

135 
	#CRM_CPU_ERROR_ADDR_SHFT
 0

	)

136 
	#CRM_CPU_ERROR_ADDR_MSK
 0x3ffffffffLL

	)

138 
	#CRM_CPU_ERROR_STAT
 (
CRM_BASEADDR
 + 0x48)

	)

139 
	#CRM_CPU_ERROR_ENA
 (
CRM_BASEADDR
 + 0x50)

	)

144 
	#CRM_CPU_ERROR_MSK
 0x7LL

	)

145 
	#CRM_CPU_ERROR_CPU_ILL_ADDR
 0x4

	)

146 
	#CRM_CPU_ERROR_VICE_WRT_PRTY
 0x2

	)

147 
	#CRM_CPU_ERROR_CPU_WRT_PRTY
 0x1

	)

154 
	#CRM_CPU_ERROR_MSK_REV0
 0x3ffLL

	)

155 
	#CRM_CPU_ERROR_CPU_INV_ADDR_RD
 0x200

	)

156 
	#CRM_CPU_ERROR_VICE_II
 0x100

	)

157 
	#CRM_CPU_ERROR_VICE_SYSAD
 0x80

	)

158 
	#CRM_CPU_ERROR_VICE_SYSCMD
 0x40

	)

159 
	#CRM_CPU_ERROR_VICE_INV_ADDR
 0x20

	)

160 
	#CRM_CPU_ERROR_CPU_II
 0x10

	)

161 
	#CRM_CPU_ERROR_CPU_SYSAD
 0x8

	)

162 
	#CRM_CPU_ERROR_CPU_SYSCMD
 0x4

	)

163 
	#CRM_CPU_ERROR_CPU_INV_ADDR_WR
 0x2

	)

164 
	#CRM_CPU_ERROR_CPU_INV_REG_ADDR
 0x1

	)

166 
	#CRM_VICE_ERROR_ADDR
 (
CRM_BASEADDR
 + 0x58)

	)

167 
	#CRM_VICE_ERROR_ADDR_MSK
 0x3fffffff

	)

169 
	#CRM_MEM_CONTROL
 (
CRM_BASEADDR
 + 0x200)

	)

170 
	#CRM_MEM_CONTROL_MSK
 0x3LL

	)

171 
	#CRM_MEM_CONTROL_ECC_ENA
 0x1

	)

172 
	#CRM_MEM_CONTROL_USE_ECC_REPL
 0x2

	)

177 
	#CRM_MAXBANKS
 8

	)

178 
	#CRM_MEM_BANK_CTRL
(
x
Ë(
CRM_BASEADDR
 + (0x208 + ((xË* 8)))

	)

179 
	#CRM_MEM_BANK_CTRL_MSK
 0x11fLL

	)

180 
	#CRM_MEM_BANK_CTRL_ADDR
 0x1f

	)

181 
	#CRM_MEM_BANK_CTRL_SDRAM_SIZE
 0x100

	)

182 
	#CRM_MEM_BANK_CTRL_ADDR_SHFT
 0

	)

183 
	#CRM_MEM_BANK_CTRL_BANK_TO_ADDR
(
x
) \

184 (((
x
Ë& 
CRM_MEM_BANK_CTRL_ADDR
Ë<< 25)

	)

186 
	#CRM_MEM_REFRESH_CNTR
 (
CRM_BASEADDR
 + 0x248)

	)

187 
	#CRM_MEM_REFRESH_CNTR_MSK
 0x7ffLL

	)

192 
	#CRM_MEM_ERROR_STAT
 (
CRM_BASEADDR
 + 0x250)

	)

193 
	#CRM_MEM_ERROR_STAT_MSK
 0x0ff7ffffLL

	)

194 
	#CRM_MEM_ERROR_MACE_ID
 0x0000007f

	)

195 
	#CRM_MEM_ERROR_MACE_ACCESS
 0x00000080

	)

196 
	#CRM_MEM_ERROR_RE_ID
 0x00007f00

	)

197 
	#CRM_MEM_ERROR_RE_ACCESS
 0x00008000

	)

198 
	#CRM_MEM_ERROR_GBE_ACCESS
 0x00010000

	)

199 
	#CRM_MEM_ERROR_VICE_ACCESS
 0x00020000

	)

200 
	#CRM_MEM_ERROR_CPU_ACCESS
 0x00040000

	)

201 
	#CRM_MEM_ERROR_RESERVED
 0x00080000

	)

202 
	#CRM_MEM_ERROR_SOFT_ERR
 0x00100000

	)

203 
	#CRM_MEM_ERROR_HARD_ERR
 0x00200000

	)

204 
	#CRM_MEM_ERROR_MULTIPLE
 0x00400000

	)

205 
	#CRM_MEM_ERROR_MEM_ECC_RD
 0x00800000

	)

206 
	#CRM_MEM_ERROR_MEM_ECC_RMW
 0x01000000

	)

207 
	#CRM_MEM_ERROR_INV_MEM_ADDR_RD
 0x02000000

	)

208 
	#CRM_MEM_ERROR_INV_MEM_ADDR_WR
 0x04000000

	)

209 
	#CRM_MEM_ERROR_INV_MEM_ADDR_RMW
 0x08000000

	)

211 
	#CRM_MEM_ERROR_ADDR
 (
CRM_BASEADDR
 + 0x258)

	)

212 
	#CRM_MEM_ERROR_ADDR_MSK
 0x3fffffffLL

	)

213 
	#CRM_MEM_ERROR_ADDR_SHFT
 0

	)

215 
	#CRM_MEM_ERROR_ECC_SYN
 (
CRM_BASEADDR
 + 0x260)

	)

216 
	#CRM_MEM_ERROR_ECC_SYN_MSK
 0xffffffffLL

	)

217 
	#CRM_MEM_ERROR_ECC_SYN_SHFT
 0

	)

219 
	#CRM_MEM_ERROR_ECC_CHK
 (
CRM_BASEADDR
 + 0x268)

	)

220 
	#CRM_MEM_ERROR_ECC_CHK_MSK
 0xffffffffLL

	)

221 
	#CRM_MEM_ERROR_ECC_CHK_SHFT
 0

	)

223 
	#CRM_MEM_ERROR_ECC_REPL
 (
CRM_BASEADDR
 + 0x270)

	)

224 
	#CRM_MEM_ERROR_ECC_REPL_MSK
 0xffffffffLL

	)

225 
	#CRM_MEM_ERROR_ECC_REPL_SHFT
 0

	)

228 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

230 #i‚de‡
_STANDALONE


231 
	~<sys/time.h
>

236 
	s¸ime_‰ameöfo
 {

237 
°amp_t
 
	mu°
;

238 
°amp_t
 
	mfõld
;

239 
	mÊags
;

240 
	mfõldøã
;

241 
	mlöe•î‰ame
;

242 
	mlöe
;

243 
	msw≠_≥ndög
;

244 
	msw≠s_ˇn˚Àd
;

245 } 
	t¸ime_‰ameöfo_t
;

247 
¸ime_gëu°msc
(
bnum
, 
¸ime_‰ameöfo
 *
a
);

254 
	t¸ime_hli_id_t
;

255 
	t¸ime_hli_Êags_t
;

257 
	#CRIME_VR_REL
 0

	)

258 
	#CRIME_VD_REL
 1

	)

260 
	s_¸ime_hli_evít
 {

261 
¸ime_hli_id_t
 
	mid
;

262 (*
	m‚
)();

263 *
	m¨g
;

264 
	mlöe
;

265 
	mœãncy
;

266 
_¸ime_hli_evít
 *
	m√xt
;

267 } 
	t¸ime_hli_evít_t
;

269 
¸ime_hli_id_t
 
¸ime_hli_sched
(
u_öt
, (*
‚
)(), *, u_int, u_int,

270 
¸ime_hli_Êags_t
 );

271 
¸ime_hli_unsched
–
u_öt
, 
¸ime_hli_id_t
 );

272 
¸ime_hli_upd©e
–
u_öt
, 
¸ime_hli_id_t
, u_öt, , 
¸ime_hli_Êags_t
 );

277 
	#CRIME_INTERFACE_REVISION
 0

	)

279 
	s¸ime_vöfo
 {

280 
	mvi_bﬂrdªv
;

281 
	mvi_¸imîev
;

282 
	mvi_gbîev
;

283 
	mvi_fõldøã
;

284 
	mvi_width
;

285 
	mvi_height
;

286 
	mvi_Êags
;

287 } 
	t¸ime_vöfo_t
;

292 
	#CRIME_VI_GFXMODE
 1

	)

295 
	#CRIME_VI_STEREO
 2

	)

298 
¸ime_¥e£¡
–
öãrÁ˚_ªvisi⁄
 );

299 
¸ime_video_öfo
–
bﬂrdnum
, 
¸ime_vöfo_t
 *
vöfo
 );

300 
¸ime_ªsync_sched
–
bﬂrdnum
,

301 (*
func
)–*
¨g
, 
ªas⁄
 ), *arg );

306 
	#CRIME_GBE_STOP
 1

	)

309 
	#CRIME_GBE_START
 2

	)

311 (*
	t¸m_ˇŒback_t
)(*);

312 
	`¸ime_ªåa˚_ˇŒback
(
bd
, 
¸m_ˇŒback_t
 
cb
, *
¨g
);

	@/usr/include/sys/ds1286.h

1 #i‚de‡
__SYS_DS1286CLK_H__


2 
	#__SYS_DS1286CLK_H__


	)

4 #i‡
deföed
(
_LANGUAGE_C
)

18 
	sds1286_˛k
 {

19 vﬁ©ûê
	mhundªth_£c
;

20 vﬁ©ûê
	m£c
;

21 vﬁ©ûê
	mmö
;

22 vﬁ©ûê
	mmö_Æ¨m
;

23 vﬁ©ûê
	mhour
;

24 vﬁ©ûê
	mhour_Æ¨m
;

25 vﬁ©ûê
	mday
;

26 vﬁ©ûê
	mday_Æ¨m
;

27 vﬁ©ûê
	md©e
;

28 vﬁ©ûê
	mm⁄th
;

29 vﬁ©ûê
	myór
;

30 vﬁ©ûê
	mcomm™d
;

31 vﬁ©ûê
	mw©ch_hundªth_£c
;

33 vﬁ©ûê
	mw©ch_£c
;

36 vﬁ©ûê
	møm
[50];

39 
ds1286_˛k
 
	tds1286_˛k_t
;

44 
	#DS1386_NVRAM_SIZE
 8192-(
ds1286_˛k_t
)/()

	)

45 
	sds1386_˛k
 {

46 
ds1286_˛k_t
 
	mds1286
;

47 vﬁ©ûê
	mnvøm
[
DS1386_NVRAM_SIZE
];

49 
ds1386_˛k
 
	tds1386_˛k_t
;

53 
	#DALLAS_YRREF
 1940

	)

57 
	#DS1286_RAMOFFSET
 0x38

	)

62 
	#RTDS_CLOCK_ADDR
 
RT_CLOCK_ADDR


	)

64 
	#WTR_READ
 0

	)

65 
	#WTR_WRITE
 1

	)

68 
	#WTR_TDF
 0x01

	)

69 
	#WTR_WAF
 0x02

	)

70 
	#WTR_DEAC_TDM
 0x04

	)

71 
	#WTR_DEAC_WAM
 0x08

	)

72 
	#WTR_PULSE_MODE_INT
 0x10

	)

73 
	#WTR_SOURCE_INTB
 0x20

	)

74 
	#WTR_TIME_DAY_INTA
 0x40

	)

75 
	#WTR_EOSC_N
 0x80

	)

76 
	#WTR_TE
 0x80

	)

79 
	#RTC_RS
 (1 << (
CLK_SHIFT
 + 6)Ë

	)

80 
	#RTC_TIMSAVON
 (1 << (
CLK_SHIFT
 + 7)Ë

	)

	@/usr/include/sys/flock.h

10 #i‚de‡
_FS_FLOCK_H


11 
	#_FS_FLOCK_H


	)

16 
	~<sys/ty≥s.h
>

17 
	~<sys/f˙é.h
>

18 
	~<sys/£ma.h
>

20 
	#INOFLCK
 0x0001

	)

21 
	#SETFLCK
 0x0002

	)

22 
	#SLPFLCK
 0x0004

	)

23 
	#RCMDLCK
 0x0008

	)

24 
	#SETBSDFLCK
 0x0010

	)

25 
	#INOFLCK_READ
 0x0020

	)

27 
	#IGN_PID
 (-1Ë

	)

31 
	#l_íd
 
l_Àn


	)

33 #i‚de‡
_KERNEL


34 
	#MAXEND
 017777777777

	)

35 
	#MAX_LOCK_END
 
MAXEND


	)

37 
	#MAXEND
 0x7fffffffffffffffLL

	)

38 
	#MAX_LOCK_END
 
MAXEND


	)

41 
	sfûock
 {

42 
Êock
 
	m£t
;

44 
	mwakeÊg
;

46 
fûock
 *
	mblocked
;

47 
sysid_t
 
	msysid
;

48 
pid_t
 
	mpid
;

49 
vnode
 *
	mvp
;

50 
u_öt
 
	mˇn˚l
;

51 } 
	mblk
;

52 } 
	m°©
;

53 
sv_t
 
	mwake£m
;

54 
fûock
 *
	m¥ev
;

55 
fûock
 *
	m√xt
;

56 } 
	tfûock_t
;

61 
	sÊid
 {

62 
pid_t
 
	mÊ_pid
;

63 
sysid_t
 
	mÊ_sysid
;

64 } 
	tÊid_t
;

66 #ifde‡
_KERNEL


68 
	gvnode
;

69 
	g¸ed
;

70 
ª˛ock
(
vnode
 *, 
Êock
 *, , , 
off_t
,

71 
¸ed
 *);

73 
ª˛ock2
(
vnode
 *, 
Êock
 *, , , 
off_t
,

74 
¸ed
 *, , , *);

75 
c⁄voff
(
vnode
 *, 
Êock
 *, , 
off_t
, off_t,

76 
¸ed
 *);

77 
ha¶ocks
(
vnode
 *, 
pid_t
, 
sysid_t
);

78 
ha¶ock
(
vnode
 *, 
Êock
 *);

79 
ªmŸñocks
(
vnode
 *);

80 
ªÀa£_ªmŸe_locks
(
vnode
 *);

81 
lock_≥ndög
(
vnode
 *, 
Êock
 *);

82 
ˇn˚l_lock
(
vnode
 *, 
Êock
 *);

83 
˛ó∆ocks
(
vnode
 *, 
pid_t
, 
sysid_t
);

86 
ˇn˚l_lock_f‹_cxfs
(
vnode
 *, 
Êock
 *, );

87 
˛ó∆ocks_ªcovîy
(
vnode
 *, 
pid_t
, 
sysid_t
);

88 
c⁄vît_lock_f‹_cxfs
(
vnode
 *, vnode *);

90 
Êid_t
 *
sys_Êid
;

92 
ˇn˚l_blocked_locks
(
__uöt32_t
);

93 
ˇn˚l_blocked_locks_loˇl
(
__uöt32_t
);

94 #ifde‡
DEBUG


95 
locks_≥ndög
(
pid_t
, 
__uöt32_t
);

	@/usr/include/sys/hpc1.h

15 #i‚de‡
__SYS_HPC1_H__


16 
	#__SYS_HPC1_H__


	)

21 
	#HPC1_SCSI_BC2
 0xbfb00088

	)

22 
	#HPC1_SCSI_BUFFER_PTR2
 0xbfb0008¯

	)

23 
	#HPC1_SCSI_BUFFER_NBDP2
 0xbfb00090

	)

24 
	#HPC1_SCSI_CONTROL2
 0xbfb00094

	)

27 
	#HPC1_SCSI_REG_A2
 0xbfb00122

	)

28 
	#HPC1_SCSI_REG_D2
 0xbfb00126

	)

31 
	#HPC1_SCSI_DMACFG2
 0xbfb00098

	)

32 
	#HPC1_SCSI_PIOCFG2
 0xbfb0009¯

	)

37 
	#HPC1_SCSI_BC3
 0xbf980088

	)

38 
	#HPC1_SCSI_BUFFER_PTR3
 0xbf98008¯

	)

39 
	#HPC1_SCSI_BUFFER_NBDP3
 0xbf980090

	)

40 
	#HPC1_SCSI_CONTROL3
 0xbf980094

	)

43 
	#HPC1_SCSI_REG_A3
 0xbf980122

	)

44 
	#HPC1_SCSI_REG_D3
 0xbf980126

	)

47 
	#HPC1_SCSI_DMACFG3
 0xbf980098

	)

48 
	#HPC1_SCSI_PIOCFG3
 0xbf98009¯

	)

53 
	#HPC1_SCSI_RESET
 0x01

	)

54 
	#HPC1_SCSI_FLUSH
 0x02

	)

55 
	#HPC1_SCSI_TO_MEM
 0x10

	)

56 
	#HPC1_SCSI_STARTDMA
 0x80

	)

59 
	#HPC1_BCNT_OFFSET
 0

	)

60 
	#HPC1_CBP_OFFSET
 4

	)

61 
	#HPC1_NBP_OFFSET
 8

	)

62 
	#HPC1_EOX_VALUE
 0x80000000

	)

64 #ifde‡
LANGUAGE_C


65 #ifdef 
_MIPSEB


66 
	shpc1_scsi_des¸
 {

67 
	mfûl
:19, 
	mb˙t
:13;

68 
	meox
:1, 
	mefûl
:3, 
	mcbp
:28;

69 
	mnfûl
:4, 
	mnbp
:28;

70 } 
	thpc1_scdes¸_t
;

72 
	shpc1_scsi_des¸
 {

73 
	mb˙t
:13, 
	mfûl
:19;

74 
	mcbp
:28, 
	mefûl
:3, 
	meox
:1;

75 
	mnbp
:28, 
	mnfûl
:4;

76 } 
	thpc1_scdes¸_t
;

80 
	#HPC1_ENDIAN_OFFSET
 0xc0

	)

81 
	#HPC1_LIO_0_OFFSET
 0x1c0

	)

	@/usr/include/sys/hpc3.h

25 #i‚de‡
__SYS_HPC3_H__


26 
	#__SYS_HPC3_H__


	)

34 
	#HPC3_INTSTAT_ADDR
 0x1fbb0000

	)

39 
	#HPC3_MISC_ADDR
 0x1fbb0004

	)

40 
	#HPC3_EN_REAL_TIME
 0x1

	)

41 
	#HPC3_DES_ENDIAN
 0x2

	)

46 
	#HPC3_EEPROM_ADDR
 0x1fbb0008

	)

51 
	#HPC3_BUSERR_STAT_ADDR
 0x1fbb0010

	)

61 
	#HPC3_ETHER_RX_CBP
 0x1fb94000

	)

66 
	#HPC3_ETHER_RX_NBDP
 0x1fb94004

	)

71 
	#HPC3_ETHER_RX_BC_ADDR
 0x1fb95000

	)

76 
	#HPC3_ETHER_RX_CNTRL_ADDR
 0x1fb95004

	)

78 
	#RXRBO
 0x0800

	)

79 
	#RXCH_ACTIVE_MASK
 0x0400

	)

80 
	#RXCH_ACTIVE
 0x0200

	)

81 
	#RXENDIAN
 0x0100

	)

82 
	#RXSTATUS_7
 0x0080

	)

83 
	#RXSTATUS_6
 0x0040

	)

84 
	#RXSTATUS_5_0
 0x003‡

	)

90 
	#HPC3_ETHER_RX_GIO
 0x1fb95008

	)

94 
	#HPC3_ETHER_RX_DEV
 0x1fb9500c

	)

99 
	#HPC3_ETHER_MISC_ADDR
 0x1fb95014

	)

104 
	#HPC3_ETHER_DMA_CFG_ADDR
 0x1fb95018

	)

109 
	#HPC3_ETHER_PIO_CFG_ADDR
 0x1fb9501c

	)

114 
	#HPC3_ETHER_TX_CBP
 0x1fb96000

	)

120 
	#HPC3_ETHER_TX_NBDP
 0x1fb96004

	)

127 
	#HPC3_ETHER_TX_BC_ADDR
 0x1fb97000

	)

132 
	#HPC3_ETHER_TX_CNTRL_ADDR
 0x1fb97004

	)

134 
	#TXCH_ACTIVE_MASK
 0x0400;

	)

135 
	#TXCH_ACTIVE
 0x0200;

	)

136 
	#TXENDIAN
 0x0100;

	)

137 
	#TXSTATUS_7_5
 0x00e0;

	)

138 
	#TXSTATUS_4
 0x0010;

	)

139 
	#TXSTATUS_3_0
 0x000f;

	)

144 
	#HPC3_ETHER_TX_GIO
 0x1fb97008

	)

149 
	#HPC3_ETHER_TX_DEV
 0x1fb9700c

	)

154 
	#HPC3_ETHER_REG
 0x1fbd4000

	)

163 
	#HPC3_SCSI_BUFFER_PTR0
 0x1fb90000

	)

164 
	#HPC3_SCSI_BUFFER_PTR1
 0x1fb92000

	)

165 
	#HPC3_SCSI_BUFFER_PTR_ADDR
(
x
) \

166 (
x
 ? \

167 
HPC3_SCSI_BUFFER_PTR1
 : 
HPC3_SCSI_BUFFER_PTR0
)

	)

172 
	#HPC3_SCSI_BUFFER_NBDP0
 0x1fb90004

	)

173 
	#HPC3_SCSI_BUFFER_NBDP1
 0x1fb92004

	)

177 
	#HPC3_SCSI_BC0
 0x1fb91000

	)

178 
	#HPC3_SCSI_BC1
 0x1fb93000

	)

179 
	#HPC3_SCSI_BC_ADDR
(
x
Ë(x ? 
HPC3_SCSI_BC1
 : 
HPC3_SCSI_BC0
)

	)

183 
	#HPC3_SCSI_CONTROL0
 0x1fb91004

	)

184 
	#HPC3_SCSI_CONTROL1
 0x1fb93004

	)

185 
	#HPC3_SCSI_CONTROL_ADDR
(
x
Ë(x ? 
HPC3_SCSI_CONTROL1
 : 
HPC3_SCSI_CONTROL0
)

	)

187 
	#SCPARITY_ERR
 0x80

	)

188 
	#SCCH_RESET
 0x40

	)

189 
	#SCCH_ACTIVE_MASK
 0x20

	)

190 
	#SCCH_ACTIVE
 0x10

	)

191 
	#SCFLUSH
 0x08

	)

192 
	#SCDIROUT
 0x04

	)

193 
	#SCENDIAN
 0x02

	)

194 
	#SCINTERRUPT
 0x01

	)

199 
	#HPC3_SCSI_GIO_FIFO0
 0x1fb91008

	)

200 
	#HPC3_SCSI_GIO_FIFO1
 0x1fb93008

	)

204 
	#HPC3_SCSI_DEV_FIFO0
 0x1fb9100c

	)

205 
	#HPC3_SCSI_DEV_FIFO1
 0x1fb9300c

	)

209 
	#HPC3_SCSI_DMACFG0
 0x1fb91010

	)

210 
	#HPC3_SCSI_DMACFG1
 0x1fb93010

	)

211 
	#HPC3_SCSI_DMACFG_ADDR
(
x
)\

212 (
x
 ? \

213 
HPC3_SCSI_DMACFG1
 : 
HPC3_SCSI_DMACFG0
)

	)

222 
	#HPC3_SCSI_PIOCFG0
 0x1fb91014

	)

223 
	#HPC3_SCSI_PIOCFG1
 0x1fb93014

	)

224 
	#HPC3_SCSI_PIOCFG_ADDR
(
x
)\

225 (
x
 ? \

226 
HPC3_SCSI_PIOCFG1
 : 
HPC3_SCSI_PIOCFG0
)

	)

235 
	#HPC3_SCSI_REG0
 0x1fbc0000

	)

236 
	#HPC3_SCSI_REG1
 0x1fbc8000

	)

239 
	#HPC3_SCSI_FIFO0
 0x1fba8000

	)

240 
	#HPC3_SCSI_FIFO1
 0x1fbØ000

	)

245 
	#HPC31_BASE
 0x1fb00000

	)

250 
	#HPC31_SCSI_BUFFER_PTR0
 (
HPC31_BASE
 + 0x10000)

	)

251 
	#HPC31_SCSI_BUFFER_PTR1
 (
HPC31_BASE
 + 0x12000)

	)

252 
	#HPC31_SCSI_BUFFER_PTR_ADDR
(
x
) \

253 (
x
 ? \

254 
HPC31_SCSI_BUFFER_PTR1
 : 
HPC31_SCSI_BUFFER_PTR0
)

	)

259 
	#HPC31_SCSI_BUFFER_NBDP0
 (
HPC31_BASE
 + 0x10004)

	)

260 
	#HPC31_SCSI_BUFFER_NBDP1
 (
HPC31_BASE
 + 0x12004)

	)

264 
	#HPC31_SCSI_BC0
 (
HPC31_BASE
 + 0x11000)

	)

265 
	#HPC31_SCSI_BC1
 (
HPC31_BASE
 + 0x13000)

	)

266 
	#HPC31_SCSI_BC_ADDR
(
x
Ë(x ? 
HPC31_SCSI_BC1
 : 
HPC31_SCSI_BC0
)

	)

270 
	#HPC31_SCSI_CONTROL0
 (
HPC31_BASE
 + 0x11004)

	)

271 
	#HPC31_SCSI_CONTROL1
 (
HPC31_BASE
 + 0x13004)

	)

272 
	#HPC31_SCSI_CONTROL_ADDR
(
x
Ë(x ? 
HPC31_SCSI_CONTROL1
 : 
HPC31_SCSI_CONTROL0
)

	)

277 
	#HPC31_SCSI_GIO_FIFO0
 (
HPC31_BASE
 + 0x11008)

	)

278 
	#HPC31_SCSI_GIO_FIFO1
 (
HPC31_BASE
 + 0x13008)

	)

282 
	#HPC31_SCSI_DEV_FIFO0
 (
HPC31_BASE
 + 0x1100c)

	)

283 
	#HPC31_SCSI_DEV_FIFO1
 (
HPC31_BASE
 + 0x1300c)

	)

287 
	#HPC31_SCSI_DMACFG0
 (
HPC31_BASE
 + 0x11010)

	)

288 
	#HPC31_SCSI_DMACFG1
 (
HPC31_BASE
 + 0x13010)

	)

289 
	#HPC31_SCSI_DMACFG_ADDR
(
x
)\

290 (
x
 ? \

291 
HPC31_SCSI_DMACFG1
 : 
HPC31_SCSI_DMACFG0
)

	)

295 
	#HPC31_SCSI_PIOCFG0
 (
HPC31_BASE
 + 0x11014)

	)

296 
	#HPC31_SCSI_PIOCFG1
 (
HPC31_BASE
 + 0x13014)

	)

297 
	#HPC31_SCSI_PIOCFG_ADDR
(
x
)\

298 (
x
 ? \

299 
HPC31_SCSI_PIOCFG1
 : 
HPC31_SCSI_PIOCFG0
)

	)

303 
	#HPC31_SCSI_REG0
 (
HPC31_BASE
 + 0x40000)

	)

304 
	#HPC31_SCSI_REG1
 (
HPC31_BASE
 + 0x48000)

	)

308 
	#HPC31_SCSI_FIFO0
 (
HPC31_BASE
 + 0x28000)

	)

309 
	#HPC31_SCSI_FIFO1
 (
HPC31_BASE
 + 0x2a000)

	)

314 
	#HPC31_INTRCFG
 (
HPC31_BASE
 + 0x58000)

	)

319 
	#HPC31_ETHER_MISC_ADDR
 (
HPC31_BASE
 + 0x15014)

	)

324 
	#HPC31_PBUS_PIO_CFG_0
 (
HPC31_BASE
 + 0x5d000)

	)

332 
	#HPC3_PBUS_FIFO
 0x1fba0000

	)

338 
	#HPC3_AUDIO_SUB0
 0x1fbd8000

	)

339 
	#HPC3_AUDIO_SUB1
 0x1fbd8400

	)

340 
	#HPC3_AUDIO_SUB2
 0x1fbd8800

	)

341 
	#HPC3_AUDIO_SUB3
 0x1fbd8c00

	)

347 #i‡
IP26
 || 
IP28


348 
	#HPC3_INT_ADDR
 
HPC3_INT2_ADDR


	)

350 #i‡
IP22
 && 
_LANGUAGE_C


351 
	#HPC3_INT_ADDR
 (
	`is_ioc1
()? 
HPC3_INT3_ADDR
 : 
HPC3_INT2_ADDR
)

	)

353 
	#HPC3_INT2_ADDR
 0x1fbd9000

	)

354 
	#HPC3_INT3_ADDR
 0x1fbd9880

	)

359 
	#HPC3_EXT_IO_ADDR
 0x1fbd9900

	)

361 
	#EXTIO_S0_IRQ_3
 0x8000

	)

362 
	#EXTIO_S0_IRQ_2
 0x4000

	)

363 
	#EXTIO_S0_IRQ_1
 0x2000

	)

364 
	#EXTIO_S0_RETRACE
 0x1000

	)

365 
	#EXTIO_SG_IRQ_3
 0x0800

	)

366 
	#EXTIO_SG_IRQ_2
 0x0400

	)

367 
	#EXTIO_SG_IRQ_1
 0x0200

	)

368 
	#EXTIO_SG_RETRACE
 0x0100

	)

369 
	#EXTIO_GIO_33MHZ
 0x0080

	)

370 
	#EXTIO_EISA_BUSERR
 0x0040

	)

371 
	#EXTIO_MC_BUSERR
 0x0020

	)

372 
	#EXTIO_HPC3_BUSERR
 0x0010

	)

373 
	#EXTIO_S0_STAT_1
 0x0008

	)

374 
	#EXTIO_S0_STAT_0
 0x0004

	)

375 
	#EXTIO_SG_STAT_1
 0x0002

	)

376 
	#EXTIO_SG_STAT_0
 0x0001

	)

380 
	#EXTIO_S1_IRQ_3
 0x0008

	)

381 
	#EXTIO_S1_IRQ_2
 0x0004

	)

382 
	#EXTIO_S1_IRQ_1
 0x0002

	)

383 
	#EXTIO_S1_RETRACE
 0x0001

	)

384 
	#EXTIO_S1_STAT_1
 0x0010

	)

385 
	#EXTIO_S1_STAT_0
 0x0020

	)

391 
	#HPC3_PAR_DATA
 0x1fbd9800

	)

392 
	#HPC3_PAR_CONTROL
 0x1fbd9804

	)

393 
	#HPC3_PAR_STAT
 0x1fbd9808

	)

394 
	#HPC3_PAR_DMA_CONTROL
 0x1fbd980¯

	)

395 
	#HPC3_PAR_INT_STAT
 0x1fbd9810

	)

396 
	#HPC3_PAR_INT_MASK
 0x1fbd9814

	)

397 
	#HPC3_PAR_TIMER1
 0x1fbd9818

	)

398 
	#HPC3_PAR_TIMER2
 0x1fbd981¯

	)

399 
	#HPC3_PAR_TIMER3
 0x1fbd9820

	)

400 
	#HPC3_PAR_TIMER4
 0x1fbd9824

	)

401 
	#HPC3_SERIAL1_CMD
 0x1fbd9830

	)

402 
	#HPC3_SERIAL1_DATA
 0x1fbd9834

	)

403 
	#HPC3_SERIAL0_CMD
 0x1fbd9838

	)

404 
	#HPC3_SERIAL0_DATA
 0x1fbd983¯

	)

405 
	#HPC3_KBD_MOUSE0
 0x1fbd9840

	)

406 
	#HPC3_KBD_MOUSE1
 0x1fbd9844

	)

407 
	#HPC3_GC_SELECT
 0x1fbd9848

	)

408 
	#HPC3_GEN_CONTROL
 0x1fbd984¯

	)

409 
	#HPC3_PANEL
 0x1fbd9850

	)

410 
	#HPC3_SYS_ID
 0x1fbd9858

	)

411 
	#HPC3_READ
 0x1fbd9860

	)

412 
	#HPC3_DMA_SELECT
 0x1fbd9868

	)

413 
	#HPC3_WRITE1
 0x1fbd9870

	)

414 
	#HPC3_RESET
 
HPC3_WRITE1


	)

415 
	#HPC3_WRITE2
 0x1fbd9878

	)

416 
	#HPC3_WRITE
 
HPC3_WRITE2


	)

420 
	#HPC3_INT3_MAP_POLARITY
 0x1fbd989¯

	)

421 
	#HPC3_INT3_TIMER_CLEAR
 0x1fbd98a0

	)

422 
	#HPC3_INT3_ERROR_STATUS
 0x1fbd98a4

	)

423 
	#HPC3_INT3_TIMER_COUNTER_0
 0x1fbd98b0

	)

424 
	#HPC3_INT3_TIMER_COUNTER_1
 0x1fbd98b4

	)

425 
	#HPC3_INT3_TIMER_COUNTER_2
 0x1fbd98b8

	)

426 
	#HPC3_INT3_TIMER_CONTROL
 0x1fbd98b¯

	)

430 
	#HPC3_ERRSTAT_MC_BUSERR
 0x0002

	)

431 
	#HPC3_ERRSTAT_HPC3_BUSERR
 0x0004

	)

436 
	#HPC3_MP_GRX_VERTSTAT
 0x01

	)

437 
	#HPC3_MP_PWD_DISABLE
 0x02

	)

438 
	#HPC3_MP_ISDN_CONN_STAT
 0x04

	)

440 
	#HPC3_MP_KYBD_MSE
 0x10

	)

441 
	#HPC3_MP_SERIAL_PORTS
 0x20

	)

442 
	#HPC3_MP_GIO_EXP0_INT
 0x40

	)

443 
	#HPC3_MP_GIO_EXP1_INT
 0x80

	)

448 
	#HPC3_MP_INIT
 
HPC3_MP_PWD_DISABLE


	)

453 
	#GC_GIO_33MHZ
 0x08

	)

454 
	#GC_AUDIO_FT_N
 0x04

	)

455 
	#GC_ISDN_TX_SEL
 0x02

	)

456 
	#GC_GRX_EXPR_CLR
 0x01

	)

458 
	#GC_SELECT_INIT
 0x07

	)

463 
	#PANEL_VOLUME_UP_ACTIVE
 0x80

	)

464 
	#PANEL_VOLUME_UP_INT
 0x40

	)

465 
	#PANEL_VOLUME_DOWN_ACTIVE
 0x20

	)

466 
	#PANEL_VOLUME_DOWN_INT
 0x10

	)

468 
	#POWER_INT
 0x02

	)

469 
	#POWER_SUP_INHIBIT
 0x01

	)

474 
	#POWER_ON
 (
POWER_INT
|
POWER_SUP_INHIBIT
|
ALL_VOLUME_BUTTONS
)

	)

475 
	#ALL_VOLUME_BUTTONS
 (
PANEL_VOLUME_UP_ACTIVE
|
PANEL_VOLUME_UP_INT
|
PANEL_VOLUME_DOWN_ACTIVE
|
PANEL_VOLUME_DOWN_INT
)

	)

478 
	#CHIP_REV_MASK
 0xe0

	)

479 
	#CHIP_REV_SHIFT
 5

	)

480 
	#BOARD_REV_MASK
 0x1ê

	)

481 
	#BOARD_REV_SHIFT
 1

	)

482 
	#BOARD_ID_MASK
 0x01

	)

484 
	#BOARD_IP24
 0

	)

485 
	#BOARD_IP22
 1

	)

486 
	#CHIP_IOC1
 0x20

	)

489 
	#ETHERNET_LINK
 0x80

	)

490 
	#ETHER_PWR_STAT
 0x40

	)

491 
	#SCSI1_PWR_STAT
 0x20

	)

492 
	#SCSI0_PWR_STAT
 0x10

	)

493 
	#UART1_DSR
 0x08

	)

494 
	#UART0_DSR
 0x04

	)

495 
	#UART1_RI
 0x02

	)

496 
	#UART0_RI
 0x01

	)

499 
	#PAR_RESET
 0x01

	)

500 
	#KBD_MS_RESET
 0x02

	)

501 
	#EISA_RESET
 0x04

	)

502 
	#VIDEO_RESET
 0x04

	)

503 
	#ISDN_RESET
 0x08

	)

504 
	#SPECIAL_GIO_RESET
 0x08

	)

506 
	#LED_GREEN
 0x10

	)

507 
	#LED_AMBER
 0x20

	)

508 
	#LED_RED_OFF
 0x10

	)

509 
	#LED_GREEN_OFF
 0x20

	)

513 
	#SERIAL_CLOCK_10MHZ
 0x00

	)

514 
	#SERIAL_CLOCK_6_67MHZ
 0x10

	)

515 
	#SERIAL_CLOCK_EXT
 0x20

	)

517 
	#DMA_SELECT_PARALLEL
 0x04

	)

518 
	#DMA_SELECT_ISDN_B
 0x02

	)

519 
	#DMA_SELECT_ISDN_A
 0x01

	)

521 
	#DMA_SELECT_INIT
 (
DMA_SELECT_PARALLEL
|
DMA_SELECT_ISDN_B
|\

522 
DMA_SELECT_ISDN_A
)

	)

525 
	#MARGIN_HI
 0x80

	)

526 
	#MARGIN_LO
 0x40

	)

527 
	#UART1_ARC_MODE
 0x20

	)

528 
	#UART0_ARC_MODE
 0x10

	)

529 
	#ETHER_AUTO_SEL
 0x08

	)

530 
	#ETHER_PORT_SEL
 0x04

	)

531 
	#ETHER_UTP_STP
 0x02

	)

532 
	#ETHER_NORM_THRESH
 0x01

	)

538 
	#HPC3_PBUS_CFGPIO_OFFSET
 0x100

	)

539 
	#HPC3_PBUS_CFGPIO_BASE
 0x1fbdd000

	)

540 
	#HPC3_PBUS_CFG_ADDR
(
x
Ë(
HPC3_PBUS_CFGPIO_BASE
 \

541 + (
x
*
HPC3_PBUS_CFGPIO_OFFSET
))

	)

543 
	#HPC3_CFGPIO_RD_P2
 0x00000001

	)

544 
	#HPC3_CFGPIO_RD_P3
 0x0000001e

	)

545 
	#HPC3_CFGPIO_RD_P4
 0x000001e0

	)

546 
	#HPC3_CFGPIO_WR_P2
 0x00000200

	)

547 
	#HPC3_CFGPIO_WR_P3
 0x00003c00

	)

548 
	#HPC3_CFGPIO_WR_P4
 0x0003c000

	)

549 
	#HPC3_CFGPIO_DS_16
 0x00040000

	)

550 
	#HPC3_CFGPIO_EVEN_HI
 0x00080000

	)

555 
	#HPC3_PBUS_CFGDMA_OFFSET
 0x200

	)

556 
	#HPC3_PBUS_CFGDAM_BASE
 0x1fbdc000

	)

557 
	#HPC3_PBUS_CFGDMA_ADDR
(
x
)\

558 (
HPC3_PBUS_CFGDAM_BASE
 \

559 + (
x
*
HPC3_PBUS_CFGDMA_OFFSET
))

	)

567 
	#HPC3_PBUS_BP_OFFSET
 0x2000

	)

568 
	#HPC3_PBUS_BP_BASE
 0x1fb80000

	)

569 
	#HPC3_PBUS_BP
(
x
Ë(
HPC3_PBUS_BP_BASE
 + \

570 (
x
*
HPC3_PBUS_BP_OFFSET
))

	)

577 
	#HPC3_PBUS_DP_OFFSET
 0x2000

	)

578 
	#HPC3_PBUS_DP_BASE
 0x1fb80004

	)

579 
	#HPC3_PBUS_DP
(
x
Ë(
HPC3_PBUS_DP_BASE
 + \

580 (
x
*
HPC3_PBUS_DP_OFFSET
))

	)

587 
	#HPC3_PBUS_CONTROL_OFFSET
 0x2000

	)

588 
	#HPC3_PBUS_CONTROL_BASE
 0x1fb81000

	)

589 #ifde‡
_LANGUAGE_C


590 
	#HPC3_PBUS_CONTROL_ADDR
(
x
Ë(
HPC3_PBUS_CONTROL_BASE
 + \

591 (
__psunsig√d_t
) \

592 ((
x
)*
HPC3_PBUS_CONTROL_OFFSET
))

	)

594 
	#HPC3_PBUS_CONTROL_ADDR
(
x
Ë(
HPC3_PBUS_CONTROL_BASE
 + \

595 ((
x
)*
HPC3_PBUS_CONTROL_OFFSET
))

	)

598 
	#PBUS_CTRL_ENDIAN
 0x02

	)

599 
	#PBUS_CTRL_DMADIR
 0x04

	)

600 
	#PBUS_CTRL_FLUSH
 0x08

	)

601 
	#PBUS_CTRL_DMASTART
 0x10

	)

602 
	#PBUS_CTRL_LOAD_ENA
 0x20

	)

603 
	#PBUS_CTRL_REALTIME
 0x40

	)

605 
	#PBUS_CTRL_INT_PEND
 0x01

	)

606 
	#PBUS_CTRL_DMASTAT
 0x02

	)

611 
	#HPC3_PBUS_PROM_WE
 0x1fbde000

	)

612 
	#HPC3_PBUS_PROM_SWAP
 0x1fbde800

	)

613 
	#HPC3_PBUS_GEN_OUT
 0x1fbdf800

	)

614 
	#HPC3_PBUS_RTC_1286
 0x1fbe0000

	)

621 #ifde‡
_LANGUAGE_C


628 
	#HPC3_CBP_OFFSET
 0

	)

629 
	#HPC3_BCNT_OFFSET
 4

	)

630 
	#HPC3_NBP_OFFSET
 8

	)

631 
	#HPC3_EOX_VALUE
 0x80000000

	)

632 
	sscdes¸
 {

633 #ifde‡
_MIPSEB


634 
	mcbp
;

635 
	meox
:1,
	m∑d1
:1,
	mxõ
:1,
	m∑d0
:15,
	mb˙t
:14;

636 
	mnbp
;

637 
	mw‹d_∑d
;

639 #ifde‡
_MIPSEL


640 
	mcbp
;

641 
	mb˙t
:14,
	m∑d0
:15,
	mxõ
:1,
	m∑d1
:1,
	meox
:1;

642 
	mnbp
;

643 
	mw‹d_∑d
;

645 } 
	tscdes¸_t
;

658 
	#HPC3_GIO64_INTSTAT
 (
gio64_öt°©
 *)
HPC3_INTSTAT_ADDR


	)

659 
	sgio64_öt°©
 {

660 #ifde‡
_MIPSEB


661 
	m∑d0
 :22;

662 
	mscsi_ch™1_öt_°©
 :1;

663 
	mscsi_ch™0_öt_°©
 :1;

664 
	mpbus_öt_°©
 :8;

666 #ifde‡
_MIPSEL


667 
	mpbus_öt_°©
 :8;

668 
	mscsi_ch™0_öt_°©
 :1;

669 
	mscsi_ch™1_öt_°©
 :1;

670 
	m∑d0
 :22;

672 } 
	tgio64_öt°©_t
;

679 
	#HPC3_GIO64_MISC
 (
gio64_misc
 *)
HPC3_MISC_ADDR


	)

680 
	sgio64_misc
 {

681 #ifde‡
_MIPSEB


682 
	m∑d0
 :30;

683 
	mdes_ídün
 :1;

684 
	mí_ªÆ_time
 :1;

686 #ifde‡
_MIPSEL


687 
	mí_ªÆ_time
 :1;

688 
	mdes_ídün
 :1;

689 
	m∑d0
 :30;

691 } 
	tgio64_misc_t
;

698 
	#HPC3_GIO64_BUSERR_STAT
 (
gio64_bu£º_°©
 *) \

699 
HPC3_BUSERR_STAT_ADDR


	)

700 
	sgio64_bu£º_°©
 {

701 #ifde‡
_MIPSEB


702 
	m∑d0
 :13;

703 
	m∑rôy_id
 :10;

704 
	mpio_dma
 :1;

705 
	mbyã_œ√_îr
 :8;

707 #ifde‡
_MIPSEL


708 
	mbyã_œ√_îr
 :8;

709 
	mpio_dma
 :1;

710 
	m∑rôy_id
 :10;

711 
	m∑d0
 :13;

713 } 
	tgio64_bu£º_°©_t
;

721 
	sgio64_bus_c⁄åﬁ
 {

722 
gio64_öt°©_t
 
	möt°©
;

723 
gio64_misc_t
 
	mmisc
;

724 
	m∑d0
[0xc];

725 
gio64_bu£º_°©_t
 
	mbus_îr_°©
;

726 } 
	tgio64_bus_c⁄åﬁ_t
;

736 
	#HPC3_ETHER_RX_BC
 (
ëhî_rx_bc
 *)
HPC3_ETHER_RX_BC_ADDR


	)

737 
	sëhî_rx_bc
 {

738 #ifde‡
_MIPSEB


739 
	meox
 :1;

740 
	m∑d1
 :1;

741 
	mxõ
 :1;

742 
	m∑d0
 :15;

743 
	mdes_bc
 :14;

745 #ifde‡
_MIPSEL


746 
	mdes_bc
 :14;

747 
	m∑d0
 :15;

748 
	mxõ
 :1;

749 
	m∑d1
 :1;

750 
	meox
 :1;

752 } 
	tëhî_rx_bc_t
;

757 
	#HPC3_ETHER_MISC
 (
ëhî_misc
 *)
HPC3_ETHER_MISC_ADDR


	)

758 
	sëhî_misc
 {

759 #ifde‡
_MIPSEB


760 
	m∑d0
 :29;

761 
	mlo›back
 :1;

762 
	m˛röt
 :1;

763 
	mch_ª£t
 :1;

765 #ifde‡
_MIPSEL


766 
	mch_ª£t
 :1;

767 
	m˛röt
 :1;

768 
	mlo›back
 :1;

769 
	m∑d0
 :29;

771 } 
	tëhî_misc_t
;

776 
	#HPC3_ETHER_DMA_CFG
 (
ëhî_dma_cfg
 *)
HPC3_ETHER_DMA_CFG_ADDR


	)

777 
	sëhî_dma_cfg
 {

778 #ifde‡
_MIPSEB


779 
	m∑d0
 :14;

780 
	mpgm_timeout
 :2;

781 
	mfix_öå
 :1;

782 
	mfix_e›
 :1;

783 
	mfix_rxdc
 :1;

784 
	mwr_˘æ
 :1;

785 
	mdma_d3
 :4;

786 
	mdma_d2
 :4;

787 
	mdma_d1
 :4;

789 #ifde‡
_MIPSEL


790 
	mdma_d1
 :4;

791 
	mdma_d2
 :4;

792 
	mdma_d3
 :4;

793 
	mwr_˘æ
 :1;

794 
	mfix_rxdc
 :1;

795 
	mfix_e›
 :1;

796 
	mfix_öå
 :1;

797 
	mpgm_timeout
 :2;

798 
	m∑d0
 :14;

800 } 
	tëhî_dma_cfg_t
;

805 
	#HPC3_ETHER_PIO_CFG
 (
ëhî_pio_cfg
 *)
HPC3_ETHER_PIO_CFG_ADDR


	)

806 
	sëhî_pio_cfg
 {

807 #ifde‡
_MIPSEB


808 
	m∑d0
 :19;

809 
	mã°_øm
 :1;

810 
	mpio_p3
 :4;

811 
	mpio_p2
 :4;

812 
	mpio_p1
 :4;

814 #ifde‡
_MIPSEL


815 
	mpio_p1
 :4;

816 
	mpio_p2
 :4;

817 
	mpio_p3
 :4;

818 
	mã°_øm
 :1;

819 
	m∑d0
 :19;

821 } 
	tëhî_pio_cfg_t
;

827 
	#HPC3_ETHER_TX_BC
 (
ëhî_tx_bc
 *)
HPC3_ETHER_TX_BC_ADDR


	)

828 
	sëhî_tx_bc
 {

829 #ifde‡
_MIPSEB


830 
	meox
 :1;

831 
	me›
 :1;

832 
	mxõ
 :1;

833 
	meox_ßm∂ed
 :1;

834 
	m∑d0
 :14;

835 
	mdes_bc
 :14;

837 #ifde‡
_MIPSEL


838 
	mdes_bc
 :14;

839 
	m∑d0
 :14;

840 
	meox_ßm∂ed
 :1;

841 
	mxõ
 :1;

842 
	me›
 :1;

843 
	meox
 :1;

845 } 
	tëhî_tx_bc_t
;

850 
	#HPC3_ETHER_TX_CNTRL
 (
ëhî_tx_˙ål
 *) \

851 
HPC3_ETHER_TX_CNTRL_ADDR


	)

852 
	sëhî_tx_˙ål
 {

853 #ifde‡
_MIPSEB


854 
	m∑d0
 :21;

855 
	mch_a˘ive_mask
 :1;

856 
	mch_a˘ive
 :1;

857 
	mídün
 :1;

858 
	m°©us_7_5
 :3;

859 
	m°©us_4
 :1;

860 
	m°©us_3_0
 :4;

862 #ifde‡
_MIPSEL


863 
	m°©us_3_0
 :4;

864 
	m°©us_4
 :1;

865 
	m°©us_7_5
 :3;

866 
	mídün
 :1;

867 
	mch_a˘ive
 :1;

868 
	mch_a˘ive_mask
 :1;

869 
	m∑d0
 :21;

871 } 
	tëhî_tx_˙ål_t
;

881 
	#HPC3_SCSI_BUFFER_PTR
(
x
Ë(
scsi_buf„r_±r
 *)\

882 
	`HPC3_SCSI_BUFFER_PTR_ADDR
(
x
)

	)

883 
	sscsi_buf„r_±r
 {

884 
	mcbp
;

885 
	mnbdp
;

886 } 
	tscsi_buf„r_±r_t
;

891 
	#HPC3_SCSI_BC
(
x
Ë(
scsi_bc
 *)
	`HPC3_SCSI_BC_ADDR
(x)

	)

892 
	sscsi_bc
 {

893 #ifde‡
_MIPSEB


894 
	meox
 :1;

895 
	m∑d0
 :1;

896 
	mxõ
 :1;

897 
	m∑d1
 :15;

898 
	mdes_bc
 :14;

900 #ifde‡
_MIPSEL


901 
	mdes_bc
 :14;

902 
	m∑d1
 :15;

903 
	mxõ
 :1;

904 
	m∑d0
 :1;

905 
	meox
 :1;

907 } 
	tscsi_bc_t
;

914 
	#HPC3_SCSI_DMACFG
(
x
Ë(
scsi_dma_cfg
 *) \

915 
	`HPC3_SCSI_DMACFG_ADDR
(
x
)

	)

916 
	sscsi_dma_cfg
 {

917 #ifde‡
_MIPSEB


918 
	m∑d0
 :13;

919 
	mdªq_óæy
 :2;

920 
	mdªq_pﬁ
 :1;

921 
	mdma_∑rôy_í
 :1;

922 
	mdma_sw≠
 :1;

923 
	mdma_16
 :1;

924 
	mhwm
 :3;

925 
	mdma_d3
 :3;

926 
	mdma_d2
 :3;

927 
	mdma_d1
 :3;

928 
	mhÆf_˛ock
 :1;

930 #ifde‡
_MIPSEL


931 
	mhÆf_˛ock
 :1;

932 
	mdma_d1
 :3;

933 
	mdma_d2
 :3;

934 
	mdma_d3
 :3;

935 
	mhwm
 :3;

936 
	mdma_16
 :1;

937 
	mdma_sw≠
 :1;

938 
	mdma_∑rôy_í
 :1;

939 
	mdªq_pﬁ
 :1;

940 
	mdªq_óæy
 :2;

941 
	m∑d0
 :13;

943 } 
	tscsi_dma_cfg_t
;

949 
	#HPC3_SCSI_PIOCFG
(
x
Ë(
scsi_pio_cfg
 *) \

950 
	`HPC3_SCSI_PIOCFG_ADDR
(
x
)

	)

951 
	sscsi_pio_cfg
 {

952 #ifde‡
_MIPSEB


953 
	m∑d0
 :16;

954 
	mpio_fuji_mode
 :1;

955 
	mpio_∑rôy_í
 :1;

956 
	mpio_sw≠
 :1;

957 
	mpio_16
 :1;

958 
	mpio_p1
 :3;

959 
	mpio_p2_rd
 :4;

960 
	mpio_p2_wr
 :3;

961 
	mpio_p3
 :2;

963 #ifde‡
_MIPSEL


964 
	mpio_p3
 :2;

965 
	mpio_p2_wr
 :3;

966 
	mpio_p2_rd
 :4;

967 
	mpio_p1
 :3;

968 
	mpio_16
 :1;

969 
	mpio_sw≠
 :1;

970 
	mpio_∑rôy_í
 :1;

971 
	mpio_fuji_mode
 :1;

972 
	m∑d0
 :16;

974 } 
	tscsi_pio_cfg_t
;

980 
	spbus_cfgpio
 {

981 #ifde‡
_MIPSEB


982 
	m∑d0
 :12;

983 
	meví_high
 :1;

984 
	mds_16
 :1;

985 
	mwr_p4
 :4;

986 
	mwr_p3
 :4;

987 
	mwr_p2
 :1;

988 
	mrd_p4
 :4;

989 
	mrd_p3
 :4;

990 
	mrd_p2
 :1;

992 #ifde‡
_MIPSEL


993 
	mrd_p2
 :1;

994 
	mrd_p3
 :4;

995 
	mrd_p4
 :4;

996 
	mwr_p2
 :1;

997 
	mwr_p3
 :4;

998 
	mwr_p4
 :4;

999 
	mds_16
 :1;

1000 
	meví_high
 :1;

1001 
	m∑d0
 :12;

1003 } 
	tpbus_cfgpio_t
;

1005 
	spbus_cfgdma
 {

1006 #ifde‡
_MIPSEB


1007 
	m∑d0
 :4;

1008 
	mdrq_live
 :1;

1009 
	mbur°_cou¡
 :5;

1010 
	mªÆ_time
 :1;

1011 
	m∑d1
 :1;

1012 
	meví_high
 :1;

1013 
	mds_16
 :1;

1014 
	mwr_d5
 :4;

1015 
	mwr_d4
 :4;

1016 
	mwr_d3
 :1;

1017 
	mrd_d5
 :4;

1018 
	mrd_d4
 :4;

1019 
	mrd_d3
 :1;

1021 #ifde‡
_MIPSEL


1022 
	mrd_d3
 :1;

1023 
	mrd_d4
 :4;

1024 
	mrd_d5
 :4;

1025 
	mwr_d3
 :1;

1026 
	mwr_d4
 :4;

1027 
	mwr_d5
 :4;

1028 
	mds_16
 :1;

1029 
	meví_high
 :1;

1030 
	m∑d1
 :1;

1031 
	mªÆ_time
 :1;

1032 
	mbur°_cou¡
 :5;

1033 
	mdrq_live
 :1;

1034 
	m∑d0
 :4;

1036 } 
	tpbus_cfgdma_t
;

1038 
	#HPC3_PBUS_CONTROL
(
x
Ë(
pbus_c⁄åﬁ_wrôe
 *) \

1039 
	`HPC3_PBUS_CONTROL_ADDR
(
x
)

	)

1040 
	spbus_c⁄åﬁ_wrôe
 {

1041 #ifde‡
_MIPSEB


1042 
	m∑d0
 :2;

1043 
	mfifo_íd
 :6;

1044 
	m∑d1
 :2;

1045 
	mfifo_beg
 :6;

1046 
	mhighw©î
 :8;

1047 
	m∑d2
 :1;

1048 
	mªÆ_time
 :1;

1049 
	mch_a˘_ld
 :1;

1050 
	mch_a˘
 :1;

1051 
	mÊush
 :1;

1052 
	mª˚ive
 :1;

1053 
	mlôée
 :1;

1054 
	m∑d3
 :1;

1056 #ifde‡
_MIPSEL


1057 
	m∑d3
 :1;

1058 
	mlôée
 :1;

1059 
	mª˚ive
 :1;

1060 
	mÊush
 :1;

1061 
	mch_a˘
 :1;

1062 
	mch_a˘_ld
 :1;

1063 
	mªÆ_time
 :1;

1064 
	m∑d2
 :1;

1065 
	mhighw©î
 :8;

1066 
	mfifo_beg
 :6;

1067 
	m∑d1
 :2;

1068 
	mfifo_íd
 :6;

1069 
	m∑d0
 :2;

1071 } 
	tpbus_c⁄åﬁ_wrôe_t
;

1073 
	spbus_c⁄åﬁ_ªad
 {

1074 #ifde‡
_MIPSEB


1075 
	m∑d0
 :30;

1076 
	mch_a˘
 :1;

1077 
	möå
 :1;

1079 #ifde‡
_MIPSEL


1080 
	möå
 :1;

1081 
	mch_a˘
 :1;

1082 
	m∑d0
 :30;

1084 } 
	tpbus_c⁄åﬁ_ªad_t
;

1087 
	spbus_c⁄åﬁ
{

1089 
pbus_c⁄åﬁ_wrôe_t
 
	mc⁄åﬁW
;

1090 
pbus_c⁄åﬁ_ªad_t
 
	mc⁄åﬁR
;

1091 } 
	mc⁄åﬁRW
;

1092 } 
	tpbus_c⁄åﬁ_t
;

1093 
	#c⁄åﬁ_wr
 
c⁄åﬁRW
.
c⁄åﬁW


	)

1094 
	#c⁄åﬁ_rd
 
c⁄åﬁRW
.
c⁄åﬁR


	)

1101 
	spbus_˘æ
 {

1102 
	mbp
;

1103 
	mdp
;

1104 
	m∑d0
[0xff8];

1105 
pbus_c⁄åﬁ_t
 
	mc⁄åﬁ
;

1106 } 
	tpbus_˘æ_t
;

1108 #i‡
_STANDALONE


1109 
	#GETDESC
(
adr
) ( ()(adr), \

1110 ()(
adr
))

	)

	@/usr/include/sys/kabi.h

19 #i‚de‡
__SYS_KABI_H__


20 
	#__SYS_KABI_H__


	)

23 
	sv_m≠ít
 {

24 
ˇddr_t
 
	m°¨t
;

25 
ˇddr_t
 
	míd
;

26 
	mmode
;

27 } 
	tv_m≠ít_t
;

29 
	s¥oc_h™dl
 {

30 
	mdummy
;

31 } 
	t¥oc_h™dl_t
;

33 
	sshaddr_h™dl
 {

34 
	mdummy
;

35 } 
	tshaddr_h™dl_t
;

37 
	sthªad_h™dÀ
 {

38 
	mdummy
;

39 } * 
	tthªad_h™dÀ_t
;

40 
	sthªad_group_h™dÀ
 {

41 
	mdummy
;

42 } * 
	tthªad_group_h™dÀ_t
;

46 
	#PID_SIGNAL_NOSLEEP
 0x1

	)

58 
	#ABI_IRIX5
 0x02

	)

59 
	#ABI_IRIX5_64
 0x04

	)

60 
	#ABI_IRIX5_N32
 0x08

	)

62 
	#ABI_IS
(
£t
,
abi
Ë(((£tË& (abi)Ë!0)

	)

63 
	#ABI_IS_IRIX5
(
abi
Ë(
	`ABI_IS
(
ABI_IRIX5
,ábi))

	)

64 
	#ABI_IS_IRIX5_N32
(
abi
Ë(
	`ABI_IS
(
ABI_IRIX5_N32
,ábi))

	)

65 
	#ABI_IS_IRIX5_64
(
abi
Ë(
	`ABI_IS
(
ABI_IRIX5_64
,ábi))

	)

66 
	#ABI_IS_64BIT
(
abi
Ë(
	`ABI_IS
(
ABI_IRIX5_64
,ábi))

	)

67 
	#ABI_HAS_8_AREGS
(
abi
Ë(
	`ABI_IS
(
ABI_IRIX5_N32
|
ABI_IRIX5_64
,ábi))

	)

68 
	#ABI_HAS_64BIT_REGS
(
abi
Ë(
	`ABI_IS
(
ABI_IRIX5_N32
|
ABI_IRIX5_64
,ábi))

	)

70 
cuøbi_is_úix5_64
();

72 
	g¥oc
;

73 
¥ocsˇn
(((*)(
¥oc
 *, *, )), *);

75 
	gk_sigöfo
;

76 *
gë_cuºít_«me
();

77 
uöt64_t
 
gë_thªad_id
();

78 
pid_t
 
¥oc_pid
(
¥oc_h™dl_t
 *);

79 *
¥oc_«me
(
¥oc_h™dl_t
 *);

80 
sysöfo_outch_add
();

81 
sysöfo_øwch_add
();

82 
f‹˚_ªsched
();

83 
£t_åiggîßve
();

84 
cuπhªadgroup_sˇn
((*)(
thªad_h™dÀ_t
, *), *);

85 
thªad_h™dÀ_t
 
	`cuπhªadh™dÀ
();

86 
thªad_group_h™dÀ_t
 
	`thªadh™dÀ_to_thªadgrouph™dÀ
(
thªad_h™dÀ_t
);

87 
	`thªadgroup_ªf˙t
(
thªad_h™dÀ_t
 
thd
);

88 
¥oc_h™dl_t
 *
	`thªadh™dÀ_to_¥oc
(
thªad_h™dÀ_t
);

89 
¥oc_h™dl_t
 *
	`cuΩroc
();

90 *
	`gë_cur•roc_shaddr
();

91 
	`thªad_is•roc
(
thªad_h™dÀ_t
);

92 
	`£çdvec_cuΩroc
();

93 
	`˛óΩdvec_cuΩroc
();

94 
	`cuΩroc_vt›
(
ˇddr_t
, , *, );

95 
	`cuΩroc_vt›v
(
ˇddr_t
, , *, , , );

96 
	`cuΩroc_abi
();

97 
	`£tgfxsched_thªad
(
thªad_h™dÀ_t
);

98 
	`˛órgfxsched_thªad
(
thªad_h™dÀ_t
);

99 
	`¥o˚ss‹s_c⁄figuªd
();

100 
	`gfx_waôc_⁄
();

101 
	`gfx_waôc_off
();

102 
	`gfx_waôf_⁄
();

103 
	`gfx_waôf_off
();

104 
	`curuthªad_£t_π¥i
();

105 
	`psig«l
(
¥oc_h™dl_t
 *, );

106 
	`pid_sig«l
(
pid_t
, , , 
k_sigöfo
 *);

107 #ifde‡
SN0


108 
	`£tg¢sched_thªad
(
thªad_h™dÀ_t
);

109 
	`˛órg¢sched_thªad
(
thªad_h™dÀ_t
);

110 
	`is_g¢_by∑ss_thªad
(
thªad_h™dÀ_t
);

112 #ifde‡
R10000_SPECULATION_WAR


113 
	`unm≠éb_ønge
(
ˇddr_t
, 
size_t
);

115 
	`kabi_Æloc_∑ges
(
∑ddr_t
 *, 
pg˙t_t
, , *, );

116 
	`kabi_‰ì_∑ges
(
∑ddr_t
 *, 
pg˙t_t
);

117 
pgno_t
 
	`kabi_num_lockabÀ_∑ges
();

123 
	`v_m≠kv£gmít
(*, 
ˇddr_t
, *, 
pgno_t
, , 
__psunsig√d_t
);

124 
	`v_m≠£gmít
(*, 
ˇddr_t
, , 
pgno_t
, , 
__psunsig√d_t
);

125 
	`chk_dmabuf_©å
(*, , );

	@/usr/include/sys/ksignal.h

3 #i‚de‡
_SYS_KSIGNAL_H


4 
	#_SYS_KSIGNAL_H


	)

12 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

13 
	~<sys/kty≥s.h
>

14 
	~<sys/¥oc£t.h
>

15 
	~<sys/sig«l.h
>

16 
	~<sys/sigöfo.h
>

30 
	súix5_siga˘i⁄
 {

31 
≠p32_öt_t
 
	mß_Êags
;

32 
≠p32_±r_t
 
	mk_ß_h™dÀr
;

34 
sig£t_t
 
	mß_mask
;

36 
≠p32_öt_t
 
	mß_ªsv
[2];

37 } 
	túix5_siga˘i⁄_t
;

42 
	súix5_64_siga˘i⁄
 {

43 
≠p64_öt_t
 
	mß_Êags
;

44 
≠p64_±r_t
 
	mk_ß_h™dÀr
;

46 
sig£t_t
 
	mß_mask
;

48 
≠p64_öt_t
 
	mß_ªsv
[2];

49 } 
	túix5_64_siga˘i⁄_t
;

51 
	sk_siga˘i⁄
 {

52 (*
	mk_ß_h™dÀr
)();

53 
k_sig£t_t
 
	mß_mask
;

55 
__öt32_t
 
	mß_Êags
;

56 } 
	tk_siga˘i⁄_t
;

58 #if (
_MIPS_SIM
 !
_ABIO32
)

61 
	#sigmask
(
n
Ë((
__uöt64_t
)1 << (n-1))

	)

64 
	#sigktoou
(
ks
,
i
Ë((iË*(ks))

	)

65 
	#sigoutok
(
i
,
ks
Ë(*(ksË(i))

	)

67 
	#sigutok
(
us
,
ks
) \

68 (*(
ks
Ë((
k_sig£t_t
)(
us
)->
__sigbôs
[1] << 32) \

69 | ((
k_sig£t_t
)(
us
)->
__sigbôs
[0]));

	)

71 
	#sigktou
(
ks
,
us
) \

72 ((
us
)->
__sigbôs
[0] = (
__uöt32_t
)(*(
ks
)), \

73 (
us
)->
__sigbôs
[1] = (
__uöt32_t
)(*(
ks
) >> 32),\

74 (
us
)->
__sigbôs
[2] = 0, \

75 (
us
)->
__sigbôs
[3] = 0);

	)

79 
	#MAXBITNO
 (32)

	)

80 
	#sigw‹d
(
n
Ë(((
uöt
)“)-1)/
MAXBITNO
)

	)

82 
	#sigmask
(
n
Ë(1<<((“)-1)%
MAXBITNO
))

	)

85 
	#sigktoou
(
ks
,
i
Ë((iË(ks)->
sigbôs
[0])

	)

86 
	#sigoutok
(
i
,
ks
Ë((ks)->
sigbôs
[0] = i, \

87 (
ks
)->
sigbôs
[1] = 0)

	)

89 
	#sigutok
(
us
,
ks
) \

90 ((
ks
)->
sigbôs
[0] = (
us
)->
__sigbôs
[0], \

91 (
ks
)->
sigbôs
[1] = (
us
)->
__sigbôs
[1]);

	)

93 
	#sigktou
(
ks
,
us
) \

94 ((
us
)->
__sigbôs
[0] = (
ks
)->
sigbôs
[0], \

95 (
us
)->
__sigbôs
[1] = (
ks
)->
sigbôs
[1], \

96 (
us
)->
__sigbôs
[2] = 0, \

97 (
us
)->
__sigbôs
[3] = 0);

	)

101 #i‡
deföed
(
_KERNEL
)

102 
k_sig£t_t
 
°›deÁu…
,

103 
jobc⁄åﬁ
,

104 
ign‹edeÁu…
,

105 
ˇ¡block
,

106 
ˇ¡mask
,

107 
ˇ¡ª£t
,

108 
fûl£t
,

109 
em±y£t
;

111 
z⁄e
 *
sigqueue_z⁄e
;

112 
	#sigqueue_Æloc
(
f
Ë
	`kmem_z⁄e_Æloc
(
sigqueue_z⁄e
, f)

	)

113 
	#sigqueue_‰ì
(
s
Ë
	`kmem_z⁄e_‰ì
(
sigqueue_z⁄e
, s)

	)

115 
	gidty≥
;

116 
	gúix5_uc⁄ãxt
;

117 
	gúix5_sigc⁄ãxt
;

118 
	gúix5_sigöfo
;

119 
	gúix5_64_sigöfo
;

120 
	gúix5_64_uc⁄ãxt
;

121 
	gúix5_n32_uc⁄ãxt
;

122 
	gk_sigöfo
;

123 
	g¥oc
;

124 
	guthªad_s
;

125 
	grußge
;

126 
	grvÆ
;

128 #if (
_MIPS_SIM
 !
_ABIO32
)

130 
	#sigem±y£t
(
s
Ë(()(*(sË0))

	)

131 
	#sigfûl£t
(
s
Ë(()(*(sË
fûl£t
))

	)

132 
	#sigadd£t
(
s
,
i
Ë(()(*(sË|
	`sigmask
(i)))

	)

133 
	#sigbôadd£t
(
s
,
b
,
n
Ë(()(*(sË|(b)))

	)

134 
	#sigdñ£t
(
s
,
i
Ë(()(*(sË&~
	`sigmask
(i)))

	)

135 
	#sigbôdñ£t
(
s
,
b
,
n
Ë(()(*(sË&~(b)))

	)

136 
	#sigismembî
(
s
,
i
Ë(*(sË& 
	`sigmask
(i))

	)

137 
	#sigbôismembî
(
s
,
b
,
n
Ë(*(sË& (b))

	)

138 
	#sig£tismembî
(
s1
,
s2
Ë(*(s1Ë& *(s2))

	)

139 
	#sigi£m±y
(
s
Ë(*(sË=0)

	)

140 
	#sig‹£t
(
s1
,
s2
Ë(()(*(s1Ë|*(s2)))

	)

141 
	#sig™d£t
(
s1
,
s2
Ë(()(*(s1Ë&*(s2)))

	)

142 
	#sigdiff£t
(
s1
,
s2
Ë(()(*(s1Ë&~(*(s2))))

	)

146 
	#sigem±y£t
(
s
Ë(()((s)->
sigbôs
[0] = (s)->sigbôs[1] = 0))

	)

147 
	#sigfûl£t
(
s
Ë(()(*(sË
fûl£t
))

	)

148 
	#sigadd£t
(
s
,
i
Ë(()((s)->
sigbôs
[
	`sigw‹d
(i)] |
	`sigmask
(i)))

	)

149 
	#sigdñ£t
(
s
,
i
Ë(()((s)->
sigbôs
[
	`sigw‹d
(i)] &~
	`sigmask
(i)))

	)

150 
	#sigismembî
(
s
,
i
Ë((s)->
sigbôs
[
	`sigw‹d
(i)] & 
	`sigmask
(i))

	)

151 
	#sig£tismembî
(
s1
,
s2
Ë(((s1)->
sigbôs
[0] & (s2)->sigbits[0]) | \

152 ((
s1
)->
sigbôs
[1] & (
s2
)->sigbôs[1]))

	)

153 
	#sigi£m±y
(
s
Ë(((s)->
sigbôs
[0] | (s)->sigbôs[1]Ë=0)

	)

155 
	#sig‹£t
(
s1
,
s2
Ë(()(((s1)->
sigbôs
[0] |= (s2)->sigbits[0]), \

156 ((
s1
)->
sigbôs
[1] |(
s2
)->sigbôs[1])))

	)

157 
	#sig™d£t
(
s1
,
s2
Ë(()(((s1)->
sigbôs
[0] &= (s2)->sigbits[0]), \

158 ((
s1
)->
sigbôs
[1] &(
s2
)->sigbôs[1])))

	)

159 
	#sigdiff£t
(
s1
,
s2
Ë(()(((s1)->
sigbôs
[0] &= ~(s2)->sigbits[0]), \

160 ((
s1
)->
sigbôs
[1] &~(
s2
)->sigbôs[1])))

	)

161 
	#sigbôadd£t
(
s
,
b
,
n
Ë
	`sigadd£t
((s),“))

	)

162 
	#sigbôdñ£t
(
s
,
b
,
n
Ë
	`sigdñ£t
((s),“))

	)

163 
	#sigbôismembî
(
s
,
b
,
n
Ë
	`sigismembî
((s),“))

	)

167 
	gk_sigöfo
;

168 
	guthªad_s
;

169 
	gsigqueue
;

170 
	gsigvec_s
;

172 
sigq‰ì
(
sigqueue
 **);

173 
sigaddq
(
sigqueue
 **, sigqueuê*, 
sigvec_s
 *);

174 
sigdñq
(
sigqueue
 **, , 
sigvec_s
 *);

175 
sig£tcur
(
uthªad_s
 *, , 
k_sigöfo
 *, );

176 
sigi•íd
(
¥oc
 *, );

177 
sigi§ódy
();

179 
waôsys
(
idty≥
, 
id_t
, 
k_sigöfo
 *, , 
rußge
 *,

180 
rvÆ
 *);

181 
wrôe_uãxt
(*, 
u_öt
);

183 
úix5_ª°‹ec⁄ãxt
(
úix5_uc⁄ãxt
 *);

184 
úix5_64_ª°‹ec⁄ãxt
(
úix5_64_uc⁄ãxt
 *);

185 
úix5_n32_ª°‹ec⁄ãxt
(
úix5_n32_uc⁄ãxt
 *);

186 
úix5_ßvec⁄ãxt
(
úix5_uc⁄ãxt
 *, 
k_sig£t_t
 *);

187 
úix5_n32_ßvec⁄ãxt
(
úix5_n32_uc⁄ãxt
 *, 
k_sig£t_t
 *);

188 
úix5_sigöfoktou
(
k_sigöfo
 *, 
úix5_sigöfo
 *);

189 
úix5_64_sigöfoktou
(
k_sigöfo
 *, 
úix5_64_sigöfo
 *);

190 
úix5_64_ßvec⁄ãxt
(
úix5_64_uc⁄ãxt
 *, 
k_sig£t_t
 *);

192 
sigdñëe
(
uthªad_s
 *, *);

194 #ifde‡
CKPT


195 #i‡
_MIPS_SIM
 =
_ABI64


196 
úix5_64_sigöfoutok
(
úix5_64_sigöfo
 *, 
k_sigöfo
 *);

198 
úix5_sigöfoutok
(
úix5_sigöfo
 *, 
k_sigöfo
 *);

208 
	súix5_sigc⁄ãxt
 {

209 
__uöt32_t
 
	msc_ªgmask
;

210 
__uöt32_t
 
	msc_°©us
;

211 
__uöt64_t
 
	msc_pc
;

215 
__uöt64_t
 
	msc_ªgs
[32];

219 
__uöt64_t
 
	msc_Âªgs
[32];

220 
__uöt32_t
 
	msc_ow√dÂ
;

221 
__uöt32_t
 
	msc_Âc_c§
;

222 
__uöt32_t
 
	msc_Âc_eú
;

224 
__uöt32_t
 
	msc_ssÊags
;

225 
__uöt64_t
 
	msc_mdhi
;

226 
__uöt64_t
 
	msc_mdlo
;

230 
__uöt64_t
 
	msc_ˇu£
;

231 
__uöt64_t
 
	msc_badvaddr
;

232 
__uöt64_t
 
	msc_åiggîßve
;

234 
sig£t_t
 
	msc_sig£t
;

235 
__uöt64_t
 
	msc_Â_rounded_ªsu…
;

243 
__uöt64_t
 
	msc_lök
;

244 
__uöt64_t
 
	msc_∑d
[30];

245 } 
	túix5_sigc⁄ãxt_t
;

255 
	uúix5_sigvÆ
 {

256 
≠p32_öt_t
 
	msivÆ_öt
;

257 
≠p32_±r_t
 
	msivÆ_±r
;

258 } 
	túix5_sigvÆ_t
;

260 
	súix5_sigöfo
 {

261 
≠p32_öt_t
 
	msi_signo
;

262 
≠p32_öt_t
 
	msi_code
;

263 
≠p32_öt_t
 
	msi_î∫o
;

266 
≠p32_öt_t
 
	msi_∑d
[
SI_PAD
];

269 
úix5_pid_t
 
	m__pid
;

272 
úix5_uid_t
 
	m__uid
;

273 } 
	m__kûl
;

275 
úix5_˛ock_t
 
	m__utime
;

276 
≠p32_öt_t
 
	m__°©us
;

277 
úix5_˛ock_t
 
	m__°ime
;

278 
≠p32_öt_t
 
	m__sw≠
;

279 } 
	m__˛d
;

280 } 
	m__pd©a
;

281 } 
	m__¥oc
;

284 
≠p32_±r_t
 
	m__addr
;

285 } 
	m__Áu…
;

289 
≠p32_öt_t
 
	m__fd
;

290 
≠p32_l⁄g_t
 
	m__b™d
;

291 } 
	m__fûe
;

293 
úix5_sigvÆ
 
	m__vÆue
;

295 } 
	m__d©a
;

297 } 
	túix5_sigöfo_t
;

302 
	uúix5_64_sigvÆ
 {

303 
≠p64_öt_t
 
	msivÆ_öt
;

304 
≠p64_±r_t
 
	msivÆ_±r
;

305 } 
	túix5_64_sigvÆ_t
;

307 
	súix5_64_sigöfo
 {

308 
≠p64_öt_t
 
	msi_signo
;

309 
≠p64_öt_t
 
	msi_code
;

310 
≠p64_öt_t
 
	msi_î∫o
;

313 
≠p64_öt_t
 
	msi_∑d
[
SI_PAD
];

316 
úix5_64_pid_t
 
	m__pid
;

319 
úix5_64_uid_t
 
	m__uid
;

320 } 
	m__kûl
;

322 
úix5_64_˛ock_t
 
	m__utime
;

323 
≠p64_öt_t
 
	m__°©us
;

324 
úix5_64_˛ock_t
 
	m__°ime
;

325 
≠p64_öt_t
 
	m__sw≠
;

326 } 
	m__˛d
;

327 } 
	m__pd©a
;

328 } 
	m__¥oc
;

331 
≠p64_±r_t
 
	m__addr
;

332 } 
	m__Áu…
;

336 
≠p64_öt_t
 
	m__fd
;

337 
≠p64_l⁄g_t
 
	m__b™d
;

338 } 
	m__fûe
;

340 
úix5_64_sigvÆ
 
	m__vÆue
;

342 } 
	m__d©a
;

344 } 
	túix5_64_sigöfo_t
;

350 
	sk_sigöfo
 {

351 
__öt32_t
 
	msi_signo
;

352 
__öt32_t
 
	msi_code
;

353 
__öt32_t
 
	msi_î∫o
;

356 
pid_t
 
	m__pid
;

359 
uid_t
 
	m__uid
;

360 } 
	m__kûl
;

362 
˛ock_t
 
	m__utime
;

363 
__öt32_t
 
	m__°©us
;

364 
˛ock_t
 
	m__°ime
;

365 
__öt32_t
 
	m__sw≠
;

366 } 
	m__˛d
;

367 } 
	m__pd©a
;

368 } 
	m__¥oc
;

371 *
	m__addr
;

372 } 
	m__Áu…
;

376 
__öt32_t
 
	m__fd
;

377 
__öt64_t
 
	m__b™d
;

378 } 
	m__fûe
;

380 
sigvÆ
 
	m__vÆue
;

382 } 
	m__d©a
;

383 } 
	tk_sigöfo_t
;

389 
	súix5_sig°ack
 {

390 
≠p32_±r_t
 
	mss_•
;

391 
≠p32_öt_t
 
	mss_⁄°ack
;

392 } 
	túix5_sig°ack_t
;

398 
	súix5_sigÆt°ack
 {

399 
≠p32_±r_t
 
	mss_•
;

400 
≠p32_öt_t
 
	mss_size
;

401 
≠p32_öt_t
 
	mss_Êags
;

402 } 
	túix5_°ack_t
;

407 
	súix5_64_sigÆt°ack
 {

408 
≠p64_±r_t
 
	mss_•
;

409 
≠p64_öt_t
 
	mss_size
;

410 
≠p64_öt_t
 
	mss_Êags
;

411 } 
	túix5_64_°ack_t
;

413 
	ssigqueue
 {

414 
sigqueue
 *
	msq_√xt
;

415 
k_sigöfo
 
	msq_öfo
;

416 } 
	tsigqueue_t
;

418 
	ssig≥nd
 {

419 
k_sig£t_t
 
	ms_sig
;

420 
sigqueue
 *
	ms_sigqueue
;

421 } 
	tsig≥nd_t
;

425 
	#SIGNO_MASK
 0xff

	)

426 
	#SIGDEFER
 0x100

	)

427 
	#SIGHOLD
 0x200

	)

428 
	#SIGRELSE
 0x400

	)

429 
	#SIGIGNORE
 0x800

	)

430 
	#SIGPAUSE
 0x1000

	)

	@/usr/include/sys/kthread.h

13 #i‚def 
_KTHREAD_H


14 
	#_KTHREAD_H


	)

16 
	~<sys/ty≥s.h
>

17 
	~<sys/pcb.h
>

18 
	~<sys/ªg.h
>

19 
	~<sys/pda.h
>

20 
	~<sys/q.h
>

21 
	~<sys/timîs.h
>

23 #ifde‡
DEBUG


24 
	~<sys/debug.h
>

27 
	#KT_STACK_MALLOC
 0x00000001

	)

28 
	#KT_WMUTEX
 0x00000002

	)

29 
	#KT_LOCK
 0x00000004

	)

30 
	#KT_WACC
 0x00000008

	)

31 
	#KT_STARVE
 0x00000010

	)

32 
	#KT_WSV
 0x00000020

	)

33 
	#KT_WSVQUEUEING
 0x00000040

	)

34 
	#KT_INDIRECTQ
 0x00000080

	)

35 
	#KT_WSEMA
 0x00000100

	)

36 
	#KT_WMRLOCK
 0x00000200

	)

37 
	#KT_ISEMA
 0x00000400

	)

38 
	#KT_WUPD
 0x00000800

	)

39 
	#KT_PS
 0x00001000

	)

40 
	#KT_BIND
 0x00002000

	)

41 
	#KT_NPRMPT
 0x00004000

	)

42 
	#KT_BASEPS
 0x00008000

	)

43 
	#KT_NBASEPRMPT
 0x00010000

	)

44 
	#KT_PSMR
 0x00020000

	)

45 
	#KT_HOLD
 0x00040000

	)

46 
	#KT_PSPIN
 0x00080000

	)

47 
	#KT_INTERRUPTED
 0x00100000

	)

48 
	#KT_SLEEP
 0x00200000

	)

49 
	#KT_NWAKE
 0x00400000

	)

50 
	#KT_LTWAIT
 0x00800000

	)

51 
	#KT_RESERVED
 0x01000000

	)

52 
	#KT_SERVER
 0x02000000

	)

53 
	#KT_NOAFF
 0x04000000

	)

54 
	#KT_MUTEX_INHERIT
 0x08000000

	)

55 
	#KT_CB_INTERRUPT
 0X10000000

	)

56 
	#KT_SNAPSHOT
 0x20000000

	)

57 
	#KT_FAILSOFT_TRAP
 0x40000000

	)

59 
	#KT_SYNCFLAGS
 \

60 (
KT_WSEMA
|
KT_WSVQUEUEING
|
KT_WSV
|
KT_WMUTEX
|
KT_INDIRECTQ
|
KT_WMRLOCK
)

	)

63 
	#KTHREAD_DEF_STACKSZ
 (1024*(*))

	)

64 
	#ARGSAVEFRM
 (((18*(
k_machªg_t
))+15Ë& ~0xf)

	)

69 
	#KT_XTHREAD
 1

	)

70 
	#KT_STHREAD
 2

	)

71 
	#KT_UTHREAD
 3

	)

86 
kthªad
 
	tkthªad_t
;

88 
	skt_›s_s
 {

89 
	m¸ed
 * (*
	mkt_gë_¸ed
)(
	mkthªad_t
 *);

90 (*
	mkt_£t_¸ed
)(
	mkthªad_t
 *, 
	m¸ed
 *);

91 * (*
	mkt_gë_«me
)(
	mkthªad_t
 *);

92 (*
	mkt_upd©e_öblock
)(
	mkthªad_t
 *, );

93 (*
	mkt_upd©e_oublock
)(
	mkthªad_t
 *, );

94 (*
	mkt_upd©e_msg¢d
)(
	mkthªad_t
 *, );

95 (*
	mkt_upd©e_msgrcv
)(
	mkthªad_t
 *, );

96 } 
	tkt_›s_t
;

98 
	gmæock_s
;

105 
	#MRI_MAXLINKS
 8

	)

107 
	smri_s
 {

108 
mri_s
 *
	mmri_Êök
;

109 
mri_s
 *
	mmri_blök
;

110 
mæock_s
 *
	mmri_mæock
;

111 
uch¨_t
 
	mmri_ödex
;

112 
uch¨_t
 
	mmri_cou¡
;

113 
	mmri_¥i
;

114 } 
	tmri_t
;

116 
	smrü_s
 {

117 
kthªad
 *
	mmrü_kt
;

118 
mri_t
 
	mmrü_mrû
[
MRI_MAXLINKS
];

119 
mrü_s
 *
	mmrü_√xt
;

120 #ifde‡
DEBUG


121 
	mmrü_cou¡
;

123 } 
	tmrü_t
;

125 
	#MRI_TO_MRIA_KT_P
(
mrù
) \

126 (
kthªad_t
 **)(((*)(
mrù
)) \

127 - ((
mrù
)->
mri_ödex
 * (
mri_t
))\

128 - (
kthªad_t
 *))

	)

130 
	#KTOP_GET_CURRENT_CRED
() \

131 (*
cuπhªadp
->
k_›s
->
kt_gë_¸ed
)(cuπhªadp)

	)

132 
	#KTOP_GET_CRED
(
kt
) \

133 (*(
kt
)->
k_›s
->
kt_gë_¸ed
)(kt)

	)

134 
	#KTOP_SET_CURRENT_CRED
(
¸
) \

135 (*
cuπhªadp
->
k_›s
->
kt_£t_¸ed
)(cuπhªadp, 
¸
)

	)

136 
	#KTOP_SET_CRED
(
kt
,
¸
) \

137 (*(
kt
)->
k_›s
->
kt_£t_¸ed
)(kt, 
¸
)

	)

138 
	#KTOP_GET_NAME
(
kt
) \

139 (*(
kt
)->
k_›s
->
kt_gë_«me
)(kt)

	)

140 
	#KTOP_UPDATE_CURRENT_INBLOCK
(
v
) \

141 (*
cuπhªadp
->
k_›s
->
kt_upd©e_öblock
)(cuπhªadp, 
v
)

	)

142 
	#KTOP_UPDATE_CURRENT_OUBLOCK
(
v
) \

143 (*
cuπhªadp
->
k_›s
->
kt_upd©e_oublock
)(cuπhªadp, 
v
)

	)

144 
	#KTOP_UPDATE_CURRENT_MSGSND
(
v
) \

145 (*
cuπhªadp
->
k_›s
->
kt_upd©e_msg¢d
)(cuπhªadp, 
v
)

	)

146 
	#KTOP_UPDATE_CURRENT_MSGRCV
(
v
) \

147 (*
cuπhªadp
->
k_›s
->
kt_upd©e_msgrcv
)(cuπhªadp, 
v
)

	)

153 
	g°hªad_s
;

154 
	gbvöfo_s
;

155 
	g˝u_s
;

156 
	gjob_s
;

158 
	skthªad
 {

159 
k_machªg_t
 
	mk_ªgs
[
NPCBREGS
];

160 
uöt64_t
 
	mk_id
;

161 
unch¨
 
	mk_ty≥
;

163 
	mk_¥ä
;

164 
	mk_sq£lf
;

165 
unch¨
 
	mk_runc⁄d
;

167 
˝uid_t
 
	mk_⁄rq
;

168 
˝uid_t
 
	mk_s⁄¥oc
;

169 
˝uid_t
 
	mk_bödög
;

170 
˝uid_t
 
	mk_mu°run
;

171 
˝uid_t
 
	mk_œ°run
;

172 
uöt_t
 
	mk_¥ìm±
;

173 
uöt_t
 
	mk_Êags
;

174 
kthªad
 *
	mk_Êök
;

175 
kthªad
 *
	mk_blök
;

176 
kthªad
 *
	mk_rÊök
;

177 
kthªad
 *
	mk_rblök
;

178 
ˇddr_t
 
	mk_wch™
;

179 
ˇddr_t
 
	mk_w2ch™
;

180 
sv_t
 
	mk_timewaô
;

181 
m⁄ô‹
 *
	mk_m⁄ô‹
;

182 
m⁄_t
 **
	mk_a˘ivem⁄µ
;

183 *
	mk_öhîô
;

184 
kthªad_t
 *
	mk_ödúe˘waô
;

185 
ˇddr_t
 
	mk_°ack
;

186 
ˇddr_t
 
	mk_°kt›
;

187 
uöt_t
 
	mk_°acksize
;

188 
	mk_˝u£t
;

189 
	mk_noÁu…
;

193 
	mk_¥i
;

194 
	mk_ba£¥i
;

195 
mrü_t
 
	mk_mrü
;

196 
	mk_mrq¥i
;

197 
kthªad
 *
	mk_lök
;

198 
kt_›s_t
 *
	mk_›s
;

199 
e‰ame_t
 *
	mk_e‰ame
;

200 #i‡
deföed
(
CELL_CAPABLE
Ë|| deföed(
CELL_PREPARE
)

201 
__öt64_t
 
	mk_˝ªp•a˚
[6];

209 
mld
 *
	mk_mldlök
;

210 
˙odeid_t
 
	mk_af‚ode
;

211 #ifde‡
NUMA_BASE


212 
˙odeid_t
 
	mk_z⁄íode
;

214 
˙odemask_t
 
	mk_maffbv
;

215 
˙odemask_t
 
	mk_nodemask
;

216 
ktimîpkg_t
 
	mk_timîs
;

217 
	mk_qkey
;

218 
	mk_c›ri
;

220 #¥agm®
£t
 
fõld
 
©åibuã
 
kthªad
 
k_¥i
 
Æign
=128

226 (
	tkt_func_t
)(*);

229 
	#cuπhªadp
 (
¥iv©e
.
p_curkthªad
)

	)

244 
	#kidt›id
(
kid
Ë((
pid_t
)(-(
öt16_t
)(kid)))

	)

245 
	#pidtokid
(
pid
Ë(0x100000000LL + (
uöt64_t
)(-(
öt16_t
)’id)))

	)

246 
	#iskpid
(
pid
Ë((
öt16_t
)’idË< 0)

	)

250 
	#kt_lock
(
k
Ë(
	`muãx_bôlock
(&(k)->
k_Êags
, 
KT_LOCK
))

	)

251 
	#kt_u∆ock
(
k
,
rv
Ë(
	`muãx_bôu∆ock
(&(k)->
k_Êags
, 
KT_LOCK
,Ñv))

	)

252 
	#kt_i¶ocked
(
k
Ë(
	`bôlock_i¶ocked
(&(k)->
k_Êags
, 
KT_LOCK
))

	)

253 
	#kt_√°ed_åylock
(
k
Ë(
	`√°ed_bôåylock
(&(k)->
k_Êags
, 
KT_LOCK
))

	)

255 
	#kt_f£t
(
k
,
b
Ë
	`bôlock_£t
(&(k)->
k_Êags
, 
KT_LOCK
, b)

	)

256 
	#kt_f˛r
(
k
,
b
Ë
	`bôlock_˛r
(&(k)->
k_Êags
, 
KT_LOCK
, b)

	)

258 
	#kt_timedwaô
(
kt
,
f
,
rv
,
svtimî_Êags
,
ts
,
πs
) \

259 
	`sv_bôlock_timedwaô
(&(
kt
)->
k_timewaô
, 
f
, &kt->
k_Êags
, 
KT_LOCK
, \

260 
rv
, 
svtimî_Êags
, 
ts
, 
πs
)

	)

262 #ifde‡
MP


263 
	#kt_√°ed_lock
(
k
Ë(
	`√°ed_bôlock
(&(k)->
k_Êags
, 
KT_LOCK
))

	)

264 
	#kt_√°ed_u∆ock
(
k
Ë(
	`√°ed_bôu∆ock
(&(k)->
k_Êags
, 
KT_LOCK
))

	)

266 
	#kt_√°ed_lock
(
k
)

	)

267 
	#kt_√°ed_u∆ock
(
k
)

	)

274 
	#KT_CUR_ISUTHREAD
(Ë(
cuπhªadp
->
k_ty≥
 =
KT_UTHREAD
)

	)

275 
	#KT_CUR_ISSTHREAD
(Ë(
cuπhªadp
->
k_ty≥
 =
KT_STHREAD
)

	)

276 
	#KT_CUR_ISXTHREAD
(Ë(
cuπhªadp
->
k_ty≥
 =
KT_XTHREAD
)

	)

277 
	#KT_ISUTHREAD
(
k
Ë((k)->
k_ty≥
 =
KT_UTHREAD
)

	)

278 
	#KT_ISSTHREAD
(
k
Ë((k)->
k_ty≥
 =
KT_STHREAD
)

	)

279 
	#KT_ISXTHREAD
(
k
Ë((k)->
k_ty≥
 =
KT_XTHREAD
)

	)

281 
	#KT_ISMR
(
kt
Ë((kt)->
k_mu°run
 !
PDA_RUNANYWHERE
)

	)

282 
	#KT_ISBOUND
(
kt
Ë((kt)->
k_bödög
 !
CPU_NONE
)

	)

283 
	#KT_PSKERN
 (
KT_PSMR
|
KT_PSPIN
)

	)

285 
	#KT_ISBASERT
(
kt
Ë((kt)->
k_ba£¥i
 >0)

	)

286 
	#KT_ISRT
(
kt
Ë((kt)->
k_¥i
 >0)

	)

287 
	#KT_ISBASEPS
(
kt
Ë((kt)->
k_Êags
 & 
KT_BASEPS
)

	)

288 
	#KT_ISPS
(
kt
Ë((kt)->
k_Êags
 & 
KT_PS
)

	)

289 
	#KT_ISNPRMPT
(
kt
Ë((kt)->
k_Êags
 & 
KT_NPRMPT
)

	)

290 
	#KT_ISNBASEPRMPT
(
kt
Ë((kt)->
k_Êags
 & 
KT_NBASEPRMPT
)

	)

291 
	#KT_ISKB
(
kt
Ë((kt)->
k_Êags
 & 
KT_PSKERN
)

	)

292 
	#KT_ISAFF
(
kt
Ë(!((kt)->
k_Êags
 & 
KT_NOAFF
))

	)

293 
	#KT_ISHELD
(
kt
Ë((kt)->
k_Êags
 & 
KT_HOLD
)

	)

294 
	#KT_ISLOCAL
(
kt
Ë(
	`KT_ISMR
(ktË|| 
	`KT_ISKB
(kt) || \

295 (
	`KT_ISBOUND
(
kt
) && \

296 (
	`is_b¸ôiˇl
(
kt
) || \

297 (
	`KT_ISUTHREAD
(
kt
Ë&& 
	`KT_ISGANG
(kt)))))

	)

300 
	#kt_¥i
(
kt
Ë((kt)->
k_¥i
)

	)

301 
	#kt_ba£¥i
(
kt
Ë((kt)->
k_ba£¥i
)

	)

302 
	#kt_öôülize_¥i
(
kt
,
p
Ë((kt)->
k_¥i
 = (kt)->
k_ba£¥i
 = (p))

	)

303 
	#is_weighéess
(
kt
Ë((kt)->
k_ba£¥i
 <
PWEIGHTLESS
)

	)

304 
	#is_b©ch
(
kt
Ë((kt)->
k_ba£¥i
 =
PBATCH
)

	)

305 
	#is_b¸ôiˇl
(
kt
Ë((kt)->
k_ba£¥i
 =
PBATCH_CRITICAL
)

	)

307 
	#INVERT_PRI
(
p
Ë(128 - (p))

	)

309 
	#thªad_öãºu±ed
(
kt
) \

310 ((
kt
)->
k_Êags
 & (
KT_INTERRUPTED
|
KT_CB_INTERRUPT
))

	)

311 
	#thªad_öãºu±ibÀ
(
kt
Ë(((kt)->
k_Êags
&(
KT_SLEEP
|
KT_NWAKE
))==KT_SLEEP)

	)

313 #ifde‡
_KERNEL


314 
__ölöe
 

315 
	$thªad_öãºu±_˛ór
(

316 
kthªad
 *
kt
,

317 
locked
)

319 i‡(
locked
)

320 
kt
->
k_Êags
 &~
KT_INTERRUPTED
;

322 
	`kt_f˛r
((
kt
), 
KT_INTERRUPTED
);

323 
	}
}

325 
__ölöe
 

326 
	$thªad_öãºu±_£lf
(

327 
kthªad
 *
kt
)

329 #ifde‡
DEBUG


330 
	`ASSERT
(
kt
 =
cuπhªadp
);

332 
kt
->
k_Êags
 |
KT_INTERRUPTED
;

333 
	}
}

337 
thªad_öãºu±
(
kthªad
 *, *, );

338 
kthªad_öô
(
kthªad_t
 *, 
ˇddr_t
, 
uöt_t
, , 
¥i_t
,

339 
uöt_t
, 
kt_›s_t
 *);

340 
kthªad_de°roy
(
kthªad_t
 *);

341 
uöt64_t
 
kthªad_gëid
();

342 
kt_gëcfg
(
kthªad_t
 *, , );

344 
£åun
(
kthªad_t
 *);

346 
˙odemask_t
 
gë_ef„˘ive_nodemask
(
kthªad_t
 *);

348 
xthªad_èbÀ_öô
(*, );

	@/usr/include/sys/mace.h

1 #i‚de‡
_SYS_MACE_H__


2 
	#_SYS_MACE_H__


	)

11 
	#MACE_BASE
 ( 0x1F000000)

	)

12 
	#MACE_PCI
 (
MACE_BASE
 + 0x00080000)

	)

13 
	#MACE_VIN1
 (
MACE_BASE
 + 0x00100000)

	)

14 
	#MACE_VIN2
 (
MACE_BASE
 + 0x00180000)

	)

15 
	#MACE_VOUT
 (
MACE_BASE
 + 0x00200000)

	)

16 
	#MACE_ENET
 (
MACE_BASE
 + 0x00280000)

	)

17 
	#MACE_PERIF
 (
MACE_BASE
 + 0x00300000)

	)

18 
	#MACE_ISA_EXT
 (
MACE_BASE
 + 0x00380000)

	)

20 
	#MACE_AUDIO
 (
MACE_PERIF
 + 0x00000)

	)

21 
	#MACE_ISA
 (
MACE_PERIF
 + 0x10000)

	)

22 
	#MACE_KBDMS
 (
MACE_PERIF
 + 0x20000)

	)

23 
	#MACE_I2C
 (
MACE_PERIF
 + 0x30000)

	)

24 
	#MACE_UST_MSC
 (
MACE_PERIF
 + 0X40000)

	)

30 
	#PCI_ERROR_ADDR
 (
MACE_PCI
+0x0)

	)

31 
	#PCI_ERROR_FLAGS
 (
MACE_PCI
+0x4)

	)

32 
	#PCI_CONTROL
 (
MACE_PCI
+0x8)

	)

33 
	#PCI_REV_INFO_R
 (
MACE_PCI
+0xC)

	)

34 
	#PCI_FLUSH_W
 (
MACE_PCI
+0xC)

	)

35 
	#PCI_CONFIG_ADDR
 (
MACE_PCI
+0xCF8)

	)

36 
	#PCI_CONFIG_DATA
 (
MACE_PCI
+0xCFC)

	)

37 
	#PCI_LOW_MEMORY
 0x1A000000

	)

38 
	#PCI_LOW_IO
 0x18000000

	)

39 
	#PCI_NATIVE_VIEW
 0x40000000

	)

40 
	#PCI_IO
 0x80000000

	)

41 
	#PCI_HI_MEMORY
 0x280000000

	)

42 
	#PCI_HI_IO
 0x100000000

	)

47 
	#PERR_MASTER_ABORT
 0x80000000

	)

48 
	#PERR_TARGET_ABORT
 0x40000000

	)

49 
	#PERR_DATA_PARITY_ERR
 0x20000000

	)

50 
	#PERR_RETRY_ERR
 0x10000000

	)

51 
	#PERR_ILLEGAL_CMD
 0x08000000

	)

52 
	#PERR_SYSTEM_ERR
 0x04000000

	)

53 
	#PERR_INTERRUPT_TEST
 0x02000000

	)

54 
	#PERR_PARITY_ERR
 0x01000000

	)

55 
	#PERR_OVERRUN
 0x00800000

	)

56 
	#PERR_RSVD
 0x00400000

	)

57 
	#PERR_MEMORY_ADDR
 0x00200000

	)

58 
	#PERR_CONFIG_ADDR
 0x00100000

	)

59 
	#PERR_MASTER_ABORT_ADDR_VALID
 0x00080000

	)

60 
	#PERR_TARGET_ABORT_ADDR_VALID
 0x00040000

	)

61 
	#PERR_DATA_PARITY_ADDR_VALID
 0x00020000

	)

62 
	#PERR_RETRY_ADDR_VALID
 0x00010000

	)

68 
	#ISA_EPP_BASE
 (
MACE_ISA_EXT
+0x00000)

	)

69 
	#ISA_ECP_BASE
 (
MACE_ISA_EXT
+0x08000)

	)

70 
	#ISA_SER1_BASE
 (
MACE_ISA_EXT
+0x10000)

	)

71 
	#ISA_SER2_BASE
 (
MACE_ISA_EXT
+0x18000)

	)

72 
	#ISA_RTC_BASE
 (
MACE_ISA_EXT
+0x20000)

	)

73 
	#ISA_GAME_BASE
 (
MACE_ISA_EXT_0x30000
)

	)

82 
	#ISA_RINGBASE
 (
MACE_ISA
+0x0000)

	)

86 
	#ISA_FLASH_NIC_REG
 (
MACE_ISA
+0x0008)

	)

87 
	#ISA_FLASH_WE
 (0x01Ë

	)

88 
	#ISA_PWD_CLEAR
 (0x02Ë

	)

89 
	#ISA_NIC_DEASSERT
 (0x04)

	)

90 
	#ISA_NIC_DATA
 (0x08)

	)

91 
	#ISA_LED_RED
 (0x10Ë

	)

92 
	#ISA_LED_GREEN
 (0x20Ë

	)

93 
	#ISA_DP_RAM_ENABLE
 (0x40)

	)

97 
	#ISA_INT_STS_REG
 (
MACE_ISA
+0x0010)

	)

98 
	#ISA_INT_MSK_REG
 (
MACE_ISA
+0x0018)

	)

101 
	#ISA_INT_RTC_IRQ
 (0x00000100)

	)

109 
	#MACE_UST
 (
MACE_UST_MSC
 + 0x00Ë

	)

110 
	#MACE_COMPARE1
 (
MACE_UST_MSC
 + 0x08Ë

	)

111 
	#MACE_COMPARE2
 (
MACE_UST_MSC
 + 0x10Ë

	)

112 
	#MACE_COMPARE3
 (
MACE_UST_MSC
 + 0x18Ë

	)

113 
	#MACE_UST_PERIOD
 960

	)

115 
	#MACE_AIN_MSC_UST
 (
MACE_UST_MSC
 + 0x20Ë

	)

116 
	#MACE_AOUT1_MSC_UST
 (
MACE_UST_MSC
 + 0x28Ë

	)

117 
	#MACE_AOUT2_MSC_UST
 (
MACE_UST_MSC
 + 0x30Ë

	)

118 
	#MACE_VIN1_MSC_UST
 (
MACE_UST_MSC
 + 0x38Ë

	)

119 
	#MACE_VIN2_MSC_UST
 (
MACE_UST_MSC
 + 0x40Ë

	)

120 
	#MACE_VOUT_MSC_UST
 (
MACE_UST_MSC
 + 0x48Ë

	)

132 
	#MACE_VID_IN_1
 0

	)

133 
	#MACE_VID_IN_2
 1

	)

134 
	#MACE_VID_OUT
 2

	)

135 
	#MACE_ETHERNET
 3

	)

136 
	#MACE_PERIPH_SERIAL
 4

	)

137 
	#MACE_PERIPH_PARALLEL
 4

	)

138 
	#MACE_PERIPH_MISC
 5

	)

139 
	#MACE_PERIPH_AUDIO
 6

	)

140 
	#MACE_PCI_BRIDGE
 7

	)

141 
	#MACE_PCI_SCSI0
 8

	)

142 
	#MACE_PCI_SCSI1
 9

	)

143 
	#MACE_PCI_SLOT0
 10

	)

144 
	#MACE_PCI_SLOT1
 11

	)

145 
	#MACE_PCI_SLOT2
 12

	)

146 
	#MACE_PCI_SHARED0
 13

	)

147 
	#MACE_PCI_SHARED1
 14

	)

148 
	#MACE_PCI_SHARED2
 15

	)

	@/usr/include/sys/mc.h

19 #i‚de‡
__SYS_MC_H__


20 
	#__SYS_MC_H__


	)

22 
	#MCCHIP
 1

	)

24 #ifdef 
_MIPSEB


26 
	#CPUCTRL0
 0x1Á00004

	)

27 
	#CPUCTRL1
 0x1Á0000¯

	)

28 
	#DOGC
 0x1Á00014

	)

29 
	#DOGR
 
DOGC


	)

30 
	#SYSID
 0x1Á0001¯

	)

31 
	#RPSS_DIVIDER
 0x1Á0002¯

	)

32 
	#EEROM
 0x1Á00034

	)

33 
	#CTRLD
 0x1Á00044

	)

35 
	#REF_CTR
 0x1Á0004¯

	)

36 
	#GIO64_ARB
 0x1Á00084

	)

38 
	#CPU_TIME
 0x1Á0008¯

	)

39 
	#LB_TIME
 0x1Á0009¯

	)

41 
	#MEMCFG0
 0x1Á000c4

	)

43 
	#MEMCFG1
 0x1Á000c¯

	)

45 
	#CPU_MEMACC
 0x1Á000d4

	)

47 
	#GIO_MEMACC
 0x1Á000d¯

	)

49 
	#CPU_ERR_ADDR
 0x1Á000e4

	)

50 
	#CPU_ERR_STAT
 0x1Á000e¯

	)

51 
	#GIO_ERR_ADDR
 0x1Á000f4

	)

52 
	#GIO_ERR_STAT
 0x1Á000f¯

	)

53 
	#SYS_SEMAPHORE
 0x1Á00104

	)

54 
	#LOCK_MEMORY
 0x1Á0010¯

	)

55 
	#EISA_LOCK
 0x1Á00114

	)

56 
	#DMA_GIO_MASK
 0x1Á00154

	)

58 
	#DMA_GIO_SUB
 0x1Á0015¯

	)

60 
	#DMA_CAUSE
 0x1Á00164

	)

61 
	#DMA_CTL
 0x1Á0016¯

	)

62 
	#DMA_TLB_HI_0
 0x1Á00184

	)

63 
	#DMA_TLB_LO_0
 0x1Á0018¯

	)

64 
	#DMA_TLB_HI_1
 0x1Á00194

	)

65 
	#DMA_TLB_LO_1
 0x1Á0019¯

	)

66 
	#DMA_TLB_HI_2
 0x1Á001a4

	)

67 
	#DMA_TLB_LO_2
 0x1Á001a¯

	)

68 
	#DMA_TLB_HI_3
 0x1Á001b4

	)

69 
	#DMA_TLB_LO_3
 0x1Á001b¯

	)

70 
	#RPSS_CTR
 0x1Á01004

	)

71 
	#DMA_MEMADR
 0x1Á02004

	)

72 
	#DMA_MEMADRD
 0x1Á0200¯

	)

74 
	#DMA_SIZE
 0x1Á02014

	)

75 
	#DMA_STRIDE
 0x1Á0201¯

	)

76 
	#DMA_GIO_ADR
 0x1Á02024

	)

78 
	#DMA_GIO_ADRS
 0x1Á0202¯

	)

80 
	#DMA_MODE
 0x1Á02034

	)

81 
	#DMA_COUNT
 0x1Á0203¯

	)

83 
	#DMA_STDMA
 0x1Á02044

	)

84 
	#DMA_RUN
 0x1Á0204¯

	)

85 
	#DMA_MEMADRDS
 0x1Á02074

	)

87 
	#SEMAPHORE_0
 0x1Á10004

	)

88 
	#SEMAPHORE_1
 0x1Á11004

	)

89 
	#SEMAPHORE_2
 0x1Á12004

	)

90 
	#SEMAPHORE_3
 0x1Á13004

	)

91 
	#SEMAPHORE_4
 0x1Á14004

	)

92 
	#SEMAPHORE_5
 0x1Á15004

	)

93 
	#SEMAPHORE_6
 0x1Á16004

	)

94 
	#SEMAPHORE_7
 0x1Á17004

	)

95 
	#SEMAPHORE_8
 0x1Á18004

	)

96 
	#SEMAPHORE_9
 0x1Á19004

	)

97 
	#SEMAPHORE_10
 0x1Á1a004

	)

98 
	#SEMAPHORE_11
 0x1Á1b004

	)

99 
	#SEMAPHORE_12
 0x1Á1c004

	)

100 
	#SEMAPHORE_13
 0x1Á1d004

	)

101 
	#SEMAPHORE_14
 0x1Á1e004

	)

102 
	#SEMAPHORE_15
 0x1Á1f004

	)

106 
	#CPUCTRL0
 0x1Á00000

	)

107 
	#CPUCTRL1
 0x1Á00008

	)

108 
	#DOGC
 0x1Á00010

	)

109 
	#DOGR
 
DOGC


	)

110 
	#SYSID
 0x1Á00018

	)

111 
	#RPSS_DIVIDER
 0x1Á00028

	)

112 
	#EEROM
 0x1Á00030

	)

113 
	#CTRLD
 0x1Á00040

	)

115 
	#REF_CTR
 0x1Á00048

	)

116 
	#GIO64_ARB
 0x1Á00080

	)

118 
	#CPU_TIME
 0x1Á00088

	)

119 
	#LB_TIME
 0x1Á00098

	)

121 
	#MEMCFG0
 0x1Á000c0

	)

123 
	#MEMCFG1
 0x1Á000c8

	)

125 
	#CPU_MEMACC
 0x1Á000d0

	)

127 
	#GIO_MEMACC
 0x1Á000d8

	)

129 
	#CPU_ERR_ADDR
 0x1Á000e0

	)

130 
	#CPU_ERR_STAT
 0x1Á000e8

	)

131 
	#GIO_ERR_ADDR
 0x1Á000f0

	)

132 
	#GIO_ERR_STAT
 0x1Á000f8

	)

133 
	#SYS_SEMAPHORE
 0x1Á00100

	)

134 
	#LOCK_MEMORY
 0x1Á00108

	)

135 
	#EISA_LOCK
 0x1Á00110

	)

136 
	#DMA_GIO_MASK
 0x1Á00150

	)

138 
	#DMA_GIO_SUB
 0x1Á00158

	)

140 
	#DMA_CAUSE
 0x1Á00160

	)

141 
	#DMA_CTL
 0x1Á00168

	)

142 
	#DMA_TLB_HI_0
 0x1Á00180

	)

143 
	#DMA_TLB_LO_0
 0x1Á00188

	)

144 
	#DMA_TLB_HI_1
 0x1Á00190

	)

145 
	#DMA_TLB_LO_1
 0x1Á00198

	)

146 
	#DMA_TLB_HI_2
 0x1Á001a0

	)

147 
	#DMA_TLB_LO_2
 0x1Á001a8

	)

148 
	#DMA_TLB_HI_3
 0x1Á001b0

	)

149 
	#DMA_TLB_LO_3
 0x1Á001b8

	)

150 
	#RPSS_CTR
 0x1Á01000

	)

151 
	#DMA_MEMADR
 0x1Á02000

	)

152 
	#DMA_MEMADRD
 0x1Á02008

	)

154 
	#DMA_SIZE
 0x1Á02010

	)

155 
	#DMA_STRIDE
 0x1Á02018

	)

156 
	#DMA_GIO_ADR
 0x1Á02020

	)

158 
	#DMA_GIO_ADRS
 0x1Á02028

	)

160 
	#DMA_MODE
 0x1Á02030

	)

161 
	#DMA_COUNT
 0x1Á02038

	)

163 
	#DMA_STDMA
 0x1Á02040

	)

164 
	#DMA_RUN
 0x1Á02048

	)

165 
	#DMA_MEMADRDS
 0x1Á02070

	)

167 
	#SEMAPHORE_0
 0x1Á10000

	)

168 
	#SEMAPHORE_1
 0x1Á11000

	)

169 
	#SEMAPHORE_2
 0x1Á12000

	)

170 
	#SEMAPHORE_3
 0x1Á13000

	)

171 
	#SEMAPHORE_4
 0x1Á14000

	)

172 
	#SEMAPHORE_5
 0x1Á15000

	)

173 
	#SEMAPHORE_6
 0x1Á16000

	)

174 
	#SEMAPHORE_7
 0x1Á17000

	)

175 
	#SEMAPHORE_8
 0x1Á18000

	)

176 
	#SEMAPHORE_9
 0x1Á19000

	)

177 
	#SEMAPHORE_10
 0x1Á1a000

	)

178 
	#SEMAPHORE_11
 0x1Á1b000

	)

179 
	#SEMAPHORE_12
 0x1Á1c000

	)

180 
	#SEMAPHORE_13
 0x1Á1d000

	)

181 
	#SEMAPHORE_14
 0x1Á1e000

	)

182 
	#SEMAPHORE_15
 0x1Á1f000

	)

187 
	#CPUCTRL0_REFS_MASK
 0x0000000‡

	)

188 
	#CPUCTRL0_RFE
 0x00000010

	)

189 
	#CPUCTRL0_GPR
 0x00000020

	)

191 
	#CPUCTRL0_MPR
 0x00000040

	)

193 
	#CPUCTRL0_CPR
 0x00000080

	)

195 
	#CPUCTRL0_DOG
 0x00000100

	)

196 
	#CPUCTRL0_SIN
 0x00000200

	)

197 
	#CPUCTRL0_GRR
 0x00000400

	)

198 
	#CPUCTRL0_EN_LOCK
 0x00000800

	)

200 
	#CPUCTRL0_CMD_PAR
 0x00001000

	)

202 
	#CPUCTRL0_INT_EN
 0x00002000

	)

204 
	#CPUCTRL0_SNOOP_EN
 0x00004000

	)

206 
	#CPUCTRL0_PROM_WR_EN
 0x00008000

	)

208 
	#CPUCTRL0_WR_ST
 0x00010000

	)

210 
	#CPUCTRL0_LITTLE
 0x00040000

	)

212 
	#CPUCTRL0_WRST
 0x00080000

	)

213 
	#CPUCTRL0_BAD_PAR
 0x02000000

	)

215 
	#CPUCTRL0_R4K_CHK_PAR_N
 0x04000000

	)

217 
	#CPUCTRL0_BACK2
 0x08000000

	)

221 
	#CPU_CONFIG
 
CPUCTRL0


	)

222 
	#CONFIG_GRRESET
 
CPUCTRL0_GRR


	)

225 
	#CPUCTRL1_ABORT_EN
 0x00000010

	)

226 
	#CPUCTRL1_HPC_FX
 0x00001000

	)

227 
	#CPUCTRL1_HPC_LITTLE
 0x00002000

	)

228 
	#CPUCTRL1_EXP0_FX
 0x00004000

	)

229 
	#CPUCTRL1_EXP0_LITTLE
 0x00008000

	)

230 
	#CPUCTRL1_EXP1_FX
 0x00010000

	)

231 
	#CPUCTRL1_EXP1_LITTLE
 0x00020000

	)

234 
	#SYSID_CHIP_REV_MASK
 0x0000000‡

	)

235 
	#SYSID_EISA_PRESENT
 0x00000010

	)

238 
	#EEROM_CS
 0x00000002

	)

239 
	#EEROM_SCK
 0x00000004

	)

240 
	#EEROM_SO
 0x00000008

	)

241 
	#EEROM_SI
 0x00000010

	)

244 
	#GIO64_ARB_HPC_SIZE_64
 0x00000001

	)

246 
	#GIO64_ARB_GRX_SIZE_64
 0x00000002

	)

248 
	#GIO64_ARB_EXP0_SIZE_64
 0x00000004

	)

250 
	#GIO64_ARB_EXP1_SIZE_64
 0x00000008

	)

252 
	#GIO64_ARB_EISA_SIZE
 0x00000010

	)

254 
	#GIO64_ARB_HPC_EXP_SIZE_64
 0x00000020

	)

256 
	#GIO64_ARB_GRX_RT
 0x00000040

	)

258 
	#GIO64_ARB_EXP0_RT
 0x00000080

	)

260 
	#GIO64_ARB_EXP1_RT
 0x00000100

	)

262 
	#GIO64_ARB_EISA_MST
 0x00000200

	)

264 
	#GIO64_ARB_1_GIO
 0x00000400

	)

266 
	#GIO64_ARB_GRX_MST
 0x00000800

	)

268 
	#GIO64_ARB_EXP0_MST
 0x00001000

	)

270 
	#GIO64_ARB_EXP1_MST
 0x00002000

	)

272 
	#GIO64_ARB_EXP0_PIPED
 0x00004000

	)

274 
	#GIO64_ARB_EXP1_PIPED
 0x00008000

	)

278 
	#MEMCFG_4MRAM
 0x0000

	)

279 
	#MEMCFG_8MRAM
 0x0100

	)

280 
	#MEMCFG_16MRAM
 0x0300

	)

281 
	#MEMCFG_32MRAM
 0x0700

	)

282 
	#MEMCFG_64MRAM
 0x0f00

	)

283 
	#MEMCFG_128MRAM
 0x1f00

	)

284 
	#MEMCFG_DRAM_MASK
 0x1f00

	)

286 
	#MEMCFG_ADDR_MASK
 0x00f‡

	)

287 
	#MEMCFG_VLD
 0x2000

	)

288 
	#MEMCFG_BNK
 0x4000

	)

290 
	#MEMACC_BIGALIAS
 0x20000000

	)

292 
	#ERR_STAT_B0
 0x00000001

	)

293 
	#ERR_STAT_B1
 0x00000002

	)

294 
	#ERR_STAT_B2
 0x00000004

	)

295 
	#ERR_STAT_B3
 0x00000008

	)

296 
	#ERR_STAT_B4
 0x00000010

	)

297 
	#ERR_STAT_B5
 0x00000020

	)

298 
	#ERR_STAT_B6
 0x00000040

	)

299 
	#ERR_STAT_B7
 0x00000080

	)

302 
	#CPU_ERR_STAT_RD
 0x00000100

	)

303 
	#CPU_ERR_STAT_PAR
 0x00000200

	)

304 
	#CPU_ERR_STAT_ADDR
 0x00000400

	)

306 
	#CPU_ERR_STAT_SYSAD_PAR
 0x00000800

	)

307 
	#CPU_ERR_STAT_SYSCMD_PAR
 0x00001000

	)

308 
	#CPU_ERR_STAT_BAD_DATA
 0x00002000

	)

310 
	#CPU_ERR_STAT_PAR_MASK
 0x00001f00

	)

311 
	#CPU_ERR_STAT_RD_PAR
 (
CPU_ERR_STAT_RD
 | 
CPU_ERR_STAT_PAR
)

	)

314 
	#GIO_ERR_STAT_RD
 0x00000100

	)

315 
	#GIO_ERR_STAT_WR
 0x00000200

	)

316 
	#GIO_ERR_STAT_TIME
 0x00000400

	)

317 
	#GIO_ERR_STAT_PROM
 0x00000800

	)

319 
	#GIO_ERR_STAT_ADDR
 0x00001000

	)

321 
	#GIO_ERR_STAT_BC
 0x00002000

	)

323 
	#GIO_ERR_STAT_PIO_RD
 0x00004000

	)

324 
	#GIO_ERR_STAT_PIO_WR
 0x00008000

	)

326 
	#CPU_TIME_DEFAULT
 0x002b

	)

327 
	#LB_TIME_DEFAULT
 0x034‡

	)

329 #ifde‡
R4000


337 
	#ECCF_CACHE_ERR
 0

	)

338 
	#ECCF_TAGLO
 1

	)

339 
	#ECCF_ECC
 2

	)

340 
	#ECCF_ERROREPC
 3

	)

341 
	#ECCF_PADDR
 4

	)

342 
	#ECCF_CES_DATA
 5

	)

343 #i‚de‡
_MEM_PARITY_WAR


344 
	#ECCF_SIZE
 (6 * (
k_machªg_t
))

	)

346 
	#ECCF_STACK_BASE
 6

	)

347 
	#ECCF_BUSY
 7

	)

348 
	#ECCF_ECCINFO
 8

	)

349 
	#ECCF_SECOND_PHASE
 9

	)

350 
	#ECCF_CPU_ERR_STAT
 10

	)

351 
	#ECCF_CPU_ERR_ADDR
 11

	)

352 
	#ECCF_GIO_ERR_STAT
 12

	)

353 
	#ECCF_GIO_ERR_ADDR
 13

	)

354 
	#ECCF_SIZE
 (14 * (
k_machªg_t
))

	)

362 
	#CACHE_ERR_EFRAME
 (0x1000 - 
EF_SIZE
)

	)

363 
	#CACHE_ERR_ECCFRAME
 (
CACHE_ERR_EFRAME
 - 
ECCF_SIZE
)

	)

365 #ifde‡
_MEM_PARITY_WAR


366 
	#ECCF_ADDR
(
x
Ë(
CACHE_ERR_ECCFRAME
 + ((xË* (
k_machªg_t
)))

	)

369 
	#CACHE_ERR_STACK_BASE
 
	`ECCF_ADDR
(
ECCF_STACK_BASE
)

	)

370 
	#CACHE_ERR_STACK_BASE_P
 (*((
__psunsig√d_t
 *Ë
	`PHYS_TO_K1
(
CACHE_ERR_STACK_BASE
)))

	)

372 
	#CACHE_ERR_STACK_SIZE
 (1 * 
NBPP
)

	)

375 
	#CACHE_ERR_ECCINFO
 
	`ECCF_ADDR
(
ECCF_ECCINFO
)

	)

376 
	#CACHE_ERR_ECCINFO_P
 (*((
__psunsig√d_t
 *Ë
	`PHYS_TO_K1
(
CACHE_ERR_ECCINFO
)))

	)

379 
	#CACHE_ERR_CES_DATA
 
	`ECCF_ADDR
(
ECCF_CES_DATA
)

	)

380 
	#CACHE_ERR_CES_DATA_P
 (*((
__psunsig√d_t
 *Ë
	`PHYS_TO_K1
(
CACHE_ERR_CES_DATA
)))

	)

383 
	#CACHE_ERR_SP
 (
CACHE_ERR_ECCFRAME
 - 4 * (
k_machªg_t
))

	)

385 #ñi‡
R10000


387 
	#CACHE_TMP_EMASK
 0x3e00

	)

388 
	#CACHE_TMP_EFRAME1
 0x2000

	)

389 
	#CACHE_TMP_EFRAME2
 0x2200

	)

392 #ifde‡
_MEM_PARITY_WAR


393 #ifde‡
_KERNEL


398 
	#PERC_CACHE_SYSAD
 0

	)

399 
	#PERC_CACHE_LOCAL
 1

	)

402 
	#PERC_IBE_EXCEPTION
 2

	)

403 
	#PERC_DBE_EXCEPTION
 3

	)

404 
	#PERC_BE_INTERRUPT
 4

	)

413 #i‡
R4000


414 
	#TLBLO_HWBITS
 0x03fffff‡

	)

415 
	#TLBLO_PFNTOKDMSHFT
 6

	)

417 
	#TLBLO_HWBITSHIFT
 6

	)

420 
	#LIO_ADDR
 0x1f000000

	)

421 
	#LIO_GFX_SIZE
 0x00400000

	)

422 
	#LIO_GIO_SIZE
 0x00600000

	)

424 
	#PHYS_RAMBASE
 
SEG0_BASE


	)

425 
	#K0_RAMBASE
 
	`PHYS_TO_K0
(
PHYS_RAMBASE
)

	)

426 
	#K1_RAMBASE
 
	`PHYS_TO_K1
(
PHYS_RAMBASE
)

	)

427 
	#PHYS_TO_K0_RAM
(
x
Ë
	`PHYS_TO_K0
((x)+
PHYS_RAMBASE
)

	)

428 
	#PHYS_TO_K1_RAM
(
x
Ë
	`PHYS_TO_K1
((x)+
PHYS_RAMBASE
)

	)

429 
	#SYMMON_STACK
 
	`PHYS_TO_K0_RAM
(0x6000)

	)

430 
	#SYMMON_STACK_ADDR
(
x
Ë
SYMMON_STACK


	)

431 #i‡
_MIPS_SIM
 =
_ABI64


432 
	#SYMMON_STACK_SIZE
 0x2000

	)

434 
	#SYMMON_STACK_SIZE
 0x1000

	)

437 #i‡
IP20
 || 
IP22


438 
	#PROM_STACK
 
	`PHYS_TO_K1_RAM
(0x800000)

	)

439 
	#PROM_BSS
 
	`PHYS_TO_K1_RAM
(0x740000)

	)

442 #i‡
IP26
 || 
IP28


443 
	#PROM_STACK
 
	`PHYS_TO_K1_RAM
(0x1000000)

	)

444 
	#PROM_BSS
 
	`PHYS_TO_K1_RAM
(0x0f00000)

	)

447 
	#PROM_CHILD_STACK
 (
PROM_BSS
-8)

	)

472 #i‡
IP20
 || 
IP22


473 
	#SEG0_BASE
 0x08000000

	)

474 
	#SEG0_SIZE
 (256*1024*1024Ë

	)

475 
	#SEG1_BASE
 0x20000000

	)

476 
	#SEG1_SIZE
 (128*1024*1024Ë

	)

477 #ñi‡
IP26


478 
	#SEG0_BASE
 0x08000000

	)

479 
	#SEG0_SIZE
 (256*1024*1024Ë

	)

480 
	#SEG1_BASE
 0x20000000

	)

481 
	#SEG1_SIZE
 (512*1024*1024Ë

	)

482 #ñi‡
IP28


483 
	#SEG0_BASE
 0x20000000

	)

484 
	#SEG0_SIZE
 (768*1024*1024Ë

	)

491 #i‡
_MIPS_SIM
 =
_ABI64


492 #i‚de‡
SEG1_BASE


493 
	#KDM_TO_MCPHYS
(
addr
Ë((
__uöt32_t
)((
__psunsig√d_t
)◊ddrË& 0x7fffffff))

	)

495 
	#KDM_TO_MCPHYS
(
addr
Ë((
__uöt32_t
)((
__psunsig√d_t
)◊ddrË& 0x3fffffff))

	)

497 
	#KDM_TO_IOPHYS
(
addr
Ë
	`KDM_TO_MCPHYS
◊ddr)

	)

498 
	#IOPHYS_TO_K0
(
addr
Ë
	`PHYS_TO_K0
◊ddr)

	)

499 
	#IOPHYS_TO_K1
(
addr
Ë
	`PHYS_TO_K1
◊ddr)

	)

502 
	#KDM_TO_MCPHYS
(
addr
Ë((
__uöt32_t
)((
__psunsig√d_t
)◊ddrË& 0x1fffffff))

	)

503 
	#KDM_TO_IOPHYS
(
addr
Ë(
__uöt32_t
)◊ddr)

	)

504 
	#IOPHYS_TO_K0
(
addr
Ë◊ddr)

	)

505 
	#IOPHYS_TO_K1
(
addr
Ë◊ddr)

	)

509 
	#SYMMON_PDASIZE
 512

	)

511 #i‡
R4000
 || 
R10000


512 
	#CAUSE_BERRINTR
 
CAUSE_IP7


	)

513 
	#SR_BERRBIT
 
SR_IBIT7


	)

516 #ifde‡
LANGUAGE_C


526 
	#GDMA_FULLPG
 0x40000000

	)

527 
	#GDMA_LAST
 (
GDMA_FULLPG
>>1Ë

	)

528 
	#PICGDMA_GTOH
 (
GDMA_LAST
>>1Ë

	)

530 
	#GDMA_HTOG
 0x0

	)

531 
	#GDMA_GTOH
 0x2

	)

533 
	sgdmada
 {

534 *
	mbuÁddr
;

535 
	mdma˘l
;

536 
	mgrxaddr
;

537 #ifde‡ 
_MIPSEB


538 
	m°ride
;

539 
	mlöecou¡
;

541 
	mlöecou¡
;

542 
	m°ride
;

544 *
	m√xtdesc
;

545 } 
	tgdmada_t
;

547 #i‚de‡
MCREGWBUG


548 
	#wrôem¸eg
(
ªg
,
vÆ
Ë(*(
uöt
 *)(
	`PHYS_TO_COMPATK1
‘eg)Ë(vÆ))

	)

557 
wrôem¸eg
(, );

561 
is_syßd_∑rôy_íabÀd
();

562 
dißbÀ_syßd_∑rôy
();

563 
íabÀ_syßd_∑rôy
();

565 #i‡!
deföed
(
_STANDALONE
)

574 
	ge‰ame_s
;

575 
	tl˛_öå_func_t
(
	t__psöt_t
, 
	te‰ame_s
 *);

577 #i‡
deföed
(
__XTHREAD_H__
)

578 
	sl˛vec_s
 {

579 
l˛_öå_func_t
 *
	mi§
;

580 
__psöt_t
 
	m¨g
;

581 
uöt
 
	mbô
;

582 
thd_öt_t
 
	ml˛_töfo
;

583 } 
	tl˛vec_t
;

585 
l˛vec_t
 
l˛0vec_tbl
[];

586 
l˛vec_t
 
l˛1vec_tbl
[];

587 #i‡!
IP20


588 
l˛vec_t
 
l˛2vec_tbl
[];

591 
	#l˛_Êags
 
l˛_töfo
.
thd_Êags


	)

592 
	#l˛_isync
 
l˛_töfo
.
thd_isync


	)

593 
	#l˛_œt
 
l˛_töfo
.
thd_œt°©s


	)

594 
	#l˛_thªad
 
l˛_töfo
.
thd_ôhªad


	)

597 
£é˛ve˘‹
(, 
l˛_öå_func_t
 *, 
__psöt_t
);

598 
£tgiove˘‹
(, , 
l˛_öå_func_t
 *, 
__psöt_t
);

599 
£tgioc⁄fig
(, );

	@/usr/include/sys/mkdev.h

10 #i‚de‡
_SYS_MKDEV_H


11 
	#_SYS_MKDEV_H


	)

13 #ifde‡
__˝lu•lus


19 
	#ONBITSMAJOR
 7

	)

20 
	#ONBITSMINOR
 8

	)

21 
	#OMAXMAJ
 0x7‡

	)

22 
	#OMAXMIN
 0xf‡

	)

25 
	#NBITSMAJOR
 14

	)

26 
	#NBITSMINOR
 18

	)

27 
	#MAXMAJ
 0x1f‡

	)

30 
	#MAXMIN
 0x3fff‡

	)

32 #i‡!
deföed
(
_KERNEL
)

36 #unde‡
makedev


37 #unde‡
maj‹


38 #unde‡
mö‹


41 
dev_t
 
makedev
(c⁄° 
maj‹_t
, c⁄° 
mö‹_t
);

42 
maj‹_t
 
maj‹
(c⁄° 
dev_t
);

43 
mö‹_t
 
mö‹
(c⁄° 
dev_t
);

44 
dev_t
 
__makedev
(c⁄° , c⁄° 
maj‹_t
, c⁄° 
mö‹_t
);

45 
maj‹_t
 
__maj‹
(c⁄° , c⁄° 
dev_t
);

46 
mö‹_t
 
__mö‹
(c⁄° , c⁄° 
dev_t
);

48 
	#OLDDEV
 0

	)

49 
	#NEWDEV
 1

	)

51 
	#MKDEV_VER
 
NEWDEV


	)

54 
	#makedev
(
maj
, 
mö
Ë
	`__makedev
(
MKDEV_VER
, maj, mö)

	)

56 
	#STRING_SPEC_DEV
 
	`__makedev
(
MKDEV_VER
, 0, 0)

	)

57 
	#IS_STRING_SPEC_DEV
(
x
Ë((
dev_t
)(x)==
	`__makedev
(
MKDEV_VER
, 0, 0))

	)

59 
	#maj‹
(
dev
Ë
	`__maj‹
(
MKDEV_VER
, dev)

	)

61 
	#mö‹
(
dev
Ë
	`__mö‹
(
MKDEV_VER
, dev)

	)

65 #ifde‡
__˝lu•lus


	@/usr/include/sys/proc.h

18 #i‚de‡
__SYS_PROC_H__


19 
	#__SYS_PROC_H__


	)

23 
	~<sys/ty≥s.h
>

24 
	~<sys/£ma.h
>

25 
	~<sys/kabi.h
>

26 
	~<sys/exèc˘.h
>

28 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

30 
	gkush¨ía
;

32 #i‡
deföed
(
_KERNEL
)

33 
	~<sys/kthªad.h
>

34 
	~<sys/uthªad.h
>

38 
	#FAST_TICK
 1

	)

39 
	#SLOW_TICK
 0

	)

43 
	#STATELOCK
 0x00000001

	)

44 
	#STRC
 0x00000002

	)

45 
	#SIGNORED
 0x00000004

	)

46 
	#SBBLST
 0x00000008

	)

47 
	#SPARSWTCH
 0x00000010

	)

48 
	#SPROCTR
 0x00000020

	)

49 
	#SJSTOP
 0x00000040

	)

50 
	#SPROPEN
 0x00000080

	)

51 
	#SPARSYS
 0x00000100

	)

52 
	#SPARINH
 0x00000200

	)

53 
	#SPARPRIV
 0x00000400

	)

54 
	#SPGJCL
 0x00000800

	)

55 
	#SWSRCH
 0x00001000

	)

56 
	#SCKPT
 0x00002000

	)

57 
	#SGRACE
 0x00004000

	)

62 
	#SNOCTTY
 0x00010000

	)

63 
	#SFDT
 0x00020000

	)

64 
	#SPROFFAST
 0x00040000

	)

65 
	#SPROF32
 0x00080000

	)

66 
	#SPROF
 0x00100000

	)

67 
	#SCEXIT
 0x00200000

	)

68 
	#SEXECED
 0x00400000

	)

69 
	#SCOREPID
 0x00800000

	)

71 
	#SPARDIS
 0x02000000

	)

72 
	#SWILLEXIT
 0x04000000

	)

74 
	#SPRPROTECT
 0x10000000

	)

75 
	#SABORTSIG
 0x40000000

	)

78 
	#PTRACED
(
p
Ë(’)->
p_Êag
 & (
STRC
|
SPROCTR
|
SPROPEN
))

	)

94 #i‡(
_MIPS_SZPTR
 == 32)

95 
	#ABI_ICODE
 
ABI_IRIX5


	)

97 
	#ABI_ICODE
 
ABI_IRIX5_64


	)

100 
	#_MIN_ABI
 
ABI_IRIX5


	)

101 
	#_MAX_ABI
 
ABI_IRIX5_N32


	)

104 
	#P_FP_SIGINTR1
 1

	)

105 
	#P_FP_SIGINTR2
 2

	)

109 
	#SINVAL
 0

	)

110 
	#SRUN
 1

	)

111 
	#SZOMB
 2

	)

115 
	#REQUESTED
 1

	)

116 
	#SIGNALLED
 2

	)

117 
	#SYSENTRY
 3

	)

118 
	#SYSEXIT
 4

	)

119 
	#FAULTED
 5

	)

120 
	#JOBCONTROL
 6

	)

121 
	#CHECKPOINT
 7

	)

124 
	#FAULTEDWATCH
 1

	)

125 
	#FAULTEDKWATCH
 2

	)

126 
	#FAULTEDPAGEIN
 3

	)

127 
	#FAULTEDSTACK
 4

	)

128 
	#FAULTEDSCWATCH
 5

	)

131 
	#P_FP_IMPRECISE_EXCP
 0x01

	)

132 
	#P_FP_PRESERVE
 0x02

	)

133 
	#P_FP_FR
 0x04

	)

134 
	#P_FP_SMM
 0x08

	)

135 
	#P_FP_SMM_HDR
 0x10

	)

136 
	#P_FP_PRECISE_EXCP_HDR
 0x20

	)

137 
	#P_FP_SPECULATIVE
 0x40

	)

139 #ifde‡
_KERNEL


141 
	#SIG_ALLSIGNALS
 0x0

	)

142 
	#SIG_NOSTOPDEFAULT
 0x1

	)

144 
≈Æloc
;

146 
	grvÆ
;

147 
	grußge
;

148 
	gv¥oc
;

149 
	g¥oc
;

150 
	gk_sigöfo
;

151 
	g¸ed
;

180 
	#SIG_HAVPERM
 0x01

	)

181 
	#SIG_ISKERN
 0x02

	)

182 
	#SIG_SIGQUEUE
 0x04

	)

183 
	#SIG_HUPCONT
 0x08

	)

184 
	#SIG_NOSLEEP
 0x10

	)

185 
	#SIG_TIME
 0x20

	)

187 
sigt›id
(
pid_t
 
pid
, 
sig«l
, 
Êags
,Öid_à
sid
,

188 
¸ed
 *¸ed, 
k_sigöfo
 *
sigöfo
);

189 
sigtouthªad
(
uthªad_s
 *
uthªad
, 
sig
, 
k_sigöfo_t
 *);

191 
√w¥oc
();

192 
¥ocsˇn
(((*)(
¥oc
 *, *, )), *);

193 
a˘ivïroccou¡
();

194 
™˚°‹
(
pid_t
,Öid_t);

196 
v¥oc
 *
±r§ch
(
¥oc
 *, 
pid_t
);

198 
	gsigqueue
;

199 
	gsigvec_s
;

200 
	gsig≥nd
;

201 
	gsy£¡
;

203 
sigqueue
 *
sigdeq
(
sig≥nd
 *, , 
sigvec_s
 *);

204 
ksigqueue
(
v¥oc
 *, , , c⁄° 
sigvÆ
, );

205 
issig
(, );

206 
assign_cursighﬁd
(
k_sig£t_t
 *, k_sigset_t *);

207 
psig
(*, 
sy£¡
 *);

208 
check°›
();

209 
waô_check°›
();

210 
°›
(
uthªad_t
 *, 
ush‹t
, ushort, );

211 
fsig
(
uthªad_t
 *, 
sigvec_s
 *, );

212 
checkÂ
(
uthªad_s
 *, );

213 
vªlvm
();

214 
¥o˝_is_vÆid
(
¥oc
 *);

215 
uthªadp_is_vÆid
(
uthªad_t
 *);

218 
kpswtch
();

219 
qswtch
();

220 
swtch
();

221 
u£r_ªsched
();

222 
ut0exôswtch
();

223 
uãxôswtch
();

225 
ßve
(
k_machªg_t
 *);

226 #i‡(
deföed
(
_COMPILER_VERSION
) && (_COMPILER_VERSION >= 730))

227 #¥agm®
unknown_c⁄åﬁ_Êow
 (
ßve
)

229 #i‡
R4000
 || 
R10000


230 
ªsume
(
uthªad_t
 *, 
kthªad_t
 *, );

232 #i‡
TFP
 || 
PSEUDO_BEAST


233 
ªsume
(
uthªad_t
 *, 
kthªad_t
 *, , );

235 
ªsumeidÀ
(
kthªad_t
 *);

241 
	spsh¨e_s
 {

244 
muãx_t
 
	mps_fupd£ma
;

246 
vnode
 *
	mps_cdú
;

247 
vnode
 *
	mps_rdú
;

250 
lock_t
 
	mps_rupdlock
;

253 
	mps_cmask
;

254 
¸ed
 *
	mps_¸ed
;

255 
k_sig£t_t
 
	mps_sighﬁd
;

258 
muãx_t
 
	mps_°ïmuãx
;

259 
	mps_°ïÊags
;

260 
sv_t
 
	mps_°ïsv
;

261 
uthªad_t
 *
	mps_°ïut
;

262 } 
	tpsh¨e_t
;

264 
	#PSSTEP_GOTTEN
 0x01

	)

265 
	#PSSTEP_WAIT
 0x02

	)

267 
	s¥oc_Â_s
 {

268 
ˇddr_t
 
	mpÂ_noÂe‰om
;

269 
ˇddr_t
 
	mpÂ_noÂëo
;

270 
	mpÂ_dismis£d_exc_˙t
;

272 
u_ch¨
 
	mpÂ_ÂÊags
;

273 
	mpÂ_Â
;

274 } 
	t¥oc_Â_t
;

282 
	s¥oc_ac˘_s
 {

283 
ut_ac˘_s
 
	mutsum
;

284 } 
	t¥oc_ac˘_t
;

285 
	#¥_mem
 
utsum
.
ua_mem


	)

286 
	#¥_ioch
 
utsum
.
ua_ioch


	)

287 
	#¥_bªad
 
utsum
.
ua_bªad


	)

288 
	#¥_bwrô
 
utsum
.
ua_bwrô


	)

289 
	#¥_sysc
 
utsum
.
ua_sysc


	)

290 
	#¥_sys¸
 
utsum
.
ua_sys¸


	)

291 
	#¥_syscw
 
utsum
.
ua_syscw


	)

292 
	#¥_sys˝s
 
utsum
.
ua_sys˝s


	)

293 
	#¥_sysci
 
utsum
.
ua_sysci


	)

294 
	#¥_gøphfifo
 
utsum
.
ua_gøphfifo


	)

295 
	#¥_tÁu…s
 
utsum
.
ua_tÁu…s


	)

296 
	#¥_vÁu…s
 
utsum
.
ua_vÁu…s


	)

297 
	#¥_uÁu…s
 
utsum
.
ua_uÁu…s


	)

298 
	#¥_kÁu…s
 
utsum
.
ua_kÁu…s


	)

300 
	#¥xy_exô_mem
 
¥xy_exô_ac˘
.
¥_mem


	)

301 
	#¥xy_exô_ioch
 
¥xy_exô_ac˘
.
¥_ioch


	)

302 
	#¥xy_exô_bªad
 
¥xy_exô_ac˘
.
¥_bªad


	)

303 
	#¥xy_exô_bwrô
 
¥xy_exô_ac˘
.
¥_bwrô


	)

304 
	#¥xy_exô_sysc
 
¥xy_exô_ac˘
.
¥_sysc


	)

305 
	#¥xy_exô_sys¸
 
¥xy_exô_ac˘
.
¥_sys¸


	)

306 
	#¥xy_exô_syscw
 
¥xy_exô_ac˘
.
¥_syscw


	)

307 
	#¥xy_exô_sys˝s
 
¥xy_exô_ac˘
.
¥_sys˝s


	)

308 
	#¥xy_exô_sysci
 
¥xy_exô_ac˘
.
¥_sysci


	)

309 
	#¥xy_exô_gøphfifo
 
¥xy_exô_ac˘
.
¥_gøphfifo


	)

310 
	#¥xy_exô_tÁu…s
 
¥xy_exô_ac˘
.
¥_tÁu…s


	)

311 
	#¥xy_exô_vÁu…s
 
¥xy_exô_ac˘
.
¥_vÁu…s


	)

312 
	#¥xy_exô_uÁu…s
 
¥xy_exô_ac˘
.
¥_uÁu…s


	)

313 
	#¥xy_exô_kÁu…s
 
¥xy_exô_ac˘
.
¥_kÁu…s


	)

315 
	s¥oc_sched_s
 {

316 
uöt
 
	m¥s_Êags
;

317 
	m¥s_ni˚
;

318 
uch¨_t
 
	m¥s_pﬁicy
;

319 
	m¥s_¥i‹ôy
;

320 
job_s
 *
	m¥s_job
;

321 } 
	t¥oc_sched_t
;

323 
	#PRSLOCK
 0x1

	)

324 
	#PRSNOAFF
 0x2

	)

325 
	#PRSBATCH
 0x4

	)

327 
	#¥s_lock
(
¥s
Ë
	`muãx_bôlock
(&’rs)->
¥s_Êags
, 
PRSLOCK
)

	)

328 
	#¥s_u∆ock
(
¥s
, 
rv
Ë
	`muãx_bôu∆ock
(&’rs)->
¥s_Êags
, 
PRSLOCK
,Ñv)

	)

329 
	#¥s_Êag£t
(
¥s
, 
b
Ë
	`bôlock_£t
(&’rs)->
¥s_Êags
, 
PRSLOCK
, b)

	)

330 
	#¥s_Êag˛r
(
¥s
, 
b
Ë
	`bôlock_˛r
(&’rs)->
¥s_Êags
, 
PRSLOCK
, b)

	)

342 
	s¥oc_¥oxy_s
 {

343 
sysˇŒsw
 *
	m¥xy_sysˇŒ
;

344 
psh¨e_t
 *
	m¥xy_utsh¨e
;

347 
mæock_t
 
	m¥xy_thrdlock
;

348 
sv_t
 
	m¥xy_thrdwaô
;

349 
uthªad_t
 *
	m¥xy_thªads
;

350 
uthªadid_t
 
	m¥xy_¡hªads
;

351 
uthªadid_t
 
	m¥xy_utidlow
;

352 
	m¥xy_jscou¡
;

353 
	m¥xy_∆ive
;

356 
	m¥xy_Êags
;

357 
	m¥xy_hﬁd
;

358 
u_ch¨
 
	m¥xy_abi
;

359 
uöt
 
	m¥xy_shmask
;

362 #i‡
R10000


363 
≥rf_m⁄_t
 
	m¥xy_≥rfm⁄
;

364 
	#¥xy_˝um⁄
 
¥xy_≥rfm⁄
.
pm_˝u_m⁄


	)

366 
rußge
 
	m¥xy_ru
;

367 
¥oc_ac˘_t
 
	m¥xy_exô_ac˘
;

368 
ac˘_timîs_t
 
	m¥xy_exô_accum
;

371 
¥oc_sched_t
 
	m¥xy_sched
;

373 
¥oc_Â_t
 
	m¥xy_Â
;

383 
ˇddr_t
 
	m¥xy_siglb
;

384 
°ack_t
 
	m¥xy_sig°ack
;

385 
	#¥xy_ssÊags
 
¥xy_sig°ack
.
ss_Êags


	)

386 
	#¥xy_sig•
 
¥xy_sig°ack
.
ss_•


	)

387 
	#¥xy_•size
 
¥xy_sig°ack
.
ss_size


	)

388 *
	m¥xy_ﬁdc⁄ãxt
;

389 
k_sig£t_t
 
	m¥xy_sig⁄°ack
;

391 (*
	m¥xy_sigåamp
)();

394 
vnode
 *
	m¥xy_c‹edump_vp
;

395 
off_t
 
	m¥xy_c‹edump_fûeoff
;

397 
muãx_t
 
	m¥xy_c‹edump_muãx
;

399 
	m¥xy_c‹edump_¡hªads
;

405 
muãx_t
 
	m¥xy_£mlock
;

406 *
	m¥xy_£mundo
;

407 
uthªad_t
 *
	m¥xy_sigthªad
;

408 } 
	t¥oc_¥oxy_t
;

410 
	#PRXY_LOCK
 0x00000001

	)

411 
	#PRXY_EXIT
 0x00000002

	)

412 
	#PRXY_EXEC
 0x00000004

	)

413 
	#PRXY_SPROC
 0x00000008

	)

414 
	#PRXY_SPIPE
 0x00000010

	)

415 
	#PRXY_USERVME
 0x00000020

	)

416 
	#PRXY_WAIT
 0x00000040

	)

417 
	#PRXY_JSTOP
 0x00000080

	)

418 
	#PRXY_JPOLL
 0x00000100

	)

419 
	#PRXY_PWAIT
 0x00000200

	)

420 
	#PRXY_PSTOP
 0x00000400

	)

421 
	#PRXY_JSARMED
 0x00000800

	)

422 
	#PRXY_JSTOPPED
 0x00001000

	)

423 
	#PRXY_NOHANG
 0x00002000

	)

424 
	#PRXY_RLCKDEBUG
 0x00004000

	)

425 
	#PRXY_RWLCKDEBUG
 0x00008000

	)

426 
	#PRXY_LONEWT
 0x00010000

	)

427 
	#PRXY_CREATWT
 0x00020000

	)

429 
	#¥xy_lock
(
¥xy
) \

430 
	`muãx_bôlock
((
uöt
 *)(&(
¥xy
)->
¥xy_Êags
), 
PRXY_LOCK
)

	)

431 
	#¥xy_u∆ock
(
¥xy
, 
rv
) \

432 
	`muãx_bôu∆ock
((
uöt
 *)(&(
¥xy
)->
¥xy_Êags
), 
PRXY_LOCK
, 
rv
)

	)

433 
	#¥xy_waô
(
¥xy
,
sv
,
rv
) \

434 
	`sv_bôlock_waô
(
sv
, 0, (
uöt
 *)(&(
¥xy
)->
¥xy_Êags
), \

435 
PRXY_LOCK
, 
rv
)

	)

436 
	#¥xy_°›lock
 
¥xy_lock


	)

437 
	#¥xy_°›u∆ock
 
¥xy_u∆ock


	)

438 
	#¥xy_hlock
 
¥xy_lock


	)

439 
	#¥xy_hu∆ock
 
¥xy_u∆ock


	)

440 
	#nusˇn_hﬁd
(
¥xy
Ë¥xy->
¥xy_hﬁd
++;

	)

442 
	#¥xy_Êag£t
(
¥xy
, 
b
) \

443 
	`bôlock_£t
((
uöt
 *)(&(
¥xy
)->
¥xy_Êags
), 
PRXY_LOCK
, 
b
)

	)

444 
	#¥xy_Êag˛r
(
¥xy
, 
b
) \

445 
	`bôlock_˛r
((
uöt
 *)(&(
¥xy
)->
¥xy_Êags
), 
PRXY_LOCK
, 
b
)

	)

446 
	#¥xy_nÊag£t
(
¥xy
, 
b
Ë¥xy->
¥xy_Êags
 |(b)

	)

447 
	#¥xy_nÊag˛r
(
¥xy
, 
b
Ë¥xy->
¥xy_Êags
 &~(b)

	)

449 
	#usˇn_upd©e
(
¥xy
Ë
	`mrupd©e
(&’rxy)->
¥xy_thrdlock
)

	)

450 
	#usˇn_ac˚ss
(
¥xy
Ë
	`møc˚ss
(&’rxy)->
¥xy_thrdlock
)

	)

451 
	#usˇn_åyupd©e
(
¥xy
Ë
	`mπryupd©e
(&’rxy)->
¥xy_thrdlock
)

	)

452 
	#usˇn_åyac˚ss
(
¥xy
Ë
	`mπryac˚ss
(&’rxy)->
¥xy_thrdlock
)

	)

453 
	#usˇn_upd©e_hñd
(
¥xy
Ë
	`mri¶ocked_upd©e
(&’rxy)->
¥xy_thrdlock
)

	)

454 
	#usˇn_ac˚ss_hñd
(
¥xy
Ë
	`mri¶ocked_ac˚ss
(&’rxy)->
¥xy_thrdlock
)

	)

455 
	#usˇn_u∆ock
(
¥xy
Ë
	`mru∆ock
(&’rxy)->
¥xy_thrdlock
)

	)

456 
	#usˇn_waô
(
¥xy
, 
s
Ë
	`sv_bôlock_waô
(&’rxy)->
¥xy_thrdwaô
,\

457 0, (
uöt
 *)(&(
¥xy
)->
¥xy_Êags
), \

458 
PRXY_LOCK
, 
s
)

	)

459 
	#usˇn_wake
(
¥xy
Ë
	`sv_brﬂdˇ°
(&’rxy)->
¥xy_thrdwaô
)

	)

460 
	#l⁄e_waô
(
¥xy
Ë
	`sv_mæock_waô
(&’rxy)->
¥xy_thrdwaô
, \

461 0, &(
¥xy
)->
¥xy_thrdlock
)

	)

462 
	#l⁄e_wake
(
¥xy
Ë
	`sv_brﬂdˇ°
(&’rxy)->
¥xy_thrdwaô
)

	)

463 
	#¸óã_hﬁd
(
¥xy
Ë
	`¥xy_Êag£t
’rxy, 
PRXY_CREATWT
Ë

	)

464 
	#¸óã_ªÀ
(
¥xy
) { \

465 i‡(
¥xy
->
¥xy_Êags
 & 
PRXY_CREATWT
) { \

466 
	`¥xy_Êag˛r
(
¥xy
, 
PRXY_CREATWT
);\

467 
	`sv_brﬂdˇ°
(&(
¥xy
)-> \

468 
¥xy_thrdwaô
); \

470 }

	)

471 
	#¸óã_waô
(
¥xy
Ë
	`sv_mæock_waô
(&’rxy)->
¥xy_thrdwaô
, 0, \

472 &(
¥xy
)->
¥xy_thrdlock
)

	)

473 
	#usˇn_hñd
(
¥xy
Ë(
	`usˇn_upd©e_hñd
(prxy) || \

474 
	`usˇn_ac˚ss_hñd
(
¥xy
))

	)

475 
	#¥xy_to_thªad
(
¥xy
Ë(
	`ASSERT
((!(
	`IS_THREADED
((prxy)))) || \

476 ((
¥xy
)->
¥xy_hﬁd
Ë|| (
	`usˇn_hñd
((prxy)))), \

477 (
¥xy
)->
¥xy_thªads
)

	)

478 
	#usˇn_f‹lo›
(
¥xy
, 
ut
Ë
	`ASSERT
(
	`usˇn_hñd
(prxy)), \

479 (
ut
Ë(
¥xy
)->
¥xy_thªads
; \

480 (
ut
Ë!
NULL
; \

481 (
ut
Ë(ut)->
ut_√xt
)

	)

482 
usˇn_hﬁd
(
¥oc_¥oxy_t
 *);

483 
usˇn_ªÀ
(
¥oc_¥oxy_t
 *);

500 
	sshaddr_s
 {

502 
pid_t
 
	ms_‹ig
;

503 
¥oc
 *
	ms_∂ök
;

504 
muãx_t
 
	ms_li°lock
;

505 
ush‹t
 
	ms_ªf˙t
;

507 
muãx_t
 
	ms_fupd£ma
;

509 
lock_t
 
	ms_rupdlock
;

510 
fdt
 *
	ms_fdt
;

511 
vnode
 *
	ms_cdú
;

512 
vnode
 *
	ms_rdú
;

514 
unch¨
 
	ms_sched
;

515 
	ms_cmask
;

516 
off_t
 
	ms_limô
;

517 
¸ed
 *
	ms_¸ed
;

519 
pid_t
 
	ms_ma°î
;

520 
gdb_s
 *
	ms_gdb
;

522 
muãx_t
 
	ms_dëach£m
;

523 
sv_t
 
	ms_dëached
;

524 #ifde‡
CKPT


525 
ck±_shm
 *
	ms_ck±shm
;

527 } 
	tshaddr_t
;

529 
	#IS_SPROC
(
¥xy
Ë(’rxy)->
¥xy_Êags
 & 
PRXY_SPROC
)

	)

530 
	#IS_THREADED
(
¥xy
Ë(’rxy)->
¥xy_shmask
 & 
PR_THREADS
)

	)

532 
	#ISSHDFD
(
¥xy
Ë(’rxy)->
¥xy_shmask
 & 
PR_SFDS
)

	)

536 
	#DETACH_REASON
(
x
Ë((xË& 0xff)

	)

538 
	#EXIT_CODE
(
x
Ë((x)<<8Ë

	)

539 
	#EXIT_DECODE
(
x
Ë((x)>>8Ë

	)

542 
	#SHDEXEC
 1

	)

543 
	#SHDEXIT
 2

	)

545 
£tshdsync
(
shaddr_t
 *, 
¥oc
 *, , );

546 
£çsync
(
¥oc_¥oxy_s
 *, );

547 
gëshdpids
(
¥oc
 *, 
pid_t
 *, );

548 
dousync
();

549 
¸edsync
();

551 
Ælo˝sh¨e
();

552 
dëachpsh¨e
(
¥oc_¥oxy_s
 *);

554 
	g¸ed
;

555 
ha•ro˝îm
(
¥oc
 *, 
¸ed
 *);

557 
	~<sys/ksig«l.h
>

558 
	ssigvec_s
 {

559 
mæock_t
 
	msv_lock
;

560 
uöt
 
	msv_Êags
;

561 
sig≥nd_t
 
	msv_sig≥nd
;

562 
k_sig£t_t
 
	msv_sigign
;

563 
k_sig£t_t
 
	msv_sigˇtch
;

564 
k_sig£t_t
 
	msv_sigª°¨t
;

565 
k_sig£t_t
 
	msv_signode„r
;

566 
k_sig£t_t
 
	msv_sigª£th™d
;

567 
k_sig£t_t
 
	msv_ßöfo
;

568 
k_sig£t_t
 
	msv_sighﬁd
;

569 (*
	msv_hndÃ
[
NUMSIGS
])();

570 
k_sig£t_t
 
	msv_sigmasks
[
NUMSIGS
];

571 
	msv_≥ndög
;

572 } 
	tsigvec_t
;

574 
	#sv_sig
 
sv_sig≥nd
.
s_sig


	)

575 
	#sv_sigqueue
 
sv_sig≥nd
.
s_sigqueue


	)

579 
	#SNOCLDSTOP
 0x00000002

	)

580 
	#SNOWAIT
 0x00000004

	)

582 
	#sigvec_lock
(
sv
Ë
	`mrupd©e
(&(sv)->
sv_lock
)

	)

583 
	#sigvec_ac˛ock
(
sv
Ë
	`møc˚ss
(&(sv)->
sv_lock
)

	)

584 
	#sigvec_u∆ock
(
sv
Ë
	`mru∆ock
(&(sv)->
sv_lock
)

	)

585 
	#sigvec_is_locked
(
sv
Ë
	`mri¶ocked_™y
(&(sv)->
sv_lock
)

	)

591 
	sexô_ˇŒback
 {

592 
exô_ˇŒback
 *
	mecb_√xt
;

593 (* 
	mecb_func
)(*);

594 *
	mecb_¨g
;

605 
	s_async_sig
 {

606 
pid_t
 
	ms_pid
;

607 
	ms_sig
;

608 
time_t
 
	ms_time
;

609 } 
	t_async_sig_t
;

615 
	s_async_‰s_sig
 {

616 
pid_t
 
	ms_pid
;

617 
uthªadid_t
 
	ms_tid
;

618 
	ms_sig
;

619 } 
	t_async_‰s_sig_t
;

622 
	sasync_vec_s
 {

623 (*
	masync_func
)(
	masync_vec_s
 *);

625 
_async_sig_t
 
	masync_sig«l
;

626 
	masync_nuŒ
;

627 
_async_‰s_sig_t
 
	masync_‰s
;

628 } 
	masync_¨g
;

629 } 
	tasync_vec_t
;

631 (*
	tasync_func_t
)(
	tasync_vec_s
 *);

633 
	`async_ˇŒ
(
async_vec_t
 *);

	@/usr/include/sys/ptimers.h

17 #i‚de‡
__SYS_PTIMERS_H__


18 
	#__SYS_PTIMERS_H__


	)

25 
	~<sys/time•ec.h
>

27 
	sôimî•ec
 {

28 
time•ec_t
 
	mô_öãrvÆ
;

29 
time•ec_t
 
	mô_vÆue
;

30 } 
	tôimî•ec_t
;

34 
	#CLOCK_REALTIME
 1

	)

36 
	#CLOCK_SGI_CYCLE
 2

	)

37 
	#CLOCK_SGI_FAST
 3

	)

41 
	#TIMER_ABSTIME
 0x00000001

	)

43 #i‡
_KERNEL


44 
	~<sys/sig«l.h
>

49 
	#_SGI_POSIX_TIMER_MAX
 32

	)

51 
	s±imî_öfo
 {

52 
__öt64_t
 
	m√xt_timeout
;

53 
__öt64_t
 
	möãrvÆ_tick
;

54 
	msigno
;

55 
sigvÆ_t
 
	mvÆue
;

56 
	m˛ock_ty≥
;

57 
toid_t
 
	m√xt_toid
;

58 
	movîrun_˙t
;

59 } 
	t±imî_öfo_t
;

	@/usr/include/sys/resource.h

8 #i‚de‡
_SYS_RESOURCE_H


9 
	#_SYS_RESOURCE_H


	)

11 #ifde‡
__˝lu•lus


15 
	~<°™d¨ds.h
>

16 
	~<sgidefs.h
>

17 
	~<sys/ty≥s.h
>

22 #i‚de‡
_TIMEVAL_T


23 
	#_TIMEVAL_T


	)

24 
	stimevÆ
 {

25 #i‡
_MIPS_SZLONG
 == 64

26 
__öt32_t
 :32;

28 
time_t
 
tv_£c
;

29 
tv_u£c
;

37 
	s__úix5_timevÆ
 {

38 
__öt32_t
 
tv_£c
;

39 
__öt32_t
 
tv_u£c
;

46 
	#PRIO_MIN
 -20

	)

47 
	#PRIO_MAX
 20

	)

49 
	#PRIO_PROCESS
 0

	)

50 
	#PRIO_PGRP
 1

	)

51 
	#PRIO_USER
 2

	)

57 
	#RUSAGE_SELF
 0

	)

58 
	#RUSAGE_CHILDREN
 -1

	)

60 
	srußge
 {

61 
timevÆ
 
ru_utime
;

62 
timevÆ
 
ru_°ime
;

63 #i‡
_ABIAPI


64 
ru_∑d
[14];

66 
ru_maxrss
;

67 
	#ru_fú°
 
ru_ixrss


	)

68 
ru_ixrss
;

69 
ru_idrss
;

70 
ru_i§ss
;

71 
ru_möÊt
;

72 
ru_majÊt
;

73 
ru_nsw≠
;

74 
ru_öblock
;

75 
ru_oublock
;

76 
ru_msg¢d
;

77 
ru_msgrcv
;

78 
ru_nsig«ls
;

79 
ru_nvcsw
;

80 
ru_nivcsw
;

81 
	#ru_œ°
 
ru_nivcsw


	)

88 
	#RLIMIT_CPU
 0

	)

89 
	#RLIMIT_FSIZE
 1

	)

90 
	#RLIMIT_DATA
 2

	)

91 
	#RLIMIT_STACK
 3

	)

92 
	#RLIMIT_CORE
 4

	)

93 
	#RLIMIT_NOFILE
 5

	)

94 
	#RLIMIT_VMEM
 6

	)

95 
	#RLIMIT_RSS
 7

	)

96 
	#RLIMIT_AS
 
RLIMIT_VMEM


	)

97 
	#RLIMIT_PTHREAD
 8

	)

99 
	#RLIM_NLIMITS
 9

	)

102 #ifde‡
_KERNEL


103 
	#RLIM_INFINITY
 0x7fffffffffffffffLL

	)

104 
	#RLIM32_INFINITY
 0x7fffffff

	)

105 #ñi‡(
_MIPS_SZLONG
 =64Ë|| (
_MIPS_SIM
 =
_ABIN32
)

106 
	#RLIM_INFINITY
 0x7fffffffffffffffLL

	)

108 
	#RLIM_INFINITY
 0x7fffffff

	)

111 #i‡
_LFAPI


112 
	#RLIM64_SAVED_CUR
 0x7ffffffffffffffdLL

	)

113 
	#RLIM64_SAVED_MAX
 0x7fffffffffffff„LL

	)

114 
	#RLIM64_INFINITY
 0x7fffffffffffffffLL

	)

117 #i‡
_LFAPI
 || 
_XOPEN5


118 
	#RLIM_SAVED_CUR
 0x7ffffffd

	)

119 
	#RLIM_SAVED_MAX
 0x7fffff„

	)

122 #ifde‡
_KERNEL


123 
__uöt64_t
 
	tæim_t
;

124 #ñi‡
_MIPS_SIM
 =
_ABIN32


125 
__uöt64_t
 
	tæim_t
;

127 
	tæim_t
;

130 
	sæimô
 {

131 
æim_t
 
æim_cur
;

132 
æim_t
 
æim_max
;

135 #i‡
_LFAPI


136 
__uöt64_t
 
	tæim64_t
;

138 
	sæimô64
 {

139 
æim64_t
 
æim_cur
;

140 
æim64_t
 
æim_max
;

144 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
)

149 
	#JLIMIT_CPU
 0

	)

150 
	#JLIMIT_DATA
 1

	)

151 
	#JLIMIT_VMEM
 2

	)

152 
	#JLIMIT_RSS
 3

	)

153 
	#JLIMIT_NOFILE
 4

	)

154 
	#JLIMIT_PTHREAD
 5

	)

155 
	#JLIMIT_NUMPROC
 6

	)

156 
	#JLIMIT_PMEM
 7

	)

158 
	#JLIM_NLIMITS
 8

	)

167 
	#JL_CPU_SIGXCPU
 0x00000001

	)

168 
	#JL_CPU_SIGKILL
 0x00000002

	)

169 
	#JL_DATA
 0x00000004

	)

170 
	#JL_VMEM
 0x00000008

	)

171 
	#JL_RSS
 0x00000010

	)

172 
	#JL_NOFILE
 0x00000020

	)

173 
	#JL_PTHREAD
 0x00000040

	)

174 
	#JL_NUMPROC
 0x00000080

	)

175 
	#JL_PMEM
 0x00000100

	)

177 
	#JL_PMEM_IGN
 0x0100000000000000

	)

178 
	#JL_NUMPROC_IGN
 0x0200000000000000

	)

179 
	#JL_PTHREAD_IGN
 0x0400000000000000

	)

180 
	#JL_NOFILE_IGN
 0x0800000000000000

	)

181 
	#JL_RSS_IGN
 0x1000000000000000

	)

182 
	#JL_VMEM_IGN
 0x2000000000000000

	)

183 
	#JL_DATA_IGN
 0x4000000000000000

	)

184 
	#JL_CPU_IGN
 0x8000000000000000

	)

187 
	#jlimô_ign_pmem
(
jt
Ë(jt->
job_limôÊag
 & 
JL_PMEM_IGN
)

	)

188 
	#jlimô_ign_num¥oc
(
jt
Ë(jt->
job_limôÊag
 & 
JL_NUMPROC_IGN
)

	)

189 
	#jlimô_ign_±hªad
(
jt
Ë(jt->
job_limôÊag
 & 
JL_PTHREAD_IGN
)

	)

190 
	#jlimô_ign_nofûe
(
jt
Ë(jt->
job_limôÊag
 & 
JL_NOFILE_IGN
)

	)

191 
	#jlimô_ign_rss
(
jt
Ë(jt->
job_limôÊag
 & 
JL_RSS_IGN
)

	)

192 
	#jlimô_ign_vmem
(
jt
Ë(jt->
job_limôÊag
 & 
JL_VMEM_IGN
)

	)

193 
	#jlimô_ign_d©a
(
jt
Ë(jt->
job_limôÊag
 & 
JL_DATA_IGN
)

	)

194 
	#jlimô_ign_˝u
(
jt
Ë(jt->
job_limôÊag
 & 
JL_CPU_IGN
)

	)

198 
	sjobrußge
 {

199 
æim_t
 
ußge
;

200 
æim_t
 
high_ußge
;

203 
	sjªs_s
 {

204 
æim_t
 
limô_cur
;

205 
æim_t
 
limô_max
;

206 
æim_t
 
ußge
;

207 
æim_t
 
high_ußge
;

208 } 
	tjªs_t
;

210 
	sjob_öfo_s
 {

211 
jid_t
 
job_id
;

212 
__öt64_t
 
job_limôÊag
;

213 
uid_t
 
job_uid
;

214 
time_t
 
job_°¨t
;

215 
__öt64_t
 
fûl1
[2];

216 
jªs_t
 
job_d©a
[
JLIM_NLIMITS
];

217 
__öt64_t
 
fûl2
[8];

218 } 
	tjob_öfo_t
;

222 #ifde‡
_KERNEL


224 
	~<sys/ty≥s.h
>

230 
	#RLIM32_CONV
(
x
Ë(((xË=
RLIM32_INFINITY
Ë? 
RLIM_INFINITY
 : (x))

	)

232 
uthªad_s
;

233 
rvÆ
;

235 
ruadd
(
rußge
 *, rusage *);

236 
£ålimôcomm⁄
(
usyßrg_t
, 
æimô
 *);

237 
æim_t
 
gëa¶imô
(
uthªad_s
 *, );

238 
æim_t
 
gëfsizñimô
();

239 
æimô
 
æimôs
[];

240 
syssgi_gëjid
(
jid_t
 *);

241 
syssgi_gëjlimô
(
jid_t
, , 
æimô
 *);

242 
syssgi_£tjlimô
(
jid_t
, , 
æimô
 *);

243 
syssgi_kûljob
(
jid_t
, );

244 
syssgi_makíewjob
(
jid_t
, , jid_t *);

245 
syssgi_gëjobpid
(
jid_t
, 
pid_t
 *, , 
rvÆ
 *);

246 
syssgi_gëjußge
(
jid_t
, , 
jobrußge
 *);

247 
syssgi_£tjußge
(
jid_t
, , 
jobrußge
 *);

248 
syssgi_joöjob
(
jid_t
);

249 
syssgi_£twaôjobpid
(
jid_t
, 
pid_t
);

250 
syssgi_waôjob
(
job_öfo_t
 *, 
jid_t
 *);

252 
	súix5_æimô
 {

253 
≠p32_ul⁄g_t
 
	gæim_cur
;

254 
≠p32_ul⁄g_t
 
	gæim_max
;

257 
	súix5_jobrußge
 {

258 
≠p32_ul⁄g_t
 
	gußge
;

259 
≠p32_ul⁄g_t
 
	ghigh_ußge
;

262 
	súix5_jªs_s
 {

263 
≠p32_ul⁄g_t
 
	glimô_cur
;

264 
≠p32_ul⁄g_t
 
	glimô_max
;

265 
≠p32_ul⁄g_t
 
	gußge
;

266 
≠p32_ul⁄g_t
 
	ghigh_ußge
;

267 } 
	túix5_jªs_t
;

269 
	súix5_job_öfo_s
 {

270 
jid_t
 
	gjob_id
;

271 
__öt64_t
 
	gjob_limôÊag
;

272 
uid_t
 
	gjob_uid
;

273 
time_t
 
	gjob_°¨t
;

274 
__öt64_t
 
	gfûl1
[2];

275 
úix5_jªs_t
 
	gjob_d©a
[
JLIM_NLIMITS
];

276 
__öt64_t
 
	gfûl2
[8];

277 } 
	túix5_job_öfo_t
;

281 
gëæimô
(, 
æimô
 *);

282 
£ålimô
(, c⁄° 
æimô
 *);

283 
gë¥i‹ôy
(, 
id_t
);

284 
£çri‹ôy
(, 
id_t
, );

285 
gërußge
(, 
rußge
 *);

287 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
)

288 
jid_t
 
gëjid
();

289 
gëjlimô
(
jid_t
, , 
æimô
 *);

290 
gëjußge
(
jid_t
, , 
jobrußge
 *);

291 
£tjußge
(
jid_t
, , 
jobrußge
 *);

292 
jid_t
 
jlimô_°¨tjob
(*, 
uid_t
, *);

293 
kûljob
(
jid_t
, );

294 
jid_t
 
makíewjob
(jid_t, 
uid_t
);

295 
£tjlimô
(
jid_t
, , 
æimô
 *);

296 
£twaôjobpid
(
jid_t
, 
pid_t
);

297 
jid_t
 
waôjob
(
job_öfo_t
 *);

299 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

300 #¥agm®
›ti⁄Æ
 
gëjid


301 #¥agm®
›ti⁄Æ
 
gëjlimô


302 #¥agm®
›ti⁄Æ
 
gëjußge


303 #¥agm®
›ti⁄Æ
 
£tjußge


304 #¥agm®
›ti⁄Æ
 
jlimô_°¨tjob


305 #¥agm®
›ti⁄Æ
 
kûljob


306 #¥agm®
›ti⁄Æ
 
makíewjob


307 #¥agm®
›ti⁄Æ
 
£tjlimô


308 #¥agm®
›ti⁄Æ
 
£twaôjobpid


309 #¥agm®
›ti⁄Æ
 
waôjob


314 #i‡
_LFAPI


315 
gëæimô64
(, 
æimô64
 *);

316 
£ålimô64
(, c⁄° 
æimô64
 *);

321 #ifde‡
__˝lu•lus


	@/usr/include/sys/sigevent.h

18 #i‚de‡
_SYS_SIGEVENT_H


19 
	#_SYS_SIGEVENT_H


	)

29 
	~<°™d¨ds.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/±hªad.h
>

32 
	~<öã∫Æ/sgima¸os.h
>

34 
	g__SGI_LIBC_BEGIN_EXTERN_C


36 #i‡(
_MIPS_SZPTR
 == 32)

37 
	usigvÆ
 {

38 
	msivÆ_öt
;

39 *
	msivÆ_±r
;

40 } 
	tsigvÆ_t
;

42 #i‡(
_MIPS_SZPTR
 == 64)

43 
	usigvÆ
 {

44 
	msivÆ_öt
;

45 *
	msivÆ_±r
;

46 } 
	tsigvÆ_t
;

49 #i‡
_XOPEN4
 && 
_NO_XOPEN5


50 
	#__nŸifyöfo
 
nŸifyöfo


	)

51 
	#__nisigno
 
nisigno


	)

52 
	#__nifunc
 
nifunc


	)

54 
	u__nŸifyöfo
 {

55 
	m__nisigno
;

56 (*
	m__nifunc
Ë(
	msigvÆ_t
);

57 } 
	tnŸifyöfo_t
;

59 
	ssigevít
 {

60 
	msigev_nŸify
;

61 
nŸifyöfo_t
 
	msigev_nŸifyöfo
;

62 
sigvÆ_t
 
	msigev_vÆue
;

63 (*
	msigev_nŸify_fun˘i⁄
Ë(
	msigvÆ_t
);

64 
±hªad_©å_t
 *
	msigev_nŸify_©åibuãs
;

65 
	msigev_ª£rved
[11];

66 
	msigev_∑d
[6];

67 } 
	tsigevít_t
;

68 
	#sigev_func
 
sigev_nŸifyöfo
.
__nifunc


	)

69 
	#sigev_signo
 
sigev_nŸifyöfo
.
__nisigno


	)

71 
	#SIGEV_NONE
 128

	)

72 
	#SIGEV_SIGNAL
 129

	)

73 
	#SIGEV_CALLBACK
 130

	)

74 
	#SIGEV_THREAD
 131

	)

76 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/sys/siginfo.h

21 #i‚de‡
_SYS_SIGINFO_H


22 
	#_SYS_SIGINFO_H


	)

26 
	~<°™d¨ds.h
>

27 #i‡
_POSIX93
 || 
_XOPEN5


28 
	~<sys/sigevít.h
>

30 
	~<öã∫Æ/sgima¸os.h
>

46 
	g__SGI_LIBC_BEGIN_EXTERN_C


48 
	#SI_MAXSZ
 128

	)

49 
	#SI_PAD
 ((
SI_MAXSZ
 / (
__öt32_t
)Ë- 3)

	)

51 #i‡
_SGIAPI


52 
	#sigöfo
 
__sigöfo


	)

59 
	s__sigöfo
 {

60 
	msi_signo
;

61 
	msi_code
;

62 
	msi_î∫o
;

65 
	msi_∑d
[
SI_PAD
];

68 
pid_t
 
	m__pid
;

71 
uid_t
 
	m__uid
;

72 } 
	m__kûl
;

74 
˛ock_t
 
	m__utime
;

75 
	m__°©us
;

76 
˛ock_t
 
	m__°ime
;

77 
	m__sw≠
;

78 } 
	m__˛d
;

79 } 
	m__pd©a
;

80 } 
	m__¥oc
;

83 *
	m__addr
;

84 } 
	m__Áu…
;

88 
	m__fd
;

89 
	m__b™d
;

90 } 
	m__fûe
;

91 #i‡
_POSIX93
 || 
_XOPEN5


92 
sigvÆ
 
	m__vÆue
;

93 
	#si_vÆue
 
__d©a
.
__vÆue


	)

96 } 
	m__d©a
;

98 } 
	tsigöfo_t
;

100 
	#si_pid
 
__d©a
.
__¥oc
.
__pid


	)

101 
	#si_°©us
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__°©us


	)

102 
	#si_°ime
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__°ime


	)

103 
	#si_utime
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__utime


	)

104 
	#si_sw≠
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__sw≠


	)

105 
	#si_uid
 
__d©a
.
__¥oc
.
__pd©a
.
__kûl
.
__uid


	)

106 
	#si_addr
 
__d©a
.
__Áu…
.
__addr


	)

107 
	#si_fd
 
__d©a
.
__fûe
.
__fd


	)

108 
	#si_b™d
 
__d©a
.
__fûe
.
__b™d


	)

111 
	#SI_USER
 0

	)

112 
	#SI_KILL
 
SI_USER


	)

113 
	#SI_QUEUE
 -1

	)

114 
	#SI_ASYNCIO
 -2

	)

115 
	#SI_TIMER
 -3

	)

116 
	#SI_MESGQ
 -4

	)

122 
	#SI_FROMUSER
(
__sù
Ë((__sù)->
si_code
 <0)

	)

123 
	#SI_FROMKERNEL
(
__sù
Ë((__sù)->
si_code
 > 0)

	)

125 #i‡
_XOPEN4UX
 || 
_XOPEN5


129 
	#ILL_ILLOPC
 1

	)

130 
	#ILL_ILLOPN
 2

	)

131 
	#ILL_ILLADR
 3

	)

132 
	#ILL_ILLTRP
 4

	)

133 
	#ILL_PRVOPC
 5

	)

134 
	#ILL_PRVREG
 6

	)

135 
	#ILL_COPROC
 7

	)

136 
	#ILL_BADSTK
 8

	)

137 #i‡
_SGIAPI


138 
	#NSIGILL
 8

	)

144 
	#FPE_INTDIV
 1

	)

145 
	#FPE_INTOVF
 2

	)

146 
	#FPE_FLTDIV
 3

	)

147 
	#FPE_FLTOVF
 4

	)

148 
	#FPE_FLTUND
 5

	)

149 
	#FPE_FLTRES
 6

	)

150 
	#FPE_FLTINV
 7

	)

151 
	#FPE_FLTSUB
 8

	)

152 #i‡
_SGIAPI


153 
	#NSIGFPE
 8

	)

159 
	#SEGV_MAPERR
 1

	)

160 
	#SEGV_ACCERR
 2

	)

161 #i‡
_SGIAPI


162 
	#NSIGSEGV
 2

	)

168 
	#BUS_ADRALN
 1

	)

169 
	#BUS_ADRERR
 2

	)

170 
	#BUS_OBJERR
 3

	)

171 #i‡
_SGIAPI


172 
	#NSIGBUS
 3

	)

178 
	#TRAP_BRKPT
 1

	)

179 
	#TRAP_TRACE
 2

	)

180 #i‡
_SGIAPI


181 
	#NSIGTRAP
 2

	)

187 
	#CLD_EXITED
 1

	)

188 
	#CLD_KILLED
 2

	)

189 
	#CLD_DUMPED
 3

	)

190 
	#CLD_TRAPPED
 4

	)

191 
	#CLD_STOPPED
 5

	)

192 
	#CLD_CONTINUED
 6

	)

193 #i‡
_SGIAPI


194 
	#NSIGCLD
 6

	)

200 
	#POLL_IN
 1

	)

201 
	#POLL_OUT
 2

	)

202 
	#POLL_MSG
 3

	)

203 
	#POLL_ERR
 4

	)

204 
	#POLL_PRI
 5

	)

205 
	#POLL_HUP
 6

	)

206 #i‡
_SGIAPI


207 
	#NSIGPOLL
 6

	)

213 #i‡
_SGIAPI


214 
	#UME_ECCERR
 1

	)

215 
	#NSIGUME
 1

	)

220 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/sys/strmdep.h

10 #i‚de‡
_SYS_STRMDEP_H


11 
	#_SYS_STRMDEP_H


	)

25 #i‡
deföed
(
u3b2
Ë&& !deföed(
löt
)

30 
asm
 

31 
	$°rb˝y
(
s
, 
d
, 
c
)

33 %
mem
 
s
,
d
,
c
;

35 
MOVW
 
s
,%
r0


36 
MOVW
 
d
,%
r1


37 
MOVW
 
c
,%
r2


38 
ADDW2
 &3,%
r2


39 
LRSW3
 &2,%
r2
,%r2

40 
MOVBLW


41 
	}
}

45 
	#°rb˝y
(
s
, 
d
, 
c
Ë
	`bc›y
(s, d, c)

	)

54 #i‡
deföed
(
u3b2
Ë&& !deföed(
löt
)

56 
asm
 

57 
	$ßvóddr
(
fun˝
)

59 %
mem
 
fun˝
;

61 
MOVW
 -36(%
Â
),*
fun˝


62 
	}
}

66 
	#ßvóddr
(
fun˝
)

	)

74 #ifde‡
u3b2


76 
	#°r_Æig√d
(
X
Ë(((
uöt
)(XË& 03Ë=0)

	)

80 
	#°r_Æig√d
(
X
Ë(((
__psöt_t
)(XË& ((__psöt_tË- 1)Ë=0)

	)

	@/usr/include/sys/termios.h

12 #i‚de‡
_SYS_TERMIOS_H


13 
	#_SYS_TERMIOS_H


	)

15 #ifde‡
__˝lu•lus


18 
	~<°™d¨ds.h
>

19 
	~<sys/âydev.h
>

20 
	~<sys/ty≥s.h
>

22 #i‚de‡
_POSIX_VDISABLE


23 
	#_POSIX_VDISABLE
 0

	)

26 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


27 
	#CTRL
(
c
Ë((c)&037)

	)

28 
	#IBSHIFT
 16

	)

31 
	#NCC
 8

	)

34 
	#NCCS
 23

	)

40 #i‡(
_MIPS_SZLONG
 == 32)

41 
	ttcÊag_t
;

43 #i‡(
_MIPS_SZLONG
 == 64)

44 
__uöt32_t
 
	ttcÊag_t
;

47 
	tcc_t
;

49 #i‡(
_MIPS_SZLONG
 == 32)

50 
	t•ìd_t
;

52 #i‡(
_MIPS_SZLONG
 == 64)

53 
__uöt32_t
 
	t•ìd_t
;

61 
	sãrmios
 {

62 
tcÊag_t
 
c_iÊag
;

63 
tcÊag_t
 
c_oÊag
;

64 
tcÊag_t
 
c_cÊag
;

65 
tcÊag_t
 
c_lÊag
;

66 #i‡!
deföed
(
_OLD_TERMIOS
Ë&& 
_NO_ABIAPI


67 
•ìd_t
 
c_o•ìd
;

68 
•ìd_t
 
c_i•ìd
;

70 
cc_t
 
c_cc
[
NCCS
];

73 
	s__√w_ãrmios
 {

74 
tcÊag_t
 
c_iÊag
;

75 
tcÊag_t
 
c_oÊag
;

76 
tcÊag_t
 
c_cÊag
;

77 
tcÊag_t
 
c_lÊag
;

78 
•ìd_t
 
c_o•ìd
;

79 
•ìd_t
 
c_i•ìd
;

80 
cc_t
 
c_cc
[
NCCS
];

83 
	s__ﬁd_ãrmios
 {

84 
tcÊag_t
 
c_iÊag
;

85 
tcÊag_t
 
c_oÊag
;

86 
tcÊag_t
 
c_cÊag
;

87 
tcÊag_t
 
c_lÊag
;

88 
cc_t
 
c_cc
[
NCCS
];

91 
	#__NEW_MAX_BAUD
 500000

	)

103 #i‚de‡
_KERNEL


105 #i‡!
deföed
(
_OLD_TERMIOS
Ë&& 
_NO_ABIAPI


107 
•ìd_t
 
__√w_cfgëo•ìd
 (c⁄° 
ãrmios
 *);

108 
__√w_cf£to•ìd
 (
ãrmios
 *, 
•ìd_t
);

109 
•ìd_t
 
__√w_cfgëi•ìd
 (c⁄° 
ãrmios
 *);

110 
__√w_cf£ti•ìd
 (
ãrmios
 *, 
•ìd_t
);

111 
__√w_tcgë©å
 (, 
ãrmios
 *);

112 
__√w_tc£èâr
 (, , c⁄° 
ãrmios
 *);

115 
•ìd_t
 
cfgëo•ìd
 (c⁄° 
ãrmios
 *
__t
) {

116  
__√w_cfgëo•ìd
(
__t
);

119 
cf£to•ìd
 (
ãrmios
 *
__t
, 
•ìd_t
 
__s
) {

120  
__√w_cf£to•ìd
(
__t
,
__s
);

123 
•ìd_t
 
cfgëi•ìd
 (c⁄° 
ãrmios
 *
__t
) {

124  
__√w_cfgëi•ìd
(
__t
);

127 
cf£ti•ìd
 (
ãrmios
 *
__t
, 
•ìd_t
 
__s
) {

128  
__√w_cf£ti•ìd
(
__t
,
__s
);

131 
tcgë©å
 (
__fd
, 
ãrmios
 *
__t
) {

132  
__√w_tcgë©å
(
__fd
,
__t
);

135 
tc£èâr
 (
__fd
, 
__a˘
, c⁄° 
ãrmios
 *
__t
) {

136  
__√w_tc£èâr
(
__fd
, 
__a˘
, 
__t
);

141 
•ìd_t
 
cfgëo•ìd
 (c⁄° 
ãrmios
 *);

142 
cf£to•ìd
 (
ãrmios
 *, 
•ìd_t
);

143 
•ìd_t
 
cfgëi•ìd
 (c⁄° 
ãrmios
 *);

144 
cf£ti•ìd
 (
ãrmios
 *, 
•ìd_t
);

145 
tcgë©å
 (, 
ãrmios
 *);

146 
tc£èâr
 (, , c⁄° 
ãrmios
 *);

150 
tc£ndbªak
 (, );

151 
tcdøö
 ();

152 
tcÊush
 (, );

153 
tcÊow
 (, );

156 #i‡
_XOPEN4UX
 || 
_XOPEN5


157 
pid_t
 
tcgësid
 ();

164 
	#VINTR
 0

	)

165 
	#VQUIT
 1

	)

166 
	#VERASE
 2

	)

167 
	#VKILL
 3

	)

168 
	#VEOF
 4

	)

169 
	#VEOL
 5

	)

170 
	#VEOL2
 6

	)

171 
	#VMIN
 4

	)

172 
	#VTIME
 5

	)

173 
	#VSWTCH
 7

	)

174 
	#VSTART
 8

	)

175 
	#VSTOP
 9

	)

176 
	#VSUSP
 10

	)

177 
	#VDSUSP
 11

	)

178 
	#VREPRINT
 12

	)

179 
	#VDISCARD
 13

	)

180 
	#VWERASE
 14

	)

181 
	#VLNEXT
 15

	)

182 
	#VRPRNT
 
VREPRINT


	)

183 
	#VFLUSHO
 
VDISCARD


	)

189 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


190 
	#VCEOF
 
NCC


	)

191 
	#VCEOL
 (
NCC
 + 1Ë

	)

195 
	#CNUL
 0

	)

196 
	#CDEL
 0377

	)

199 
	#CESC
 '\\'

	)

200 
	#CINTR
 0177

	)

201 
	#CQUIT
 034

	)

202 
	#CERASE
 
	`CTRL
('H'Ë

	)

203 
	#CKILL
 
	`CTRL
('U'Ë

	)

204 
	#CEOL
 0

	)

205 
	#CEOL2
 0

	)

206 
	#CEOF
 
	`CTRL
('d'Ë

	)

207 
	#CEOT
 
CEOF


	)

208 
	#CSTART
 
	`CTRL
('q'Ë

	)

209 
	#CSTOP
 
	`CTRL
('s'Ë

	)

210 
	#CSWTCH
 
	`CTRL
('z'Ë

	)

211 
	#CNSWTCH
 0

	)

212 
	#CSUSP
 
CSWTCH


	)

215 
	#CLNEXT
 
	`CTRL
('v')

	)

216 
	#CWERASE
 
	`CTRL
('w')

	)

217 
	#CFLUSHO
 
	`CTRL
('o')

	)

218 
	#CFLUSH
 
CFLUSHO


	)

219 
	#CRPRNT
 
	`CTRL
('r')

	)

220 
	#CDSUSP
 
	`CTRL
('y'Ë

	)

221 
	#CBRK
 0377

	)

228 
	#IGNBRK
 0000001

	)

229 
	#BRKINT
 0000002

	)

230 
	#IGNPAR
 0000004

	)

231 
	#PARMRK
 0000010

	)

232 
	#INPCK
 0000020

	)

233 
	#ISTRIP
 0000040

	)

234 
	#INLCR
 0000100

	)

235 
	#IGNCR
 0000200

	)

236 
	#ICRNL
 0000400

	)

237 
	#IUCLC
 0001000

	)

238 
	#IXON
 0002000

	)

239 
	#IXANY
 0004000

	)

240 
	#IXOFF
 0010000

	)

241 
	#IMAXBEL
 0020000

	)

242 
	#IBLKMD
 0040000

	)

246 
	#OPOST
 0000001

	)

247 #i‡
_XOPEN4
 || 
_XOPEN5


248 
	#OLCUC
 0000002

	)

249 
	#ONLCR
 0000004

	)

250 
	#OCRNL
 0000010

	)

251 
	#ONOCR
 0000020

	)

252 
	#ONLRET
 0000040

	)

253 
	#OFILL
 0000100

	)

254 
	#OFDEL
 0000200

	)

255 
	#NLDLY
 0000400

	)

256 
	#NL0
 0

	)

257 
	#NL1
 0000400

	)

258 
	#CRDLY
 0003000

	)

259 
	#CR0
 0

	)

260 
	#CR1
 0001000

	)

261 
	#CR2
 0002000

	)

262 
	#CR3
 0003000

	)

263 
	#TABDLY
 0014000

	)

264 
	#TAB0
 0

	)

265 
	#TAB1
 0004000

	)

266 
	#TAB2
 0010000

	)

267 
	#TAB3
 0014000

	)

269 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


270 
	#XTABS
 0014000

	)

272 #i‡
_XOPEN4
 || 
_XOPEN5


273 
	#BSDLY
 0020000

	)

274 
	#BS0
 0

	)

275 
	#BS1
 0020000

	)

276 
	#VTDLY
 0040000

	)

277 
	#VT0
 0

	)

278 
	#VT1
 0040000

	)

279 
	#FFDLY
 0100000

	)

280 
	#FF0
 0

	)

281 
	#FF1
 0100000

	)

283 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


284 
	#PAGEOUT
 0200000

	)

285 
	#WRAP
 0400000

	)

289 
	#CBAUD
 000000017

	)

291 
	#CSIZE
 000000060

	)

292 
	#CS5
 0

	)

293 
	#CS6
 000000020

	)

294 
	#CS7
 000000040

	)

295 
	#CS8
 000000060

	)

296 
	#CSTOPB
 000000100

	)

297 
	#CREAD
 000000200

	)

298 
	#PARENB
 000000400

	)

299 
	#PARODD
 000001000

	)

300 
	#HUPCL
 000002000

	)

301 
	#CLOCAL
 000004000

	)

302 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


303 
	#RCV1EN
 000010000

	)

304 
	#XMT1EN
 000020000

	)

305 
	#LOBLK
 000040000

	)

306 
	#XCLUDE
 000100000

	)

307 
	#CIBAUD
 003600000

	)

308 
	#PAREXT
 004000000

	)

309 
	#CNEW_RTSCTS
 010000000

	)

314 
	#ISIG
 0000001

	)

315 
	#ICANON
 0000002

	)

316 #i‡
_XOPEN4
 || 
_XOPEN5


317 
	#XCASE
 0000004

	)

319 
	#ECHO
 0000010

	)

320 
	#ECHOE
 0000020

	)

321 
	#ECHOK
 0000040

	)

322 
	#ECHONL
 0000100

	)

323 
	#NOFLSH
 0000200

	)

324 
	#IEXTEN
 0000400

	)

325 
	#ITOSTOP
 0100000

	)

326 
	#TOSTOP
 
ITOSTOP


	)

328 #i‡(
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5
Ë|| 
_ABIAPI


329 
	#ECHOCTL
 0001000

	)

330 
	#ECHOPRT
 0002000

	)

331 
	#ECHOKE
 0004000

	)

332 
	#DEFECHO
 0010000

	)

333 
	#FLUSHO
 0020000

	)

334 
	#PENDIN
 0040000

	)

337 
	#TIOC
 ('T'<<8)

	)

339 
	#__NEW_TCGETA
 (
TIOC
|201)

	)

340 
	#__NEW_TCSETA
 (
TIOC
|202)

	)

341 
	#__NEW_TCSETAW
 (
TIOC
|203)

	)

342 
	#__NEW_TCSETAF
 (
TIOC
|204)

	)

343 
	#__OLD_TCGETA
 (
TIOC
|1)

	)

344 
	#__OLD_TCSETA
 (
TIOC
|2)

	)

345 
	#__OLD_TCSETAW
 (
TIOC
|3)

	)

346 
	#__OLD_TCSETAF
 (
TIOC
|4)

	)

348 #i‡!
deföed
(
_OLD_TERMIOS
Ë&& 
_NO_ABIAPI


349 
	#TCGETA
 
__NEW_TCGETA


	)

350 
	#TCSETA
 
__NEW_TCSETA


	)

351 
	#TCSETAW
 
__NEW_TCSETAW


	)

352 
	#TCSETAF
 
__NEW_TCSETAF


	)

354 
	#TCGETA
 
__OLD_TCGETA


	)

355 
	#TCSETA
 
__OLD_TCSETA


	)

356 
	#TCSETAW
 
__OLD_TCSETAW


	)

357 
	#TCSETAF
 
__OLD_TCSETAF


	)

360 
	#TCSBRK
 (
TIOC
|5)

	)

361 
	#TCXONC
 (
TIOC
|6)

	)

362 
	#TCFLSH
 (
TIOC
|7)

	)

366 
	~<sys/io˘l.h
>

370 
	#LDISC0
 0

	)

371 
	#LDISC1
 1

	)

372 
	#NTTYDISC
 
LDISC1


	)

375 
	#TIOCFLUSH
 (
TIOC
|12)

	)

376 
	#TCSETLABEL
 (
TIOC
|31Ë

	)

377 
	#TCDSET
 (
TIOC
|32)

	)

378 
	#TCBLKMD
 (
TIOC
|33)

	)

379 
	#TIOCPKT
 (
TIOC
|112Ë

	)

380 
	#TIOCPKT_DATA
 0x00

	)

381 
	#TIOCPKT_FLUSHREAD
 0x01

	)

382 
	#TIOCPKT_FLUSHWRITE
 0x02

	)

383 
	#TIOCPKT_NOSTOP
 0x10

	)

384 
	#TIOCPKT_DOSTOP
 0x20

	)

385 
	#TIOCPKT_IOCTL
 0x40

	)

386 
	#TIOCNOTTY
 (
TIOC
|113Ë

	)

387 
	#TIOCSTI
 (
TIOC
|114Ë

	)

388 
	#TIOCSPGRP
 
	`_IOW
('t', 118, Ë

	)

389 
	#TIOCGPGRP
 
	`_IOR
('t', 119, Ë

	)

390 
	#TIOCCONS
 
	`_IOW
('t', 120, Ë

	)

391 
	#TIOCGWINSZ
 
	`_IOR
('t', 104, 
wösize
Ë

	)

392 
	#TIOCSWINSZ
 
	`_IOW
('t', 103, 
wösize
Ë

	)

393 
	#TFIOC
 ('F'<<8)

	)

394 
	#oFIONREAD
 (
TFIOC
|127Ë

	)

395 
	#TO_STOP
 
LOBLK


	)

397 #i‚de‡
IOCTYPE


398 
	#IOCTYPE
 0xff00

	)

404 
	#__NEW_TCGETS
 (
TIOC
|213)

	)

405 
	#__NEW_TCSETS
 (
TIOC
|214)

	)

406 
	#__NEW_TCSETSW
 (
TIOC
|215)

	)

407 
	#__NEW_TCSETSF
 (
TIOC
|216)

	)

408 
	#__OLD_TCGETS
 (
TIOC
|13)

	)

409 
	#__OLD_TCSETS
 (
TIOC
|14)

	)

410 
	#__OLD_TCSETSW
 (
TIOC
|15)

	)

411 
	#__OLD_TCSETSF
 (
TIOC
|16)

	)

412 #i‡!
deföed
(
_OLD_TERMIOS
Ë&& 
_NO_ABIAPI


413 
	#TCGETS
 
__NEW_TCGETS


	)

414 
	#TCSETS
 
__NEW_TCSETS


	)

415 
	#TCSETSW
 
__NEW_TCSETSW


	)

416 
	#TCSETSF
 
__NEW_TCSETSF


	)

418 
	#TCGETS
 
__OLD_TCGETS


	)

419 
	#TCSETS
 
__OLD_TCSETS


	)

420 
	#TCSETSW
 
__OLD_TCSETSW


	)

421 
	#TCSETSF
 
__OLD_TCSETSF


	)

425 
	#TCSANOW
 (('T'<<8)|14Ë

	)

426 
	#TCSADRAIN
 (('T'<<8)|15Ë

	)

427 
	#TCSAFLUSH
 (('T'<<8)|16Ë

	)

431 
	#TCIFLUSH
 0

	)

432 
	#TCOFLUSH
 1

	)

433 
	#TCIOFLUSH
 2

	)

435 
	#TCOOFF
 0

	)

436 
	#TCOON
 1

	)

437 
	#TCIOFF
 2

	)

438 
	#TCION
 3

	)

442 #i‡
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5


443 
	#tIOC
 ('t'<<8)

	)

450 #i‚de‡
_SYS_TTOLD_H


452 #i‡
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5


453 
	#TIOCGETD
 (
tIOC
|0)

	)

454 
	#TIOCSETD
 (
tIOC
|1)

	)

455 
	#TIOCHPCL
 (
tIOC
|2)

	)

456 
	#TIOCGETP
 (
tIOC
|8)

	)

457 
	#TIOCSETP
 (
tIOC
|9)

	)

458 
	#TIOCSETN
 (
tIOC
|10)

	)

459 
	#TIOCEXCL
 (
tIOC
|13)

	)

460 
	#TIOCNXCL
 (
tIOC
|14)

	)

461 
	#TIOCSETC
 (
tIOC
|17)

	)

462 
	#TIOCGETC
 (
tIOC
|18)

	)

469 
	#TIOCLBIS
 (
tIOC
|127Ë

	)

470 
	#TIOCLBIC
 (
tIOC
|126Ë

	)

471 
	#TIOCLSET
 (
tIOC
|125Ë

	)

472 
	#TIOCLGET
 (
tIOC
|124Ë

	)

473 
	#TIOCSBRK
 (
tIOC
|123Ë

	)

474 
	#TIOCCBRK
 (
tIOC
|122Ë

	)

475 
	#TIOCSDTR
 (
tIOC
|121Ë

	)

476 
	#TIOCCDTR
 (
tIOC
|120Ë

	)

477 
	#TIOCSLTC
 (
tIOC
|117Ë

	)

478 
	#TIOCGLTC
 (
tIOC
|116Ë

	)

479 
	#TIOCOUTQ
 (
tIOC
|115Ë

	)

480 
	#TIOCSTOP
 (
tIOC
|111Ë

	)

481 
	#TIOCSTART
 (
tIOC
|110Ë

	)

488 #i‡
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5


489 
	#TIOCGSID
 (
tIOC
|22Ë

	)

490 
	#TIOCSSID
 (
tIOC
|24Ë

	)

493 
	#TIOCMSET
 (
tIOC
|26Ë

	)

494 
	#TIOCMBIS
 (
tIOC
|27Ë

	)

495 
	#TIOCMBIC
 (
tIOC
|28Ë

	)

496 
	#TIOCMGET
 (
tIOC
|29Ë

	)

497 
	#TIOCM_LE
 0001

	)

498 
	#TIOCM_DTR
 0002

	)

499 
	#TIOCM_RTS
 0004

	)

500 
	#TIOCM_ST
 0010

	)

501 
	#TIOCM_SR
 0020

	)

502 
	#TIOCM_CTS
 0040

	)

503 
	#TIOCM_CAR
 0100

	)

504 
	#TIOCM_CD
 
TIOCM_CAR


	)

505 
	#TIOCM_RNG
 0200

	)

506 
	#TIOCM_RI
 
TIOCM_RNG


	)

507 
	#TIOCM_DSR
 0400

	)

511 
	#TIOCREMOTE
 (
tIOC
|30Ë

	)

512 #ifde‡
__nŸdef__


514 
	#TIOCSIGNAL
 (
tIOC
|31Ë

	)

520 
	#ISPTM
 (('P'<<8)|1Ë

	)

521 
	#UNLKPT
 (('P'<<8)|2Ë

	)

523 
	#SVR4SOPEN
 (('P'<<8)|100Ë

	)

527 
	#LDIOC
 ('D'<<8)

	)

529 
	#LDOPEN
 (
LDIOC
|0)

	)

530 
	#LDCLOSE
 (
LDIOC
|1)

	)

531 
	#LDCHG
 (
LDIOC
|2)

	)

532 
	#LDGETT
 (
LDIOC
|8)

	)

533 
	#LDSETT
 (
LDIOC
|9)

	)

537 
	#LDSMAP
 (
LDIOC
|10)

	)

538 
	#LDGMAP
 (
LDIOC
|11)

	)

539 
	#LDNMAP
 (
LDIOC
|12)

	)

545 
	#DIOC
 ('d'<<8)

	)

546 
	#DIOCGETP
 (
DIOC
|8Ë

	)

547 
	#DIOCSETP
 (
DIOC
|9Ë

	)

553 
	#FIORDCHK
 (('f'<<8)|3Ë

	)

556 #i‚de‡
_SYS_TTOLD_H


557 #i‚de‡
_SYS_PTEM_H


559 #i‡
_NO_POSIX
 && 
_NO_XOPEN4
 && 
_NO_XOPEN5


561 
	swösize
 {

562 
	gws_row
;

563 
	gws_cﬁ
;

564 
	gws_xpixñ
;

565 
	gws_ypixñ
;

572 #ifde‡
__˝lu•lus


	@/usr/include/sys/ucontext.h

24 #i‚de‡
_SYS__UCONTEXT_H


25 
	#_SYS__UCONTEXT_H


	)

28 
	~<°™d¨ds.h
>

29 
	~<sgidefs.h
>

31 #i‡
_SGIAPI
 && !
deföed
(
__SGI_NOUCONTEXT_COMPAT
)

32 
	#Âªg£t
 
__Âªg£t


	)

33 
	#Â_r
 
__Â_r


	)

34 
	#Â_dªgs
 
__Â_dªgs


	)

35 
	#Â_‰egs
 
__Â_‰egs


	)

36 
	#Â_ªgs
 
__Â_ªgs


	)

37 
	#Â_c§
 
__Â_c§


	)

38 
	#Â_∑d
 
__Â_∑d


	)

39 
	#gªgs
 
__gªgs


	)

40 
	#Âªgs
 
__Âªgs


	)

41 
	#uc⁄ãxt
 
__uc⁄ãxt


	)

42 
	#sigÆt°ack
 
_sigÆt°ack


	)

45 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

46 
	~<sys/ty≥s.h
>

48 #i‡!
deföed
(
_SIGSET_T
)

49 
	#_SIGSET_T


	)

51 
__uöt32_t
 
	m__sigbôs
[4];

52 } 
	tsig£t_t
;

55 #i‡(
_MIPS_SZLONG
 == 32)

56 
	s_sigÆt°ack
 {

57 *
	mss_•
;

58 
size_t
 
	mss_size
;

59 
	mss_Êags
;

60 } 
	t°ack_t
;

62 #i‡(
_MIPS_SZLONG
 == 64)

63 
	s_sigÆt°ack
 {

64 *
	mss_•
;

65 
__uöt32_t
 
	mss_size
;

66 
	mss_Êags
;

67 } 
	t°ack_t
;

73 #i‡(
_MIPS_ISA
 =
_MIPS_ISA_MIPS1
 || _MIPS_ISA =
_MIPS_ISA_MIPS2
 ||\

74 
	g_MIPS_FPSET
 =16Ë&& !
	$deföed
(
_EXTENDED_CONTEXT
)

76 
	tgªg_t
;

78 #i‡
_ABIAPI


79 
	#NGREG
 36

	)

80 
gªg_t
 
	tgªg£t_t
[
NGREG
];

82 
gªg_t
 
	tgªg£t_t
[36];

85 
	s__Âªg£t
 {

87 
__Â_dªgs
[16];

88 
__Â_‰egs
[32];

89 
__Â_ªgs
[32];

90 } 
__Â_r
;

91 
__Â_c§
;

92 
__Â_∑d
;

93 } 
	tÂªg£t_t
;

96 
gªg£t_t
 
__gªgs
;

97 
Âªg£t_t
 
__Âªgs
;

98 } 
	tmc⁄ãxt_t
;

100 
	s__uc⁄ãxt
 {

101 
uc_Êags
;

102 
__uc⁄ãxt
 *
uc_lök
;

103 
sig£t_t
 
uc_sigmask
;

104 
°ack_t
 
uc_°ack
;

105 
mc⁄ãxt_t
 
uc_mc⁄ãxt
;

106 #i‡
_NO_ABIAPI


107 
uc_fûÀr
[47];

109 
uc_åiggîßve
;

111 
uc_fûÀr
[48];

113 } 
	tuc⁄ãxt_t
;

123 #i‡((
_MIPS_ISA
 =
_MIPS_ISA_MIPS3
 || _MIPS_ISA =
_MIPS_ISA_MIPS4
) &&\

124 (
_MIPS_FPSET
 =32)Ë|| 
	$deföed
(
_EXTENDED_CONTEXT
)

126 
machªg_t
 
	tgªg_t
;

128 #i‡
_SGIAPI


130 
	#NGREG
 37

	)

131 
gªg_t
 
	tgªg£t_t
[
NGREG
];

133 
gªg_t
 
	tgªg£t_t
[37];

136 
	s__Âªg£t
 {

138 
__Â_dªgs
[32];

139 #ifdef 
_MIPSEB


141 
__uöt32_t
 
_Â_fûl
;

142 
_Â_‰egs
;

143 } 
__Â_‰egs
[32];

146 
_Â_‰egs
;

147 
__uöt32_t
 
_Â_fûl
;

148 } 
__Â_‰egs
[32];

150 
machªg_t
 
__Â_ªgs
[32];

151 } 
__Â_r
;

152 
__uöt32_t
 
__Â_c§
;

153 
__uöt32_t
 
__Â_∑d
;

154 } 
	tÂªg£t_t
;

157 
gªg£t_t
 
__gªgs
;

158 
Âªg£t_t
 
__Âªgs
;

159 } 
	tmc⁄ãxt_t
;

161 
	s__uc⁄ãxt
 {

162 
uc_Êags
;

163 
__uc⁄ãxt
 *
uc_lök
;

164 
sig£t_t
 
uc_sigmask
;

165 
°ack_t
 
uc_°ack
;

166 
mc⁄ãxt_t
 
uc_mc⁄ãxt
;

167 
uc_fûÀr
[49];

168 } 
	tuc⁄ãxt_t
;

172 #i‡
_SGIAPI


173 
	#GETCONTEXT
 0

	)

174 
	#SETCONTEXT
 1

	)

179 #i‡
_NO_XOPEN4
 && 
_NO_XOPEN5


187 
	#UC_SIGMASK
 001

	)

188 
	#UC_STACK
 002

	)

189 
	#UC_CPU
 004

	)

190 
	#UC_MAU
 010

	)

192 
	#UC_MCONTEXT
 (
UC_CPU
|
UC_MAU
)

	)

198 
	#UC_ALL
 (
UC_SIGMASK
|
UC_STACK
|
UC_MCONTEXT
)

	)

201 #i‡
_SGIAPI
 || 
_ABIAPI


202 
	#CTX_R0
 0

	)

203 
	#CTX_AT
 1

	)

204 
	#CTX_V0
 2

	)

205 
	#CTX_V1
 3

	)

206 
	#CTX_A0
 4

	)

207 
	#CTX_A1
 5

	)

208 
	#CTX_A2
 6

	)

209 
	#CTX_A3
 7

	)

210 #i‡(
_MIPS_SIM
 =
_ABIO32
)

211 
	#CTX_T0
 8

	)

212 
	#CTX_T1
 9

	)

213 
	#CTX_T2
 10

	)

214 
	#CTX_T3
 11

	)

215 
	#CTX_T4
 12

	)

216 
	#CTX_T5
 13

	)

217 
	#CTX_T6
 14

	)

218 
	#CTX_T7
 15

	)

219 #ñi‡(
_MIPS_SIM
 =
_ABI64
 || _MIPS_SIM =
_ABIN32
)

220 
	#CTX_A4
 8

	)

221 
	#CTX_A5
 9

	)

222 
	#CTX_A6
 10

	)

223 
	#CTX_A7
 11

	)

224 
	#CTX_T0
 12

	)

225 
	#CTX_T1
 13

	)

226 
	#CTX_T2
 14

	)

227 
	#CTX_T3
 15

	)

229 
	#CTX_S0
 16

	)

230 
	#CTX_S1
 17

	)

231 
	#CTX_S2
 18

	)

232 
	#CTX_S3
 19

	)

233 
	#CTX_S4
 20

	)

234 
	#CTX_S5
 21

	)

235 
	#CTX_S6
 22

	)

236 
	#CTX_S7
 23

	)

237 
	#CTX_T8
 24

	)

238 
	#CTX_T9
 25

	)

239 
	#CTX_K0
 26

	)

240 
	#CTX_K1
 27

	)

241 
	#CTX_GP
 28

	)

242 
	#CTX_SP
 29

	)

243 
	#CTX_S8
 30

	)

244 
	#CTX_RA
 31

	)

245 
	#CTX_MDLO
 32

	)

246 
	#CTX_MDHI
 33

	)

247 
	#CTX_CAUSE
 34

	)

248 
	#CTX_EPC
 35

	)

249 
	#CTX_SR
 36

	)

252 
	#CXT_R0
 
CTX_R0


	)

253 
	#CXT_AT
 
CTX_AT


	)

254 
	#CXT_V0
 
CTX_V0


	)

255 
	#CXT_V1
 
CTX_V1


	)

256 
	#CXT_A0
 
CTX_A0


	)

257 
	#CXT_A1
 
CTX_A1


	)

258 
	#CXT_A2
 
CTX_A2


	)

259 
	#CXT_A3
 
CTX_A3


	)

260 
	#CXT_T0
 
CTX_T0


	)

261 
	#CXT_T1
 
CTX_T1


	)

262 
	#CXT_T2
 
CTX_T2


	)

263 
	#CXT_T3
 
CTX_T3


	)

264 
	#CXT_T4
 
CTX_T4


	)

265 
	#CXT_T5
 
CTX_T5


	)

266 
	#CXT_T6
 
CTX_T6


	)

267 
	#CXT_T7
 
CTX_T7


	)

268 
	#CXT_S0
 
CTX_S0


	)

269 
	#CXT_S1
 
CTX_S1


	)

270 
	#CXT_S2
 
CTX_S2


	)

271 
	#CXT_S3
 
CTX_S3


	)

272 
	#CXT_S4
 
CTX_S4


	)

273 
	#CXT_S5
 
CTX_S5


	)

274 
	#CXT_S6
 
CTX_S6


	)

275 
	#CXT_S7
 
CTX_S7


	)

276 
	#CXT_T8
 
CTX_T8


	)

277 
	#CXT_T9
 
CTX_T9


	)

278 
	#CXT_K0
 
CTX_K0


	)

279 
	#CXT_K1
 
CTX_K1


	)

280 
	#CXT_GP
 
CTX_GP


	)

281 
	#CXT_SP
 
CTX_SP


	)

282 
	#CXT_S8
 
CTX_S8


	)

283 
	#CXT_RA
 
CTX_RA


	)

284 
	#CXT_MDLO
 
CTX_MDLO


	)

285 
	#CXT_MDHI
 
CTX_MDHI


	)

286 
	#CXT_CAUSE
 
CTX_CAUSE


	)

287 
	#CXT_EPC
 
CTX_EPC


	)

288 
	#CXT_SR
 
CTX_SR


	)

290 #i‡((
_MIPS_SIM
 =
_ABI64
Ë|| (_MIPS_SIM =
_ABIN32
))

291 
	#CTX_FV0
 0

	)

292 
	#CTX_FV1
 2

	)

293 
	#CTX_FA0
 12

	)

294 
	#CTX_FA1
 13

	)

295 
	#CTX_FA2
 14

	)

296 
	#CTX_FA3
 15

	)

297 
	#CTX_FA4
 16

	)

298 
	#CTX_FA5
 17

	)

299 
	#CTX_FA6
 18

	)

300 
	#CTX_FA7
 19

	)

301 
	#CTX_FT0
 4

	)

302 
	#CTX_FT1
 5

	)

303 
	#CTX_FT2
 6

	)

304 
	#CTX_FT3
 7

	)

305 
	#CTX_FT4
 8

	)

306 
	#CTX_FT5
 9

	)

307 
	#CTX_FT6
 10

	)

308 
	#CTX_FT7
 11

	)

309 #i‡(
_MIPS_SIM
 =
_ABI64
)

310 
	#CTX_FT8
 20

	)

311 
	#CTX_FT9
 21

	)

312 
	#CTX_FT10
 22

	)

313 
	#CTX_FT11
 23

	)

314 
	#CTX_FT12
 1

	)

315 
	#CTX_FT13
 3

	)

316 
	#CTX_FS0
 24

	)

317 
	#CTX_FS1
 25

	)

318 
	#CTX_FS2
 26

	)

319 
	#CTX_FS3
 27

	)

320 
	#CTX_FS4
 28

	)

321 
	#CTX_FS5
 29

	)

322 
	#CTX_FS6
 30

	)

323 
	#CTX_FS7
 31

	)

325 #i‡(
_MIPS_SIM
 =
_ABIN32
)

326 
	#CTX_FT8
 21

	)

327 
	#CTX_FT9
 23

	)

328 
	#CTX_FT10
 25

	)

329 
	#CTX_FT11
 27

	)

330 
	#CTX_FT12
 29

	)

331 
	#CTX_FT13
 31

	)

332 
	#CTX_FT14
 1

	)

333 
	#CTX_FT15
 3

	)

334 
	#CTX_FS0
 20

	)

335 
	#CTX_FS1
 22

	)

336 
	#CTX_FS2
 24

	)

337 
	#CTX_FS3
 26

	)

338 
	#CTX_FS4
 28

	)

339 
	#CTX_FS5
 30

	)

	@/usr/include/sys/utime.h

10 #i‚de‡
_SYS_UTIME_H


11 
	#_SYS_UTIME_H


	)

15 
	~<sys/ty≥s.h
>

17 
	sutimbuf
 {

18 
time_t
 
	ma˘ime
;

19 
time_t
 
	mmodtime
;

	@/usr/include/sys/xlate.h

28 #i‚de‡
_SYS_XLATE_H


29 
	#_SYS_XLATE_H


	)

31 #ifde‡
_KERNEL


33 #ifde‡
__˝lu•lus


37 
	sxœã_öfo_s
 {

38 
öbufsize
;

39 
c›ysize
;

40 *
smÆlbuf
;

41 *
c›ybuf
;

43 
abi
;

45 } 
	txœã_öfo_t
;

53 
	exœã_mode
 { 
SETUP_BUFFER
, 
DO_XLATE
 };

55 (*
xœã_out_func_t
)(*, , 
	txœã_öfo_t
 *);

56 (*
xœã_ö_func_t
)(
	txœã_mode
, *, , 
	txœã_öfo_t
 *);

58 
xœã_c›yout
(*, *, ,

59 
xœã_out_func_t
, , , );

60 
c›yö_xœã
(*, *, ,

61 
xœã_ö_func_t
, , , );

63 #i‡(
_MIPS_SIM
 =
_ABI64
)

64 
	#XLATE_COPYOUT
(
‰om
,
to
,
size
,
func
,
abi
,
cou¡
) \

65 
	`xœã_c›yout
(
‰om
,
to
,
size
,
func
,
abi
,
ABI_IRIX5_64
,
cou¡
)

	)

67 
	#COPYIN_XLATE
(
‰om
,
to
,
size
,
func
,
abi
,
cou¡
) \

68 
	`c›yö_xœã
(
‰om
,
to
,
size
,
func
,
abi
,
ABI_IRIX5_64
,
cou¡
)

	)

70 
	#XLATE_FROM_IRIX5
(
_xœã_func
, 
_u£r_°ru˘
, 
_«tive_°ru˘
) \

71 
_u£r_°ru˘
 = 
	`_xœã_func
(_u£r_°ru˘, 
_«tive_°ru˘
)

	)

73 
	#XLATE_TO_IRIX5
(
_xœã_func
, 
_u£r_°ru˘
, 
_«tive_°ru˘
) \

74 ()
	`_xœã_func
(
_«tive_°ru˘
, 
_u£r_°ru˘
)

	)

77 
	#XLATE_COPYOUT
(
‰om
,
to
,
size
,
f
,
a
,
c
) \

78 (
	`c›yout
((
‰om
), (
to
), (
size
)Ë? 
EFAULT
 : 0)

	)

79 
	#COPYIN_XLATE
(
‰om
,
to
,
size
,
f
,
a
,
c
) \

80 (
	`c›yö
((
‰om
), (
to
), (
size
)Ë? 
EFAULT
 : 0)

	)

81 
	#XLATE_FROM_IRIX5
(
_xœã_func
, 
_u≠
, 
_«tive_u≠
)

	)

82 
	#XLATE_TO_IRIX5
(
_xœã_func
, 
_u£r_°ru˘
, 
_«tive_°ru˘
)

	)

87 
	#COPYIN_XLATE_PROLOGUE
(
SOURCE_STRUCT
, 
TARGET_STRUCT
) \

88 
SOURCE_STRUCT
 *
sour˚
; \

89 
TARGET_STRUCT
 *
èrgë
; \

91 
	`ASSERT
(
öfo
->
smÆlbuf
 !
NULL
); \

92 
	`ASSERT
(
mode
 =
SETUP_BUFFER
 || modê=
DO_XLATE
); \

94 i‡(
mode
 =
SETUP_BUFFER
) \

95 { 
	`ASSERT
(
öfo
->
c›ybuf
 =
NULL
); \

96 
	`ASSERT
(
öfo
->
c›ysize
 == 0); \

97 i‡((
SOURCE_STRUCT
Ë<
öfo
->
öbufsize
) \

98 
öfo
->
c›ybuf
 = info->
smÆlbuf
; \

100 
öfo
->
c›ybuf
 = 
	`kîn_mÆloc
((
SOURCE_STRUCT
)); \

101 
öfo
->
c›ysize
 = (
SOURCE_STRUCT
); \

105 
	`ASSERT
(
öfo
->
c›ysize
 =(
SOURCE_STRUCT
)); \

106 
	`ASSERT
(
öfo
->
c›ybuf
 !
NULL
); \

108 
èrgë
 = 
to
; \

109 
sour˚
 = 
öfo
->
c›ybuf
;

	)

112 
	#COPYIN_XLATE_VARYING_PROLOGUE
(
SOURCE_STRUCT
, 
TARGET_STRUCT
, 
SRC_SIZE
) \

113 
SOURCE_STRUCT
 *
sour˚
; \

114 
TARGET_STRUCT
 *
èrgë
; \

115 
size_t
 
size
; \

117 
	`ASSERT
(
öfo
->
smÆlbuf
 !
NULL
); \

118 
	`ASSERT
(
mode
 =
SETUP_BUFFER
 || modê=
DO_XLATE
); \

120 
size
 = 
SRC_SIZE
; \

121 i‡(
mode
 =
SETUP_BUFFER
) \

122 { 
	`ASSERT
(
öfo
->
c›ybuf
 =
NULL
); \

123 
	`ASSERT
(
öfo
->
c›ysize
 == 0); \

124 i‡(
size
 <
öfo
->
öbufsize
) \

125 
öfo
->
c›ybuf
 = info->
smÆlbuf
; \

127 
öfo
->
c›ybuf
 = 
	`kîn_mÆloc
(
size
); \

128 
öfo
->
c›ysize
 = 
size
; \

132 
	`ASSERT
(
öfo
->
c›ysize
 =
size
); \

133 
	`ASSERT
(
öfo
->
c›ybuf
 !
NULL
); \

135 
èrgë
 = 
to
; \

136 
sour˚
 = 
öfo
->
c›ybuf
;

	)

139 
	#XLATE_COPYOUT_PROLOGUE
(
SOURCE_STRUCT
, 
TARGET_STRUCT
) \

140 
SOURCE_STRUCT
 *
sour˚
; \

141 
TARGET_STRUCT
 *
èrgë
; \

143 
	`ASSERT
(
öfo
->
smÆlbuf
 !
NULL
); \

144 i‡–((
TARGET_STRUCT
)Ë<
öfo
->
öbufsize
) \

145 
öfo
->
c›ybuf
 = info->
smÆlbuf
; \

147 
öfo
->
c›ybuf
 = 
	`kîn_mÆloc
((
TARGET_STRUCT
)); \

149 
öfo
->
c›ysize
 = (
TARGET_STRUCT
); \

150 
èrgë
 = (
TARGET_STRUCT
 *)
öfo
->
c›ybuf
; \

151 
sour˚
 = (
SOURCE_STRUCT
 *)
‰om
;

	)

154 
	#XLATE_COPYOUT_VARYING_PROLOGUE
(
SOURCE_STRUCT
, 
TARGET_STRUCT
, 
SRC_SIZE
) \

155 
SOURCE_STRUCT
 *
sour˚
; \

156 
TARGET_STRUCT
 *
èrgë
; \

157 
size_t
 
size
; \

159 
size
 = 
SRC_SIZE
; \

160 
	`ASSERT
(
öfo
->
smÆlbuf
 !
NULL
); \

161 i‡(
size
 <
öfo
->
öbufsize
) \

162 
öfo
->
c›ybuf
 = info->
smÆlbuf
; \

164 
öfo
->
c›ybuf
 = 
	`kîn_mÆloc
(
size
); \

166 
öfo
->
c›ysize
 = 
size
; \

167 
èrgë
 = (
TARGET_STRUCT
 *)
öfo
->
c›ybuf
; \

168 
sour˚
 = (
SOURCE_STRUCT
 *)
‰om
;

	)

170 
	#XLATE_COPYOUT_ERROR
(
î∫o
) \

172 i‡(
öfo
->
c›ysize
 <öfo->
öbufsize
) \

173 
	`ASSERT
(
öfo
->
c›ybuf
 =öfo->
smÆlbuf
);\

175 
	`kîn_‰ì
(
öfo
->
c›ybuf
); \

176 
öfo
->
c›ybuf
 = 
NULL
; \

177  (
î∫o
); \

178 }

	)

181 #ifde‡
__˝lu•lus


	@/usr/include/sys/xtalk/xbow_info.h

12 #i‚de‡
__XTALK_XBOW_INFO_H__


13 
	#__XTALK_XBOW_INFO_H__


	)

15 
	#XBOW_PERF_MODES
 0x03

	)

16 
	#XBOW_PERF_COUNTERS
 0x02

	)

18 
	#XBOW_MONITOR_NONE
 0x00

	)

19 
	#XBOW_MONITOR_SRC_LINK
 0x01

	)

20 
	#XBOW_MONITOR_DEST_LINK
 0x02

	)

21 
	#XBOW_MONITOR_INP_PKT
 0x03

	)

22 
	#XBOW_MONITOR_MULTIPLEX
 0x04

	)

24 
	#XBOW_LINK_MULTIPLEX
 0x20

	)

26 
	#XBOW_PERF_TIMEOUT
 4

	)

27 
	#XBOW_STATS_TIMEOUT
 
HZ


	)

29 
	sxbow_≥rf_lök
 {

30 
__uöt64_t
 
	mxÕ_cumuœtive
[
XBOW_PERF_MODES
];

31 
	mxÕ_lök_Æive
;

32 } 
	txbow_≥rf_lök_t
;

35 
	sxbow_lök_°©us
 {

36 
__uöt64_t
 
	mrx_îr_cou¡
;

37 
__uöt64_t
 
	mtx_ªåy_cou¡
;

38 } 
	txbow_lök_°©us_t
;

42 
	sxbow_≥rf
 {

43 
__uöt32_t
 
	mxp_cuºít
;

44 
	mxp_lök
;

45 
	mxp_mode
;

46 
	mxp_cuæök
;

47 
	mxp_curmode
;

48 vﬁ©ûê
__uöt32_t
 *
	mxp_≥rf_ªg
;

49 } 
	txbow_≥rf_t
;

51 #i‡
_KERNEL


52 
xbow_upd©e_≥rf_cou¡îs
(
vîãx_hdl_t
);

53 
xbow_≥rf_lök_t
 *
xbow_gë_≥rf_cou¡îs
(
vîãx_hdl_t
);

54 
xbow_íabÀ_≥rf_cou¡î
(
vîãx_hdl_t
, , , );

58 
	#XBOWIOC_PERF_ENABLE
 1

	)

59 
	#XBOWIOC_PERF_DISABLE
 2

	)

60 
	#XBOWIOC_PERF_GET
 3

	)

61 
	#XBOWIOC_LLP_ERROR_ENABLE
 4

	)

62 
	#XBOWIOC_LLP_ERROR_DISABLE
 5

	)

63 
	#XBOWIOC_LLP_ERROR_GET
 6

	)

66 
	sxbow_≥rÁrg_t
 {

67 
	mlök
;

68 
	mmode
;

69 
	mcou¡î
;

	@/usr/include/sys/xtalk/xswitch.h

12 #i‚de‡
__XTALK_XSWITCH_H__


13 
	#__XTALK_XSWITCH_H__


	)

23 #i‡
LANGUAGE_C


25 
xswôch_öfo_s
 *
	txswôch_öfo_t
;

28 
	txswôch_ª£t_lök_f
(
	tvîãx_hdl_t
 
	txc⁄n
);

30 
	sxswôch_¥ovidî_s
 {

31 
xswôch_ª£t_lök_f
 *
	mª£t_lök
;

32 } 
	txswôch_¥ovidî_t
;

34 
xswôch_¥ovidî_ªgi°î
(
vîãx_hdl_t
 
sw_vhdl
, 
xswôch_¥ovidî_t
 * 
xsw_‚s
);

36 
xswôch_ª£t_lök_f
 
	gxswôch_ª£t_lök
;

38 
xswôch_öfo_t
 
xswôch_öfo_√w
(
vîãx_hdl_t
 
vhdl
);

40 
xswôch_öfo_lök_is_ok
(
xswôch_öfo_t
 
xswôch_öfo
,

41 
xwidgënum_t
 
p‹t
);

42 
xswôch_öfo_vhdl_£t
(
xswôch_öfo_t
 
xswôch_öfo
,

43 
xwidgënum_t
 
p‹t
,

44 
vîãx_hdl_t
 
xwidgë
);

45 
xswôch_öfo_ma°î_assignmít_£t
(
xswôch_öfo_t
 
xswôch_öfo
,

46 
xwidgënum_t
 
p‹t
,

47 
vîãx_hdl_t
 
ma°î_vhdl
);

49 
xswôch_öfo_t
 
xswôch_öfo_gë
(
vîãx_hdl_t
 
vhdl
);

51 
xswôch_öfo_lök_ok
(
xswôch_öfo_t
 
xswôch_öfo
,

52 
xwidgënum_t
 
p‹t
);

53 
vîãx_hdl_t
 
xswôch_öfo_vhdl_gë
(
xswôch_öfo_t
 
xswôch_öfo
,

54 
xwidgënum_t
 
p‹t
);

55 
vîãx_hdl_t
 
xswôch_öfo_ma°î_assignmít_gë
(
xswôch_öfo_t
 
xswôch_öfo
,

56 
xwidgënum_t
 
p‹t
);

58 
xswôch_id_gë
(
vîãx_hdl_t
 
vhdl
);

59 
xswôch_id_£t
(
vîãx_hdl_t
 
vhdl
,
xbow_num
);

	@/usr/include/sys/xtalk/xtalk.h

12 #i‚de‡
__XTALK_XTALK_H__


13 
	#__XTALK_XTALK_H__


	)

20 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

24 
	txwidgënum_t
;

26 
	#XWIDGET_NONE
 -1

	)

28 
	txwidgë_∑π_num_t
;

30 
	#XWIDGET_PART_NUM_NONE
 -1

	)

32 
	txwidgë_ªv_num_t
;

34 
	#XWIDGET_REV_NUM_NONE
 -1

	)

36 
	txwidgë_mfg_num_t
;

38 
	#XWIDGET_MFG_NUM_NONE
 -1

	)

40 
xèlk_piom≠_s
 *
	txèlk_piom≠_t
;

45 
	#XIO_NOWHERE
 (0xFFFFFFFFFFFFFFFFuŒ)

	)

46 
	#XIO_ADDR_BITS
 (0x0000FFFFFFFFFFFFuŒ)

	)

47 
	#XIO_PORT_BITS
 (0xF000000000000000uŒ)

	)

48 
	#XIO_PORT_SHIFT
 (60)

	)

50 
	#XIO_PACKED
(
x
Ë(((x)&
XIO_PORT_BITS
Ë!0)

	)

51 
	#XIO_ADDR
(
x
Ë((x)&
XIO_ADDR_BITS
)

	)

52 
	#XIO_PORT
(
x
Ë((
xwidgënum_t
)(((x)&
XIO_PORT_BITS
Ë>> 
XIO_PORT_SHIFT
))

	)

53 
	#XIO_PACK
(
p
,
o
Ë((((
uöt64_t
)’))<<
XIO_PORT_SHIFT
Ë| ((o)&
XIO_ADDR_BITS
))

	)

59 #i‡
_KERNEL
 || 
_STANDALONE


61 
	~<sys/Æíli°.h
>

62 
	~<sys/i€º‹.h
>

63 
	~<sys/iobus.h
>

64 
	~<sys/dmam≠.h
>

66 
	gxwidgë_hwid_s
;

85 
	#XTALK_FIXED
 
DMAMAP_FIXED


	)

86 
	#XTALK_NOSLEEP
 
DMAMAP_NOSLEEP


	)

87 
	#XTALK_INPLACE
 
DMAMAP_INPLACE


	)

90 
xèlk_piom≠_t


91 
	txèlk_piom≠_Æloc_f
 (
	tvîãx_hdl_t
 
	tdev
,

92 
	tdevi˚_desc_t
 
	tdev_desc
,

93 
	ti›addr_t
 
	txèlk_addr
,

94 
	tsize_t
 
	tbyã_cou¡
,

95 
	tsize_t
 
	tbyã_cou¡_max
,

96 
	tÊags
);

98 
	txèlk_piom≠_‰ì_f
 (
	txèlk_piom≠_t
 
	txèlk_piom≠
);

100 
ˇddr_t


101 
	txèlk_piom≠_addr_f
 (
	txèlk_piom≠_t
 
	txèlk_piom≠
,

102 
	ti›addr_t
 
	txèlk_addr
,

103 
	tsize_t
 
	tbyã_cou¡
);

106 
	txèlk_piom≠_d⁄e_f
 (
	txèlk_piom≠_t
 
	txèlk_piom≠
);

108 
ˇddr_t


109 
	txèlk_piŸøns_addr_f
 (
	tvîãx_hdl_t
 
	tdev
,

110 
	tdevi˚_desc_t
 
	tdev_desc
,

111 
	ti›addr_t
 
	txèlk_addr
,

112 
	tsize_t
 
	tbyã_cou¡
,

113 
	tÊags
);

115 
ˇddr_t


116 
xèlk_pio_addr
 (
vîãx_hdl_t
 
dev
,

117 
devi˚_desc_t
 
dev_desc
,

118 
i›addr_t
 
xèlk_addr
,

119 
size_t
 
byã_cou¡
,

120 
xèlk_piom≠_t
 *
xèlk_piom≠p
,

121 
Êags
);

125 
xèlk_dmam≠_s
 *
	txèlk_dmam≠_t
;

127 
xèlk_dmam≠_t


128 
	txèlk_dmam≠_Æloc_f
 (
	tvîãx_hdl_t
 
	tdev
,

129 
	tdevi˚_desc_t
 
	tdev_desc
,

130 
	tsize_t
 
	tbyã_cou¡_max
,

131 
	tÊags
);

134 
	txèlk_dmam≠_‰ì_f
 (
	txèlk_dmam≠_t
 
	tdmam≠
);

136 
i›addr_t


137 
	txèlk_dmam≠_addr_f
 (
	txèlk_dmam≠_t
 
	tdmam≠
,

138 
	t∑ddr_t
 
	t∑ddr
,

139 
	tsize_t
 
	tbyã_cou¡
);

141 
Æíli°_t


142 
	txèlk_dmam≠_li°_f
 (
	txèlk_dmam≠_t
 
	tdmam≠
,

143 
	tÆíli°_t
 
	tÆíli°
,

144 
	tÊags
);

147 
	txèlk_dmam≠_d⁄e_f
 (
	txèlk_dmam≠_t
 
	tdmam≠
);

149 
i›addr_t


150 
	txèlk_dm©øns_addr_f
 (
	tvîãx_hdl_t
 
	tdev
,

151 
	tdevi˚_desc_t
 
	tdev_desc
,

152 
	t∑ddr_t
 
	t∑ddr
,

153 
	tsize_t
 
	tbyã_cou¡
,

154 
	tÊags
);

156 
Æíli°_t


157 
	txèlk_dm©øns_li°_f
 (
	tvîãx_hdl_t
 
	tdev
,

158 
	tdevi˚_desc_t
 
	tdev_desc
,

159 
	tÆíli°_t
 
	t∑À∆i°
,

160 
	tÊags
);

163 
	txèlk_dmam≠_døö_f
 (
	txèlk_dmam≠_t
 
	tm≠
);

166 
	txèlk_dmØddr_døö_f
 (
	tvîãx_hdl_t
 
	tvhdl
,

167 
	t∑ddr_t
 
	taddr
,

168 
	tsize_t
 
	tbyãs
);

171 
	txèlk_dmÆi°_døö_f
 (
	tvîãx_hdl_t
 
	tvhdl
,

172 
	tÆíli°_t
 
	tli°
);

184 
xèlk_öå_s
 *
	txèlk_öå_t
;

199 
	txèlk_öå_£tfunc_f
 (
	txèlk_öå_t
 
	töå_hdl
);

201 
xèlk_öå_t


202 
	txèlk_öå_Æloc_f
 (
	tvîãx_hdl_t
 
	tdev
,

203 
	tdevi˚_desc_t
 
	tdev_desc
,

204 
	tvîãx_hdl_t
 
	tow√r_dev
);

207 
	txèlk_öå_‰ì_f
 (
	txèlk_öå_t
 
	töå_hdl
);

210 
	txèlk_öå_c⁄√˘_f
 (
	txèlk_öå_t
 
	töå_hdl
,

211 
	töå_func_t
 
	töå_func
,

212 *
	töå_¨g
,

213 
	txèlk_öå_£tfunc_f
 *
	t£tfunc
,

214 *
	t£tfunc_¨g
,

218 *
	tthªad
);

221 
	txèlk_öå_disc⁄√˘_f
 (
	txèlk_öå_t
 
	töå_hdl
);

223 
vîãx_hdl_t


224 
	txèlk_öå_˝u_gë_f
 (
	txèlk_öå_t
 
	töå_hdl
);

226 
˝uid_t


227 
	txèlk_öå_˝uid_gë_f
 (
	txèlk_öå_t
 
	töå_hdl
);

232 
	txèlk_¥ovidî_°¨tup_f
 (
	tvîãx_hdl_t
 
	txèlk_¥ovidî
);

235 
	txèlk_¥ovidî_shutdown_f
 (
	tvîãx_hdl_t
 
	txèlk_¥ovidî
);

238 
	txèlk_widgëdev_íabÀ_f
 (
	tvîãx_hdl_t
, );

241 
	txèlk_widgëdev_shutdown_f
 (
	tvîãx_hdl_t
, );

244 
	txèlk_dma_íabÀd_f
 (
	tvîãx_hdl_t
);

249 
	txèlk_îr‹_devíabÀ_f
 (
	tvîãx_hdl_t
 
	txc⁄n_vhdl
,

250 
	tdevnum
,

251 
	tîr‹_code
);

254 
ˇddr_t


255 
	txèlk_óæy_piŸøns_addr_f
 (
	txwidgë_∑π_num_t
 
	t∑π_num
,

256 
	txwidgë_mfg_num_t
 
	tmfg_num
,

257 
	twhich
,

258 
	ti›addr_t
 
	txèlk_addr
,

259 
	tsize_t
 
	tbyã_cou¡
,

260 
	tÊags
);

265 
	sxèlk_¥ovidî_s
 {

267 
xèlk_piom≠_Æloc_f
 *
	mpiom≠_Æloc
;

268 
xèlk_piom≠_‰ì_f
 *
	mpiom≠_‰ì
;

269 
xèlk_piom≠_addr_f
 *
	mpiom≠_addr
;

270 
xèlk_piom≠_d⁄e_f
 *
	mpiom≠_d⁄e
;

271 
xèlk_piŸøns_addr_f
 *
	mpiŸøns_addr
;

274 
xèlk_dmam≠_Æloc_f
 *
	mdmam≠_Æloc
;

275 
xèlk_dmam≠_‰ì_f
 *
	mdmam≠_‰ì
;

276 
xèlk_dmam≠_addr_f
 *
	mdmam≠_addr
;

277 
xèlk_dmam≠_li°_f
 *
	mdmam≠_li°
;

278 
xèlk_dmam≠_d⁄e_f
 *
	mdmam≠_d⁄e
;

279 
xèlk_dm©øns_addr_f
 *
	mdm©øns_addr
;

280 
xèlk_dm©øns_li°_f
 *
	mdm©øns_li°
;

281 
xèlk_dmam≠_døö_f
 *
	mdmam≠_døö
;

282 
xèlk_dmØddr_døö_f
 *
	mdmØddr_døö
;

283 
xèlk_dmÆi°_døö_f
 *
	mdmÆi°_døö
;

286 
xèlk_öå_Æloc_f
 *
	möå_Æloc
;

287 
xèlk_öå_Æloc_f
 *
	möå_Æloc_nŸhd
;

288 
xèlk_öå_‰ì_f
 *
	möå_‰ì
;

289 
xèlk_öå_c⁄√˘_f
 *
	möå_c⁄√˘
;

290 
xèlk_öå_disc⁄√˘_f
 *
	möå_disc⁄√˘
;

291 
xèlk_öå_˝u_gë_f
 *
	möå_˝u_gë
;

292 
xèlk_öå_˝uid_gë_f
 *
	möå_˝uid_gë
;

295 
xèlk_¥ovidî_°¨tup_f
 *
	m¥ovidî_°¨tup
;

296 
xèlk_¥ovidî_shutdown_f
 *
	m¥ovidî_shutdown
;

299 
xèlk_îr‹_devíabÀ_f
 *
	mîr‹_devíabÀ
;

300 } 
	txèlk_¥ovidî_t
;

303 
xèlk_piom≠_Æloc_f
 
xèlk_piom≠_Æloc
;

304 
xèlk_piom≠_‰ì_f
 
xèlk_piom≠_‰ì
;

305 
xèlk_piom≠_addr_f
 
xèlk_piom≠_addr
;

306 
xèlk_piom≠_d⁄e_f
 
xèlk_piom≠_d⁄e
;

307 
xèlk_piŸøns_addr_f
 
xèlk_piŸøns_addr
;

308 
xèlk_dmam≠_Æloc_f
 
xèlk_dmam≠_Æloc
;

309 
xèlk_dmam≠_‰ì_f
 
xèlk_dmam≠_‰ì
;

310 
xèlk_dmam≠_addr_f
 
xèlk_dmam≠_addr
;

311 
xèlk_dmam≠_li°_f
 
xèlk_dmam≠_li°
;

312 
xèlk_dmam≠_d⁄e_f
 
xèlk_dmam≠_d⁄e
;

313 
xèlk_dm©øns_addr_f
 
xèlk_dm©øns_addr
;

314 
xèlk_dm©øns_li°_f
 
xèlk_dm©øns_li°
;

315 
xèlk_dmam≠_døö_f
 
xèlk_dmam≠_døö
;

316 
xèlk_dmØddr_døö_f
 
xèlk_dmØddr_døö
;

317 
xèlk_dmÆi°_døö_f
 
xèlk_dmÆi°_døö
;

318 
xèlk_öå_Æloc_f
 
xèlk_öå_Æloc
;

319 
xèlk_öå_Æloc_f
 
xèlk_öå_Æloc_nŸhd
;

320 
xèlk_öå_‰ì_f
 
xèlk_öå_‰ì
;

321 
xèlk_öå_c⁄√˘_f
 
xèlk_öå_c⁄√˘
;

322 
xèlk_öå_disc⁄√˘_f
 
xèlk_öå_disc⁄√˘
;

323 
xèlk_öå_˝u_gë_f
 
xèlk_öå_˝u_gë
;

324 
xèlk_öå_˝uid_gë_f
 
xèlk_öå_˝uid_gë
;

325 
xèlk_¥ovidî_°¨tup_f
 
xèlk_¥ovidî_°¨tup
;

326 
xèlk_¥ovidî_shutdown_f
 
xèlk_¥ovidî_shutdown
;

327 
xèlk_widgëdev_íabÀ_f
 
xèlk_widgëdev_íabÀ
;

328 
xèlk_widgëdev_shutdown_f
 
xèlk_widgëdev_shutdown
;

329 
xèlk_dma_íabÀd_f
 
xèlk_dma_íabÀd
;

330 
xèlk_îr‹_devíabÀ_f
 
xèlk_îr‹_devíabÀ
;

331 
xèlk_óæy_piŸøns_addr_f
 
xèlk_óæy_piŸøns_addr
;

335 
xèlk_îr‹_h™dÀr
(
vîãx_hdl_t
,

337 
i€º‹_mode_t
,

338 
i€º‹_t
 *);

344 
unch¨
 
	txèlk_öå_ve˘‹_t
;

346 
	#XTALK_INTR_VECTOR_NONE
 (
xèlk_öå_ve˘‹_t
)0

	)

349 
vîãx_hdl_t
 
xèlk_öå_dev_gë
(
xèlk_öå_t
 
xèlk_öå
);

350 
xwidgënum_t
 
xèlk_öå_èrgë_gë
(
xèlk_öå_t
 
xèlk_öå
);

351 
xèlk_öå_ve˘‹_t
 
xèlk_öå_ve˘‹_gë
(
xèlk_öå_t
 
xèlk_öå
);

352 
i›addr_t
 
xèlk_öå_addr_gë
(
xèlk_öå_t
 
xèlk_öå
);

353 
vîãx_hdl_t
 
xèlk_öå_˝u_gë
(
xèlk_öå_t
 
xèlk_öå
);

354 
˝uid_t
 
xèlk_öå_˝uid_gë
(
xèlk_öå_t
 
xèlk_öå
);

355 *
xèlk_öå_sÁrg_gë
(
xèlk_öå_t
 
xèlk_öå
);

358 
vîãx_hdl_t
 
xèlk_pio_dev_gë
(
xèlk_piom≠_t
 
xèlk_piom≠
);

359 
xwidgënum_t
 
xèlk_pio_èrgë_gë
(
xèlk_piom≠_t
 
xèlk_piom≠
);

360 
i›addr_t
 
xèlk_pio_xèlk_addr_gë
(
xèlk_piom≠_t
 
xèlk_piom≠
);

361 
size_t
 
xèlk_pio_m≠sz_gë
(
xèlk_piom≠_t
 
xèlk_piom≠
);

362 
ˇddr_t
 
xèlk_pio_kvaddr_gë
(
xèlk_piom≠_t
 
xèlk_piom≠
);

365 
vîãx_hdl_t
 
xèlk_dma_dev_gë
(
xèlk_dmam≠_t
 
xèlk_dmam≠
);

366 
xwidgënum_t
 
xèlk_dma_èrgë_gë
(
xèlk_dmam≠_t
 
xèlk_dmam≠
);

369 
xèlk_£t_óæy_piŸøns_addr
(
xèlk_óæy_piŸøns_addr_f
 *);

370 
xèlk_¥ovidî_ªgi°î
(
vîãx_hdl_t
 
¥ovidî
, 
xèlk_¥ovidî_t
 *
xèlk_‚s
);

371 
xèlk_¥ovidî_uƒegi°î
(
vîãx_hdl_t
 
¥ovidî
);

372 
xèlk_¥ovidî_t
 *
xèlk_¥ovidî_‚s_gë
(
vîãx_hdl_t
 
¥ovidî
);

375 
xswôch_˚nsus
(
vîãx_hdl_t
 
xswôchv
);

376 
xswôch_öô_widgës
(
vîãx_hdl_t
 
xswôchv
);

381 
	txwidgë_öå_¥e£t_f
 (*
	twhich_widgë
,

382 
	twhich_widgë_öå
,

383 
	txwidgënum_t
 
	tèrg
,

384 
	ti›addr_t
 
	taddr
,

385 
	txèlk_öå_ve˘‹_t
 
	tve˘
);

388 
	txèlk_öå_¥óŒoc_f
 (*
	twhich_xèlk
,

389 
	txèlk_öå_ve˘‹_t
 
	txèlk_ve˘‹
,

390 
	txwidgë_öå_¥e£t_f
 *
	t¥e£t_func
,

391 *
	twhich_widgë
,

392 
	twhich_widgë_öå
);

395 
	txèlk_öå_¥ec⁄n_f
 (*
	twhich_xèlk
,

396 
	txèlk_öå_ve˘‹_t
 
	txèlk_ve˘‹
,

397 
	töå_func_t
 
	töå_func
,

398 
	töå_¨g_t
 
	töå_¨g
);

401 
	#XTALK_ADDR_TO_UPPER
(
xèlk_addr
Ë(((
i›addr_t
)(xèlk_addrË>> 32Ë& 0xffff)

	)

402 
	#XTALK_ADDR_TO_LOWER
(
xèlk_addr
Ë((
i›addr_t
)(xèlk_addrË& 0xffffffff)

	)

404 
xèlk_öå_£tfunc_f
 *
	txèlk_öå_£tfunc_t
;

406 
	txèlk_ôî_f
(
	tvîãx_hdl_t
 
	tvhdl
);

408 
xèlk_ôî©e
(*
¥efix
, 
xèlk_ôî_f
 *
func
);

410 
xèlk_devi˚_powîup
(
vîãx_hdl_t
, 
xwidgënum_t
);

411 
xèlk_devi˚_shutdown
(
vîãx_hdl_t
, 
xwidgënum_t
);

412 
xèlk_devi˚_öquúy
(
vîãx_hdl_t
, 
xwidgënum_t
);

421 
	txwidgë_öå_¥e£t_f
 (*,

428 
	txèlk_öå_¥óŒoc_f
 (*,

435 
	txèlk_öå_¥ec⁄n_f
 (*,

	@/usr/include/sys/xtalk/xwidget.h

12 #i‚de‡
__XTALK_XWIDGET_H__


13 
	#__XTALK_XWIDGET_H__


	)

21 
	~<sys/xèlk/xèlk.h
>

22 #i‡
LANGUAGE_C


23 
	~<sys/cdl.h
>

26 
	#WIDGET_ID
 0x04

	)

27 
	#WIDGET_STATUS
 0x0c

	)

28 
	#WIDGET_ERR_UPPER_ADDR
 0x14

	)

29 
	#WIDGET_ERR_LOWER_ADDR
 0x1c

	)

30 
	#WIDGET_CONTROL
 0x24

	)

31 
	#WIDGET_REQ_TIMEOUT
 0x2c

	)

32 
	#WIDGET_INTDEST_UPPER_ADDR
 0x34

	)

33 
	#WIDGET_INTDEST_LOWER_ADDR
 0x3c

	)

34 
	#WIDGET_ERR_CMD_WORD
 0x44

	)

35 
	#WIDGET_LLP_CFG
 0x4c

	)

36 
	#WIDGET_TFLUSH
 0x54

	)

39 
	#WIDGET_REV_NUM
 0xf0000000

	)

40 
	#WIDGET_PART_NUM
 0x0ffff000

	)

41 
	#WIDGET_MFG_NUM
 0x00000f„

	)

42 
	#WIDGET_REV_NUM_SHFT
 28

	)

43 
	#WIDGET_PART_NUM_SHFT
 12

	)

44 
	#WIDGET_MFG_NUM_SHFT
 1

	)

46 
	#XWIDGET_PART_NUM
(
widgëid
Ë(((widgëidË& 
WIDGET_PART_NUM
Ë>> 
WIDGET_PART_NUM_SHFT
)

	)

47 
	#XWIDGET_REV_NUM
(
widgëid
Ë(((widgëidË& 
WIDGET_REV_NUM
Ë>> 
WIDGET_REV_NUM_SHFT
)

	)

48 
	#XWIDGET_MFG_NUM
(
widgëid
Ë(((widgëidË& 
WIDGET_MFG_NUM
Ë>> 
WIDGET_MFG_NUM_SHFT
)

	)

49 
	#XWIDGET_PART_REV_NUM
(
widgëid
Ë((
	`XWIDGET_PART_NUM
(widgetid) << 4) | \

50 
	`XWIDGET_REV_NUM
(
widgëid
))

	)

51 
	#XWIDGET_PART_REV_NUM_REV
(
∑πªv
Ë’¨åev & 0xf)

	)

54 
	#WIDGET_LLP_REC_CNT
 0xff000000

	)

55 
	#WIDGET_LLP_TX_CNT
 0x00ff0000

	)

56 
	#WIDGET_PENDING
 0x0000001f

	)

59 
	#WIDGET_ERR_UPPER_ADDR_ONLY
 0x0000ffff

	)

62 
	#WIDGET_F_BAD_PKT
 0x00010000

	)

63 
	#WIDGET_LLP_XBAR_CRD
 0x0000f000

	)

64 
	#WIDGET_LLP_XBAR_CRD_SHFT
 12

	)

65 
	#WIDGET_CLR_RLLP_CNT
 0x00000800

	)

66 
	#WIDGET_CLR_TLLP_CNT
 0x00000400

	)

67 
	#WIDGET_SYS_END
 0x00000200

	)

68 
	#WIDGET_MAX_TRANS
 0x000001f0

	)

69 
	#WIDGET_PCI_SPEED
 0x00000030

	)

70 
	#WIDGET_PCI_SPEED_SHFT
 4

	)

71 
	#WIDGET_PCI_SPEED_33MHZ
 0

	)

72 
	#WIDGET_PCI_SPEED_66MHZ
 1

	)

73 
	#WIDGET_WIDGET_ID
 0x0000000f

	)

76 
	#WIDGET_INT_VECTOR
 0xff000000

	)

77 
	#WIDGET_INT_VECTOR_SHFT
 24

	)

78 
	#WIDGET_TARGET_ID
 0x000f0000

	)

79 
	#WIDGET_TARGET_ID_SHFT
 16

	)

80 
	#WIDGET_UPP_ADDR
 0x0000ffff

	)

83 
	#WIDGET_DIDN
 0xf0000000

	)

84 
	#WIDGET_SIDN
 0x0f000000

	)

85 
	#WIDGET_PACTYP
 0x00f00000

	)

86 
	#WIDGET_TNUM
 0x000f8000

	)

87 
	#WIDGET_COHERENT
 0x00004000

	)

88 
	#WIDGET_DS
 0x00003000

	)

89 
	#WIDGET_GBR
 0x00000800

	)

90 
	#WIDGET_VBPM
 0x00000400

	)

91 
	#WIDGET_ERROR
 0x00000200

	)

92 
	#WIDGET_BARRIER
 0x00000100

	)

95 
	#WIDGET_LLP_MAXRETRY
 0x03ff0000

	)

96 
	#WIDGET_LLP_MAXRETRY_SHFT
 16

	)

97 
	#WIDGET_LLP_NULLTIMEOUT
 0x0000fc00

	)

98 
	#WIDGET_LLP_NULLTIMEOUT_SHFT
 10

	)

99 
	#WIDGET_LLP_MAXBURST
 0x000003ff

	)

100 
	#WIDGET_LLP_MAXBURST_SHFT
 0

	)

107 
	#WIDGET_LLP_MAXBURST_SN
 0x3e0

	)

116 #i‡
_LANGUAGE_C


117 
__uöt32_t
 
	twidgëªg_t
;

120 vﬁ©ûê
	swidgë_cfg
 {

121 
widgëªg_t
 
	mw_∑d_0
;

122 
widgëªg_t
 
	mw_id
;

123 
widgëªg_t
 
	mw_∑d_1
;

124 
widgëªg_t
 
	mw_°©us
;

125 
widgëªg_t
 
	mw_∑d_2
;

126 
widgëªg_t
 
	mw_îr_uµî_addr
;

127 
widgëªg_t
 
	mw_∑d_3
;

128 
widgëªg_t
 
	mw_îr_lowî_addr
;

129 
widgëªg_t
 
	mw_∑d_4
;

130 
widgëªg_t
 
	mw_c⁄åﬁ
;

131 
widgëªg_t
 
	mw_∑d_5
;

132 
widgëªg_t
 
	mw_ªq_timeout
;

133 
widgëªg_t
 
	mw_∑d_6
;

134 
widgëªg_t
 
	mw_ötde°_uµî_addr
;

135 
widgëªg_t
 
	mw_∑d_7
;

136 
widgëªg_t
 
	mw_ötde°_lowî_addr
;

137 
widgëªg_t
 
	mw_∑d_8
;

138 
widgëªg_t
 
	mw_îr_cmd_w‹d
;

139 
widgëªg_t
 
	mw_∑d_9
;

140 
widgëªg_t
 
	mw_Œp_cfg
;

141 
widgëªg_t
 
	mw_∑d_10
;

142 
widgëªg_t
 
	mw_tÊush
;

143 } 
	twidgë_cfg_t
;

147 
	mdidn
:4;

148 
	msidn
:4;

149 
	m∑˘yp
:4;

150 
	mäum
:5;

151 
	m˘
:1;

152 
	mds
:2;

153 
	mgbr
:1;

154 
	mvbpm
:1;

155 
	mîr‹
:1;

156 
	mbo
:1;

157 
	mŸhî
:8;

158 } 
	tw_îr_cmd_w‹d_f
;

161 
widgëªg_t
 
	mr
;

162 
w_îr_cmd_w‹d_f
 
	mf
;

163 } 
	tw_îr_cmd_w‹d_u
;

166 
	~<sys/hwgøph.h
>

167 
	~<sys/edt.h
>

169 
xwidgë_öfo_s
 *
	txwidgë_öfo_t
;

174 
	sxwidgë_hwid_s
 {

175 
xwidgë_∑π_num_t
 
	m∑π_num
;

176 
xwidgë_ªv_num_t
 
	mªv_num
;

177 
xwidgë_mfg_num_t
 
	mmfg_num
;

178 } *
	txwidgë_hwid_t
;

186 
	#XWIDGET_HARDWARE_ID_MATCH
(
hwid1
, 
hwid2
) \

187 (((
hwid1
)->
∑π_num
 =(
hwid2
)->part_num) && \

188 (((
hwid1
)->
mfg_num
 =
XWIDGET_MFG_NUM_NONE
) || \

189 ((
hwid2
)->
mfg_num
 =
XWIDGET_MFG_NUM_NONE
) || \

190 ((
hwid1
)->
mfg_num
 =(
hwid2
)->mfg_num)))

	)

194 #i‡
_KERNEL


196 
xwidgë_drivî_ªgi°î
(
xwidgë_∑π_num_t
 
∑π_num
,

197 
xwidgë_mfg_num_t
 
mfg_num
,

198 *
drivî_¥efix
,

199 
Êags
);

201 
xwidgë_drivî_uƒegi°î
(*
drivî_¥efix
);

203 
xwidgë_ªgi°î
(
xwidgë_hwid_s
 *
hwid
,

204 
vîãx_hdl_t
 
dev
,

205 
xwidgënum_t
 
id
,

206 
vîãx_hdl_t
 
ma°î
,

207 
xwidgënum_t
 
èrgëid
,

208 
async_©èch_t
 
Ø
);

210 
xwidgë_uƒegi°î
(
vîãx_hdl_t
);

211 
xwidgë_îr‹_ªgi°î
(
vîãx_hdl_t
 
xwidgë
,

212 
îr‹_h™dÀr_f
 * 
efunc
,

213 
îr‹_h™dÀr_¨g_t
 
eöfo
);

215 
xwidgë_ª£t
(
vîãx_hdl_t
 
xwidgë
);

216 
xwidgë_gfx_ª£t
(
vîãx_hdl_t
 
xwidgë
);

217 *
xwidgë_«me_gë
(
vîãx_hdl_t
 
xwidgë
);

220 
xwidgë_öfo_t
 
xwidgë_öfo_chk
(
vîãx_hdl_t
 
widgë
);

221 
xwidgë_öfo_t
 
xwidgë_öfo_gë
(
vîãx_hdl_t
 
widgë
);

222 
xwidgë_öfo_£t
(
vîãx_hdl_t
 
widgë
, 
xwidgë_öfo_t
 
widgë_öfo
);

223 
vîãx_hdl_t
 
xwidgë_öfo_dev_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

224 
xwidgënum_t
 
xwidgë_öfo_id_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

225 
xwidgë_öfo_ty≥_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

226 
xwidgë_öfo_°©e_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

227 
vîãx_hdl_t
 
xwidgë_öfo_ma°î_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

228 
xwidgënum_t
 
xwidgë_öfo_ma°îid_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

229 
xwidgë_∑π_num_t
 
xwidgë_öfo_∑π_num_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

230 
xwidgë_ªv_num_t
 
xwidgë_öfo_ªv_num_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

231 
xwidgë_mfg_num_t
 
xwidgë_öfo_mfg_num_gë
(
xwidgë_öfo_t
 
xwidgë_öfo
);

241 
	sv_widgë_s
 {

242 
	mv_widgë_s_is_ªÆly_em±y
;

243 
	#v_widgë_s_is_ªÆly_em±y
 
™d
 
usög
 
this
 
would
 
be
 
a
 
sy¡ax
 
îr‹
.

	)

244 } 
	tv_widgë_t
;

	@/usr/include/stdint.h

1 #i‚de‡
__STDINT_H__


2 
	#__STDINT_H__


	)

4 #i‚de‡
__c99


5 #îr‹ 
This
 
hódî
 
fûe
 
is
 
to
 
be
 
u£d
 
⁄ly
 
c99
 
mode
 
compû©i⁄s


14 #i‚de‡
__öây≥s_INCLUDED


15 
	#__öây≥s_INCLUDED


	)

19 sig√d 
	töt8_t
;

20 
	tuöt8_t
;

21 sig√d 
	töt16_t
;

22 
	tuöt16_t
;

23 sig√d 
	töt32_t
;

24 
	tuöt32_t
;

25 sig√d 
	töt64_t
;

26 
	tuöt64_t
;

30 sig√d 
	töçå_t
;

31 
	tuöçå_t
;

35 sig√d 
	tötmax_t
;

36 
	tuötmax_t
;

42 sig√d 
	töt_Àa°8_t
;

43 
	tuöt_Àa°8_t
;

44 sig√d 
	töt_Àa°16_t
;

45 
	tuöt_Àa°16_t
;

46 sig√d 
	töt_Àa°32_t
;

47 
	tuöt_Àa°32_t
;

48 sig√d 
	töt_Àa°64_t
;

49 
	tuöt_Àa°64_t
;

53 sig√d 
	töt_Á°8_t
;

54 
	tuöt_Á°8_t
;

55 sig√d 
	töt_Á°16_t
;

56 
	tuöt_Á°16_t
;

57 sig√d 
	töt_Á°32_t
;

58 
	tuöt_Á°32_t
;

59 sig√d 
	töt_Á°64_t
;

60 
	tuöt_Á°64_t
;

64 
	#INT8_MIN
 (-0x7‡- 1)

	)

65 
	#INT16_MIN
 (-0x7ff‡- 1)

	)

66 
	#INT32_MIN
 (-0x7ffffff‡- 1)

	)

67 
	#INT64_MIN
 (-0x7ffffffffffffff‡- 1)

	)

69 
	#INT8_MAX
 0x7f

	)

70 
	#INT16_MAX
 0x7fff

	)

71 
	#INT32_MAX
 0x7fffffff

	)

72 
	#INT64_MAX
 0x7fffffffffffffff

	)

74 
	#UINT8_MAX
 0xff

	)

75 
	#UINT16_MAX
 0xffff

	)

76 
	#UINT32_MAX
 0xffffffff

	)

77 
	#UINT64_MAX
 0xffffffffffffffff

	)

81 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

82 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

83 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

84 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

86 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

87 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

88 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

89 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

91 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

92 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

93 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

94 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

98 
	#INT_FAST8_MIN
 
INT8_MIN


	)

99 
	#INT_FAST16_MIN
 
INT16_MIN


	)

100 
	#INT_FAST32_MIN
 
INT32_MIN


	)

101 
	#INT_FAST64_MIN
 
INT64_MIN


	)

103 
	#INT_FAST8_MAX
 
INT8_MAX


	)

104 
	#INT_FAST16_MAX
 
INT16_MAX


	)

105 
	#INT_FAST32_MAX
 
INT32_MAX


	)

106 
	#INT_FAST64_MAX
 
INT64_MAX


	)

108 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

109 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

110 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

111 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

115 #i‡(
_MIPS_SZLONG
 == 32)

116 
	#INTPTR_MIN
 
INT32_MIN


	)

117 
	#INTPTR_MAX
 
INT32_MAX


	)

118 
	#UINTPTR_MAX
 
UINT32_MAX


	)

120 #i‡(
_MIPS_SZLONG
 == 64)

121 
	#INTPTR_MIN
 
INT64_MIN


	)

122 
	#INTPTR_MAX
 
INT64_MAX


	)

123 
	#UINTPTR_MAX
 
UINT64_MAX


	)

128 
	#INTMAX_MIN
 
INT64_MIN


	)

129 
	#INTMAX_MAX
 
INT64_MAX


	)

130 
	#UINTMAX_MAX
 
UINT64_MAX


	)

134 #i‡(
_MIPS_SZLONG
 == 32)

135 
	#PTRDIFF_MIN
 
INT32_MIN


	)

136 
	#PTRDIFF_MAX
 
INT32_MAX


	)

138 #i‡(
_MIPS_SZLONG
 == 64)

139 
	#PTRDIFF_MIN
 
INT64_MIN


	)

140 
	#PTRDIFF_MAX
 
INT64_MAX


	)

143 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

144 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

146 #i‡(
_MIPS_SZLONG
 == 32)

147 
	#SIZE_MAX
 
UINT32_MAX


	)

149 #i‡(
_MIPS_SZLONG
 == 64)

150 
	#SIZE_MAX
 
UINT64_MAX


	)

153 
	#WCHAR_MIN
 
INT32_MIN


	)

154 
	#WCHAR_MAX
 
INT32_MAX


	)

156 
	#WINT_MIN
 
INT32_MIN


	)

157 
	#WINT_MAX
 
INT32_MAX


	)

161 
	#INT8_C
(
x
Ë(
öt_Àa°8_t
)(x)

	)

162 
	#INT16_C
(
x
Ë(
öt_Àa°16_t
)(x)

	)

163 
	#INT32_C
(
x
Ë(
öt_Àa°32_t
)(x)

	)

164 
	#INT64_C
(
x
Ë(
öt_Àa°64_t
)(x)

	)

166 
	#UINT8_C
(
x
Ë(
uöt_Àa°8_t
)(x)

	)

167 
	#UINT16_C
(
x
Ë(
uöt_Àa°16_t
)(x)

	)

168 
	#UINT32_C
(
x
Ë(
uöt_Àa°32_t
)(x)

	)

169 
	#UINT64_C
(
x
Ë(
uöt_Àa°64_t
)(x)

	)

173 
	#INTMAX_C
(
x
Ë(
ötmax_t
)(x)

	)

174 
	#UINTMAX_C
(
x
Ë(
uötmax_t
)(x)

	)

	@/usr/include/sys/PCI/pic.h

19 #i‚de‡
__PCI_PIC_H__


20 
	#__PCI_PIC_H__


	)

24 
	~<sys/xèlk/xwidgë.h
>

79 
	#PIC_WIDGET_PART_NUM_BUS0
 0xd102

	)

80 
	#PIC_WIDGET_PART_NUM_BUS1
 0xd112

	)

81 
	#PIC_WIDGET_MFGR_NUM
 0x24

	)

82 
	#PIC_WIDGET_REV_A
 0x1

	)

83 
	#PIC_WIDGET_REV_B
 0x2

	)

84 
	#PIC_WIDGET_REV_C
 0x3

	)

86 
	#IS_PIC_PART_REV_A
(
ªv
) \

87 ((
ªv
 =(
PIC_WIDGET_PART_NUM_BUS0
 << 4 | 
PIC_WIDGET_REV_A
)) || \

88 (
ªv
 =(
PIC_WIDGET_PART_NUM_BUS1
 << 4 | 
PIC_WIDGET_REV_A
)))

	)

89 
	#IS_PIC_PART_REV_B
(
ªv
) \

90 ((
ªv
 =(
PIC_WIDGET_PART_NUM_BUS0
 << 4 | 
PIC_WIDGET_REV_B
)) || \

91 (
ªv
 =(
PIC_WIDGET_PART_NUM_BUS1
 << 4 | 
PIC_WIDGET_REV_B
)))

	)

92 
	#IS_PIC_PART_REV_C
(
ªv
) \

93 ((
ªv
 =(
PIC_WIDGET_PART_NUM_BUS0
 << 4 | 
PIC_WIDGET_REV_C
)) || \

94 (
ªv
 =(
PIC_WIDGET_PART_NUM_BUS1
 << 4 | 
PIC_WIDGET_REV_C
)))

	)

96 #i‡
LANGUAGE_C


98 
uöt64_t
 
	tpi¸eg_t
;

99 
uöt64_t
 
	tpiˇã_t
;

109 vﬁ©ûê
	spic_s
 {

114 
pi¸eg_t
 
	mp_wid_id
;

115 
pi¸eg_t
 
	mp_wid_°©
;

116 
pi¸eg_t
 
	mp_wid_îr_uµî
;

117 
pi¸eg_t
 
	mp_wid_îr_lowî
;

118 
	#p_wid_îr
 
p_wid_îr_lowî


	)

119 
pi¸eg_t
 
	mp_wid_c⁄åﬁ
;

120 
pi¸eg_t
 
	mp_wid_ªq_timeout
;

121 
pi¸eg_t
 
	mp_wid_öt_uµî
;

122 
pi¸eg_t
 
	mp_wid_öt_lowî
;

123 
	#p_wid_öt
 
p_wid_öt_lowî


	)

124 
pi¸eg_t
 
	mp_wid_îr_cmdw‹d
;

125 
pi¸eg_t
 
	mp_wid_Œp
;

126 
pi¸eg_t
 
	mp_wid_tÊush
;

129 
pi¸eg_t
 
	mp_wid_aux_îr
;

130 
pi¸eg_t
 
	mp_wid_ª•_uµî
;

131 
pi¸eg_t
 
	mp_wid_ª•_lowî
;

132 
	#p_wid_ª•
 
p_wid_ª•_lowî


	)

133 
pi¸eg_t
 
	mp_wid_t°_pö_˘æ
;

134 
pi¸eg_t
 
	mp_wid_addr_lkîr
;

137 
pi¸eg_t
 
	mp_dú_m≠
;

138 
pi¸eg_t
 
	m_∑d_000088
;

141 
pi¸eg_t
 
	mp_m≠_Áu…
;

142 
pi¸eg_t
 
	m_∑d_000098
;

145 
pi¸eg_t
 
	mp_¨b
;

146 
pi¸eg_t
 
	m_∑d_0000A8
;

149 
pi¸eg_t
 
	mp_©e_∑rôy_îr
;

150 
pi¸eg_t
 
	m_∑d_0000B8
;

153 
pi¸eg_t
 
	mp_bus_timeout
;

154 
pi¸eg_t
 
	mp_pci_cfg
;

155 
pi¸eg_t
 
	mp_pci_îr_uµî
;

156 
pi¸eg_t
 
	mp_pci_îr_lowî
;

157 
	#p_pci_îr
 
p_pci_îr_lowî


	)

158 
pi¸eg_t
 
	m_∑d_0000E0
[4];

161 
pi¸eg_t
 
	mp_öt_°©us
;

162 
pi¸eg_t
 
	mp_öt_íabÀ
;

163 
pi¸eg_t
 
	mp_öt_r°_°©
;

164 
pi¸eg_t
 
	mp_öt_mode
;

165 
pi¸eg_t
 
	mp_öt_devi˚
;

166 
pi¸eg_t
 
	mp_öt_ho°_îr
;

167 
pi¸eg_t
 
	mp_öt_addr
[8];

168 
pi¸eg_t
 
	mp_îr_öt_võw
;

169 
pi¸eg_t
 
	mp_mu…_öt
;

170 
pi¸eg_t
 
	mp_f‹˚_Æways
[8];

171 
pi¸eg_t
 
	mp_f‹˚_pö
[8];

174 
pi¸eg_t
 
	mp_devi˚
[4];

175 
pi¸eg_t
 
	m_∑d_000220
[4];

176 
pi¸eg_t
 
	mp_wr_ªq_buf
[4];

177 
pi¸eg_t
 
	m_∑d_000260
[4];

178 
pi¸eg_t
 
	mp_ºb_m≠
[2];

179 
	#p_eví_ª•
 
p_ºb_m≠
[0]

	)

180 
	#p_odd_ª•
 
p_ºb_m≠
[1]

	)

181 
pi¸eg_t
 
	mp_ª•_°©us
;

182 
pi¸eg_t
 
	mp_ª•_˛ór
;

184 
pi¸eg_t
 
	m_∑d_0002A0
[12];

188 
pi¸eg_t
 
	muµî
;

189 
pi¸eg_t
 
	mlowî
;

190 } 
	mp_buf_addr_m©ch
[16];

194 
pi¸eg_t
 
	mÊush_w_touch
;

195 
pi¸eg_t
 
	mÊush_wo_touch
;

196 
pi¸eg_t
 
	möÊight
;

197 
pi¸eg_t
 
	m¥e„tch
;

198 
pi¸eg_t
 
	mtŸÆ_pci_ªåy
;

199 
pi¸eg_t
 
	mmax_pci_ªåy
;

200 
pi¸eg_t
 
	mmax_œãncy
;

201 
pi¸eg_t
 
	m˛ór_Æl
;

202 } 
	mp_buf_cou¡
[8];

206 
pi¸eg_t
 
	mp_pcix_bus_îr_addr
;

207 
pi¸eg_t
 
	mp_pcix_bus_îr_©å
;

208 
pi¸eg_t
 
	mp_pcix_bus_îr_d©a
;

209 
pi¸eg_t
 
	mp_pcix_pio_•lô_addr
;

210 
pi¸eg_t
 
	mp_pcix_pio_•lô_©å
;

211 
pi¸eg_t
 
	mp_pcix_dma_ªq_îr_©å
;

212 
pi¸eg_t
 
	mp_pcix_dma_ªq_îr_addr
;

213 
pi¸eg_t
 
	mp_pcix_timeout
;

215 
pi¸eg_t
 
	m_∑d_000640
[120];

219 
pi¸eg_t
 
	mp_buf_addr
;

220 
pi¸eg_t
 
	mp_buf_©å
;

221 } 
	mp_pcix_ªad_buf_64
[16];

224 
pi¸eg_t
 
	mp_buf_addr
;

225 
pi¸eg_t
 
	mp_buf_©å
;

226 
pi¸eg_t
 
	mp_buf_vÆid
;

227 
pi¸eg_t
 
	m__∑d1
;

228 } 
	mp_pcix_wrôe_buf_64
[8];

232 
	m_∑d_000c00
[0x010000 - 0x000c00];

235 
piˇã_t
 
	mp_öt_©e_øm
[1024];

238 
piˇã_t
 
	mp_öt_©e_øm_mp
[1024];

240 
	m_∑d_014000
[0x18000 - 0x014000];

243 
pi¸eg_t
 
	mp_wr_ªq_lowî
[256];

244 
pi¸eg_t
 
	mp_wr_ªq_uµî
[256];

245 
pi¸eg_t
 
	mp_wr_ªq_∑rôy
[256];

247 
	m_∑d_019800
[0x20000 - 0x019800];

251 
uch¨_t
 
	mc
[0x1000 / 1];

252 
uöt16_t
 
	ms
[0x1000 / 2];

253 
uöt32_t
 
	ml
[0x1000 / 4];

254 
uöt64_t
 
	md
[0x1000 / 8];

256 
uch¨_t
 
	mc
[0x100 / 1];

257 
uöt16_t
 
	ms
[0x100 / 2];

258 
uöt32_t
 
	ml
[0x100 / 4];

259 
uöt64_t
 
	md
[0x100 / 8];

260 } 
	mf
[8];

261 } 
	mp_ty≥0_cfg_dev
[8];

265 
uch¨_t
 
	mc
[0x1000 / 1];

266 
uöt16_t
 
	ms
[0x1000 / 2];

267 
uöt32_t
 
	ml
[0x1000 / 4];

268 
uöt64_t
 
	md
[0x1000 / 8];

270 
uch¨_t
 
	mc
[0x100 / 1];

271 
uöt16_t
 
	ms
[0x100 / 2];

272 
uöt32_t
 
	ml
[0x100 / 4];

273 
uöt64_t
 
	md
[0x100 / 8];

274 } 
	mf
[8];

275 } 
	mp_ty≥1_cfg
;

277 
	m_∑d_029000
[0x030000-0x029000];

281 
uch¨_t
 
	mc
[8 / 1];

282 
uöt16_t
 
	ms
[8 / 2];

283 
uöt32_t
 
	ml
[8 / 4];

284 
uöt64_t
 
	md
[8 / 8];

285 } 
	mp_pci_ück
;

287 
	m_∑d_030007
[0x040000-0x030008];

291 
uch¨_t
 
	mc
[8 / 1];

292 
uöt16_t
 
	ms
[8 / 2];

293 
uöt32_t
 
	ml
[8 / 4];

294 
uöt64_t
 
	md
[8 / 8];

295 } 
	mp_pcix_cy˛e
;

296 } 
	tpic_t
;

303 
	#PIC_IDENTIFICATION
 0x00000000

	)

306 
	#PIC_STATUS
 0x00000008

	)

309 
	#PIC_UPPER_ADDR_REG_BUS_SIDE_ERRS
 0x00000010

	)

312 
	#PIC_LOWER_ADDR_REG_BUS_SIDE_ERRS
 0x00000018

	)

315 
	#PIC_CONTROL
 0x00000020

	)

318 
	#PIC_PCI_REQ_TIME_OUT_VALUE
 0x00000028

	)

321 
	#PIC_INTR_DEST_UPPER_ADDR
 0x00000030

	)

324 
	#PIC_INTR_DEST_LOWER_ADDR
 0x00000038

	)

327 
	#PIC_CMD_WORD_REG_BUS_SIDE
 0x00000040

	)

330 
	#PIC_LLP_CFG_REG_
(
BUS_0_ONLY
Ë0x00000048

	)

333 
	#PIC_PCI_TARGET_FLUSH
 0x00000050

	)

336 
	#PIC_CMD_WORD_REG_LINK_SIDE
 0x00000058

	)

339 
	#PIC_RESP_BUF_ERR_UPPER_ADDR_
 0x00000060

	)

342 
	#PIC_RESP_BUF_ERR_LOWER_ADDR_
 0x00000068

	)

345 
	#PIC_TEST_PIN_CONTROL
 0x00000070

	)

348 
	#PIC_ADDR_REG_LINK_SIDE_ERRS
 0x00000078

	)

351 
	#PIC_DIRECT_MAP
 0x00000080

	)

354 
	#PIC_PCI_MAP_FAULT_ADDR
 0x00000090

	)

357 
	#PIC_ARBITRATION_PRIORITY
 0x000000A0

	)

360 
	#PIC_INTERNAL_RAM_PARITY_ERR
 0x000000B0

	)

363 
	#PIC_PCI_TIME_OUT
 0x000000C0

	)

366 
	#PIC_PCI_TYPE_1_CFG
 0x000000C8

	)

369 
	#PIC_PCI_BUS_ERR_UPPER_ADDR_
 0x000000D0

	)

372 
	#PIC_PCI_BUS_ERR_LOWER_ADDR_
 0x000000D8

	)

375 
	#PIC_PCIX_ERR_ADDR
 0x000000E0

	)

378 
	#PIC_PCIX_ERR_ATTRIBUTE
 0x000000E8

	)

381 
	#PIC_PCIX_ERR_DATA
 0x000000F0

	)

384 
	#PIC_PCIX_READ_REQ_TIMEOUT_ERR
 0x000000F8

	)

387 
	#PIC_INTR_STATUS
 0x00000100

	)

390 
	#PIC_INTR_ENABLE
 0x00000108

	)

393 
	#PIC_RESET_INTR_STATUS
 0x00000110

	)

396 
	#PIC_INTR_MODE
 0x00000118

	)

399 
	#PIC_INTR_DEVICE
 0x00000120

	)

402 
	#PIC_HOST_ERR_FIELD
 0x00000128

	)

405 
	#PIC_INTR_PIN_0_HOST_ADDR
 0x00000130

	)

408 
	#PIC_INTR_PIN_1_HOST_ADDR
 0x00000138

	)

411 
	#PIC_INTR_PIN_2_HOST_ADDR
 0x00000140

	)

414 
	#PIC_INTR_PIN_3_HOST_ADDR
 0x00000148

	)

417 
	#PIC_INTR_PIN_4_HOST_ADDR
 0x00000150

	)

420 
	#PIC_INTR_PIN_5_HOST_ADDR
 0x00000158

	)

423 
	#PIC_INTR_PIN_6_HOST_ADDR
 0x00000160

	)

426 
	#PIC_INTR_PIN_7_HOST_ADDR
 0x00000168

	)

429 
	#PIC_ERR_INTR_VIEW
 0x00000170

	)

432 
	#PIC_MULTIPLE_INTR
 0x00000178

	)

435 
	#PIC_FORCE_ALWAYS_INTR_0
 0x00000180

	)

438 
	#PIC_FORCE_ALWAYS_INTR_1
 0x00000188

	)

441 
	#PIC_FORCE_ALWAYS_INTR_2
 0x00000190

	)

444 
	#PIC_FORCE_ALWAYS_INTR_3
 0x00000198

	)

447 
	#PIC_FORCE_ALWAYS_INTR_4
 0x000001A0

	)

450 
	#PIC_FORCE_ALWAYS_INTR_5
 0x000001A8

	)

453 
	#PIC_FORCE_ALWAYS_INTR_6
 0x000001B0

	)

456 
	#PIC_FORCE_ALWAYS_INTR_7
 0x000001B8

	)

459 
	#PIC_FORCE_PIN_INTR_0
 0x000001C0

	)

462 
	#PIC_FORCE_PIN_INTR_1
 0x000001C8

	)

465 
	#PIC_FORCE_PIN_INTR_2
 0x000001D0

	)

468 
	#PIC_FORCE_PIN_INTR_3
 0x000001D8

	)

471 
	#PIC_FORCE_PIN_INTR_4
 0x000001E0

	)

474 
	#PIC_FORCE_PIN_INTR_5
 0x000001E8

	)

477 
	#PIC_FORCE_PIN_INTR_6
 0x000001F0

	)

480 
	#PIC_FORCE_PIN_INTR_7
 0x000001F8

	)

483 
	#PIC_DEVICE_0
 0x00000200

	)

486 
	#PIC_DEVICE_1
 0x00000208

	)

489 
	#PIC_DEVICE_2
 0x00000210

	)

492 
	#PIC_DEVICE_3
 0x00000218

	)

495 
	#PIC_DEVICE_0_WRITE_REQ_BUF
 0x00000240

	)

498 
	#PIC_DEVICE_1_WRITE_REQ_BUF
 0x00000248

	)

501 
	#PIC_DEVICE_2_WRITE_REQ_BUF
 0x00000250

	)

504 
	#PIC_DEVICE_3_WRITE_REQ_BUF
 0x00000258

	)

507 
	#PIC_EVEN_DEVICE_RESP_BUF
 0x00000280

	)

510 
	#PIC_ODD_DEVICE_RESP_BUF
 0x00000288

	)

513 
	#PIC_READ_RESP_BUF_STATUS
 0x00000290

	)

516 
	#PIC_READ_RESP_BUF_CLEAR
 0x00000298

	)

519 
	#PIC_PCI_RR_0_UPPER_ADDR_MATCH
 0x00000300

	)

522 
	#PIC_PCI_RR_0_LOWER_ADDR_MATCH
 0x00000308

	)

525 
	#PIC_PCI_RR_1_UPPER_ADDR_MATCH
 0x00000310

	)

528 
	#PIC_PCI_RR_1_LOWER_ADDR_MATCH
 0x00000318

	)

531 
	#PIC_PCI_RR_2_UPPER_ADDR_MATCH
 0x00000320

	)

534 
	#PIC_PCI_RR_2_LOWER_ADDR_MATCH
 0x00000328

	)

537 
	#PIC_PCI_RR_3_UPPER_ADDR_MATCH
 0x00000330

	)

540 
	#PIC_PCI_RR_3_LOWER_ADDR_MATCH
 0x00000338

	)

543 
	#PIC_PCI_RR_4_UPPER_ADDR_MATCH
 0x00000340

	)

546 
	#PIC_PCI_RR_4_LOWER_ADDR_MATCH
 0x00000348

	)

549 
	#PIC_PCI_RR_5_UPPER_ADDR_MATCH
 0x00000350

	)

552 
	#PIC_PCI_RR_5_LOWER_ADDR_MATCH
 0x00000358

	)

555 
	#PIC_PCI_RR_6_UPPER_ADDR_MATCH
 0x00000360

	)

558 
	#PIC_PCI_RR_6_LOWER_ADDR_MATCH
 0x00000368

	)

561 
	#PIC_PCI_RR_7_UPPER_ADDR_MATCH
 0x00000370

	)

564 
	#PIC_PCI_RR_7_LOWER_ADDR_MATCH
 0x00000378

	)

567 
	#PIC_PCI_RR_8_UPPER_ADDR_MATCH
 0x00000380

	)

570 
	#PIC_PCI_RR_8_LOWER_ADDR_MATCH
 0x00000388

	)

573 
	#PIC_PCI_RR_9_UPPER_ADDR_MATCH
 0x00000390

	)

576 
	#PIC_PCI_RR_9_LOWER_ADDR_MATCH
 0x00000398

	)

579 
	#PIC_PCI_RR_10_UPPER_ADDR_MATCH
 0x000003A0

	)

582 
	#PIC_PCI_RR_10_LOWER_ADDR_MATCH
 0x000003A8

	)

585 
	#PIC_PCI_RR_11_UPPER_ADDR_MATCH
 0x000003B0

	)

588 
	#PIC_PCI_RR_11_LOWER_ADDR_MATCH
 0x000003B8

	)

591 
	#PIC_PCI_RR_12_UPPER_ADDR_MATCH
 0x000003C0

	)

594 
	#PIC_PCI_RR_12_LOWER_ADDR_MATCH
 0x000003C8

	)

597 
	#PIC_PCI_RR_13_UPPER_ADDR_MATCH
 0x000003D0

	)

600 
	#PIC_PCI_RR_13_LOWER_ADDR_MATCH
 0x000003D8

	)

603 
	#PIC_PCI_RR_14_UPPER_ADDR_MATCH
 0x000003E0

	)

606 
	#PIC_PCI_RR_14_LOWER_ADDR_MATCH
 0x000003E8

	)

609 
	#PIC_PCI_RR_15_UPPER_ADDR_MATCH
 0x000003F0

	)

612 
	#PIC_PCI_RR_15_LOWER_ADDR_MATCH
 0x000003F8

	)

615 
	#PIC_BUF_0_FLUSH_CNT_WITH_DATA_TOUCH
 0x00000400

	)

618 
	#PIC_BUF_0_FLUSH_CNT_WO_DATA_TOUCH
 0x00000408

	)

621 
	#PIC_BUF_0_REQ_IN_FLIGHT_CNT
 0x00000410

	)

624 
	#PIC_BUF_0_PREFETCH_REQ_CNT
 0x00000418

	)

627 
	#PIC_BUF_0_TOTAL_PCI_RETRY_CNT
 0x00000420

	)

630 
	#PIC_BUF_0_MAX_PCI_RETRY_CNT
 0x00000428

	)

633 
	#PIC_BUF_0_MAX_LATENCY_CNT
 0x00000430

	)

636 
	#PIC_BUF_0_CLEAR_ALL
 0x00000438

	)

639 
	#PIC_BUF_2_FLUSH_CNT_WITH_DATA_TOUCH
 0x00000440

	)

642 
	#PIC_BUF_2_FLUSH_CNT_WO_DATA_TOUCH
 0x00000448

	)

645 
	#PIC_BUF_2_REQ_IN_FLIGHT_CNT
 0x00000450

	)

648 
	#PIC_BUF_2_PREFETCH_REQ_CNT
 0x00000458

	)

651 
	#PIC_BUF_2_TOTAL_PCI_RETRY_CNT
 0x00000460

	)

654 
	#PIC_BUF_2_MAX_PCI_RETRY_CNT
 0x00000468

	)

657 
	#PIC_BUF_2_MAX_LATENCY_CNT
 0x00000470

	)

660 
	#PIC_BUF_2_CLEAR_ALL
 0x00000478

	)

663 
	#PIC_BUF_4_FLUSH_CNT_WITH_DATA_TOUCH
 0x00000480

	)

666 
	#PIC_BUF_4_FLUSH_CNT_WO_DATA_TOUCH
 0x00000488

	)

669 
	#PIC_BUF_4_REQ_IN_FLIGHT_CNT
 0x00000490

	)

672 
	#PIC_BUF_4_PREFETCH_REQ_CNT
 0x00000498

	)

675 
	#PIC_BUF_4_TOTAL_PCI_RETRY_CNT
 0x000004A0

	)

678 
	#PIC_BUF_4_MAX_PCI_RETRY_CNT
 0x000004A8

	)

681 
	#PIC_BUF_4_MAX_LATENCY_CNT
 0x000004B0

	)

684 
	#PIC_BUF_4_CLEAR_ALL
 0x000004B8

	)

687 
	#PIC_BUF_6_FLUSH_CNT_WITH_DATA_TOUCH
 0x000004C0

	)

690 
	#PIC_BUF_6_FLUSH_CNT_WO_DATA_TOUCH
 0x000004C8

	)

693 
	#PIC_BUF_6_REQ_IN_FLIGHT_CNT
 0x000004D0

	)

696 
	#PIC_BUF_6_PREFETCH_REQ_CNT
 0x000004D8

	)

699 
	#PIC_BUF_6_TOTAL_PCI_RETRY_CNT
 0x000004E0

	)

702 
	#PIC_BUF_6_MAX_PCI_RETRY_CNT
 0x000004E8

	)

705 
	#PIC_BUF_6_MAX_LATENCY_CNT
 0x000004F0

	)

708 
	#PIC_BUF_6_CLEAR_ALL
 0x000004F8

	)

711 
	#PIC_BUF_8_FLUSH_CNT_WITH_DATA_TOUCH
 0x00000500

	)

714 
	#PIC_BUF_8_FLUSH_CNT_WO_DATA_TOUCH
 0x00000508

	)

717 
	#PIC_BUF_8_REQ_IN_FLIGHT_CNT
 0x00000510

	)

720 
	#PIC_BUF_8_PREFETCH_REQ_CNT
 0x00000518

	)

723 
	#PIC_BUF_8_TOTAL_PCI_RETRY_CNT
 0x00000520

	)

726 
	#PIC_BUF_8_MAX_PCI_RETRY_CNT
 0x00000528

	)

729 
	#PIC_BUF_8_MAX_LATENCY_CNT
 0x00000530

	)

732 
	#PIC_BUF_8_CLEAR_ALL
 0x00000538

	)

735 
	#PIC_BUF_10_FLUSH_CNT_WITH_DATA_TOUCH
 0x00000540

	)

738 
	#PIC_BUF_10_FLUSH_CNT_WO_DATA_TOUCH
 0x00000548

	)

741 
	#PIC_BUF_10_REQ_IN_FLIGHT_CNT
 0x00000550

	)

744 
	#PIC_BUF_10_PREFETCH_REQ_CNT
 0x00000558

	)

747 
	#PIC_BUF_10_TOTAL_PCI_RETRY_CNT
 0x00000560

	)

750 
	#PIC_BUF_10_MAX_PCI_RETRY_CNT
 0x00000568

	)

753 
	#PIC_BUF_10_MAX_LATENCY_CNT
 0x00000570

	)

756 
	#PIC_BUF_10_CLEAR_ALL
 0x00000578

	)

759 
	#PIC_BUF_12_FLUSH_CNT_WITH_DATA_TOUCH
 0x00000580

	)

762 
	#PIC_BUF_12_FLUSH_CNT_WO_DATA_TOUCH
 0x00000588

	)

765 
	#PIC_BUF_12_REQ_IN_FLIGHT_CNT
 0x00000590

	)

768 
	#PIC_BUF_12_PREFETCH_REQ_CNT
 0x00000598

	)

771 
	#PIC_BUF_12_TOTAL_PCI_RETRY_CNT
 0x000005A0

	)

774 
	#PIC_BUF_12_MAX_PCI_RETRY_CNT
 0x000005A8

	)

777 
	#PIC_BUF_12_MAX_LATENCY_CNT
 0x000005B0

	)

780 
	#PIC_BUF_12_CLEAR_ALL
 0x000005B8

	)

783 
	#PIC_BUF_14_FLUSH_CNT_WITH_DATA_TOUCH
 0x000005C0

	)

786 
	#PIC_BUF_14_FLUSH_CNT_WO_DATA_TOUCH
 0x000005C8

	)

789 
	#PIC_BUF_14_REQ_IN_FLIGHT_CNT
 0x000005D0

	)

792 
	#PIC_BUF_14_PREFETCH_REQ_CNT
 0x000005D8

	)

795 
	#PIC_BUF_14_TOTAL_PCI_RETRY_CNT
 0x000005E0

	)

798 
	#PIC_BUF_14_MAX_PCI_RETRY_CNT
 0x000005E8

	)

801 
	#PIC_BUF_14_MAX_LATENCY_CNT
 0x000005F0

	)

804 
	#PIC_BUF_14_CLEAR_ALL
 0x000005F8

	)

807 
	#PIC_PCIX_READ_BUF_0_ADDR
 0x00000A00

	)

810 
	#PIC_PCIX_READ_BUF_0_ATTRIBUTE
 0x00000A08

	)

813 
	#PIC_PCIX_READ_BUF_1_ADDR
 0x00000A10

	)

816 
	#PIC_PCIX_READ_BUF_1_ATTRIBUTE
 0x00000A18

	)

819 
	#PIC_PCIX_READ_BUF_2_ADDR
 0x00000A20

	)

822 
	#PIC_PCIX_READ_BUF_2_ATTRIBUTE
 0x00000A28

	)

825 
	#PIC_PCIX_READ_BUF_3_ADDR
 0x00000A30

	)

828 
	#PIC_PCIX_READ_BUF_3_ATTRIBUTE
 0x00000A38

	)

831 
	#PIC_PCIX_READ_BUF_4_ADDR
 0x00000A40

	)

834 
	#PIC_PCIX_READ_BUF_4_ATTRIBUTE
 0x00000A48

	)

837 
	#PIC_PCIX_READ_BUF_5_ADDR
 0x00000A50

	)

840 
	#PIC_PCIX_READ_BUF_5_ATTRIBUTE
 0x00000A58

	)

843 
	#PIC_PCIX_READ_BUF_6_ADDR
 0x00000A60

	)

846 
	#PIC_PCIX_READ_BUF_6_ATTRIBUTE
 0x00000A68

	)

849 
	#PIC_PCIX_READ_BUF_7_ADDR
 0x00000A70

	)

852 
	#PIC_PCIX_READ_BUF_7_ATTRIBUTE
 0x00000A78

	)

855 
	#PIC_PCIX_READ_BUF_8_ADDR
 0x00000A80

	)

858 
	#PIC_PCIX_READ_BUF_8_ATTRIBUTE
 0x00000A88

	)

861 
	#PIC_PCIX_READ_BUF_9_ADDR
 0x00000A90

	)

864 
	#PIC_PCIX_READ_BUF_9_ATTRIBUTE
 0x00000A98

	)

867 
	#PIC_PCIX_READ_BUF_10_ADDR
 0x00000AA0

	)

870 
	#PIC_PCIX_READ_BUF_10_ATTRIBUTE
 0x00000AA8

	)

873 
	#PIC_PCIX_READ_BUF_11_ADDR
 0x00000AB0

	)

876 
	#PIC_PCIX_READ_BUF_11_ATTRIBUTE
 0x00000AB8

	)

879 
	#PIC_PCIX_READ_BUF_12_ADDR
 0x00000AC0

	)

882 
	#PIC_PCIX_READ_BUF_12_ATTRIBUTE
 0x00000AC8

	)

885 
	#PIC_PCIX_READ_BUF_13_ADDR
 0x00000AD0

	)

888 
	#PIC_PCIX_READ_BUF_13_ATTRIBUTE
 0x00000AD8

	)

891 
	#PIC_PCIX_READ_BUF_14_ADDR
 0x00000AE0

	)

894 
	#PIC_PCIX_READ_BUF_14_ATTRIBUTE
 0x00000AE8

	)

897 
	#PIC_PCIX_READ_BUF_15_ADDR
 0x00000AF0

	)

900 
	#PIC_PCIX_READ_BUF_15_ATTRIBUTE
 0x00000AF8

	)

903 
	#PIC_PCIX_WRITE_BUF_0_ADDR
 0x00000B00

	)

906 
	#PIC_PCIX_WRITE_BUF_0_ATTRIBUTE
 0x00000B08

	)

909 
	#PIC_PCIX_WRITE_BUF_0_VALID
 0x00000B10

	)

912 
	#PIC_PCIX_WRITE_BUF_1_ADDR
 0x00000B20

	)

915 
	#PIC_PCIX_WRITE_BUF_1_ATTRIBUTE
 0x00000B28

	)

918 
	#PIC_PCIX_WRITE_BUF_1_VALID
 0x00000B30

	)

921 
	#PIC_PCIX_WRITE_BUF_2_ADDR
 0x00000B40

	)

924 
	#PIC_PCIX_WRITE_BUF_2_ATTRIBUTE
 0x00000B48

	)

927 
	#PIC_PCIX_WRITE_BUF_2_VALID
 0x00000B50

	)

930 
	#PIC_PCIX_WRITE_BUF_3_ADDR
 0x00000B60

	)

933 
	#PIC_PCIX_WRITE_BUF_3_ATTRIBUTE
 0x00000B68

	)

936 
	#PIC_PCIX_WRITE_BUF_3_VALID
 0x00000B70

	)

939 
	#PIC_PCIX_WRITE_BUF_4_ADDR
 0x00000B80

	)

942 
	#PIC_PCIX_WRITE_BUF_4_ATTRIBUTE
 0x00000B88

	)

945 
	#PIC_PCIX_WRITE_BUF_4_VALID
 0x00000B90

	)

948 
	#PIC_PCIX_WRITE_BUF_5_ADDR
 0x00000BA0

	)

951 
	#PIC_PCIX_WRITE_BUF_5_ATTRIBUTE
 0x00000BA8

	)

954 
	#PIC_PCIX_WRITE_BUF_5_VALID
 0x00000BB0

	)

957 
	#PIC_PCIX_WRITE_BUF_6_ADDR
 0x00000BC0

	)

960 
	#PIC_PCIX_WRITE_BUF_6_ATTRIBUTE
 0x00000BC8

	)

963 
	#PIC_PCIX_WRITE_BUF_6_VALID
 0x00000BD0

	)

966 
	#PIC_PCIX_WRITE_BUF_7_ADDR
 0x00000BE0

	)

969 
	#PIC_PCIX_WRITE_BUF_7_ATTRIBUTE
 0x00000BE8

	)

972 
	#PIC_PCIX_WRITE_BUF_7_VALID
 0x00000BF0

	)

987 
	upic_id_ªg_u
 {

988 
pi¸eg_t
 
	mpic_id_ªg_ªgvÆ
;

990 
	mpi¸eg_t
 : 32;

991 
pi¸eg_t
 
	mªv_num
 : 4;

992 
pi¸eg_t
 
	m∑π_num
 : 16;

993 
pi¸eg_t
 
	mmfg_num
 : 11;

994 
	mpi¸eg_t
 : 1;

995 } 
	mpic_id_ªg_Êd_s
;

996 } 
	tpic_id_ªg_u_t
;

1003 
	upic_°©_ªg_u
 {

1004 
pi¸eg_t
 
	mpic_°©_ªg_ªgvÆ
;

1006 
	mpi¸eg_t
 : 28;

1007 
pi¸eg_t
 
	mpci_x_•ìd
 : 2;

1008 
pi¸eg_t
 
	mpci_x_a˘ive
 : 1;

1009 
	mpi¸eg_t
 : 1;

1010 
pi¸eg_t
 
	mŒp_ªc_˙t
 : 8;

1011 
pi¸eg_t
 
	mŒp_tx_˙t
 : 8;

1012 
pi¸eg_t
 
	mrx_¸edô_˙t
 : 4;

1013 
pi¸eg_t
 
	mtx_¸edô_˙t
 : 4;

1014 
pi¸eg_t
 
	mpci_misc_öput
 : 8;

1015 } 
	mpic_°©_ªg_Êd_s
;

1016 } 
	tpic_°©_ªg_u_t
;

1025 
	upic_uµî_bus_îr_u
 {

1026 
pi¸eg_t
 
	mpic_uµî_bus_îr_ªgvÆ
;

1028 
	mpi¸eg_t
 : 32;

1029 
	mpi¸eg_t
 : 16;

1030 
pi¸eg_t
 
	muµ_addr
 : 16;

1031 } 
	mpic_uµî_bus_îr_Êd_s
;

1032 } 
	tpic_uµî_bus_îr_u_t
;

1041 
	upic_lowî_bus_îr_u
 {

1042 
pi¸eg_t
 
	mpic_lowî_bus_îr_ªgvÆ
;

1044 
	mpi¸eg_t
 : 16;

1045 
pi¸eg_t
 
	muµ_addr
 : 16;

1046 
pi¸eg_t
 
	mlow_addr
 : 32;

1047 } 
	mpic_lowî_bus_îr_Êd_s
;

1048 } 
	tpic_lowî_bus_îr_u_t
;

1055 
	upic_c⁄åﬁ_ªg_u
 {

1056 
pi¸eg_t
 
	mpic_c⁄åﬁ_ªg_ªgvÆ
;

1058 
	mpi¸eg_t
 : 32;

1059 
	mpi¸eg_t
 : 4;

1060 
pi¸eg_t
 
	mr°_pö_n
 : 4;

1061 
	mpi¸eg_t
 : 1;

1062 
pi¸eg_t
 
	mmem_sw≠
 : 1;

1063 
pi¸eg_t
 
	m∑ge_size
 : 1;

1064 
	mpi¸eg_t
 : 4;

1065 
pi¸eg_t
 
	mf_bad_pkt
 : 1;

1066 
pi¸eg_t
 
	mŒp_xb¨_¸d
 : 4;

1067 
pi¸eg_t
 
	m˛r_æÕ_˙t
 : 1;

1068 
pi¸eg_t
 
	m˛r_éÕ_˙t
 : 1;

1069 
pi¸eg_t
 
	msys_íd
 : 1;

1070 
	mpi¸eg_t
 : 3;

1071 
pi¸eg_t
 
	mpci_•ìd
 : 2;

1072 
pi¸eg_t
 
	mwidgë_id
 : 4;

1073 } 
	mpic_c⁄åﬁ_ªg_Êd_s
;

1074 } 
	tpic_c⁄åﬁ_ªg_u_t
;

1081 
	upic_pci_ªq_to_u
 {

1082 
pi¸eg_t
 
	mpic_pci_ªq_to_ªgvÆ
;

1084 
	mpi¸eg_t
 : 32;

1085 
	mpi¸eg_t
 : 12;

1086 
pi¸eg_t
 
	mtime_out
 : 20;

1087 } 
	mpic_pci_ªq_to_Êd_s
;

1088 } 
	tpic_pci_ªq_to_u_t
;

1097 
	upic_öt_desc_uµî_u
 {

1098 
pi¸eg_t
 
	mpic_öt_desc_uµî_ªgvÆ
;

1100 
	mpi¸eg_t
 : 32;

1101 
	mpi¸eg_t
 : 12;

1102 
pi¸eg_t
 
	mèrgë_id
 : 4;

1103 
pi¸eg_t
 
	muµ_addr
 : 16;

1104 } 
	mpic_öt_desc_uµî_Êd_s
;

1105 } 
	tpic_öt_desc_uµî_u_t
;

1114 
	upic_öt_desc_lowî_u
 {

1115 
pi¸eg_t
 
	mpic_öt_desc_lowî_ªgvÆ
;

1117 
	mpi¸eg_t
 : 12;

1118 
pi¸eg_t
 
	mèrgë_id
 : 4;

1119 
pi¸eg_t
 
	muµ_addr
 : 16;

1120 
pi¸eg_t
 
	mlow_addr
 : 32;

1121 } 
	mpic_öt_desc_lowî_Êd_s
;

1122 } 
	tpic_öt_desc_lowî_u_t
;

1131 
	upic_cmd_w‹d_bus_îr_u
 {

1132 
pi¸eg_t
 
	mpic_cmd_w‹d_bus_îr_ªgvÆ
;

1134 
	mpi¸eg_t
 : 32;

1135 
pi¸eg_t
 
	mdidn
 : 4;

1136 
pi¸eg_t
 
	msidn
 : 4;

1137 
pi¸eg_t
 
	m∑˘yp
 : 4;

1138 
pi¸eg_t
 
	mäum
 : 5;

1139 
pi¸eg_t
 
	mcohîít
 : 1;

1140 
pi¸eg_t
 
	mds
 : 2;

1141 
pi¸eg_t
 
	mgbr
 : 1;

1142 
pi¸eg_t
 
	mvbpm
 : 1;

1143 
pi¸eg_t
 
	mîr‹
 : 1;

1144 
pi¸eg_t
 
	mb¨rõr
 : 1;

1145 
	mpi¸eg_t
 : 8;

1146 } 
	mpic_cmd_w‹d_bus_îr_Êd_s
;

1147 } 
	tpic_cmd_w‹d_bus_îr_u_t
;

1154 
	upic_Œp_cfg_u
 {

1155 
pi¸eg_t
 
	mpic_Œp_cfg_ªgvÆ
;

1157 
	mpi¸eg_t
 : 32;

1158 
	mpi¸eg_t
 : 6;

1159 
pi¸eg_t
 
	mŒp_maxªåy
 : 10;

1160 
pi¸eg_t
 
	mŒp_nuŒtimeout
 : 6;

1161 
pi¸eg_t
 
	mŒp_maxbur°
 : 10;

1162 } 
	mpic_Œp_cfg_Êd_s
;

1163 } 
	tpic_Œp_cfg_u_t
;

1180 
	upic_cmd_w‹d_lök_îr_u
 {

1181 
pi¸eg_t
 
	mpic_cmd_w‹d_lök_îr_ªgvÆ
;

1183 
	mpi¸eg_t
 : 32;

1184 
pi¸eg_t
 
	mdidn
 : 4;

1185 
pi¸eg_t
 
	msidn
 : 4;

1186 
pi¸eg_t
 
	m∑˘yp
 : 4;

1187 
pi¸eg_t
 
	mäum
 : 5;

1188 
pi¸eg_t
 
	mcohîít
 : 1;

1189 
pi¸eg_t
 
	mds
 : 2;

1190 
pi¸eg_t
 
	mgbr
 : 1;

1191 
pi¸eg_t
 
	mvbpm
 : 1;

1192 
pi¸eg_t
 
	mîr‹
 : 1;

1193 
pi¸eg_t
 
	mb¨rõr
 : 1;

1194 
	mpi¸eg_t
 : 8;

1195 } 
	mpic_cmd_w‹d_lök_îr_Êd_s
;

1196 } 
	tpic_cmd_w‹d_lök_îr_u_t
;

1205 
	upic_pci_rbuf_îr_uµî_u
 {

1206 
pi¸eg_t
 
	mpic_pci_rbuf_îr_uµî_ªgvÆ
;

1208 
	mpi¸eg_t
 : 32;

1209 
	mpi¸eg_t
 : 9;

1210 
pi¸eg_t
 
	mdev_num
 : 3;

1211 
pi¸eg_t
 
	mbuff_num
 : 4;

1212 
pi¸eg_t
 
	muµ_addr
 : 16;

1213 } 
	mpic_pci_rbuf_îr_uµî_Êd_s
;

1214 } 
	tpic_pci_rbuf_îr_uµî_u_t
;

1223 
	upic_pci_rbuf_îr_lowî_u
 {

1224 
pi¸eg_t
 
	mpic_pci_rbuf_îr_lowî_ªgvÆ
;

1226 
	mpi¸eg_t
 : 9;

1227 
pi¸eg_t
 
	mdev_num
 : 3;

1228 
pi¸eg_t
 
	mbuff_num
 : 4;

1229 
pi¸eg_t
 
	muµ_addr
 : 16;

1230 
pi¸eg_t
 
	mlow_addr
 : 32;

1231 } 
	mpic_pci_rbuf_îr_lowî_Êd_s
;

1232 } 
	tpic_pci_rbuf_îr_lowî_u_t
;

1239 
	upic_ã°_pö_˙é_u
 {

1240 
pi¸eg_t
 
	mpic_ã°_pö_˙é_ªgvÆ
;

1242 
	mpi¸eg_t
 : 32;

1243 
	mpi¸eg_t
 : 8;

1244 
pi¸eg_t
 
	mtd©a_out
 : 8;

1245 
pi¸eg_t
 
	m£l_çö_7
 : 2;

1246 
pi¸eg_t
 
	m£l_çö_6
 : 2;

1247 
pi¸eg_t
 
	m£l_çö_5
 : 2;

1248 
pi¸eg_t
 
	m£l_çö_4
 : 2;

1249 
pi¸eg_t
 
	m£l_çö_3
 : 2;

1250 
pi¸eg_t
 
	m£l_çö_2
 : 2;

1251 
pi¸eg_t
 
	m£l_çö_1
 : 2;

1252 
pi¸eg_t
 
	m£l_çö_0
 : 2;

1253 } 
	mpic_ã°_pö_˙é_Êd_s
;

1254 } 
	tpic_ã°_pö_˙é_u_t
;

1263 
	upic_p_addr_lkîr_u
 {

1264 
pi¸eg_t
 
	mpic_p_addr_lkîr_ªgvÆ
;

1266 
	mpi¸eg_t
 : 16;

1267 
pi¸eg_t
 
	muµ_addr
 : 16;

1268 
pi¸eg_t
 
	mlow_addr
 : 32;

1269 } 
	mpic_p_addr_lkîr_Êd_s
;

1270 } 
	tpic_p_addr_lkîr_u_t
;

1277 
	upic_p_dú_m≠_u
 {

1278 
pi¸eg_t
 
	mpic_p_dú_m≠_ªgvÆ
;

1280 
	mpi¸eg_t
 : 32;

1281 
	mpi¸eg_t
 : 8;

1282 
pi¸eg_t
 
	mdú_w_id
 : 4;

1283 
	mpi¸eg_t
 : 2;

1284 
pi¸eg_t
 
	mdú_add512
 : 1;

1285 
pi¸eg_t
 
	mdú_off
 : 17;

1286 } 
	mpic_p_dú_m≠_Êd_s
;

1287 } 
	tpic_p_dú_m≠_u_t
;

1294 
	upic_p_m≠_Áu…_u
 {

1295 
pi¸eg_t
 
	mpic_p_m≠_Áu…_ªgvÆ
;

1297 
	mpi¸eg_t
 : 32;

1298 
	mpi¸eg_t
 : 10;

1299 
pi¸eg_t
 
	mpci_addr
 : 18;

1300 
	mpi¸eg_t
 : 1;

1301 
pi¸eg_t
 
	mpci_dev_num
 : 3;

1302 } 
	mpic_p_m≠_Áu…_Êd_s
;

1303 } 
	tpic_p_m≠_Áu…_u_t
;

1310 
	upic_p_¨b_u
 {

1311 
pi¸eg_t
 
	mpic_p_¨b_ªgvÆ
;

1313 
	mpi¸eg_t
 : 32;

1314 
	mpi¸eg_t
 : 8;

1315 
pi¸eg_t
 
	mdev_broke
 : 4;

1316 
	mpi¸eg_t
 : 2;

1317 
pi¸eg_t
 
	mªq_waô_tick
 : 2;

1318 
	mpi¸eg_t
 : 4;

1319 
pi¸eg_t
 
	mªq_waô_í
 : 4;

1320 
pi¸eg_t
 
	mdißrb
 : 1;

1321 
pi¸eg_t
 
	m‰ìze_g¡
 : 1;

1322 
	mpi¸eg_t
 : 1;

1323 
pi¸eg_t
 
	mí_bridge_hi
 : 2;

1324 
	mpi¸eg_t
 : 1;

1325 
pi¸eg_t
 
	mí_bridge_lo
 : 2;

1326 } 
	mpic_p_¨b_Êd_s
;

1327 } 
	tpic_p_¨b_u_t
;

1333 
	upic_p_øm_≥º_u
 {

1334 
pi¸eg_t
 
	mpic_p_øm_≥º_ªgvÆ
;

1336 
	mpi¸eg_t
 : 6;

1337 
pi¸eg_t
 
	m©e_îr_addr
 : 10;

1338 
	mpi¸eg_t
 : 7;

1339 
pi¸eg_t
 
	mrd_ª•_îr_addr
 : 9;

1340 
pi¸eg_t
 
	mwπ_ª•_îr_addr
 : 8;

1341 
	mpi¸eg_t
 : 2;

1342 
pi¸eg_t
 
	m©e_îr
 : 1;

1343 
pi¸eg_t
 
	mrd_ª•_îr
 : 1;

1344 
pi¸eg_t
 
	mwπ_ª•_îr
 : 1;

1345 
pi¸eg_t
 
	mdbe_©e
 : 3;

1346 
pi¸eg_t
 
	mdbe_rd
 : 8;

1347 
pi¸eg_t
 
	mdbe_wπ
 : 8;

1348 } 
	mpic_p_øm_≥º_Êd_s
;

1349 } 
	tpic_p_øm_≥º_u_t
;

1356 
	upic_p_bus_timeout_u
 {

1357 
pi¸eg_t
 
	mpic_p_bus_timeout_ªgvÆ
;

1359 
	mpi¸eg_t
 : 32;

1360 
	mpi¸eg_t
 : 11;

1361 
pi¸eg_t
 
	mpci_ªåy_hld
 : 5;

1362 
	mpi¸eg_t
 : 6;

1363 
pi¸eg_t
 
	mpci_ªåy_˙t
 : 10;

1364 } 
	mpic_p_bus_timeout_Êd_s
;

1365 } 
	tpic_p_bus_timeout_u_t
;

1373 
	upic_ty≥1_cfg_u
 {

1374 
pi¸eg_t
 
	mpic_ty≥1_cfg_ªgvÆ
;

1376 
	mpi¸eg_t
 : 32;

1377 
	mpi¸eg_t
 : 8;

1378 
pi¸eg_t
 
	mbus_num
 : 8;

1379 
pi¸eg_t
 
	mdev_num
 : 5;

1380 
	mpi¸eg_t
 : 11;

1381 } 
	mpic_ty≥1_cfg_Êd_s
;

1382 } 
	tpic_ty≥1_cfg_u_t
;

1389 
	upic_p_pci_îr_uµî_u
 {

1390 
pi¸eg_t
 
	mpic_p_pci_îr_uµî_ªgvÆ
;

1392 
	mpi¸eg_t
 : 32;

1393 
	mpi¸eg_t
 : 4;

1394 
pi¸eg_t
 
	mpci_xèlk_did
 : 4;

1395 
	mpi¸eg_t
 : 2;

1396 
pi¸eg_t
 
	mpci_dac
 : 1;

1397 
pi¸eg_t
 
	mpci_dev_ma°î
 : 1;

1398 
pi¸eg_t
 
	mpci_vdev
 : 1;

1399 
pi¸eg_t
 
	mpci_dev_num
 : 3;

1400 
pi¸eg_t
 
	mpci_uaddr_îr
 : 16;

1401 } 
	mpic_p_pci_îr_uµî_Êd_s
;

1402 } 
	tpic_p_pci_îr_uµî_u_t
;

1409 
	upic_p_pci_îr_lowî_u
 {

1410 
pi¸eg_t
 
	mpic_p_pci_îr_lowî_ªgvÆ
;

1412 
	mpi¸eg_t
 : 4;

1413 
pi¸eg_t
 
	mpci_xèlk_did
 : 4;

1414 
	mpi¸eg_t
 : 2;

1415 
pi¸eg_t
 
	mpci_dac
 : 1;

1416 
pi¸eg_t
 
	mpci_dev_ma°î
 : 1;

1417 
pi¸eg_t
 
	mpci_vdev
 : 1;

1418 
pi¸eg_t
 
	mpci_dev_num
 : 3;

1419 
pi¸eg_t
 
	mpci_uaddr_îr
 : 16;

1420 
pi¸eg_t
 
	mpci_œddr_îr
 : 32;

1421 } 
	mpic_p_pci_îr_lowî_Êd_s
;

1422 } 
	tpic_p_pci_îr_lowî_u_t
;

1429 
	upic_p_pcix_îr_addr_u
 {

1430 
pi¸eg_t
 
	mpic_p_pcix_îr_addr_ªgvÆ
;

1432 
pi¸eg_t
 
	mpcix_îr_addr
 : 64;

1433 } 
	mpic_p_pcix_îr_addr_Êd_s
;

1434 } 
	tpic_p_pcix_îr_addr_u_t
;

1441 
	upic_p_pcix_îr_©å_u
 {

1442 
pi¸eg_t
 
	mpic_p_pcix_îr_©å_ªgvÆ
;

1444 
	mpi¸eg_t
 : 16;

1445 
pi¸eg_t
 
	mbus_cmd
 : 4;

1446 
pi¸eg_t
 
	mbyã_˙t
 : 12;

1447 
	mpi¸eg_t
 : 1;

1448 
pi¸eg_t
 
	mns
 : 1;

1449 
pi¸eg_t
 
	mro
 : 1;

1450 
pi¸eg_t
 
	mèg
 : 5;

1451 
pi¸eg_t
 
	mbus_num
 : 8;

1452 
pi¸eg_t
 
	mdev_num
 : 5;

1453 
pi¸eg_t
 
	mfun_num
 : 3;

1454 
pi¸eg_t
 
	ml_byã_˙t
 : 8;

1455 } 
	mpic_p_pcix_îr_©å_Êd_s
;

1456 } 
	tpic_p_pcix_îr_©å_u_t
;

1462 
	upic_p_pcix_îr_d©a_u
 {

1463 
pi¸eg_t
 
	mpic_p_pcix_îr_d©a_ªgvÆ
;

1465 
pi¸eg_t
 
	mpcix_îr_d©a
 : 64;

1466 } 
	mpic_p_pcix_îr_d©a_Êd_s
;

1467 } 
	tpic_p_pcix_îr_d©a_u_t
;

1473 
	upic_p_pcix_ªad_ªq_to_u
 {

1474 
pi¸eg_t
 
	mpic_p_pcix_ªad_ªq_to_ªgvÆ
;

1476 
	mpi¸eg_t
 : 55;

1477 
pi¸eg_t
 
	mrd_buff_loc
 : 5;

1478 
pi¸eg_t
 
	mrd_buff_°ru˘
 : 4;

1479 } 
	mpic_p_pcix_ªad_ªq_to_Êd_s
;

1480 } 
	tpic_p_pcix_ªad_ªq_to_u_t
;

1490 
	upic_p_öt_°©us_u
 {

1491 
pi¸eg_t
 
	mpic_p_öt_°©us_ªgvÆ
;

1493 
	mpi¸eg_t
 : 22;

1494 
pi¸eg_t
 
	möt_øm_≥º
 : 1;

1495 
pi¸eg_t
 
	mbus_¨b_broke
 : 1;

1496 
pi¸eg_t
 
	mpci_x_ªq_tout
 : 1;

1497 
pi¸eg_t
 
	mpci_x_èb‹t
 : 1;

1498 
pi¸eg_t
 
	mpci_x_≥º
 : 1;

1499 
pi¸eg_t
 
	mpci_x_£º
 : 1;

1500 
pi¸eg_t
 
	mpci_x_mªåy
 : 1;

1501 
pi¸eg_t
 
	mpci_x_mtout
 : 1;

1502 
pi¸eg_t
 
	mpci_x_da_∑rôy
 : 1;

1503 
pi¸eg_t
 
	mpci_x_ad_∑rôy
 : 1;

1504 
	mpi¸eg_t
 : 1;

1505 
pi¸eg_t
 
	mpmu_∑ge_Áu…
 : 1;

1506 
pi¸eg_t
 
	mu√x≥˘ed_ª•
 : 1;

1507 
pi¸eg_t
 
	mbad_xª•_∑ckë
 : 1;

1508 
pi¸eg_t
 
	mbad_xªq_∑ckë
 : 1;

1509 
pi¸eg_t
 
	mª•_xèlk_îr‹
 : 1;

1510 
pi¸eg_t
 
	mªq_xèlk_îr‹
 : 1;

1511 
pi¸eg_t
 
	mövÆid_ac˚ss
 : 1;

1512 
pi¸eg_t
 
	munsuµ‹ãd_x›
 : 1;

1513 
pi¸eg_t
 
	mxªq_fifo_oÊow
 : 1;

1514 
pi¸eg_t
 
	mŒp_ªc_¢îr‹
 : 1;

1515 
pi¸eg_t
 
	mŒp_ªc_cbîr‹
 : 1;

1516 
pi¸eg_t
 
	mŒp_r˘y
 : 1;

1517 
pi¸eg_t
 
	mŒp_tx_ªåy
 : 1;

1518 
pi¸eg_t
 
	mŒp_t˘y
 : 1;

1519 
	mpi¸eg_t
 : 1;

1520 
pi¸eg_t
 
	mpci_ab‹t
 : 1;

1521 
pi¸eg_t
 
	mpci_∑rôy
 : 1;

1522 
pi¸eg_t
 
	mpci_£º
 : 1;

1523 
pi¸eg_t
 
	mpci_≥º
 : 1;

1524 
pi¸eg_t
 
	mpci_ma°î_tout
 : 1;

1525 
pi¸eg_t
 
	mpci_ªåy_˙t
 : 1;

1526 
pi¸eg_t
 
	mxªad_ªq_tout
 : 1;

1527 
	mpi¸eg_t
 : 1;

1528 
pi¸eg_t
 
	möt_°©e
 : 8;

1529 } 
	mpic_p_öt_°©us_Êd_s
;

1530 } 
	tpic_p_öt_°©us_u_t
;

1538 
	upic_p_öt_íabÀ_u
 {

1539 
pi¸eg_t
 
	mpic_p_öt_íabÀ_ªgvÆ
;

1541 
	mpi¸eg_t
 : 22;

1542 
pi¸eg_t
 
	mí_öt_øm_≥º
 : 1;

1543 
pi¸eg_t
 
	mí_bus_¨b_broke
 : 1;

1544 
pi¸eg_t
 
	mí_pci_x_ªq_tout
 : 1;

1545 
pi¸eg_t
 
	mí_pci_x_èb‹t
 : 1;

1546 
pi¸eg_t
 
	mí_pci_x_≥º
 : 1;

1547 
pi¸eg_t
 
	mí_pci_x_£º
 : 1;

1548 
pi¸eg_t
 
	mí_pci_x_mªåy
 : 1;

1549 
pi¸eg_t
 
	mí_pci_x_mtout
 : 1;

1550 
pi¸eg_t
 
	mí_pci_x_da_∑rôy
 : 1;

1551 
pi¸eg_t
 
	mí_pci_x_ad_∑rôy
 : 1;

1552 
	mpi¸eg_t
 : 1;

1553 
pi¸eg_t
 
	mí_pmu_∑ge_Áu…
 : 1;

1554 
pi¸eg_t
 
	mí_u√x≥˘ed_ª•
 : 1;

1555 
pi¸eg_t
 
	mí_bad_xª•_∑ckë
 : 1;

1556 
pi¸eg_t
 
	mí_bad_xªq_∑ckë
 : 1;

1557 
pi¸eg_t
 
	mí_ª•_xèlk_îr‹
 : 1;

1558 
pi¸eg_t
 
	mí_ªq_xèlk_îr‹
 : 1;

1559 
pi¸eg_t
 
	mí_övÆid_ac˚ss
 : 1;

1560 
pi¸eg_t
 
	mí_unsuµ‹ãd_x›
 : 1;

1561 
pi¸eg_t
 
	mí_xªq_fifo_oÊow
 : 1;

1562 
pi¸eg_t
 
	mí_Œp_ªc_¢îr‹
 : 1;

1563 
pi¸eg_t
 
	mí_Œp_ªc_cbîr‹
 : 1;

1564 
pi¸eg_t
 
	mí_Œp_r˘y
 : 1;

1565 
pi¸eg_t
 
	mí_Œp_tx_ªåy
 : 1;

1566 
pi¸eg_t
 
	mí_Œp_t˘y
 : 1;

1567 
	mpi¸eg_t
 : 1;

1568 
pi¸eg_t
 
	mí_pci_ab‹t
 : 1;

1569 
pi¸eg_t
 
	mí_pci_∑rôy
 : 1;

1570 
pi¸eg_t
 
	mí_pci_£º
 : 1;

1571 
pi¸eg_t
 
	mí_pci_≥º
 : 1;

1572 
pi¸eg_t
 
	mí_pci_ma°î_tout
 : 1;

1573 
pi¸eg_t
 
	mí_pci_ªåy_˙t
 : 1;

1574 
pi¸eg_t
 
	mí_xªad_ªq_tout
 : 1;

1575 
	mpi¸eg_t
 : 1;

1576 
pi¸eg_t
 
	mí_öt_°©e
 : 8;

1577 } 
	mpic_p_öt_íabÀ_Êd_s
;

1578 } 
	tpic_p_öt_íabÀ_u_t
;

1585 
	upic_p_öt_r°_u
 {

1586 
pi¸eg_t
 
	mpic_p_öt_r°_ªgvÆ
;

1588 
	mpi¸eg_t
 : 22;

1589 
pi¸eg_t
 
	mlogv_öt_øm_≥º
 : 1;

1590 
pi¸eg_t
 
	mlogv_bus_¨b_broke
 : 1;

1591 
pi¸eg_t
 
	mlogv_pci_x_ªq_tout
 : 1;

1592 
pi¸eg_t
 
	mlogv_pci_x_èb‹t
 : 1;

1593 
pi¸eg_t
 
	mlogv_pci_x_≥º
 : 1;

1594 
pi¸eg_t
 
	mlogv_pci_x_£º
 : 1;

1595 
pi¸eg_t
 
	mlogv_pci_x_mªåy
 : 1;

1596 
pi¸eg_t
 
	mlogv_pci_x_mtout
 : 1;

1597 
pi¸eg_t
 
	mlogv_pci_x_da_∑rôy
 : 1;

1598 
pi¸eg_t
 
	mlogv_pci_x_ad_∑rôy
 : 1;

1599 
	mpi¸eg_t
 : 1;

1600 
pi¸eg_t
 
	mlogv_pmu_∑ge_Áu…
 : 1;

1601 
pi¸eg_t
 
	mlogv_u√x≥˘ed_ª•
 : 1;

1602 
pi¸eg_t
 
	mlogv_bad_xª•_∑ckë
 : 1;

1603 
pi¸eg_t
 
	mlogv_bad_xªq_∑ckë
 : 1;

1604 
pi¸eg_t
 
	mlogv_ª•_xèlk_îr‹
 : 1;

1605 
pi¸eg_t
 
	mlogv_ªq_xèlk_îr‹
 : 1;

1606 
pi¸eg_t
 
	mlogv_övÆid_ac˚ss
 : 1;

1607 
pi¸eg_t
 
	mlogv_unsuµ‹ãd_x›
 : 1;

1608 
pi¸eg_t
 
	mlogv_xªq_fifo_oÊow
 : 1;

1609 
pi¸eg_t
 
	mlogv_Œp_ªc_¢îr‹
 : 1;

1610 
pi¸eg_t
 
	mlogv_Œp_ªc_cbîr‹
 : 1;

1611 
pi¸eg_t
 
	mlogv_Œp_r˘y
 : 1;

1612 
pi¸eg_t
 
	mlogv_Œp_tx_ªåy
 : 1;

1613 
pi¸eg_t
 
	mlogv_Œp_t˘y
 : 1;

1614 
	mpi¸eg_t
 : 1;

1615 
pi¸eg_t
 
	mlogv_pci_ab‹t
 : 1;

1616 
pi¸eg_t
 
	mlogv_pci_∑rôy
 : 1;

1617 
pi¸eg_t
 
	mlogv_pci_£º
 : 1;

1618 
pi¸eg_t
 
	mlogv_pci_≥º
 : 1;

1619 
pi¸eg_t
 
	mlogv_pci_ma°î_tout
 : 1;

1620 
pi¸eg_t
 
	mlogv_pci_ªåy_˙t
 : 1;

1621 
pi¸eg_t
 
	mlogv_xªad_ªq_tout
 : 1;

1622 
	mpi¸eg_t
 : 2;

1623 
pi¸eg_t
 
	mmu…i_˛r
 : 1;

1624 
	mpi¸eg_t
 : 6;

1625 } 
	mpic_p_öt_r°_Êd_s
;

1626 } 
	tpic_p_öt_r°_u_t
;

1633 
	upic_p_öt_mode_u
 {

1634 
pi¸eg_t
 
	mpic_p_öt_mode_ªgvÆ
;

1636 
	mpi¸eg_t
 : 32;

1637 
	mpi¸eg_t
 : 24;

1638 
pi¸eg_t
 
	mí_˛r_pkt
 : 8;

1639 } 
	mpic_p_öt_mode_Êd_s
;

1640 } 
	tpic_p_öt_mode_u_t
;

1647 
	upic_p_öt_devi˚_u
 {

1648 
pi¸eg_t
 
	mpic_p_öt_devi˚_ªgvÆ
;

1650 
	mpi¸eg_t
 : 32;

1651 
	mpi¸eg_t
 : 8;

1652 
pi¸eg_t
 
	möt7_dev
 : 3;

1653 
pi¸eg_t
 
	möt6_dev
 : 3;

1654 
pi¸eg_t
 
	möt5_dev
 : 3;

1655 
pi¸eg_t
 
	möt4_dev
 : 3;

1656 
pi¸eg_t
 
	möt3_dev
 : 3;

1657 
pi¸eg_t
 
	möt2_dev
 : 3;

1658 
pi¸eg_t
 
	möt1_dev
 : 3;

1659 
pi¸eg_t
 
	möt0_dev
 : 3;

1660 } 
	mpic_p_öt_devi˚_Êd_s
;

1661 } 
	tpic_p_öt_devi˚_u_t
;

1668 
	upic_p_öt_ho°_îr_u
 {

1669 
pi¸eg_t
 
	mpic_p_öt_ho°_îr_ªgvÆ
;

1671 
	mpi¸eg_t
 : 32;

1672 
	mpi¸eg_t
 : 24;

1673 
pi¸eg_t
 
	mbridge_îr_Êd
 : 8;

1674 } 
	mpic_p_öt_ho°_îr_Êd_s
;

1675 } 
	tpic_p_öt_ho°_îr_u_t
;

1682 
	upic_p_öt_addr_u
 {

1683 
pi¸eg_t
 
	mpic_p_öt_addr_ªgvÆ
;

1685 
	mpi¸eg_t
 : 8;

1686 
pi¸eg_t
 
	möt_Êd
 : 8;

1687 
pi¸eg_t
 
	möt_addr
 : 48;

1688 } 
	mpic_p_öt_addr_Êd_s
;

1689 } 
	tpic_p_öt_addr_u_t
;

1697 
	upic_p_îr_öt_võw_u
 {

1698 
pi¸eg_t
 
	mpic_p_îr_öt_võw_ªgvÆ
;

1700 
	mpi¸eg_t
 : 22;

1701 
pi¸eg_t
 
	möt_øm_≥º
 : 1;

1702 
pi¸eg_t
 
	mbus_¨b_broke
 : 1;

1703 
pi¸eg_t
 
	mpci_x_ªq_tout
 : 1;

1704 
pi¸eg_t
 
	mpci_x_èb‹t
 : 1;

1705 
pi¸eg_t
 
	mpci_x_≥º
 : 1;

1706 
pi¸eg_t
 
	mpci_x_£º
 : 1;

1707 
pi¸eg_t
 
	mpci_x_mªåy
 : 1;

1708 
pi¸eg_t
 
	mpci_x_mtout
 : 1;

1709 
pi¸eg_t
 
	mpci_x_da_∑rôy
 : 1;

1710 
pi¸eg_t
 
	mpci_x_ad_∑rôy
 : 1;

1711 
	mpi¸eg_t
 : 1;

1712 
pi¸eg_t
 
	mpmu_∑ge_Áu…
 : 1;

1713 
pi¸eg_t
 
	mu√x≥˘ed_ª•
 : 1;

1714 
pi¸eg_t
 
	mbad_xª•_∑ckë
 : 1;

1715 
pi¸eg_t
 
	mbad_xªq_∑ckë
 : 1;

1716 
pi¸eg_t
 
	mª•_xèlk_îr‹
 : 1;

1717 
pi¸eg_t
 
	mªq_xèlk_îr‹
 : 1;

1718 
pi¸eg_t
 
	mövÆid_ac˚ss
 : 1;

1719 
pi¸eg_t
 
	munsuµ‹ãd_x›
 : 1;

1720 
pi¸eg_t
 
	mxªq_fifo_oÊow
 : 1;

1721 
pi¸eg_t
 
	mŒp_ªc_¢îr‹
 : 1;

1722 
pi¸eg_t
 
	mŒp_ªc_cbîr‹
 : 1;

1723 
pi¸eg_t
 
	mŒp_r˘y
 : 1;

1724 
pi¸eg_t
 
	mŒp_tx_ªåy
 : 1;

1725 
pi¸eg_t
 
	mŒp_t˘y
 : 1;

1726 
	mpi¸eg_t
 : 1;

1727 
pi¸eg_t
 
	mpci_ab‹t
 : 1;

1728 
pi¸eg_t
 
	mpci_∑rôy
 : 1;

1729 
pi¸eg_t
 
	mpci_£º
 : 1;

1730 
pi¸eg_t
 
	mpci_≥º
 : 1;

1731 
pi¸eg_t
 
	mpci_ma°î_tout
 : 1;

1732 
pi¸eg_t
 
	mpci_ªåy_˙t
 : 1;

1733 
pi¸eg_t
 
	mxªad_ªq_tout
 : 1;

1734 
	mpi¸eg_t
 : 9;

1735 } 
	mpic_p_îr_öt_võw_Êd_s
;

1736 } 
	tpic_p_îr_öt_võw_u_t
;

1745 
	upic_p_mu…_öt_u
 {

1746 
pi¸eg_t
 
	mpic_p_mu…_öt_ªgvÆ
;

1748 
	mpi¸eg_t
 : 22;

1749 
pi¸eg_t
 
	möt_øm_≥º
 : 1;

1750 
pi¸eg_t
 
	mbus_¨b_broke
 : 1;

1751 
pi¸eg_t
 
	mpci_x_ªq_tout
 : 1;

1752 
pi¸eg_t
 
	mpci_x_èb‹t
 : 1;

1753 
pi¸eg_t
 
	mpci_x_≥º
 : 1;

1754 
pi¸eg_t
 
	mpci_x_£º
 : 1;

1755 
pi¸eg_t
 
	mpci_x_mªåy
 : 1;

1756 
pi¸eg_t
 
	mpci_x_mtout
 : 1;

1757 
pi¸eg_t
 
	mpci_x_da_∑rôy
 : 1;

1758 
pi¸eg_t
 
	mpci_x_ad_∑rôy
 : 1;

1759 
	mpi¸eg_t
 : 1;

1760 
pi¸eg_t
 
	mpmu_∑ge_Áu…
 : 1;

1761 
pi¸eg_t
 
	mu√x≥˘ed_ª•
 : 1;

1762 
pi¸eg_t
 
	mbad_xª•_∑ckë
 : 1;

1763 
pi¸eg_t
 
	mbad_xªq_∑ckë
 : 1;

1764 
pi¸eg_t
 
	mª•_xèlk_îr‹
 : 1;

1765 
pi¸eg_t
 
	mªq_xèlk_îr‹
 : 1;

1766 
pi¸eg_t
 
	mövÆid_ac˚ss
 : 1;

1767 
pi¸eg_t
 
	munsuµ‹ãd_x›
 : 1;

1768 
pi¸eg_t
 
	mxªq_fifo_oÊow
 : 1;

1769 
pi¸eg_t
 
	mŒp_ªc_¢îr‹
 : 1;

1770 
pi¸eg_t
 
	mŒp_ªc_cbîr‹
 : 1;

1771 
pi¸eg_t
 
	mŒp_r˘y
 : 1;

1772 
pi¸eg_t
 
	mŒp_tx_ªåy
 : 1;

1773 
pi¸eg_t
 
	mŒp_t˘y
 : 1;

1774 
	mpi¸eg_t
 : 1;

1775 
pi¸eg_t
 
	mpci_ab‹t
 : 1;

1776 
pi¸eg_t
 
	mpci_∑rôy
 : 1;

1777 
pi¸eg_t
 
	mpci_£º
 : 1;

1778 
pi¸eg_t
 
	mpci_≥º
 : 1;

1779 
pi¸eg_t
 
	mpci_ma°î_tout
 : 1;

1780 
pi¸eg_t
 
	mpci_ªåy_˙t
 : 1;

1781 
pi¸eg_t
 
	mxªad_ªq_tout
 : 1;

1782 
	mpi¸eg_t
 : 1;

1783 
pi¸eg_t
 
	möt_°©e
 : 8;

1784 } 
	mpic_p_mu…_öt_Êd_s
;

1785 } 
	tpic_p_mu…_öt_u_t
;

1813 
	upic_devi˚_ªg_u
 {

1814 
pi¸eg_t
 
	mpic_devi˚_ªg_ªgvÆ
;

1816 
	mpi¸eg_t
 : 32;

1817 
	mpi¸eg_t
 : 2;

1818 
pi¸eg_t
 
	mí_vútuÆ1
 : 1;

1819 
pi¸eg_t
 
	mí_îr‹_lock
 : 1;

1820 
pi¸eg_t
 
	mí_∑ge_chk
 : 1;

1821 
pi¸eg_t
 
	mf‹˚_pci_∑r
 : 1;

1822 
pi¸eg_t
 
	mí_vútuÆ0
 : 1;

1823 
	mpi¸eg_t
 : 1;

1824 
pi¸eg_t
 
	mdú_wπ_gí
 : 1;

1825 
pi¸eg_t
 
	mdev_size
 : 1;

1826 
pi¸eg_t
 
	mªÆ_time
 : 1;

1827 
	mpi¸eg_t
 : 1;

1828 
pi¸eg_t
 
	msw≠_dúe˘
 : 1;

1829 
pi¸eg_t
 
	m¥e„tch
 : 1;

1830 
pi¸eg_t
 
	m¥eci£
 : 1;

1831 
pi¸eg_t
 
	mcohîít
 : 1;

1832 
pi¸eg_t
 
	mb¨rõr
 : 1;

1833 
pi¸eg_t
 
	mgbr
 : 1;

1834 
pi¸eg_t
 
	mdev_sw≠
 : 1;

1835 
pi¸eg_t
 
	mdev_io_mem
 : 1;

1836 
pi¸eg_t
 
	mdev_off
 : 12;

1837 } 
	mpic_devi˚_ªg_Êd_s
;

1838 } 
	tpic_devi˚_ªg_u_t
;

1853 
	upic_p_eví_ª•_u
 {

1854 
pi¸eg_t
 
	mpic_p_eví_ª•_ªgvÆ
;

1856 
	mpi¸eg_t
 : 32;

1857 
pi¸eg_t
 
	mbuff_14_í
 : 1;

1858 
pi¸eg_t
 
	mbuff_14_vdev
 : 2;

1859 
pi¸eg_t
 
	mbuff_14_pdev
 : 1;

1860 
pi¸eg_t
 
	mbuff_12_í
 : 1;

1861 
pi¸eg_t
 
	mbuff_12_vdev
 : 2;

1862 
pi¸eg_t
 
	mbuff_12_pdev
 : 1;

1863 
pi¸eg_t
 
	mbuff_10_í
 : 1;

1864 
pi¸eg_t
 
	mbuff_10_vdev
 : 2;

1865 
pi¸eg_t
 
	mbuff_10_pdev
 : 1;

1866 
pi¸eg_t
 
	mbuff_8_í
 : 1;

1867 
pi¸eg_t
 
	mbuff_8_vdev
 : 2;

1868 
pi¸eg_t
 
	mbuff_8_pdev
 : 1;

1869 
pi¸eg_t
 
	mbuff_6_í
 : 1;

1870 
pi¸eg_t
 
	mbuff_6_vdev
 : 2;

1871 
pi¸eg_t
 
	mbuff_6_pdev
 : 1;

1872 
pi¸eg_t
 
	mbuff_4_í
 : 1;

1873 
pi¸eg_t
 
	mbuff_4_vdev
 : 2;

1874 
pi¸eg_t
 
	mbuff_4_pdev
 : 1;

1875 
pi¸eg_t
 
	mbuff_2_í
 : 1;

1876 
pi¸eg_t
 
	mbuff_2_vdev
 : 2;

1877 
pi¸eg_t
 
	mbuff_2_pdev
 : 1;

1878 
pi¸eg_t
 
	mbuff_0_í
 : 1;

1879 
pi¸eg_t
 
	mbuff_0_vdev
 : 2;

1880 
pi¸eg_t
 
	mbuff_0_pdev
 : 1;

1881 } 
	mpic_p_eví_ª•_Êd_s
;

1882 } 
	tpic_p_eví_ª•_u_t
;

1889 
	upic_p_odd_ª•_u
 {

1890 
pi¸eg_t
 
	mpic_p_odd_ª•_ªgvÆ
;

1892 
	mpi¸eg_t
 : 32;

1893 
pi¸eg_t
 
	mbuff_15_í
 : 1;

1894 
pi¸eg_t
 
	mbuff_15_vdev
 : 2;

1895 
pi¸eg_t
 
	mbuff_15_pdev
 : 1;

1896 
pi¸eg_t
 
	mbuff_13_í
 : 1;

1897 
pi¸eg_t
 
	mbuff_13_vdev
 : 2;

1898 
pi¸eg_t
 
	mbuff_13_pdev
 : 1;

1899 
pi¸eg_t
 
	mbuff_11_í
 : 1;

1900 
pi¸eg_t
 
	mbuff_11_vdev
 : 2;

1901 
pi¸eg_t
 
	mbuff_11_pdev
 : 1;

1902 
pi¸eg_t
 
	mbuff_9_í
 : 1;

1903 
pi¸eg_t
 
	mbuff_9_vdev
 : 2;

1904 
pi¸eg_t
 
	mbuff_9_pdev
 : 1;

1905 
pi¸eg_t
 
	mbuff_7_í
 : 1;

1906 
pi¸eg_t
 
	mbuff_7_vdev
 : 2;

1907 
pi¸eg_t
 
	mbuff_7_pdev
 : 1;

1908 
pi¸eg_t
 
	mbuff_5_í
 : 1;

1909 
pi¸eg_t
 
	mbuff_5_vdev
 : 2;

1910 
pi¸eg_t
 
	mbuff_5_pdev
 : 1;

1911 
pi¸eg_t
 
	mbuff_3_í
 : 1;

1912 
pi¸eg_t
 
	mbuff_3_vdev
 : 2;

1913 
pi¸eg_t
 
	mbuff_3_pdev
 : 1;

1914 
pi¸eg_t
 
	mbuff_1_í
 : 1;

1915 
pi¸eg_t
 
	mbuff_1_vdev
 : 2;

1916 
pi¸eg_t
 
	mbuff_1_pdev
 : 1;

1917 } 
	mpic_p_odd_ª•_Êd_s
;

1918 } 
	tpic_p_odd_ª•_u_t
;

1924 
	upic_p_ª•_°©us_u
 {

1925 
pi¸eg_t
 
	mpic_p_ª•_°©us_ªgvÆ
;

1927 
	mpi¸eg_t
 : 32;

1928 
pi¸eg_t
 
	mºb_vÆid
 : 16;

1929 
pi¸eg_t
 
	mºb_öu£
 : 16;

1930 } 
	mpic_p_ª•_°©us_Êd_s
;

1931 } 
	tpic_p_ª•_°©us_u_t
;

1937 
	upic_p_ª•_˛ór_u
 {

1938 
pi¸eg_t
 
	mpic_p_ª•_˛ór_ªgvÆ
;

1940 
	mpi¸eg_t
 : 32;

1941 
	mpi¸eg_t
 : 16;

1942 
pi¸eg_t
 
	mºb_˛ór
 : 16;

1943 } 
	mpic_p_ª•_˛ór_Êd_s
;

1944 } 
	tpic_p_ª•_˛ór_u_t
;

1952 
	upic_p_buf_uµî_addr_m©ch_u
 {

1953 
pi¸eg_t
 
	mpic_p_buf_uµî_addr_m©ch_ªgvÆ
;

1955 
	mpi¸eg_t
 : 32;

1956 
pi¸eg_t
 
	mfûÀd
 : 1;

1957 
pi¸eg_t
 
	m¨med
 : 1;

1958 
pi¸eg_t
 
	mÊush
 : 1;

1959 
pi¸eg_t
 
	mxîr
 : 1;

1960 
pi¸eg_t
 
	mpkãº
 : 1;

1961 
pi¸eg_t
 
	mtimeout
 : 1;

1962 
pi¸eg_t
 
	m¥e„tch
 : 1;

1963 
pi¸eg_t
 
	m¥eci£
 : 1;

1964 
pi¸eg_t
 
	mdw_be
 : 8;

1965 
pi¸eg_t
 
	muµ_addr
 : 16;

1966 } 
	mpic_p_buf_uµî_addr_m©ch_Êd_s
;

1967 } 
	tpic_p_buf_uµî_addr_m©ch_u_t
;

1975 
	upic_p_buf_lowî_addr_m©ch_u
 {

1976 
pi¸eg_t
 
	mpic_p_buf_lowî_addr_m©ch_ªgvÆ
;

1978 
pi¸eg_t
 
	mfûÀd
 : 1;

1979 
pi¸eg_t
 
	m¨med
 : 1;

1980 
pi¸eg_t
 
	mÊush
 : 1;

1981 
pi¸eg_t
 
	mxîr
 : 1;

1982 
pi¸eg_t
 
	mpkãº
 : 1;

1983 
pi¸eg_t
 
	mtimeout
 : 1;

1984 
pi¸eg_t
 
	m¥e„tch
 : 1;

1985 
pi¸eg_t
 
	m¥eci£
 : 1;

1986 
pi¸eg_t
 
	mdw_be
 : 8;

1987 
pi¸eg_t
 
	muµ_addr
 : 16;

1988 
pi¸eg_t
 
	mlow_addr
 : 32;

1989 } 
	mpic_p_buf_lowî_addr_m©ch_Êd_s
;

1990 } 
	tpic_p_buf_lowî_addr_m©ch_u_t
;

1998 
	upic_Êush_w_touch_u
 {

1999 
pi¸eg_t
 
	mpic_Êush_w_touch_ªgvÆ
;

2001 
	mpi¸eg_t
 : 32;

2002 
	mpi¸eg_t
 : 16;

2003 
pi¸eg_t
 
	mtouch_˙t
 : 16;

2004 } 
	mpic_Êush_w_touch_Êd_s
;

2005 } 
	tpic_Êush_w_touch_u_t
;

2013 
	upic_Êush_wo_touch_u
 {

2014 
pi¸eg_t
 
	mpic_Êush_wo_touch_ªgvÆ
;

2016 
	mpi¸eg_t
 : 32;

2017 
	mpi¸eg_t
 : 16;

2018 
pi¸eg_t
 
	mnŸouch_˙t
 : 16;

2019 } 
	mpic_Êush_wo_touch_Êd_s
;

2020 } 
	tpic_Êush_wo_touch_u_t
;

2027 
	upic_öÊight_u
 {

2028 
pi¸eg_t
 
	mpic_öÊight_ªgvÆ
;

2030 
	mpi¸eg_t
 : 32;

2031 
	mpi¸eg_t
 : 16;

2032 
pi¸eg_t
 
	möÊight_˙t
 : 16;

2033 } 
	mpic_öÊight_Êd_s
;

2034 } 
	tpic_öÊight_u_t
;

2042 
	upic_¥e„tch_u
 {

2043 
pi¸eg_t
 
	mpic_¥e„tch_ªgvÆ
;

2045 
	mpi¸eg_t
 : 32;

2046 
	mpi¸eg_t
 : 16;

2047 
pi¸eg_t
 
	m¥e„tch_˙t
 : 16;

2048 } 
	mpic_¥e„tch_Êd_s
;

2049 } 
	tpic_¥e„tch_u_t
;

2057 
	upic_tŸÆ_pci_ªåy_u
 {

2058 
pi¸eg_t
 
	mpic_tŸÆ_pci_ªåy_ªgvÆ
;

2060 
	mpi¸eg_t
 : 32;

2061 
	mpi¸eg_t
 : 16;

2062 
pi¸eg_t
 
	mªåy_˙t
 : 16;

2063 } 
	mpic_tŸÆ_pci_ªåy_Êd_s
;

2064 } 
	tpic_tŸÆ_pci_ªåy_u_t
;

2072 
	upic_max_pci_ªåy_u
 {

2073 
pi¸eg_t
 
	mpic_max_pci_ªåy_ªgvÆ
;

2075 
	mpi¸eg_t
 : 32;

2076 
	mpi¸eg_t
 : 16;

2077 
pi¸eg_t
 
	mmax_ªåy_˙t
 : 16;

2078 } 
	mpic_max_pci_ªåy_Êd_s
;

2079 } 
	tpic_max_pci_ªåy_u_t
;

2087 
	upic_max_œãncy_u
 {

2088 
pi¸eg_t
 
	mpic_max_œãncy_ªgvÆ
;

2090 
	mpi¸eg_t
 : 32;

2091 
	mpi¸eg_t
 : 16;

2092 
pi¸eg_t
 
	mmax_œãncy_˙t
 : 16;

2093 } 
	mpic_max_œãncy_Êd_s
;

2094 } 
	tpic_max_œãncy_u_t
;

2108 
	upic_rd_buf_addr_u
 {

2109 
pi¸eg_t
 
	mpic_rd_buf_addr_ªgvÆ
;

2111 
pi¸eg_t
 
	mpcix_îr_addr
 : 64;

2112 } 
	mpic_rd_buf_addr_Êd_s
;

2113 } 
	tpic_rd_buf_addr_u_t
;

2120 
	upic_px_ªad_buf_©å_u
 {

2121 
pi¸eg_t
 
	mpic_px_ªad_buf_©å_ªgvÆ
;

2123 
	mpi¸eg_t
 : 16;

2124 
pi¸eg_t
 
	mbus_cmd
 : 4;

2125 
pi¸eg_t
 
	mbyã_˙t
 : 12;

2126 
pi¸eg_t
 
	míåy_vÆid
 : 1;

2127 
pi¸eg_t
 
	mns
 : 1;

2128 
pi¸eg_t
 
	mro
 : 1;

2129 
pi¸eg_t
 
	mèg
 : 5;

2130 
pi¸eg_t
 
	mbus_num
 : 8;

2131 
pi¸eg_t
 
	mdev_num
 : 5;

2132 
pi¸eg_t
 
	mfun_num
 : 3;

2133 
	mpi¸eg_t
 : 2;

2134 
pi¸eg_t
 
	mf_buf„r_ödex
 : 6;

2135 } 
	mpic_px_ªad_buf_©å_Êd_s
;

2136 } 
	tpic_px_ªad_buf_©å_u_t
;

2143 
	upic_px_wrôe_buf_addr_u
 {

2144 
pi¸eg_t
 
	mpic_px_wrôe_buf_addr_ªgvÆ
;

2146 
pi¸eg_t
 
	mpcix_îr_addr
 : 64;

2147 } 
	mpic_px_wrôe_buf_addr_Êd_s
;

2148 } 
	tpic_px_wrôe_buf_addr_u_t
;

2155 
	upic_px_wrôe_buf_©å_u
 {

2156 
pi¸eg_t
 
	mpic_px_wrôe_buf_©å_ªgvÆ
;

2158 
	mpi¸eg_t
 : 16;

2159 
pi¸eg_t
 
	mbus_cmd
 : 4;

2160 
pi¸eg_t
 
	mbyã_˙t
 : 12;

2161 
pi¸eg_t
 
	míåy_vÆid
 : 1;

2162 
pi¸eg_t
 
	mns
 : 1;

2163 
pi¸eg_t
 
	mro
 : 1;

2164 
pi¸eg_t
 
	mèg
 : 5;

2165 
pi¸eg_t
 
	mbus_num
 : 8;

2166 
pi¸eg_t
 
	mdev_num
 : 5;

2167 
pi¸eg_t
 
	mfun_num
 : 3;

2168 
	mpi¸eg_t
 : 2;

2169 
pi¸eg_t
 
	mf_buf„r_ödex
 : 6;

2170 } 
	mpic_px_wrôe_buf_©å_Êd_s
;

2171 } 
	tpic_px_wrôe_buf_©å_u_t
;

2178 
	upic_px_wrôe_buf_vÆid_u
 {

2179 
pi¸eg_t
 
	mpic_px_wrôe_buf_vÆid_ªgvÆ
;

2181 
	mpi¸eg_t
 : 32;

2182 
pi¸eg_t
 
	mwπ_vÆid_buff
 : 32;

2183 } 
	mpic_px_wrôe_buf_vÆid_Êd_s
;

2184 } 
	tpic_px_wrôe_buf_vÆid_u_t
;

	@/usr/include/sys/SN/kldir.h

13 #i‚de‡
__SYS_SN_KLDIR_H__


14 
	#__SYS_SN_KLDIR_H__


	)

28 
	#KLDIR_MAGIC
 0x434d5f53505f5357

	)

30 #ifde‡
LANGUAGE_ASSEMBLY


31 
	#KLDIR_OFF_MAGIC
 0x00

	)

32 
	#KLDIR_OFF_OFFSET
 0x08

	)

33 
	#KLDIR_OFF_POINTER
 0x10

	)

34 
	#KLDIR_OFF_SIZE
 0x18

	)

35 
	#KLDIR_OFF_COUNT
 0x20

	)

36 
	#KLDIR_OFF_STRIDE
 0x28

	)

39 #ifde‡
_LANGUAGE_C


40 
	skldú_ít_s
 {

41 
__uöt64_t
 
	mmagic
;

42 
off_t
 
	moff£t
;

43 
__psunsig√d_t
 
	mpoöãr
;

44 
size_t
 
	msize
;

45 
__uöt64_t
 
	mcou¡
;

46 
size_t
 
	m°ride
;

47 
	mrsvd
[16];

50 } 
	tkldú_ít_t
;

53 
	#KLDIR_ENT_SIZE
 0x40

	)

54 
	#KLDIR_MAX_ENTRIES
 (0x400 / 0x40)

	)

59 #ifde‡
SN0


60 
	~<sys/SN/SN0/kldú.h
>

61 #ñi‡
deföed
(
SN1
)

62 
	~<sys/SN/SN1/kldú.h
>

	@/usr/include/sys/SN/slotnum.h

13 #i‚de‡
__SYS_SN_SLOTNUM_H__


14 
	#__SYS_SN_SLOTNUM_H__


	)

16 
	t¶Ÿid_t
;

18 #i‡
deföed
 (
SN0
)

19 
	~<sys/SN/SN0/¶Ÿnum.h
>

20 #ñi‡
deföed
 (
SN1
)

21 
	~<sys/SN/SN1/¶Ÿnum.h
>

22 #ñi‡
deföed
 (
_KERNEL
)

24 #îr‹ <<
BOMB
! 
¶Ÿnum
 
deföed
 
⁄ly
 
SN0
 
™d
 
SN1
 >>

	@/usr/include/sys/SN/vector.h

13 #i‚de‡
__SYS_SN_VECTOR_H__


14 
	#__SYS_SN_VECTOR_H__


	)

16 
	#NET_VEC_NULL
 ((
√t_vec_t
Ë0)

	)

17 
	#NET_VEC_BAD
 ((
√t_vec_t
Ë-1)

	)

19 #ifde‡
RTL


21 
	#VEC_POLLS_W
 16

	)

22 
	#VEC_POLLS_R
 16

	)

23 
	#VEC_POLLS_X
 16

	)

25 
	#VEC_RETRIES_W
 1

	)

26 
	#VEC_RETRIES_R
 1

	)

27 
	#VEC_RETRIES_X
 1

	)

31 
	#VEC_POLLS_W
 256

	)

32 
	#VEC_POLLS_R
 256

	)

33 
	#VEC_POLLS_X
 256

	)

35 
	#VEC_RETRIES_W
 8

	)

36 
	#VEC_RETRIES_R
 8

	)

37 
	#VEC_RETRIES_X
 4

	)

41 #i‡
deföed
 
SN0


42 
	#VECTOR_PARMS
 
NI_VECTOR_PARMS


	)

43 
	#VECTOR_ROUTE
 
NI_VECTOR


	)

44 
	#VECTOR_DATA
 
NI_VECTOR_DATA


	)

45 
	#VECTOR_STATUS
 
NI_VECTOR_STATUS


	)

46 
	#VECTOR_RETURN
 
NI_RETURN_VECTOR


	)

47 
	#VECTOR_READ_DATA
 
NI_VECTOR_READ_DATA


	)

48 
	#VECTOR_STATUS_CLEAR
 
NI_VECTOR_CLEAR


	)

49 
	#VP_PIOID_SHFT
 
NVP_PIOID_SHFT


	)

50 
	#VP_PIOID_MASK
 
NVP_PIOID_MASK


	)

51 
	#VP_WRITEID_SHFT
 
NVP_WRITEID_SHFT


	)

52 
	#VP_WRITEID_MASK
 
NVP_WRITEID_MASK


	)

53 
	#VP_ADDRESS_MASK
 
NVP_ADDRESS_MASK


	)

54 
	#VP_TYPE_TYPE
 
NVP_TYPE_TYPE


	)

55 
	#VP_TYPE_MASK
 
NVP_TYPE_MASK


	)

56 
	#VS_VALID
 
NVS_VALID


	)

57 
	#VS_OVERRUN
 
NVS_OVERRUN


	)

58 
	#VS_TARGET_SHFT
 
NVS_TARGET_SHFT


	)

59 
	#VS_TARGET_MASK
 
NVS_TARGET_MASK


	)

60 
	#VS_PIOID_SHFT
 
NVS_PIOID_SHFT


	)

61 
	#VS_PIOID_MASK
 
NVS_PIOID_MASK


	)

62 
	#VS_WRITEID_SHFT
 
NVS_WRITEID_SHFT


	)

63 
	#VS_WRITEID_MASK
 
NVS_WRITEID_MASK


	)

64 
	#VS_ADDRESS_MASK
 
NVS_ADDRESS_MASK


	)

65 
	#VS_TYPE_SHFT
 
NVS_TYPE_SHFT


	)

66 
	#VS_TYPE_MASK
 
NVS_TYPE_MASK


	)

67 
	#VS_ERROR_MASK
 
NVS_ERROR_MASK


	)

68 #ñi‡
deföed
 
SN1


69 
	#VECTOR_PARMS
 
LB_VECTOR_PARMS


	)

70 
	#VECTOR_ROUTE
 
LB_VECTOR_ROUTE


	)

71 
	#VECTOR_DATA
 
LB_VECTOR_DATA


	)

72 
	#VECTOR_STATUS
 
LB_VECTOR_STATUS


	)

73 
	#VECTOR_RETURN
 
LB_VECTOR_RETURN


	)

74 
	#VECTOR_READ_DATA
 
LB_VECTOR_READ_DATA


	)

75 
	#VECTOR_STATUS_CLEAR
 
LB_VECTOR_STATUS_CLEAR


	)

76 
	#VP_PIOID_SHFT
 
LVP_PIOID_SHFT


	)

77 
	#VP_PIOID_MASK
 
LVP_PIOID_MASK


	)

78 
	#VP_WRITEID_SHFT
 
LVP_WRITEID_SHFT


	)

79 
	#VP_WRITEID_MASK
 
LVP_WRITEID_MASK


	)

80 
	#VP_ADDRESS_MASK
 
LVP_ADDRESS_MASK


	)

81 
	#VP_TYPE_SHFT
 
LVP_TYPE_SHFT


	)

82 
	#VP_TYPE_MASK
 
LVP_TYPE_MASK


	)

83 
	#VS_VALID
 
LVS_VALID


	)

84 
	#VS_OVERRUN
 
LVS_OVERRUN


	)

85 
	#VS_TARGET_SHFT
 
LVS_TARGET_SHFT


	)

86 
	#VS_TARGET_MASK
 
LVS_TARGET_MASK


	)

87 
	#VS_PIOID_SHFT
 
LVS_PIOID_SHFT


	)

88 
	#VS_PIOID_MASK
 
LVS_PIOID_MASK


	)

89 
	#VS_WRITEID_SHFT
 
LVS_WRITEID_SHFT


	)

90 
	#VS_WRITEID_MASK
 
LVS_WRITEID_MASK


	)

91 
	#VS_ADDRESS_MASK
 
LVS_ADDRESS_MASK


	)

92 
	#VS_TYPE_SHFT
 
LVS_TYPE_SHFT


	)

93 
	#VS_TYPE_MASK
 
LVS_TYPE_MASK


	)

94 
	#VS_ERROR_MASK
 
LVS_ERROR_MASK


	)

97 
	#NET_ERROR_NONE
 0

	)

98 
	#NET_ERROR_HARDWARE
 -1

	)

99 
	#NET_ERROR_OVERRUN
 -2

	)

100 
	#NET_ERROR_REPLY
 -3

	)

101 
	#NET_ERROR_ADDRESS
 -4

	)

102 
	#NET_ERROR_COMMAND
 -5

	)

103 
	#NET_ERROR_PROT
 -6

	)

104 
	#NET_ERROR_TIMEOUT
 -7

	)

105 
	#NET_ERROR_VECTOR
 -8

	)

106 
	#NET_ERROR_ROUTERLOCK
 -9

	)

107 
	#NET_ERROR_INVAL
 -10

	)

109 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

110 
__uöt64_t
 
	t√t_ªg_t
;

111 
__uöt64_t
 
	t√t_vec_t
;

113 
ve˘‹_wrôe
(
√t_vec_t
 
de°
,

114 
wrôe_id
, 
addªss
,

115 
__uöt64_t
 
vÆue
);

117 
ve˘‹_ªad
(
√t_vec_t
 
de°
,

118 
wrôe_id
, 
addªss
,

119 
__uöt64_t
 *
vÆue
);

121 #ifde‡
SN0


122 
ve˘‹_exch
(
√t_vec_t
 
de°
,

123 
wrôe_id
, 
addªss
,

124 
__uöt64_t
 *
vÆue
);

127 
ve˘‹_wrôe_node
(
√t_vec_t
 
de°
, 
«sid_t
 
«sid
,

128 
wrôe_id
, 
addªss
,

129 
__uöt64_t
 
vÆue
);

131 
ve˘‹_ªad_node
(
√t_vec_t
 
de°
, 
«sid_t
 
«sid
,

132 
wrôe_id
, 
addªss
,

133 
__uöt64_t
 *
vÆue
);

135 #ifde‡
SN0


136 
ve˘‹_exch_node
(
√t_vec_t
 
de°
, 
«sid_t
 
«sid
,

137 
wrôe_id
, 
addªss
,

138 
__uöt64_t
 *
vÆue
);

141 
ve˘‹_Àngth
(
√t_vec_t
 
vec
);

142 
√t_vec_t
 
ve˘‹_gë
“ë_vec_à
vec
, 
n
);

143 
√t_vec_t
 
ve˘‹_¥efix
“ë_vec_à
vec
, 
n
);

144 
√t_vec_t
 
ve˘‹_modify
“ë_vec_à
íåy
, 
n
, 
rouã
);

145 
√t_vec_t
 
ve˘‹_ªvî£
“ë_vec_à
vec
);

146 
√t_vec_t
 
ve˘‹_c⁄ˇt
“ë_vec_à
vec1
,Çë_vec_à
vec2
);

148 *
√t_îrmsg
();

150 #i‚de‡
_STANDALONE


151 
hub_ve˘‹_wrôe
(
˙odeid_t
 
˙ode
, 
√t_vec_t
 
ve˘‹
, 
wrôeid
,

152 
addr
, 
√t_ªg_t
 
vÆue
);

153 
hub_ve˘‹_ªad
(
˙odeid_t
 
˙ode
, 
√t_vec_t
 
ve˘‹
, 
wrôeid
,

154 
addr
, 
√t_ªg_t
 *
vÆue
);

	@/usr/include/sys/cdl.h

1 #i‚def 
__CDL_H__


2 
	#__CDL_H__


	)

16 
	~<sys/£ma.h
>

25 
cdl
 *
	tcdl_p
;

33 
	tcdl_ôî_f
 (
	tvîãx_hdl_t
 
	tvhdl
);

42 
	tcdl_drv_f
 (
	tvîãx_hdl_t
 
	tvhdl
, 
	tkey1
, 
	tkey2
, 
	tîr‹
);

61 
	#CDL_PRI_HI
 0x0001

	)

70 
cdl_p
 
cdl_√w
(*, *, *);

81 
cdl_dñ
(
cdl_p
 
ªg
);

99 
cdl_add_drivî
(
cdl_p
 
ªg
,

100 
key1
,

101 
key2
,

102 *
¥efix
,

103 
Êags
,

104 
cdl_drv_f
 *
func
);

126 
cdl_dñ_drivî
(
cdl_p
 
ªg
,

127 *
¥efix
,

128 
cdl_drv_f
 *
func
);

142 
cdl_add_c⁄≈t
(
cdl_p
 
ªg
,

143 
key1
,

144 
key2
,

145 
vîãx_hdl_t
 
c⁄n
,

146 
drv_Êags
);

160 
cdl_dñ_c⁄≈t
(
cdl_p
 
ªg
,

161 
key1
,

162 
key2
,

163 
vîãx_hdl_t
 
c⁄n
,

164 
drv_Êags
);

173 
cdl_ôî©e
(
cdl_p
 
ªg
,

174 *
¥efix
,

175 
cdl_ôî_f
 *
func
);

184 
	sasync_©èch_s
 {

185 
£ma_t
 
	masync_£ma
;

186 
	masync_cou¡
;

188 
async_©èch_s
 *
	tasync_©èch_t
;

190 
async_©èch_t
 
async_©èch_√w
();

191 
async_©èch_‰ì
(
async_©èch_t
);

192 
async_©èch_t
 
async_©èch_gë_öfo
(
vîãx_hdl_t
);

193 
async_©èch_add_öfo
(
vîãx_hdl_t
, 
async_©èch_t
);

194 
async_©èch_dñ_öfo
(
vîãx_hdl_t
);

195 
async_©èch_sig«l_°¨t
(
async_©èch_t
);

196 
async_©èch_sig«l_d⁄e
(
async_©èch_t
);

197 
async_©èch_waôÆl
(
async_©èch_t
);

	@/usr/include/sys/extacct.h

18 #i‚def 
__SYS_EXTACCT_H


19 
	#__SYS_EXTACCT_H


	)

20 #ifde‡
__˝lu•lus


26 
	~<sys/ty≥s.h
>

35 
	#PROC_ACCT_VERSION
 1

	)

36 
	#SESS_ACCT_VERSION
 1

	)

41 
	sac˘_timîs
 {

42 
accum_t
 
ac_utime
;

43 
accum_t
 
ac_°ime
;

44 
accum_t
 
ac_bwtime
;

45 
accum_t
 
ac_rwtime
;

46 
accum_t
 
ac_qwtime
;

47 
accum_t
 
ac_•¨e
[3];

48 } 
	tac˘_timîs_t
;

53 
	sac˘_cou¡s
 {

54 
accum_t
 
ac_mem
;

55 
accum_t
 
ac_sw≠s
;

56 
accum_t
 
ac_chr
;

57 
accum_t
 
ac_chw
;

58 
accum_t
 
ac_br
;

59 
accum_t
 
ac_bw
;

60 
accum_t
 
ac_sys¸
;

61 
accum_t
 
ac_syscw
;

62 
accum_t
 
ac_disk
;

63 
accum_t
 
ac_•¨e
[3];

64 } 
	tac˘_cou¡s_t
;

70 
	sac˘_•i
 {

71 
•i_com∑ny
[8];

72 
•i_öôüt‹
[8];

73 
•i_‹igö
[16];

74 
•i_•i
[16];

75 
•i_•¨e
[16];

76 } 
	tac˘_•i_t
;

81 
	sac˘_•i_2
 {

82 
•i_com∑ny
[8];

83 
•i_öôüt‹
[8];

84 
•i_‹igö
[16];

85 
•i_•i
[16];

86 
•i_•¨e
[16];

87 
•i_job«me
[32];

88 
öt64_t
 
•i_subtime
;

89 
öt64_t
 
•i_exe˘ime
;

90 
öt64_t
 
•i_waôtime
;

91 
öt64_t
 
•i_r§vd
;

92 } 
	tac˘_•i_2_t
;

109 
	sshac˘
 {

110 
sha_ty≥
;

111 
sha_r§vd
[3];

112 
accum_t
 
sha_ioch
;

113 
ac˘_timîs_t
 
sha_timîs
;

114 
ac˘_cou¡s_t
 
sha_cou¡s
;

115 } 
	tshac˘_t
;

118 
	#SHATYPE_PROC
 1

	)

119 
	#SHATYPE_SESS
 2

	)

122 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

124 
¥oc
;

125 
shadowac˘
(
¥oc
 *, );

130 #ifde‡
__˝lu•lus


	@/usr/include/sys/ktypes.h

12 #i‚de‡
_SYS_KTYPES_H


13 
	#_SYS_KTYPES_H


	)

15 
	~<sys/ty≥s.h
>

17 
≠p32_l⁄g_t
 
	túix5_uid_t
;

18 
≠p64_öt_t
 
	túix5_64_uid_t
;

20 
≠p32_l⁄g_t
 
	túix5_gid_t
;

21 
≠p64_öt_t
 
	túix5_64_gid_t
;

23 
≠p32_l⁄g_t
 
	túix5_pid_t
;

24 
≠p64_öt_t
 
	túix5_64_pid_t
;

26 
≠p32_l⁄g_t
 
	túix5_˛ock_t
;

27 
≠p64_öt_t
 
	túix5_64_˛ock_t
;

29 
≠p32_l⁄g_t
 
	túix5_off_t
;

30 
≠p32_l⁄g_t
 
	túix5_size_t
;

31 
≠p32_l⁄g_l⁄g_t
 
	túix5_n32_off_t
;

32 
≠p64_l⁄g_t
 
	túix5_64_off_t
;

34 
__uöt32_t
 
	túix5_Âªg_t
;

35 
__uöt64_t
 
	túix5_64_Âªg_t
;

37 
__öt64_t
 
	túix5_jid_t
;

	@/usr/include/sys/pcb.h

1 #i‚de‡
__SYS_PCB_H__


2 
	#__SYS_PCB_H__


	)

31 
	#PCB_S0
 0

	)

32 
	#PCB_S1
 1

	)

33 
	#PCB_S2
 2

	)

34 
	#PCB_S3
 3

	)

35 
	#PCB_S4
 4

	)

36 
	#PCB_S5
 5

	)

37 
	#PCB_S6
 6

	)

38 
	#PCB_S7
 7

	)

39 
	#PCB_SP
 8

	)

40 
	#PCB_FP
 9

	)

41 
	#PCB_PC
 10

	)

42 
	#PCB_SR
 11

	)

43 
	#PCB_LIOMSK
 12

	)

44 
	#NPCBREGS
 13

	)

46 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

50 
	#JB_S0
 0

	)

51 
	#JB_S1
 1

	)

52 
	#JB_S2
 2

	)

53 
	#JB_S3
 3

	)

54 
	#JB_S4
 4

	)

55 
	#JB_S5
 5

	)

56 
	#JB_S6
 6

	)

57 
	#JB_S7
 7

	)

58 
	#JB_SP
 8

	)

59 
	#JB_FP
 9

	)

60 
	#JB_PC
 10

	)

61 
	#JB_SR
 11

	)

63 
	#JB_LIOMSK
 12

	)

64 
	#JB_CEL
 12

	)

66 
	#NJBREGS
 13

	)

81 
	sssi
 {

82 
	mssi_˙t
;

83 
	sssi_bp
 {

84 *
	mbp_addr
;

85 
	mbp_ö°
;

86 } 
	mssi_bp
[2];

89 
	spcb
 {

90 
__öt32_t
 
	mpcb_ªsched
;

92 
k_machªg_t
 
	mpcb_bd_ïc
;

93 
k_machªg_t
 
	mpcb_bd_ˇu£
;

94 
k_machªg_t
 
	mpcb_bd_ø
;

95 
__öt32_t
 
	mpcb_bd_ö°r
;

97 
k_Âªg_t
 
	mpcb_Âªgs
[32];

98 
k_Âªg_t
 
	mpcb_Â_rounded_ªsu…
;

99 
__öt32_t
 
	mpcb_Âc_c§
;

100 
__öt32_t
 
	mpcb_Âc_eú
;

101 
__öt32_t
 
	mpcb_ow√dÂ
;

102 
ssi
 
	mpcb_ssi
;

103 } 
	tpcb_t
;

105 
	#PCB
(
x
Ë(
cuªx˚±i⁄p
->
u_pcb
.x)

	)

107 
k_machªg_t
 
	tœbñ_t
[
NJBREGS
];

109 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

110 
£tjmp
(
œbñ_t
);

111 
l⁄gjmp
(
œbñ_t
, );

	@/usr/include/sys/pda.h

12 #i‚de‡
__SYS_PDA_H__


13 
	#__SYS_PDA_H__


	)

20 
	spda_°©
 {

21 
	mp_˝uid
;

22 
	mp_Êags
;

26 
	#PDAF_MASTER
 0x0001

	)

27 
	#PDAF_CLOCK
 0x0002

	)

28 
	#PDAF_ENABLED
 0x0004

	)

29 
	#PDAF_FASTCLOCK
 0x0008

	)

30 
	#PDAF_ISOLATED
 0x0010

	)

31 
	#PDAF_BROADCAST_OFF
 0x0020

	)

32 
	#PDAF_NONPREEMPTIVE
 0x0040

	)

33 
	#PDAF_NOINTR
 0x0080

	)

35 
	#PDAF_ITHREADSOK
 0x0100

	)

36 
	#PDAF_DISABLE_CPU
 0x0200

	)

37 
	#PDAF_EXCLUDED
 0x0400

	)

38 
	#PDAF_RTCWARDED
 0x0800

	)

42 
	#PDA_FAILSOFT_CLEAR
 0x00

	)

43 
	#PDA_FAILSOFT_IDLE
 0x01

	)

44 
	#PDA_FAILSOFT_DISABLE
 0x02

	)

47 
	#CNODEID_NONE
 (
˙odeid_t
)-1

	)

49 #ifde‡
_KERNEL


50 
	~<sys/immu.h
>

51 
	~<sys/timîs.h
>

52 
	~<sys/pcb.h
>

53 
	~<sys/£ma.h
>

54 
	~<sys/hw≥r·y≥s.h
>

56 #ifde‡
EVEREST


57 
	~<sys/EVEREST/evîe°.h
>

60 #ifde‡
SN


61 
	~<sys/SN/¨ch.h
>

62 
	~<sys/SN/öå_public.h
>

63 
	~<sys/SN/w¨.h
>

66 #ifde‡
MP


67 
	~<sys/ˇŒo.h
>

68 
	~<sys/ˇŒoöfo.h
>

70 #ifdef 
NUMA_BASE


71 
	gnodïda_s
;

74 
	~<sys/q.h
>

75 
	~<sys/sysöfo.h
>

77 
	gvmp_s
;

85 
	s˝u_s
 {

86 
lock_t
 
	mc_lock
;

87 
kthªad
 *
	mc_thªads
;

88 #i‡
MP


89 
˝uid_t
 
	mc_≥ekrŸ‹
;

90 
uch¨_t
 
	mc_⁄q
;

92 
uch¨_t
 
	mc_ª°ri˘ed
;

93 } 
	t˝u_t
;

98 (*
	t˝uacfunc_t
)(*, *, *, *);

100 
	sa˘i⁄_s
 {

101 
˝uacfunc_t
 
dofunc
;

102 *
dﬂrg0
;

103 *
dﬂrg1
;

104 *
dﬂrg2
;

105 *
dﬂrg3
;

106 
a˘i⁄_s
 *
d⁄ext
;

107 } 
	ta˘i⁄_t
;

109 #ifde‡
MP


113 
	sa˘i⁄li°_s
 {

114 
lock_t
 
a˘i⁄lock
;

115 
uöt
 
ˇchñöefûÀr
;

116 
a˘i⁄_t
 *
fú°a˘i⁄
;

117 
a˘i⁄_t
 *
todﬁi°
;

118 
a˘i⁄_t
 *
œ°todo
;

126 
a˘i⁄_t
 
a˘_blocks
[2];

127 } 
	ta˘i⁄li°_t
;

143 
°hªad_s
;

148 
	spda_s
 {

155 
dbg
[4];

157 
ö°_t
 *
ex˚±n‹m
;

158 
fûÀr
[2];

159 } 
comm⁄
;

160 } 
db
;

161 
uthªad_s
 *
p_swôchuthªad
;

162 
uthªad_s
 *
p_curuthªad
;

163 
kthªad
 *
p_curkthªad
;

164 
uli
 *
p_curuli
;

165 
k_machªg_t
 *
p_öéa°‰ame
;

166 
k_machªg_t
 
p_©ßve
;

167 
k_machªg_t
 
p_t0ßve
;

168 
p_Êags
;

170 #i‡
EVEREST


175 
unch¨
 
p_CEL_shadow
;

176 
unch¨
 
p_CEL_hw
;

178 
unch¨
 
p_Æig≈ad3
[2];

181 
unch¨
 
p_ruƒun
;

182 
unch¨
 
p_k°ackÊag
;

194 
unch¨
 
p_öå_ªsumeidÀ
;

195 
unch¨
 
p_Áûso·_°©e
;

196 
unch¨
 
p_ö_¥ofûî
;

197 
unch¨
 
p_idl°kdïth
;

198 
ush‹t
 
p_idÀr
;

200 
unch¨
 
p_schedmask_∑d
[2];

227 
˙odemask_t
 
p_schedmask
;

228 
	#SCHEDMASKSZ
 ((
˙odemask_t
)/(
unch¨
))

	)

246 
unch¨
 
p_ˇchñöe_∑d1
[40-
SCHEDMASKSZ
];

262 
p_va_∑nic•ö
;

263 
p_va_f‹˚_ªsched
;

264 
p_va_ª£rved
;

265 #ifdef 
MC3_CFG_READ_WAR


266 
p_va_f‹˚_°›
;

268 
p_va_∑d
;

271 
uöt
 
p_ébÊush_˙t
;

272 
uöt
 
p_dñayacvec
;

273 
uöt
 
p_∑d_w‹d
;

275 
˝umask_t
 
p_˝umask
;

282 #i‚de‡
LARGE_CPU_COUNT


283 #ifde‡
EVEREST


284 
p_˝umask_∑d
[8];

286 
p_˝umask_∑d
[12];

289 
uöt64_t
 
p_ébsync_asgí
;

290 #i‡(
MAXCPUS
 == 512)

291 
uöt
 
p_ˇchñöe_∑d2
[10];

292 #ñi‡(
MAXCPUS
 == 256)

293 
uöt
 
p_ˇchñöe_∑d2
[18];

295 
uöt
 
p_ˇchñöe_∑d2
[22];

298 #ifde‡
MP


305 
a˘i⁄li°_t
 
p_a˘i⁄li°
;

307 #i‡
_MIPS_SIM
 =
_ABI64


312 (* c⁄° 
p_ˇu£vec
[32])();

319 
uöt64_t
 
p_t°amp_mask
;

320 *
p_t°amp_objp
;

321 
mæock_t
 
p_t°amp_lock
;

325 *
p_t°amp_íåõs
;

326 *
p_t°amp_±r
;

327 *
p_t°amp_œ°
;

328 
uöt
 
p_t°amp_eobmode
;

333 
uöt
 
p_t°amp_Æign
;

335 #i‡
	`deföed
(
SN
)

337 (* c⁄° 
p_noÁu…_pc
[
NF_NENTRIES
])();

339 #i‡
IP21


340 
unch¨
 
p_dchù_îr_hw
;

341 
unch¨
 
p_dchù_îr_bôs
;

343 #ifdef 
NUMA_BASE


349 
nodïda_s
 *
p_nodïda
;

350 #ifde‡
SN1


351 
subnodïda_s
 *
p_subnodïda
;

354 
˝u_s
 
p_˝u
;

355 
˝uid_t
 
p_˝uid
;

356 
˙odeid_t
 
p_nodeid
;

357 
«sid_t
 
p_«sid
;

358 
unch¨
 
p_as¶evñ
;

359 
unch¨
 
p_swôchög
;

360 
unch¨
 
p_schedÊags
;

361 
unch¨
 
p_∑nickög
;

362 
unch¨
 
p_¥omloggög
;

363 
kthªad
 *
p_√xâhªad
;

364 
k_machªg_t
 *
p_öt°ack
;

365 
k_machªg_t
 *
p_boŸœ°‰ame
;

366 
k_machªg_t
 *
p_boŸ°ack
;

369 
k_machªg_t
 
p_k1ßve
;

372 
p_gfx_waôc
;

373 
p_gfx_waôf
;

374 
lock_t
 *
p_cuæock
;

375 
lock_t
 *
p_œ°lock
;

376 
ö°_t
 *
p_cuæock˝c
;

380 
p_cuΩri
;

381 
p_˝uty≥_w‹d
;

382 
p_Âuty≥_w‹d
;

383 
p_noÁu…
;

384 
ˇddr_t
 
p_kvÁu…
;

385 
ˇddr_t
 
p_˛rkvÊt
[8];

386 
éböfo
 *
p_éböfo
;

387 
iˇcheöfo
 *
p_iˇcheöfo
;

388 
uthªad_s
 *
p_Âow√r
;

389 
p_h™d
;

390 
p_idÀtkn
;

391 
p_…icks
;

392 
p_vmeùl
;

393 *
p_¥Âå
;

394 
p_¥fswtch
;

395 
p_¥fswtch˙t
;

396 
kß
 *
kß±r
;

400 
p_Àd_cou¡î
;

401 
p_Àd_vÆue
;

402 #ifde‡
SN


403 
p_œ°idÀ
;

404 
p_œ°vÆue
;

405 
unch¨
 
p_¶i˚
;

406 
unch¨
 
p_rouãπick
;

407 
unch¨
 
p_md≥rf
;

408 #i‡
	`deföed
 (
SN0
)

409 
unch¨
 
p_¢00
;

411 
w¨bôs_t
 
p_w¨bôs
;

414 
p_dbg˙tdown
;

419 
lock_t
 
p_•ecül
;

422 
p_timeö
;

423 
	#PDA_TIMEIN
 0x1

	)

424 
	#PDA_FTIMEIN
 0x2

	)

425 
f˛ock_‰eq
;

427 
pde_t
 
p_pdÆo
;

428 
pde_t
 
p_uk°klo
;

429 #i‡
TLBDEBUG


430 
pde_t
 
p_sv1lo
;

431 
pde_t
 
p_sv1lo_1
;

432 
uöt
 
p_sv1hi
;

433 
pde_t
 
p_sv2lo
;

434 
pde_t
 
p_sv2lo_1
;

435 
uöt
 
p_sv2hi
;

439 
decö•îlo›
;

441 
uöt
 
p_uébmis£s
;

442 
uöt
 
p_kébmis£s
;

445 
p_uébmissswtch
;

446 
ö°_t
 *
p_uébmisshndÃ
;

448 
unch¨
 
p_idÀr_∑d
;

449 #i‚de‡
SN


455 
p_pc›y_öu£
[2];

456 
ˇddr_t
 
p_pc›y_∑gñi°
[2];

457 
muãx_t
 
p_pc›y_lock
;

462 
ˇddr_t
 
p_ˇche›_∑ges
;

463 
muãx_t
 
p_ˇche›_∑ge¶ock
;

467 
uöt
 
p_π˛ock_øã
;

468 #i‡
R4000


469 *
p_v˚log
;

470 
p_v˚log_off£t
;

471 
p_v˚cou¡
;

473 *
k°r_lfve˝
;

474 *
k°r_°©•
;

476 *
k«±r
;

477 *
nfs°©
;

478 *
cfs°©
;

479 
p_¥f_íabÀd
;

481 #i‡
SN


482 
hub_ötmasks_t
 
p_ötmasks
;

485 #i‡
IP30


486 
__uöt64_t
 
p_˛ock_tick
;

487 
__uöt64_t
 
p_f˛ock_tick
;

488 
__uöt64_t
 
p_√xt_öå
;

489 
__uöt32_t
 
p_˛ock_ticked
;

490 
__uöt32_t
 
p_f˛ock_ticked
;

491 
__uöt32_t
 
p_˛ock_¶ow
;

492 
__uöt32_t
 
p_f˛ock_¶ow
;

495 #i‡
MP


496 
__uöt64_t
 
œ°_sched_öå_RTC
;

497 
cou¡î_öå_ovî_sum
;

498 
uöt
 
cou¡î_öå_ovî_cou¡
;

499 
uöt
 
cou¡î_öå_ovî_max
;

501 
ˇŒout_öfo
 
p_ˇŒtodo
;

505 *
p_˝u«me°r
;

510 *
p_‰s_objp
;

511 
uöt
 
p_‰s_Êags
;

519 
p_sˇchesize
;

520 #ifde‡
IP32


524 
__uöt64_t
 
p_•lmasks
[5];

525 
p_cur•l
;

531 
œbñ_t
 
p_∑ni¸egs_tbl
;

532 
p_∑ni¸egs_vÆid
;

533 #i‡
EXTKSTKSIZE
 == 1

534 
pde_t
 
p_°ackext
;

535 
pde_t
 
p_bp_°ackext
;

536 
p_m≠°ackext
;

539 #i‡
	`deföed
(
SN
)

540 *
p_bã_öfo
;

543 
˝u_m⁄_t
 *
p_˝u_m⁄
;

544 
˝u_m⁄_t
 *
p_a˘ive_˝u_m⁄
;

545 #ifde‡
R10000


546 
unch¨
 
p_ˇchîr
;

549 
vîãx_hdl_t
 
p_vîãx
;

551 * 
pdöfo
;

553 
˝u‰eq
;

554 
˝u‰eq_cy˛es
;

555 
u°_˝u‰eq
;

556 #i‡
IP27


557 * 
p_ñsc_p‹töfo
;

559 #i‡
	`deföed
(
SN0
Ë|| deföed(
SN1
)

560 
ush‹t
 
p_mem_tick_Êags
;

561 
ush‹t
 
p_mem_tick_quõs˚
;

562 
p_mem_tick_ba£_≥riod
;

563 
p_mem_tick_cou¡î
;

564 
p_mem_tick_£q
;

565 
p‚_t
 
p_mem_tick_˝u_nump‚s
;

566 
p‚_t
 
p_mem_tick_˝u_°¨ç‚
;

568 
__uöt64_t
 
p_mem_tick_maxtime
;

569 
__uöt64_t
 
p_mem_tick_mötime
;

570 
__uöt64_t
 
p_mem_tick_œ°time
;

571 
__uöt64_t
 
p_mem_tick_avgtime
;

573 
p‚_t
 
p_mem_tick_boun˚_nump‚s
;

574 
p‚_t
 
p_mem_tick_boun˚_°¨ç‚
;

575 
p‚_t
 
p_mem_tick_boun˚_ac˝‚s
;

577 
p‚_t
 
p_mem_tick_u≈eggög_nump‚s
;

578 
p‚_t
 
p_mem_tick_u≈eggög_°¨ç‚
;

579 
p‚_t
 
p_mem_tick_u≈eggög_ac˝‚s
;

581 #ifde‡
SW_FAST_CACHE_SYNCH


582 
k_machªg_t
 
p_swößve_tmp
;

584 #ifde‡
_R5000_CVT_WAR


585 
p_Â0ßve
;

587 #ifde‡
JUMP_WAR


588 #i‡
MP


592 
pid_t
 
p_jump_w¨_pid
;

593 
p_jump_w¨_uthªadid
;

595 #i‡
	`deföed
 (
SN0
)

596 
p_r10kcheck_˙t
;

597 
˛kªg_t
 
p_nmi_πc
;

598 
˛kªg_t
 
p_hung_πc
;

599 
p_¥ogªss_lck
;

600 
˝uid_t
 
p_r10k_ma°î_˝u
;

601 
˝uid_t
 
p_r10k_ack
;

603 #i‡
	`deföed
 (
R10000
Ë&& !deföed(
SN1
)

604 
p_r10kw¨_bôs
;

606 #i‡
	`deföed
 (
R10000
Ë&& deföed (
R10000_MFHI_WAR
)

607 
uöt
 
p_mfhi_br˙t
;

608 
uöt
 
p_mfhi_˙t
;

609 
uöt
 
p_mfhi_skù
;

610 
machªg_t
 
p_mfhi_ªg
;

611 
machªg_t
 
p_mÊo_ªg
;

612 
__psunsig√d_t
 
p_mfhi_∑tch_buf
;

614 *
dba°©
;

615 #ifde‡
SN


616 
unch¨
 
p_i›îf
;

619 
mæock_t
 **
p_bœ±r
;

622 #ifde‡
SN


623 
__uöt64_t
 
p_˚º_Êags
;

625 #ifde‡
SN1


626 
	#NO_ROUTE
 ((
__uöt64_t
)0xf)

	)

627 
__uöt64_t
 
p_locked_πr
;

644 #ifde‡
MP


645 
syswaô
 
p_iowaô_öfo
;

657 } 
	tpda_t
;

659 #¥agm®
£t
 
fõld
 
©åibuã
 
pda_t
 
p_t°amp_mask
 
Æign
=128

660 #¥agm®
£t
 
fõld
 
©åibuã
 
pda_t
 
p_t°amp_Æign
 
Æign
=128

662 #i‚de‡
MP


663 
syswaô
 
iowaô_öfo
;

669 
	#UTLBMISS_STD
 0x0

	)

670 
	#UTLBMISS_COUNT
 0x1

	)

671 
	#UTLBMISS_DEFER
 0x2

	)

673 
	#UTLBMISS_LPAGE
 0x4

	)

674 
	#NUTLBMISS_HNDLRS
 8

	)

676 
	suébmiss_swtch
 {

677 
ö°_t
 *
u_°¨t
;

678 
ö°_t
 *
u_íd
;

680 
uébmiss_swtch
 utlbmiss_swtch[];

685 
lock_t
 
putbuÊck
;

686 
	`putbuf_lock
();

687 
	`putbuf_åylock
();

688 
	`putbuf_u∆ock
();

690 
	#PUTBUF_LOCK
(Ë
	`putbuf_lock
()

	)

691 
	#PUTBUF_TRYLOCK
(Ë
	`putbuf_åylock
()

	)

692 
	#PUTBUF_UNLOCK
(Ë
	`putbuf_u∆ock
()

	)

697 
	#PUTBUF_LOCK_USECS
 (
USEC_PER_SEC
 * 5)

	)

702 
˝uid_t
 
ma°î_¥ocid
;

704 
	#comm⁄_ex˙‹m
 
db
.
comm⁄
.
ex˚±n‹m


	)

707 
	#PDA_RUNANYWHERE
 ((
˝uid_t
)-1)

	)

710 
	#PDA_CURUSRSTK
 0

	)

711 
	#PDA_CURKERSTK
 1

	)

712 
	#PDA_CURINTSTK
 2

	)

713 
	#PDA_CURIDLSTK
 3

	)

714 
	#PDA_CURULISTK
 4

	)

716 
	spdaödr_s
 {

717 
CpuId
;

718 
pda_t
 *
pda
;

719 } 
	tpdaödr_t
;

721 
pdaödr_t
 
pdaödr
[];

722 
num˝us
;

723 
numnodes
;

724 
num_≥bricks
;

725 
˝umask_t
 
mask˝us
;

726 
max˝us
;

727 
maxnodes
;

728 
pda_t
 *
ma°îpda
;

729 
˝uid_t
 
˛ock_¥o˚ss‹
;

730 
˝uid_t
 
Á°˛ock_¥o˚ss‹
;

731 #i‚de‡
_STANDALONE


732 #ifde‡
MP


733 
˝uid_t
 
	`gë˝uid
();

735 
	#gë˝uid
(Ë0

	)

739 #i‡
NUMA_BASE


741 
˙odeid_t
 
	`gë˙odeid
();

742 
	#˙odeid
(Ë(
¥iv©e
.
p_nodeid
)

	)

744 
mem_tick_íabÀd
;

745 
mem_tick_ba£_≥riod
;

746 
	`mem_tick
(
˝uid_t
 
˝uid
);

748 #ifde‡
SN0


749 
	#MEM_TICK
() \

751 i‡(
¥iv©e
.
p_mem_tick_Êags
 && --¥iv©e.
p_mem_tick_cou¡î
 <= 0) { \

752 
¥iv©e
.
p_mem_tick_cou¡î
 = \

753 
¥iv©e
.
p_mem_tick_ba£_≥riod
; \

754 
	`mem_tick
(
	`˝uid
()); \

756 
	}

	)
}

759 
	#MEM_TICK
()

	)

764 
	#MAX_COMPACT_NODES
 1

	)

765 
	#CPUS_PER_NODE
 
max˝us


	)

766 
	#˙odëo˝u
(
˙ode
Ë0

	)

767 
	#CNODE_NUM_CPUS
(
˙ode
Ë
CPUS_PER_NODE


	)

768 
	#gë˙odeid
(Ë0

	)

769 
	#˙odeid
(Ë0

	)

770 
	#˝uto˙ode
(
˝u
Ë0

	)

771 
	#gë_˝u_˙ode
(
˝u
Ë
	`˝uto˙ode
(˝u)

	)

772 
	#˝uto¶i˚
(
_˝u
Ë(_˝u)

	)

773 
	#˝utﬁoˇl¶i˚
(
_˝u
Ë(_˝u)

	)

774 
	#˙ode_¶i˚_to_˝uid
(
_˙ode
, 
_¶i˚
Ë(_¶i˚)

	)

775 
	#CNODE_TO_CPU_BASE
(
˙ode
Ë((
˙odeid_t
)0)

	)

776 
	#COMPACT_TO_NASID_NODEID
(
c
Ë((
«sid_t
)(c))

	)

777 
	#NASID_TO_COMPACT_NODEID
(
n
Ë((
˙odeid_t
)“))

	)

778 
	#MEM_TICK
()

	)

782 
£ndöå
(
˝uid_t
, 
unch¨
);

784 
	#PDASZ
 1

	)

787 
	#CPU_NONE
 (
˝uid_t
)-1

	)

788 
	#CPU_QUEUE
(
˝u
Ë(&
pdaödr
[˝u].
pda
->
p_˝u
)

	)

790 
	#gëpda
(Ë((
pda_t
 *Ë
PDAADDR
)

	)

791 
	#¥iv©e
 (*((
pda_t
 *Ë
PDAADDR
))

	)

792 #ifde‡
MP


793 
	#˝uid
(Ë((
˝uid_t
)(
¥iv©e
.
p_˝uid
))

	)

795 
	#˝uid
(Ë0

	)

797 
	#˝umask
(Ë(
¥iv©e
.
p_˝umask
)

	)

798 
	#schedmask
(Ë(
¥iv©e
.
p_schedmask
)

	)

800 #ifde‡
MP


801 
˝u_íabÀd
(
˝uid_t
);

803 
	#˝u_íabÀd
(
_c
Ë1

	)

806 #ifde‡
MP


807 
	#ON_MP
(
X
Ëi‡(
max˝us
 > 1Ë{X;}

	)

808 
	#IS_MP
 (
max˝us
 > 1)

	)

810 
	#ON_MP
(
X
)

	)

811 
	#IS_MP
 0

	)

818 
a˘i⁄öô
();

819 
a˘i⁄_¥óŒoc
();

820 
˝ua˘i⁄
(
˝uid_t
, 
˝uacfunc_t
, , ...);

821 
√°ed_˝ua˘i⁄
(
˝uid_t
, 
˝uacfunc_t
, *,*,*,*);

822 
dﬂ˘i⁄s
();

823 
dﬂcvec
();

824 
dﬂcvec_•lhi
();

825 
da_Êush_éb
();

826 
˝umask_t
 
kvÁu…check
(cpumask_t, );

827 
˝umask_t
 
kvÁu…_¥echeck
();

829 
	#A_NOW
 0x0001

	)

830 
	#A_QUEUE
 0x0002

	)

831 
	#DOACTION
 0xab

	)

832 #i‡(
deföed
(
EVEREST
Ë|| deföed(
SN
)Ë&& !deföed(
_NO_SPLTLB
)

833 
	#DOTLBACTION
 0xbb

	)

835 
	#DOTLBACTION
 
DOACTION


	)

838 #i‡
deföed
(
DEBUG
Ë|| deföed(
ISOLATE_DEBUG
)

844 
˝uva˘i⁄
(
˝uid_t
, 
uöt
);

845 
	#SEND_VA_PANICSPIN
(
x
Ë{ 
	`˝uva˘i⁄
(x, 
VA_PANICSPIN
); }

	)

846 
	#SEND_VA_FORCE_RESCHED
(
x
) \

847 {
	`ASSERT
(
x
 !
¥iv©e
.
p_˝uid
); 
	`˝uva˘i⁄
(x, 
VA_FORCE_RESCHED
);}

	)

848 
	#CPUVACTION_RESCHED
(
x
Ë{ 
	`˝uva˘i⁄
(x, 
VA_FORCE_RESCHED
); }

	)

849 #ifde‡
MC3_CFG_READ_WAR


850 
	#SEND_VA_FORCE_STOP
(
x
) \

851 {
	`ASSERT
(
x
 !
¥iv©e
.
p_˝uid
); 
	`˝uva˘i⁄
(x, 
VA_FORCE_STOP
);}

	)

853 
	#VA_PANICSPIN
 0x1

	)

854 
	#VA_FORCE_RESCHED
 0x4

	)

855 
	#VA_TLBFLUSH_RAND
 0x8

	)

856 #ifde‡
MC3_CFG_READ_WAR


857 
	#VA_FORCE_STOP
 0x10

	)

858 
	#VA_LAST_OP
 
VA_FORCE_STOP


	)

860 
	#VA_LAST_OP
 
VA_TLBFLUSH_RAND


	)

863 
	#CPU_VACTION
(
x
) \

864 i‡(
pdaödr
[
x
].
CpuId
 =
¥iv©e
.
p_˝uid
) \

865 
	`dﬂcvec_•lhi
(); \

867 
	`£ndöå
(
x
, 
DOACTION
);

	)

869 
	#SEND_VA_PANICSPIN
(
x
) \

870 {
pdaödr
[
x
].
pda
->
p_va_∑nic•ö
 = 1; 
	`£ndöå
(x, 
DOACTION
);}

	)

871 
	#SEND_VA_FORCE_RESCHED
(
x
) \

872 {
pdaödr
[
x
].
pda
->
p_va_f‹˚_ªsched
 = 1; 
	`£ndöå
(x, 
DOACTION
);}

	)

873 
	#CPUVACTION_RESCHED
(
x
) \

874 {
pdaödr
[
x
].
pda
->
p_va_f‹˚_ªsched
 = 1; 
	`CPU_VACTION
(x)}

	)

875 #ifde‡
MC3_CFG_READ_WAR


876 
	#SEND_VA_FORCE_STOP
(
x
) \

877 {
pdaödr
[
x
].
pda
->
p_va_f‹˚_°›
 = 1; 
	`£ndöå
(x, 
DOACTION
);}

	)

882 
	#DA_ICACHE_FLUSH
 0x1

	)

883 
	#DA_TLB_FLUSH
 0x2

	)

884 
	#DA_LAST_OP
 
DA_TLB_FLUSH


	)

886 
	guès_s
;

887 
uébmiss_ªsume_n›ö
(
uès_s
 *);

888 
uébmiss_ªsume
(
uès_s
 *);

889 
uébmiss_ª£t
();

890 
wúïda
(
pda_t
 *);

891 
ö°_t
 *
gë_ex˚±_n‹m
();

893 
˝umask_t
 
Æl˛r_˝umask
;

895 
check_dñay_ébÊush
();

897 
	#ENTRANCE
 0

	)

898 
	#EXIT
 1

	)

900 #ifde‡
MP


901 
	#CHECK_DELAY_TLBFLUSH
(
Êag
) {\

902 i‡(
¥iv©e
.
p_Êags
 & 
PDAF_ISOLATED
) \

903 
	`check_dñay_ébÊush
(
Êag
); \

904 }

	)

905 
	#CHECK_DELAY_TLBFLUSH_INTR
(
Êag
, 
s
) {\

906 i‡((
Êag
Ë=
ENTRANCE
) { \

907 i‡((
¥iv©e
.
p_Êags
 & (
PDAF_ISOLATED
|
PDAF_BROADCAST_OFF
)) == \

908 (
PDAF_ISOLATED
|
PDAF_BROADCAST_OFF
)) { \

909 
	`check_dñay_ébÊush
(
Êag
); \

910 
s
 = 1; \

912 
s
 = 0; \

914 i‡(
s
 && (
¥iv©e
.
p_Êags
 & 
PDAF_ISOLATED
)) \

915 
	`check_dñay_ébÊush
(
Êag
); \

917 }

	)

919 
	#CHECK_DELAY_TLBFLUSH
(
x
)

	)

920 
	#CHECK_DELAY_TLBFLUSH_INTR
(
x
)

	)

924 #i‡
TLB_TRACE


925 
kåa˚
 *
éb_åa˚_buf
;

926 
	#KTRACE_TLBENTER
(
›
, 
v0
, 
v1
, 
v2
, 
v3
) \

927 
	`kåa˚_íãr
(
éb_åa˚_buf
, \

928 (*)
__ªtu∫_addªss
, \

929 (*)(
__psunsig√d_t
)
lbﬁt
, \

930 (*)(
__psunsig√d_t
)
	`˝uid
(), \

931 (*)(
__psunsig√d_t
)
¥iv©e
.
p_Êags
, \

932 (*)(
__psunsig√d_t
)
›
, \

933 (*)(
__psunsig√d_t
)
v0
, \

934 (*)(
__psunsig√d_t
)
v1
, \

935 (*)(
__psunsig√d_t
)
v2
, \

936 (*)(
__psunsig√d_t
)
v3
, \

938 (*)0 , (*)0 , (*Ë0, (*Ë0)

	)

940 
	#TLB_TRACE_TLBFLUSH
 0

	)

941 
	#TLB_TRACE_TLBSYNC
 1

	)

942 
	#TLB_TRACE_TLBSYNC_DEL
 2

	)

943 
	#TLB_TRACE_CLEAN_AGE
 3

	)

944 
	#TLB_TRACE_CHECK_DEL
 4

	)

945 
	#TLB_TRACE_FLUSH_DEL
 5

	)

946 
	#TLB_TRACE_TLBSYNC1
 6

	)

949 
	#KTRACE_TLBENTER
(
›
, 
v0
, 
v1
, 
v2
, 
v3
)

	)

952 #i‡
IP19
 || 
IP21
 || 
IP25
 || 
IP27
 || 
IP28
 || 
IP30
 || 
IP35


954 
nmi_max˝us
;

955 
	#MAX_NUMBER_OF_CPUS
(Ë
	`max
(
max˝us
,
nmi_max˝us
)

	)

959 
	#MAX_NUMBER_OF_CPUS
(Ë
max˝us


	)

963 
	#˝uvîãx
(Ë(
¥iv©e
.
p_vîãx
)

	)

964 
	#˝uid_to_vîãx
(
˝uid
Ë(
pdaödr
[˝uid].
pda
->
p_vîãx
)

	)

965 
	#˝u_Ælows_öå
(
˝uid
Ë(!(
pdaödr
[˝uid].
pda
->
p_Êags
 & 
PDAF_NOINTR
))

	)

966 
£t_node_∑nic_Êag
();

967 
íãr_∑nic_mode
();

968 
exô_∑nic_mode
();

969 
ö_∑nic_mode
();

971 
íãr_dump_mode
();

972 
exô_dump_mode
();

973 
ö_dump_mode
();

974 
íãr_¥omlog_mode
();

975 
exô_¥omlog_mode
();

976 
ö_¥omlog_mode
();

	@/usr/include/sys/procset.h

19 #i‚de‡
_SYS_PROCSET_H


20 
	#_SYS_PROCSET_H


	)

24 
	~<sys/ty≥s.h
>

25 
	~<öã∫Æ/sgima¸os.h
>

27 
	g__SGI_LIBC_BEGIN_EXTERN_C


35 
	#P_INITPID
 1

	)

36 
	#P_INITUID
 0

	)

37 
	#P_INITPGID
 0

	)

45 #i‡
_SGIAPI


46 
	gidty≥


51 
	gP_PID
,

52 
	gP_PPID
,

53 
	gP_PGID
,

55 
	gP_SID
,

56 
	gP_CID
,

57 
	gP_UID
,

58 
	gP_GID
,

59 
	gP_ALL


60 } 
	tidty≥_t
;

63 #i‡
_SGIAPI
 || 
_ABIAPI


68 
	eid›
 {

69 
	mPOP_DIFF
,

72 
	mPOP_AND
,

75 
	mPOP_OR
,

78 
	mPOP_XOR


81 } 
	tid›_t
;

87 
	s¥oc£t
 {

88 
id›_t
 
	mp_›
;

93 
idty≥_t
 
	mp_lidty≥
;

96 
id_t
 
	mp_lid
;

98 
idty≥_t
 
	mp_ridty≥
;

101 
id_t
 
	mp_rid
;

102 } 
	t¥oc£t_t
;

108 
	#£çroc£t
(
p•
, 
›
, 
…y≥
, 
lid
, 
πy≥
, 
rid
) \

109 (
p•
)->
p_›
 = (
›
); \

110 (
p•
)->
p_lidty≥
 = (
…y≥
); \

111 (
p•
)->
p_lid
 = (
lid
); \

112 (
p•
)->
p_ridty≥
 = (
πy≥
); \

113 (
p•
)->
p_rid
 = (
rid
);

	)

117 #ifde‡
_KERNEL


118 
	gv¥oc
;

119 
	gvp_gë_©å_s
;

120 
check¥oc£t
(
¥oc£t_t
 *);

121 
id_t
 
gëmyid
(
idty≥_t
, 
vp_gë_©å_s
 *);

122 
¥ocö£t
(
v¥oc
 *, 
¥oc£t_t
 *);

123 
boﬁón_t
 
cur_ö£t_⁄ly
(
¥oc£t_t
 *);

126 
	g__SGI_LIBC_END_EXTERN_C


	@/usr/include/sys/q.h

12 #i‚de‡
_Q_H


13 
	#_Q_H


	)

15 
	sq_ñemít_s
 {

16 
q_ñemít_s
 *
	mqe_f‹w
;

17 
q_ñemít_s
 *
	mqe_back
;

18 *
	mqe_∑ª¡
;

21 
	#q_em±y
(
q
Ë((q)->
qe_f‹w
 =(q))

	)

22 
	#q_⁄q
(
q
Ë((q)->
qe_f‹w
 !(q))

	)

24 
q_ñemít_s
 *
p›q
(q_element_s *);

25 
pushq
(
q_ñemít_s
 *, q_element_s *);

26 
rmq
(
q_ñemít_s
 *);

27 
q_ö£π_bef‹e
(
q_ñemít_s
 *, q_element_s *);

28 
q_move_a·î
(
q_ñemít_s
 *, q_element_s *);

29 
öô_q_ñemít
(
q_ñemít_s
 *, *);

	@/usr/include/sys/reg.h

12 #i‚de‡
__SYS_REG_H__


13 
	#__SYS_REG_H__


	)

16 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

24 #i‡(
_MIPS_SIM
 =
_ABIO32
)

28 
	#EF_ARGSAVE0
 0

	)

29 
	#EF_ARGSAVE1
 1

	)

30 
	#EF_ARGSAVE2
 2

	)

31 
	#EF_ARGSAVE3
 3

	)

32 
	#EF_AT
 4

	)

34 
	#EF_AT
 0

	)

36 
	#EF_V0
 
EF_AT
+1

	)

37 
	#EF_V1
 
EF_AT
+2

	)

38 
	#EF_A0
 
EF_AT
+3

	)

39 
	#EF_A1
 
EF_AT
+4

	)

40 
	#EF_A2
 
EF_AT
+5

	)

41 
	#EF_A3
 
EF_AT
+6

	)

42 #i‡(
_MIPS_SIM
 =
_ABIO32
)

43 
	#EF_T0
 
EF_AT
+7

	)

44 
	#EF_T1
 
EF_AT
+8

	)

45 
	#EF_T2
 
EF_AT
+9

	)

46 
	#EF_T3
 
EF_AT
+10

	)

47 
	#EF_T4
 
EF_AT
+11

	)

48 
	#EF_T5
 
EF_AT
+12

	)

49 
	#EF_T6
 
EF_AT
+13

	)

50 
	#EF_T7
 
EF_AT
+14

	)

52 #i‡(
_MIPS_SIM
 =
_ABI64
 || _MIPS_SIM =
_ABIN32
)

53 
	#EF_A4
 
EF_AT
+7

	)

54 
	#EF_A5
 
EF_AT
+8

	)

55 
	#EF_A6
 
EF_AT
+9

	)

56 
	#EF_A7
 
EF_AT
+10

	)

57 
	#EF_T0
 
EF_AT
+11

	)

58 
	#EF_T1
 
EF_AT
+12

	)

59 
	#EF_T2
 
EF_AT
+13

	)

60 
	#EF_T3
 
EF_AT
+14

	)

62 
	#EF_S0
 
EF_AT
+15

	)

63 
	#EF_S1
 
EF_AT
+16

	)

64 
	#EF_S2
 
EF_AT
+17

	)

65 
	#EF_S3
 
EF_AT
+18

	)

66 
	#EF_S4
 
EF_AT
+19

	)

67 
	#EF_S5
 
EF_AT
+20

	)

68 
	#EF_S6
 
EF_AT
+21

	)

69 
	#EF_S7
 
EF_AT
+22

	)

70 
	#EF_T8
 
EF_AT
+23

	)

71 
	#EF_T9
 
EF_AT
+24

	)

72 
	#EF_K0
 
EF_AT
+25

	)

73 
	#EF_K1
 
EF_AT
+26

	)

74 
	#EF_GP
 
EF_AT
+27

	)

75 
	#EF_SP
 
EF_AT
+28

	)

76 
	#EF_FP
 
EF_AT
+29

	)

77 
	#EF_RA
 
EF_AT
+30

	)

78 
	#EF_SR
 
EF_AT
+31

	)

79 
	#EF_MDLO
 
EF_AT
+32

	)

80 
	#EF_MDHI
 
EF_AT
+33

	)

81 
	#EF_BADVADDR
 
EF_AT
+34

	)

82 
	#EF_CAUSE
 
EF_AT
+35

	)

83 
	#EF_EPC
 
EF_AT
+36

	)

84 
	#EF_FP4
 
EF_AT
+37

	)

85 
	#EF_CONFIG
 
EF_AT
+38

	)

86 
	#EF_CEL
 
EF_AT
+39

	)

87 
	#EF_CRMMSK
 
EF_AT
+39

	)

88 
	#EF_ERROR_EPC
 
EF_AT
+43

	)

89 
	#EF_EXACT_EPC
 
EF_AT
+44

	)

90 #i‡
TFP


93 
	#EF_SIZE
 (
e‰ame_s
)

	)

98 
	#USER_REG
(
x
Ë(((
k_machªg_t
 *)&
cuªx˚±i⁄p
->
u_e‰ame
)[(x)])

	)

105 
	se‰ame_s
 {

106 #i‡(
_MIPS_SIM
 =
_ABIO32
)

110 
k_machªg_t
 
	mef_¨gßve0
;

111 
k_machªg_t
 
	mef_¨gßve1
;

112 
k_machªg_t
 
	mef_¨gßve2
;

113 
k_machªg_t
 
	mef_¨gßve3
;

115 
k_machªg_t
 
	mef_©
;

116 
k_machªg_t
 
	mef_v0
;

117 
k_machªg_t
 
	mef_v1
;

118 
k_machªg_t
 
	mef_a0
;

119 
k_machªg_t
 
	mef_a1
;

120 
k_machªg_t
 
	mef_a2
;

121 
k_machªg_t
 
	mef_a3
;

122 #i‡(
_MIPS_SIM
 =
_ABIO32
)

123 
k_machªg_t
 
	mef_t0
;

124 
k_machªg_t
 
	mef_t1
;

125 
k_machªg_t
 
	mef_t2
;

126 
k_machªg_t
 
	mef_t3
;

127 
k_machªg_t
 
	mef_t4
;

128 
k_machªg_t
 
	mef_t5
;

129 
k_machªg_t
 
	mef_t6
;

130 
k_machªg_t
 
	mef_t7
;

132 #i‡(
_MIPS_SIM
 =
_ABI64
 || _MIPS_SIM =
_ABIN32
)

133 
k_machªg_t
 
	mef_a4
;

134 
k_machªg_t
 
	mef_a5
;

135 
k_machªg_t
 
	mef_a6
;

136 
k_machªg_t
 
	mef_a7
;

137 
k_machªg_t
 
	mef_t0
;

138 
k_machªg_t
 
	mef_t1
;

139 
k_machªg_t
 
	mef_t2
;

140 
k_machªg_t
 
	mef_t3
;

141 
	#ef_è0
 
ef_a4


	)

142 
	#ef_è1
 
ef_a5


	)

143 
	#ef_è2
 
ef_a6


	)

144 
	#ef_è3
 
ef_a7


	)

146 
k_machªg_t
 
	mef_s0
;

147 
k_machªg_t
 
	mef_s1
;

148 
k_machªg_t
 
	mef_s2
;

149 
k_machªg_t
 
	mef_s3
;

150 
k_machªg_t
 
	mef_s4
;

151 
k_machªg_t
 
	mef_s5
;

152 
k_machªg_t
 
	mef_s6
;

153 
k_machªg_t
 
	mef_s7
;

154 
k_machªg_t
 
	mef_t8
;

155 
k_machªg_t
 
	mef_t9
;

156 
k_machªg_t
 
	mef_k0
;

157 
k_machªg_t
 
	mef_k1
;

158 
k_machªg_t
 
	mef_gp
;

159 
k_machªg_t
 
	mef_•
;

160 
k_machªg_t
 
	mef_Â
;

161 
k_machªg_t
 
	mef_ø
;

162 
k_machªg_t
 
	mef_§
;

163 
k_machªg_t
 
	mef_mdlo
;

164 
k_machªg_t
 
	mef_mdhi
;

165 
k_machªg_t
 
	mef_badvaddr
;

166 
k_machªg_t
 
	mef_ˇu£
;

167 
k_machªg_t
 
	mef_ïc
;

168 
k_machªg_t
 
	mef_Â4
;

169 
k_machªg_t
 
	mef_c⁄fig
;

170 #i‡
IP32


171 
__uöt64_t
 
	mef_¸mmsk
;

173 
__uöt64_t
 
	mef_˚l
;

175 
k_machªg_t
 
	mef_˝uid
;

176 
k_machªg_t
 
	mef_bu£º_öfo
;

177 
k_machªg_t
 
	mef_bu£º_•l
;

178 
k_machªg_t
 
	mef_îr‹_ïc
;

184 
k_machªg_t
 
	mef_exa˘_ïc
;

185 } 
	te‰ame_t
;

	@/usr/include/sys/timers.h

1 #i‚de‡
__SYS_TIMERS_H__


2 
	#__SYS_TIMERS_H__


	)

3 #ifde‡
__˝lu•lus


24 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

25 #i‚de‡
_KERNEL


26 
	~<time.h
>

34 
	#AS_USR_RUN
 0

	)

35 
	#AS_SYS_RUN
 1

	)

36 
	#AS_INT_RUN
 2

	)

37 
	#AS_BIO_WAIT
 3

	)

38 
	#AS_MEM_WAIT
 4

	)

39 
	#AS_SELECT_WAIT
 5

	)

40 
	#AS_JCL_WAIT
 6

	)

41 
	#AS_RUNQ_WAIT
 7

	)

42 
	#AS_SLEEP_WAIT
 8

	)

43 
	#AS_STRMON_WAIT
 9

	)

44 
	#AS_PHYSIO_WAIT
 10

	)

46 
	#MAX_PROCTIMER
 11

	)

48 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

65 
	#MAX_PROCTIMERMASK
 0x0f‡

	)

66 
	#AS_DONT_SWITCH
 0x100

	)

70 #i‡
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
)

72 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

100 #i‡
deföed
(
CLOCK_CTIME_IS_ABSOLUTE
)

101 
uöt64_t
 
	tktimî¢≠_t
;

104 
time_t
 
£cs
;

105 
uöt32_t
 
πc
;

106 } 
	tktimî¢≠_t
;

110 
uöt64_t
 
kp_timî
[
MAX_PROCTIMER
];

112 
ktimî¢≠_t
 
kp_¢≠
;

113 
kp_cuπimî
;

114 
uöt32_t
 
kp_b¨rõr
;

117 } 
	tktimîpkg_t
;

119 
	~<sys/ktime.h
>

120 
	~<sys/time•ec.h
>

122 
	#TIMER_MAX
 0xfffffff‡

	)

127 #ifde‡
_KERNEL


132 
timî_‰eq
;

133 
timî_unô
;

134 
timî_high_unô
;

135 
timî_max£c
;

141 
	#gë_time°amp
(Ë
	`_gë_time°amp
()

	)

143 #i‡
deföed
(
MP
)

144 
	~<sys/˛ksuµ‹t.h
>

145 
	#absﬁuã_πc_cuºít_time
(Ë
GET_LOCAL_RTC


	)

146 
	#_gë_time°amp
(Ë()
GET_LOCAL_RTC


	)

148 
__öt64_t
 
absﬁuã_πc_cuºít_time
();

149 
time_t
 
_gë_time°amp
();

163 
	#TIMESPEC_TO_ACCUM
(
ts
Ë(—s)->
tv_n£c
 + \

164 (
NSEC_PER_SEC
 * (
accum_t
Ë(
ts
)->
tv_£c
))

	)

170 
	#TIMER_SHIFT
(
x
Ë((x&0xff)<<16Ë

	)

171 
	#TIMER_SHIFTBACK
(
x
Ë(((x)>>16)&0xff)

	)

172 
	#TIMER_MASK
 0xffff

	)

177 
	gtime•ec
;

178 
	gkthªad
;

180 
ktimî_öô
(
kthªad
 *, );

181 
ktimî_swôch
(
kthªad
 *, );

182 
uöt64_t
 
ktimî_ªadticks
(c⁄° 
kthªad
 *, );

183 
ktimî_ªad
(c⁄° 
kthªad
 *, , 
time•ec
 *);

184 
ktimî_¶±ime
(c⁄° 
kthªad
 *);

186 
	~<sys/xœã.h
>

187 
úix5_to_time•ec
(
xœã_mode
, *, , 
xœã_öfo_t
 *);

188 
time•ec_to_úix5
(*, , 
xœã_öfo_t
 *);

193 #ifde‡
__˝lu•lus


	@/usr/include/sys/ttydev.h

8 #i‚de‡
_SYS_TTYDEV_H


9 
	#_SYS_TTYDEV_H


	)

13 
	~<°™d¨ds.h
>

30 
	#__NEW_INVALID_BAUD
 1800

	)

32 
	#__OLD_B0
 0

	)

33 
	#__OLD_B50
 0000001

	)

34 
	#__OLD_B75
 0000002

	)

35 
	#__OLD_B110
 0000003

	)

36 
	#__OLD_B134
 0000004

	)

37 
	#__OLD_B150
 0000005

	)

38 
	#__OLD_B200
 0000006

	)

39 
	#__OLD_B300
 0000007

	)

40 
	#__OLD_B600
 0000010

	)

41 
	#__OLD_B1200
 0000011

	)

42 
	#__OLD_B1800
 0000012

	)

43 
	#__OLD_B2400
 0000013

	)

44 
	#__OLD_B4800
 0000014

	)

45 
	#__OLD_B9600
 0000015

	)

46 
	#__OLD_B19200
 0000016

	)

47 
	#__OLD_EXTA
 0000016

	)

48 
	#__OLD_B38400
 0000017

	)

49 
	#__OLD_EXTB
 0000017

	)

50 
	#__OLD_INVALID_BAUD
 
__OLD_B1800


	)

52 #i‡!
deföed
(
_OLD_TERMIOS
Ë&& !
_ABIAPI


54 
	#B0
 0

	)

55 
	#B50
 50

	)

56 
	#B75
 75

	)

57 
	#B110
 110

	)

58 
	#B134
 134

	)

59 
	#B150
 150

	)

60 
	#B200
 200

	)

61 
	#B300
 300

	)

62 
	#B600
 600

	)

63 
	#B1200
 1200

	)

64 
	#B1800
 1800

	)

65 
	#B2400
 2400

	)

66 
	#B4800
 4800

	)

67 
	#B9600
 9600

	)

68 
	#B19200
 19200

	)

69 
	#EXTA
 19200

	)

70 
	#B38400
 38400

	)

71 
	#EXTB
 38400

	)

72 
	#B57600
 57600

	)

73 
	#B76800
 76800

	)

74 
	#B115200
 115200

	)

75 
	#__INVALID_BAUD
 1800

	)

79 
	#B0
 
__OLD_B0


	)

80 
	#B50
 
__OLD_B50


	)

81 
	#B75
 
__OLD_B75


	)

82 
	#B110
 
__OLD_B110


	)

83 
	#B134
 
__OLD_B134


	)

84 
	#B150
 
__OLD_B150


	)

85 
	#B200
 
__OLD_B200


	)

86 
	#B300
 
__OLD_B300


	)

87 
	#B600
 
__OLD_B600


	)

88 
	#B1200
 
__OLD_B1200


	)

89 
	#B1800
 
__OLD_B1800


	)

90 
	#B2400
 
__OLD_B2400


	)

91 
	#B4800
 
__OLD_B4800


	)

92 
	#B9600
 
__OLD_B9600


	)

93 
	#B19200
 
__OLD_B19200


	)

94 
	#EXTA
 
__OLD_B19200


	)

95 
	#B38400
 
__OLD_B38400


	)

96 
	#EXTB
 
__OLD_B38400


	)

97 
	#__INVALID_BAUD
 
__OLD_INVALID_BAUD


	)

	@/usr/include/wchar.h

1 #i‚de‡
_WCHAR_H


2 
	#_WCHAR_H


	)

4 
	~<°dio.h
>

5 
	~<˘y≥.h
>

6 
	~<time.h
>

7 
	~<loˇÀ_©å.h
>

8 #i‡
_NO_XOPEN5


9 
	~<w˘y≥.h
>

11 
	~<öã∫Æ/wch¨_c‹e.h
>

13 
	$__SGI_LIBC_USING_FROM_STD
(
size_t
)

14 
	$__SGI_LIBC_USING_FROM_STD
(
wöt_t
)

15 
	$__SGI_LIBC_USING_FROM_STD
(
mb°©e_t
)

16 
	$__SGI_LIBC_USING_FROM_STD
(
w˘y≥_t
)

17 
	$__SGI_LIBC_USING_FROM_STD
(
iswÆnum
)

18 
	$__SGI_LIBC_USING_FROM_STD
(
iswÆpha
)

19 
	$__SGI_LIBC_USING_FROM_STD
(
isw˙ål
)

20 
	$__SGI_LIBC_USING_FROM_STD
(
iswdigô
)

21 
	$__SGI_LIBC_USING_FROM_STD
(
iswgøph
)

22 
	$__SGI_LIBC_USING_FROM_STD
(
iswlowî
)

23 
	$__SGI_LIBC_USING_FROM_STD
(
isw¥öt
)

24 
	$__SGI_LIBC_USING_FROM_STD
(
iswpun˘
)

25 
	$__SGI_LIBC_USING_FROM_STD
(
isw•a˚
)

26 
	$__SGI_LIBC_USING_FROM_STD
(
iswuµî
)

27 
	$__SGI_LIBC_USING_FROM_STD
(
iswxdigô
)

28 
	$__SGI_LIBC_USING_FROM_STD
(
isw˘y≥
)

29 
	$__SGI_LIBC_USING_FROM_STD
(
w˘y≥
)

30 
	$__SGI_LIBC_USING_FROM_STD
(
towlowî
)

31 
	$__SGI_LIBC_USING_FROM_STD
(
towuµî
)

33 
	$__SGI_LIBC_USING_FROM_STD
(
fw¥ötf
)

34 
	$__SGI_LIBC_USING_FROM_STD
(
fwsˇnf
)

35 
	$__SGI_LIBC_USING_FROM_STD
(
sw¥ötf
)

36 
	$__SGI_LIBC_USING_FROM_STD
(
swsˇnf
)

37 
	$__SGI_LIBC_USING_FROM_STD
(
vfw¥ötf
)

38 #i‡
	`deföed
(
__c99
)

39 
	$__SGI_LIBC_USING_FROM_STD
(
vfwsˇnf
)

41 
	$__SGI_LIBC_USING_FROM_STD
(
vsw¥ötf
)

42 #i‡
	`deföed
(
__c99
)

43 
	$__SGI_LIBC_USING_FROM_STD
(
vswsˇnf
)

45 
	$__SGI_LIBC_USING_FROM_STD
(
vw¥ötf
)

46 #i‡
	`deföed
(
__c99
)

47 
	$__SGI_LIBC_USING_FROM_STD
(
vwsˇnf
)

49 
	$__SGI_LIBC_USING_FROM_STD
(
w¥ötf
)

50 
	$__SGI_LIBC_USING_FROM_STD
(
wsˇnf
)

52 
	$__SGI_LIBC_USING_FROM_STD
(
fgëwc
)

53 
	$__SGI_LIBC_USING_FROM_STD
(
fgëws
)

54 
	$__SGI_LIBC_USING_FROM_STD
(
Âutwc
)

55 
	$__SGI_LIBC_USING_FROM_STD
(
Âutws
)

56 
	$__SGI_LIBC_USING_FROM_STD
(
fwide
)

57 
	$__SGI_LIBC_USING_FROM_STD
(
gëwc
)

58 
	$__SGI_LIBC_USING_FROM_STD
(
gëwch¨
)

59 
	$__SGI_LIBC_USING_FROM_STD
(
putwc
)

60 
	$__SGI_LIBC_USING_FROM_STD
(
putwch¨
)

61 
	$__SGI_LIBC_USING_FROM_STD
(
ungëwc
)

63 
	$__SGI_LIBC_USING_FROM_STD
(
wc°od
)

64 #i‡
	`deföed
(
__c99
)

65 
	$__SGI_LIBC_USING_FROM_STD
(
wc°of
)

66 
	$__SGI_LIBC_USING_FROM_STD
(
wc°ﬁd
)

69 
	$__SGI_LIBC_USING_FROM_STD
(
wc°ﬁ
)

70 #i‡
	`deföed
(
_c99
Ë|| 
_ABIAPI
 || 
_SGIAPI


71 
	$__SGI_LIBC_USING_FROM_STD
(
wc°ﬁl
)

73 
	$__SGI_LIBC_USING_FROM_STD
(
wc°oul
)

74 #i‡
	`deföed
(
_c99
Ë|| 
_ABIAPI
 || 
_SGIAPI


75 
	$__SGI_LIBC_USING_FROM_STD
(
wc°ouŒ
)

78 
	$__SGI_LIBC_USING_FROM_STD
(
wcs˝y
)

79 
	$__SGI_LIBC_USING_FROM_STD
(
wc¢˝y
)

80 
	$__SGI_LIBC_USING_FROM_STD
(
wmem˝y
)

81 
	$__SGI_LIBC_USING_FROM_STD
(
wmemmove
)

83 
	$__SGI_LIBC_USING_FROM_STD
(
wcsˇt
)

84 
	$__SGI_LIBC_USING_FROM_STD
(
wc¢ˇt
)

86 
	$__SGI_LIBC_USING_FROM_STD
(
wcscmp
)

87 
	$__SGI_LIBC_USING_FROM_STD
(
wcscﬁl
)

88 
	$__SGI_LIBC_USING_FROM_STD
(
wc¢cmp
)

89 
	$__SGI_LIBC_USING_FROM_STD
(
wcsx‰m
)

90 
	$__SGI_LIBC_USING_FROM_STD
(
wmemcmp
)

92 
	$__SGI_LIBC_USING_FROM_STD
(
wcschr
)

93 
	$__SGI_LIBC_USING_FROM_STD
(
wcsc•n
)

94 
	$__SGI_LIBC_USING_FROM_STD
(
wc•brk
)

95 
	$__SGI_LIBC_USING_FROM_STD
(
wc§chr
)

96 
	$__SGI_LIBC_USING_FROM_STD
(
wcs•n
)

97 
	$__SGI_LIBC_USING_FROM_STD
(
wcs°r
)

98 
	$__SGI_LIBC_USING_FROM_STD
(
wc°ok
)

99 
	$__SGI_LIBC_USING_FROM_STD
(
wmemchr
)

100 
	$__SGI_LIBC_USING_FROM_STD
(
wc¶í
)

101 
	$__SGI_LIBC_USING_FROM_STD
(
wmem£t
)

103 
	$__SGI_LIBC_USING_FROM_STD
(
wcs·ime
)

105 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

106 
	$__SGI_LIBC_USING_FROM_STD
(
btowc
)

107 
	$__SGI_LIBC_USING_FROM_STD
(
w˘ob
)

110 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

111 
	$__SGI_LIBC_USING_FROM_STD
(
mbsöô
)

114 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

115 
	$__SGI_LIBC_USING_FROM_STD
(
mbæí
)

116 
	$__SGI_LIBC_USING_FROM_STD
(
mbπowc
)

117 
	$__SGI_LIBC_USING_FROM_STD
(
w¸tomb
)

120 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

121 
	$__SGI_LIBC_USING_FROM_STD
(
mb§towcs
)

122 
	$__SGI_LIBC_USING_FROM_STD
(
wc§tombs
)

125 
	$__SGI_LIBC_USING_FROM_STD
(
wcwidth
)

126 
	$__SGI_LIBC_USING_FROM_STD
(
wcswidth
)

127 
	$__SGI_LIBC_USING_FROM_STD
(
wcswcs
)

	@/usr/include/internal/wchar_core.h

1 #i‚de‡
_WCHAR_CORE_H


2 
	#_WCHAR_CORE_H


	)

21 
	~<sgidefs.h
>

22 
	~<°™d¨ds.h
>

23 
	~<öã∫Æ/sgima¸os.h
>

35 #i‚de‡
_WCHAR_CORE_EXTENSIONS_1


36 
	#_WCHAR_CORE_EXTENSIONS_1
 
	`deföed
(
__c99
Ë|| deföed(
__˝lu•lus
Ë|| (
_XOPEN_SOURCE
+0 >=500)

	)

39 
__SGI_LIBC_BEGIN_EXTERN_C


41 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


50 #i‡!
deföed
(
_SIZE_T
Ë&& !deföed(
_SIZE_T_
)

51 
	#_SIZE_T


	)

52 #i‡(
_MIPS_SZLONG
 == 32)

53 
	tsize_t
;

55 #i‡(
_MIPS_SZLONG
 == 64)

56 
	tsize_t
;

60 #i‚de‡
_WCHAR_T


61 
	#_WCHAR_T


	)

62 #i‡(
_MIPS_SZLONG
 == 32)

63 
	twch¨_t
;

65 #i‡(
_MIPS_SZLONG
 == 64)

66 
__öt32_t
 
	twch¨_t
;

70 
	g__SGI_LIBC_END_NAMESPACE_STD


74 #i‚de‡
_WUCHAR_T


75 
	#_WUCHAR_T


	)

76 #i‡(
_MIPS_SZLONG
 == 32)

77 
	twuch¨_t
;

79 #i‡(
_MIPS_SZLONG
 == 64)

80 
__uöt32_t
 
	twuch¨_t
;

84 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


86 #i‚de‡
_WINT_T


87 
	#_WINT_T


	)

88 #i‡(
_MIPS_SZLONG
 == 32)

89 
	twöt_t
;

91 #i‡(
_MIPS_SZLONG
 == 64)

92 
__öt32_t
 
	twöt_t
;

96 #i‚de‡
_WCTYPE_T


97 
	#_WCTYPE_T


	)

98 #i‡(
_MIPS_SZLONG
 == 32)

99 
	tw˘y≥_t
;

101 #i‡(
_MIPS_SZLONG
 == 64)

102 
__uöt32_t
 
	tw˘y≥_t
;

106 #i‚de‡
_MBSTATE_T


107 
	#_MBSTATE_T


	)

108 
	tmb°©e_t
;

111 #i‚de‡
NULL


112 
	#NULL
 0L

	)

115 #i‡
_WCHAR_CORE_EXTENSIONS_1


116 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

117 #i‚de‡
WCHAR_MAX


118 
	#WCHAR_MAX
 2147483647

	)

120 #i‚de‡
WCHAR_MIN


121 
	#WCHAR_MIN
 (-2147483647-1)

	)

126 #i‚de‡
WEOF


127 
	#WEOF
 (-1)

	)

132 
iswÆnum
(
wöt_t
);

133 
iswÆpha
(
wöt_t
);

134 
	g__SGI_LIBC_END_NAMESPACE_STD


135 #i‡
deföed
(
__c99
)

136 
iswbœnk
(
wöt_t
);

137 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

138 #¥agm®
›ti⁄Æ
 
iswbœnk


141 
__iswbœnk
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

142 
__SGI_LIBC_BEGIN_NAMESPACE_STD


143 
isw˙ål
(
wöt_t
);

144 
iswdigô
(
wöt_t
);

145 
iswgøph
(
wöt_t
);

146 
iswlowî
(
wöt_t
);

147 
isw¥öt
(
wöt_t
);

148 
iswpun˘
(
wöt_t
);

149 
isw•a˚
(
wöt_t
);

150 
iswuµî
(
wöt_t
);

151 
iswxdigô
(
wöt_t
);

153 
isw˘y≥
(
wöt_t
, 
w˘y≥_t
);

154 
w˘y≥_t
 
w˘y≥
(const *);

158 
wöt_t
 
towlowî
(wint_t);

159 
wöt_t
 
towuµî
(wint_t);

163 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

164 #i‡
_WCHAR_CORE_EXTENSIONS_1


165 
fw¥ötf
(
FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, ...);

166 
fwsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, ...);

167 
sw¥ötf
(
wch¨_t
 * 
__ª°ri˘
, 
size_t
, const wchar_t * __restrict, ...);

168 
swsˇnf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, const wchar_t * __restrict, ...);

169 
vfw¥ötf
(
FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __ª°ri˘, 
va_li°
);

171 
vsw¥ötf
(
wch¨_t
 * 
__ª°ri˘
, 
size_t
, c⁄° wch¨_à* __ª°ri˘, 
va_li°
);

172 
vw¥ötf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, 
va_li°
);

173 
w¥ötf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, ...);

174 
wsˇnf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, ...);

176 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

177 #¥agm®
›ti⁄Æ
 
fw¥ötf


178 #¥agm®
›ti⁄Æ
 
fwsˇnf


179 #¥agm®
›ti⁄Æ
 
sw¥ötf


180 #¥agm®
›ti⁄Æ
 
swsˇnf


181 #¥agm®
›ti⁄Æ
 
vfw¥ötf


182 #¥agm®
›ti⁄Æ
 
vsw¥ötf


183 #¥agm®
›ti⁄Æ
 
vw¥ötf


184 #¥agm®
›ti⁄Æ
 
w¥ötf


185 #¥agm®
›ti⁄Æ
 
wsˇnf


189 #i‡
deföed
(
__c99
)

190 
vfwsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __ª°ri˘, 
va_li°
);

191 
vswsˇnf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, c⁄° wch¨_à* __ª°ri˘, 
va_li°
);

192 
vwsˇnf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, 
va_li°
);

193 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

194 #¥agm®
›ti⁄Æ
 
vfwsˇnf


195 #¥agm®
›ti⁄Æ
 
vswsˇnf


196 #¥agm®
›ti⁄Æ
 
vwsˇnf


204 
wöt_t
 
fgëwc
(
FILE
 *);

205 
wch¨_t
 *
fgëws
(wch¨_à* 
__ª°ri˘
, , 
FILE
 * __restrict);

206 
wöt_t
 
Âutwc
(wöt_t, 
FILE
 *);

207 
Âutws
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, 
FILE
 * __restrict);

208 #i‡
_WCHAR_CORE_EXTENSIONS_1


209 
fwide
(
FILE
 *, );

211 
wöt_t
 
gëwc
(
FILE
 *);

212 
wöt_t
 
gëwch¨
();

213 
wöt_t
 
putwc
(wöt_t, 
FILE
 *);

214 
wöt_t
 
putwch¨
(wint_t);

215 
wöt_t
 
ungëwc
(wöt_t, 
FILE
 *);

216 #i‡(
_SGIAPI
 && 
_NO_ANSIMODE
)

217 
wch¨_t
 *
gëws
(wchar_t *);

218 
putws
(
wch¨_t
 *);

220 #i‚de‡
__˝lu•lus


221 
	#gëwch¨
(Ë
	`gëwc
(
°dö
)

	)

222 
	#putwch¨
(
x
Ë
	`putwc
((x), 
°dout
)

	)

229 
wc°od
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict);

230 #i‡(
_MIPS_SIM
 !
_ABI32
)

231 #i‡
deföed
(
__c99
)

232 
wc°of
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict);

233 
wc°ﬁd
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict);

234 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

235 #¥agm®
›ti⁄Æ
 
wc°of


236 #¥agm®
›ti⁄Æ
 
wc°ﬁd


241 
wc°ﬁ
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict, );

242 #i‡
deföed
(
__c99
Ë|| 
_ABIAPI
 || 
_SGIAPI


243 
wc°ﬁl
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict, );

245 
wc°oul
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict, );

246 #i‡
deföed
(
__c99
Ë|| 
_ABIAPI
 || 
_SGIAPI


247 
wc°ouŒ
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict, );

252 
wch¨_t
 *
wcs˝y
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict);

253 
wch¨_t
 *
wc¢˝y
(wch¨_à* 
__ª°ri˘
, c⁄° wch¨_à* __ª°ri˘, 
size_t
);

254 #i‡
_WCHAR_CORE_EXTENSIONS_1


255 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

256 
wch¨_t
 *
wmem˝y
(wch¨_à* 
__ª°ri˘
, c⁄° wch¨_à* __ª°ri˘, 
size_t
);

257 
wch¨_t
 *
wmemmove
(wch¨_à*, c⁄° wch¨_à*, 
size_t
);

258 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

259 #¥agm®
›ti⁄Æ
 
wmem˝y


260 #¥agm®
›ti⁄Æ
 
wmemmove


267 
wch¨_t
 *
wcsˇt
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict);

268 
wch¨_t
 *
wc¢ˇt
(wch¨_à* 
__ª°ri˘
, c⁄° wch¨_à* __ª°ri˘, 
size_t
);

272 
wcscmp
(c⁄° 
wch¨_t
 *, const wchar_t *);

273 
wcscﬁl
(c⁄° 
wch¨_t
 *, const wchar_t *);

274 
wc¢cmp
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*, 
size_t
);

275 
size_t
 
wcsx‰m
(
wch¨_t
 * 
__ª°ri˘
, const wchar_t * __restrict, size_t);

276 #i‡
_WCHAR_CORE_EXTENSIONS_1


277 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

278 
wmemcmp
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*, 
size_t
);

279 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

280 #¥agm®
›ti⁄Æ
 
wmemcmp


287 #i‚de‡
__SGI_LIBC_USE_STRING_OVERLOADS


288 
wch¨_t
 *
wcschr
(c⁄° wch¨_à*, 
wöt_t
);

290 
size_t
 
wcsc•n
(c⁄° 
wch¨_t
 *, const wchar_t *);

291 
wch¨_t
 *
wc•brk
(const wchar_t *, const wchar_t *);

292 #i‚de‡
__SGI_LIBC_USE_STRING_OVERLOADS


293 
wch¨_t
 *
wc§chr
(const wchar_t *, wchar_t);

295 
size_t
 
wcs•n
(c⁄° 
wch¨_t
 *, const wchar_t *);

296 #i‚de‡
__SGI_LIBC_USE_STRING_OVERLOADS


297 
wch¨_t
 *
wcs°r
(const wchar_t *, const wchar_t *);

300 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

301 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

302 #i‡
_NO_XOPEN5


303 
wch¨_t
 * 
wc°ok
(wchar_t *, const wchar_t *);

304 
wch¨_t
 *
_xpg4_wc°ok
(wchar_t *, const wchar_t *);

305 #¥agm®
›ti⁄Æ
 
_xpg4_wc°ok


307 
wch¨_t
 *
_xpg5_wc°ok
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict, wchar_t ** __restrict);

308 #ifde‡
_XPG5_WCSTOK_USER_DEFINED


315 
wch¨_t
 * 
wc°ok
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict, wchar_t ** __restrict);

325 
__ölöe
 
wch¨_t
 *
	$wc°ok
(
wch¨_t
 * 
__ª°ri˘
 
_ws1
, c⁄° wch¨_à* __ª°ri˘ 
_ws2
, wch¨_à** __ª°ri˘ 
_pws
)

327 (
	`_xpg5_wc°ok
(
_ws1
, 
_ws2
, 
_pws
));

328 
	}
}

330 #¥agm®
›ti⁄Æ
 
_xpg5_wc°ok


333 
wch¨_t
 *
wc°ok
(wchar_t *, const wchar_t *);

336 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

337 
wch¨_t
 *
wc°ok
(wchar_t *, const wchar_t *, wchar_t **);

338 
wch¨_t
 *
_xpg4_wc°ok
(wchar_t *, const wchar_t *);

339 
wch¨_t
 *
_xpg5_wc°ok
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict, wchar_t ** __restrict);

341 
wch¨_t
 *
wc°ok
(wchar_t *, const wchar_t *);

345 #i‡
_WCHAR_CORE_EXTENSIONS_1


346 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

347 
wch¨_t
 *
wmemchr
(c⁄° wch¨_à*, wch¨_t, 
size_t
);

348 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

349 #¥agm®
›ti⁄Æ
 
wmemchr


356 
size_t
 
wc¶í
(c⁄° 
wch¨_t
 *);

357 #i‡
_WCHAR_CORE_EXTENSIONS_1


358 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

359 
wch¨_t
 *
wmem£t
(wch¨_à*, wch¨_t, 
size_t
);

360 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

361 #¥agm®
›ti⁄Æ
 
wmem£t


368 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

369 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

370 #i‡
_NO_XOPEN5


371 
size_t
 
wcs·ime
(
wch¨_t
 *, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 size_t, c⁄° *, c⁄° 
tm
 *);

372 
size_t
 
_xpg4_wcs·ime
(
wch¨_t
 *, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 size_t, c⁄° *, c⁄° 
tm
 *);

373 #¥agm®
›ti⁄Æ
 
_xpg4_wcs·ime


375 
size_t
 
_xpg5_wcs·ime
(
wch¨_t
 * 
__ª°ri˘
, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 size_t, c⁄° wch¨_à* __ª°ri˘, c⁄° 
tm
 * __restrict);

376 #ifde‡
_XPG5_WCSFTIME_USER_DEFINED


383 
size_t
 
wcs·ime
(
wch¨_t
 * 
__ª°ri˘
, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 size_t, c⁄° wch¨_à* __ª°ri˘, c⁄° 
tm
 * __restrict);

393 
__ölöe
 
size_t
 
	$wcs·ime
(
wch¨_t
 * 
__ª°ri˘
 
_wcs
, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
size_t
 
_maxsize
, c⁄° wch¨_à* __ª°ri˘ 
_f‹m©
, c⁄° 
tm
 * __ª°ri˘ 
_tim±r
)

395 (
	`_xpg5_wcs·ime
(
_wcs
, 
_maxsize
, 
_f‹m©
, 
_tim±r
));

396 
	}
}

398 #¥agm®
›ti⁄Æ
 
_xpg5_wcs·ime


401 
size_t
 
wcs·ime
(
wch¨_t
 *, size_t, c⁄° *, c⁄° 
tm
 *);

404 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

405 
size_t
 
wcs·ime
(
wch¨_t
 *, size_t, c⁄° *, c⁄° 
tm
 *);

406 
size_t
 
_xpg4_wcs·ime
(
wch¨_t
 *, size_t, c⁄° *, c⁄° 
tm
 *);

407 
size_t
 
_xpg5_wcs·ime
(
wch¨_t
 * 
__ª°ri˘
, size_t, c⁄° wch¨_à* __ª°ri˘, c⁄° 
tm
 * __restrict);

409 
size_t
 
wcs·ime
(
wch¨_t
 *, size_t, c⁄° *, c⁄° 
tm
 *);

417 #i‡
_WCHAR_CORE_EXTENSIONS_1
 || 
deföed
(
_SGI_COMPILING_LIBC
)

418 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

419 
wöt_t
 
btowc
();

420 
w˘ob
(
wöt_t
);

421 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

422 #¥agm®
›ti⁄Æ
 
btowc


423 #¥agm®
›ti⁄Æ
 
w˘ob


429 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

430 
mbsöô
(c⁄° 
mb°©e_t
 *);

431 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

432 #¥agm®
›ti⁄Æ
 
mbsöô


438 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

439 
size_t
 
mbæí
(c⁄° * 
__ª°ri˘
, size_t, 
mb°©e_t
 * __restrict);

440 
size_t
 
mbπowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, size_t, 
mb°©e_t
 * __restrict);

441 
size_t
 
w¸tomb
(* 
__ª°ri˘
, 
wch¨_t
, 
mb°©e_t
 * __restrict);

442 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

443 #¥agm®
›ti⁄Æ
 
mbæí


444 #¥agm®
›ti⁄Æ
 
mbπowc


445 #¥agm®
›ti⁄Æ
 
w¸tomb


451 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

452 
size_t
 
mb§towcs
(
wch¨_t
 * 
__ª°ri˘
, c⁄° ** __ª°ri˘, size_t, 
mb°©e_t
 * __restrict);

453 
size_t
 
wc§tombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 ** __ª°ri˘, size_t, 
mb°©e_t
 * __restrict);

454 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

455 #¥agm®
›ti⁄Æ
 
mb§towcs


456 #¥agm®
›ti⁄Æ
 
wc§tombs


463 
wcwidth
(
wch¨_t
);

464 
wcswidth
(c⁄° 
wch¨_t
 *, 
size_t
);

465 
wch¨_t
 *
wcswcs
(const wchar_t *, const wchar_t *);

467 #i‚de‡
_SGI_COMPILING_LIBC


468 #i‡
_WCHAR_CORE_EXTENSIONS_1


469 #¥agm®
›ti⁄Æ
 
fwide


473 
	g__SGI_LIBC_END_NAMESPACE_STD


475 #i‡
_SGIAPI


476 
wch¨_t
 *
wc°ok_r
(wchar_t *, const wchar_t *, wchar_t **);

479 
	g__SGI_LIBC_END_EXTERN_C


481 #ifde‡
__SGI_LIBC_USE_STRING_OVERLOADS


494 
«me•a˚
 
	g__sgûib
 {

495 
__SGI_LIBC_BEGIN_EXTERN_C


496 
wch¨_t
 *
wcschr
(c⁄° wch¨_à*, 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

497 
wch¨_t
 *
wc•brk
(const wchar_t *, const wchar_t *);

498 
wch¨_t
 *
wc§chr
(const wchar_t *, wchar_t);

499 
wch¨_t
 *
wcs°r
(const wchar_t *, const wchar_t *);

500 
	g__SGI_LIBC_END_EXTERN_C


503 
__SGI_LIBC_BEGIN_NAMESPACE_STD


505 
ölöe
 c⁄° 
wch¨_t
* 
	$wcschr
(c⁄° 
wch¨_t
* 
s
, 
wöt_t
 
c
) {

506  
__sgûib
::
	`wcschr
(
s
, 
c
);

507 
	}
}

509 
ölöe
 
wch¨_t
* 
	$wcschr
(
wch¨_t
* 
s
, 
wöt_t
 
c
) {

510  
__sgûib
::
	`wcschr
(
s
, 
c
);

511 
	}
}

513 
ölöe
 c⁄° 
wch¨_t
* 
	$wc•brk
(c⁄° 
wch¨_t
* 
s1
, c⁄° wch¨_t* 
s2
) {

514  
__sgûib
::
	`wc•brk
(
s1
, 
s2
);

515 
	}
}

517 
ölöe
 
wch¨_t
* 
	$wc•brk
(
wch¨_t
* 
s1
, c⁄° wch¨_t* 
s2
) {

518  
__sgûib
::
	`wc•brk
(
s1
, 
s2
);

519 
	}
}

521 
ölöe
 c⁄° 
wch¨_t
* 
	$wc§chr
(c⁄° 
wch¨_t
* 
s
, wch¨_à
c
) {

522  
__sgûib
::
	`wc§chr
(
s
, 
c
);

523 
	}
}

525 
ölöe
 
wch¨_t
* 
	$wc§chr
(
wch¨_t
* 
s
, wch¨_à
c
) {

526  
__sgûib
::
	`wc§chr
(
s
, 
c
);

527 
	}
}

529 
ölöe
 c⁄° 
wch¨_t
* 
	$wcs°r
(c⁄° 
wch¨_t
* 
s1
, c⁄° wch¨_t* 
s2
) {

530  
__sgûib
::
	`wcs°r
(
s1
, 
s2
);

531 
	}
}

533 
ölöe
 
wch¨_t
* 
	$wcs°r
(
wch¨_t
* 
s1
, c⁄° wch¨_t* 
s2
) {

534  
__sgûib
::
	`wcs°r
(
s1
, 
s2
);

535 
	}
}

537 
	g__SGI_LIBC_END_NAMESPACE_STD


541 #ifde‡
_WCHAR_CORE_EXTENSIONS_1


542 #unde‡
_WCHAR_CORE_EXTENSIONS_1


	@/usr/include/locale_attr.h

13 #i‚de‡
__LOCALE_ATTR_H__


14 
	#__LOCALE_ATTR_H__


	)

16 
	~<öã∫Æ/loˇÀ_©å_c‹e.h
>

18 
	$__SGI_LIBC_USING_FROM_STD
(
wöt_t
)

	@/usr/include/sys/SN/SN0/kldir.h

13 #i‚de‡
__SYS_SN_SN0_KLDIR_H__


14 
	#__SYS_SN_SN0_KLDIR_H__


	)

148 
	#SYMMON_STACK_SIZE
 0x8000

	)

150 #i‡
deföed
 (
PROM
Ë|| deföed (
SABLE
)

156 
	#IP27_LAUNCH_OFFSET
 0x2400

	)

157 
	#IP27_LAUNCH_SIZE
 0x400

	)

158 
	#IP27_LAUNCH_COUNT
 2

	)

159 
	#IP27_LAUNCH_STRIDE
 0x200

	)

161 
	#IP27_KLCONFIG_OFFSET
 0x4000

	)

162 
	#IP27_KLCONFIG_SIZE
 0xc000

	)

163 
	#IP27_KLCONFIG_COUNT
 1

	)

164 
	#IP27_KLCONFIG_STRIDE
 0

	)

166 
	#IP27_NMI_OFFSET
 0x3000

	)

167 
	#IP27_NMI_SIZE
 0x40

	)

168 
	#IP27_NMI_COUNT
 2

	)

169 
	#IP27_NMI_STRIDE
 0x40

	)

171 
	#IP27_PI_ERROR_OFFSET
 0x12000

	)

172 
	#IP27_PI_ERROR_SIZE
 0x4000

	)

173 
	#IP27_PI_ERROR_COUNT
 1

	)

174 
	#IP27_PI_ERROR_STRIDE
 0

	)

176 
	#IP27_SYMMON_STK_OFFSET
 0x25000

	)

177 
	#IP27_SYMMON_STK_SIZE
 0xe000

	)

178 
	#IP27_SYMMON_STK_COUNT
 2

	)

180 
	#IP27_SYMMON_STK_STRIDE
 0x7000

	)

182 
	#IP27_FREEMEM_OFFSET
 0x19000

	)

183 
	#IP27_FREEMEM_SIZE
 -1

	)

184 
	#IP27_FREEMEM_COUNT
 1

	)

185 
	#IP27_FREEMEM_STRIDE
 0

	)

191 
	#IO6_GDA_OFFSET
 0x11000

	)

192 
	#IO6_GDA_SIZE
 0x400

	)

193 
	#IO6_GDA_COUNT
 1

	)

194 
	#IO6_GDA_STRIDE
 0

	)

199 
	#IP27_NMI_KREGS_OFFSET
 0x11400

	)

200 
	#IP27_NMI_KREGS_CPU_SIZE
 0x200

	)

204 
	#IP27_NMI_EFRAME_OFFSET
 0x11800

	)

205 
	#IP27_NMI_EFRAME_SIZE
 0x200

	)

207 
	#GPDA_OFFSET
 0x16000

	)

	@/usr/include/sys/SN/SN0/slotnum.h

13 #i‚de‡
__SYS_SN_SN0_SLOTNUM_H__


14 
	#__SYS_SN_SN0_SLOTNUM_H__


	)

16 
	#SLOTNUM_MAXLENGTH
 16

	)

30 
	~<sys/¶Ÿnum.h
>

38 
	#NODESLOTS_PER_MODULE
 6

	)

39 
	#NODESLOTS_PER_MODULE_SHFT
 2

	)

41 
	#HIGHEST_I2C_VISIBLE_NODESLOT
 4

	)

42 
	#RTRSLOTS_PER_MODULE
 2

	)

48 
	#SN00_MOTHERBOARD
 "MŸhîBﬂrd"

	)

51 
	#XBOX_FLASHPROM_WID
 8

	)

53 #i‡
_KERNEL


54 
	~<sys/xèlk/xèlk.h
>

56 
¶Ÿid_t
 
xbwidgë_to_xt¶Ÿ
(
¸ossbow
, 
widgë
);

57 
¶Ÿid_t
 
hub_¶Ÿbôs_to_¶Ÿ
(¶Ÿid_à
¶Ÿbôs
);

58 
¶Ÿid_t
 
hub_¶Ÿ_to_¸ossbow
(¶Ÿid_à
hub_¶Ÿ
);

59 
¶Ÿid_t
 
rouãr_¶Ÿbôs_to_¶Ÿ
(¶Ÿid_à
¶Ÿbôs
);

60 
¶Ÿid_t
 
gë_node_¶Ÿid
(
«sid_t
 
«sid
);

61 
¶Ÿid_t
 
gë_my_¶Ÿid
();

62 
¶Ÿid_t
 
gë_node_¸ossbow
(
«sid_t
);

63 
xwidgënum_t
 
hub_¶Ÿ_to_widgë
(
¶Ÿid_t
);

64 
gë_¶Ÿ«me
(
¶Ÿid_t
, *);

65 
gë_my_¶Ÿ«me
(*);

66 
¶Ÿid_t
 
gë_widgë_¶Ÿnum
(
xbow
, 
widgë
);

67 
gë_widgë_¶Ÿ«me
(, , *);

68 
rouãr_¶Ÿbôs_to_¶Ÿ«me
(, *);

69 
¶Ÿid_t
 
mëa_rouãr_¶Ÿbôs_to_¶Ÿ
(slotid_t) ;

70 
¶Ÿid_t
 
hub_¶Ÿ_gë
();

72 
node_ˇn_èlk_to_ñsc
();

74 
is_xbox_c⁄fig
(
«sid_t
);

75 
«sid_t
 
ù27log_xbox_«sid_gë
(nasid_t);

76 
ù27log_xbox_«sid_£t
(
«sid_t
,nasid_t);

77 
ù27log_xbox_«sid_˛ór
(
«sid_t
);

78 
«sid_t
 
xbox_«sid_gë
();

81 
¶Ÿ_to_widgë
() ;

82 
	#MAX_IO_SLOT_NUM
 12

	)

83 
	#MAX_NODE_SLOT_NUM
 4

	)

84 
	#MAX_ROUTER_SLOTNUM
 2

	)

	@/usr/include/sys/SN/SN1/kldir.h

13 #i‚de‡
__SYS_SN_SN1_KLDIR_H__


14 
	#__SYS_SN_SN1_KLDIR_H__


	)

165 
	#SYMMON_STACK_SIZE
 0x8000

	)

167 #i‡
deföed
 (
PROM
Ë|| deföed (
SABLE
)

173 
	#IP27_LAUNCH_OFFSET
 0x2400

	)

174 
	#IP27_LAUNCH_SIZE
 0x400

	)

175 
	#IP27_LAUNCH_COUNT
 4

	)

176 
	#IP27_LAUNCH_STRIDE
 0x100

	)

178 
	#IP27_KLCONFIG_OFFSET
 0x30000

	)

179 
	#IP27_KLCONFIG_SIZE
 0x10000

	)

180 
	#IP27_KLCONFIG_COUNT
 1

	)

181 
	#IP27_KLCONFIG_STRIDE
 0

	)

183 
	#IP27_NMI_OFFSET
 0x3000

	)

184 
	#IP27_NMI_SIZE
 0x100

	)

185 
	#IP27_NMI_COUNT
 4

	)

186 
	#IP27_NMI_STRIDE
 0x40

	)

188 
	#IP27_PI_ERROR_OFFSET
 0x20000

	)

189 
	#IP27_PI_ERROR_SIZE
 0x10000

	)

190 
	#IP27_PI_ERROR_COUNT
 1

	)

191 
	#IP27_PI_ERROR_STRIDE
 0

	)

193 
	#IP27_SYMMON_STK_OFFSET
 0x4c000

	)

194 
	#IP27_SYMMON_STK_SIZE
 0x20000

	)

195 
	#IP27_SYMMON_STK_COUNT
 4

	)

197 
	#IP27_SYMMON_STK_STRIDE
 0x8000

	)

199 
	#IP27_FREEMEM_OFFSET
 0x40000

	)

200 
	#IP27_FREEMEM_SIZE
 -1

	)

201 
	#IP27_FREEMEM_COUNT
 1

	)

202 
	#IP27_FREEMEM_STRIDE
 0

	)

208 
	#IO6_GDA_OFFSET
 0xb000

	)

209 
	#IO6_GDA_SIZE
 0x400

	)

210 
	#IO6_GDA_COUNT
 1

	)

211 
	#IO6_GDA_STRIDE
 0

	)

216 
	#IP27_NMI_KREGS_OFFSET
 0x9000

	)

217 
	#IP27_NMI_KREGS_CPU_SIZE
 0x400

	)

221 
	#IP27_NMI_EFRAME_OFFSET
 0xa000

	)

222 
	#IP27_NMI_EFRAME_SIZE
 0x400

	)

224 
	#GPDA_OFFSET
 0x11c00

	)

	@/usr/include/sys/SN/SN1/slotnum.h

13 #i‚de‡
__SYS_SN_SN1_SLOTNUM_H__


14 
	#__SYS_SN_SN1_SLOTNUM_H__


	)

16 
	#SLOTNUM_MAXLENGTH
 16

	)

23 
	~<sys/¶Ÿnum.h
>

27 
	#NODESLOTS_PER_MODULE
 1

	)

28 
	#NODESLOTS_PER_MODULE_SHFT
 1

	)

30 #i‡
_KERNEL


31 
	~<sys/xèlk/xèlk.h
>

33 
gë_¶Ÿ«me
(
¶Ÿid_t
, *);

34 
¶Ÿid_t
 
gë_widgë_¶Ÿnum
(
xbow
, 
widgë
, 
bt
);

35 
gë_widgë_¶Ÿ«me
(, , , *);

38 
	#MAX_IO_SLOT_NUM
 15

	)

	@/usr/include/sys/SN/intr_public.h

13 #i‚de‡
__SYS_SN_INTR_PUBLIC_H__


14 
	#__SYS_SN_INTR_PUBLIC_H__


	)

22 
	#N_INTPEND0_MASKS
 1

	)

23 
	#N_INTPEND1_MASKS
 1

	)

25 
	#INTPEND0_MAXMASK
 (
N_INTPEND0_MASKS
 - 1)

	)

26 
	#INTPEND1_MAXMASK
 (
N_INTPEND1_MASKS
 - 1)

	)

28 #i‡
_LANGUAGE_C


29 
	~"sys/ty≥s.h
"

30 
	~"sys/ªg.h
"

31 
	~"sys/SN/¨ch.h
"

33 
	göå_vecblk_s
;

44 
	shub_ötmasks_s
 {

50 
hubªg_t
 
	möçíd0_masks
[
N_INTPEND0_MASKS
];

52 
hubªg_t
 
	möçíd1_masks
[
N_INTPEND1_MASKS
];

54 
öå_vecblk_s
 *
	mdi•©ch0
;

56 
öå_vecblk_s
 *
	mdi•©ch1
;

57 } 
	thub_ötmasks_t
;

	@/usr/include/sys/SN/war.h

13 #i‚de‡
__SYS_SN_WAR_H__


14 
	#__SYS_SN_WAR_H__


	)

15 #i‡
deföed
 (
SN0
)

16 
	~<sys/SN/SN0/w¨.h
>

17 #ñi‡
deföed
 (
SN1
)

18 
	~<sys/SN/SN1/w¨.h
>

	@/usr/include/sys/callo.h

15 #i‚de‡
_SYS_CALLO_H


16 
	#_SYS_CALLO_H


	)

26 
	uc_tid
 {

27 
toid_t
 
	mc_eid
;

29 #ifde‡
SN1


30 
	mci_˝uid
 : 9;

31 
	mci_Á°
 : 1;

32 
	mci_cid
 : 22;

33 #ñi‡
SN0XXL


34 
	mci_˝uid
 : 9;

35 
	mci_Á°
 : 1;

36 
	mci_cid
 : 22;

38 
	mci_˝uid
 : 7;

39 
	mci_Á°
 : 1;

40 
	mci_cid
 : 24;

42 } 
	mc_pid
;

45 #i‡
deföed
(
SN1
Ë|| deföed(
SN0XXL
)

47 
	#MAX_C_CID
 4194303

	)

50 
	#MAX_C_CID
 16777215

	)

59 
	sˇŒout
 {

60 
__öt64_t
 
	mc_time
;

61 
ˇŒout
 *
	mc_√xt
;

62 
c_tid
 
	mc_tid
;

63 (*
	mc_func
)();

64 *
	mc_¨g
;

65 *
	mc_¨g1
;

66 *
	mc_¨g2
;

67 *
	mc_¨g3
;

68 
	mc_∂
;

69 
˝uid_t
 
	mc_ow√r˝u
;

70 
	mc_Êags
;

74 
	#c_id
 
c_tid
.
c_eid


	)

75 
	#c_cid
 
c_tid
.
c_pid
.
ci_cid


	)

76 
	#c_˝uid
 
c_tid
.
c_pid
.
ci_˝uid


	)

77 
	#c_Á°
 
c_tid
.
c_pid
.
ci_Á°


	)

81 
	#C_FLAG_ITHRD
 0x01

	)

82 
	#C_FLAG_ISTK
 0x02

	)

84 
	#C_IS_ITHRD
(
x
Ë(x & 
C_FLAG_ITHRD
)

	)

85 
	#C_IS_ISTK
(
x
Ë(x & 
C_FLAG_ISTK
)

	)

93 
	#C_NORM
 0x00

	)

94 
	#C_FAST
 0x01

	)

95 
	#C_CLOCK
 0x02

	)

96 
	#C_NORM_ISTK
 0x03

	)

97 
	#C_FAST_ISTK
 0x04

	)

98 
	#C_CLOCK_ISTK
 0x05

	)

100 
ˇŒout_‰ì
(
ˇŒout
 *
co
);

101 
ˇŒout_gë_¥i
();

	@/usr/include/sys/calloinfo.h

12 #i‚de‡
_CALLOINFO_H


13 
	#_CALLOINFO_H


	)

39 
	sci_°ack
 {

40 
__öt64_t
 
	mc_°©us
;

41 
ˇŒout
 *
	m_c_√xt
;

42 
c_tid
 
	mc_tid
;

43 
sv_t
 
	mcs_sync
;

44 
	mcs_id_√xt
;

47 
	#CS_INACTIVE
 0

	)

48 
	#CS_INUSE
 1

	)

49 
	#CS_WAITING
 2

	)

58 
	gˇŒout_öfo
;

59 
	sˇŒout_ôöfo
 {

60 
toid_t
 
	mcô_toid
;

61 
xthªad
 *
	mcô_ôhªad
;

62 
ˇŒout_öfo
 *
	mcô_ˇŒoöfo
;

63 
	mcô_Êags
;

64 
sv_t
 
	mcô_sync
;

65 
ˇŒout
 *
	mcô_to
;

67 } 
	tci_ôöfo_t
;

70 
	#CIT_WAITING
 0x01

	)

72 
	gz⁄e
;

74 
	sˇŒout_öfo
 {

75 
z⁄e
 *
	mci_‰ì_z⁄e
;

76 
lock_t
 
	mci_li°lock
;

77 
ˇŒout
 
	mci_todo
;

80 
ˇŒout
 
	mci_≥ndög
;

81 
ci_°ack
 
	mci_cuºít
;

82 } 
	mci_¥ogªssög
;

84 
ci_ôöfo_t
 *
	mci_ôhrdöfo
;

85 
	mci_Êags
;

86 
	mci_ôhrd_˙t
;

87 
£ma_t
 
	mci_£ma
;

88 } 
	tˇŒout_öfo_t
;

91 
	#CA_ENABLED
 0x00000001

	)

92 
	#CA_ITHRD_CREATING
 0x00000002

	)

93 
	#CA_CPU_MASK
 0xffff0000

	)

94 
	#CA_CPU_SHIFT
 16

	)

96 #i‡
deföed
(
CLOCK_CTIME_IS_ABSOLUTE
)

97 
	#CALLTODO
(
x
Ë
pdaödr
[x].
pda
->
p_ˇŒtodo


	)

99 
ˇŒout_öfo_t
 *
ˇŒtodo
;

100 
	#CALLTODO
(
x
Ë
ˇŒtodo
[x]

	)

104 
	#CI_LISTLOCK
(
x
Ë((x)->
ci_li°lock
)

	)

105 
	#CI_FREE_ZONE
(
x
Ë((x)->
ci_‰ì_z⁄e
)

	)

106 
	#CI_TODO
(
x
Ë&((x)->
ci_todo
)

	)

107 
	#CI_TODO_NEXT
(
x
Ë((x)->
ci_todo
).
c_√xt


	)

108 
	#CI_PENDING
(
x
Ë&((x)->
ci_¥ogªssög
.
ci_≥ndög
)

	)

109 
	#CI_PENDING_NEXT
(
x
Ë((x)->
ci_¥ogªssög
.
ci_≥ndög
).
c_√xt


	)

110 
	#CI_STATUS
(
x
Ë((x)->
ci_¥ogªssög
.
ci_cuºít
).
c_°©us


	)

111 
	#CS_NEXT_ID
(
x
Ë((x)->
ci_¥ogªssög
.
ci_cuºít
).
cs_id_√xt


	)

112 
	#CI_SEMA
(
x
Ë&((x)->
ci_£ma
)

	)

113 
	#CI_CPU
(
x
Ë(((x)->
ci_Êags
 & 
CA_CPU_MASK
Ë>> 
CA_CPU_SHIFT
)

	)

114 
	#CI_FLAGS
(
x
Ë((x)->
ci_Êags
)

	)

117 
	#CIT_TO_CPU
(
x
Ë
	`CI_CPU
(((x)->
cô_ˇŒoöfo
))

	)

118 
	#CIT_GET_SEMA
(
x
Ë
	`CI_SEMA
(((x)->
cô_ˇŒoöfo
))

	)

121 
	#CA_ITHRDS_PER_LIST
 6

	)

	@/usr/include/sys/clksupport.h

14 #i‚de‡ 
_KSYS_CLKSUPPORT_H


15 
	#_KSYS_CLKSUPPORT_H


	)

17 
	~<sys/mùs_addr•a˚.h
>

19 #i‡
EVEREST


20 
	~<sys/EVEREST/evîe°.h
>

21 
	~<sys/EVEREST/evc⁄fig.h
>

22 
	~<sys/EVEREST/ïc.h
>

23 
evªg_t
 
	t˛kªg_t
;

24 
	#GET_LOCAL_RTC
 
EV_GET_LOCAL_RTC


	)

25 
	#DISABLE_TMO_INTR
(Ë
	`EV_SETMYCONFIG_REG
(
EV_CMPREG0
, 0)

	)

26 
	#CLK_FCLOCK_FAST_FREQ
 
NVR_INTR_FAST_RATE


	)

27 
	#CLK_FCLOCK_SLOW_FREQ
 
NVR_INTR_SLOW_RATE


	)

29 
	#CLK_CYCLE_ADDRESS_FOR_USER
 
EV_RTC


	)

32 #i‡
SN


33 
	~<sys/SN/agít.h
>

34 
	~<sys/SN/öå_public.h
>

35 
hubªg_t
 
	t˛kªg_t
;

36 
«sid_t
 
ma°î_«sid
;

38 
	#GET_LOCAL_RTC
 (
˛kªg_t
)
	`LOCAL_HUB_L
(
PI_RT_COUNT
)

	)

39 
	#DISABLE_TMO_INTR
(Ëi‡(
	`˝utﬁoˇl¶i˚
(
	`˝uid
())) \

40 
	`REMOTE_HUB_PI_S
(
	`gë_«sid
(),\

41 
	`˝utosubnode
(
	`˝uid
()),\

42 
PI_RT_COMPARE_B
, 0); \

44 
	`REMOTE_HUB_PI_S
(
	`gë_«sid
(),\

45 
	`˝utosubnode
(
	`˝uid
()),\

46 
PI_RT_COMPARE_A
, 0);

	)

48 #ifde‡
SN0


54 
	#NSEC_PER_CYCLE
 800

	)

55 
	#CYCLE_PER_SEC
 (
NSEC_PER_SEC
/
NSEC_PER_CYCLE
)

	)

59 
	#CLK_FCLOCK_FAST_FREQ
 1250

	)

61 
	~<sys/SN/SN1/bedrock.h
>

66 
	#RT_MAX_COUNT
 (sig√d)((
	`LOCAL_HUB_L
(
LB_RT_LOCAL_CTRL
) & \

67 
LRLC_MAX_COUNT_MASK
Ë>> 
LRLC_MAX_COUNT_SHFT
)

	)

68 
	#BEDROCK_MHZ
 200

	)

69 
	#NSEC_PER_CYCLE
 (1000/
BEDROCK_MHZ
*2*(
RT_MAX_COUNT
+1))

	)

70 
	#CYCLE_PER_SEC
 (
NSEC_PER_SEC
/
NSEC_PER_CYCLE
)

	)

71 
	#CLK_FCLOCK_FAST_FREQ
 (
CYCLE_PER_SEC
/1000)

	)

73 
	#CLK_FCLOCK_SLOW_FREQ
 0

	)

75 
	#CLK_CYCLE_ADDRESS_FOR_USER
 
	`LOCAL_HUB_ADDR
(
PI_RT_COUNT
)

	)

77 #ñi‡
IP30


78 
	~<sys/˝u.h
>

79 
hóπªg_t
 
	t˛kªg_t
;

80 
	#NSEC_PER_CYCLE
 80

	)

81 
	#CYCLE_PER_SEC
 (
NSEC_PER_SEC
/
NSEC_PER_CYCLE
)

	)

82 
	#GET_LOCAL_RTC
 *((vﬁ©ûê
˛kªg_t
 *)
	`PHYS_TO_COMPATK1
(
HEART_COUNT
))

	)

83 
	#DISABLE_TMO_INTR
()

	)

84 
	#CLK_CYCLE_ADDRESS_FOR_USER
 
	`PHYS_TO_K1
(
HEART_COUNT
)

	)

85 
	#CLK_FCLOCK_SLOW_FREQ
 (
CYCLE_PER_SEC
 / 
HZ
)

	)

89 
öô_timeba£
();

90 
Á°ick_maöt
(
e‰ame_s
 *);

91 
audio˛ock
;

92 
¥f˛k_íabÀd_˙t
;

	@/usr/include/sys/hwperftypes.h

18 #i‚de‡
__SYS_HWPERFTYPES_H__


19 
	#__SYS_HWPERFTYPES_H__


	)

26 
	~<sys/time.h
>

28 #ifde‡
SN


29 
	~<sys/SN/¨ch.h
>

30 #ifde‡
_KERNEL


31 
	~<sys/SN/agít.h
>

39 
	#HWPERF_EVENTMAX
 32

	)

43 
	#HWPERF_COUNTMAX
 4

	)

46 
	shw≥rf_˘æªg
 {

47 
ush‹t_t
 
	mhwp_ev
 :11,

48 
	mhwp_õ
 :1,

49 
	mhwp_mode
:4;

55 #i‡
deföed
 (
_KERNEL
)

56 
	s˝u_m⁄
 {

59 
	mcm_Êags
;

60 
__uöt32_t
 
	mcm_mixed_˝u_Êags
;

61 
__uöt32_t
 
	mcm_mixed_˝u_°¨ãd
;

63 
	mcm_sig
;

66 
pid_t
 
	mcm_pgid
;

69 
	mcm_≥rf˙t_¨ch_swtch_sig
;

70 
˝uid_t
 
	mcm_cou¡ög_˝u
;

71 
	mcm_gí
;

73 
muãx_t
 
	mcm_muãx
;

79 
	mcm_num_cou¡îs
;

80 
__uöt64_t
 
	mcm_evít_mask
[
HWPERF_COUNTMAX
];

81 
	mcm_evíts
 [
HWPERF_COUNTMAX
];

83 
	mcm_evödx
 [
HWPERF_COUNTMAX
];

85 
	mcm_evmax
 [
HWPERF_COUNTMAX
];

92 
	mcm_num_evíts
;

94 
ush‹t
 
	mcm_ev•ec
 [
HWPERF_EVENTMAX
];

96 
uöt
 
	mcm_¥ñﬂd˙t
[
HWPERF_EVENTMAX
];

97 
uöt
 
	mcm_ßve˙t
 [
HWPERF_EVENTMAX
];

98 
__uöt64_t
 
	mcm_evít˙t
 [
HWPERF_EVENTMAX
];

99 } 
	t˝u_m⁄_t
;

253 
	#HWPERF_CPU_R10K_REV2X
 0x0001

	)

254 
	#HWPERF_CPU_R10K_REV3
 0x0002

	)

255 
	#HWPERF_CPU_R12K_REV22
 0x0004

	)

258 
	#IS_HWPERF_EVENT_MASK_SET
(
_mask
,
_e
Ë(_mask & (1uŒ << _e))

	)

260 
	#HWPERF_FREE
 0x0001

	)

261 
	#HWPERF_RSVD
 0x0002

	)

262 
	#HWPERF_PROC
 0x0004

	)

263 
	#HWPERF_SYS
 0x0008

	)

264 
	#HWPERF_PROFILING
 0x0010

	)

266 
	#HWPERF_MAXWAIT
 50000000

	)

270 
	#HWPERF_CM_PROC
 0x0001

	)

271 
	#HWPERF_CM_SYS
 0x0002

	)

272 
	#HWPERF_CM_CPU
 0x0004

	)

273 
	#HWPERF_CM_ENABLED
 0x0008

	)

274 
	#HWPERF_CM_EN
 0x000f

	)

276 
	#HWPERF_CM_VALID
 0x0010

	)

277 
	#HWPERF_CM_PSAVE
 0x0020

	)

278 
	#HWPERF_CM_LOST
 0x0040

	)

279 
	#HWPERF_CM_PROFILING
 0x0080

	)

280 
	#HWPERF_CM_SUSPENDED
 0x0100

	)

282 
	s≥rf_m⁄
 {

283 
˝u_m⁄_t
 *
	mpm_˝u_m⁄
;

284 } 
	t≥rf_m⁄_t
;

286 
	ge‰ame_s
;

287 
	ghw≥rf_¥o„v˘ørg
;

288 
	ghw≥rf_¥o„v˘øux
;

300 
__uöt64_t
 
	mhwp_ev˘r
[
HWPERF_EVENTMAX
];

301 } 
	thw≥rf_˙å_t
;

310 
	mhw≥rf_•ec
;

311 
hw≥rf_˘æªg
 
	mhw≥rf_¸eg
;

312 } 
	thw≥rf_˘æ_t
;

315 
hw≥rf_˘æ_t
 
	mhwp_ev˘æ
[
HWPERF_EVENTMAX
];

316 } 
	thw≥rf_evít˘æ_t
;

318 
	shw≥rf_¥o„v˘ørg
 {

319 
hw≥rf_evít˘æ_t
 
	mhwp_ev˘ørgs
;

320 
	mhwp_ovÊw_‰eq
[
HWPERF_EVENTMAX
];

321 
	mhwp_ovÊw_sig
;

322 } 
	thw≥rf_¥o„v˘ørg_t
;

324 
	shw≥rf_¥o„v˘øux
 {

325 
	mhwp_aux_gí
;

326 
hw≥rf_˙å_t
 
	mhwp_aux_˙å
;

327 } 
	thw≥rf_¥o„v˘øux_t
;

329 
	shw≥rf_evít˘æaux
 {

330 
	mhwp_aux_sig
;

331 
	mhwp_aux_‰eq
[
HWPERF_EVENTMAX
];

332 } 
	thw≥rf_evít˘æaux_t
;

334 
	shw≥rf_¥o„v˘ørgex
 {

335 
hw≥rf_¥o„v˘ørg_t
 *
	mhwp_¨gs
;

336 
hw≥rf_¥o„v˘øux_t
 *
	mhwp_aux
;

337 } 
	thw≥rf_¥o„v˘ørgex_t
;

339 
	shw≥rf_gë˘æex_¨g
 {

340 
hw≥rf_evít˘æ_t
 *
	mhwp_ev˘æ
;

341 
hw≥rf_evít˘æaux_t
 *
	mhwp_ev˘æaux
;

342 } 
	thw≥rf_gë˘æex_¨g_t
;

344 #i‡
deföed
 (
SN
)

349 
	#MD_PERF_MEM_CYCLES
 0

	)

350 
	#MD_PERF_OUTMSG_CLASS
 1

	)

351 
	#MD_PERF_INVAL_CLASS
 2

	)

352 
	#MD_PERF_INMSG_CLASS
 3

	)

353 
	#MD_PERF_DIR_STATE
 4

	)

354 
	#MD_PERF_LOCAL_REQ
 5

	)

357 
	#MD_PERF_SEL_ALL
 ((1 << 
MD_PERF_SETS
Ë- 1)

	)

358 
	#MD_PERF_SEL_MEM_CYCLES
 (1 << 
MD_PERF_MEM_CYCLES
)

	)

359 
	#MD_PERF_SEL_OUTMSG_CLASS
 (1 << 
MD_PERF_OUTMSG_CLASS
)

	)

360 
	#MD_PERF_SEL_INVAL_CLASS
 (1 << 
MD_PERF_INVAL_CLASS
)

	)

361 
	#MD_PERF_SEL_INMSG_CLASS
 (1 << 
MD_PERF_INMSG_CLASS
)

	)

362 
	#MD_PERF_SEL_DIR_STATE
 (1 << 
MD_PERF_DIR_STATE
)

	)

363 
	#MD_PERF_SEL_LOCAL_REQ
 (1 << 
MD_PERF_LOCAL_REQ
)

	)

365 
	smd_≥rf_c⁄åﬁ
 {

366 
uöt
 
	m˘æ_bôs
;

367 } 
	tmd_≥rf_c⁄åﬁ_t
;

369 
	smd_≥rf_ªg
 {

370 
__uöt64_t
 
	mm¥_ovîÊow
 : 1,

371 
	mm¥_vÆue
 :63;

372 } 
	tmd_≥rf_ªg_t
;

375 
	smd_≥rf_vÆues
 {

376 
md_≥rf_ªg_t
 
	mmpv_cou¡
[
MD_PERF_SETS
][
MD_PERF_COUNTERS
];

377 
__öt64_t
 
	mmpv_time°amp
[
MD_PERF_SETS
];

378 } 
	tmd_≥rf_vÆues_t
;

381 
	#MD_PERF_S0_IDLE
 0

	)

382 
	#MD_PERF_S0_BLOCKED
 1

	)

383 
	#MD_PERF_S0_REFRESH
 2

	)

384 
	#MD_PERF_S0_DIRECTORY
 3

	)

385 
	#MD_PERF_S0_MEMORY
 4

	)

386 
	#MD_PERF_S0_MISC
 5

	)

390 
	#MD_PERF_S1_II
 0

	)

391 
	#MD_PERF_S1_BOFF_II
 1

	)

392 
	#MD_PERF_S1_WBACK_ACK
 2

	)

393 
	#MD_PERF_S1_XSU_RESP
 3

	)

394 
	#MD_PERF_S1_NACK
 4

	)

395 
	#MD_PERF_S1_OTHER
 5

	)

398 
	#MD_PERF_S2_INVAL
 0

	)

399 
	#MD_PERF_S2_IV_REMOVE
 1

	)

400 
	#MD_PERF_S2_IV_RXUNC
 2

	)

401 
	#MD_PERF_S2_IV_RSUNC
 3

	)

402 
	#MD_PERF_S2_IV_RXCL
 4

	)

403 
	#MD_PERF_S2_IV_RSHD
 5

	)

406 
	#MD_PERF_S3_MISC
 0

	)

407 
	#MD_PERF_S3_READ
 1

	)

408 
	#MD_PERF_S3_WRITE
 2

	)

409 
	#MD_PERF_S3_REVISION
 3

	)

410 
	#MD_PERF_S3_FOP_HITS
 4

	)

411 
	#MD_PERF_S3_FOP_MISSES
 5

	)

414 
	#MD_PERF_S4_UNOWNED
 0

	)

415 
	#MD_PERF_S4_POISONED
 1

	)

416 
	#MD_PERF_S4_SHARED
 2

	)

417 
	#MD_PERF_S4_XCL_REQ
 3

	)

418 
	#MD_PERF_S4_XCL_OTHER
 4

	)

419 
	#MD_PERF_S4_BUSY
 5

	)

422 
	#MD_PERF_S5_CPU0_READS
 0

	)

423 
	#MD_PERF_S5_CPU0_WBACKS
 1

	)

424 
	#MD_PERF_S5_CPU1_READS
 2

	)

425 
	#MD_PERF_S5_CPU1_WBACKS
 3

	)

426 
	#MD_PERF_S5_IO_READS
 4

	)

427 
	#MD_PERF_S5_IO_WRITES
 5

	)

437 
	#IO_PERF_MICRO_TO_LLP
 0

	)

438 
	#IO_PERF_DATA_DWORDS_FROM_LLP
 1

	)

439 
	#IO_PERF_DWORDS_TO_LEGONET
 2

	)

440 
	#IO_PERF_DATA_DWORDS_FROM_LEGONET
 3

	)

441 
	#IO_PERF_11_TO_14_CRBS_USED
 4

	)

442 
	#IO_PERF_5_OR_LESS_CRBS_USED
 5

	)

443 
	#IO_PERF_3_PARTIAL_CACHE_USED
 6

	)

444 
	#IO_PERF_1_PARTIAL_CACHE_USED
 7

	)

445 
	#IO_PERF_RETIRED_AFTER_CRBS
 8

	)

446 
	#IO_PERF_EJECTED_CACHE_ENTRY
 9

	)

447 
	#IO_PERF_CRB_ENTRY_ALLOCATED
 10

	)

450 
	#IO_PERF_PACKETS_FROM_LLP
 16

	)

451 
	#IO_PERF_DATA_PACKETS_TO_LLP
 17

	)

452 
	#IO_PERF_DWORDS_FROM_LEGONET
 18

	)

453 
	#IO_PERF_DATA_DWORDS_TO_LEGONET
 19

	)

454 
	#IO_PERF_CLOCKS_15_CRBS
 20

	)

455 
	#IO_PERF_CLOCKS_6_TO_10_CRBS_USED
 21

	)

456 
	#IO_PERF_CLOCKS_4_PARTIAL_CACHES
 22

	)

457 
	#IO_PERF_CLOCKS_2_PARTIAL_CACHES
 23

	)

458 
	#IO_PERF_RETIRED_BEFORE_CRBS
 24

	)

459 
	#IO_PERF_PARTIAL_XTALK_WRITES
 25

	)

460 
	#IO_PERF_CRB_ALLOCATIONS
 26

	)

463 
	#IO_PERF_SEL_MICRO_TO_LLP
 (1 << 
IO_PERF_MICRO_TO_LLP
)

	)

464 
	#IO_PERF_SEL_DATA_DWORDS_FROM_LLP
 (1 << 
IO_PERF_DATA_DWORDS_FROM_LLP
)

	)

465 
	#IO_PERF_SEL_DWORDS_TO_LEGONET
 (1 << 
IO_PERF_DWORDS_TO_LEGONET
)

	)

466 
	#IO_PERF_SEL_DATA_DWORDS_FROM_LEGONET
 (1 << 
IO_PERF_DATA_DWORDS_FROM_LEGONET
)

	)

467 
	#IO_PERF_SEL_11_TO_14_CRBS_USED
 (1 << 
IO_PERF_11_TO_14_CRBS_USED
)

	)

468 
	#IO_PERF_SEL_5_OR_LESS_CRBS_USED
 (1 << 
IO_PERF_5_OR_LESS_CRBS_USED
)

	)

469 
	#IO_PERF_SEL_3_PARTIAL_CACHE_USED
 (1 << 
IO_PERF_3_PARTIAL_CACHE_USED
)

	)

470 
	#IO_PERF_SEL_1_PARTIAL_CACHE_USED
 (1 << 
IO_PERF_1_PARTIAL_CACHE_USED
)

	)

471 
	#IO_PERF_SEL_RETIRED_AFTER_CRBS
 (1 << 
IO_PERF_RETIRED_AFTER_CRBS
)

	)

472 
	#IO_PERF_SEL_EJECTED_CACHE_ENTRY
 (1 << 
IO_PERF_EJECTED_CACHE_ENTRY
)

	)

473 
	#IO_PERF_SEL_CRB_ENTRY_ALLOCATED
 (1 << 
IO_PERF_CRB_ENTRY_ALLOCATED
)

	)

476 
	#IO_PERF_SEL_PACKETS_FROM_LLP
 (1 << 
IO_PERF_PACKETS_FROM_LLP
)

	)

477 
	#IO_PERF_SEL_DATA_PACKETS_TO_LLP
 (1 << 
IO_PERF_DATA_PACKETS_TO_LLP
)

	)

478 
	#IO_PERF_SEL_DWORDS_FROM_LEGONET
 (1 << 
IO_PERF_DWORDS_FROM_LEGONET
)

	)

479 
	#IO_PERF_SEL_DATA_DWORDS_TO_LEGONET
 (1 << 
IO_PERF_DATA_DWORDS_TO_LEGONET
)

	)

480 
	#IO_PERF_SEL_CLOCKS_15_CRBS
 (1 << 
IO_PERF_CLOCKS_15_CRBS
)

	)

481 
	#IO_PERF_SEL_CLOCKS_6_TO_10_CRBS_USED
 (1 << 
IO_PERF_CLOCKS_6_TO_10_CRBS_USED
)

	)

482 
	#IO_PERF_SEL_CLOCKS_4_PARTIAL_CACHES
 (1 << 
IO_PERF_CLOCKS_4_PARTIAL_CACHES
)

	)

483 
	#IO_PERF_SEL_CLOCKS_2_PARTIAL_CACHES
 (1 << 
IO_PERF_CLOCKS_2_PARTIAL_CACHES
)

	)

484 
	#IO_PERF_SEL_RETIRED_BEFORE_CRBS
 (1 << 
IO_PERF_RETIRED_BEFORE_CRBS
)

	)

485 
	#IO_PERF_SEL_PARTIAL_XTALK_WRITES
 (1 << 
IO_PERF_PARTIAL_XTALK_WRITES
)

	)

486 
	#IO_PERF_SEL_CRB_ALLOCATIONS
 (1 << 
IO_PERF_CRB_ALLOCATIONS
)

	)

488 
	#IO_PERF_SEL_IPPR0
 (0x7FF)

	)

489 
	#IO_PERF_SEL_IPPR1
 (0x7FF0000)

	)

490 
	#IO_PERF_SEL_ALL
 (
IO_PERF_SEL_IPPR1
 | 
IO_PERF_SEL_IPPR0
)

	)

493 
	#IO_PERF_CTRLBITS_INVALID
(
_bôs
Ë(_bô†& ~(
IO_PERF_SEL_ALL
))

	)

495 
	sio_≥rf_c⁄åﬁ
 {

496 
uöt
 
	m˘æ_bôs
;

497 } 
	tio_≥rf_c⁄åﬁ_t
;

501 
	sio_≥rf_vÆues
 {

502 
__öt64_t
 
	mi›v_cou¡
[
IO_PERF_SETS
];

503 
__öt64_t
 
	mi›v_time°amp
[
IO_PERF_SETS
];

504 } 
	tio_≥rf_vÆues_t
;

	@/usr/include/sys/immu.h

18 #i‚de‡
__SYS_IMMU_H__


19 
	#__SYS_IMMU_H__


	)

23 
	~<sys/sbd.h
>

24 
	~<sys/mùs_addr•a˚.h
>

25 
	~<sys/m≠≥d_kî√l.h
>

26 #i‡
IP32


27 
	~<sys/˝u.h
>

30 #i‡!
deföed
(
_LANGUAGE_ASSEMBLY
)

31 
	~<sys/ty≥s.h
>

32 
	~<sys/©omic_›s.h
>

35 
	#MIN_NBPP
 4096

	)

36 
	#MIN_PNUMSHFT
 12

	)

37 
	#MIN_POFFMASK
 (
MIN_NBPP
 - 1Ë

	)

39 
	#IO_NBPP
 4096

	)

40 
	#IO_PNUMSHFT
 12

	)

41 
	#IO_POFFMASK
 (
IO_NBPP
 - 1Ë

	)

43 #i‡
_PAGESZ
 == 4096

44 
	#PNUMSHFT
 12

	)

46 #i‡
_PAGESZ
 == 16384

47 
	#PNUMSHFT
 14

	)

50 
	#NBPP
 
_PAGESZ


	)

51 
	#PGFCTR
 (
NBPP
 / 
MIN_NBPP
)

	)

52 
	#PGSHFTFCTR
 (
PNUMSHFT
 - 
MIN_PNUMSHFT
)

	)

54 #i‡!
LANGUAGE_ASSEMBLY


60 
	s∑gec⁄°
 {

61 
	mp_∑gesz
;

62 
	mp_≤umsh·
;

63 
	mp_nbµ
;

66 #i‡
_KERNEL


67 
	~<sys/£ma.h
>

156 #i‡
NBPP
 =
MIN_NBPP


157 
	#PTE_PFN
(
num
Ë
±e_p‚
:
	)
num

158 
	#PFNWIDTH
 
PFNDWIDTH


	)

159 
	#PFNSHIFT
 0

	)

160 #ñi‡!
deföed
(
_KERNEL
)

161 
	#PTE_PFN
(
num
Ë
±e_p‚
:
	)
num

162 
	#PFNWIDTH
 
PFNDWIDTH


	)

163 
	#PFNSHIFT
 0

	)

165 
	#PTE_PFN
(
num
Ë
±e_p‚
:num-
PGSHFTFCTR
, \

166 :
PGSHFTFCTR


	)

167 
	#PFNWIDTH
 (
PFNDWIDTH
-
PGSHFTFCTR
)

	)

168 
	#PFNSHIFT
 
PGSHFTFCTR


	)

171 #i‡
R4000
 || 
IP28
 || 
IP32


172 #i‡
deföed
(
IP20
Ë|| deföed(
IP22
Ë|| deföed(
IP28
Ë|| deföed(
IPMHSIM
)

173 
	s±e
 {

174 
uöt
 
	m±e_dúty
 : 1,

175 
	m±e_sv
 : 1,

176 
	m±e_p‚lock
:1,

177 
	m±e_ƒ
 : 2,

178 
	m±e_e›
 : 1,

179 
PTE_PFN
(20),

180 
	m±e_cc
:3,

181 
	m±e_m
:1,

182 
	m±e_vr
:1,

183 
	m±e_g
:1;

184 } 
	t±e_t
;

185 
	#PFNDWIDTH
 20

	)

186 
	#PFNOFFSET
 6

	)

187 
	#PG_PFNLOCK
 0x20000000

	)

188 
	#NPFNMASK
 0x03FFFFC0

	)

189 
	#NPFNSHIFT
 (6 + 
PGSHFTFCTR
)

	)

190 
	#NRMASK
 0x18000000

	)

191 
	#NRSHIFT
 27

	)

192 
	#CCMASK
 0x00000038

	)

193 
	#CCSHIFT
 3

	)

194 
	#PG_SHOTDN
 0

	)

196 #i‡
deföed
(
IP32
)

197 
	s±e
 {

198 
uöt
 
	m±e_dúty
 : 1,

199 
	m±e_sv
 : 1,

200 
	m±e_ƒ
 : 3,

201 
	m±e_p‚lock
 : 1,

202 
PTE_PFN
(20),

203 
	m±e_cc
:3,

204 
	m±e_m
:1,

205 
	m±e_vr
:1,

206 
	m±e_g
:1;

207 } 
	t±e_t
;

208 
	#PFNDWIDTH
 20

	)

209 
	#PFNOFFSET
 4

	)

210 
	#PG_PFNLOCK
 0x04000000

	)

211 
	#NPFNMASK
 0x03FFFFC0

	)

212 
	#NPFNSHIFT
 (6 + 
PGSHFTFCTR
)

	)

213 
	#NRMASK
 0x38000000

	)

214 
	#NRSHIFT
 27

	)

215 
	#CCMASK
 0x00000038

	)

216 
	#CCSHIFT
 3

	)

217 
	#PG_SHOTDN
 0

	)

219 #i‡
IP19


220 #if !
deföed
(
PTE_64BIT
)

221 
	s±e
 {

222 
uöt
 
PTE_PFN
(23),

223 
	m±e_cc
 : 3,

224 
	m±e_m
 : 1,

225 
	m±e_vr
 : 1,

226 
	m±e_g
 : 1,

227 
	m±e_ƒ
 : 1,

228 
	#PFNDWIDTH
 23

	)

229 
	m±e_dúty
 : 1,

230 
	m±e_sv
 : 1;

231 } 
	t±e_t
;

232 
	#PG_SHOTDN
 0

	)

233 
	#PG_PFNLOCK
 0

	)

234 
	#PFNOFFSET
 0

	)

240 #i‡
deföed
(
NUMA_BASE
)

248 
	s±e
 {

249 
__uöt64_t


250 
	m±e_unˇâr
: 2,

251 
	m±e_p‚lock
: 1,

253 
	m±e_shŸdn
: 1,

254 
	m±e_pgmaskshi·
: 4,

255 
	m±e_rm≠_ödex
:16,

256 
	m±e_numa_home
: 8,

257 
PTE_PFN
(23),

258 
	m±e_cc
 : 3,

259 
	m±e_m
 : 1,

260 
	m±e_vr
 : 1,

261 
	m±e_g
 : 1,

262 
	m±e_ƒ
 : 1,

263 
	m±e_dúty
 : 1,

264 
	m±e_sv
 : 1;

265 }
	t±e_t
;

270 
	s±e
 {

271 
__uöt64_t


272 
	m±e_unˇâr
:2,

273 
	m±e_p‚lock
: 1,

274 
	m±e_pgmaskshi·
: 4,

275 
	m±e_rm≠_ödex
:16,

276 
	m±e_ª£rved
: 9,

277 
PTE_PFN
(23),

278 
	m±e_cc
 : 3,

279 
	m±e_m
 : 1,

280 
	m±e_vr
 : 1,

281 
	m±e_g
 : 1,

282 
	m±e_ƒ
 : 1,

283 
	m±e_dúty
 : 1,

284 
	m±e_sv
 : 1;

285 }
	t±e_t
;

289 
	#PFNDWIDTH
 23

	)

290 
	#PFNOFFSET
 0

	)

291 
	#UNCATTRMASK
 0xC000000000000000

	)

292 
	#UNCATTRSHIFT
 62

	)

293 
	#NPFNMASK
 0x00000000FFFFFE00

	)

294 
	#NPFNSHIFT
 (9+
PGSHFTFCTR
)

	)

295 
	#NRMASK
 0x0000000000000004

	)

296 
	#NRSHIFT
 2

	)

297 
	#CCMASK
 0x00000000000001C0

	)

298 
	#CCSHIFT
 6

	)

299 
	#RESVDMASK
 0x0FFFFFFF00000000

	)

305 #ifdef 
NUMA_BASE


306 
	#PAGE_MASK_INDEX_MASK
 0x0F00000000000000

	)

307 
	#PAGE_MASK_INDEX_SHIFT
 56

	)

308 
	#PTE_RMAP_INDEX_SHIFT
 40

	)

309 
	#PTE_RMAP_INDEX_MASK
 0x00FFFF0000000000

	)

310 
	#PG_PFNLOCK
 0x2000000000000000

	)

311 
	#PG_SHOTDN
 0x1000000000000000

	)

313 
	#PAGE_MASK_INDEX_MASK
 0x3C00000000000000

	)

314 
	#PAGE_MASK_INDEX_SHIFT
 57

	)

315 
	#PTE_RMAP_INDEX_SHIFT
 41

	)

316 
	#PTE_RMAP_INDEX_MASK
 0x01FFFE0000000000

	)

317 
	#PG_PFNLOCK
 0x2000000000000000

	)

318 
	#PG_SHOTDN
 0

	)

327 #i‡
R10000
 && !
IP28
 && !
IP32


328 #if !
deföed
(
PTE_64BIT
)

329 #ifdef 
IP30


330 
	s±e
 {

331 
__uöt32_t


332 
	m±e_ƒ
 : 1,

333 
	m±e_dúty
 : 1,

334 
	m±e_sv
 : 1,

335 
	m±e_p‚lock
: 1,

336 
PTE_PFN
(22),

337 
	m±e_cc
 : 3,

338 
	m±e_m
 : 1,

339 
	m±e_vr
 : 1,

340 
	m±e_g
 : 1;

341 } 
	t±e_t
;

342 
	#PG_PFNLOCK
 0x10000000

	)

343 
	#NPFNMASK
 0x0FFFFFC0

	)

344 
	#NPFNSHIFT
 (6 + 
PGSHFTFCTR
)

	)

345 
	#NRMASK
 0x80000000

	)

346 
	#NRSHIFT
 31

	)

347 
	#CCMASK
 0x00000038

	)

348 
	#CCSHIFT
 3

	)

349 
	#PG_SHOTDN
 0

	)

350 
	#PFNDWIDTH
 23

	)

351 
	#PFNOFFSET
 3

	)

353 #i‡
IPMHSIM
 && ! 
R4000


354 
	s±e
 {

355 
uöt
 
	m±e_dúty
 : 1,

356 
	m±e_sv
 : 1,

357 
	m±e_ƒ
 : 3,

358 
	m±e_e›
 : 1,

359 
PTE_PFN
(20),

360 
	m±e_cc
 : 3,

361 
	m±e_m
 : 1,

362 
	m±e_vr
 : 1,

363 
	m±e_g
 : 1;

364 } 
	t±e_t
;

365 
	#PFNDWIDTH
 20

	)

366 
	#PFNOFFSET
 6

	)

368 
	s±e
 {

369 
__uöt32_t


370 
	m±e_ƒ
 : 1,

371 
	m±e_dúty
 : 1,

372 
	m±e_sv
 : 1,

373 
PTE_PFN
(23),

374 
	m±e_cc
 : 3,

375 
	m±e_m
 : 1,

376 
	m±e_vr
 : 1,

377 
	m±e_g
 : 1;

378 } 
	t±e_t
;

379 
	#PFNDWIDTH
 23

	)

380 
	#PFNOFFSET
 3

	)

382 
	#PG_PFNLOCK
 0

	)

383 
	#PG_SHOTDN
 0

	)

390 #i‡
deföed
(
NUMA_BASE
)

398 #i‡
deföed
(
SN0XXL
Ë|| deföed(
SN1
)

400 
	s±e
 {

401 
__uöt64_t


402 
	m±e_unˇâr
: 2,

403 
	m±e_p‚lock
: 1,

405 
	m±e_shŸdn
: 1,

406 
	m±e_pgmaskshi·
: 4,

407 
	m±e_rm≠_ödex
:16,

408 
	m±e_numa_home
: 1,

409 
	m±e_ƒ
 : 3,

410 
	m±e_dúty
 : 1,

411 
	m±e_sv
 : 1,

412 
PTE_PFN
(28),

413 
	m±e_cc
 : 3,

414 
	m±e_m
 : 1,

415 
	m±e_vr
 : 1,

416 
	m±e_g
 : 1;

417 } 
	t±e_t
;

422 
	s±e
 {

423 
__uöt64_t


424 
	m±e_unˇâr
: 2,

425 
	m±e_p‚lock
: 1,

427 
	m±e_shŸdn
: 1,

428 
	m±e_pgmaskshi·
: 4,

429 
	m±e_rm≠_ödex
:16,

430 
	m±e_numa_home
: 3,

431 
	m±e_ƒ
 : 3,

432 
	m±e_dúty
 : 1,

433 
	m±e_sv
 : 1,

434 
PTE_PFN
(26),

435 
	m±e_cc
 : 3,

436 
	m±e_m
 : 1,

437 
	m±e_vr
 : 1,

438 
	m±e_g
 : 1;

439 } 
	t±e_t
;

445 
	s±e
 {

446 
__uöt64_t


447 
	m±e_unˇâr
: 2,

448 
	m±e_p‚lock
: 1,

449 
	m±e_pgmaskshi·
: 4,

450 
	m±e_rm≠_ödex
:16,

451 
	m±e_ª£rved
: 4,

452 
	m±e_ƒ
 : 3,

453 
	m±e_dúty
 : 1,

454 
	m±e_sv
 : 1,

455 
PTE_PFN
(26),

456 
	m±e_cc
 : 3,

457 
	m±e_m
 : 1,

458 
	m±e_vr
 : 1,

459 
	m±e_g
 : 1;

460 } 
	t±e_t
;

464 #i‡
deföed
 (
SN0XXL
Ë|| deföed(
SN1
)

466 
	#PFNDWIDTH
 28

	)

467 
	#NPFNMASK
 0x00000003FFFFFFC0

	)

468 
	#NRMASK
 0x0000007000000000

	)

469 
	#NRSHIFT
 36

	)

470 
	#RESVDMASK
 0x0FFFFFE000000000

	)

475 
	#PFNDWIDTH
 26

	)

476 
	#NPFNMASK
 0x00000000FFFFFFC0

	)

477 
	#NRMASK
 0x0000001C00000000

	)

478 
	#NRSHIFT
 34

	)

479 
	#RESVDMASK
 0x0FFFFFF800000000

	)

483 
	#PFNOFFSET
 3

	)

484 
	#UNCATTRMASK
 0xC000000000000000

	)

485 
	#UNCATTRSHIFT
 62

	)

486 
	#NPFNSHIFT
 (6+
PGSHFTFCTR
)

	)

487 
	#CCMASK
 0x0000000000000038

	)

488 
	#CCSHIFT
 3

	)

494 #ifdef 
NUMA_BASE


495 
	#PAGE_MASK_INDEX_MASK
 0x0F00000000000000

	)

496 
	#PAGE_MASK_INDEX_SHIFT
 56

	)

497 
	#PTE_RMAP_INDEX_SHIFT
 40

	)

498 
	#PG_PFNLOCK
 0x2000000000000000

	)

499 
	#PTE_RMAP_INDEX_MASK
 0x00FFFF0000000000

	)

500 
	#PG_SHOTDN
 0x1000000000000000

	)

502 
	#PAGE_MASK_INDEX_MASK
 0x1E00000000000000

	)

503 
	#PAGE_MASK_INDEX_SHIFT
 57

	)

504 
	#PTE_RMAP_INDEX_SHIFT
 41

	)

505 
	#PTE_RMAP_INDEX_MASK
 0x01FFFE0000000000

	)

506 
	#PG_PFNLOCK
 0x2000000000000000

	)

507 
	#PG_SHOTDN
 0

	)

513 #i‡
TFP


514 #i‡
IP21


515 
	s±e
 {

516 #ifde‡
TFP_PTE64


517 
__uöt64_t


518 
	m±e_swun1
: 24,

519 
PTE_PFN
(28),

520 
	m±e_cc
 : 3,

521 
	m±e_m
 : 1,

522 
	m±e_vr
 : 1,

523 
	m±e_swun2
: 2,

524 
	m±e_ƒ
 : 3,

525 
	m±e_dúty
 : 1,

526 
	m±e_sv
 : 1;

527 
	#PFNDWDITH
 28

	)

528 
	#PFNOFFSET
 24

	)

533 
__uöt32_t


534 
PTE_PFN
(23),

535 
	m±e_cc
 : 3,

536 
	m±e_m
 : 1,

537 
	m±e_vr
 : 1,

538 
	m±e_p‚lock
: 1,

539 
	m±e_ƒ
 : 1,

540 
	m±e_dúty
 : 1,

541 
	m±e_sv
 : 1;

542 
	#PFNDWIDTH
 23

	)

543 
	#PFNOFFSET
 1

	)

544 
	#PG_PFNLOCK
 0x00000008

	)

545 
	#NPFNMASK
 0xFFFFFE00

	)

546 
	#NPFNSHIFT
 (9 + 
PGSHFTFCTR
)

	)

547 
	#NRMASK
 0x00000004

	)

548 
	#NRSHIFT
 2

	)

549 
	#CCMASK
 0x00001C0

	)

550 
	#CCSHIFT
 6

	)

551 
	#PG_SHOTDN
 0

	)

553 } 
	t±e_t
;

555 #ifde‡
IP26


556 
	s±e
 {

557 
uöt
 
	m±e_unu£d
 : 1,

558 
	m±e_sv
 : 1,

559 
	m±e_ƒ
 : 3,

560 
	m±e_p‚lock
 : 1,

561 
	m±e_zîo
 : 1,

562 
PTE_PFN
(19),

563 
	m±e_cc
 : 3,

564 
	m±e_m
 : 1,

565 
	m±e_vr
 : 1,

566 
	m±e_dúty
 : 1;

567 } 
	t±e_t
;

568 
	#PFNDWIDTH
 19

	)

569 
	#PFNOFFSET
 7

	)

570 
	#PG_PFNLOCK
 0x04000000

	)

571 
	#NPFNMASK
 0x01FFFFC0

	)

572 
	#NPFNSHIFT
 (6 + 
PGSHFTFCTR
)

	)

573 
	#NRMASK
 0x38000000

	)

574 
	#NRSHIFT
 27

	)

575 
	#CCMASK
 0x00000038

	)

576 
	#CCSHIFT
 3

	)

577 
	#PG_SHOTDN
 0

	)

582 #i‡
BEAST


584 #i‡!
deföed
 (
PTE_64BIT
)

586 #îr‹ << 
√ed
 
to
 
fix
 
this
 
as
 
≠¥›rüã
>>

587 
	s±e
 {

588 
__uöt32_t


589 
	m±e_ƒ
 : 1,

590 
	m±e_dúty
 : 1,

591 
	m±e_sv
 : 1,

592 
	m±e_p‚lock
: 1,

593 
PTE_PFN
(18),

594 
	m±e_cc
 : 3,

595 
	m±e_m
 : 1,

596 
	m±e_vr
 : 1,

597 
	m±e_g
 : 1,

598 
	m±e_pgsz
 : 4;

599 } 
	t±e_t
;

600 
	#PG_PFNLOCK


	)

601 
	#NPFNMASK


	)

602 
	#NPFNSHIFT


	)

603 
	#NRMASK


	)

604 
	#NRSHIFT


	)

605 
	#CCMASK


	)

606 
	#CCSHIFT


	)

607 
	#PG_SHOTDN


	)

608 
	#PFNDWIDTH


	)

609 
	#PFNOFFSET


	)

611 
	#PAGE_MASK_INDEX_MASK
 0x000000000000000F

	)

612 
	#PAGE_MASK_INDEX_SHIFT
 0

	)

616 
	s±e
 {

617 
__uöt64_t


618 
	m±e_rsvd
 : 8,

619 
	m±e_p‚lock
 : 1,

621 
	m±e_shŸdn
 : 1,

622 
	m±e_numa_home
 : 5,

623 
	m±e_ƒ
 : 1,

624 
	m±e_dúty
 : 1,

625 
	m±e_sv
 : 1,

626 
	m±e_shöt
 : 4,

627 
PTE_PFN
(32),

628 
	m±e_cc
 : 3,

629 
	m±e_m
 : 1,

630 
	m±e_vr
 : 1,

631 
	m±e_g
 : 1,

632 
	m±e_pgsz
 : 4;

633 } 
	t±e_t
;

635 
	#PFNDWIDTH
 32

	)

636 
	#PFNOFFSET
 22

	)

637 
	#SYSHINTMASK
 0x00003C0000000000

	)

638 
	#SYSHINTSHIFT
 42

	)

639 
	#NPFNMASK
 0x000003FFFFFFFC00

	)

640 
	#NPFNSHIFT
 (10+
PGSHFTFCTR
)

	)

642 
	#NRMASK
 0x0001000000000000

	)

643 
	#NRSHIFT
 48

	)

644 
	#CCMASK
 0x0000000000000380

	)

645 
	#CCSHIFT
 7

	)

647 
	#PG_PFNLOCK
 0x0080000000000000

	)

648 
	#PG_SHOTDN
 0x0040000000000000

	)

655 
	#PAGE_MASK_INDEX_MASK
 0x000000000000000F

	)

656 
	#PAGE_MASK_INDEX_SHIFT
 0

	)

663 #i‡
deföed
 (
PTE_64BIT
Ë&& !deföed (
BEAST
)

664 
	#RMAP_PTE_INDEX


	)

667 #i‡!
R4000
 && !
TFP
 && !
R10000
 && !
BEAST


668 
	s±e
 {

669 
uöt_t
 
	m›aque_±e
;

670 } 
	t±e_t
;

673 #ifdef 
PTE_64BIT


674 
__uöt64_t
 
	tpgi_t
;

676 
uöt_t
 
	tpgi_t
;

679 
	upde
 {

680 
±e_t
 
	m±e
;

681 
pgi_t
 
	mpgi
;

682 } 
	tpde_t
;

685 
	#pg_p‚
 
±e_p‚


	)

686 
	#pg_m
 
±e_m


	)

687 
	#pg_vr
 
±e_vr


	)

688 
	#pg_g
 
±e_g


	)

689 
	#pg_sv
 
±e_sv


	)

690 
	#pg_ƒ
 
±e_ƒ


	)

691 
	#pg_dúty
 
±e_dúty


	)

693 
	#pg_cc
 
±e_cc


	)

694 
	#pg_uc
 
±e_unˇâr


	)

696 #i‡
deföed
(
IP19
Ë|| deföed(
R10000
)

697 #i‡
deföed
(
PTE_64BIT
)

699 
	#pg_unˇâr
 
±e_unˇâr


	)

700 
	#pg_pgmaskshi·
 
±e_pgmaskshi·


	)

701 
	#pg_rm≠_ödex
 
±e_rm≠_ödex


	)

704 #i‡
deföed
(
NUMA_BASE
)

705 
	#pg_shŸdn
 
±e_shŸdn


	)

712 #i‡
deföed
 (
BEAST
)

714 
	#pg_shöt
 
±e_shöt


	)

715 
	#pg_pgsz
 
±e_pgsz


	)

719 
	#pg_p‚lock
 
±e_p‚lock


	)

726 
pde_t
 
	mpde_low
;

727 
pde_t
 
	mpde_hi
;

728 } 
	tébpde_t
;

732 
	#NDPP
 (8*
PGFCTR
Ë

	)

733 
	#DPPSHFT
 (3+
PGSHFTFCTR
Ë

	)

739 #i‡
NBPP
 =
IO_NBPP


740 
	#SYSTOIOPFN
(
x
,
i
Ë(x)

	)

742 
	#SYSTOIOPFN
(
x
,
i
Ë(((xË<< 
PGSHFTFCTR
Ë+ ((iË% 
PGFCTR
))

	)

748 
	#NPGTBLS
 
	`btos
(
HIUSRATTACH_32
)

	)

749 
	#NBPPT
 
NBPP


	)

751 
	#NPGPT
 (
NBPPT
/(
±e_t
))

	)

752 
	#BPTSHFT
 
PNUMSHFT


	)

754 
	#POFFMASK
 (
NBPP
 - 1Ë

	)

755 
	#PTOFFMASK
 (
NPGPT
 - 1Ë

	)

756 
	#SOFFMASK
 ((
NPGPT
 * 
NBPP
Ë- 1)

	)

757 
	#soff
(
x
Ë((
__psunsig√d_t
)(xË& 
SOFFMASK
)

	)

758 
	#±off
(
x
Ë((
__psunsig√d_t
)(xË& 
PTOFFMASK
)

	)

760 
	#PG_SENTRY
 0x7‡

	)

762 
	#PDEFER_SENTRY
 0x01

	)

763 
	#WAIT_SENTRY_LO
 0x08

	)

764 
	#WAIT_SENTRY_HI
 0x7‡

	)

777 #i‡
deföed
(
SN0XXL
Ë|| deföed(
SN1
)

778 
	#SEGTABSIZE
 ((
NPGTBLS
)*8)

	)

780 
	#SEGTABSIZE
 
NPGTBLS


	)

784 
	#BASETABSIZE
 
	`howm™y
(
HIUSRATTACH_64
, 
	`°ob
(
SEGTABSIZE
))

	)

787 #i‡
_PAGESZ
 == 4096

788 
	#BASETABSHIFT64
 9

	)

789 
	#BASETABSHIFT
 9

	)

791 #i‡
_PAGESZ
 == 16384

792 #ifdef 
PTE_64BIT


793 #i‡
deföed
(
SN0XXL
Ë|| deföed(
SN1
)

794 
	#BASETABSHIFT64
 9

	)

795 
	#BASETABSHIFT
 6

	)

797 
	#BASETABSHIFT64
 6

	)

798 
	#BASETABSHIFT
 6

	)

801 
	#BASETABSHIFT64
 5

	)

802 
	#BASETABSHIFT
 5

	)

807 
	#SEGTABMASK
 (
SEGTABSIZE
-1)

	)

810 
	#NBPSEGTAB
 (
SEGTABSIZE
 * 
NBPS
)

	)

813 
	#NPGSEGTAB
 (
NPGPT
 * 
SEGTABSIZE
)

	)

818 
	#SEGPGMASK
 (
NPGSEGTAB
 - 1)

	)

821 
	#BPBASETABSHIFT
 (
BPSSHIFT
+
BASETABSHIFT64
)

	)

826 
	#PCOM_TSHIFT
 4

	)

829 
	#btoba£èb
(
x
Ë((
__psunsig√d_t
)(xË>> 
BPBASETABSHIFT
)

	)

832 
	#bto£gèbödex
(
x
Ë(
	`bto°
(xË& 
SEGTABMASK
)

	)

835 
	#˘o£gèbödex
(
x
Ë(
	`˘o°
(xË& 
SEGTABMASK
)

	)

838 
	#£gto£gèbödex
(
x
Ë((
__psunsig√d_t
)(xË& 
SEGTABMASK
)

	)

843 
	#˘o£gpg
(
x
Ë((
__psunsig√d_t
)(xË& 
SEGPGMASK
)

	)

846 
	#PAGE_MASK_INDEX_BITMASK
 0x‡

	)

850 #i‡
deföed
(
IP20
Ë|| deföed(
IP22
Ë|| deföed(
IP28
Ë|| deföed(
IP32
Ë|| deföed(
IPMHSIM
)

852 
	#PG_CACHMASK
 0x00000038

	)

853 
	#PG_CACHSHFT
 3

	)

854 
	#PG_UNCACHED
 0x00000010

	)

855 
	#PG_TRUEUNCACHED
 
PG_UNCACHED


	)

856 #i‡
_RUN_UNCACHED


857 
	#PG_NONCOHRNT
 
PG_UNCACHED


	)

858 
	#PG_COHRNT_EXLWR
 
PG_UNCACHED


	)

860 
	#PG_NONCOHRNT
 0x00000018

	)

861 
	#PG_COHRNT_EXLWR
 0x00000028

	)

863 
	#PG_M
 0x00000004

	)

864 
	#PG_VR
 0x00000002

	)

865 
	#PG_G
 0x00000001

	)

866 #i‡
IP32


867 
	#PG_NDREF
 0x38000000

	)

868 
	#NDREF
 3

	)

869 
	#PG_NDREFNORM
 27

	)

870 
	#PG_ADDR
 (0x03ffffc0<<
PGSHFTFCTR
Ë

	)

872 
	#PG_EOP
 0x04000000

	)

873 
	#PG_NDREF
 0x18000000

	)

874 
	#NDREF
 2

	)

875 
	#PG_NDREFNORM
 27

	)

876 
	#PG_ADDR
 (0x03ffffc0<<
PGSHFTFCTR
Ë

	)

878 
	#PTE_PFNSHFT
 (6+
PGSHFTFCTR
Ë

	)

880 
	#pg_i¢⁄ˇche
(
P
Ë(
	`pg_ˇchemode
(PË=
PG_UNCACHED
)

	)

881 
	#±e_isˇched
(
±e
Ë((’ãË& 
PG_CACHMASK
Ë!
PG_UNCACHED
)

	)

883 
	#PG_D
 0x80000000

	)

884 
	#PG_SV
 0x40000000

	)

885 
	#PG_N
 
PG_UNCACHED


	)

886 
	#PG_PFNUM
 
PG_ADDR


	)

888 #ifde‡
R10000


889 
	#FRAMEMASK_MASK
 0x0000„00

	)

894 #i‡
IP19


895 
	#PG_NDREF
 0x00000004

	)

896 
	#NDREF
 1

	)

897 
	#PG_NDREFNORM
 2

	)

898 
	#PG_CACHMASK
 0x000001c0

	)

899 
	#PG_CACHSHFT
 6

	)

900 
	#PG_TRUEUNCACHED
 0x00000080

	)

901 
	#PG_M
 0x00000020

	)

902 
	#PG_VR
 0x00000010

	)

903 
	#PG_G
 0x00000008

	)

904 
	#PG_ADDR
 (0xfffffd00<<
PGSHFTFCTR
Ë

	)

905 
	#PTE_PFNSHFT
 (9+
PGSHFTFCTR
Ë

	)

907 #i‡
_RUN_UNCACHED


908 
	#PG_NONCOHRNT
 
PG_UNCACHED


	)

909 
	#PG_COHRNT_EXLWR
 
PG_UNCACHED


	)

911 
	#PG_NONCOHRNT
 0x000000c0

	)

912 
	#PG_COHRNT_EXLWR
 0x00000140

	)

913 
	#PG_COHRNT_EXCL
 0x00000100

	)

916 
	#PG_D
 0x00000002

	)

917 
	#PG_SV
 0x00000001

	)

918 
	#PG_PFNUM
 
PG_ADDR


	)

922 #i‡
IP21


923 #ifde‡
TFP_PTE64


924 
	#PG_ADDR
 (0x000000fffffff000<<
PGSHFTFCTR
Ë

	)

925 
	#PTE_PFNSHFT
 (12+
PGSHFTFCTR
Ë

	)

926 
	#PG_SV
 0x00000001

	)

927 
	#PG_D
 0x00000002

	)

928 
	#PG_NDREF
 0x0000001¯

	)

929 
	#NDREF
 7

	)

930 
	#PG_NDREFNORM
 2

	)

931 
	#PG_CACHMASK
 0x00000e00

	)

932 
	#PG_CACHSHFT
 9

	)

933 
	#PG_TRUEUNCACHED
 0x00000400

	)

934 
	#PG_UNC_PROCORD
 0x00000000

	)

935 
	#PG_NONCOHRNT
 0x00000600

	)

936 
	#PG_COHRNT_EXLWR
 0x00000a00

	)

937 
	#PG_M
 0x00000100

	)

938 
	#PG_VR
 0x00000080

	)

942 
	#PG_ADDR
 (0x7fffff00<<
PGSHFTFCTR
Ë

	)

943 
	#PTE_PFNSHFT
 (9+
PGSHFTFCTR
Ë

	)

944 
	#PG_SV
 0x00000001

	)

945 
	#PG_D
 0x00000002

	)

946 
	#PG_NDREF
 0x00000004

	)

947 
	#NDREF
 1

	)

948 
	#PG_NDREFNORM
 2

	)

949 
	#PG_CACHMASK
 0x000001c0

	)

950 
	#PG_CACHSHFT
 6

	)

951 
	#PG_TRUEUNCACHED
 0x00000080

	)

952 
	#PG_UNC_PROCORD
 0x00000000

	)

953 
	#PG_NONCOHRNT
 0x00000180

	)

954 
	#PG_COHRNT_EXLWR
 0x00000140

	)

955 
	#PG_M
 0x00000020

	)

956 
	#PG_VR
 0x00000010

	)

959 
	#PG_G
 0x00000000

	)

964 #i‡
deföed
(
EVEREST
Ë|| deföed(
SN
Ë|| deföed(
IP30
)

965 
	#PG_N
 
PG_UNCACHED


	)

966 
	#PG_UNCACHED
 
PG_COHRNT_EXLWR


	)

967 
	#pg_i¢⁄ˇche
(
P
Ë(
	`pg_ˇchemode
(PË=
PG_TRUEUNCACHED
)

	)

968 
	#±e_isˇched
(
±e
Ë((’ãË& 
PG_CACHMASK
Ë!
PG_TRUEUNCACHED
)

	)

971 #i‡
IP26


972 
	#PG_ADDR
 (0x01ffffc0<<
PGSHFTFCTR
Ë

	)

973 
	#PTE_PFNSHFT
 (6+
PGSHFTFCTR
Ë

	)

975 
	#PG_D
 0x00000001

	)

976 
	#PG_VR
 0x00000002

	)

977 
	#PG_M
 0x00000004

	)

978 
	#PG_CACHMASK
 0x00000038

	)

979 
	#PG_NDREF
 0x38000000

	)

980 
	#PG_SV
 0x40000000

	)

982 
	#PG_CACHSHFT
 3

	)

983 
	#NDREF
 7

	)

984 
	#PG_NDREFNORM
 27

	)

986 
	#PG_TRUEUNCACHED
 0x00000010

	)

987 
	#PG_UNC_PROCORD
 0x00000000

	)

988 
	#PG_NONCOHRNT
 0x00000018

	)

989 
	#PG_COHRNT_EXLWR
 0x00000028

	)

991 
	#PG_N
 
PG_UNCACHED


	)

992 
	#PG_UNCACHED
 
PG_TRUEUNCACHED


	)

993 
	#pg_i¢⁄ˇche
(
P
Ë(
	`pg_ˇchemode
(PË=
PG_UNCACHED
)

	)

994 
	#±e_isˇched
(
±e
Ë((’ãË& 
PG_CACHMASK
Ë!
PG_UNCACHED
)

	)

996 
	#PG_G
 0

	)

999 #i‡
deföed
(
IP25
Ë|| deföed(
IP27
Ë|| deföed(
IP30
Ë|| deföed(
IP35
)

1001 #i‡
deföed
 (
SN0XXL
Ë|| deföed(
SN1
)

1002 
	#PG_NDREF
 0x7000000000UL

	)

1003 
	#PG_D
 0x0800000000UL

	)

1004 
	#PG_SV
 0x0400000000UL

	)

1005 
	#PG_ADDR
 (0x3ffffffc0<<
PGSHFTFCTR
Ë

	)

1006 #ñi‡
deföed
(
SN0
)

1007 
	#PG_NDREF
 0x1C00000000UL

	)

1008 
	#PG_D
 0x0200000000UL

	)

1009 
	#PG_SV
 0x0100000000UL

	)

1010 
	#PG_ADDR
 (0xffffffc0<<
PGSHFTFCTR
Ë

	)

1012 
	#PG_NDREF
 0x1C00000000UL

	)

1013 
	#PG_D
 0x0200000000UL

	)

1014 
	#PG_SV
 0x0100000000UL

	)

1015 
	#PG_ADDR
 (0xffffffc0<<
PGSHFTFCTR
Ë

	)

1018 
	#PG_CACHMASK
 0x00000038UL

	)

1019 
	#PG_UNCATTRMASK
 0xc000000000000000

	)

1021 
	#NDREF
 7

	)

1023 
	#PG_NDREFNORM
 30

	)

1024 
	#PG_CACHSHFT
 3

	)

1025 
	#PG_TRUEUNCACHED
 0x00000010UL

	)

1026 
	#PG_NONCOHRNT
 0x00000018UL

	)

1027 
	#PG_COHRNT_EXCL
 0x00000020UL

	)

1028 
	#PG_COHRNT_EXLWR
 0x00000028UL

	)

1029 
	#PG_UNCACHED_ACC
 0x00000038UL

	)

1030 
	#PG_M
 0x00000004UL

	)

1031 
	#PG_VR
 0x00000002UL

	)

1032 
	#PG_G
 0x00000001UL

	)

1033 
	#PTE_PFNSHFT
 (6+
PGSHFTFCTR
Ë

	)

1035 #ifde‡
SN


1040 
	#PG_UC_HSPEC
 0x0000000000000000

	)

1041 
	#PG_UC_IO
 0x4000000000000000

	)

1042 
	#PG_UC_MSPEC
 0x8000000000000000

	)

1043 
	#PG_UC_MEMORY
 0xc000000000000000

	)

1044 #i‡
deföed
 (
SN0XXL
Ë|| deföed(
SN1
)

1045 
	#FRAMEMASK_MASK
 0x00000000

	)

1047 
	#FRAMEMASK_MASK
 0x0000c000

	)

1049 #ñi‡
IP30


1050 #ifde‡
PTE_64BIT


1051 
	#FRAMEMASK_MASK
 0x0000c000

	)

1053 
	#FRAMEMASK_MASK
 0x0000fc00

	)

1056 
	#FRAMEMASK_MASK
 0x0000f800

	)

1061 #i‡
deföed
 (
BEAST
)

1062 #ifde‡
PTE_64BIT


1063 
	#PG_NDREF
 0x0001000000000000UL

	)

1064 
	#PG_D
 0x0000800000000000UL

	)

1065 
	#PG_SV
 0x0000400000000000UL

	)

1066 
	#PG_ADDR
 (0xfffffffc00<<
PGSHFTFCTR
Ë

	)

1068 
	#PG_NDREF
 0x80000000UL

	)

1069 
	#PG_D
 0x40000000UL

	)

1070 
	#PG_SV
 0x20000000UL

	)

1071 
	#PG_ADDR
 (0x1ffffc00<<
PGSHFTFCTR
Ë

	)

1073 
	#PG_CACHMASK
 0x000000380UL

	)

1074 
	#PG_SYSHINTMASK
 0x00003c0000000000

	)

1075 
	#NDREF
 1

	)

1076 
	#PG_NDREFNORM
 30

	)

1077 
	#PG_CACHSHFT
 7

	)

1078 
	#PG_TRUEUNCACHED
 0x000000100UL

	)

1079 
	#PG_NONCOHRNT
 0x000000180UL

	)

1080 
	#PG_COHRNT_EXCL
 0x000000200UL

	)

1081 
	#PG_COHRNT_EXLWR
 0x000000280UL

	)

1082 
	#PG_UNCACHED_ACC
 0x000000380UL

	)

1083 
	#PG_M
 0x000000040UL

	)

1084 
	#PG_VR
 0x000000020UL

	)

1085 
	#PG_G
 0x000000010UL

	)

1086 
	#PTE_PFNSHFT
 (10+
PGSHFTFCTR
Ë

	)

1088 #ifde‡
SN1


1093 
	#PG_UC_HSPEC
 0x0000700000000000

	)

1094 
	#PG_UC_IO
 0x0000100000000000

	)

1095 
	#PG_UC_MSPEC
 0x0000200000000000

	)

1096 
	#PG_UC_MEMORY
 0x0000300000000000

	)

1106 #if 
R4000
 || 
R10000


1107 
	#NUM_TRANSLATIONS_PER_TLB_ENTRY
 2

	)

1109 
	#NUM_TRANSLATIONS_PER_TLB_ENTRY
 1

	)

1113 
	#≤um
(
X
Ë((
__psunsig√d_t
)(XË>> 
PNUMSHFT
)

	)

1114 
	#io_≤um
(
X
Ë((
__psunsig√d_t
)(XË>> 
IO_PNUMSHFT
)

	)

1117 
	#poff
(
X
Ë((
__psunsig√d_t
)(XË& 
POFFMASK
)

	)

1118 
	#io_poff
(
X
Ë((
__psunsig√d_t
)(XË& 
IO_POFFMASK
)

	)

1121 
	#pba£
(
X
Ë((
__psunsig√d_t
)(XË& ~
POFFMASK
)

	)

1124 
	#±od
(
PP
Ë((PPË<< 
DPPSHFT
Ë

	)

1125 
	#dt›
(
DD
Ë(((DDË+ 
NDPP
 - 1Ë>> 
DPPSHFT
Ë

	)

1126 
	#dt›t
(
DD
Ë((DDË>> 
DPPSHFT
Ë

	)

1128 
	#dpoff
(
DD
Ë((DDË& (
NDPP
-1)Ë

	)

1131 
	#btod
(
BB
Ë(((BBË+ 
NBPSCTR
 - 1Ë>> 
SCTRSHFT
)

	)

1134 
	#mkpde
(
mode
,
p‚
Ë(modê| ((
∑ddr_t
)’‚Ë<< 
PTE_PFNSHFT
))

	)

1147 #ifdef 
PTE_64BIT


1148 
	#PG_SET
(
l
, 
b
Ë(
	`©omicSëL⁄g
((*)&÷), (b)))

	)

1149 
	#PG_CLR
(
l
, 
b
Ë(
	`©omicCÀ¨L⁄g
((*)&÷), (b)))

	)

1150 
	#PG_FASSIGN
(
l
, 
f
, 
b
Ë
	`©omicFõldAssignL⁄g
((*)&÷), (f), (b))

	)

1151 
	#PG_LOCK
(
l
, 
b
Ë
	`bôlock_acquúe
((*)&÷), (b))

	)

1152 
	#PG_UNLOCK
(
l
, 
b
Ë(
	`bôlock_ªÀa£
((*)&÷), (b)))

	)

1153 
	#PG_TRYLOCK
(
l
, 
b
Ë(
	`bôlock_c⁄dacq
((*)&÷), (b)))

	)

1155 
	#PG_SET
(
l
, 
b
Ë(
	`©omicSëI¡
((*)&÷), (b)))

	)

1156 
	#PG_CLR
(
l
, 
b
Ë(
	`©omicCÀ¨I¡
((*)&÷), (b)))

	)

1157 
	#PG_FASSIGN
(
l
, 
f
, 
b
Ë
	`©omicFõldAssignUöt
((
uöt
*)&÷), (f), (b))

	)

1158 
	#PG_LOCK
(
l
, 
b
Ë
	`bôlock_acquúe_32bô
((
uöt
*)&÷), (b))

	)

1159 
	#PG_UNLOCK
(
l
, 
b
Ë(
	`bôlock_ªÀa£_32bô
((
uöt
*)&÷), (b)))

	)

1160 
	#PG_TRYLOCK
(
l
, 
b
Ë(
	`bôlock_c⁄dacq_32bô
((
uöt
*)&÷), (b)))

	)

1163 
	#PG_ISLOCKED
(
l
, 
b
Ë(÷Ë& (b))

	)

1164 
	#PG_NOTLOCKED
(
l
, 
b
Ë(!(÷Ë& (b)))

	)

1165 
	#PG_SETPFN
(
P
, 
b
Ë
	`PG_FASSIGN
((P)->
pgi
, 
NPFNMASK
, ((
__uöt64_t
)(bË<< 
NPFNSHIFT
))

	)

1172 
	#PG_SETPGI
(
P
, 
b
Ë((P)->
pgi
 = (b))

	)

1173 #ifde‡
SN


1174 
	#PG_SETCCUC
(
P
, 
b
, 
u
Ë
	`PG_FASSIGN
((P)->
pgi
, (
CCMASK
 | 
UNCATTRMASK
), \

1175 (((
b
Ë<< 
CCSHIFT
Ë| ((
__uöt64_t
)(
u
Ë<< 
UNCATTRSHIFT
)));

	)

1177 
	#PG_SETCCUC
(
P
, 
b
, 
u
Ë
	`PG_FASSIGN
((P)->
pgi
, 
CCMASK
, ((bË<< 
CCSHIFT
));

	)

1179 
	#PG_SETNR
(
P
, 
b
Ë
	`PG_FASSIGN
((P)->
pgi
, 
NRMASK
, ((bË<< 
NRSHIFT
))

	)

1180 
	#PG_DECNR
(
P
Ë
	`PG_SETNR
((P), ((P)->
±e
.
pg_ƒ
 - 1))

	)

1181 
	#PG_SETPGMASKINDEX
(
P
, 
ödx
Ë
	`PG_FASSIGN
((P)->
pgi
, 
PAGE_MASK_INDEX_MASK
, \

1182 (()(
ödx
Ë<< 
PAGE_MASK_INDEX_SHIFT
))

	)

1183 
	#PG_SETRMAPINDEX
(
P
, 
ödx
Ë
	`PG_FASSIGN
((P)->
pgi
, 
PTE_RMAP_INDEX_MASK
, \

1184 (()(
ödx
Ë<< 
PTE_RMAP_INDEX_SHIFT
))

	)

1191 
	#pg_isvÆid
(
P
Ë((P)->
±e
.
pg_sv
)

	)

1195 
	#pg_isdúty
(
P
Ë((P)->
±e
.
pg_dúty
)

	)

1196 
	#pg_£tdúty
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_D
)

	)

1197 
	#pg_˛rdúty
(
P
Ë
	`PG_CLR
((P)->
pgi
, 
PG_D
)

	)

1202 
	#pg_iswaôî
(
P
Ë((P)->
±e
.
pg_dúty
)

	)

1203 
	#pg_£twaôî
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_D
)

	)

1204 
	#pg_˛rwaôî
(
P
Ë
	`PG_CLR
((P)->
pgi
, 
PG_D
)

	)

1213 
	#pg_p‚acquúe
(
P
Ë
	`PG_LOCK
((P)->
pgi
, 
PG_PFNLOCK
)

	)

1214 
	#pg_p‚ªÀa£
(
P
Ë
	`PG_UNLOCK
((P)->
pgi
, 
PG_PFNLOCK
)

	)

1215 
	#pg_p‚c⁄dacq
(
P
Ë
	`PG_TRYLOCK
((P)->
pgi
, 
PG_PFNLOCK
)

	)

1230 
	#pg_£tshŸdn
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_SHOTDN
)

	)

1231 
	#pg_˛rshŸdn
(
P
Ë
	`PG_CLR
((P)->
pgi
, 
PG_SHOTDN
)

	)

1232 
	#pg_isshŸdn
(
P
Ë((P)->
pgi
 & 
PG_SHOTDN
)

	)

1235 
	#pg_p‚i¶ocked
(
P
Ë
	`PG_ISLOCKED
((P)->
pgi
, 
PG_PFNLOCK
)

	)

1236 
	#pg_p‚nŸlocked
(
P
Ë
	`PG_NOTLOCKED
((P)->
pgi
, 
PG_PFNLOCK
)

	)

1242 
	#pg_£çgi
(
P
, 
s
Ë
	`PG_SETPGI
((P), (s))

	)

1243 
	#pg_˛Ωgi
(
P
Ë
	`PG_SETPGI
((P), 0)

	)

1244 
	#pg_gëpgi
(
P
Ë((P)->
pgi
)

	)

1250 
	#pg_£ç‚
(
P
, 
s
Ë
	`PG_SETPFN
((P), (s))

	)

1251 
	#pg_gëp‚
(
P
Ë((P)->
±e
.
pg_p‚
)

	)

1257 
	#pg_£är
(
P
, 
s
Ë
	`PG_SETNR
((P), (s))

	)

1258 
	#pg_gëƒ
(
P
Ë((P)->
±e
.
pg_ƒ
)

	)

1259 
	#pg_de˙r
(
P
Ë
	`PG_DECNR
((P))

	)

1271 
	#pg_ishrdvÆid
(
P
Ë((P)->
pgi
 & 
PG_VR
)

	)

1272 
	#pg_£thrdvÆid
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_VR
)

	)

1273 
	#pg_˛rhrdvÆid
(
P
Ë
	`PG_CLR
((P)->
pgi
, 
PG_VR
)

	)

1277 
	#pg_ismod
(
P
Ë((P)->
±e
.
pg_m
)

	)

1278 
	#pg_£tmod
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_M
|
PG_D
)

	)

1279 
	#pg_˛rmod
(
P
Ë
	`PG_CLR
((P)->
pgi
, 
PG_M
)

	)

1283 
	#pg_isglob
(
P
Ë((P)->
pgi
 & 
PG_G
)

	)

1284 
	#pg_£tglob
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_G
)

	)

1285 
	#pg_˛rglob
(
P
Ë
	`PG_CLR
((P)->
pgi
, 
PG_G
)

	)

1291 #i‡
deföed
(
RMAP_PTE_INDEX
)

1293 
	#pg_£t_rm≠_ödex
(
P
, 
rm≠_ödex
Ë
	`PG_SETRMAPINDEX
(P, (rm≠_ödex))

	)

1294 
	#pg_gë_rm≠_ödex
(
P
Ë((P)->
±e
.
pg_rm≠_ödex
)

	)

1298 
	#pg_£t_rm≠_ödex
(
P
, 
rm≠_ödex
)

	)

1299 
	#pg_gë_rm≠_ödex
(
P
Ë0

	)

1308 #i‡(
deföed
 (
IP19
Ë|| deföed (
R10000
)Ë&& deföed (
PTE_64BIT
)

1310 
	#pg_£t_∑ge_mask_ödex
(
P
, 
∑ge_mask_ödex
) \

1311 
	`PG_SETPGMASKINDEX
(
P
, 
∑ge_mask_ödex
)

	)

1313 
	#pg_gë_∑ge_mask_ödex
(
P
Ë((P)->
±e
.
pg_pgmaskshi·
)

	)

1315 #ñi‡
deföed
 (
BEAST
)

1317 
	#pg_£t_∑ge_mask_ödex
(
P
, 
∑ge_mask_ödex
) \

1318 
	`PG_SETPGMASKINDEX
(
P
, 
∑ge_mask_ödex
)

	)

1320 
	#pg_gë_∑ge_mask_ödex
(
P
Ë((P)->
±e
.
pg_pgsz
)

	)

1324 
	#pg_£t_∑ge_mask_ödex
(
P
, 
∑ge_mask_ödex
)

	)

1325 
	#pg_gë_∑ge_mask_ödex
(
P
Ë0

	)

1332 
	#pg_ˇchemode
(
P
Ë((P)->
pgi
 & 
PG_CACHMASK
)

	)

1333 
	#pg_£ä⁄ˇche
(
P
Ë
	`PG_FASSIGN
((P)->
pgi
, 
PG_CACHMASK
, 
PG_UNCACHED
)

	)

1334 
	#pg_£ä⁄coh∫t
(
P
Ë
	`PG_FASSIGN
((P)->
pgi
, 
PG_CACHMASK
, 
PG_NONCOHRNT
)

	)

1335 
	#pg_£tcoh∫t_exlwr
(
P
Ë
	`PG_FASSIGN
((P)->
pgi
, 
PG_CACHMASK
, 
PG_COHRNT_EXLWR
)

	)

1336 
	#pg_c›yˇchemode
(
T
,
S
Ë
	`PG_FASSIGN
((T)->
pgi
, 
PG_CACHMASK
, 
	`pg_ˇchemode
(S))

	)

1337 
	#pg_£tccuc
(
P
, 
cc
, 
uc
Ë
	`PG_SETCCUC
((P), (cc), (uc))

	)

1338 
	#pg_gëcc
(
P
Ë((P)->
±e
.
pg_cc
)

	)

1339 
	#pg_gëuc
(
P
Ë((P)->
±e
.
pg_uc
)

	)

1340 #i‡!
LANGUAGE_ASSEMBLY
 && 
_KERNEL


1341 
pg_£tˇchabÀ
(
pde_t
 *
P
);

1343 #i‡
JUMP_WAR


1344 
	#pg_£ã›
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_EOP
)

	)

1345 
	#pg_i£›
(
P
Ë((P)->
pgi
 & 
PG_EOP
)

	)

1352 #i‡
EVEREST
 || 
SN
 || 
IP30


1353 
	#pg_£tˇche_phys
(
P
Ë
	`PG_FASSIGN
((P)->
pgi
, 
PG_CACHMASK
, 
PG_TRUEUNCACHED
)

	)

1355 
	#pg_£tˇche_phys
(
P
Ë
	`pg_£ä⁄ˇche
(P)

	)

1358 #i‡
SN


1359 
	#pg_unˇârmode
(
P
Ë((P)->
pgi
 & 
PG_UNCATTRMASK
)

	)

1360 
	#pg_£t„tch›
(
P
Ë
	`PG_FASSIGN
((P)->
pgi
, 
PG_UNCATTRMASK
, 
PG_UC_MSPEC
);\

1361 
	`PG_FASSIGN
((
P
)->
pgi
, 
PG_CACHMASK
, 
PG_TRUEUNCACHED
)

	)

1362 
	#pg_is„tch›
(
P
Ë((
	`pg_ˇchemode
(PË=
PG_TRUEUNCACHED
) && \

1363 (
	`pg_unˇârmode
(
P
Ë=
PG_UC_MSPEC
))

	)

1364 
	#©å_is_„tch›
(
a
Ë(((((
__uöt64_t
)◊->
©å_uc
)Ë<< 
UNCATTRSHIFT
Ë=
PG_UC_MSPEC
Ë&& ((((__uöt64_t)◊->
©å_cc
)Ë<< 
CCSHIFT
Ë=
PG_TRUEUNCACHED
))

	)

1367 
	#pg_check_is„tch›_Áu…
(
pd
, 
pfd
, 
m
Ëi‡(
	`pg_is„tch›
(pd)) \

1368 
	`h™dÀ_„tch›_Áu…
(
pfd
, 
m
);

	)

1370 
	#pg_check_is„tch›_Áu…
(
pd
, 
pfd
, 
m
)

	)

1371 
	#©å_is_„tch›
(
a
Ë0

	)

1372 
	#pg_is„tch›
(
P
Ë0

	)

1379 #i‡!
LANGUAGE_ASSEMBLY
 && 
_KERNEL


1380 
±e_ˇchebôs
();

1382 
	#±e_ˇched
(
±e
Ë(
pgi_t
)((’ãË& ~
PG_CACHMASK
Ë| 
	`±e_ˇchebôs
())

	)

1383 
	#±e_n⁄ˇched
(
±e
Ë(
pgi_t
)((’ãË& ~
PG_CACHMASK
Ë| 
PG_UNCACHED
)

	)

1384 #i‡
EVEREST
 || 
SN
 || 
IP30


1385 
	#±e_unˇchïhys
(
±e
Ë(
pgi_t
)((’ãË& ~
PG_CACHMASK
Ë| 
PG_TRUEUNCACHED
)

	)

1387 
	#±e_unˇchïhys
(
±e
Ë(
pgi_t
)
	`±e_n⁄ˇched
’ã)

	)

1396 
	#pg_£åef
(
P
Ë
	`pg_£tvÆid
(PË

	)

1397 
	#pg_˛ºef
(
P
Ë
	`pg_˛rvÆid
(PË

	)

1402 
	#pg_£tvÆid
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_VR
|
PG_NDREF
|
PG_SV
)

	)

1406 
	#pg_˛rvÆid
(
P
Ë
	`PG_CLR
((P)->
pgi
, (
PG_VR
|
PG_NDREF
|
PG_SV
))

	)

1410 
	#pg_£ts·vÆ
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_SV
)

	)

1411 
	#pg_˛rs·vÆ
(
P
Ë
	`PG_CLR
((P)->
pgi
, 
PG_SV
)

	)

1415 
	#pg_£ädªf
(
P
Ë
	`PG_SET
((P)->
pgi
, 
PG_NDREF
)

	)

1416 
	#pg_˛∫dªf
(
P
Ë
	`PG_CLR
((P)->
pgi
, 
PG_NDREF
)

	)

1421 #i‡!
_LANGUAGE_ASSEMBLY
 && 
_KERNEL


1422 
pg_ismigøtög
(
pde_t
*);

1443 #i‡
R4000
 || 
R10000


1444 #i‡
_MIPS_SIM
 =
_ABI64


1445 #ifde‡
R10000


1446 
	#KPTEBASE
 (0xc0000fc000000000)

	)

1448 
	#KPTEBASE
 (0xc00000fc00000000)

	)

1451 
	#KPTEBASE
 (-0x800000)

	)

1459 #i‡
TFP


1460 
	#KPTEBASE
 (0x4000fff000000000)

	)

1467 #i‡
BEAST


1468 
	#KPTEBASE
 (0xc0000fc000000000)

	)

1471 #i‡
R4000
 || 
R10000


1472 #ifdef 
PTE_64BIT


1473 
	#KPTE_TLBPRESHIFT
 0

	)

1475 
	#KPTE_TLBPRESHIFT
 1

	)

1478 
	#KPTE_TLBPRESHIFT
 0

	)

1481 #ifdef 
PTE_64BIT


1482 
	#PDESHFT
 3

	)

1484 
	#PDESHFT
 2

	)

1487 
	#KPTE_USIZE
 (
KUSIZE
 / 
NBPS
 * 
NBPC
)

	)

1488 
	#KPTE_SHDUBASE
 (
KPTEBASE
 - 
KPTE_USIZE
)

	)

1489 #i‚de‡
_LANGUAGE_ASSEMBLY


1490 #i‡(
R4000
 || 
R10000
Ë&& 
_MIPS_SIM
 =
_ABI64


1491 
	#KPTE_KBASE
 \

1492 (
KPTEBASE
 + \

1493 (
K2BASE
 >> (
TLBEXTCTXT_REGIONSHIFT
 + 
KPTE_TLBPRESHIFT
 + 
PGSHFTFCTR
)))

	)

1495 
	#KPTE_KBASE
 (
KPTEBASE
 + (()
K2BASE
 / 
NBPS
 * 
NBPC
))

	)

1499 #i‡
_MIPS_SIM
 =
_ABI64


1500 
	#KPTE_REGIONSHIFT
 (
TLBEXTCTXT_REGIONSHIFT
+
KPTE_TLBPRESHIFT
+
PGSHFTFCTR
)

	)

1501 
	#KPTE_REGIONMASK
 (
TLBEXTCTXT_REGIONMASK
 >> (
KPTE_TLBPRESHIFT
+
PGSHFTFCTR
))

	)

1502 
	#KPTE_VPNMASK
 ((
TLBEXTCTXT_VPNMASK
 >> (
KPTE_TLBPRESHIFT
+
PGSHFTFCTR
)Ë& ~
KPTE_REGIONMASK
)

	)

1507 
	#PRDAADDR
 0x00200000L

	)

1508 
	#LOWUSRATTACH
 0x00000000L

	)

1509 
	#USRCODE
 0x10000000L

	)

1510 
	#USRDATA
 0x10000200L

	)

1524 
	#LOWDEFATTACH
 ((
uvaddr_t
)0x4000000LË

	)

1534 
	#LOWDEFATTACH64
 
LOWDEFATTACH


	)

1545 
	#DEFUSRSTACK_32
 0x7fff8000L

	)

1546 
	#HIUSRATTACH_32
 0x7fff8000L

	)

1548 #ifde‡
_MIPS3_ADDRSPACE


1549 #i‡
deföed
(
SN0XXL
Ë|| deföed(
SN1
)

1550 
	#DEFUSRSTACK_64
 0x100000000000

	)

1551 
	#HIUSRATTACH_64
 0x100000000000

	)

1553 
	#DEFUSRSTACK_64
 0x10000000000

	)

1554 
	#HIUSRATTACH_64
 0x10000000000

	)

1557 
	#DEFUSRSTACK_64
 
DEFUSRSTACK_32


	)

1558 
	#HIUSRATTACH_64
 
HIUSRATTACH_32


	)

1566 
	#MAXHIUSRATTACH
 
HIUSRATTACH_64


	)

1568 #i‡
NBPP
 == 4096

1569 
	#KERNELSTACK
 
	`_S_EXT_
(0xffffd000Ë

	)

1570 
	#PDAPAGE
 
	`_S_EXT_
(0xfffÁ000Ë

	)

1573 #i‡
NBPP
 == 16384

1574 #i‡
TFP


1579 
	#KERNELSTACK
 
	`_S_EXT_
(0xffff4000Ë

	)

1581 
	#KERNELSTACK
 
	`_S_EXT_
(0xffffc000Ë

	)

1583 
	#PDAPAGE
 
	`_S_EXT_
(0xffffc000Ë

	)

1586 
	#PDAADDR
 
PDAPAGE


	)

1587 
	#PDASIZE
 
NBPP


	)

1589 
	#KSTACKPAGE
 (
KERNELSTACK
-
NBPP
)

	)

1591 
	#PDAOFFSET
 (
PDAADDR
-
PDAPAGE
)

	)

1592 
	#PRDASIZE
 
NBPP


	)

1594 
	#K0SEG
 
K0BASE


	)

1595 
	#K1SEG
 
K1BASE


	)

1596 
	#K2SEG
 (
K2BASE
+
MAPPED_KERN_SIZE
Ë

	)

1599 
	#K0SEG_SIZE
 
K0SIZE


	)

1601 #i‡!
_LANGUAGE_ASSEMBLY


1603 
	~<sys/∑øm.h
>

1610 
	#PDATLBINDEX
 0

	)

1612 #i‡
NBPP
 == 16384

1613 
	#TLBKSLOTS
 0

	)

1619 #ifde‡
MH_R10000_SPECULATION_WAR


1620 
	#EXTK0TLBINDEX
 1

	)

1621 
	#EXTK0TLBINDEX2
 2

	)

1622 
	#UKSTKTLBINDEX
 3

	)

1624 
	#UKSTKTLBINDEX
 1

	)

1626 
	#TLBKSLOTS
 1

	)

1633 
	#NF_BADADDR
 1

	)

1634 
	#NF_COPYIO
 2

	)

1635 
	#NF_ADDUPC
 3

	)

1636 
	#NF_FSUMEM
 4

	)

1637 
	#NF_BZERO
 5

	)

1638 
	#NF_SOFTFP
 6

	)

1639 
	#NF_REVID
 7

	)

1640 
	#NF_SOFTFPI
 8

	)

1641 
	#NF_EARLYBADADDR
 9

	)

1642 
	#NF_IDBG
 10

	)

1643 
	#NF_FIXADE
 11

	)

1644 
	#NF_SUERROR
 12

	)

1645 
	#NF_BADVADDR
 13

	)

1646 
	#NF_DUMPCOPY
 14

	)

1647 
	#NF_NENTRIES
 15

	)

1649 #i‡!
LANGUAGE_ASSEMBLY
 && 
_KERNEL


1655 
p‚_t
 
kpba£
;

1661 
pde_t
 *
k±bl
;

1662 
mmem
;

1665 
mmemlim
;

1667 
p‚_t
 
‰ìmem
;

1668 
ul⁄g
 
‰ìsw≠
;

1671 
	#avaûmemlock
(Ë
	`muãx_•ölock
(&
avaû_lock
)

	)

1672 
	#avaûmemlock•l
(
SPL
Ë
	`muãx_•ölock_•l
(&
avaû_lock
, SPL)

	)

1673 
	#avaûmemu∆ock
(
T
Ë
	`muãx_•öu∆ock
(&
avaû_lock
, T)

	)

1675 #ifde‡
MH_R10000_SPECULATION_WAR


1676 
p‚_t
 
smÆlk0_‰ìmem
;

1691 #i‡
_MIPS_SIM
 =
_ABI64


1692 
	#svút›hys
(
x
Ë((
__psunsig√d_t
)(xË& 0x0FFFFFFFFFFŒ)

	)

1694 
	#svút›hys
(
x
Ë((
__psunsig√d_t
)(xË& 0x1FFFFFFF)

	)

1699 
	#pdë›hys
(
x
Ë(((
__psunsig√d_t
)(x)->
±e
.
pg_p‚
)<<
PNUMSHFT
)

	)

1702 
	#pdë›‚
(
x
Ë(
	`pg_gëp‚
((x)))

	)

1703 
	#pdë›fd©
(
x
Ë
	`p‚t›fd©
(
	`pdë›‚
(x))

	)

1706 #i‡!
LANGUAGE_ASSEMBLY


1711 
	s±ec⁄°
 {

1712 
	m±_±esize
;

1713 
	m±_pdesize
;

1714 
	m±_p‚width
;

1715 
	m±_p‚shi·
;

1716 
	m±_p‚off£t
;

1720 #ifdef 
_KERNEL


1729 #i‡
_MIPS_SIM
 =
_ABI64
 && (
deföed
(
R10000
Ë&& deföed(
SN
))

1735 
	#±e_©åvÆ
(
f
Ë(((‡& 
VM_UNCACH_ATTR
Ë>> 
VM_UNCACH_SHFT
Ë- 1)

	)

1737 
	#XKPHYS_UNCACHATTR
(
x
Ë((
__uöt64_t
)
	`±e_©åvÆ
(xË<< 
K1ATTR_SHFT
)

	)

1740 
	#XKPHYS_UNCACHADDR
(
v
, 
f
) \

1741 
v
 = (
f
 & 
VM_UNCACH_ATTR
) ? \

1742 (
ˇddr_t
)(
	`K1MASK
(
v
Ë| 
	`XKPHYS_UNCACHATTR
(
f
)Ë: (v)

	)

1745 
	#SET_UNCACH_ATTRVAL
(
f
Ë((
__uöt64_t
)
	`±e_©åvÆ
(fË<< 
UNCATTRSHIFT
)

	)

1746 
	#PTE_SETUNCACH_ATTR
(
s
, 
f
Ëif(‡& 
VM_UNCACH_ATTR
) \

1747 
s
 |
	`SET_UNCACH_ATTRVAL
(
f
)

	)

1751 
	#pg_c›y_unˇch©å
(
tgt
, 
§c
) \

1752 ((
tgt
)->
±e
.
pg_unˇâr
 = (
§c
)->±e.pg_unˇâr)

	)

1759 
	#pg_x„r_unˇch©å
(
tgt
, 
k1addr
) \

1760 ((
tgt
)->
±e
.
pg_unˇâr
 = \

1761 (((
__psunsig√d_t
)(
k1addr
Ë& 
K1ATTR_MASK
Ë>> 
K1ATTR_SHFT
))

	)

1763 
	#pg_gëunˇâr
(
P
Ë((P)->
±e
.
pg_unˇâr
)

	)

1767 
	#PTE_SETUNCACH_ATTR
(
s
, 
f
)

	)

1768 
	#XKPHYS_UNCACHADDR
(
v
,
f
)

	)

1769 
	#pg_c›y_unˇch©å
(
tgt
, 
§c
)

	)

1770 
	#pg_x„r_unˇch©å
(
tgt
, 
k1addr
)

	)

1772 
	#pg_£tunˇâr
(
P
, 
f
)

	)

1773 
	#pg_gëunˇâr
(
P
Ë0

	)

1781 
	#iskvú
(
va
Ë((
ˇddr_t
)(vaË>(ˇddr_t)
K2SEG
 && \

1782 (
ˇddr_t
)(
va
Ë< (ˇddr_t)(
K2SEG
 + 
	`˘ob
(
sys£gsz
)))

	)

1784 #ifde‡
MH_R10000_SPECULATION_WAR


1785 
	#iskvú±e
(
±e
Ë((’ãË>
k±bl
Ë&& (’ãË< (k±b»+ 
sys£gsz
)))

	)

1794 
	#v©ov‚
(
x
Ë((
__psunsig√d_t
)(xË>> 
PNUMSHFT
)

	)

1795 
	#v‚tova
(
x
Ë((
ˇddr_t
)((
__psunsig√d_t
)(xË<< 
PNUMSHFT
))

	)

1797 
	#VFNMIN
 ((
__psunsig√d_t
)
K0SEG
 >> 
PNUMSHFT
)

	)

1799 #i‡
_MIPS_SIM
 =
_ABI64


1800 
	#VFNMAX
 ((
__psunsig√d_t
)0xfffffffffffffff‡>> 
PNUMSHFT
)

	)

1802 
	#VFNMAX
 ((
__psunsig√d_t
)0xfffffff‡>> 
PNUMSHFT
)

	)

1805 #ifde‡
MH_R10000_SPECULATION_WAR


1806 
	#kvú±ëov‚
(
X
Ë(((XË- 
k±bl
Ë+ 
	`v©ov‚
(
K2SEG
))

	)

1813 #i‡
EVEREST


1814 
	#SMALLMEM_K0_PFNMAX
 ((
K0SEG_SIZE
 >> 
PNUMSHFT
Ë- 1)

	)

1815 
	#SMALLMEM_K1_PFNMAX
 ((0x10000000 >> 
PNUMSHFT
Ë- 1)

	)

1816 
	#SMALLMEM_PFNMAX
 
SMALLMEM_K1_PFNMAX


	)

1818 #i‡
IP20
 || 
IP22
 || 
IP26
 || 
IP28
 || 
IP30
 || 
SN


1819 
	#SMALLMEM_PFNMAX
 ((
K0SEG_SIZE
 >> 
PNUMSHFT
Ë- 1)

	)

1820 
	#SMALLMEM_K0_PFNMAX
 
SMALLMEM_PFNMAX


	)

1821 
	#SMALLMEM_K1_PFNMAX
 
SMALLMEM_PFNMAX


	)

1822 #ñi‡
IP32
 || 
IPMHSIM


1823 
	#SMALLMEM_PFNMAX
 ((
K1SIZE
 >> 
PNUMSHFT
Ë- 1)

	)

1824 #ifde‡
MH_R10000_SPECULATION_WAR


1826 
	#SMALLMEM_K0_R10000_PFNMAX
 ((0x800000 >> 
PNUMSHFT
Ë- 1)

	)

1827 
	#SMALLMEM_K0_PFNMAX
 (
	`IS_R10000
() \

1828 ? 
SMALLMEM_K0_R10000_PFNMAX
 \

1829 : (((
K0SIZE
 / 2Ë>> 
PNUMSHFT
Ë- 1))

	)

1831 
	#SMALLMEM_K0_PFNMAX
 (((
K0SIZE
/2Ë>> 
PNUMSHFT
Ë- 1)

	)

1833 
	#SMALLMEM_K1_PFNMAX
 
SMALLMEM_PFNMAX


	)

1835 
	#SMALLMEM_PFNMAX
 (((
K0SEG_SIZE
/2Ë>> 
PNUMSHFT
Ë- 1)

	)

1836 
	#SMALLMEM_K0_PFNMAX
 
SMALLMEM_PFNMAX


	)

1837 
	#SMALLMEM_K1_PFNMAX
 
SMALLMEM_PFNMAX


	)

1840 
	#SMALLMEM_VFNMIN_K0
 
VFNMIN


	)

1841 
	#SMALLMEM_VFNMAX_K0
 (
SMALLMEM_VFNMIN_K0
 + 
SMALLMEM_K0_PFNMAX
)

	)

1842 
	#SMALLMEM_VFNMIN_K1
 ((
__psunsig√d_t
)
K1SEG
 >> 
PNUMSHFT
)

	)

1843 
	#SMALLMEM_VFNMAX_K1
 (
SMALLMEM_VFNMIN_K1
 + 
SMALLMEM_K1_PFNMAX
)

	)

1844 
	#K2MEM_VFNMIN
 ((
__psunsig√d_t
)
K2BASE
 >> 
PNUMSHFT
)

	)

1846 
	#IS_SMALLVFN_K0
(
x
Ë(((xË>
SMALLMEM_VFNMIN_K0
) && \

1847 ((
x
Ë<
SMALLMEM_VFNMAX_K0
))

	)

1848 
	#IS_SMALLVFN_K1
(
x
Ë(((xË>
SMALLMEM_VFNMIN_K1
) && \

1849 ((
x
Ë<
SMALLMEM_VFNMAX_K1
))

	)

1851 
	#IS_SMALLVFN
(
x
Ë(
	`IS_SMALLVFN_K0
(xË|| 
	`IS_SMALLVFN_K1
(x))

	)

1852 
	#IS_K2VFN
(
x
Ë(((xË>
K2MEM_VFNMIN
Ë&&((xË<
VFNMAX
))

	)

1853 
	#IS_VFN
(
x
Ë(
	`IS_SMALLVFN
(xË|| 
	`IS_K2VFN
(x))

	)

1854 #i‡
_MIPS_SIM
 =
_ABI64


1860 
	#smÆl_K0_p‚
(
x
Ë1

	)

1861 #i‡
SMALLMEM_K0_PFNMAX
 =
SMALLMEM_K1_PFNMAX


1862 
	#smÆl_p‚
(
x
Ë1

	)

1863 
	#smÆl_K1_p‚
(
x
Ë1

	)

1865 
	#smÆl_p‚
(
x
Ë((xË<
SMALLMEM_PFNMAX
)

	)

1866 
	#smÆl_K1_p‚
(
x
Ë((xË<
SMALLMEM_K1_PFNMAX
)

	)

1873 
	#smÆl_p‚
(
x
Ë((xË<
SMALLMEM_PFNMAX
)

	)

1874 
	#smÆl_K0_p‚
(
x
Ë((xË<
SMALLMEM_K0_PFNMAX
)

	)

1875 
	#smÆl_K1_p‚
(
x
Ë((xË<
SMALLMEM_K1_PFNMAX
)

	)

1877 
	#smÆl_p‚tov‚_K0
(
x
Ë((xË+ 
SMALLMEM_VFNMIN_K0
)

	)

1878 
	#smÆl_p‚tov‚_K1
(
x
Ë((xË+ 
SMALLMEM_VFNMIN_K1
)

	)

1879 
	#smÆl_p‚tova_K0
(
x
Ë(
	`v‚tova
(
	`smÆl_p‚tov‚_K0
(x)))

	)

1880 
	#smÆl_p‚tova_K1
(
x
Ë(
	`v‚tova
(
	`smÆl_p‚tov‚_K1
(x)))

	)

1881 
	#v‚t›‚
(
x
Ë((
	`IS_SMALLVFN_K0
(xË? ((x)-
SMALLMEM_VFNMIN_K0
) : \

1882 (
	`IS_SMALLVFN_K1
(
x
) ? \

1883 ((
x
)-
SMALLMEM_VFNMIN_K1
) : \

1884 (
	`IS_K2VFN
(
x
Ë? 
k±bl
[(x)-
K2MEM_VFNMIN
].
±e
.
pg_p‚
:\

1885 
	`bad_v‚
(
x
)))))

	)

1886 
	#v‚t›fd©
(
x
Ë(
	`p‚t›fd©
(
	`v‚t›‚
(x)))

	)

1892 
	#kv©›‚
(
x
Ë(
	`v‚t›‚
(
	`v©ov‚
(x)))

	)

1893 
	#kv©›fd©
(
x
Ë(
	`v‚t›fd©
(
	`v©ov‚
(x)))

	)

1894 
	#kv©⁄asid
(
x
Ë(
	`p‚_«sid
(
	`v‚t›‚
(
	`v©ov‚
(x))))

	)

1896 #i‡!
LANGUAGE_ASSEMBLY


1897 
bad_v‚
(
pgno_t
);

1905 
	#kvtok±bl
(
X
Ë(&
k±bl
[
	`≤um
((
__psunsig√d_t
)(XË- (__psunsig√d_t)
K2BASE
)])

	)

1911 
	#SCACHE_ALIGNED
(
x
Ë(((
__psunsig√d_t
)(xË& 
sˇche_löemask
Ë=0)

	)

1912 #i‡!
LANGUAGE_ASSEMBLY
 && 
_KERNEL


1913 
sˇche_löemask
;

1920 
	#VM_NOSLEEP
 0x0001

	)

1921 
	#VM_TLBNOSET
 0x0002

	)

1922 
	#VM_ONSWAP
 0x0004

	)

1923 
	#VM_FLUSHWIRED
 0x0008

	)

1930 #i‡!
deföed
(
EVEREST
Ë&& !deföed(
SN
Ë&& !deföed(
IP30
)

1931 
	#VM_UNCACHED
 0x0010

	)

1934 
	#VM_UNCACHED
 0x0000

	)

1936 
	#VM_TLBINVAL
 0x0020

	)

1937 
	#VM_TLBVALID
 0x0040

	)

1938 
	#VM_UNSEQ
 0x0080

	)

1939 
	#VM_DIRECT
 0x0100

	)

1940 
	#VM_ATTACH
 0x0200

	)

1941 
	#VM_BULKDATA
 0x0400

	)

1942 
	#VM_CACHEALIGN
 0x0800

	)

1943 
	#VM_NOAVAIL
 0x1000

	)

1944 
	#VM_BREAKABLE
 0x2000

	)

1945 
	#VM_STALE
 0x4000

	)

1946 
	#VM_PHYSCONTIG
 0x8000

	)

1947 
	#VM_NODEMASK
 0x10000

	)

1950 #i‡(! 
deföed
(
R10000
)Ë|| deföed(
R4000
)

1951 
	#VM_VACOLOR
 0x20000

	)

1953 
	#VM_VACOLOR
 0x00000

	)

1955 
	#VM_PACOLOR
 0x40000

	)

1956 
	#VM_VM
 0x80000

	)

1957 
	#VM_UNCACHED_PIO
 0x100000

	)

1977 
	#VM_UNCACH_HSPEC
 0x200000

	)

1978 
	#VM_UNCACH_ISPEC
 0x400000

	)

1979 
	#VM_UNCACH_MSPEC
 0x600000

	)

1980 
	#VM_UNCACH_USPEC
 0x800000

	)

1981 
	#VM_UNCACH_ATTR
 0xe00000

	)

1982 
	#VM_UNCACH_SHFT
 (21Ë

	)

1985 
	#VM_NODESPECIFIC
 0x1000000

	)

1986 
	#VM_MVOK
 0x2000000

	)

1987 #ifde‡
_VCE_AVOIDANCE


1988 
	#VM_OTHER_VACOLOR
 0x4000000

	)

1996 #ifde‡
MH_R10000_SPECULATION_WAR


1997 
	#VM_DMA_RD
 0x08000000

	)

1998 
	#VM_DMA_WR
 0x10000000

	)

1999 
	#VM_NO_DMA
 0x20000000

	)

2001 
	#VM_DMA_RD
 0x00000000

	)

2002 
	#VM_DMA_WR
 0x00000000

	)

2003 
	#VM_NO_DMA
 0x00000000

	)

2005 
	#VM_DMA_RW
 (
VM_DMA_RD
 | 
VM_DMA_WR
Ë

	)

2007 #i‡!
LANGUAGE_ASSEMBLY
 && 
_KERNEL


2008 
uöt
 
ˇchecﬁ‹mask
;

2010 
	#vˇche_cﬁ‹
(
x
Ë(((Ë(x)Ë& 
ˇchecﬁ‹mask
)

	)

2013 
	#cﬁ‹of
(
addªss
) \

2014 (((
__psunsig√d_t
)(
addªss
Ë>> 
PNUMSHFT
Ë& 
ˇchecﬁ‹mask
)

	)

2015 
	#p‚cﬁ‹of
(
p‚
) \

2016 (((
__psunsig√d_t
)(
p‚
)Ë& 
ˇchecﬁ‹mask
)

	)

2018 
	#NOCOLOR
 128

	)

2023 
	#CACH_ICACHE
 0x10000

	)

2024 
	#CACH_DCACHE
 0x20000

	)

2025 
	#CACH_PRIMARY
 (
CACH_ICACHE
 | 
CACH_DCACHE
)

	)

2026 
	#CACH_SCACHE
 0x40000

	)

2027 
	#CACH_ALL_CACHES
 (
CACH_PRIMARY
 | 
CACH_SCACHE
)

	)

2030 
	#CACH_OPMASK
 0xff

	)

2031 
	#CACH_INVAL
 0x1

	)

2032 
	#CACH_WBACK
 0x2

	)

2034 
	#CACH_NOADDR
 0x100

	)

2035 
	#CACH_VADDR
 0x200

	)

2036 
	#CACH_LOCAL_ONLY
 0x400

	)

2037 #ifde‡
_VCE_AVOIDANCE


2038 
	#CACH_OTHER_COLORS
 0x800

	)

2041 
	#CACH_IO_COHERENCY
 0x1000

	)

2042 
	#CACH_ICACHE_COHERENCY
 0x2000

	)

2044 
	#CACH_AVOID_VCES
 0x4000

	)

2045 
	#CACH_FORCE
 0x8000

	)

2046 
	#CACH_REASONS
 (
CACH_IO_COHERENCY
|
CACH_ICACHE_COHERENCY
|
CACH_AVOID_VCES
|
CACH_FORCE
)

	)

2048 #ifde‡
SN0


2049 
	#CACH_SN0_POQ_WAR
 0x80000

	)

2052 #i‡!
LANGUAGE_ASSEMBLY
 && 
_KERNEL


2055 *
kv∑Œoc
(
uöt
, , );

2056 #i‡
NUMA_BASE


2057 *
kv∑Œoc_node
(
˙odeid_t
, 
uöt
, , );

2058 *
kv∑Œoc_node_höt
(
˙odeid_t
, 
uöt
, , );

2060 
	#kv∑Œoc_node
(
node
, 
size
, 
Êags
, 
cﬁ‹
Ë
	`kv∑Œoc
(size, fœgs, cﬁ‹)

	)

2061 
	#kv∑Œoc_node_höt
(
node
, 
size
, 
Êags
, 
cﬁ‹
Ë
	`kv∑Œoc
(size, fœgs, cﬁ‹)

	)

2063 *
kvÆloc
(
uöt
, , );

2064 
kvp‰ì
(*, 
uöt
);

2065 
kvpf‰ì
(*, 
uöt
, );

2066 
kvp‰ì_de„r_˛ónup
();

2067 
kv‰ì
(*, 
uöt
);

2068 
pgno_t
 
c⁄tmemÆl
(, , );

2069 
pgno_t
 
c⁄tig_memÆloc
(, , );

2071 
p‚_t
 
kvt›hy•num
(*);

2072 
∑ddr_t
 
kvt›hys
(*);

2073 
∑ddr_t
 
kvt›hy•g
(*);

2075 
kvsw≠∑bÀ
(*, 
pgno_t
);

2076 
kvsw≠ö
(*, 
uöt
, );

2079 #ifde‡
LOWMEMDATA_DEBUG


2080 
lowmemd©a_ªc‹d
(*
«me
, 
˙odeid_t
 
node
,

2081 
size
, 
ˇddr_t
 
addr
);

2083 
	#lowmemd©a_ªc‹d
(
«me
, 
node
, 
size
, 
addr
)

	)

2086 
	ge‰ame_s
;

2087 
	guthªad_s
;

2090 #i‡
deföed
(
DEBUG
Ë&& !deföed(
JUMP_WAR
)

2095 
_unm≠éb
(*, 
__psunsig√d_t
);

2096 
	#unm≠éb
(
x
, 
y
Ë{ 
ASSERT_NOMIGRATE
; 
	`_unm≠éb
(x,y); }

	)

2098 
unm≠éb
(*, 
__psunsig√d_t
);

2100 #ifde‡
JUMP_WAR


2101 
_övÆéb
();

2104 
övÆéb
();

2105 
uöt
 
ébdr›ö
(*, 
ˇddr_t
, 
±e_t
);

2106 
Êush_éb
();

2107 
£t_ébpid
();

2108 
ébgëpid
();

2109 
ébgëønd
();

2110 
gëønd
();

2111 #i‡
R4000
 || 
R10000


2112 #i‚de‡
_STANDALONE


2113 
ébwúed
(, *, 
ˇddr_t
, 
±e_t
,Öte_t, );

2115 
ébdr›2ö
(, 
ˇddr_t
, 
±e_t
,Öte_t);

2117 #i‡
TFP


2118 
£t_iˇchïid
();

2119 
iˇchegëpid
();

2120 
ébwúed
(, *, 
ˇddr_t
, 
±e_t
);

2123 #i‡
BEAST


2124 
ébwúed
(, *, 
ˇddr_t
, 
±e_t
);

2127 
	g¥egi⁄
;

2128 
	gpfd©
;

2129 
h™dÀpd
(
ˇddr_t
, 
pfd©
 *, 
pde_t
 *, 
¥egi⁄
 *, );

2131 
ébdr›ö_Õgs
(, 
ˇddr_t
, 
±e_t
,Öã_t, 
uöt
);

2132 
__psöt_t
 
éb_¥obe
(, 
ˇddr_t
, 
uöt
 *);

2133 
éb_vaddr_to_pde
(, 
ˇddr_t
, 
pde_t
 *);

2136 #ifde‡
MH_R10000_SPECULATION_WAR


2137 
	#INV_REF_READONLY
 1

	)

2138 
	#INV_REF_FAST
 2

	)

2139 
	#INV_REF_ALL
 4

	)

2141 
övÆid©e_k±bl_íåy
(*, 
pfd©
 *, 
__psöt_t
);

2142 
övÆid©e_∑ge_ª„ªn˚s
(
pfd©
 *, , );

2143 
övÆid©e_ønge_ª„ªn˚s
(*, , , );

	@/usr/include/sys/sysinfo.h

8 #i‚de‡
__SYS_SYSINFO_H__


9 
	#__SYS_SYSINFO_H__


	)

10 #ifde‡
__˝lu•lus


16 
	~"sys/£ma.h
"

25 #i‡
_ABIAPI


26 
	#abi_sysöfo
 
sysöfo


	)

27 
	#∑d_time
 
waô


	)

28 
	#CPU_STATES
 8

	)

30 
	#CPU_STATES
 6

	)

41 
	ssysöfo
 {

42 
time_t
 
˝u
[
CPU_STATES
];

43 
	#CPU_IDLE
 0

	)

44 
	#CPU_USER
 1

	)

45 
	#CPU_KERNEL
 2

	)

46 
	#CPU_WAIT
 3

	)

47 
	#CPU_SXBRK
 4

	)

48 
	#CPU_INTR
 5

	)

49 
time_t
 
waô
[5];

50 
	#W_IO
 0

	)

51 
	#W_SWAP
 1

	)

52 
	#W_PIO
 2

	)

53 
	#W_GFXC
 3

	)

54 
	#W_GFXF
 4

	)

55 
	#WAIT_STATES
 5

	)

56 #i‡
_ABIAPI


57 
∑d
[30];

59 
bªad
;

60 
bwrôe
;

61 
Ãód
;

62 
lwrôe
;

63 
phªad
;

64 
phwrôe
;

65 
sw≠ö
;

66 
sw≠out
;

67 
bsw≠ö
;

68 
bsw≠out
;

69 
psw≠out
;

70 
pswôch
;

71 
sysˇŒ
;

72 
ªmˇŒ
;

73 
fûe›
;

74 
£rve
;

75 
sy§ód
;

76 
syswrôe
;

77 
sysf‹k
;

78 
sy£xec
;

79 
runque
;

80 
runocc
;

81 
swpque
;

82 
swpocc
;

83 
igë
;

84 
«mei
;

85 
dúblk
;

86 
ªadch
;

87 
wrôech
;

88 
rcvöt
;

89 
xmtöt
;

90 
mdmöt
;

91 
øwch
;

92 
ˇnch
;

93 
outch
;

94 
msg
;

95 
£ma
;

96 
≤pÁu…
;

97 
wπÁu…
;

98 
±c
;

99 
±s
;

100 
öå_svcd
;

101 
vmeöå_svcd
;

102 
ªc˙t
;

103 
ª˘Ÿ
;

104 
vidöå
;

105 
vidio˘l
;

106 
viddr›_add
;

108 
wˇn˚l
;

109 
kswôch
;

110 
k¥ìm±
;

111 
sysio˘l
;

112 
mesg¢t
;

113 
mesgrcv
;

114 
bwrôe_≥ndög
;

115 
wioque
;

116 
wioocc
;

117 
fûe˙t
;

118 
∑d
[1];

122 
	ssyswaô
 {

123 
iowaô
;

124 
sw≠
;

125 
physio
;

128 
	ssysöfo_˝u
 {

129 
time_t
 
˝u
[
CPU_STATES
];

130 
time_t
 
waô
[
WAIT_STATES
];

140 
	sdöfo
 {

142 
time_t
 
£rve
;

144 
isysˇŒ
;

145 
isy§ód
;

146 
úódch
;

147 
isyswrôe
;

148 
iwrôech
;

149 
isy£xec
;

150 
osysˇŒ
;

151 
osy§ód
;

152 
‹ódch
;

153 
osyswrôe
;

154 
owrôech
;

155 
osy£xec
;

157 
n£rvîs
;

158 
§v_que
;

159 
§v_occ
;

160 
rcv_que
;

161 
rcv_occ
;

162 
∑d
[3];

173 
	srcöfo
 {

174 
cbªad
;

176 
cbwrôe
;

177 
˛ªad
;

178 
˛wrôe
;

179 
¢d_dis
;

180 
¢d_msg
;

181 
rcv_dis
;

182 
rcv_msg
;

183 
dis_bªad
;

184 
blk_övÆ
;

185 
övÆ
;

195 
	smöfo
 {

196 
‰ìmem
[2];

199 
‰ìsw≠
;

200 
vÁu…
;

201 
dem™d
;

202 
sw≠
;

203 
ˇche
;

204 
fûe
;

205 
pÁu…
;

206 
cw
;

207 
°ól
;

208 
‰ìdpgs
;

209 
unmodsw
;

211 
unmodÊ
;

213 
ébpids
;

214 
tÁu…
;

215 
rÁu…
;

216 
ébÊush
;

217 
ébsync
;

218 
tvút
;

220 
çhys
;

222 
twøp
;

223 
tdút
;

225 
hÆloc
;

226 
h‰ì
;

227 
hópmem
;

228 
hovhd
;

229 
hunu£d
;

230 
__uöt32_t
 
i˛ón
;

231 
__uöt64_t
 
sÁu…
;

232 
bsd√t
;

233 
∑Œoc
;

234 
•èŒoc
;

235 
•t‰ì
;

236 
•t˛ón
;

237 
•tdúty
;

238 
•töå™s
;

239 
•èged
;

240 
•tbp
;

241 
•thóp
;

242 
•tz⁄e
;

243 
•çt
;

244 
∑d
[4];

250 
	smöfo64
 {

251 
‰ìmem
[2];

254 
__uöt64_t
 
‰ìsw≠
;

255 
__uöt64_t
 
vÁu…
;

256 
__uöt64_t
 
dem™d
;

257 
__uöt64_t
 
sw≠
;

258 
__uöt64_t
 
ˇche
;

259 
__uöt64_t
 
fûe
;

260 
__uöt64_t
 
pÁu…
;

261 
__uöt64_t
 
cw
;

262 
__uöt64_t
 
°ól
;

263 
__uöt64_t
 
‰ìdpgs
;

264 
__uöt64_t
 
unmodsw
;

266 
__uöt64_t
 
unmodÊ
;

268 
__uöt64_t
 
ébpids
;

269 
__uöt64_t
 
tÁu…
;

270 
__uöt64_t
 
rÁu…
;

271 
__uöt64_t
 
ébÊush
;

272 
__uöt64_t
 
ébsync
;

273 
__uöt64_t
 
tvút
;

275 
__uöt64_t
 
çhys
;

277 
__uöt64_t
 
twøp
;

278 
__uöt64_t
 
tdút
;

280 
__uöt64_t
 
hÆloc
;

281 
__uöt64_t
 
h‰ì
;

282 
__öt64_t
 
hópmem
;

283 
__öt64_t
 
hovhd
;

284 
__öt64_t
 
hunu£d
;

285 
__uöt32_t
 
i˛ón
;

286 
__uöt64_t
 
sÁu…
;

287 
__uöt64_t
 
bsd√t
;

288 
__uöt64_t
 
∑Œoc
;

289 
__uöt64_t
 
•èŒoc
;

290 
__uöt64_t
 
•t‰ì
;

291 
__öt64_t
 
•t˛ón
;

292 
__öt64_t
 
•tdúty
;

293 
__öt64_t
 
•töå™s
;

294 
__öt64_t
 
•èged
;

295 
__öt64_t
 
•tbp
;

296 
__öt64_t
 
•thóp
;

297 
__öt64_t
 
•tz⁄e
;

298 
__öt64_t
 
•çt
;

299 
__uöt64_t
 
∑d
[4];

311 
	sgfxöfo
 {

312 
p_gfx_waôc
;

313 
p_gfx_waôf
;

314 
gswôch
;

315 
griio˘l
;

316 
göå
;

317 
gsw≠buf
;

318 
fifowaô
;

319 
fif⁄owaô
;

320 } 
	tgfxöfo_t
;

326 
	snodeöfo
 {

327 
dev_t
 
node_devi˚
;

331 
uöt
 
tŸÆmem
;

332 
uöt
 
‰ìmem
;

333 
uöt
 
num64k∑ges
;

334 
uöt
 
num256k∑ges
;

335 
uöt
 
num1m∑ges
;

336 
uöt
 
num4m∑ges
;

337 
uöt
 
num16m∑ges
;

338 } 
	tnodeöfo_t
;

340 
	snodeöfo64
 {

341 
dev_t
 
node_devi˚
;

345 
__uöt64_t
 
tŸÆmem
;

346 
__uöt64_t
 
‰ìmem
;

347 
uöt
 
num64k∑ges
;

348 
uöt
 
num256k∑ges
;

349 
uöt
 
num1m∑ges
;

350 
uöt
 
num4m∑ges
;

351 
uöt
 
num16m∑ges
;

352 } 
	tnodeöfo64_t
;

354 
	sÕg_°©_öfo
 {

355 
cﬂÀs˚_©ts
;

356 
cﬂÀs˚_succ
;

357 
num_Õg_Áu…s
;

358 
num_Õg_Ælocs
;

359 
num_Õg_downgøde
;

360 
num_∑ge_•lôs
;

361 
uöt
 
íabÀd_16k
:1;

362 
uöt
 
íabÀd_64k
:1;

363 
uöt
 
íabÀd_256k
:1;

364 
uöt
 
íabÀd_1m
:1;

365 
uöt
 
íabÀd_4m
:1;

366 
uöt
 
íabÀd_16m
:1;

367 
uöt
 
ª£rved
:26;

368 } 
	tÕg_°©_öfo_t
;

370 
	s˚Œöfo
 {

371 
uöt
 
sh‹t_ªad
;

372 
uöt
 
sh‹t_wrôe
;

373 
uöt
 
sh‹t_ªaddú
;

374 
uöt
 
sh‹t_ªadlök
;

375 
uöt
 
li°io_ªad
;

376 
uöt
 
li°io_wrôe
;

377 } 
	t˚Œöfo_t
;

379 #i‡
deföed
(
_KERNEL
Ë|| deföed (
_KMEMUSER
)

380 
	ssy£º
 {

381 
öodeovf
;

382 
fûeovf
;

383 
ãxtovf
;

384 
¥ocovf
;

385 
∑d
[2];

389 #ifde‡
_KERNEL


391 
syswaô
 syswait;

394 
	~"sys/kß.h
"

396 
	sshlböfo
 {

397 
	gshlbs
;

399 
	gshlb ks
;

401 
	gshlbovf
;

403 
	gshlb©ts
;

407 
shlböfo
 shlbinfo;

410 #ifde‡
__˝lu•lus


	@/usr/include/wctype.h

21 #i‚de‡
__WCTYPE_H


22 
	#__WCTYPE_H


	)

24 
	~<wch¨.h
>

25 
	~<öã∫Æ/w˘y≥_c‹e.h
>

27 
	$__SGI_LIBC_USING_FROM_STD
(
wöt_t
)

28 
	$__SGI_LIBC_USING_FROM_STD
(
w˘øns_t
)

29 
	$__SGI_LIBC_USING_FROM_STD
(
w˘y≥_t
)

30 
	$__SGI_LIBC_USING_FROM_STD
(
iswÆnum
)

31 
	$__SGI_LIBC_USING_FROM_STD
(
iswÆpha
)

32 
	$__SGI_LIBC_USING_FROM_STD
(
isw˙ål
)

33 
	$__SGI_LIBC_USING_FROM_STD
(
iswdigô
)

34 
	$__SGI_LIBC_USING_FROM_STD
(
iswgøph
)

35 
	$__SGI_LIBC_USING_FROM_STD
(
iswlowî
)

36 
	$__SGI_LIBC_USING_FROM_STD
(
isw¥öt
)

37 
	$__SGI_LIBC_USING_FROM_STD
(
iswpun˘
)

38 
	$__SGI_LIBC_USING_FROM_STD
(
isw•a˚
)

39 
	$__SGI_LIBC_USING_FROM_STD
(
iswuµî
)

40 
	$__SGI_LIBC_USING_FROM_STD
(
iswxdigô
)

41 
	$__SGI_LIBC_USING_FROM_STD
(
isw˘y≥
)

42 
	$__SGI_LIBC_USING_FROM_STD
(
w˘y≥
)

43 
	$__SGI_LIBC_USING_FROM_STD
(
towlowî
)

44 
	$__SGI_LIBC_USING_FROM_STD
(
towuµî
)

45 
	$__SGI_LIBC_USING_FROM_STD
(
tow˘øns
)

46 
	$__SGI_LIBC_USING_FROM_STD
(
w˘øns
)

	@/usr/include/internal/wctype_core.h

1 #i‚de‡
__WCTYPE_CORE_H


2 
	#__WCTYPE_CORE_H


	)

23 
	~<öã∫Æ/sgima¸os.h
>

24 
	~<sgidefs.h
>

25 
	~<°™d¨ds.h
>

32 #i‚de‡
_WCTYPE_CORE_EXTENSIONS_1


33 
	#_WCTYPE_CORE_EXTENSIONS_1
 
	`deföed
(
__c99
Ë|| deföed(
__˝lu•lus
Ë|| (
_XOPEN_SOURCE
+0 >=500)

	)

36 
__SGI_LIBC_BEGIN_EXTERN_C


38 
	g__SGI_LIBC_BEGIN_NAMESPACE_STD


44 #i‚de‡
_WINT_T


45 
	#_WINT_T


	)

46 #i‡(
_MIPS_SZLONG
 == 32)

47 
	twöt_t
;

49 #i‡(
_MIPS_SZLONG
 == 64)

50 
__öt32_t
 
	twöt_t
;

54 #i‡(
_MIPS_SIM
 =
_ABIN32
 || _MIPS_SIM =
_ABI64
)

55 #i‚de‡
_WCTRANS_T


56 
	#_WCTRANS_T


	)

57 #i‡(
_MIPS_SZLONG
 == 32)

58 
	tw˘øns_t
;

60 #i‡(
_MIPS_SZLONG
 == 64)

61 
__uöt32_t
 
	tw˘øns_t
;

66 #i‚de‡
_WCTYPE_T


67 
	#_WCTYPE_T


	)

68 #i‡(
_MIPS_SZLONG
 == 32)

69 
	tw˘y≥_t
;

71 #i‡(
_MIPS_SZLONG
 == 64)

72 
__uöt32_t
 
	tw˘y≥_t
;

76 #i‚de‡
WEOF


77 
	#WEOF
 (-1)

	)

82 
iswÆnum
(
wöt_t
);

83 
iswÆpha
(
wöt_t
);

84 
	g__SGI_LIBC_END_NAMESPACE_STD


85 #i‡
deföed
(
__c99
)

86 
iswbœnk
(
wöt_t
);

88 
__iswbœnk
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

89 
__SGI_LIBC_BEGIN_NAMESPACE_STD


90 
isw˙ål
(
wöt_t
);

91 
iswdigô
(
wöt_t
);

92 
iswgøph
(
wöt_t
);

93 
iswlowî
(
wöt_t
);

94 
isw¥öt
(
wöt_t
);

95 
iswpun˘
(
wöt_t
);

96 
isw•a˚
(
wöt_t
);

97 
iswuµî
(
wöt_t
);

98 
iswxdigô
(
wöt_t
);

100 
isw˘y≥
(
wöt_t
, 
w˘y≥_t
);

101 
w˘y≥_t
 
w˘y≥
(const *);

105 
wöt_t
 
towlowî
(wint_t);

106 
wöt_t
 
towuµî
(wint_t);

108 #i‡(
_MIPS_SIM
 !
_ABI32
)

109 #ifde‡
_WCTRANS_T


110 
wöt_t
 
tow˘øns
 (wöt_t, 
w˘øns_t
);

111 #i‡
_WCTYPE_CORE_EXTENSIONS_1


112 
w˘øns_t
 
w˘øns
(const *);

114 #i‡!
deföed
(
_SGI_COMPILING_LIBC
)

115 #¥agm®
›ti⁄Æ
 
tow˘øns


116 #i‡
_WCTYPE_CORE_EXTENSIONS_1


117 #¥agm®
›ti⁄Æ
 
w˘øns


123 
__SGI_LIBC_END_NAMESPACE_STD


125 
__isw˘y≥
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
,

126 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
w˘y≥_t
);

127 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t


128 
__åw˘y≥
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
,

129 
__SGI_LIBC_NAMESPACE_QUALIFIER
 
w˘y≥_t
);

131 
	#_E1
 0x00000100

	)

132 
	#_E2
 0x00000200

	)

133 
	#_E3
 0x00000400

	)

134 
	#_E4
 0x00000800

	)

135 
	#_E5
 0x00001000

	)

136 
	#_E6
 0x00002000

	)

141 
	#_E9
 0x00010000

	)

142 
	#_E10
 0x00020000

	)

143 
	#_E11
 0x00040000

	)

144 
	#_E12
 0x00080000

	)

145 
	#_E13
 0x00100000

	)

146 
	#_E14
 0x00200000

	)

147 
	#_E15
 0x00400000

	)

148 
	#_E16
 0x00800000

	)

149 
	#_E17
 0x01000000

	)

150 
	#_E18
 0x02000000

	)

151 
	#_E19
 0x04000000

	)

152 
	#_E20
 0x08000000

	)

153 
	#_E21
 0x10000000

	)

154 
	#_E22
 0x20000000

	)

156 
	#_ISwÆpha
 
_ISÆpha


	)

157 
	#_ISwuµî
 
_ISuµî


	)

158 
	#_ISwlowî
 
_ISlowî


	)

159 
	#_ISwdigô
 
_ISdigô


	)

160 
	#_ISwxdigô
 
_ISxdigô


	)

161 
	#_ISwÆnum
 
_ISÆnum


	)

162 
	#_ISw•a˚
 
_IS•a˚


	)

163 
	#_ISwbœnk
 
_ISbœnk


	)

164 
	#_ISwpun˘
 
_ISpun˘


	)

165 
	#_ISw¥öt
 (
_IS¥öt
|
_E1
|
_E2
|
_E5
|
_E6
)

	)

166 
	#_ISwgøph
 (
_ISgøph
|
_E1
|
_E2
|
_E5
|
_E6
)

	)

167 
	#_ISw˙ål
 
_IS˙ål


	)

169 
	#_ISwph⁄ogøm
 
_E1


	)

170 
	#_ISwideogøm
 
_E2


	)

171 
	#_ISwíglish
 
_E3


	)

172 
	#_ISwnumbî
 
_E4


	)

173 
	#_ISw•ecül
 
_E5


	)

174 
	#_ISwŸhî
 
_E6


	)

176 #i‡
_SGIAPI


177 
	#iscode£t0
(
c
Ë–
_IS_EUC_LOCALE
 ? ( !((cË& ~0xffËË: (*
__libc_©å
.
_euc_func
.
_iscode£t
)(0,cË)

	)

178 
	#iscode£t1
(
c
Ë–
_IS_EUC_LOCALE
 ? ( ((cË>> 28Ë=0x3Ë: (*
__libc_©å
.
_euc_func
.
_iscode£t
)(1,cË)

	)

179 
	#iscode£t2
(
c
Ë–
_IS_EUC_LOCALE
 ? ( ((cË>> 28Ë=0x1Ë: (*
__libc_©å
.
_euc_func
.
_iscode£t
)(2,cË)

	)

180 
	#iscode£t3
(
c
Ë–
_IS_EUC_LOCALE
 ? ( ((cË>> 28Ë=0x2Ë: (*
__libc_©å
.
_euc_func
.
_iscode£t
)(3,cË)

	)

182 
iswascii
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

183 
i•h⁄ogøm
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

184 
isideogøm
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

185 
i£nglish
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

186 
i¢umbî
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

187 
is•ecül
(
__SGI_LIBC_NAMESPACE_QUALIFIER
 
wöt_t
);

191 #i‡
_UNSAFE_WCTYPE
 && !
deföed
(
__˝lu•lus
)

209 
	#iswÆpha
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`ißÕha
(cË: 
	`__isw˘y≥
(c, 
_ISwÆpha
Ë)

	)

210 
	#iswuµî
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`isuµî
(cË: 
	`__isw˘y≥
(c, 
_ISwuµî
Ë)

	)

211 
	#iswlowî
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`i¶owî
(cË: 
	`__isw˘y≥
(c, 
_ISwlowî
Ë)

	)

212 
	#iswdigô
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`isdigô
(cË: 
	`__isw˘y≥
(c, 
_ISwdigô
Ë)

	)

213 
	#iswxdigô
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`isxdigô
(cË: 
	`__isw˘y≥
(c, 
_ISwxdigô
Ë)

	)

214 
	#iswÆnum
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`iß um
(cË: 
	`__isw˘y≥
(c, 
_ISwÆnum
Ë)

	)

215 
	#isw•a˚
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`is•a˚
(cË: 
	`__isw˘y≥
(c, 
_ISw•a˚
Ë)

	)

216 
	#__iswbœnk
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`__isbœnk
(cË: 
	`__isw˘y≥
(c, 
_ISwbœnk
Ë)

	)

217 
	#iswpun˘
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`i•un˘
(cË: 
	`__isw˘y≥
(c, 
_ISwpun˘
Ë)

	)

218 
	#isw¥öt
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`i•röt
(cË: 
	`__isw˘y≥
(c, 
_ISw¥öt
Ë)

	)

219 
	#iswgøph
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`isgøph
(cË: 
	`__isw˘y≥
(c, 
_ISwgøph
Ë)

	)

220 
	#isw˙ål
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`is˙ål
(cË: 
	`__isw˘y≥
(c, 
_ISw˙ål
Ë)

	)

221 
	#iswascii
(
c
Ë(!((cË& ~0177))

	)

222 
	#towuµî
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`touµî
(cË: 
	`_åw˘y≥
(c, 
_L
Ë)

	)

223 
	#towlowî
(
c
Ë––
_IS_EUC_LOCALE
 && (cË<255Ë? 
	`tﬁowî
(cË: 
	`_åw˘y≥
(c, 
_U
Ë)

	)

227 
	g__SGI_LIBC_END_EXTERN_C


229 #ifde‡
_WCTYPE_CORE_EXTENSIONS_1


230 #unde‡
_WCTYPE_CORE_EXTENSIONS_1


	@/usr/include/sys/EVEREST/epc.h

17 #i‚de‡
__SYS_EPC_H__


18 
	#__SYS_EPC_H__


	)

22 
	~"sys/ªg.h
"

23 
	~"sys/EVEREST/evîe°.h
"

24 
	~"sys/EVEREST/io4.h
"

25 
	~"sys/EVEREST/evc⁄fig.h
"

27 
	#EPC_LW
(
_r
Ë((_rË| 0x00a00000)

	)

29 #ifde‡
_LANGUAGE_C


31 
	~"sys/ty≥s.h
"

33 
	#EPC_GET
(
_r
, 
_i
, 
_ªg
) \

34 (
evªg_t
)
	`lﬂd_doubÀ
((*)(
	`SWIN_BASE
((
_r
), (
_i
)Ë+ (
_ªg
)))

	)

35 
	#EPC_SET
(
_r
, 
_i
, 
_ªg
, 
_vÆue
) \

36 
	`°‹e_doubÀ
((*)(
	`SWIN_BASE
((
_r
),(
_i
)Ë+ (
_ªg
)), ()(
_vÆue
))

	)

38 
	#EPC_SETBASE
(
r
,
i
) \

39 (
ei
->
ei_ïcba£
 = (
ˇddr_t
)(
	`SWIN_BASE
((
r
),(
i
)))Ë

	)

40 #ifdef 
_MIPSEB


41 
	#EPC_SETW
(
r
, 
v
Ë(*(vﬁ©ûê
u_öt
*)(
ei
->
ei_ïcba£
 + (rË+ 4Ë(v))

	)

42 
	#EPC_GETW
(
r
Ë*(vﬁ©ûê
u_öt
*)(
ei
->
ei_ïcba£
 + (rË+ 4)

	)

43 
	#EPC_SETB
(
r
,
v
Ë(*(vﬁ©ûê
u_ch¨
*)(
ei
->
ei_ïcba£
 + (rË+ 7Ë(v))

	)

49 
	#EPC_REGION
 1

	)

50 
	#EPC_ADAPTER
 (
EVCFGINFO
->
ecfg_ïciﬂ
)

	)

55 
	#EPC_PROM
 0x0000

	)

56 
	#EPC_ENETPROM
 0x2000

	)

57 
	#EPC_NVRTC
 0x3000

	)

58 
	#EPC_DUART0
 0x4000

	)

59 
	#EPC_DUART1
 0x5000

	)

60 
	#EPC_DUART2
 0x6000

	)

61 
	#EPC_PPORT
 0x7000

	)

62 
	#EPC_EXTINT
 0x9000

	)

63 
	#EPC_PPSTAT
 0x9000

	)

64 
	#PBUS_BASE
(
addr
Ë
	`SWIN_BASE
(
EPC_REGION
, 
EPC_ADAPTER
Ë+ (addr)

	)

71 #ifde‡
_MIPSEB


72 
	#BYTE_SELECT
 7

	)

74 
	#BYTE_SELECT
 0

	)

81 
	#EPC_LWIN_LOPROM
 0x000000

	)

82 
	#EPC_LWIN_HIPROM
 0x100000

	)

88 
	#EPC_ISTAT
 0x0000a100

	)

89 
	#EPC_IMSET
 0x0000a108

	)

90 
	#EPC_IMRST
 0x0000a110

	)

93 
	#EPC_INTR_DUART0
 0x01

	)

94 
	#EPC_INTR_DUART12
 0x02

	)

95 
	#EPC_INTR_ENET
 0x04

	)

96 
	#EPC_INTR_PROFTIM
 0x08

	)

97 
	#EPC_INTR_SPARE
 0x10

	)

98 
	#EPC_INTR_PPORT
 0x20

	)

99 
	#EPC_INTR_UNUSED
 0x40

	)

100 
	#EPC_INTR_ERROR
 0x80

	)

102 
	#EPC_IIDDUART0
 0x0000a118

	)

103 
	#EPC_IIDDUART1
 0x0000a120

	)

104 
	#EPC_IIDENET
 0x0000a128

	)

105 
	#EPC_IIDPROFTIM
 0x0000a130

	)

110 
	#EPC_IIDSPARE
 0x0000a138

	)

111 
	#EPC_IIDPPORT
 0x0000a140

	)

112 
	#EPC_IIDINTR4
 0x0000a138

	)

113 
	#EPC_IIDERROR
 0x0000a150

	)

118 
	#EPC_ENET_BASE
 0x0000a200

	)

119 
	#EPC_EADDR_BASE
 
EPC_ENET_BASE


	)

120 
	#EPC_EADDR0
 
EPC_ENET_BASE


	)

121 
	#EPC_EADDR1
 0x0000a208

	)

122 
	#EPC_EADDR2
 0x0000a210

	)

123 
	#EPC_EADDR3
 0x0000a218

	)

124 
	#EPC_EADDR4
 0x0000a220

	)

125 
	#EPC_EADDR5
 0x0000a228

	)

126 
	#EPC_TCMD
 0x0000a230

	)

127 
	#EPC_RCMD
 0x0000a238

	)

129 
	#EPC_TBASELO
 0x0000a250

	)

130 
	#EPC_TBASEHI
 0x0000a258

	)

131 
	#EPC_TLIMIT
 0x0000a260

	)

132 
	#EPC_TINDEX
 0x0000a268

	)

133 
	#EPC_TTOP
 0x0000a270

	)

134 
	#EPC_TBPTR
 0x0000a278

	)

135 
	#EPC_TSTAT
 0x0000a280

	)

136 
	#EPC_TITIMER
 0x0000a288

	)

138 
	#EPC_RBASELO
 0x0000a2a0

	)

139 
	#EPC_RBASEHI
 0x0000a2a8

	)

140 
	#EPC_RLIMIT
 0x0000a2b0

	)

141 
	#EPC_RINDEX
 0x0000a2b8

	)

142 
	#EPC_RTOP
 0x0000a2c0

	)

143 
	#EPC_RBPTR
 0x0000a2c8

	)

144 
	#EPC_RSTAT
 0x0000a2d0

	)

145 
	#EPC_RITIMER
 0x0000a2d8

	)

148 
	#EPC_2BUFS
 0

	)

149 
	#EPC_4BUFS
 1

	)

150 
	#EPC_8BUFS
 2

	)

151 
	#EPC_16BUFS
 3

	)

152 
	#EPC_32BUFS
 4

	)

153 
	#EPC_64BUFS
 5

	)

154 
	#EPC_128BUFS
 6

	)

155 
	#EPC_256BUFS
 7

	)

157 
	#EPC_LIMTON
(
l
Ë(
lm≠
[l])

	)

164 
	#EPC_BUF_INCR
(
bn
, 
mask
Ë((bnË+ 1 & (mask))

	)

165 
	#EPC_BUF_DECR
(
bn
, 
mask
Ë((bnË- 1 & (mask))

	)

166 
	#EPC_BUF_SUB
(
bn
, 
v
, 
mask
Ë(()(bnË- (vË& mask)

	)

167 
	#EPC_RBN_INCR
(
bn
Ë
	`EPC_BUF_INCR
(bn, 
ei
->
ei_rbufs
 - 1)

	)

168 
	#EPC_RBN_DECR
(
bn
Ë
	`EPC_BUF_DECR
(bn, 
ei
->
ei_rbufs
 - 1)

	)

169 
	#EPC_TBN_INCR
(
bn
Ë
	`EPC_BUF_INCR
(bn, 
ei
->
ei_tbufs
 - 1)

	)

170 
	#EPC_TBN_DECR
(
bn
Ë
	`EPC_BUF_DECR
(bn, 
ei
->
ei_tbufs
 - 1)

	)

172 
	#EPC_ENET_DATA
 2

	)

173 
	#EPC_ENET_STAT
 2044

	)

174 
	#EPC_ENET_LENMASK
 0x7f‡

	)

175 
	#EPC_ENET_STSHFT
 16

	)

176 
	#EPC_ENET_STMASK
 0xff

	)

177 
	#EPC_ENET_BUFSZ
 2048

	)

180 
	#EPC_ENET_TBP
(
tbn
Ë(
ei
->
ei_tba£
 +Åb¿* 
EPC_ENET_BUFSZ
)

	)

181 
	#EPC_ENET_RBP
(
rbn
Ë(
ei
->
ei_rba£
 +Ñb¿* 
EPC_ENET_BUFSZ
)

	)

187 
	#EPC_LXT_STAT
 0x00008000

	)

188 
	#EPC_LXT_LOOP
 0x00008010

	)

189 
	#EPC_EDLC_SELF
 0x00008018

	)

190 
	#EPC_TOT_COL
 0x00008008

	)

191 
	#EPC_TOT_COL_MASK
 0xffff

	)

192 
	#EPC_EARLY_COL
 0x00008010

	)

193 
	#EPC_EARLY_COL_MASK
 0xffff

	)

194 
	#EPC_LATE_COL
 0x00008000

	)

195 
	#EPC_LATE_COL_MASK
 0xff

	)

201 
	#EPC_PPBLKSZ
 4096

	)

202 
	#EPC_PPMAXXFER
 4095

	)

203 
	#EPC_PPBLKALGN
 4096

	)

208 
	#EPC_PPBASELO
 0x0000a300

	)

209 
	#EPC_PPBASEHI
 0x0000a308

	)

210 
	#EPC_PPLEN
 0x0000a310

	)

211 
	#EPC_PPCOUNT
 0x0000a318

	)

212 
	#EPC_PPCTRL
 0x0000a320

	)

217 
	#EPC_PPSTB_L
 0

	)

218 
	#EPC_PPSTB_H
 1

	)

219 
	#EPC_PPBUSY_L
 0

	)

220 
	#EPC_PPBUSY_H
 (1 << 1Ë

	)

221 
	#EPC_PPACK_L
 0

	)

222 
	#EPC_PPACK_H
 (1 << 2Ë

	)

223 
	#EPC_PPSACKMODE
 (1 << 3Ë

	)

224 
	#EPC_PPBUSYMODE
 (1 << 4Ë

	)

225 
	#EPC_PPSTARTDMA
 (1 << 5Ë

	)

226 
	#EPC_PPSTOPDMA
 0

	)

227 
	#EPC_PPIN
 (1 << 6Ë

	)

228 
	#EPC_PPOUT
 0

	)

229 
	#EPC_PPPLSSHIFT
 7

	)

230 
	#EPC_PPHLDSHIFT
 16

	)

231 
	#EPC_PPSTPSHIFT
 24

	)

232 
	#EPC_STBMASK
 0xffffff80

	)

236 
	#EPC_PPSTRBPUL_L
 0

	)

237 
	#EPC_PPSTRBPUL_H
 (1 << 5)

	)

238 
	#EPC_PPBUSYPUL_L
 0

	)

239 
	#EPC_PPBUSYPUL_H
 (1 << 6)

	)

240 
	#EPC_PPPULLMASK
 (
EPC_PPSTRBPUL_H
 | 
EPC_PPBUSYPUL_H
)

	)

247 
	#EPC_PPFAULT
 1

	)

248 
	#EPC_PPNOINK
 2

	)

249 
	#EPC_PPNOPAPER
 4

	)

250 
	#EPC_PPONLINE
 8

	)

253 
	#EPC_PPPRT
 1

	)

254 
	#EPC_PPRESET
 2

	)

259 
	#EPC_PRST
 0x0000a400

	)

260 
	#EPC_PRSTSET
 0x0000a408

	)

261 
	#EPC_PRSTCLR
 0x0000a410

	)

262 
	#EPC_IERR
 0x0000a418

	)

263 
	#EPC_IERRC
 0x0000a420

	)

264 
	#EPC_EINFO1
 0x0000a428

	)

265 
	#EPC_EINFO2
 0x0000a430

	)

270 
	#EPC_ENETHOLD_ARM
 0x010

	)

277 #ifdef 
_LANGUAGE_C


278 
	#EPC_SETENETHOLD
(
v
) \

280 i‡(
v
) { \

281 
	`EPC_SETW
(
EPC_PRSTSET
, 
v
); \

283 i‡(~
v
 & 
EPC_ENETHOLD_MASK
) { \

284 
	`EPC_SETW
(
EPC_PRSTCLR
, ~
v
 & 
EPC_ENETHOLD_MASK
); \

286 }

	)

290 
	#EPC_ENETHOLD_MASK
 0x180

	)

291 
	#EPC_ENETHOLD_0_0
 0x180

	)

292 
	#EPC_ENETHOLD_0_8
 0x100

	)

293 
	#EPC_ENETHOLD_1_5
 0x080

	)

294 
	#EPC_ENETHOLD_2_5
 0x000

	)

296 
	#EPC_PRST_EDLC
 0x200

	)

298 
	#EPC_PDEVRSTALL
 0x02f

	)

315 
	#NVR_RTC
 0x200

	)

316 
	#NVR_RTC_ADDR
 0x000

	)

317 
	#NVR_RTC_DATA
 0x008

	)

318 
	#NVR_XRAM
 0x00

	)

319 
	#NVR_XRAMPAGE
 (
NVR_XRAM
|(0x20 << 3)Ë

	)

321 
	#NVR_SEC
 0x00

	)

322 
	#NVR_SECALRM
 0x01

	)

323 
	#NVR_MIN
 0x02

	)

324 
	#NVR_MINALRM
 0x03

	)

325 
	#NVR_HOUR
 0x04

	)

326 
	#NVR_HOURALRM
 0x05

	)

327 
	#NVR_WEEKDAY
 0x06

	)

328 
	#NVR_DAY
 0x07

	)

329 
	#NVR_MONTH
 0x08

	)

330 
	#NVR_YEAR
 0x09

	)

331 
	#NVR_RTCA
 0x0®

	)

332 
	#NVR_INTR_SLOW
 0x00

	)

333 
	#NVR_INTR_FAST
 0x06

	)

334 
	#NVR_INTR_SLOW_RATE
 0

	)

335 
	#NVR_INTR_FAST_RATE
 1024

	)

336 
	#NVR_OSC_ON
 0x20

	)

337 
	#NVR_DV_MASK
 0x70

	)

338 
	#NVR_RTCB
 0x0b

	)

339 
	#NVR_SET
 0x80

	)

340 
	#NVR_PIE
 0x40

	)

341 
	#NVR_DM
 0x04

	)

342 
	#NVR_2412
 0x02

	)

343 
	#NVR_RTCC
 0x0¯

	)

344 
	#NVR_RTCD
 0x0d

	)

345 
	#NVR_VRT
 0x80

	)

347 
	#XRAM_PAGEMASK
 0x„0

	)

348 
	#XRAM_PAGESHFT
 5

	)

349 
	#XRAM_BYTEMASK
 0x1f

	)

351 #ifde‡
_LANGUAGE_C


352 
	#XRAM_PAGE
(
_x
Ë–((_xË& 
XRAM_PAGEMASK
Ë>> 
XRAM_PAGESHFT
 )

	)

353 
	#XRAM_REG
(
_x
Ë–((_xË& 
XRAM_BYTEMASK
Ë<< 3)

	)

355 
	#EPC_RTC_READ
(
r
) \

357 *(vﬁ©ûê*)(
	`PBUS_BASE
(
EPC_NVRTC
Ë+ 
NVR_RTC
 + 
NVR_RTC_ADDR
 + 
BYTE_SELECT
Ë(
r
),\

358 *(vﬁ©ûê
u_ch¨
 *)(
	`PBUS_BASE
(
EPC_NVRTC
Ë+ 
NVR_RTC
 + 
NVR_RTC_DATA
 + 
BYTE_SELECT
) \

359 )

	)

361 
	#EPC_RTC_WRITE
(
r
,
v
) \

363 *(vﬁ©ûê*)(
	`PBUS_BASE
(
EPC_NVRTC
Ë+ 
NVR_RTC
 + 
NVR_RTC_ADDR
 + 
BYTE_SELECT
Ë(
r
), \

364 *(vﬁ©ûê
u_ch¨
 *)(
	`PBUS_BASE
(
EPC_NVRTC
Ë+ 
NVR_RTC
 + 
NVR_RTC_DATA
 + 
BYTE_SELECT
Ë(
v
) \

365 )

	)

370 
	#NVRA_UIP
 0x80

	)

371 
	#NVRA_STARTOSC
 0x20

	)

374 
	#NVRB_SET
 0x80

	)

375 
	#NVRB_PIE
 0x40

	)

376 
	#NVRB_AIE
 0x20

	)

377 
	#NVRB_UIE
 0x10

	)

378 
	#NVRB_SQWE
 0x80

	)

379 
	#NVRB_DM
 0x40

	)

380 
	#NVRB_MILTIME
 0x20

	)

381 
	#NVRB_DSE
 0x10

	)

384 
	#NVRC_IRQF
 0x80

	)

385 
	#NVRC_PF
 0x40

	)

386 
	#NVRC_AF
 0x20

	)

387 
	#NVRC_UF
 0x10

	)

390 
	#NVRD_VRT
 0x80

	)

396 
	#DUART0
 
	`PBUS_BASE
(
EPC_DUART0
)

	)

397 
	#DUART1
 
	`PBUS_BASE
(
EPC_DUART1
)

	)

398 
	#DUART2
 
	`PBUS_BASE
(
EPC_DUART2
)

	)

400 
	#CHNA_DATA_OFFSET
 0x18

	)

401 
	#CHNB_DATA_OFFSET
 0x10

	)

402 
	#CHNA_CNTRL_OFFSET
 0x8

	)

403 
	#CHNB_CNTRL_OFFSET
 0x0

	)

411 
	#DUART0A_DATA
 (
DUART0
 + 
CHNA_DATA_OFFSET
 + 
BYTE_SELECT
)

	)

412 
	#DUART0B_DATA
 (
DUART0
 + 
CHNB_DATA_OFFSET
 + 
BYTE_SELECT
)

	)

413 
	#DUART1A_DATA
 (
DUART1
 + 
CHNA_DATA_OFFSET
 + 
BYTE_SELECT
)

	)

414 
	#DUART1B_DATA
 (
DUART1
 + 
CHNB_DATA_OFFSET
 + 
BYTE_SELECT
)

	)

415 
	#DUART2A_DATA
 (
DUART2
 + 
CHNA_DATA_OFFSET
 + 
BYTE_SELECT
)

	)

416 
	#DUART2B_DATA
 (
DUART2
 + 
CHNB_DATA_OFFSET
 + 
BYTE_SELECT
)

	)

418 
	#DUART0A_CNTRL
 (
DUART0
 + 
CHNA_CNTRL_OFFSET
 + 
BYTE_SELECT
)

	)

419 
	#DUART0B_CNTRL
 (
DUART0
 + 
CHNB_CNTRL_OFFSET
 + 
BYTE_SELECT
)

	)

420 
	#DUART1A_CNTRL
 (
DUART1
 + 
CHNA_CNTRL_OFFSET
 + 
BYTE_SELECT
)

	)

421 
	#DUART1B_CNTRL
 (
DUART1
 + 
CHNB_CNTRL_OFFSET
 + 
BYTE_SELECT
)

	)

422 
	#DUART2A_CNTRL
 (
DUART2
 + 
CHNA_CNTRL_OFFSET
 + 
BYTE_SELECT
)

	)

423 
	#DUART2B_CNTRL
 (
DUART2
 + 
CHNB_CNTRL_OFFSET
 + 
BYTE_SELECT
)

	)

425 #ifde‡
_LANGUAGE_C


431 
	sïc
 {

432 
iﬂd≠_t
 
	miﬂd≠
;

433 } 
	tïc_t
;

435 
	#ïc_¶Ÿ
(
x
Ë
ïcs
[x].
iﬂd≠
.
¶Ÿ


	)

436 
	#ïc_ad≠
(
x
Ë
ïcs
[x].
iﬂd≠
.
∑d≠


	)

437 
	#ïc_swö
(
x
Ë
ïcs
[x].
iﬂd≠
.
swö


	)

439 
ïc_t
 
ïcs
[];

440 
numïcs
;

443 
ˇddr_t
 
ïc_¥obe
 ();

444 
ïc_öå_¥o·im
(
e‰ame_t
 *, *);

445 
ïc_öå_•¨e
(
e‰ame_t
 *, *);

446 
ïc_öå_µ‹t
(
e‰ame_t
 *, *);

447 
ïc_öå_îr‹
(
e‰ame_t
 *, *);

448 
ïc_öô
(, , );

449 
ïc_öå_öô
(
__psunsig√d_t
, );

	@/usr/include/sys/EVEREST/evconfig.h

37 #i‚de‡
__SYS_EVEREST_EVCONFIG_H__


38 
	#__SYS_EVEREST_EVCONFIG_H__


	)

42 #ifde‡
_LANGUAGE_C


43 
	~<sys/ty≥s.h
>

44 
	~<sys/lﬂddrs.h
>

45 
	~<sys/EVEREST/evîe°.h
>

46 
	~<sys/EVEREST/mc3.h
>

47 
	~<sys/EVEREST/io4.h
>

49 
	~<sys/EVEREST/evîe°.h
>

52 
	~<sys/EVEREST/evdüg.h
>

54 
	~<sys/EVEREST/evaddrma¸os.h
>

56 
	#EVCFGINFO_MAGIC
 0xdódbabe

	)

58 
	#BLOC_SIZE
 256

	)

59 
	#BLOCs_to_∑ges
(
x
Ë((x)>>(4+
PGSHFTFCTR
))

	)

60 
	#SERIALNUMSIZE
 11

	)

67 
	#INV_MAXUNITS
 8

	)

68 
	#INV_UNITSIZE
 3

	)

69 
	#INV_SIZE
 (4 + (
INV_MAXUNITS
 * 
INV_UNITSIZE
))

	)

71 
	#INV_TYPE
 0

	)

72 
	#INV_REV
 1

	)

73 
	#INV_DIAGVAL
 2

	)

74 
	#INV_ENABLE
 3

	)

75 
	#INV_UNITOFF
 4

	)

77 
	#INVU_TYPE
 0

	)

78 
	#INVU_DIAGVAL
 1

	)

79 
	#INVU_ENABLE
 2

	)

84 
	#EVCLASS_MASK
 0xf0

	)

85 
	#EVCLASS_NONE
 0x00

	)

86 
	#EVCLASS_CPU
 0x10

	)

87 
	#EVCLASS_IO
 0x20

	)

88 
	#EVCLASS_MEM
 0x30

	)

89 
	#EVCLASS_UNKNOWN
 0xf0

	)

91 
	#EVCLASS
(
_x
Ë((_xË& 
EVCLASS_MASK
)

	)

93 
	#EVTYPE_MASK
 0x0f

	)

94 
	#EVTYPE_NONE
 0x00

	)

95 
	#EVTYPE_EMPTY
 0x00

	)

97 
	#EVTYPE_WEIRDCPU
 (
EVCLASS_CPU
 | 0x0)

	)

98 
	#EVTYPE_IP19
 (
EVCLASS_CPU
 | 0x1)

	)

99 
	#EVTYPE_IP21
 (
EVCLASS_CPU
 | 0x2)

	)

100 
	#EVTYPE_IP25
 (
EVCLASS_CPU
 | 0x3)

	)

102 
	#EVTYPE_WEIRDIO
 (
EVCLASS_IO
 | 0x0)

	)

103 
	#EVTYPE_IO4
 (
EVCLASS_IO
 | 0x1)

	)

104 
	#EVTYPE_IO5
 (
EVCLASS_IO
 | 0x2)

	)

106 
	#EVTYPE_WEIRDMEM
 (
EVCLASS_MEM
 | 0x0)

	)

107 
	#EVTYPE_MC3
 (
EVCLASS_MEM
 | 0x1)

	)

109 
	#EVTYPE_UNKNOWN
 0xff

	)

111 
	#EVTYPE
(
_x
Ë((_xË& 
EVTYPE_MASK
)

	)

115 
	#EVDIAG_PASSED
 0x0

	)

116 
	#EVDIAG_TBD
 0xfd

	)

117 
	#EVDIAG_NOT_SET
 0x„

	)

118 
	#EVDIAG_NOTFOUND
 0xff

	)

120 
	#EVINV_DISABLED
 1

	)

122 
	#CPUST_NORESP
 ((
unch¨
Ë0xff)

	)

124 #ifde‡
_LANGUAGE_C


132 
	seviﬂcfg_s
 {

133 
uöt
 
	m∑d
;

134 
unch¨
 
	miﬂ_íabÀ
;

135 
unch¨
 
	miﬂ_övít‹y
;

136 
unch¨
 
	miﬂ_dügvÆ
;

137 
unch¨
 
	miﬂ_ty≥
;

138 
unch¨
 
	miﬂ_vútid
;

139 
unch¨
 
	miﬂ_subty≥
;

140 } 
	teviﬂcfg_t
;

149 
	#bnk_u£d
 
bnk_ù


	)

150 
	#bnk_√xt
 
bnk_if


	)

151 
	sevbnkcfg_s
 {

152 
uöt
 
	mbnk_bloc
;

153 
unch¨
 
	mbnk_¶Ÿ
;

154 
unch¨
 
	mbnk_íabÀ
;

155 
unch¨
 
	mbnk_övít‹y
;

156 
unch¨
 
	mbnk_dügvÆ
;

157 
unch¨
 
	mbnk_ù
;

158 
unch¨
 
	mbnk_if
;

159 
unch¨
 
	mbnk_size
;

160 
unch¨
 
	mbnk_cou¡
;

161 } 
	tevbnkcfg_t
;

171 
	sev˝ucfg_s
 {

177 
	m˝u_œunch
;

178 
	m˝u_∑rm
;

179 
unch¨
 
	m˝u_öfo
;

182 
unch¨
 
	m˝u_íabÀ
;

183 
unch¨
 
	m˝u_övít‹y
;

184 
unch¨
 
	m˝u_dügvÆ
;

185 
unch¨
 
	m˝u_vpid
;

186 
unch¨
 
	m˝u_•ìd
;

187 
unch¨
 
	m˝u_ˇchesz
;

188 
unch¨
 
	m˝u_¥omªv
;

189 } 
	tev˝ucfg_t
;

199 
	#eb_io
 
eb_un
.
ebun_io


	)

200 
	#eb_iﬂº
 
eb_un
.
ebun_io
.
eb_iﬂs


	)

201 
	#eb_˝u
 
eb_un
.
ebun_˝u


	)

202 
	#eb_˝u¨r
 
eb_un
.
ebun_˝u
.
eb_˝us


	)

203 
	#eb_mem
 
eb_un
.
ebun_mem


	)

204 
	#eb_b™ks
 
eb_un
.
ebun_mem
.
ebun_b™ks


	)

206 
	sevbrdöfo_s
 {

209 
eviﬂcfg_t
 
	meb_iﬂs
[
IO4_MAX_PADAPS
];

210 
unch¨
 
	meb_wönum
;

211 } 
	mebun_io
;

214 
evbnkcfg_t
 
	mebun_b™ks
[
MC3_NUM_BANKS
];

215 
unch¨
 
	meb_mc3num
;

216 } 
	mebun_mem
;

219 
ev˝ucfg_t
 
	meb_˝us
[
EV_MAX_CPUS_BOARD
];

220 
unch¨
 
	meb_˝unum
;

221 
unch¨
 
	meb_num˝us
;

222 
unch¨
 
	meb_c¸ev
;

223 
unch¨
 
	meb_brdÊags
;

224 } 
	mebun_˝u
;

225 } 
	meb_un
;

227 
unch¨
 
	meb_ty≥
;

228 
unch¨
 
	meb_ªv
;

229 
unch¨
 
	meb_íabÀd
;

230 
unch¨
 
	meb_övít‹y
;

231 
unch¨
 
	meb_dügvÆ
;

232 
unch¨
 
	meb_¶Ÿ
;

233 } 
	tevbrdöfo_t
;

239 
	#EV_BFLAG_PIGGYBACK
 0x01

	)

249 
	sevcfgöfo_s
 {

250 
evbrdöfo_t
 
	mecfg_bﬂrd
[
EV_MAX_SLOTS
];

251 
uöt
 
	mecfg_magic
;

252 
uöt
 
	mecfg_£cs
;

253 
uöt
 
	mecfg_«no£cs
;

254 
uöt
 
	mecfg_˛k‰eq
;

255 
uöt
 
	mecfg_memsize
;

256 
uöt
 
	mecfg_ïciﬂ
;

257 
uöt
 
	mecfg_debugsw
;

259 
	mecfg_¢um
[
SERIALNUMSIZE
];

260 } 
	tevcfgöfo_t
;

262 
	#YRREF
 1970

	)

264 
	#BOARD
(
_x
Ë((
evbrdöfo_t
 *)(
EVCFGINFO_ADDR
 + ((_xË* 
BRDINFO_SIZE
)))

	)

269 
	#EVCFGINFO
 ((
evcfgöfo_t
*)
EVCFGINFO_ADDR
)

	)

274 
	#EVCFG_CPUID
(
_¶Ÿ
, 
_˝u
) \

275 (
EVCFGINFO
->
ecfg_bﬂrd
[(
_¶Ÿ
)].
eb_˝u
.
eb_˝us
[(
_˝u
)].
˝u_vpid
)

	)

281 
	#EVCFG_CPUDIAGVAL
(
_¶Ÿ
, 
_˝u
) \

282 (
EVCFGINFO
->
ecfg_bﬂrd
[(
_¶Ÿ
)].
eb_˝u
.
eb_˝us
[(
_˝u
)].
˝u_dügvÆ
)

	)

288 
	#EVCFG_CPUSPEED
(
_¶Ÿ
, 
_˝u
) \

289 (
EVCFGINFO
->
ecfg_bﬂrd
[(
_¶Ÿ
)].
eb_˝u
.
eb_˝us
[(
_˝u
)].
˝u_•ìd
)

	)

294 
	#EVCFG_CPUPROMREV
(
_¶Ÿ
, 
_˝u
) \

295 (
EVCFGINFO
->
ecfg_bﬂrd
[(
_¶Ÿ
)].
eb_˝u
.
eb_˝us
[(
_˝u
)].
˝u_¥omªv
)

	)

300 
	#EVCFG_CPUSTRUCT
(
_¶Ÿ
, 
_˝u
) \

301 (
EVCFGINFO
->
ecfg_bﬂrd
[(
_¶Ÿ
)].
eb_˝u
.
eb_˝us
[(
_˝u
)])

	)

307 
	#VDS_NOGFX
 0x8000

	)

308 
	#VDS_NOMP
 0x100

	)

309 
	#VDS_MANUMODE
 0x80

	)

310 
	#VDS_NOARB
 0x40

	)

311 
	#VDS_PODMODE
 0x20

	)

312 
	#VDS_NO_DIAGS
 0x10

	)

313 
	#VDS_DEFAULTS
 0x08

	)

314 
	#VDS_NOMEMCLEAR
 0x04

	)

315 
	#VDS_2ND_IO4
 0x02

	)

316 
	#VDS_DEBUG_PROM
 0x01

	)

318 
	#BRDINFO_SIZE
 108

	)

320 #ifde‡
_LANGUAGE_ASSEMBLY


321 
	#DEBUGSW_OFF
 (
BRDINFO_SIZE
 * 
EV_MAX_SLOTS
 + 24)

	)

322 
	#CPUINFO_SIZE
 16

	)

323 
	#CPULAUNCH_OFF
 0

	)

324 
	#CPUPARM_OFF
 4

	)

325 
	#CPUSTATUS_OFF
 8

	)

326 
	#CPUENABLE_OFF
 9

	)

327 
	#CPUINVENT_OFF
 10

	)

328 
	#CPUDIAGVAL_OFF
 11

	)

329 
	#CPUVPID_OFF
 12

	)

330 
	#CPUSPEED_OFF
 13

	)

331 
	#CPUCACHE_OFF
 14

	)

332 
	#CPUPROMREV_OFF
 15

	)

	@/usr/include/sys/SN/SN0/war.h

13 #i‚de‡
__SYS_SN_SN0_WAR_H__


14 
	#__SYS_SN_SN0_WAR_H__


	)

23 
	tw¨bôs_t
;

25 
w¨bôs_ovîride
;

27 
	#WAR_II_IFDR_BIT
 (0x0001)

	)

28 
	#WAR_ERR_STS_BIT
 (0x0002)

	)

29 
	#WAR_MD_MIGR_BIT
 (0x0004)

	)

30 
	#WAR_HUB_POQ_BIT
 (0x0008)

	)

31 
	#WAR_EXTREME_ERR_STS_BIT
 (0x0010)

	)

33 
	#WAR_IS_ENABLED
(
_bô
Ë(
¥iv©e
.
p_w¨bôs
 & (_bô))

	)

35 
	#WAR_II_IFDR_ENABLED
 
	`WAR_IS_ENABLED
(
WAR_II_IFDR_BIT
)

	)

36 
	#WAR_ERR_STS_ENABLED
 
	`WAR_IS_ENABLED
(
WAR_ERR_STS_BIT
)

	)

37 
	#WAR_MD_MIGR_ENABLED
(
n
) \

38 (
	`CNODE_TO_CPU_BASE
(
n
) != -1 ? \

39 
pdaödr
[
	`CNODE_TO_CPU_BASE
(
n
)].
pda
->
p_w¨bôs
 & 
WAR_MD_MIGR_BIT
 : 1)

	)

46 
	#WAR_HUB_POQ_DISABLED
(Ë(
¥iv©e
.
p_w¨bôs
 & 
WAR_HUB_POQ_BIT
)

	)

48 
	#WAR_HUB2_0_WAR_BITS
 (
WAR_II_IFDR_BIT
 | \

49 
WAR_ERR_STS_BIT
 | \

50 
WAR_EXTREME_ERR_STS_BIT
 | \

51 
WAR_MD_MIGR_BIT
)

	)

53 
	#WAR_HUB2_1_WAR_BITS
 0

	)

54 
	#WAR_HUB2_2_WAR_BITS
 0

	)

55 
	#WAR_HUB2_3_WAR_BITS
 (
WAR_HUB_POQ_BIT
)

	)

56 
	#WAR_HUB2_4_WAR_BITS
 (
WAR_HUB_POQ_BIT
)

	)

59 #i‡
HUB_MIGR_WAR


66 
	#MIGR_DIFF_THRESHOLD_WAR
 0xFFFFF

	)

69 
¢0_poq_w¨
(*);

	@/usr/include/sys/SN/SN1/war.h

13 #i‚de‡
__SYS_SN_SN1_WAR_H__


14 
	#__SYS_SN_SN1_WAR_H__


	)

23 
	tw¨bôs_t
;

25 
w¨bôs_ovîride
;

	@/usr/include/sys/SN/agent.h

18 #i‚de‡
__SYS_SN_AGENT_H__


19 
	#__SYS_SN_AGENT_H__


	)

21 
	~<sys/SN/addrs.h
>

22 
	~<sys/SN/¨ch.h
>

23 
	~<sys/SN/io.h
>

25 #i‡
deföed
 (
SN0
)

26 
	~<sys/SN/SN0/hub.h
>

27 #ñi‡
deföed
 (
SN1
)

28 
	~<sys/SN/SN1/bedrock.h
>

35 #i‡
SN0


36 
	#HUB_NIC_ADDR
(
_˝uid
) \

37 
	`REMOTE_HUB_ADDR
(
	`COMPACT_TO_NASID_NODEID
(
	`˝uto˙ode
(
_˝uid
)), \

38 
MD_MLAN_CTL
)

	)

39 #ñi‡
SN1


40 
	#HUB_NIC_ADDR
(
_˝uid
) \

41 
	`REMOTE_HUB_ADDR
(
	`COMPACT_TO_NASID_NODEID
(
	`˝uto˙ode
(
_˝uid
)), \

42 
LB_MICROLAN_CTL
)

	)

45 
	#SET_HUB_NIC
(
_my_˝uid
, 
_vÆ
) \

46 (
	`HUB_S
(
	`HUB_NIC_ADDR
(
_my_˝uid
), (
_vÆ
)))

	)

48 
	#SET_MY_HUB_NIC
(
_v
) \

49 
	`SET_HUB_NIC
(
	`˝uid
(), (
_v
))

	)

51 
	#GET_HUB_NIC
(
_my_˝uid
) \

52 (
	`HUB_L
(
	`HUB_NIC_ADDR
(
_my_˝uid
)))

	)

54 
	#GET_MY_HUB_NIC
() \

55 
	`GET_HUB_NIC
(
	`˝uid
())

	)

	@/usr/include/sys/ksa.h

8 #i‚de‡
__SYS_KSA_H__


9 
	#__SYS_KSA_H__


	)

15 
	~<sys/sysöfo.h
>

16 
	~<sys/d∆c.h
>

25 
	sigë°©s
 {

26 
	mig_©ãm±s
;

27 
	mig_found
;

28 
	mig_‰ecy˛e
;

29 
	mig_mis£d
;

30 
	mig_dup
;

33 
	mig_ª˛aims
;

34 
	mig_ôobp
;

35 
	mig_ôobpf
;

38 
	mig_iupd©
;

39 
	mig_iu∑cc
;

40 
	mig_iupupd
;

41 
	mig_iupchg
;

42 
	mig_iupmod
;

43 
	mig_iupunk
;

44 
	mig_üŒo¸d
;

45 
	mig_üŒo¸df
;

46 
	mig_üŒoccﬁl
;

47 
	mig_bm≠rd
;

48 
	mig_bm≠fbm
;

49 
	mig_bm≠fbc
;

50 
	mig_dúupd
;

51 
	mig_åuncs
;

52 
	mig_i¸ót
;

53 
	mig_©åchg
;

54 
	mig_ªadˇn˚l
;

61 
	sxfs°©s


64 
	mxs_Ælocx
;

65 
	mxs_Ælocb
;

66 
	mxs_‰ìx
;

67 
	mxs_‰ìb
;

69 
	mxs_abt_lookup
;

70 
	mxs_abt_com∑ª
;

71 
	mxs_abt_ö§ec
;

72 
	mxs_abt_dñªc
;

74 
	mxs_blk_m≠r
;

75 
	mxs_blk_m≠w
;

76 
	mxs_blk_unm≠
;

77 
	mxs_add_exli°
;

78 
	mxs_dñ_exli°
;

79 
	mxs_look_exli°
;

80 
	mxs_cmp_exli°
;

82 
	mxs_bmbt_lookup
;

83 
	mxs_bmbt_com∑ª
;

84 
	mxs_bmbt_ö§ec
;

85 
	mxs_bmbt_dñªc
;

87 
	mxs_dú_lookup
;

88 
	mxs_dú_¸óã
;

89 
	mxs_dú_ªmove
;

90 
	mxs_dú_gëdíts
;

92 
	mxs_å™s_sync
;

93 
	mxs_å™s_async
;

94 
	mxs_å™s_em±y
;

96 
	mxs_ig_©ãm±s
;

97 
	mxs_ig_found
;

98 
	mxs_ig_‰ecy˛e
;

99 
	mxs_ig_mis£d
;

100 
	mxs_ig_dup
;

101 
	mxs_ig_ª˛aims
;

102 
	mxs_ig_©åchg
;

104 
	mxs_log_wrôes
;

105 
	mxs_log_blocks
;

106 
	mxs_log_noi˛ogs
;

107 
	mxs_log_f‹˚
;

108 
	mxs_log_f‹˚_¶ìp
;

110 
	mxs_åy_log•a˚
;

111 
	mxs_¶ìp_log•a˚
;

112 
	mxs_push_aû
;

113 
	mxs_push_aû_suc˚ss
;

114 
	mxs_push_aû_pushbuf
;

115 
	mxs_push_aû_pö√d
;

116 
	mxs_push_aû_locked
;

117 
	mxs_push_aû_Êushög
;

118 
	mxs_push_aû_ª°¨ts
;

119 
	mxs_push_aû_Êush
;

121 
	mxs_xfsd_bufs
;

122 
	mxs_x°øt_byãs
;

123 
	mxs_x°øt_quick
;

124 
	mxs_x°øt_•lô
;

126 
	mxs_wrôe_ˇŒs
;

127 
	mxs_wrôe_byãs
;

128 
	mxs_wrôe_bufs
;

129 
	mxs_ªad_ˇŒs
;

130 
	mxs_ªad_byãs
;

131 
	mxs_ªad_bufs
;

133 
	mxs_©å_gë
;

134 
	mxs_©å_£t
;

135 
	mxs_©å_ªmove
;

136 
	mxs_©å_li°
;

138 
	mxs_qm_dqª˛aims
;

139 
	mxs_qm_dqª˛aim_mis£s
;

140 
	mxs_qm_dquŸ_dups
;

141 
	mxs_qm_dqˇchemis£s
;

142 
	mxs_qm_dqˇchehôs
;

143 
	mxs_qm_dqw™ts
;

144 
	mxs_qm_dqshake_ª˛aims
;

145 
	mxs_qm_dqöa˘_ª˛aims
;

147 
	mxs_iÊush_cou¡
;

148 
	mxs_i˛u°î_Êushzîo
;

150 
	mxs_∑d
[2];

157 
	sgëblk°©s
 {

158 
	mgëblks
;

159 
	mgëblockmiss
;

160 
	mgëfound
;

161 
	mgëbchg
;

162 
	mgëlo›s
;

163 
	mgë‰ì
;

164 
	mgë‰ìem±y
;

165 
	mgë‰ìhmiss
;

166 
	mgë‰ìhmissx
;

167 
	mgë‰ìÆŒck
;

168 
	mgë‰ìdñwri
;

169 
	mÊush
;

170 
	mÊushlo›s
;

171 
	mgë‰ìªf
;

172 
	mgë‰ìªl£
;

173 
	mgëovîœp
;

174 
	m˛u°îs
;

175 
	m˛u°îed
;

176 
	mgë‰ag
;

177 
	mgë∑tch
;

178 
	måimmed
;

179 
	mö£πs
;

180 
	múŸ©es
;

181 
	mdñëes
;

182 
	mdrŸ©es
;

183 
	mdecomms
;

184 
	mÊush_decomms
;

185 
	mdñrsv
;

186 
	mdñrsv‰ì
;

187 
	mdñrsv˛ón
;

188 
	mdñrsvdúty
;

189 
	mdñrsvwaô
;

190 
	msync_commôs
;

191 
	mcommôs
;

192 
	mgë‰ìcommô
;

193 
	möa˘ive
;

194 
	ma˘ive
;

195 
	mf‹˚
;

196 
	mxs_∑d
[4];

202 
	svnode°©s
 {

203 
	mvn_vnodes
;

204 
	mvn_exè¡
;

205 
	mvn_a˘ive
;

206 
	mvn_Æloc
;

207 
	mvn_ahóp
;

208 
	mvn_a‰ì
;

209 
	mvn_a‰ìlo›s
;

210 
	mvn_gë
;

211 
	mvn_gchg
;

212 
	mvn_g‰ì
;

213 
	mvn_ªÀ
;

214 
	mvn_ª˛aim
;

215 
	mvn_de°roy
;

216 
	mvn_a‰ìmiss
;

217 
	mvn_ö£m±y
;

218 
	mvn_u∆em±y
;

219 
	mvn_∑d
[2];

223 
	sdrvlock
 {

224 
	mp_ödcdev
;

225 
	mp_ödcdevsw
;

226 
	mp_ödbdev
;

227 
	mp_ödbdevsw
;

228 
	mp_öd°r
;

229 
	mp_öd°rsw
;

230 
	mp_∑d
[2];

233 #ifde‡
_KERNEL


235 
	skß
 {

236 
sysöfo
 
	msi
;

237 
möfo
 
	mmi
;

238 
döfo
 
	mdi
;

239 
sy£º
 
	m£
;

240 
nc°©s
 
	mnc°©s
;

241 
igë°©s
 
	mp_igë°©s
;

242 
gëblk°©s
 
	mp_gëblk°©s
;

243 
vnode°©s
 
	mp_vnode°©s
;

244 
drvlock
 
	mdlock
;

245 
xfs°©s
 
	mp_xfs°©s
;

246 #i‡
CELL_CAPABLE


247 
˚Œöfo
 
	mci
;

251 
	~<sys/pda.h
>

252 
	~<sys/immu.h
>

254 
	#SYSINFO
 
¥iv©e
.
kß±r
->
si


	)

255 
	#MINFO
 
¥iv©e
.
kß±r
->
mi


	)

256 
	#DINFO
 
¥iv©e
.
kß±r
->
di


	)

257 
	#SYSERR
 
¥iv©e
.
kß±r
->
£


	)

258 
	#NCSTATS
 
¥iv©e
.
kß±r
->
nc°©s


	)

259 
	#IGETINFO
 
¥iv©e
.
kß±r
->
p_igë°©s


	)

260 
	#BUFINFO
 
¥iv©e
.
kß±r
->
p_gëblk°©s


	)

261 
	#VOPINFO
 
¥iv©e
.
kß±r
->
p_vnode°©s


	)

262 
	#DRVLOCK
 
¥iv©e
.
kß±r
->
dlock


	)

263 
	#XFSSTATS
 
¥iv©e
.
kß±r
->
p_xfs°©s


	)

264 
	#CELLINFO
 
¥iv©e
.
kß±r
->
ci


	)

	@/usr/include/sys/mapped_kernel.h

12 #i‚de‡
_SYS_MAPPED_KERNEL_H


13 
	#_SYS_MAPPED_KERNEL_H


	)

15 
	~"sys/sbd.h
"

16 
	~"sys/mùs_addr•a˚.h
"

24 #ifde‡
MAPPED_KERNEL


26 
	#MAPPED_KERN_PAGE_SIZE
 0x1000000

	)

28 #ifde‡
SN1


29 
	#MAPPED_KERN_SIZE
 (3 * 
MAPPED_KERN_PAGE_SIZE
)

	)

31 
	#MAPPED_KERN_SIZE
 (2 * 
MAPPED_KERN_PAGE_SIZE
)

	)

35 
	#MAPPED_KERN_RO_BASE
 
K2BASE


	)

36 
	#MAPPED_KERN_RW_BASE
 
K2BASE
 + 
MAPPED_KERN_PAGE_SIZE


	)

38 
	#MAPPED_KERN_PAGEMASK
 0xffffff

	)

39 
	#MAPPED_KERN_TLBMASK
 
TLBPGMASK_16M


	)

43 
	#MAPPED_KERN_SIZE
 0

	)

48 #ifde‡
MAPPED_KERNEL


52 
	#IS_MAPPED_KERN_RO
(
x
Ë(((
__psunsig√d_t
)(x) >= \

53 
MAPPED_KERN_RO_BASE
) && \

54 ((
__psunsig√d_t
)(
x
) < \

55 
MAPPED_KERN_RO_BASE
 + \

56 
MAPPED_KERN_PAGE_SIZE
))

	)

57 
	#IS_MAPPED_KERN_RW
(
x
Ë(((
__psunsig√d_t
)(x) >= \

58 
MAPPED_KERN_RW_BASE
) && \

59 ((
__psunsig√d_t
)(
x
) < \

60 
MAPPED_KERN_RW_BASE
 + \

61 
MAPPED_KERN_PAGE_SIZE
))

	)

63 #i‡
deföed
(
SN
)

65 #ifde‡
_STANDALONE


70 
	#MAPPED_KERN_RO_PHYSBASE
(
_˙ode
Ë0

	)

71 
	#MAPPED_KERN_RW_PHYSBASE
(
_˙ode
Ë0

	)

74 
	#MAPPED_KERN_RO_PHYSBASE
(
_˙ode
Ë(
	`NODEPDA
(_˙ode)->
kîn_v¨s
.
kv_ro_ba£addr
)

	)

75 
	#MAPPED_KERN_RW_PHYSBASE
(
_˙ode
Ë(
	`NODEPDA
(_˙ode)->
kîn_v¨s
.
kv_rw_ba£addr
)

	)

78 
	#MAPPED_KERN_RO_TO_PHYS
(
x
) \

79 (((
__psunsig√d_t
)
	`KDM_TO_PHYS
(
x
Ë& 
MAPPED_KERN_PAGEMASK
) \

80 | 
	`MAPPED_KERN_RO_PHYSBASE
(
	`˙odeid
()))

	)

81 
	#MAPPED_KERN_RW_TO_PHYS
(
x
) \

82 (((
__psunsig√d_t
)
	`KDM_TO_PHYS
(
x
Ë& 
MAPPED_KERN_PAGEMASK
) \

83 | 
	`MAPPED_KERN_RW_PHYSBASE
(
	`˙odeid
()))

	)

85 
	#EARLY_MAPPED_KERN_RW_TO_PHYS
(
x
) \

86 (((
__psunsig√d_t
)
	`KDM_TO_PHYS
(
x
Ë& 
MAPPED_KERN_PAGEMASK
) \

87 | 
	`NODE_CAC_BASE
(
	`gë_«sid
()))

	)

90 #i‡
deföed
(
IP19
Ë|| deföed(
IP25
)

96 
	#MAPPED_KERN_RO_PHYSBASE
(
˚Œid
Ë0

	)

97 
	#MAPPED_KERN_RW_PHYSBASE
(
˚Œid
Ë0

	)

98 
	#MAPPED_KERN_RO_TO_PHYS
(
x
Ë
	`KDM_TO_PHYS
(x)

	)

99 
	#MAPPED_KERN_RW_TO_PHYS
(
x
Ë
	`KDM_TO_PHYS
(x)

	)

101 
	#EARLY_MAPPED_KERN_RW_TO_PHYS
(
x
Ë
	`MAPPED_KERN_RW_TO_PHYS
(x)

	)

109 
	#IS_MAPPED_KERN_RO
(
x
Ë0

	)

110 
	#IS_MAPPED_KERN_RW
(
x
Ë0

	)

111 
	#MAPPED_KERN_RO_TO_PHYS
(
x
Ë
	`KDM_TO_PHYS
(x)

	)

112 
	#MAPPED_KERN_RW_TO_PHYS
(
x
Ë
	`KDM_TO_PHYS
(x)

	)

113 
	#EARLY_MAPPED_KERN_RW_TO_PHYS
(
x
Ë
	`MAPPED_KERN_RW_TO_PHYS
(x)

	)

116 
	#IS_MAPPED_KERN_SPACE
(
x
Ë(
	`IS_MAPPED_KERN_RO
(x) || \

117 
	`IS_MAPPED_KERN_RW
(
x
))

	)

118 
	#MAPPED_KERN_RO_TO_K0
(
x
Ë
	`PHYS_TO_K0
(
	`MAPPED_KERN_RO_TO_PHYS
(x))

	)

119 
	#MAPPED_KERN_RW_TO_K0
(
x
Ë
	`PHYS_TO_K0
(
	`MAPPED_KERN_RW_TO_PHYS
(x))

	)

120 
	#MAPPED_KERN_RO_TO_K1
(
x
Ë
	`PHYS_TO_K1
(
	`MAPPED_KERN_RO_TO_PHYS
(x))

	)

121 
	#MAPPED_KERN_RW_TO_K1
(
x
Ë
	`PHYS_TO_K1
(
	`MAPPED_KERN_RW_TO_PHYS
(x))

	)

	@/usr/include/sys/slotnum.h

13 #i‚de‡
__SYS_SLOTNUM_H__


14 
	#__SYS_SLOTNUM_H__


	)

33 
	#SLOTNUM_NODE_CLASS
 0x00

	)

34 
	#SLOTNUM_ROUTER_CLASS
 0x10

	)

35 
	#SLOTNUM_XTALK_CLASS
 0x20

	)

36 
	#SLOTNUM_MIDPLANE_CLASS
 0x30

	)

37 
	#SLOTNUM_XBOW_CLASS
 0x40

	)

38 
	#SLOTNUM_KNODE_CLASS
 0x50

	)

39 
	#SLOTNUM_PCI_CLASS
 0x60

	)

40 
	#SLOTNUM_INVALID_CLASS
 0xf0

	)

42 
	#SLOTNUM_CLASS_MASK
 0xf0

	)

43 
	#SLOTNUM_SLOT_MASK
 0x0f

	)

45 
	#SLOTNUM_GETCLASS
(
_¢
Ë((_¢Ë& 
SLOTNUM_CLASS_MASK
)

	)

46 
	#SLOTNUM_GETSLOT
(
_¢
Ë((_¢Ë& 
SLOTNUM_SLOT_MASK
)

	)

	@/usr/include/sys/EVEREST/evaddrmacros.h

16 #i‚de‡
__EVADDRMACROS_H__


17 
	#__EVADDRMACROS_H__


	)

19 #i‡
_LANGUAGE_C


24 
	#KPHYSTO32K0
(
_x
Ë()(((
__psöt_t
)(_xË& 0x1fffffffË| (0x80000000))

	)

29 
	#KPHYSTO32K1
(
_x
Ë()(((
__psöt_t
)(_xË& 0x1fffffffË| (0xa0000000))

	)

31 #ñi‡
_LANGUAGE_ASSEMBLY


36 
	#KPHYSTO32K0
(
_x
Ë
™d
 _x, 0x1ffffff‡; 
‹
 _x 0x80000000

	)

41 
	#KPHYSTO32K1
(
_x
Ë
™d
 _x, 0x1ffffff‡; 
‹
 _x 0xa0000000

	)

43 #i‡(
_MIPS_SZPTR
 == 64)

48 
	#KPHYSTOK0
(
_x
Ë
d¶l
 _x, 5; \

49 
d§l
 
_x
, 5; \

50 
daddu
 
_x
, 0xa800000000000000;

	)

55 
	#KPHYSTOK1
(
_x
Ë
d¶l
 _x, 5; \

56 
d§l
 
_x
, 5; \

57 
daddu
 
_x
, 0x9000000000000000;

	)

59 #ñi‡(
_MIPS_SZPTR
 == 32)

61 
	#KPHYSTOK0
(
_x
Ë
	`KPHYSTO32K0
(_x)

	)

62 
	#KPHYSTOK1
(
_x
Ë
	`KPHYSTO32K1
(_x)

	)

68 #i‡
_LANGUAGE_ASSEMBLY


70 #i‡(
_MIPS_SZPTR
 == 64)

77 
	#K32TOKPHYS
(
_x
, 
_tmp1
, 
_tmp2
) \

78 
lui
 
_tmp1
, 0x2000; \

79 
™d
 
_tmp1
, 
_x
; \

80 
lui
 
_tmp2
, 0xe000; \

82 
nŸ
 
_tmp2
; \

83 
beqz
 
_tmp1
, 200f; \

84 
™d
 
_x
, 
_tmp2
; \

86 
lui
 
_tmp1
, 0x9000; \

87 
b
 201f; \

88 
n›
; \

90 200: 
lui
 
_tmp1
, 0xa800; \

91 201: 
d¶l
 
_tmp1
, 32; \

92 
‹
 
_x
, 
_tmp1
;

	)

94 #ñi‡(
_MIPS_SZPTR
 == 32)

97 
	#K32TOKPHYS
(
_x
, 
_tmp1
, 
_tmp2
)

	)

101 #ñi‡
_LANGUAGE_C


103 #i‡(
_MIPS_SZPTR
 == 64)

106 
	#K132TOKPHYS
(
_x
Ë(((_xË& 0x1fffffffË| (0x9000000000000000L))

	)

109 
	#K032TOKPHYS
(
_x
Ë(((_xË& 0x1fffffffË| (0xa800000000000000L))

	)

111 #ñi‡(
_MIPS_SZPTR
 == 32)

114 
	#K132TOKPHYS
(
_x
Ë
	)
_x

115 
	#K032TOKPHYS
(
_x
Ë
	)
_x

	@/usr/include/sys/EVEREST/evdiag.h

2 #i‚de‡
__EVDIAG_H__


3 
	#__EVDIAG_H__


	)

6 #ifde‡
_LANGUAGE_C


13 
	mdv_code
;

14 
	mdv_∑rmmask
;

15 
	mdv_‰u
;

16 *
	mdv_msg
;

17 } 
	tdügvÆ_t
;

19 
dügvÆ_t
 
dügvÆ_m≠
[];

27 
	#EVDIAG_PASSED
 0x0

	)

28 
	#EVDIAG_TBD
 0xfd

	)

29 
	#EVDIAG_NOT_SET
 0x„

	)

30 
	#EVDIAG_NOTFOUND
 0xff

	)

31 
	#EVDIAG_NOT_PRESENT
 0xff

	)

39 
	#EVDIAG_DCACHE_DATA
 1

	)

40 
	#EVDIAG_DCACHE_ADDR
 2

	)

41 
	#EVDIAG_SCACHE_DATA
 3

	)

42 
	#EVDIAG_SCACHE_ADDR
 4

	)

43 
	#EVDIAG_ICACHE_DATA
 5

	)

44 
	#EVDIAG_ICACHE_ADDR
 6

	)

45 
	#EVDIAG_DCACHE_HANG
 7

	)

46 
	#EVDIAG_SCACHE_HANG
 8

	)

47 
	#EVDIAG_ICACHE_HANG
 9

	)

48 
	#EVDIAG_CACHE_INIT_HANG
 10

	)

49 
	#EVDIAG_DCACHE_TAG
 11

	)

50 
	#EVDIAG_SCACHE_TAG
 12

	)

51 
	#EVDIAG_SCACHE_FTAG
 13

	)

52 
	#EVDIAG_BUSTAG_DATA
 14

	)

56 
	#EVDIAG_BIST_FAILED
 40

	)

57 
	#EVDIAG_NO_MEM
 41

	)

58 
	#EVDIAG_BAD_ADDRLINE
 42

	)

59 
	#EVDIAG_BAD_DATALINE
 43

	)

60 
	#EVDIAG_BANK_FAILED
 44

	)

62 
	#EVDIAG_WRCFG_HANG
 45

	)

63 
	#EVDIAG_DOWNREVMA
 46

	)

64 
	#EVDIAG_MC3CONFBUSERR
 47

	)

65 
	#EVDIAG_MC3TESTBUSERR
 48

	)

66 
	#EVDIAG_MC3DOUBLEDIS
 49

	)

67 
	#EVDIAG_MC3NOTENOUGH
 50

	)

68 
	#EVDIAG_NOMC3
 51

	)

69 
	#EVDIAG_MEMREENABLED
 52

	)

73 
	#EVDIAG_R4K_INTS
 60

	)

74 
	#EVDIAG_GROUP_FAIL
 61

	)

75 
	#EVDIAG_LOST_INT
 62

	)

76 
	#EVDIAG_STUCK_HPIL
 63

	)

79 
	#EVDIAG_NOIO4
 70

	)

80 
	#EVDIAG_BADCKSUM
 71

	)

81 
	#EVDIAG_BADENTRY
 72

	)

82 
	#EVDIAG_TOOLONG
 73

	)

83 
	#EVDIAG_BADSTART
 74

	)

84 
	#EVDIAG_BADMAGIC
 75

	)

85 
	#EVDIAG_BADIA
 76

	)

86 
	#EVDIAG_BADMAPRAM
 77

	)

87 
	#EVDIAG_DLBUSERR
 78

	)

88 
	#EVDIAG_NOEPC
 79

	)

89 
	#EVDIAG_CFGBUSERR
 80

	)

90 
	#EVDIAG_IAREG_BUSERR
 81

	)

91 
	#EVDIAG_IAPIO_BUSERR
 82

	)

92 
	#EVDIAG_IAREG_FAILED
 83

	)

93 
	#EVDIAG_IAPIO_BADERR
 84

	)

94 
	#EVDIAG_IAPIO_NOINT
 85

	)

95 
	#EVDIAG_IAPIO_WRONGLVL
 86

	)

96 
	#EVDIAG_EPCREG_FAILED
 87

	)

97 
	#EVDIAG_MAPRDWR_BUSERR
 88

	)

98 
	#EVDIAG_MAPADDR_BUSERR
 89

	)

99 
	#EVDIAG_MAPWALK_BUSERR
 90

	)

100 
	#EVDIAG_MAP_BUSERR
 91

	)

101 
	#EVDIAG_MAPRDWR_FAILED
 92

	)

102 
	#EVDIAG_MAPADDR_FAILED
 93

	)

103 
	#EVDIAG_MAPWALK_FAILED
 94

	)

104 
	#EVDIAG_LOOPBACK_FAILED
 95

	)

105 
	#EVDIAG_EPCREG_BUSERR
 96

	)

108 
	#EVDIAG_CANTSEEMEM
 120

	)

109 
	#EVDIAG_BUSTAGSFAILED
 121

	)

110 
	#EVDIAG_NIBFAILED
 122

	)

111 
	#EVDIAG_BUSTAGDATA
 123

	)

112 
	#EVDIAG_BUSTAGADDR
 124

	)

113 
	#EVDIAG_CPUREENABLED
 125

	)

114 
	#EVDIAG_UNFIXABLE_EAROM
 126

	)

115 
	#EVDIAG_EAROM_CKSUM
 127

	)

116 
	#EVDIAG_EAROM_REPAIRED
 128

	)

117 
	#EVDIAG_ERTOIP
 129

	)

118 
	#EVDIAG_ERTOIP_COR
 130

	)

121 
	#EVDIAG_CCJOIN
 140

	)

122 
	#EVDIAG_WG
 141

	)

125 
	#EVDIAG_FPU
 142

	)

128 
	#EVDIAG_WRCPUINFO
 240

	)

133 
	#EVDIAG_TESTING_CCTAGS
 241

	)

134 
	#EVDIAG_POD_CMDERR
 242

	)

135 
	#EVDIAG_TESTING_DCACHE
 243

	)

136 
	#EVDIAG_TESTING_ICACHE
 244

	)

137 
	#EVDIAG_TESTING_SCACHE
 245

	)

138 
	#EVDIAG_INITING_CACHES
 246

	)

139 
	#EVDIAG_INITING_SCACHE
 247

	)

140 
	#EVDIAG_TESTING_CCJOIN
 248

	)

141 
	#EVDIAG_TESTING_CCWG
 249

	)

143 
	#EVDIAG_RETURNING
 250

	)

144 
	#EVDIAG_PANIC
 251

	)

145 
	#EVDIAG_NMI
 252

	)

146 
	#EVDIAG_DEBUG
 253

	)

	@/usr/include/sys/EVEREST/io4.h

18 #i‚de‡
_SYS_IO4_


19 
	#_SYS_IO4_


	)

23 #i‡
_LANGUAGE_C


24 
	~<sys/ty≥s.h
>

25 
	~<sys/£ma.h
>

26 
	~<sys/dmam≠.h
>

27 
	~<sys/pio.h
>

28 
	~<sys/EVEREST/evîe°.h
>

37 
	#IO4_TYPE_VALUE
 3

	)

38 
	#IO4_REV_LEVEL
 1

	)

40 
	#IO4_TYPE_MASK
 0x0f

	)

41 
	#IO4_TYPE_SHFT
 0

	)

42 
	#IO4_REV_MASK
 0xf0

	)

43 
	#IO4_REV_SHFT
 4

	)

49 
	#IO4_MAX_PADAPS
 8

	)

54 
	#IO4_ADAP_NULL
 0

	)

55 
	#IO4_ADAP_SCSI
 0x0D

	)

56 
	#IO4_ADAP_EPC
 0x0E

	)

57 
	#IO4_ADAP_FCHIP
 0x0F

	)

58 
	#IO4_ADAP_SCIP
 0x1D

	)

64 
	#IO4_ADAP_VMECC
 0x11

	)

65 
	#IO4_ADAP_HIPPI
 0x12

	)

66 
	#IO4_ADAP_FCG
 0x20

	)

67 
	#IO4_ADAP_DANG
 0x2B

	)

68 
	#IO4_ADAP_GIOCC
 0x42

	)

69 
	#IO4_ADAP_HIP1A
 0x30

	)

70 
	#IO4_ADAP_HIP1B
 0x31

	)

72 #i‡
_LANGUAGE_C


74 
	sio4
 {

75 
	m¶Ÿ
;

76 
__psunsig√d_t
 
	mm≠øm
;

77 } 
	tio4_t
;

78 
io4_t
 
io4
[
EV_MAX_IO4S
];

84 
	süm≠
 {

85 
lock_t
 
	mlock
;

86 
sv_t
 
	mout
;

87 
m≠
 *
	mm≠
;

88 
m≠
 *
	mdúty
;

89 
uöt
 *
	mèbÀ
;

90 
uöt
 
	msize
;

91 
i›addr_t
 
	mio°¨t
;

92 
i›addr_t
 
	mi€nd
;

93 } 
	tüm≠_t
;

104 
	#IAMAP_L1_BLOCKSIZE
 0x200000

	)

105 
	#IAMAP_L2_BLOCKSIZE1
 0x800

	)

106 
	#IAMAP_L2_BLOCKSIZE
 0x1000

	)

107 
	#IAMAP_L1_BLOCKSHIFT
 21

	)

108 
	#IAMAP_L2_BLOCKSHIFT
 12

	)

110 
	#IAMAP_L1_ADDRSHIFT
 11

	)

111 
	#IAMAP_L2_FLAG
 0xc0000000

	)

113 
	#IAMAP_L1_ADDR
(
m
,
a
Ë((m)+((◊)>>
IAMAP_L1_BLOCKSHIFT
Ë<< 3))

	)

114 
	#IAMAP_L1_ADDR_PAIR
(
m
,
a
Ë((m)+((◊)>>(
IAMAP_L1_BLOCKSHIFT
+1)Ë<< 4))

	)

116 
	#IAMAP_L1_ENTRY
(
a
Ë(◊)>>
IAMAP_L1_ADDRSHIFT
)

	)

117 
	#IAMAP_L2_ENTRY
(
a
Ë(◊)>>
IAMAP_L1_ADDRSHIFT
 | 
IAMAP_L2_FLAG
)

	)

119 
	#DMA_TYPES
 3

	)

120 
	#DMA_SCSI
 0

	)

121 
	#DMA_VMEA24
 1

	)

122 
	#DMA_VMEA32
 2

	)

131 
	siﬂd≠
 {

132 
unch¨
 
	m¶Ÿ
;

133 
unch¨
 
	m∑d≠
;

134 
unch¨
 
	mty≥
;

135 
unch¨
 
	mm≠ømid
;

136 
__psunsig√d_t
 
	mswö
;

137 
__psunsig√d_t
 
	mlwö
;

138 } 
	tiﬂd≠_t
;

153 #ifde‡
IP19


154 
	#SWINDOW_BASE
 
	`SBUS_TO_KVU
(0x10000000)

	)

155 
	#SWINDOW_CEILING
 
	`SBUS_TO_KVU
(0x18000000)

	)

157 
	#SWINDOW_BASE
 0x9000000400000000Œ

	)

158 
	#SWINDOW_CEILING
 0x9000000408000000Œ

	)

161 
	#SWINDOW_PPFN
 0x00400000

	)

163 
	#SWIN_REGIONSHIFT
 19

	)

164 
	#SWIN_PADAPSHIFT
 16

	)

166 
	#SWIN_BASE
(
ªgi⁄
,
∑d≠
Ë(
SWINDOW_BASE
 + \

167 (
ªgi⁄
 << 
SWIN_REGIONSHIFT
) + \

168 (
∑d≠
 << 
SWIN_PADAPSHIFT
))

	)

169 
	#SWIN_REGION
(
addr
Ë(((
__psunsig√d_t
Ôddr>>
SWIN_REGIONSHIFT
Ë& 0xF)

	)

170 
	#SWIN_PADAP
(
addr
Ë(((
__psunsig√d_t
Ôddr>>
SWIN_PADAPSHIFT
Ë& 0x7)

	)

172 
	#SWIN_SIZE
 0x00010000

	)

179 
	#LWINDOW_BASE
 0x9000000440000000Œ

	)

180 
	#LWINDOW_CEILING
 0x9000000600000000Œ

	)

182 
	#LWIN_SIZE
 0x08000000

	)

183 
	#LWIN_REGIONSHIFT
 30

	)

184 
	#LWIN_PADAPSHIFT
 27

	)

190 
	#LWIN_PFN_BASE
 0x00400000

	)

191 
	#LWIN_PFN_WINDOWSHIFT
 18

	)

192 
	#LWIN_PFN_PADAPSHIFT
 15

	)

193 
	#LWIN_PFN
(
wödow
,
∑d≠
Ë(
LWIN_PFN_BASE
 | \

194 
wödow
 << 
LWIN_PFN_WINDOWSHIFT
 | \

195 
∑d≠
 << 
LWIN_PFN_PADAPSHIFT
)

	)

196 
	#LWIN_WINDOW
(
p‚
Ë’‚ >> 
LWIN_PFN_WINDOWSHIFT
Ë& 0x7

	)

197 
	#LWIN_PADAP
(
p‚
Ë’‚ >> 
LWIN_PFN_PADAPSHIFT
Ë& 0x7

	)

202 
	#LWIN_SYSPFN_BASE
 (0x400000000Œ >> 
PNUMSHFT
)

	)

203 
	#LWIN_SYSPFN_WINDOWSHIFT
 (30-
PNUMSHFT
Ë

	)

204 
	#LWIN_SYSPFN_PADAPSHIFT
 (27-
PNUMSHFT
Ë

	)

205 
	#LWIN_SYSPFN
(
wödow
,
∑d≠
Ë(
LWIN_SYSPFN_BASE
 | \

206 
wödow
 << 
LWIN_SYSPFN_WINDOWSHIFT
 | \

207 
∑d≠
 << 
LWIN_SYSPFN_PADAPSHIFT
)

	)

208 
	#LWIN_SYSWINDOW
(
p‚
Ë’‚ >> 
LWIN_SYSPFN_WINDOWSHIFT
Ë& 0x7

	)

209 
	#LWIN_SYSPADAP
(
p‚
Ë’‚ >> 
LWIN_SYSPFN_PADAPSHIFT
Ë& 0x7

	)

211 
	#L¨geWödow
(
wödow
Ë(wödow | 0x10)

	)

212 
	#SmÆlWödow
(
wödow
Ë(wödow | 0x80000)

	)

234 
	#IO4_MAPRAM_SIZE
 0x10000

	)

235 
	#IOA_MAPRAM_SIZE
 0x4000

	)

241 
	#IO4_CONFIGADDR
(
¶Ÿ
,
ªg
Ë
	`EV_CONFIGADDR
(¶Ÿ,0,ªg)

	)

242 
	#IO4_GETCONF_REG
(
¶Ÿ
,
ªg
Ë
	`EV_GETCONFIG_REG
(¶Ÿ,0,ªg)

	)

243 
	#IO4_GETCONF_REG_NOWAR
(
¶Ÿ
,
ªg
Ë
	`EV_GETCONFIG_REG_NOWAR
(¶Ÿ,0,ªg)

	)

244 
	#IO4_SETCONF_REG
(
¶Ÿ
,
ªg
,
vÆue
Ë
	`EV_SETCONFIG_REG
(¶Ÿ,0,ªg,vÆue)

	)

246 
	#IO4_CONF_LW
 0x00

	)

247 
	#IO4_CONF_SW
 0x01

	)

248 
	#IO4_CONF_REVTYPE
 0x01

	)

249 
	#IO4_CONF_ADAP
 0x02

	)

250 
	#IO4_CONF_INTRVECTOR
 0x03

	)

251 
	#IO4_CONF_GFXCOMMAND
 0x04

	)

252 
	#IO4_CONF_IODEV0
 0x05

	)

253 
	#IO4_CONF_IODEV1
 0x06

	)

254 
	#IO4_CONF_IBUSERROR
 0x07

	)

255 
	#IO4_CONF_IBUSERRORCLR
 0x08

	)

256 
	#IO4_CONF_EBUSERROR
 0x09

	)

257 
	#IO4_CONF_EBUSERRORCLR
 0x0A

	)

258 
	#IO4_CONF_EBUSERROR1
 0x0B

	)

259 
	#IO4_CONF_EBUSERROR2
 0x0C

	)

260 
	#IO4_CONF_RESET
 0x0D

	)

261 
	#IO4_CONF_ENDIAN
 0x0E

	)

262 
	#IO4_CONF_ETIMEOUT
 0x0F

	)

263 
	#IO4_CONF_RTIMEOUT
 0x10

	)

264 
	#IO4_CONF_INTRMASK
 0x11

	)

265 
	#IO4_CONF_CACHETAG0L
 0x12

	)

266 
	#IO4_CONF_CACHETAG0U
 0x13

	)

267 
	#IO4_CONF_CACHETAG1L
 0x14

	)

268 
	#IO4_CONF_CACHETAG1U
 0x15

	)

269 
	#IO4_CONF_CACHETAG2L
 0x16

	)

270 
	#IO4_CONF_CACHETAG2U
 0x17

	)

271 
	#IO4_CONF_CACHETAG3L
 0x18

	)

272 
	#IO4_CONF_CACHETAG3U
 0x19

	)

274 #i‡
_LANGUAGE_C


276 
	siBusEº‹
 {

277 
	munu£d
 :13,

278 
	miﬂ
 :3,

279 
	mcomm™d
 :1,

280 
	mpioRódRe•Cmnd
 :1,

281 
	mdmaWrôeComm™d
 :1,

282 
	mdmaWrôeD©a
 :1,

283 
	mpioRódRe•D©a
 :1,

284 
	mpioWrôeComm™d
 :1,

285 
	mpioWrôeD©a
 :1,

286 
	mpioRódComm™d
 :1,

287 
	mgfxWrôeComm™d
 :1,

288 
	mdmaRódRe•Comm™d
 :1,

289 
	müRe•D©a
 :1,

290 
	m⁄eLevñAddr
 :1,

291 
	m⁄eLevñD©a
 :1,

292 
	mtwoLevñAddr
 :1,

293 
	mfú°LevñD©a
 :1,

294 
	m°icky
 :1;

295 } 
	tiBusEº‹_t
;

299 #ifde‡
_KERNEL


300 #ifde‡
_LANGUAGE_C


302 
üm≠_öô
(
üm≠_t
*,
ul⁄g
,ul⁄g,
i›addr_t
,iopaddr_t);

303 
üm≠_m≠
(
üm≠_t
*,
dmam≠_t
*);

304 
ul⁄g
 
io4_vút›‚
(*);

305 
	~<sys/hwgøph.h
>

306 
gøph_îr‹_t
 
io4_hwgøph_lookup
(
uöt
, 
vîãx_hdl_t
 *);

307 *
io•a˚_Æloc
(, 
ul⁄g
);

308 
uöt
 
ev_kvt›hy•num
(
ˇddr_t
);

309 
io4hù_öô
(
unch¨
, unchar, unchar, );

310 
	gpiom≠
;

311 
pio_m≠‰ì_ibus
(
piom≠
 *);

312 
pio_m≠fix_ibus
(
piom≠
 *);

313 
smÆl_wödow
(
ˇddr_t
, *, *, *);

314 
œrge_wödow
(
ˇddr_t
, *, *, *);

315 #i‚de‡
_STANDALONE


316 
d™g_öô
(
unch¨
, unchar, unchar);

	@/usr/include/sys/EVEREST/mc3.h

18 #i‚de‡
__SYS_MC3_H__


19 
	#__SYS_MC3_H__


	)

23 
	#MC3_TYPE_VALUE
 0x02

	)

24 
	#MC3_REV_LEVEL
 0x00

	)

26 
	#MC3_NUM_LEAVES
 2

	)

27 
	#MC3_BANKS_PER_LEAF
 4

	)

28 
	#MC3_NUM_BANKS
 (
MC3_NUM_LEAVES
 * 
MC3_BANKS_PER_LEAF
)

	)

30 
	#MC3_NOBANK
 7

	)

32 
	#MC3_BIST_TOUT
 0xb2d050

	)

34 
	#MC3_ERRINT_ENABLE
 0x10000

	)

35 
	#MC3_BIST_MA_REV
 0x30000

	)

40 
	#MC3_BANKENB
 0x00

	)

41 
	#MC3_TYPE
 0x01

	)

42 
	#MC3_REVLEVEL
 0x02

	)

43 
	#MC3_ACCESS
 0x03

	)

44 
	#MC3_MEMERRINT
 0x04

	)

45 
	#MC3_EBUSERRINT
 0x05

	)

46 
	#MC3_BISTRESULT
 0x06

	)

47 
	#MC3_DRSCTIMEOUT
 0x07

	)

48 
	#MC3_EBUSERROR
 0x08

	)

49 
	#MC3_REFRESHCNT
 0x09

	)

50 
	#MC3_LEAFCTLENB
 0x0®

	)

51 
	#MC3_RESET
 0x0‡

	)

56 
	#MC3_BANK
(
_Àaf
, 
_bnk
, 
_ªg
Ë(_Àaf*0x40 + _bnk*0x4 + _ªg + 0x10)

	)

57 
	#BANK_SIZE
 0

	)

58 
	#BANK_BASE
 1

	)

59 
	#BANK_IF
 2

	)

60 
	#BANK_IP
 3

	)

65 
	#MC3_LEAF
(
_Àaf
, 
_ªg
Ë(_Àaf*0x40 + _ªg)

	)

66 
	#MC3_LEAF1_OFFSET
 0x40

	)

67 
	#MC3LF_ERROR
 0x20

	)

68 
	#MC3LF_ERRORCLR
 0x21

	)

69 
	#MC3LF_ERRADDRHI
 0x22

	)

70 
	#MC3LF_ERRADDRLO
 0x23

	)

71 
	#MC3LF_BIST
 0x24

	)

72 
	#MC3LF_SYNDROME0
 0x30

	)

73 
	#MC3LF_SYNDROME1
 0x31

	)

74 
	#MC3LF_SYNDROME2
 0x32

	)

75 
	#MC3LF_SYNDROME3
 0x33

	)

83 
	#MC3_INTERLEAV
(
code
Ë(1<<(code))

	)

90 
	#INTLV_ONEWAY
 0

	)

91 
	#INTLV_STABLE
 1

	)

92 
	#INTLV_OPTIMAL
 2

	)

105 
	#MC3_BENB
(
_l
, 
_b
) \

106 –1 << ( (((
_b
)&0x2Ë>> 1Ë* 4 + (
_l
)*2 + ((_bË& 0x1)Ë)

	)

108 
	#MC3_BENB_LF0
 (
	`MC3_BENB
(0,0)|MC3_BENB(0,1)|MC3_BENB(0,2)|MC3_BENB(0,3))

	)

109 
	#MC3_BENB_LF1
 (
	`MC3_BENB
(1,0)|MC3_BENB(1,1)|MC3_BENB(1,2)|MC3_BENB(1,3))

	)

115 
	#MC3_GETLEAFREG
(
s
,
l
,
r
Ë
	`EV_GETCONFIG_REG
(s,l,r)

	)

116 
	#MC3_SETLEAFREG
(
s
,
l
,
r
,
v
Ë
	`EV_SETCONFIG_REG
(s,l,r,v)

	)

118 
	#MC3_GETREG
(
s
,
r
Ë
	`EV_GETCONFIG_REG
(s,0,r)

	)

119 
	#MC3_SETREG
(
s
,
r
,
v
Ë
	`EV_SETCONFIG_REG
(s,0,r,v)

	)

121 
	#MC3_GETLEAFREG_NOWAR
(
s
,
l
,
r
Ë
	`EV_GETCONFIG_REG_NOWAR
(s,l,r)

	)

122 
	#MC3_GETREG_NOWAR
(
s
,
r
Ë
	`EV_GETCONFIG_REG_NOWAR
(s,0,r)

	)

124 #ifde‡
_LANGUAGE_C


125 
mc3_öô
();

126 
mc3_öå_mem_îr‹
();

127 
mc3_öå_ebus_îr‹
();

128 
mc3_decode_addr
((*)(*, ...), 
uöt
, uint);

129 #i‚de‡
_STANDALONE


130 
	`mc3_gë_sbe_cou¡
(, *, *);

131 
	`mc3_˛r_sbe_cou¡
();

	@/usr/include/sys/SN/io.h

13 #i‚def 
__SYS_SN_IO_H__


14 
	#__SYS_SN_IO_H__


	)

16 
	#IIO_ITTE_BASE
 0x400160

	)

17 
	#IIO_ITTE
(
bigwö
Ë(
IIO_ITTE_BASE
 + 8*(bigwö))

	)

19 
	#IIO_ITTE_OFFSET_BITS
 5

	)

20 
	#IIO_ITTE_OFFSET_MASK
 ((1<<
IIO_ITTE_OFFSET_BITS
)-1)

	)

21 
	#IIO_ITTE_OFFSET_SHIFT
 0

	)

23 
	#IIO_ITTE_WIDGET_BITS
 4

	)

24 
	#IIO_ITTE_WIDGET_MASK
 ((1<<
IIO_ITTE_WIDGET_BITS
)-1)

	)

25 
	#IIO_ITTE_WIDGET_SHIFT
 8

	)

27 
	#IIO_ITTE_IOSP
 1

	)

28 
	#IIO_ITTE_IOSP_MASK
 1

	)

29 
	#IIO_ITTE_IOSP_SHIFT
 12

	)

30 
	#HUB_PIO_MAP_TO_MEM
 0

	)

31 
	#HUB_PIO_MAP_TO_IO
 1

	)

33 
	#IIO_ITTE_INVALID_WIDGET
 3

	)

35 
	#IIO_ITTE_PUT
(
«sid
, 
bigwö
, 
io_‹_mem
, 
widgë
, 
addr
) \

36 
	`REMOTE_HUB_S
((
«sid
), 
	`IIO_ITTE
(
bigwö
), \

37 (((((
addr
Ë>> 
BWIN_SIZE_BITS
) & \

38 
IIO_ITTE_OFFSET_MASK
Ë<< 
IIO_ITTE_OFFSET_SHIFT
) | \

39 (
io_‹_mem
 << 
IIO_ITTE_IOSP_SHIFT
) | \

40 (((
widgë
Ë& 
IIO_ITTE_WIDGET_MASK
Ë<< 
IIO_ITTE_WIDGET_SHIFT
)))

	)

42 
	#IIO_ITTE_DISABLE
(
«sid
, 
bigwö
) \

43 
	`IIO_ITTE_PUT
((
«sid
), (
bigwö
), 
HUB_PIO_MAP_TO_MEM
, \

44 
IIO_ITTE_INVALID_WIDGET
, 0)

	)

46 
	#IIO_ITTE_GET
(
«sid
, 
bigwö
Ë
	`REMOTE_HUB_ADDR
(“asid), 
	`IIO_ITTE
(bigwö))

	)

54 
	#IIO_IOPRB
(
_x
Ë(
IIO_IOPRB_0
 + ( ( (_xË< 
HUB_WIDGET_ID_MIN
 ? \

55 (
_x
) : \

56 (
_x
Ë- (
HUB_WIDGET_ID_MIN
-1)Ë<< 3Ë)

	)

58 #i‡
deföed
 (
SN0
)

59 
	~<sys/SN/SN0/hubio.h
>

60 #ñi‡
deföed
 (
SN1
)

61 
	~<sys/SN/SN1/hubio.h
>

64 #ifde‡
SN1


69 #i‡(
deföed
(
_LANGUAGE_C
Ë|| deföed(
_LANGUAGE_C_PLUS_PLUS
))

74 
hubii_ixâ_gë
(
vîãx_hdl_t
 
widgë_vhdl
, 
ii_ixâ_u_t
 *
ixâ
);

75 
hubii_ixâ_£t
(
vîãx_hdl_t
 
widgë_vhdl
, 
ii_ixâ_u_t
 *
ixâ
);

	@/usr/include/sys/dnlc.h

40 #i‚de‡
_FS_DNLC_H


41 
	#_FS_DNLC_H


	)

51 
	#NC_NAMLEN
 31

	)

53 
	gbhv_desc
;

54 
	g¸ed
;

55 
	gvnode
;

56 
	gnc_hash_s
;

58 
	snˇche_s
 {

59 
nˇche_s
 *
	mhash_√xt
;

60 
nˇche_s
 **
	mhash_¥evp
;

61 
nˇche_s
 *
	mÃu_√xt
;

62 
nˇche_s
 *
	mÃu_¥ev
;

63 
nc_hash_s
 *
	mhash_chaö
;

64 
vnode
 *
	mvp
;

65 
bhv_desc
 *
	mbdp
;

66 
vnode
 *
	mdp
;

67 
¸ed
 *
	m¸ed
;

68 
uöt64_t
 
	mvp_ˇp
;

69 
uöt64_t
 
	mdp_ˇp
;

70 
u_ch¨
 
	m«mÀn
;

71 
	m«me
[
NC_NAMLEN
];

72 
off_t
 
	moff£t
;

73 } 
	tnˇche_t
;

78 
	snc°©s
 {

79 
u_öt
 
	mhôs
;

80 
u_öt
 
	mmis£s
;

81 
u_öt
 
	míãrs
;

82 
u_öt
 
	mdbl_íãrs
;

83 
u_öt
 
	ml⁄g_íãr
;

84 
u_öt
 
	ml⁄g_look
;

85 
u_öt
 
	mÃu_em±y
;

86 
u_öt
 
	mpurges
;

87 
u_öt
 
	mvfs_purges
;

88 
u_öt
 
	mªmoves
;

89 
u_öt
 
	m£¨ches
;

90 
u_öt
 
	m°Æe_hôs
;

91 
u_öt
 
	m°ïs
;

92 
u_öt
 
	m√g_íãrs
;

93 
u_öt
 
	m√g_hôs
;

94 
u_öt
 
	m∑d
;

95 } 
	tnc°©s_t
;

97 
	#ANYCRED
 ((
¸ed
 *)(
__psöt_t
)-1)

	)

98 
	#NOCRED
 ((
¸ed
 *)(
__psöt_t
)0)

	)

100 #ifde‡
_KERNEL


104 
	g∑th«me
;

105 
	gvfs
;

107 
	sncÁ°d©a
 {

108 *
	m«me
;

109 
u_sh‹t
 
	m«mÀn
;

110 
u_ch¨
 
	mÊags
;

111 
u_ch¨
 
	mvnowaô
;

112 
off_t
 
	moff£t
;

113 *
	mhash
;

114 } 
	tncÁ°d©a_t
;

116 
d∆c_íãr
(
vnode
 *, *, 
bhv_desc
 *,

117 
¸ed
 *);

118 
d∆c_íãr_Á°
(
vnode
 *, 
ncÁ°d©a
 *,

119 
bhv_desc
 *, 
¸ed
 *);

120 
d∆c_öô
();

121 
bhv_desc
 *
d∆c_lookup
(
vnode
 *, *, 
¸ed
 *, 
uöt
);

122 
bhv_desc
 *
d∆c_lookup_Á°
(
vnode
 *, *, 
∑th«me
 *,

123 
ncÁ°d©a
 *, 
¸ed
 *, 
uöt
);

124 
bhv_desc
 *
d∆c_lookup_fuŒ
(
vnode
 *, *, 
∑th«me
 *,

125 
ncÁ°d©a
 *, 
¸ed
 *, 
uöt
,

126 
uöt64_t
 *);

127 
d∆c_purge_vp
(
vnode
 *);

128 
d∆c_purge_vf•
(
vfs
 *, );

129 
d∆c_ªmove
(
vnode
 *, *);

130 
d∆c_ªmove_Á°
(
vnode
 *, 
ncÁ°d©a
 *);

131 
d∆c_ªmove_vp
(
vnode
 *);

	@/usr/include/sys/loaddrs.h

21 #ifde‡
IP19


22 
	~<sys/EVEREST/IP19addrs.h
>

25 #ifde‡
IP20


26 
	~<sys/IP20.h
>

29 #ifde‡
IP21


30 
	~<sys/EVEREST/IP21addrs.h
>

33 #ifde‡
IP22


34 
	~<sys/IP22.h
>

37 #ifde‡
IP25


38 
	~<sys/EVEREST/IP25addrs.h
>

41 #ifde‡
IP26


42 
	~<sys/IP26.h
>

45 #ifde‡
IP27


46 
	~<sys/SN/addrs.h
>

49 #ifde‡
IP28


50 
	~<sys/IP22.h
>

53 #ifde‡
IP30


54 
	~<sys/RACER/IP30.h
>

57 #ifde‡
IP32


58 
	~<sys/IP32.h
>

61 #ifde‡
IPMHSIM


62 
	~<sys/IPMHSIM.h
>

65 #ifde‡
IP35


66 
	~<sys/SN/addrs.h
>

	@/usr/include/sys/EVEREST/IP19addrs.h

13 #i‚de‡
__SYS_EVEREST_ADDRS_H__


14 
	#__SYS_EVEREST_ADDRS_H__


	)

94 
	#PHYS_RAMBASE
 0x00000000

	)

95 
	#K0_RAMBASE
 
	`PHYS_TO_K0
(
PHYS_RAMBASE
)

	)

96 
	#GDA_ADDR
 
	`SBUS_TO_KVU
(0x00000400)

	)

97 
	#SYSPARAM_ADDR
 
	`SBUS_TO_KVU
(0x00001000)

	)

98 
	#EVCFGINFO_ADDR
 
	`SBUS_TO_KVU
(0x00002000)

	)

99 
	#EVERROR_ADDR
 
	`SBUS_TO_KVU
(0x00002800)

	)

100 
	#EVERROR_EXT_ADDR
 
	`SBUS_TO_KVU
(0x00000a00)

	)

101 
	#MPCONF_ADDR
 
	`SBUS_TO_KVU
(0x00003000)

	)

103 #i‡
_MIPS_SIM
 =
_ABI64


104 
	#SYMMON_STACK_SIZE
 0x2000

	)

106 
	#SYMMON_STACK_SIZE
 0x1000

	)

109 
	#SYMMON_STACK_ADDR
(
_x
Ë(
	`PHYS_TO_K0
(0x00006000) + \

110 
SYMMON_STACK_SIZE
 * (
_x
))

	)

111 
	#SYMMON_STACK
 
	`SYMMON_STACK_ADDR
(0)

	)

113 
	#EARLY_ARCS_STACK
 
	`PHYS_TO_K0
(0x00007000)

	)

114 
	#NODEBUGUNIX_ADDR
 
	`PHYS_TO_K0
(0x00004000)

	)

115 
	#FREEMEM_BASE
 
	`PHYS_TO_K0
(0x02000000)

	)

121 
	#IP19PROM_RESTART
 
	`SBUS_TO_KVU
(0x1fc00008)

	)

122 
	#IP19PROM_RESLAVE
 
	`SBUS_TO_KVU
(0x1fc00010)

	)

123 
	#IP19PROM_PODMODE
 
	`SBUS_TO_KVU
(0x1fc00018)

	)

124 
	#IP19PROM_EPCUARTPOD
 
	`SBUS_TO_KVU
(0x1fc00020)

	)

125 
	#IP19PROM_FLASHLEDS
 
	`SBUS_TO_KVU
(0x1fc00028)

	)

127 
	#EV_PROM_RESTART
 
IP19PROM_RESTART


	)

128 
	#EV_PROM_RESLAVE
 
IP19PROM_RESLAVE


	)

129 
	#EV_PROM_PODMODE
 
IP19PROM_PODMODE


	)

130 
	#EV_PROM_EPCUARTPOD
 
IP19PROM_EPCUARTPOD


	)

131 
	#EV_PROM_FLASHLEDS
 
IP19PROM_FLASHLEDS


	)

136 
	#IP19PROM_STACK
 
	`PHYS_TO_K0
(0x00980000)

	)

137 
	#IP19PROM_BASE
 
	`SBUS_TO_KVU
(0x1fc00000)

	)

138 
	#IP19PROM_SIZE
 0x20000

	)

140 
	#PROM_BASE
 
	`PHYS_TO_K0
(0x01800000)

	)

141 
	#PROM_SIZE
 0x300000

	)

142 
	#DPROM_BASE
 
	`PHYS_TO_K0
(0x01c00000)

	)

143 
	#DPROM_SIZE
 0x400000

	)

144 
	#GFXPROM_BASE
 
	`PHYS_TO_K0
(0x01700000)

	)

145 
	#GFXPROM_SIZE
 0x100000

	)

146 
	#ENETBUFS_BASE
 0x01b00000

	)

147 
	#ENETBUFS_SIZE
 0x100000

	)

148 
	#FLASHBUF_BASE
 
	`PHYS_TO_K0
(0x01600000)

	)

149 
	#FLASHBUF_SIZE
 0x100000

	)

150 
	#SLAVESTACK_BASE
 
	`PHYS_TO_K0
(0x01580000)

	)

151 
	#SLAVESTACK_SIZE
 0x40000

	)

152 
	#IO4STACK_SIZE
 (128 * 1024)

	)

154 #i‡!
_LANGUAGE_ASSEMBLY


162 
	#CACHE_ERR_EFRAME
 (0x1000 - 
EF_SIZE
)

	)

163 
	#CACHE_ERR_ECCFRAME
 (
CACHE_ERR_EFRAME
 - 
ECCF_SIZE
)

	)

167 
	#CACHE_ERR_SP_PTR
 (
CACHE_ERR_ECCFRAME
 - 4 * ())

	)

168 
	#CACHE_ERR_STACK_SIZE
 (
NBPP
)

	)

	@/usr/include/sys/EVEREST/IP21addrs.h

13 #i‚de‡
__SYS_EVEREST_ADDRS_H__


14 
	#__SYS_EVEREST_ADDRS_H__


	)

18 
	~<sys/mùs_addr•a˚.h
>

99 
	#PHYS_RAMBASE
 0x00000000

	)

100 
	#K0_RAMBASE
 
	`PHYS_TO_K0
(
PHYS_RAMBASE
)

	)

102 
	#GDA_ADDR
 
	`PHYS_TO_K1
(0x00000400)

	)

103 
	#SYSPARAM_ADDR
 
	`PHYS_TO_K1
(0x00001000)

	)

104 
	#EVCFGINFO_ADDR
 
	`PHYS_TO_K1
(0x00002000)

	)

105 
	#EVERROR_ADDR
 
	`PHYS_TO_K1
(0x00002800)

	)

106 
	#EVERROR_EXT_ADDR
 
	`PHYS_TO_K1
(0x00000a00)

	)

107 
	#MPCONF_ADDR
 
	`PHYS_TO_K1
(0x00003000)

	)

108 
	#WGTESTMEM_ADDR
 
	`PHYS_TO_K1
(0x00003e00)

	)

109 
	#SYMMON_STACK_SIZE
 0x2000

	)

110 
	#SYMMON_STACK_ADDR
(
_x
Ë(
	`PHYS_TO_K0
(0x00006000) + \

111 
SYMMON_STACK_SIZE
 * (
_x
))

	)

112 
	#SYMMON_STACK
 
	`SYMMON_STACK_ADDR
(0)

	)

113 
	#EARLY_ARCS_STACK
 
	`PHYS_TO_K0
(0x00007000Ë

	)

114 
	#NODEBUGUNIX_ADDR
 
	`PHYS_TO_K0
(0x00006000)

	)

115 
	#FREEMEM_BASE
 
	`PHYS_TO_K0
(0x02000000)

	)

121 
	#IP21PROM_RESTART
 
	`PHYS_TO_K1
(0x1fc00008)

	)

122 
	#IP21PROM_RESLAVE
 
	`PHYS_TO_K1
(0x1fc00010)

	)

123 
	#IP21PROM_PODMODE
 
	`PHYS_TO_K1
(0x1fc00018)

	)

124 
	#IP21PROM_EPCUARTPOD
 
	`PHYS_TO_K1
(0x1fc00020)

	)

125 
	#IP21PROM_FLASHLEDS
 
	`PHYS_TO_K1
(0x1fc00028)

	)

130 #ifde‡
SABLE


131 
	#IP21PROM_STACK
 
	`PHYS_TO_K0
(0x00780000)

	)

133 
	#IP21PROM_STACK
 
	`PHYS_TO_K0
(0x00980000)

	)

135 
	#IP21PROM_BASE
 
	`PHYS_TO_K1
(0x1fc00000)

	)

136 
	#IP21PROM_SIZE
 0x40000

	)

138 
	#PROM_BASE
 
	`PHYS_TO_K0
(0x01800000)

	)

139 
	#PROM_SIZE
 0x300000

	)

140 
	#DPROM_BASE
 
	`PHYS_TO_K0
(0x01c00000)

	)

141 
	#DPROM_SIZE
 0x400000

	)

142 
	#GFXPROM_BASE
 
	`PHYS_TO_K0
(0x01700000)

	)

143 
	#GFXPROM_SIZE
 0x100000

	)

144 
	#ENETBUFS_BASE
 0x01b00000

	)

145 
	#ENETBUFS_SIZE
 0x100000

	)

146 
	#FLASHBUF_BASE
 
	`PHYS_TO_K0
(0x01600000)

	)

147 
	#FLASHBUF_SIZE
 0x100000

	)

148 
	#SLAVESTACK_BASE
 
	`PHYS_TO_K0
(0x01580000)

	)

149 
	#SLAVESTACK_SIZE
 0x40000

	)

150 
	#IO4STACK_SIZE
 (128 * 1024)

	)

152 
	#EV_PROM_RESTART
 
IP21PROM_RESTART


	)

153 
	#EV_PROM_RESLAVE
 
IP21PROM_RESLAVE


	)

154 
	#EV_PROM_PODMODE
 
IP21PROM_PODMODE


	)

155 
	#EV_PROM_EPCUARTPOD
 
IP21PROM_EPCUARTPOD


	)

156 
	#EV_PROM_FLASHLEDS
 
IP21PROM_FLASHLEDS


	)

	@/usr/include/sys/EVEREST/IP25addrs.h

13 #i‚de‡
__SYS_EVEREST_IP25ADDRS_H__


14 
	#__SYS_EVEREST_IP25ADDRS_H__


	)

94 
	#PHYS_RAMBASE
 0x00000000

	)

95 
	#K0_RAMBASE
 
	`PHYS_TO_K0
(
PHYS_RAMBASE
)

	)

97 
	#GDA_ADDR
 
	`PHYS_TO_K1
(0x00000400)

	)

98 
	#SYSPARAM_ADDR
 
	`PHYS_TO_K1
(0x00001000)

	)

99 
	#EVCFGINFO_ADDR
 
	`PHYS_TO_K1
(0x00002000)

	)

100 
	#EVERROR_ADDR
 
	`PHYS_TO_K1
(0x00002800)

	)

101 
	#EVERROR_EXT_ADDR
 
	`PHYS_TO_K1
(0x00000a00)

	)

102 
	#MPCONF_ADDR
 
	`PHYS_TO_K1
(0x00003000)

	)

104 
	#SYMMON_STACK_SIZE
 0x2000

	)

105 
	#SYMMON_STACK_ADDR
(
_x
Ë(
	`PHYS_TO_K1
(0x00006000) + \

106 
SYMMON_STACK_SIZE
 * (
_x
))

	)

107 
	#SYMMON_STACK
 
	`SYMMON_STACK_ADDR
(0)

	)

109 
	#EARLY_ARCS_STACK
 
	`PHYS_TO_K0
(0x00007000)

	)

110 
	#NODEBUGUNIX_ADDR
 
	`PHYS_TO_K0
(0x00004000)

	)

111 
	#FREEMEM_BASE
 
	`PHYS_TO_K0
(0x02000000)

	)

112 
	#IP25_CONFIG_ADDR
 
	`PHYS_TO_K1
(0x1fc00400)

	)

118 
	#IP25PROM_RESTART
 
	`SBUS_TO_KVU
(0x1fc00008)

	)

119 
	#IP25PROM_RESLAVE
 
	`SBUS_TO_KVU
(0x1fc00010)

	)

120 
	#IP25PROM_PODMODE
 
	`SBUS_TO_KVU
(0x1fc00018)

	)

121 
	#IP25PROM_EPCUARTPOD
 
	`SBUS_TO_KVU
(0x1fc00020)

	)

122 
	#IP25PROM_FLASHLEDS
 
	`SBUS_TO_KVU
(0x1fc00028)

	)

124 
	#EV_PROM_RESTART
 
IP25PROM_RESTART


	)

125 
	#EV_PROM_RESLAVE
 
IP25PROM_RESLAVE


	)

126 
	#EV_PROM_PODMODE
 
IP25PROM_PODMODE


	)

127 
	#EV_PROM_EPCUARTPOD
 
IP25PROM_EPCUARTPOD


	)

128 
	#EV_PROM_FLASHLEDS
 
IP25PROM_FLASHLEDS


	)

133 #ifde‡
SABLE


134 
	#IP25PROM_STACK
 
	`PHYS_TO_K0
(0x00780000)

	)

136 
	#IP25PROM_STACK
 
	`PHYS_TO_K0
(0x00980000)

	)

138 
	#IP25PROM_BASE
 
	`PHYS_TO_K1
(0x1fc00000)

	)

139 
	#IP25PROM_SIZE
 0x40000

	)

141 
	#PROM_BASE
 
	`PHYS_TO_K0
(0x01800000)

	)

142 
	#PROM_SIZE
 0x300000

	)

143 
	#DPROM_BASE
 
	`PHYS_TO_K0
(0x01c00000)

	)

144 
	#DPROM_SIZE
 0x400000

	)

145 
	#GFXPROM_BASE
 
	`PHYS_TO_K0
(0x01700000)

	)

146 
	#GFXPROM_SIZE
 0x100000

	)

147 
	#ENETBUFS_BASE
 0x01b00000

	)

148 
	#ENETBUFS_SIZE
 0x100000

	)

149 
	#FLASHBUF_BASE
 
	`PHYS_TO_K0
(0x01600000)

	)

150 
	#FLASHBUF_SIZE
 0x100000

	)

151 
	#SLAVESTACK_BASE
 
	`PHYS_TO_K0
(0x01580000)

	)

152 
	#SLAVESTACK_SIZE
 0x40000

	)

153 
	#IO4STACK_SIZE
 (128 * 1024)

	)

162 
	#CACHE_ERR_EFRAME
 (0x1000 - 
EF_SIZE
)

	)

163 
	#CACHE_ERR_ECCFRAME
 (
CACHE_ERR_EFRAME
 - 
ECCF_SIZE
)

	)

166 
	#CACHE_ERR_SP_PTR
 (
CACHE_ERR_ECCFRAME
 - 4 * ())

	)

167 
	#CACHE_ERR_STACK_SIZE
 (
NBPP
)

	)

	@
1
.
1
/usr/include
255
6578
X11display.c
X11display.h
X11window.c
X11window.h
arrstr.c
arrstr.h
config.h
dma.c
dumphex.c
ehcireg.h
fixme.c
gc.c
kmaddr.c
kutils.c
kvarr.c
kvarr.h
list.c
queue.c
trace.c
uhcireg.h
usb.h
usbcore.c
usbd.c
usbehci.c
usbhc.h
usbhub.c
usbio.h
usbioctl.h
usbtool.c
usbuhci.c
xusbnotifier.c
/usr/include/X11/Xatom.h
/usr/include/X11/Xlib.h
/usr/include/X11/Xos.h
/usr/include/X11/Xresource.h
/usr/include/X11/Xutil.h
/usr/include/X11/cursorfont.h
/usr/include/X11/keysymdef.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/ksys/ddmap.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/PCI/PCI_defs.h
/usr/include/sys/PCI/pciio.h
/usr/include/sys/atomic_ops.h
/usr/include/sys/buf.h
/usr/include/sys/cmn_err.h
/usr/include/sys/cpu.h
/usr/include/sys/cred.h
/usr/include/sys/ddi.h
/usr/include/sys/debug.h
/usr/include/sys/dmamap.h
/usr/include/sys/edt.h
/usr/include/sys/errno.h
/usr/include/sys/hwgraph.h
/usr/include/sys/invent.h
/usr/include/sys/iobus.h
/usr/include/sys/ioctl.h
/usr/include/sys/iograph.h
/usr/include/sys/kmem.h
/usr/include/sys/ksynch.h
/usr/include/sys/mload.h
/usr/include/sys/param.h
/usr/include/sys/pio.h
/usr/include/sys/poll.h
/usr/include/sys/sbd.h
/usr/include/sys/sema.h
/usr/include/sys/systm.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/X11/X.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/Xw32defs.h
/usr/include/getopt.h
/usr/include/internal/ctype_core.h
/usr/include/internal/errno_core.h
/usr/include/internal/sgimacros.h
/usr/include/internal/stdio_core.h
/usr/include/internal/stdlib_core.h
/usr/include/internal/string_core.h
/usr/include/internal/time_core.h
/usr/include/net/soioctl.h
/usr/include/netinet/in_systm.h
/usr/include/re_comp.h
/usr/include/sgidefs.h
/usr/include/standards.h
/usr/include/stdarg.h
/usr/include/stddef.h
/usr/include/strings.h
/usr/include/sys/EVEREST/IP19.h
/usr/include/sys/EVEREST/IP21.h
/usr/include/sys/EVEREST/IP25.h
/usr/include/sys/EVEREST/everest.h
/usr/include/sys/IP20.h
/usr/include/sys/IP22.h
/usr/include/sys/IP26.h
/usr/include/sys/IP32.h
/usr/include/sys/R10k.h
/usr/include/sys/RACER/IP30.h
/usr/include/sys/SN/SN0/IP27.h
/usr/include/sys/SN/SN0/hub.h
/usr/include/sys/SN/SN1/IP35.h
/usr/include/sys/SN/SN1/bedrock.h
/usr/include/sys/SN/router.h
/usr/include/sys/alenlist.h
/usr/include/sys/bsd_types.h
/usr/include/sys/capability.h
/usr/include/sys/conf.h
/usr/include/sys/cpumask.h
/usr/include/sys/driver.h
/usr/include/sys/fcntl.h
/usr/include/sys/file.h
/usr/include/sys/fstyp.h
/usr/include/sys/graph.h
/usr/include/sys/ioccom.h
/usr/include/sys/ioerror.h
/usr/include/sys/ktime.h
/usr/include/sys/mips_addrspace.h
/usr/include/sys/mon.h
/usr/include/sys/nodemask.h
/usr/include/sys/pthread.h
/usr/include/sys/select.h
/usr/include/sys/signal.h
/usr/include/sys/stream.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/termio.h
/usr/include/sys/tfp.h
/usr/include/sys/timeb.h
/usr/include/sys/timespec.h
/usr/include/sys/uio.h
/usr/include/sys/unistd.h
/usr/include/sys/uthread.h
/usr/include/sys/xtalk/xbow.h
/usr/include/utime.h
/usr/include/X11/Xmd.h
/usr/include/internal/locale_attr_core.h
/usr/include/internal/stdarg_core.h
/usr/include/internal/stddef_core.h
/usr/include/inttypes.h
/usr/include/sys/IP20nvram.h
/usr/include/sys/IP22nvram.h
/usr/include/sys/IP32flash.h
/usr/include/sys/PCI/bridge.h
/usr/include/sys/PCI/ioc3.h
/usr/include/sys/RACER/heart.h
/usr/include/sys/SN/SN0/addrs.h
/usr/include/sys/SN/SN0/arch.h
/usr/include/sys/SN/SN0/hubcore.h
/usr/include/sys/SN/SN0/hubio.h
/usr/include/sys/SN/SN0/hubmd.h
/usr/include/sys/SN/SN0/hubni.h
/usr/include/sys/SN/SN0/hubpi.h
/usr/include/sys/SN/SN0/router.h
/usr/include/sys/SN/SN1/addrs.h
/usr/include/sys/SN/SN1/arch.h
/usr/include/sys/SN/SN1/bdrkhspecregs.h
/usr/include/sys/SN/SN1/bdrkhspecregs_next.h
/usr/include/sys/SN/SN1/hubio.h
/usr/include/sys/SN/SN1/hubio_next.h
/usr/include/sys/SN/SN1/hublb.h
/usr/include/sys/SN/SN1/hublb_next.h
/usr/include/sys/SN/SN1/hubmd.h
/usr/include/sys/SN/SN1/hubmd_next.h
/usr/include/sys/SN/SN1/hubni.h
/usr/include/sys/SN/SN1/hubni_next.h
/usr/include/sys/SN/SN1/hubpi.h
/usr/include/sys/SN/SN1/hubpi_next.h
/usr/include/sys/SN/SN1/hubxb.h
/usr/include/sys/SN/SN1/hubxb_next.h
/usr/include/sys/SN/SN1/router.h
/usr/include/sys/SN/addrs.h
/usr/include/sys/SN/arch.h
/usr/include/sys/cdefs.h
/usr/include/sys/crime.h
/usr/include/sys/ds1286.h
/usr/include/sys/flock.h
/usr/include/sys/hpc1.h
/usr/include/sys/hpc3.h
/usr/include/sys/kabi.h
/usr/include/sys/ksignal.h
/usr/include/sys/kthread.h
/usr/include/sys/mace.h
/usr/include/sys/mc.h
/usr/include/sys/mkdev.h
/usr/include/sys/proc.h
/usr/include/sys/ptimers.h
/usr/include/sys/resource.h
/usr/include/sys/sigevent.h
/usr/include/sys/siginfo.h
/usr/include/sys/strmdep.h
/usr/include/sys/termios.h
/usr/include/sys/ucontext.h
/usr/include/sys/utime.h
/usr/include/sys/xlate.h
/usr/include/sys/xtalk/xbow_info.h
/usr/include/sys/xtalk/xswitch.h
/usr/include/sys/xtalk/xtalk.h
/usr/include/sys/xtalk/xwidget.h
/usr/include/stdint.h
/usr/include/sys/PCI/pic.h
/usr/include/sys/SN/kldir.h
/usr/include/sys/SN/slotnum.h
/usr/include/sys/SN/vector.h
/usr/include/sys/cdl.h
/usr/include/sys/extacct.h
/usr/include/sys/ktypes.h
/usr/include/sys/pcb.h
/usr/include/sys/pda.h
/usr/include/sys/procset.h
/usr/include/sys/q.h
/usr/include/sys/reg.h
/usr/include/sys/timers.h
/usr/include/sys/ttydev.h
/usr/include/wchar.h
/usr/include/internal/wchar_core.h
/usr/include/locale_attr.h
/usr/include/sys/SN/SN0/kldir.h
/usr/include/sys/SN/SN0/slotnum.h
/usr/include/sys/SN/SN1/kldir.h
/usr/include/sys/SN/SN1/slotnum.h
/usr/include/sys/SN/intr_public.h
/usr/include/sys/SN/war.h
/usr/include/sys/callo.h
/usr/include/sys/calloinfo.h
/usr/include/sys/clksupport.h
/usr/include/sys/hwperftypes.h
/usr/include/sys/immu.h
/usr/include/sys/sysinfo.h
/usr/include/wctype.h
/usr/include/internal/wctype_core.h
/usr/include/sys/EVEREST/epc.h
/usr/include/sys/EVEREST/evconfig.h
/usr/include/sys/SN/SN0/war.h
/usr/include/sys/SN/SN1/war.h
/usr/include/sys/SN/agent.h
/usr/include/sys/ksa.h
/usr/include/sys/mapped_kernel.h
/usr/include/sys/slotnum.h
/usr/include/sys/EVEREST/evaddrmacros.h
/usr/include/sys/EVEREST/evdiag.h
/usr/include/sys/EVEREST/io4.h
/usr/include/sys/EVEREST/mc3.h
/usr/include/sys/SN/io.h
/usr/include/sys/dnlc.h
/usr/include/sys/loaddrs.h
/usr/include/sys/EVEREST/IP19addrs.h
/usr/include/sys/EVEREST/IP21addrs.h
/usr/include/sys/EVEREST/IP25addrs.h
